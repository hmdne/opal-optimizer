(function(global_object) {
  "use strict";

  // @note
  //   A few conventions for the documentation of this file:
  //   1. Always use "//" (in contrast with "/**/")
  //   2. The syntax used is Yardoc (yardoc.org), which is intended for Ruby (se below)
  //   3. `@param` and `@return` types should be preceded by `JS.` when referring to
  //      JavaScript constructors (e.g. `JS.Function`) otherwise Ruby is assumed.
  //   4. `nil` and `null` being unambiguous refer to the respective
  //      objects/values in Ruby and JavaScript
  //   5. This is still WIP :) so please give feedback and suggestions on how
  //      to improve or for alternative solutions
  //
  //   The way the code is digested before going through Yardoc is a secret kept
  //   in the docs repo (https://github.com/opal/docs/tree/master).

  var console;

  // Detect the global object
  if (typeof(globalThis) !== 'undefined') { global_object = globalThis; }
  else if (typeof(global) !== 'undefined') { global_object = global; }
  else if (typeof(window) !== 'undefined') { global_object = window; }

  // Setup a dummy console object if missing
  if (typeof(global_object.console) === 'object') {
    console = global_object.console;
  } else if (global_object.console == null) {
    console = global_object.console = {};
  } else {
    console = {};
  }

  if (!('log' in console)) { console.log = function () {}; }
  if (!('warn' in console)) { console.warn = console.log; }

  if (typeof(global_object.Opal) !== 'undefined') {
    console.warn('Opal already loaded. Loading twice can cause troubles, please fix your setup.');
    return global_object.Opal;
  }

  var nil;

  // The actual class for BasicObject
  var BasicObject;

  // The actual Object class.
  // The leading underscore is to avoid confusion with window.Object()
  var _Object;

  // The actual Module class
  var Module;

  // The actual Class class
  var Class;

  // The Opal object that is exposed globally
  var Opal = global_object.Opal = {};

  // This is a useful reference to global object inside ruby files
  Opal.global = global_object;
  global_object.Opal = Opal;

  // Configure runtime behavior with regards to require and unsupported features
  Opal.config = {
    missing_require_severity: 'error',        // error, warning, ignore
    unsupported_features_severity: 'warning', // error, warning, ignore
    enable_stack_trace: true                  // true, false
  };

  // Minify common function calls
  var $has_own   = Object.hasOwnProperty;
  var $bind      = Function.prototype.bind;
  var $set_proto = Object.setPrototypeOf;
  var $slice     = Array.prototype.slice;
  var $splice    = Array.prototype.splice;

  // Nil object id is always 4
  var nil_id = 4;

  // Generates even sequential numbers greater than 4
  // (nil_id) to serve as unique ids for ruby objects
  var unique_id = nil_id;

  // Return next unique id
  Opal.uid = function() {
    unique_id += 2;
    return unique_id;
  };

  // Retrieve or assign the id of an object
  Opal.id = function(obj) {
    if (obj.$$is_number) return (obj * 2)+1;
    if (obj.$$id != null) {
      return obj.$$id;
    }
    $defineProperty(obj, '$$id', Opal.uid());
    return obj.$$id;
  };

  // Globals table
  Opal.gvars = {};

  // Exit function, this should be replaced by platform specific implementation
  // (See nodejs and chrome for examples)
  Opal.exit = function(status) { if (Opal.gvars.DEBUG) console.log('Exited with status '+status); };

  // keeps track of exceptions for $!
  Opal.exceptions = [];

  // @private
  // Pops an exception from the stack and updates `$!`.
  Opal.pop_exception = function() {
    Opal.gvars["!"] = Opal.exceptions.pop() || nil;
  };

  // Inspect any kind of object, including non Ruby ones
  Opal.inspect = function(obj) {
    if (obj === undefined) {
      return "undefined";
    }
    else if (obj === null) {
      return "null";
    }
    else if (!obj.$$class) {
      return obj.toString();
    }
    else {
      return obj.$inspect();
    }
  };

  function $defineProperty(object, name, initialValue) {
    if (typeof(object) === "string") {
      // Special case for:
      //   s = "string"
      //   def s.m; end
      // String class is the only class that:
      // + compiles to JS primitive
      // + allows method definition directly on instances
      // numbers, true, false and null do not support it.
      object[name] = initialValue;
    } else {
      Object.defineProperty(object, name, {
        value: initialValue,
        enumerable: false,
        configurable: true,
        writable: true
      });
    }
  }

  Opal.defineProperty = $defineProperty;

  Opal.slice = $slice;


  // Helpers
  // -----

  Opal.truthy = function(val) {
    return (val !== nil && val != null && (!val.$$is_boolean || val == true));
  };

  Opal.falsy = function(val) {
    return (val === nil || val == null || (val.$$is_boolean && val == false))
  };

  Opal.type_error = function(object, type, method, coerced) {
    object = object.$$class;

    if (coerced && method) {
      coerced = coerced.$$class;
      return Opal.TypeError.$new(
        "can't convert " + object + " into " + type +
        " (" + object + "#" + method + " gives " + coerced + ")"
      )
    } else {
      return Opal.TypeError.$new(
        "no implicit conversion of " + object + " into " + type
      )
    }
  };

  Opal.coerce_to = function(object, type, method, args) {
    if (type['$==='](object)) return object;

    if (!object['$respond_to?'](method)) {
      throw Opal.type_error(object, type);
    }

    if (args == null) args = [];
    return Opal.send(object, method, args);
  }

  Opal.respond_to = function(obj, jsid, include_all) {
    if (obj == null || !obj.$$class) return false;
    include_all = !!include_all;
    var body = obj[jsid];

    if (obj['$respond_to?'].$$pristine) {
      if (obj['$respond_to_missing?'].$$pristine) {
        return typeof(body) === "function" && !body.$$stub;
      } else {
        return Opal.send(obj, obj['$respond_to_missing?'], [jsid.substr(1), include_all]);
      }
    } else {
      return Opal.send(obj, obj['$respond_to?'], [jsid.substr(1), include_all]);
    }
  }


  // Constants
  // ---------
  //
  // For future reference:
  // - The Rails autoloading guide (http://guides.rubyonrails.org/v5.0/autoloading_and_reloading_constants.html)
  // - @ConradIrwin's 2012 post on “Everything you ever wanted to know about constant lookup in Ruby” (http://cirw.in/blog/constant-lookup.html)
  //
  // Legend of MRI concepts/names:
  // - constant reference (cref): the module/class that acts as a namespace
  // - nesting: the namespaces wrapping the current scope, e.g. nesting inside
  //            `module A; module B::C; end; end` is `[B::C, A]`

  // Get the constant in the scope of the current cref
  function const_get_name(cref, name) {
    if (cref) return cref.$$const[name];
  }

  // Walk up the nesting array looking for the constant
  function const_lookup_nesting(nesting, name) {
    var i, ii, constant;

    if (nesting.length === 0) return;

    // If the nesting is not empty the constant is looked up in its elements
    // and in order. The ancestors of those elements are ignored.
    for (i = 0, ii = nesting.length; i < ii; i++) {
      constant = nesting[i].$$const[name];
      if (constant != null) return constant;
    }
  }

  // Walk up the ancestors chain looking for the constant
  function const_lookup_ancestors(cref, name) {
    var i, ii, ancestors;

    if (cref == null) return;

    ancestors = Opal.ancestors(cref);

    for (i = 0, ii = ancestors.length; i < ii; i++) {
      if (ancestors[i].$$const && $has_own.call(ancestors[i].$$const, name)) {
        return ancestors[i].$$const[name];
      }
    }
  }

  // Walk up Object's ancestors chain looking for the constant,
  // but only if cref is missing or a module.
  function const_lookup_Object(cref, name) {
    if (cref == null || cref.$$is_module) {
      return const_lookup_ancestors(_Object, name);
    }
  }

  // Call const_missing if nothing else worked
  function const_missing(cref, name, skip_missing) {
    if (!skip_missing) {
      return (cref || _Object).$const_missing(name);
    }
  }

  // Look for the constant just in the current cref or call `#const_missing`
  Opal.const_get_local = function(cref, name, skip_missing) {
    var result;

    if (cref == null) return;

    if (cref === '::') cref = _Object;

    if (!cref.$$is_module && !cref.$$is_class) {
      throw new Opal.TypeError(cref.toString() + " is not a class/module");
    }

    result = const_get_name(cref, name);              if (result != null) return result;
    result = const_missing(cref, name, skip_missing); if (result != null) return result;
  };

  // Look for the constant relative to a cref or call `#const_missing` (when the
  // constant is prefixed by `::`).
  Opal.const_get_qualified = function(cref, name, skip_missing) {
    var result, cache, cached, current_version = Opal.const_cache_version;

    if (cref == null) return;

    if (cref === '::') cref = _Object;

    if (!cref.$$is_module && !cref.$$is_class) {
      throw new Opal.TypeError(cref.toString() + " is not a class/module");
    }

    if ((cache = cref.$$const_cache) == null) {
      $defineProperty(cref, '$$const_cache', Object.create(null));
      cache = cref.$$const_cache;
    }
    cached = cache[name];

    if (cached == null || cached[0] !== current_version) {
      ((result = const_get_name(cref, name))              != null) ||
      ((result = const_lookup_ancestors(cref, name))      != null);
      cache[name] = [current_version, result];
    } else {
      result = cached[1];
    }

    return result != null ? result : const_missing(cref, name, skip_missing);
  };

  // Initialize the top level constant cache generation counter
  Opal.const_cache_version = 1;

  // Look for the constant in the open using the current nesting and the nearest
  // cref ancestors or call `#const_missing` (when the constant has no :: prefix).
  Opal.const_get_relative = function(nesting, name, skip_missing) {
    var cref = nesting[0], result, current_version = Opal.const_cache_version, cache, cached;

    if ((cache = nesting.$$const_cache) == null) {
      $defineProperty(nesting, '$$const_cache', Object.create(null));
      cache = nesting.$$const_cache;
    }
    cached = cache[name];

    if (cached == null || cached[0] !== current_version) {
      ((result = const_get_name(cref, name))              != null) ||
      ((result = const_lookup_nesting(nesting, name))     != null) ||
      ((result = const_lookup_ancestors(cref, name))      != null) ||
      ((result = const_lookup_Object(cref, name))         != null);

      cache[name] = [current_version, result];
    } else {
      result = cached[1];
    }

    return result != null ? result : const_missing(cref, name, skip_missing);
  };

  // Register the constant on a cref and opportunistically set the name of
  // unnamed classes/modules.
  Opal.const_set = function(cref, name, value) {
    if (cref == null || cref === '::') cref = _Object;

    if (value.$$is_a_module) {
      if (value.$$name == null || value.$$name === nil) value.$$name = name;
      if (value.$$base_module == null) value.$$base_module = cref;
    }

    cref.$$const = (cref.$$const || Object.create(null));
    cref.$$const[name] = value;

    // Add a short helper to navigate constants manually.
    // @example
    //   Opal.$$.Regexp.$$.IGNORECASE
    cref.$$ = cref.$$const;

    Opal.const_cache_version++;

    // Expose top level constants onto the Opal object
    if (cref === _Object) Opal[name] = value;

    // Name new class directly onto current scope (Opal.Foo.Baz = klass)
    $defineProperty(cref, name, value);

    return value;
  };

  // Get all the constants reachable from a given cref, by default will include
  // inherited constants.
  Opal.constants = function(cref, inherit) {
    if (inherit == null) inherit = true;

    var module, modules = [cref], i, ii, constants = {}, constant;

    if (inherit) modules = modules.concat(Opal.ancestors(cref));
    if (inherit && cref.$$is_module) modules = modules.concat([Opal.Object]).concat(Opal.ancestors(Opal.Object));

    for (i = 0, ii = modules.length; i < ii; i++) {
      module = modules[i];

      // Do not show Objects constants unless we're querying Object itself
      if (cref !== _Object && module == _Object) break;

      for (constant in module.$$const) {
        constants[constant] = true;
      }
    }

    return Object.keys(constants);
  };

  // Remove a constant from a cref.
  Opal.const_remove = function(cref, name) {
    Opal.const_cache_version++;

    if (cref.$$const[name] != null) {
      var old = cref.$$const[name];
      delete cref.$$const[name];
      return old;
    }

    if (cref.$$autoload != null && cref.$$autoload[name] != null) {
      delete cref.$$autoload[name];
      return nil;
    }

    throw Opal.NameError.$new("constant "+cref+"::"+cref.$name()+" not defined");
  };

  // Setup some shortcuts to reduce compiled size
  Opal.$$ = Opal.const_get_relative;
  Opal.$$$ = Opal.const_get_qualified;


  // Modules & Classes
  // -----------------

  // A `class Foo; end` expression in ruby is compiled to call this runtime
  // method which either returns an existing class of the given name, or creates
  // a new class in the given `base` scope.
  //
  // If a constant with the given name exists, then we check to make sure that
  // it is a class and also that the superclasses match. If either of these
  // fail, then we raise a `TypeError`. Note, `superclass` may be null if one
  // was not specified in the ruby code.
  //
  // We pass a constructor to this method of the form `function ClassName() {}`
  // simply so that classes show up with nicely formatted names inside debuggers
  // in the web browser (or node/sprockets).
  //
  // The `scope` is the current `self` value where the class is being created
  // from. We use this to get the scope for where the class should be created.
  // If `scope` is an object (not a class/module), we simple get its class and
  // use that as the scope instead.
  //
  // @param scope        [Object] where the class is being created
  // @param superclass  [Class,null] superclass of the new class (may be null)
  // @param id          [String] the name of the class to be created
  // @param constructor [JS.Function] function to use as constructor
  //
  // @return new [Class]  or existing ruby class
  //
  Opal.allocate_class = function(name, superclass) {
    var klass, constructor;

    if (superclass != null && superclass.$$bridge) {
      // Inheritance from bridged classes requires
      // calling original JS constructors
      constructor = function() {
        var args = $slice.call(arguments),
            self = new ($bind.apply(superclass.$$constructor, [null].concat(args)))();

        // and replacing a __proto__ manually
        $set_proto(self, klass.$$prototype);
        return self;
      }
    } else {
      constructor = function(){};
    }

    if (name) {
      $defineProperty(constructor, 'displayName', '::'+name);
    }

    klass = constructor;

    $defineProperty(klass, '$$name', name);
    $defineProperty(klass, '$$constructor', constructor);
    $defineProperty(klass, '$$prototype', constructor.prototype);
    $defineProperty(klass, '$$const', {});
    $defineProperty(klass, '$$is_class', true);
    $defineProperty(klass, '$$is_a_module', true);
    $defineProperty(klass, '$$super', superclass);
    $defineProperty(klass, '$$cvars', {});
    $defineProperty(klass, '$$own_included_modules', []);
    $defineProperty(klass, '$$own_prepended_modules', []);
    $defineProperty(klass, '$$ancestors', []);
    $defineProperty(klass, '$$ancestors_cache_version', null);

    $defineProperty(klass.$$prototype, '$$class', klass);

    // By default if there are no singleton class methods
    // __proto__ is Class.prototype
    // Later singleton methods generate a singleton_class
    // and inject it into ancestors chain
    if (Opal.Class) {
      $set_proto(klass, Opal.Class.prototype);
    }

    if (superclass != null) {
      $set_proto(klass.$$prototype, superclass.$$prototype);

      if (superclass.$$meta) {
        // If superclass has metaclass then we have explicitely inherit it.
        Opal.build_class_singleton_class(klass);
      }
    }

    return klass;
  };


  function find_existing_class(scope, name) {
    // Try to find the class in the current scope
    var klass = const_get_name(scope, name);

    // If the class exists in the scope, then we must use that
    if (klass) {
      // Make sure the existing constant is a class, or raise error
      if (!klass.$$is_class) {
        throw Opal.TypeError.$new(name + " is not a class");
      }

      return klass;
    }
  }

  function ensureSuperclassMatch(klass, superclass) {
    if (klass.$$super !== superclass) {
      throw Opal.TypeError.$new("superclass mismatch for class " + klass.$$name);
    }
  }

  Opal.klass = function(scope, superclass, name) {
    var bridged;

    if (scope == null) {
      // Global scope
      scope = _Object;
    } else if (!scope.$$is_class && !scope.$$is_module) {
      // Scope is an object, use its class
      scope = scope.$$class;
    }

    // If the superclass is not an Opal-generated class then we're bridging a native JS class
    if (superclass != null && !superclass.hasOwnProperty('$$is_class')) {
      bridged = superclass;
      superclass = _Object;
    }

    var klass = find_existing_class(scope, name);

    if (klass) {
      if (superclass) {
        // Make sure existing class has same superclass
        ensureSuperclassMatch(klass, superclass);
      }
      return klass;
    }

    // Class doesn't exist, create a new one with given superclass...

    // Not specifying a superclass means we can assume it to be Object
    if (superclass == null) {
      superclass = _Object;
    }

    // Create the class object (instance of Class)
    klass = Opal.allocate_class(name, superclass);
    Opal.const_set(scope, name, klass);

    // Call .inherited() hook with new class on the superclass
    if (superclass.$inherited) {
      superclass.$inherited(klass);
    }

    if (bridged) {
      Opal.bridge(bridged, klass);
    }

    return klass;
  };

  // Define new module (or return existing module). The given `scope` is basically
  // the current `self` value the `module` statement was defined in. If this is
  // a ruby module or class, then it is used, otherwise if the scope is a ruby
  // object then that objects real ruby class is used (e.g. if the scope is the
  // main object, then the top level `Object` class is used as the scope).
  //
  // If a module of the given name is already defined in the scope, then that
  // instance is just returned.
  //
  // If there is a class of the given name in the scope, then an error is
  // generated instead (cannot have a class and module of same name in same scope).
  //
  // Otherwise, a new module is created in the scope with the given name, and that
  // new instance is returned back (to be referenced at runtime).
  //
  // @param  scope [Module, Class] class or module this definition is inside
  // @param  id   [String] the name of the new (or existing) module
  //
  // @return [Module]
  Opal.allocate_module = function(name) {
    var constructor = function(){};
    if (name) {
      $defineProperty(constructor, 'displayName', name+'.$$constructor');
    }

    var module = constructor;

    if (name)
      $defineProperty(constructor, 'displayName', name+'.constructor');

    $defineProperty(module, '$$name', name);
    $defineProperty(module, '$$prototype', constructor.prototype);
    $defineProperty(module, '$$const', {});
    $defineProperty(module, '$$is_module', true);
    $defineProperty(module, '$$is_a_module', true);
    $defineProperty(module, '$$cvars', {});
    $defineProperty(module, '$$iclasses', []);
    $defineProperty(module, '$$own_included_modules', []);
    $defineProperty(module, '$$own_prepended_modules', []);
    $defineProperty(module, '$$ancestors', [module]);
    $defineProperty(module, '$$ancestors_cache_version', null);

    $set_proto(module, Opal.Module.prototype);

    return module;
  };

  function find_existing_module(scope, name) {
    var module = const_get_name(scope, name);
    if (module == null && scope === _Object) module = const_lookup_ancestors(_Object, name);

    if (module) {
      if (!module.$$is_module && module !== _Object) {
        throw Opal.TypeError.$new(name + " is not a module");
      }
    }

    return module;
  }

  Opal.module = function(scope, name) {
    var module;

    if (scope == null) {
      // Global scope
      scope = _Object;
    } else if (!scope.$$is_class && !scope.$$is_module) {
      // Scope is an object, use its class
      scope = scope.$$class;
    }

    module = find_existing_module(scope, name);

    if (module) {
      return module;
    }

    // Module doesnt exist, create a new one...
    module = Opal.allocate_module(name);
    Opal.const_set(scope, name, module);

    return module;
  };

  // Return the singleton class for the passed object.
  //
  // If the given object alredy has a singleton class, then it will be stored on
  // the object as the `$$meta` property. If this exists, then it is simply
  // returned back.
  //
  // Otherwise, a new singleton object for the class or object is created, set on
  // the object at `$$meta` for future use, and then returned.
  //
  // @param object [Object] the ruby object
  // @return [Class] the singleton class for object
  Opal.get_singleton_class = function(object) {
    if (object.$$meta) {
      return object.$$meta;
    }

    if (object.hasOwnProperty('$$is_class')) {
      return Opal.build_class_singleton_class(object);
    } else if (object.hasOwnProperty('$$is_module')) {
      return Opal.build_module_singleton_class(object);
    } else {
      return Opal.build_object_singleton_class(object);
    }
  };

  // Build the singleton class for an existing class. Class object are built
  // with their singleton class already in the prototype chain and inheriting
  // from their superclass object (up to `Class` itself).
  //
  // NOTE: Actually in MRI a class' singleton class inherits from its
  // superclass' singleton class which in turn inherits from Class.
  //
  // @param klass [Class]
  // @return [Class]
  Opal.build_class_singleton_class = function(klass) {
    var superclass, meta;

    if (klass.$$meta) {
      return klass.$$meta;
    }

    // The singleton_class superclass is the singleton_class of its superclass;
    // but BasicObject has no superclass (its `$$super` is null), thus we
    // fallback on `Class`.
    superclass = klass === BasicObject ? Class : Opal.get_singleton_class(klass.$$super);

    meta = Opal.allocate_class(null, superclass, function(){});

    $defineProperty(meta, '$$is_singleton', true);
    $defineProperty(meta, '$$singleton_of', klass);
    $defineProperty(klass, '$$meta', meta);
    $set_proto(klass, meta.$$prototype);
    // Restoring ClassName.class
    $defineProperty(klass, '$$class', Opal.Class);

    return meta;
  };

  Opal.build_module_singleton_class = function(mod) {
    if (mod.$$meta) {
      return mod.$$meta;
    }

    var meta = Opal.allocate_class(null, Opal.Module, function(){});

    $defineProperty(meta, '$$is_singleton', true);
    $defineProperty(meta, '$$singleton_of', mod);
    $defineProperty(mod, '$$meta', meta);
    $set_proto(mod, meta.$$prototype);
    // Restoring ModuleName.class
    $defineProperty(mod, '$$class', Opal.Module);

    return meta;
  };

  // Build the singleton class for a Ruby (non class) Object.
  //
  // @param object [Object]
  // @return [Class]
  Opal.build_object_singleton_class = function(object) {
    var superclass = object.$$class,
        klass = Opal.allocate_class(nil, superclass, function(){});

    $defineProperty(klass, '$$is_singleton', true);
    $defineProperty(klass, '$$singleton_of', object);

    delete klass.$$prototype.$$class;

    $defineProperty(object, '$$meta', klass);

    $set_proto(object, object.$$meta.$$prototype);

    return klass;
  };

  Opal.is_method = function(prop) {
    return (prop[0] === '$' && prop[1] !== '$');
  };

  Opal.instance_methods = function(mod) {
    var exclude = [], results = [], ancestors = Opal.ancestors(mod);

    for (var i = 0, l = ancestors.length; i < l; i++) {
      var ancestor = ancestors[i],
          proto = ancestor.$$prototype;

      if (proto.hasOwnProperty('$$dummy')) {
        proto = proto.$$define_methods_on;
      }

      var props = Object.getOwnPropertyNames(proto);

      for (var j = 0, ll = props.length; j < ll; j++) {
        var prop = props[j];

        if (Opal.is_method(prop)) {
          var method_name = prop.slice(1),
              method = proto[prop];

          if (method.$$stub && exclude.indexOf(method_name) === -1) {
            exclude.push(method_name);
          }

          if (!method.$$stub && results.indexOf(method_name) === -1 && exclude.indexOf(method_name) === -1) {
            results.push(method_name);
          }
        }
      }
    }

    return results;
  };

  Opal.own_instance_methods = function(mod) {
    var results = [],
        proto = mod.$$prototype;

    if (proto.hasOwnProperty('$$dummy')) {
      proto = proto.$$define_methods_on;
    }

    var props = Object.getOwnPropertyNames(proto);

    for (var i = 0, length = props.length; i < length; i++) {
      var prop = props[i];

      if (Opal.is_method(prop)) {
        var method = proto[prop];

        if (!method.$$stub) {
          var method_name = prop.slice(1);
          results.push(method_name);
        }
      }
    }

    return results;
  };

  Opal.methods = function(obj) {
    return Opal.instance_methods(Opal.get_singleton_class(obj));
  };

  Opal.own_methods = function(obj) {
    return Opal.own_instance_methods(Opal.get_singleton_class(obj));
  };

  Opal.receiver_methods = function(obj) {
    var mod = Opal.get_singleton_class(obj);
    var singleton_methods = Opal.own_instance_methods(mod);
    var instance_methods = Opal.own_instance_methods(mod.$$super);
    return singleton_methods.concat(instance_methods);
  };

  // Returns an object containing all pairs of names/values
  // for all class variables defined in provided +module+
  // and its ancestors.
  //
  // @param module [Module]
  // @return [Object]
  Opal.class_variables = function(module) {
    var ancestors = Opal.ancestors(module),
        i, length = ancestors.length,
        result = {};

    for (i = length - 1; i >= 0; i--) {
      var ancestor = ancestors[i];

      for (var cvar in ancestor.$$cvars) {
        result[cvar] = ancestor.$$cvars[cvar];
      }
    }

    return result;
  };

  // Sets class variable with specified +name+ to +value+
  // in provided +module+
  //
  // @param module [Module]
  // @param name [String]
  // @param value [Object]
  Opal.class_variable_set = function(module, name, value) {
    var ancestors = Opal.ancestors(module),
        i, length = ancestors.length;

    for (i = length - 2; i >= 0; i--) {
      var ancestor = ancestors[i];

      if ($has_own.call(ancestor.$$cvars, name)) {
        ancestor.$$cvars[name] = value;
        return value;
      }
    }

    module.$$cvars[name] = value;

    return value;
  };

  function isRoot(proto) {
    return proto.hasOwnProperty('$$iclass') && proto.hasOwnProperty('$$root');
  }

  function own_included_modules(module) {
    var result = [], mod, proto = Object.getPrototypeOf(module.$$prototype);

    while (proto) {
      if (proto.hasOwnProperty('$$class')) {
        // superclass
        break;
      }
      mod = protoToModule(proto);
      if (mod) {
        result.push(mod);
      }
      proto = Object.getPrototypeOf(proto);
    }

    return result;
  }

  function own_prepended_modules(module) {
    var result = [], mod, proto = Object.getPrototypeOf(module.$$prototype);

    if (module.$$prototype.hasOwnProperty('$$dummy')) {
      while (proto) {
        if (proto === module.$$prototype.$$define_methods_on) {
          break;
        }

        mod = protoToModule(proto);
        if (mod) {
          result.push(mod);
        }

        proto = Object.getPrototypeOf(proto);
      }
    }

    return result;
  }


  // The actual inclusion of a module into a class.
  //
  // ## Class `$$parent` and `iclass`
  //
  // To handle `super` calls, every class has a `$$parent`. This parent is
  // used to resolve the next class for a super call. A normal class would
  // have this point to its superclass. However, if a class includes a module
  // then this would need to take into account the module. The module would
  // also have to then point its `$$parent` to the actual superclass. We
  // cannot modify modules like this, because it might be included in more
  // then one class. To fix this, we actually insert an `iclass` as the class'
  // `$$parent` which can then point to the superclass. The `iclass` acts as
  // a proxy to the actual module, so the `super` chain can then search it for
  // the required method.
  //
  // @param module [Module] the module to include
  // @param includer [Module] the target class to include module into
  // @return [null]
  Opal.append_features = function(module, includer) {
    var module_ancestors = Opal.ancestors(module);
    var iclasses = [];

    if (module_ancestors.indexOf(includer) !== -1) {
      throw Opal.ArgumentError.$new('cyclic include detected');
    }

    for (var i = 0, length = module_ancestors.length; i < length; i++) {
      var ancestor = module_ancestors[i], iclass = create_iclass(ancestor);
      $defineProperty(iclass, '$$included', true);
      iclasses.push(iclass);
    }
    var includer_ancestors = Opal.ancestors(includer),
        chain = chain_iclasses(iclasses),
        start_chain_after,
        end_chain_on;

    if (includer_ancestors.indexOf(module) === -1) {
      // first time include

      // includer -> chain.first -> ...chain... -> chain.last -> includer.parent
      start_chain_after = includer.$$prototype;
      end_chain_on = Object.getPrototypeOf(includer.$$prototype);
    } else {
      // The module has been already included,
      // we don't need to put it into the ancestors chain again,
      // but this module may have new included modules.
      // If it's true we need to copy them.
      //
      // The simplest way is to replace ancestors chain from
      //          parent
      //            |
      //   `module` iclass (has a $$root flag)
      //            |
      //   ...previos chain of module.included_modules ...
      //            |
      //  "next ancestor" (has a $$root flag or is a real class)
      //
      // to
      //          parent
      //            |
      //    `module` iclass (has a $$root flag)
      //            |
      //   ...regenerated chain of module.included_modules
      //            |
      //   "next ancestor" (has a $$root flag or is a real class)
      //
      // because there are no intermediate classes between `parent` and `next ancestor`.
      // It doesn't break any prototypes of other objects as we don't change class references.

      var proto = includer.$$prototype, parent = proto, module_iclass = Object.getPrototypeOf(parent);

      while (module_iclass != null) {
        if (isRoot(module_iclass) && module_iclass.$$module === module) {
          break;
        }

        parent = module_iclass;
        module_iclass = Object.getPrototypeOf(module_iclass);
      }

      var next_ancestor = Object.getPrototypeOf(module_iclass);

      // skip non-root iclasses (that were recursively included)
      while (next_ancestor.hasOwnProperty('$$iclass') && !isRoot(next_ancestor)) {
        next_ancestor = Object.getPrototypeOf(next_ancestor);
      }

      start_chain_after = parent;
      end_chain_on = next_ancestor;
    }

    $set_proto(start_chain_after, chain.first);
    $set_proto(chain.last, end_chain_on);

    // recalculate own_included_modules cache
    includer.$$own_included_modules = own_included_modules(includer);

    Opal.const_cache_version++;
  };

  Opal.prepend_features = function(module, prepender) {
    // Here we change the ancestors chain from
    //
    //   prepender
    //      |
    //    parent
    //
    // to:
    //
    // dummy(prepender)
    //      |
    //  iclass(module)
    //      |
    // iclass(prepender)
    //      |
    //    parent
    var module_ancestors = Opal.ancestors(module);
    var iclasses = [];

    if (module_ancestors.indexOf(prepender) !== -1) {
      throw Opal.ArgumentError.$new('cyclic prepend detected');
    }

    for (var i = 0, length = module_ancestors.length; i < length; i++) {
      var ancestor = module_ancestors[i], iclass = create_iclass(ancestor);
      $defineProperty(iclass, '$$prepended', true);
      iclasses.push(iclass);
    }

    var chain = chain_iclasses(iclasses),
        dummy_prepender = prepender.$$prototype,
        previous_parent = Object.getPrototypeOf(dummy_prepender),
        prepender_iclass,
        start_chain_after,
        end_chain_on;

    if (dummy_prepender.hasOwnProperty('$$dummy')) {
      // The module already has some prepended modules
      // which means that we don't need to make it "dummy"
      prepender_iclass = dummy_prepender.$$define_methods_on;
    } else {
      // Making the module "dummy"
      prepender_iclass = create_dummy_iclass(prepender);
      flush_methods_in(prepender);
      $defineProperty(dummy_prepender, '$$dummy', true);
      $defineProperty(dummy_prepender, '$$define_methods_on', prepender_iclass);

      // Converting
      //   dummy(prepender) -> previous_parent
      // to
      //   dummy(prepender) -> iclass(prepender) -> previous_parent
      $set_proto(dummy_prepender, prepender_iclass);
      $set_proto(prepender_iclass, previous_parent);
    }

    var prepender_ancestors = Opal.ancestors(prepender);

    if (prepender_ancestors.indexOf(module) === -1) {
      // first time prepend

      start_chain_after = dummy_prepender;

      // next $$root or prepender_iclass or non-$$iclass
      end_chain_on = Object.getPrototypeOf(dummy_prepender);
      while (end_chain_on != null) {
        if (
          end_chain_on.hasOwnProperty('$$root') ||
          end_chain_on === prepender_iclass ||
          !end_chain_on.hasOwnProperty('$$iclass')
        ) {
          break;
        }

        end_chain_on = Object.getPrototypeOf(end_chain_on);
      }
    } else {
      throw Opal.RuntimeError.$new("Prepending a module multiple times is not supported");
    }

    $set_proto(start_chain_after, chain.first);
    $set_proto(chain.last, end_chain_on);

    // recalculate own_prepended_modules cache
    prepender.$$own_prepended_modules = own_prepended_modules(prepender);

    Opal.const_cache_version++;
  };

  function flush_methods_in(module) {
    var proto = module.$$prototype,
        props = Object.getOwnPropertyNames(proto);

    for (var i = 0; i < props.length; i++) {
      var prop = props[i];
      if (Opal.is_method(prop)) {
        delete proto[prop];
      }
    }
  }

  function create_iclass(module) {
    var iclass = create_dummy_iclass(module);

    if (module.$$is_module) {
      module.$$iclasses.push(iclass);
    }

    return iclass;
  }

  // Dummy iclass doesn't receive updates when the module gets a new method.
  function create_dummy_iclass(module) {
    var iclass = {},
        proto = module.$$prototype;

    if (proto.hasOwnProperty('$$dummy')) {
      proto = proto.$$define_methods_on;
    }

    var props = Object.getOwnPropertyNames(proto),
        length = props.length, i;

    for (i = 0; i < length; i++) {
      var prop = props[i];
      $defineProperty(iclass, prop, proto[prop]);
    }

    $defineProperty(iclass, '$$iclass', true);
    $defineProperty(iclass, '$$module', module);

    return iclass;
  }

  function chain_iclasses(iclasses) {
    var length = iclasses.length, first = iclasses[0];

    $defineProperty(first, '$$root', true);

    if (length === 1) {
      return { first: first, last: first };
    }

    var previous = first;

    for (var i = 1; i < length; i++) {
      var current = iclasses[i];
      $set_proto(previous, current);
      previous = current;
    }


    return { first: iclasses[0], last: iclasses[length - 1] };
  }

  // For performance, some core Ruby classes are toll-free bridged to their
  // native JavaScript counterparts (e.g. a Ruby Array is a JavaScript Array).
  //
  // This method is used to setup a native constructor (e.g. Array), to have
  // its prototype act like a normal Ruby class. Firstly, a new Ruby class is
  // created using the native constructor so that its prototype is set as the
  // target for the new class. Note: all bridged classes are set to inherit
  // from Object.
  //
  // Example:
  //
  //    Opal.bridge(self, Function);
  //
  // @param klass       [Class] the Ruby class to bridge
  // @param constructor [JS.Function] native JavaScript constructor to use
  // @return [Class] returns the passed Ruby class
  //
  Opal.bridge = function(native_klass, klass) {
    if (native_klass.hasOwnProperty('$$bridge')) {
      throw Opal.ArgumentError.$new("already bridged");
    }

    // constructor is a JS function with a prototype chain like:
    // - constructor
    //   - super
    //
    // What we need to do is to inject our class (with its prototype chain)
    // between constructor and super. For example, after injecting ::Object
    // into JS String we get:
    //
    // - constructor (window.String)
    //   - Opal.Object
    //     - Opal.Kernel
    //       - Opal.BasicObject
    //         - super (window.Object)
    //           - null
    //
    $defineProperty(native_klass, '$$bridge', klass);
    $set_proto(native_klass.prototype, (klass.$$super || Opal.Object).$$prototype);
    $defineProperty(klass, '$$prototype', native_klass.prototype);

    $defineProperty(klass.$$prototype, '$$class', klass);
    $defineProperty(klass, '$$constructor', native_klass);
    $defineProperty(klass, '$$bridge', true);
  };

  function protoToModule(proto) {
    if (proto.hasOwnProperty('$$dummy')) {
      return;
    } else if (proto.hasOwnProperty('$$iclass')) {
      return proto.$$module;
    } else if (proto.hasOwnProperty('$$class')) {
      return proto.$$class;
    }
  }

  function own_ancestors(module) {
    return module.$$own_prepended_modules.concat([module]).concat(module.$$own_included_modules);
  }

  // The Array of ancestors for a given module/class
  Opal.ancestors = function(module) {
    if (!module) { return []; }

    if (module.$$ancestors_cache_version === Opal.const_cache_version) {
      return module.$$ancestors;
    }

    var result = [], i, mods, length;

    for (i = 0, mods = own_ancestors(module), length = mods.length; i < length; i++) {
      result.push(mods[i]);
    }

    if (module.$$super) {
      for (i = 0, mods = Opal.ancestors(module.$$super), length = mods.length; i < length; i++) {
        result.push(mods[i]);
      }
    }

    module.$$ancestors_cache_version = Opal.const_cache_version;
    module.$$ancestors = result;

    return result;
  };

  Opal.included_modules = function(module) {
    var result = [], mod = null, proto = Object.getPrototypeOf(module.$$prototype);

    for (; proto && Object.getPrototypeOf(proto); proto = Object.getPrototypeOf(proto)) {
      mod = protoToModule(proto);
      if (mod && mod.$$is_module && proto.$$iclass && proto.$$included) {
        result.push(mod);
      }
    }

    return result;
  };


  // Method Missing
  // --------------

  // Methods stubs are used to facilitate method_missing in opal. A stub is a
  // placeholder function which just calls `method_missing` on the receiver.
  // If no method with the given name is actually defined on an object, then it
  // is obvious to say that the stub will be called instead, and then in turn
  // method_missing will be called.
  //
  // When a file in ruby gets compiled to javascript, it includes a call to
  // this function which adds stubs for every method name in the compiled file.
  // It should then be safe to assume that method_missing will work for any
  // method call detected.
  //
  // Method stubs are added to the BasicObject prototype, which every other
  // ruby object inherits, so all objects should handle method missing. A stub
  // is only added if the given property name (method name) is not already
  // defined.
  //
  // Note: all ruby methods have a `$` prefix in javascript, so all stubs will
  // have this prefix as well (to make this method more performant).
  //
  //    Opal.add_stubs(["$foo", "$bar", "$baz="]);
  //
  // All stub functions will have a private `$$stub` property set to true so
  // that other internal methods can detect if a method is just a stub or not.
  // `Kernel#respond_to?` uses this property to detect a methods presence.
  //
  // @param stubs [Array] an array of method stubs to add
  // @return [undefined]
  Opal.add_stubs = function(stubs) {
    var proto = Opal.BasicObject.$$prototype;

    for (var i = 0, length = stubs.length; i < length; i++) {
      var stub = stubs[i], existing_method = proto[stub];

      if (existing_method == null || existing_method.$$stub) {
        Opal.add_stub_for(proto, stub);
      }
    }
  };

  // Add a method_missing stub function to the given prototype for the
  // given name.
  //
  // @param prototype [Prototype] the target prototype
  // @param stub [String] stub name to add (e.g. "$foo")
  // @return [undefined]
  Opal.add_stub_for = function(prototype, stub) {
    var method_missing_stub = Opal.stub_for(stub);
    $defineProperty(prototype, stub, method_missing_stub);
  };

  // Generate the method_missing stub for a given method name.
  //
  // @param method_name [String] The js-name of the method to stub (e.g. "$foo")
  // @return [undefined]
  Opal.stub_for = function(method_name) {

    function method_missing_stub() {
      /* jshint validthis: true */

      // Copy any given block onto the method_missing dispatcher
      this.$method_missing.$$p = method_missing_stub.$$p;

      // Set block property to null ready for the next call (stop false-positives)
      method_missing_stub.$$p = null;

      // call method missing with correct args (remove '$' prefix on method name)
      var args_ary = new Array(arguments.length);
      for(var i = 0, l = args_ary.length; i < l; i++) { args_ary[i] = arguments[i]; }

      return this.$method_missing.apply(this, [method_name.slice(1)].concat(args_ary));
    }

    method_missing_stub.$$stub = true;

    return method_missing_stub;
  };


  // Methods
  // -------

  // Arity count error dispatcher for methods
  //
  // @param actual [Fixnum] number of arguments given to method
  // @param expected [Fixnum] expected number of arguments
  // @param object [Object] owner of the method +meth+
  // @param meth [String] method name that got wrong number of arguments
  // @raise [ArgumentError]
  Opal.ac = function(actual, expected, object, meth) {
    var inspect = '';
    if (object.$$is_a_module) {
      inspect += object.$$name + '.';
    }
    else {
      inspect += object.$$class.$$name + '#';
    }
    inspect += meth;

    throw Opal.ArgumentError.$new('[' + inspect + '] wrong number of arguments(' + actual + ' for ' + expected + ')');
  };

  // Arity count error dispatcher for blocks
  //
  // @param actual [Fixnum] number of arguments given to block
  // @param expected [Fixnum] expected number of arguments
  // @param context [Object] context of the block definition
  // @raise [ArgumentError]
  Opal.block_ac = function(actual, expected, context) {
    var inspect = "`block in " + context + "'";

    throw Opal.ArgumentError.$new(inspect + ': wrong number of arguments (' + actual + ' for ' + expected + ')');
  };

  // Super dispatcher
  Opal.find_super_dispatcher = function(obj, mid, current_func, defcheck, allow_stubs) {
    var jsid = '$' + mid, ancestors, super_method;

    if (obj.hasOwnProperty('$$meta')) {
      ancestors = Opal.ancestors(obj.$$meta);
    } else {
      ancestors = Opal.ancestors(obj.$$class);
    }

    var current_index = ancestors.indexOf(current_func.$$owner);

    for (var i = current_index + 1; i < ancestors.length; i++) {
      var ancestor = ancestors[i],
          proto = ancestor.$$prototype;

      if (proto.hasOwnProperty('$$dummy')) {
        proto = proto.$$define_methods_on;
      }

      if (proto.hasOwnProperty(jsid)) {
        super_method = proto[jsid];
        break;
      }
    }

    if (!defcheck && super_method && super_method.$$stub && obj.$method_missing.$$pristine) {
      // method_missing hasn't been explicitly defined
      throw Opal.NoMethodError.$new('super: no superclass method `'+mid+"' for "+obj, mid);
    }

    return (super_method.$$stub && !allow_stubs) ? null : super_method;
  };

  // Iter dispatcher for super in a block
  Opal.find_iter_super_dispatcher = function(obj, jsid, current_func, defcheck, implicit) {
    var call_jsid = jsid;

    if (!current_func) {
      throw Opal.RuntimeError.$new("super called outside of method");
    }

    if (implicit && current_func.$$define_meth) {
      throw Opal.RuntimeError.$new("implicit argument passing of super from method defined by define_method() is not supported. Specify all arguments explicitly");
    }

    if (current_func.$$def) {
      call_jsid = current_func.$$jsid;
    }

    return Opal.find_super_dispatcher(obj, call_jsid, current_func, defcheck);
  };

  // Used to return as an expression. Sometimes, we can't simply return from
  // a javascript function as if we were a method, as the return is used as
  // an expression, or even inside a block which must "return" to the outer
  // method. This helper simply throws an error which is then caught by the
  // method. This approach is expensive, so it is only used when absolutely
  // needed.
  //
  Opal.ret = function(val) {
    Opal.returner.$v = val;
    throw Opal.returner;
  };

  // Used to break out of a block.
  Opal.brk = function(val, breaker) {
    breaker.$v = val;
    throw breaker;
  };

  // Builds a new unique breaker, this is to avoid multiple nested breaks to get
  // in the way of each other.
  Opal.new_brk = function() {
    return new Error('unexpected break');
  };

  // handles yield calls for 1 yielded arg
  Opal.yield1 = function(block, arg) {
    if (typeof(block) !== "function") {
      throw Opal.LocalJumpError.$new("no block given");
    }

    var has_mlhs = block.$$has_top_level_mlhs_arg,
        has_trailing_comma = block.$$has_trailing_comma_in_args;

    if (block.length > 1 || ((has_mlhs || has_trailing_comma) && block.length === 1)) {
      arg = Opal.to_ary(arg);
    }

    if ((block.length > 1 || (has_trailing_comma && block.length === 1)) && arg.$$is_array) {
      return block.apply(null, arg);
    }
    else {
      return block(arg);
    }
  };

  // handles yield for > 1 yielded arg
  Opal.yieldX = function(block, args) {
    if (typeof(block) !== "function") {
      throw Opal.LocalJumpError.$new("no block given");
    }

    if (block.length > 1 && args.length === 1) {
      if (args[0].$$is_array) {
        return block.apply(null, args[0]);
      }
    }

    if (!args.$$is_array) {
      var args_ary = new Array(args.length);
      for(var i = 0, l = args_ary.length; i < l; i++) { args_ary[i] = args[i]; }

      return block.apply(null, args_ary);
    }

    return block.apply(null, args);
  };

  // Finds the corresponding exception match in candidates.  Each candidate can
  // be a value, or an array of values.  Returns null if not found.
  Opal.rescue = function(exception, candidates) {
    for (var i = 0; i < candidates.length; i++) {
      var candidate = candidates[i];

      if (candidate.$$is_array) {
        var result = Opal.rescue(exception, candidate);

        if (result) {
          return result;
        }
      }
      else if (candidate === Opal.JS.Error) {
        return candidate;
      }
      else if (candidate['$==='](exception)) {
        return candidate;
      }
    }

    return null;
  };

  Opal.is_a = function(object, klass) {
    if (klass != null && object.$$meta === klass || object.$$class === klass) {
      return true;
    }

    if (object.$$is_number && klass.$$is_number_class) {
      return (klass.$$is_integer_class) ? (object % 1) === 0 : true;
    }

    var i, length, ancestors = Opal.ancestors(object.$$is_class ? Opal.get_singleton_class(object) : (object.$$meta || object.$$class));

    for (i = 0, length = ancestors.length; i < length; i++) {
      if (ancestors[i] === klass) {
        return true;
      }
    }

    return false;
  };

  // Helpers for extracting kwsplats
  // Used for: { **h }
  Opal.to_hash = function(value) {
    if (value.$$is_hash) {
      return value;
    }
    else if (value['$respond_to?']('to_hash', true)) {
      var hash = value.$to_hash();
      if (hash.$$is_hash) {
        return hash;
      }
      else {
        throw Opal.TypeError.$new("Can't convert " + value.$$class +
          " to Hash (" + value.$$class + "#to_hash gives " + hash.$$class + ")");
      }
    }
    else {
      throw Opal.TypeError.$new("no implicit conversion of " + value.$$class + " into Hash");
    }
  };

  // Helpers for implementing multiple assignment
  // Our code for extracting the values and assigning them only works if the
  // return value is a JS array.
  // So if we get an Array subclass, extract the wrapped JS array from it

  // Used for: a, b = something (no splat)
  Opal.to_ary = function(value) {
    if (value.$$is_array) {
      return value;
    }
    else if (value['$respond_to?']('to_ary', true)) {
      var ary = value.$to_ary();
      if (ary === nil) {
        return [value];
      }
      else if (ary.$$is_array) {
        return ary;
      }
      else {
        throw Opal.TypeError.$new("Can't convert " + value.$$class +
          " to Array (" + value.$$class + "#to_ary gives " + ary.$$class + ")");
      }
    }
    else {
      return [value];
    }
  };

  // Used for: a, b = *something (with splat)
  Opal.to_a = function(value) {
    if (value.$$is_array) {
      // A splatted array must be copied
      return value.slice();
    }
    else if (value['$respond_to?']('to_a', true)) {
      var ary = value.$to_a();
      if (ary === nil) {
        return [value];
      }
      else if (ary.$$is_array) {
        return ary;
      }
      else {
        throw Opal.TypeError.$new("Can't convert " + value.$$class +
          " to Array (" + value.$$class + "#to_a gives " + ary.$$class + ")");
      }
    }
    else {
      return [value];
    }
  };

  // Used for extracting keyword arguments from arguments passed to
  // JS function. If provided +arguments+ list doesn't have a Hash
  // as a last item, returns a blank Hash.
  //
  // @param parameters [Array]
  // @return [Hash]
  //
  Opal.extract_kwargs = function(parameters) {
    var kwargs = parameters[parameters.length - 1];
    if (kwargs != null && Opal.respond_to(kwargs, '$to_hash', true)) {
      $splice.call(parameters, parameters.length - 1, 1);
      return kwargs.$to_hash();
    }
    else {
      return Opal.hash2([], {});
    }
  };

  // Used to get a list of rest keyword arguments. Method takes the given
  // keyword args, i.e. the hash literal passed to the method containing all
  // keyword arguemnts passed to method, as well as the used args which are
  // the names of required and optional arguments defined. This method then
  // just returns all key/value pairs which have not been used, in a new
  // hash literal.
  //
  // @param given_args [Hash] all kwargs given to method
  // @param used_args [Object<String: true>] all keys used as named kwargs
  // @return [Hash]
  //
  Opal.kwrestargs = function(given_args, used_args) {
    var keys      = [],
        map       = {},
        key           ,
        given_map = given_args.$$smap;

    for (key in given_map) {
      if (!used_args[key]) {
        keys.push(key);
        map[key] = given_map[key];
      }
    }

    return Opal.hash2(keys, map);
  };

  // Calls passed method on a ruby object with arguments and block:
  //
  // Can take a method or a method name.
  //
  // 1. When method name gets passed it invokes it by its name
  //    and calls 'method_missing' when object doesn't have this method.
  //    Used internally by Opal to invoke method that takes a block or a splat.
  // 2. When method (i.e. method body) gets passed, it doesn't trigger 'method_missing'
  //    because it doesn't know the name of the actual method.
  //    Used internally by Opal to invoke 'super'.
  //
  // @example
  //   var my_array = [1, 2, 3, 4]
  //   Opal.send(my_array, 'length')                    # => 4
  //   Opal.send(my_array, my_array.$length)            # => 4
  //
  //   Opal.send(my_array, 'reverse!')                  # => [4, 3, 2, 1]
  //   Opal.send(my_array, my_array['$reverse!']')      # => [4, 3, 2, 1]
  //
  // @param recv [Object] ruby object
  // @param method [Function, String] method body or name of the method
  // @param args [Array] arguments that will be passed to the method call
  // @param block [Function] ruby block
  // @return [Object] returning value of the method call
  Opal.send = function(recv, method, args, block) {
    var body;

    if (typeof(method) === 'function') {
      body = method;
      method = null;
    } else if (typeof(method) === 'string') {
      body = recv['$'+method];
    } else {
      throw Opal.NameError.$new("Passed method should be a string or a function");
    }

    return Opal.send2(recv, body, method, args, block);
  };

  Opal.send2 = function(recv, body, method, args, block) {
    if (body == null && method != null && recv.$method_missing) {
      body = recv.$method_missing;
      args = [method].concat(args);
    }

    if (typeof block === 'function') body.$$p = block;
    return body.apply(recv, args);
  };

  Opal.lambda = function(block) {
    block.$$is_lambda = true;
    return block;
  };

  // Used to define methods on an object. This is a helper method, used by the
  // compiled source to define methods on special case objects when the compiler
  // can not determine the destination object, or the object is a Module
  // instance. This can get called by `Module#define_method` as well.
  //
  // ## Modules
  //
  // Any method defined on a module will come through this runtime helper.
  // The method is added to the module body, and the owner of the method is
  // set to be the module itself. This is used later when choosing which
  // method should show on a class if more than 1 included modules define
  // the same method. Finally, if the module is in `module_function` mode,
  // then the method is also defined onto the module itself.
  //
  // ## Classes
  //
  // This helper will only be called for classes when a method is being
  // defined indirectly; either through `Module#define_method`, or by a
  // literal `def` method inside an `instance_eval` or `class_eval` body. In
  // either case, the method is simply added to the class' prototype. A special
  // exception exists for `BasicObject` and `Object`. These two classes are
  // special because they are used in toll-free bridged classes. In each of
  // these two cases, extra work is required to define the methods on toll-free
  // bridged class' prototypes as well.
  //
  // ## Objects
  //
  // If a simple ruby object is the object, then the method is simply just
  // defined on the object as a singleton method. This would be the case when
  // a method is defined inside an `instance_eval` block.
  //
  // @param obj  [Object, Class] the actual obj to define method for
  // @param jsid [String] the JavaScript friendly method name (e.g. '$foo')
  // @param body [JS.Function] the literal JavaScript function used as method
  // @return [null]
  //
  Opal.def = function(obj, jsid, body) {
    // Special case for a method definition in the
    // top-level namespace
    if (obj === Opal.top) {
      Opal.defn(Opal.Object, jsid, body)
    }
    // if instance_eval is invoked on a module/class, it sets inst_eval_mod
    else if (!obj.$$eval && obj.$$is_a_module) {
      Opal.defn(obj, jsid, body);
    }
    else {
      Opal.defs(obj, jsid, body);
    }
  };

  // Define method on a module or class (see Opal.def).
  Opal.defn = function(module, jsid, body) {
    body.displayName = jsid;
    body.$$owner = module;

    var proto = module.$$prototype;
    if (proto.hasOwnProperty('$$dummy')) {
      proto = proto.$$define_methods_on;
    }
    $defineProperty(proto, jsid, body);

    if (module.$$is_module) {
      if (module.$$module_function) {
        Opal.defs(module, jsid, body)
      }

      for (var i = 0, iclasses = module.$$iclasses, length = iclasses.length; i < length; i++) {
        var iclass = iclasses[i];
        $defineProperty(iclass, jsid, body);
      }
    }

    var singleton_of = module.$$singleton_of;
    if (module.$method_added && !module.$method_added.$$stub && !singleton_of) {
      module.$method_added(jsid.substr(1));
    }
    else if (singleton_of && singleton_of.$singleton_method_added && !singleton_of.$singleton_method_added.$$stub) {
      singleton_of.$singleton_method_added(jsid.substr(1));
    }
  };

  // Define a singleton method on the given object (see Opal.def).
  Opal.defs = function(obj, jsid, body) {
    if (obj.$$is_string || obj.$$is_number) {
      throw Opal.TypeError.$new("can't define singleton");
    }
    Opal.defn(Opal.get_singleton_class(obj), jsid, body)
  };

  // Called from #remove_method.
  Opal.rdef = function(obj, jsid) {
    if (!$has_own.call(obj.$$prototype, jsid)) {
      throw Opal.NameError.$new("method '" + jsid.substr(1) + "' not defined in " + obj.$name());
    }

    delete obj.$$prototype[jsid];

    if (obj.$$is_singleton) {
      if (obj.$$prototype.$singleton_method_removed && !obj.$$prototype.$singleton_method_removed.$$stub) {
        obj.$$prototype.$singleton_method_removed(jsid.substr(1));
      }
    }
    else {
      if (obj.$method_removed && !obj.$method_removed.$$stub) {
        obj.$method_removed(jsid.substr(1));
      }
    }
  };

  // Called from #undef_method.
  Opal.udef = function(obj, jsid) {
    if (!obj.$$prototype[jsid] || obj.$$prototype[jsid].$$stub) {
      throw Opal.NameError.$new("method '" + jsid.substr(1) + "' not defined in " + obj.$name());
    }

    Opal.add_stub_for(obj.$$prototype, jsid);

    if (obj.$$is_singleton) {
      if (obj.$$prototype.$singleton_method_undefined && !obj.$$prototype.$singleton_method_undefined.$$stub) {
        obj.$$prototype.$singleton_method_undefined(jsid.substr(1));
      }
    }
    else {
      if (obj.$method_undefined && !obj.$method_undefined.$$stub) {
        obj.$method_undefined(jsid.substr(1));
      }
    }
  };

  function is_method_body(body) {
    return (typeof(body) === "function" && !body.$$stub);
  }

  Opal.alias = function(obj, name, old) {
    var id     = '$' + name,
        old_id = '$' + old,
        body   = obj.$$prototype['$' + old],
        alias;

    // When running inside #instance_eval the alias refers to class methods.
    if (obj.$$eval) {
      return Opal.alias(Opal.get_singleton_class(obj), name, old);
    }

    if (!is_method_body(body)) {
      var ancestor = obj.$$super;

      while (typeof(body) !== "function" && ancestor) {
        body     = ancestor[old_id];
        ancestor = ancestor.$$super;
      }

      if (!is_method_body(body) && obj.$$is_module) {
        // try to look into Object
        body = Opal.Object.$$prototype[old_id]
      }

      if (!is_method_body(body)) {
        throw Opal.NameError.$new("undefined method `" + old + "' for class `" + obj.$name() + "'")
      }
    }

    // If the body is itself an alias use the original body
    // to keep the max depth at 1.
    if (body.$$alias_of) body = body.$$alias_of;

    // We need a wrapper because otherwise properties
    // would be overwritten on the original body.
    alias = function() {
      var block = alias.$$p, args, i, ii;

      args = new Array(arguments.length);
      for(i = 0, ii = arguments.length; i < ii; i++) {
        args[i] = arguments[i];
      }

      if (block != null) { alias.$$p = null }

      return Opal.send(this, body, args, block);
    };

    // Assign the 'length' value with defineProperty because
    // in strict mode the property is not writable.
    // It doesn't work in older browsers (like Chrome 38), where
    // an exception is thrown breaking Opal altogether.
    try {
      Object.defineProperty(alias, 'length', { value: body.length });
    } catch (e) {}

    // Try to make the browser pick the right name
    alias.displayName       = name;

    alias.$$arity           = body.$$arity;
    alias.$$parameters      = body.$$parameters;
    alias.$$source_location = body.$$source_location;
    alias.$$alias_of        = body;
    alias.$$alias_name      = name;

    Opal.defn(obj, id, alias);

    return obj;
  };

  Opal.alias_native = function(obj, name, native_name) {
    var id   = '$' + name,
        body = obj.$$prototype[native_name];

    if (typeof(body) !== "function" || body.$$stub) {
      throw Opal.NameError.$new("undefined native method `" + native_name + "' for class `" + obj.$name() + "'")
    }

    Opal.defn(obj, id, body);

    return obj;
  };


  // Hashes
  // ------

  Opal.hash_init = function(hash) {
    hash.$$smap = Object.create(null);
    hash.$$map  = Object.create(null);
    hash.$$keys = [];
  };

  Opal.hash_clone = function(from_hash, to_hash) {
    to_hash.$$none = from_hash.$$none;
    to_hash.$$proc = from_hash.$$proc;

    for (var i = 0, keys = from_hash.$$keys, smap = from_hash.$$smap, len = keys.length, key, value; i < len; i++) {
      key = keys[i];

      if (key.$$is_string) {
        value = smap[key];
      } else {
        value = key.value;
        key = key.key;
      }

      Opal.hash_put(to_hash, key, value);
    }
  };

  Opal.hash_put = function(hash, key, value) {
    if (key.$$is_string) {
      if (!$has_own.call(hash.$$smap, key)) {
        hash.$$keys.push(key);
      }
      hash.$$smap[key] = value;
      return;
    }

    var key_hash, bucket, last_bucket;
    key_hash = hash.$$by_identity ? Opal.id(key) : key.$hash();

    if (!$has_own.call(hash.$$map, key_hash)) {
      bucket = {key: key, key_hash: key_hash, value: value};
      hash.$$keys.push(bucket);
      hash.$$map[key_hash] = bucket;
      return;
    }

    bucket = hash.$$map[key_hash];

    while (bucket) {
      if (key === bucket.key || key['$eql?'](bucket.key)) {
        last_bucket = undefined;
        bucket.value = value;
        break;
      }
      last_bucket = bucket;
      bucket = bucket.next;
    }

    if (last_bucket) {
      bucket = {key: key, key_hash: key_hash, value: value};
      hash.$$keys.push(bucket);
      last_bucket.next = bucket;
    }
  };

  Opal.hash_get = function(hash, key) {
    if (key.$$is_string) {
      if ($has_own.call(hash.$$smap, key)) {
        return hash.$$smap[key];
      }
      return;
    }

    var key_hash, bucket;
    key_hash = hash.$$by_identity ? Opal.id(key) : key.$hash();

    if ($has_own.call(hash.$$map, key_hash)) {
      bucket = hash.$$map[key_hash];

      while (bucket) {
        if (key === bucket.key || key['$eql?'](bucket.key)) {
          return bucket.value;
        }
        bucket = bucket.next;
      }
    }
  };

  Opal.hash_delete = function(hash, key) {
    var i, keys = hash.$$keys, length = keys.length, value;

    if (key.$$is_string) {
      if (typeof key !== "string") key = key.valueOf();

      if (!$has_own.call(hash.$$smap, key)) {
        return;
      }

      for (i = 0; i < length; i++) {
        if (keys[i] === key) {
          keys.splice(i, 1);
          break;
        }
      }

      value = hash.$$smap[key];
      delete hash.$$smap[key];
      return value;
    }

    var key_hash = key.$hash();

    if (!$has_own.call(hash.$$map, key_hash)) {
      return;
    }

    var bucket = hash.$$map[key_hash], last_bucket;

    while (bucket) {
      if (key === bucket.key || key['$eql?'](bucket.key)) {
        value = bucket.value;

        for (i = 0; i < length; i++) {
          if (keys[i] === bucket) {
            keys.splice(i, 1);
            break;
          }
        }

        if (last_bucket && bucket.next) {
          last_bucket.next = bucket.next;
        }
        else if (last_bucket) {
          delete last_bucket.next;
        }
        else if (bucket.next) {
          hash.$$map[key_hash] = bucket.next;
        }
        else {
          delete hash.$$map[key_hash];
        }

        return value;
      }
      last_bucket = bucket;
      bucket = bucket.next;
    }
  };

  Opal.hash_rehash = function(hash) {
    for (var i = 0, length = hash.$$keys.length, key_hash, bucket, last_bucket; i < length; i++) {

      if (hash.$$keys[i].$$is_string) {
        continue;
      }

      key_hash = hash.$$keys[i].key.$hash();

      if (key_hash === hash.$$keys[i].key_hash) {
        continue;
      }

      bucket = hash.$$map[hash.$$keys[i].key_hash];
      last_bucket = undefined;

      while (bucket) {
        if (bucket === hash.$$keys[i]) {
          if (last_bucket && bucket.next) {
            last_bucket.next = bucket.next;
          }
          else if (last_bucket) {
            delete last_bucket.next;
          }
          else if (bucket.next) {
            hash.$$map[hash.$$keys[i].key_hash] = bucket.next;
          }
          else {
            delete hash.$$map[hash.$$keys[i].key_hash];
          }
          break;
        }
        last_bucket = bucket;
        bucket = bucket.next;
      }

      hash.$$keys[i].key_hash = key_hash;

      if (!$has_own.call(hash.$$map, key_hash)) {
        hash.$$map[key_hash] = hash.$$keys[i];
        continue;
      }

      bucket = hash.$$map[key_hash];
      last_bucket = undefined;

      while (bucket) {
        if (bucket === hash.$$keys[i]) {
          last_bucket = undefined;
          break;
        }
        last_bucket = bucket;
        bucket = bucket.next;
      }

      if (last_bucket) {
        last_bucket.next = hash.$$keys[i];
      }
    }
  };

  Opal.hash = function() {
    var arguments_length = arguments.length, args, hash, i, length, key, value;

    if (arguments_length === 1 && arguments[0].$$is_hash) {
      return arguments[0];
    }

    hash = new Opal.Hash();
    Opal.hash_init(hash);

    if (arguments_length === 1 && arguments[0].$$is_array) {
      args = arguments[0];
      length = args.length;

      for (i = 0; i < length; i++) {
        if (args[i].length !== 2) {
          throw Opal.ArgumentError.$new("value not of length 2: " + args[i].$inspect());
        }

        key = args[i][0];
        value = args[i][1];

        Opal.hash_put(hash, key, value);
      }

      return hash;
    }

    if (arguments_length === 1) {
      args = arguments[0];
      for (key in args) {
        if ($has_own.call(args, key)) {
          value = args[key];

          Opal.hash_put(hash, key, value);
        }
      }

      return hash;
    }

    if (arguments_length % 2 !== 0) {
      throw Opal.ArgumentError.$new("odd number of arguments for Hash");
    }

    for (i = 0; i < arguments_length; i += 2) {
      key = arguments[i];
      value = arguments[i + 1];

      Opal.hash_put(hash, key, value);
    }

    return hash;
  };

  // A faster Hash creator for hashes that just use symbols and
  // strings as keys. The map and keys array can be constructed at
  // compile time, so they are just added here by the constructor
  // function.
  //
  Opal.hash2 = function(keys, smap) {
    var hash = new Opal.Hash();

    hash.$$smap = smap;
    hash.$$map  = Object.create(null);
    hash.$$keys = keys;

    return hash;
  };

  // Create a new range instance with first and last values, and whether the
  // range excludes the last value.
  //
  Opal.range = function(first, last, exc) {
    var range         = new Opal.Range();
        range.begin   = first;
        range.end     = last;
        range.excl    = exc;

    return range;
  };

  // Get the ivar name for a given name.
  // Mostly adds a trailing $ to reserved names.
  //
  Opal.ivar = function(name) {
    if (
        // properties
        name === "constructor" ||
        name === "displayName" ||
        name === "__count__" ||
        name === "__noSuchMethod__" ||
        name === "__parent__" ||
        name === "__proto__" ||

        // methods
        name === "hasOwnProperty" ||
        name === "valueOf"
       )
    {
      return name + "$";
    }

    return name;
  };


  // Regexps
  // -------

  // Escape Regexp special chars letting the resulting string be used to build
  // a new Regexp.
  //
  Opal.escape_regexp = function(str) {
    return str.replace(/([-[\]\/{}()*+?.^$\\| ])/g, '\\$1')
              .replace(/[\n]/g, '\\n')
              .replace(/[\r]/g, '\\r')
              .replace(/[\f]/g, '\\f')
              .replace(/[\t]/g, '\\t');
  };

  // Create a global Regexp from a RegExp object and cache the result
  // on the object itself ($$g attribute).
  //
  Opal.global_regexp = function(pattern) {
    if (pattern.global) {
      return pattern; // RegExp already has the global flag
    }
    if (pattern.$$g == null) {
      pattern.$$g = new RegExp(pattern.source, (pattern.multiline ? 'gm' : 'g') + (pattern.ignoreCase ? 'i' : ''));
    } else {
      pattern.$$g.lastIndex = null; // reset lastIndex property
    }
    return pattern.$$g;
  };

  // Create a global multiline Regexp from a RegExp object and cache the result
  // on the object itself ($$gm or $$g attribute).
  //
  Opal.global_multiline_regexp = function(pattern) {
    var result;
    if (pattern.multiline) {
      if (pattern.global) {
        return pattern; // RegExp already has the global and multiline flag
      }
      // we are using the $$g attribute because the Regexp is already multiline
      if (pattern.$$g != null) {
        result = pattern.$$g;
      } else {
        result = pattern.$$g = new RegExp(pattern.source, 'gm' + (pattern.ignoreCase ? 'i' : ''));
      }
    } else if (pattern.$$gm != null) {
      result = pattern.$$gm;
    } else {
      result = pattern.$$gm = new RegExp(pattern.source, 'gm' + (pattern.ignoreCase ? 'i' : ''));
    }
    result.lastIndex = null; // reset lastIndex property
    return result;
  };

  // Combine multiple regexp parts together
  Opal.regexp = function(parts, flags) {
    var part;
    var ignoreCase = typeof flags !== 'undefined' && flags && flags.indexOf('i') >= 0;

    for (var i = 0, ii = parts.length; i < ii; i++) {
      part = parts[i];
      if (part instanceof RegExp) {
        if (part.ignoreCase !== ignoreCase)
          Opal.Kernel.$warn(
            "ignore case doesn't match for " + part.source.$inspect(),
            Opal.hash({uplevel: 1})
          )

        part = part.source;
      }
      if (part === '') part = '(?:' + part + ')';
      parts[i] = part;
    }

    if (flags) {
      return new RegExp(parts.join(''), flags);
    } else {
      return new RegExp(parts.join(''));
    }
  };

  // Require system
  // --------------

  Opal.modules         = {};
  Opal.loaded_features = ['corelib/runtime'];
  Opal.current_dir     = '.';
  Opal.require_table   = {'corelib/runtime': true};

  Opal.normalize = function(path) {
    var parts, part, new_parts = [], SEPARATOR = '/';

    if (Opal.current_dir !== '.') {
      path = Opal.current_dir.replace(/\/*$/, '/') + path;
    }

    path = path.replace(/^\.\//, '');
    path = path.replace(/\.(rb|opal|js)$/, '');
    parts = path.split(SEPARATOR);

    for (var i = 0, ii = parts.length; i < ii; i++) {
      part = parts[i];
      if (part === '') continue;
      (part === '..') ? new_parts.pop() : new_parts.push(part)
    }

    return new_parts.join(SEPARATOR);
  };

  Opal.loaded = function(paths) {
    var i, l, path;

    for (i = 0, l = paths.length; i < l; i++) {
      path = Opal.normalize(paths[i]);

      if (Opal.require_table[path]) {
        continue;
      }

      Opal.loaded_features.push(path);
      Opal.require_table[path] = true;
    }
  };

  Opal.load = function(path) {
    path = Opal.normalize(path);

    Opal.loaded([path]);

    var module = Opal.modules[path];

    if (module) {
      module(Opal);
    }
    else {
      var severity = Opal.config.missing_require_severity;
      var message  = 'cannot load such file -- ' + path;

      if (severity === "error") {
        if (Opal.LoadError) {
          throw Opal.LoadError.$new(message)
        } else {
          throw message
        }
      }
      else if (severity === "warning") {
        console.warn('WARNING: LoadError: ' + message);
      }
    }

    return true;
  };

  Opal.require = function(path) {
    path = Opal.normalize(path);

    if (Opal.require_table[path]) {
      return false;
    }

    return Opal.load(path);
  };


  // Strings
  // -------

  Opal.encodings = Object.create(null);

  // Sets the encoding on a string, will treat string literals as frozen strings
  // raising a FrozenError.
  // @param str [String] the string on which the encoding should be set.
  // @param name [String] the canonical name of the encoding
  Opal.set_encoding = function(str, name) {
    if (typeof str === 'string')
      throw Opal.FrozenError.$new("can't modify frozen String");

    var encoding = Opal.encodings[name];

    if (encoding === str.encoding) { return str; }

    str.encoding = encoding;

    return str;
  };

  // @returns a String object with the encoding set from a string literal
  Opal.enc = function(str, name) {
    return Opal.set_encoding(new String(str), name);
  }


  // Initialization
  // --------------
  function $BasicObject() {}
  function $Object() {}
  function $Module() {}
  function $Class() {}

  Opal.BasicObject = BasicObject = Opal.allocate_class('BasicObject', null, $BasicObject);
  Opal.Object      = _Object     = Opal.allocate_class('Object', Opal.BasicObject, $Object);
  Opal.Module      = Module      = Opal.allocate_class('Module', Opal.Object, $Module);
  Opal.Class       = Class       = Opal.allocate_class('Class', Opal.Module, $Class);

  $set_proto(Opal.BasicObject, Opal.Class.$$prototype);
  $set_proto(Opal.Object, Opal.Class.$$prototype);
  $set_proto(Opal.Module, Opal.Class.$$prototype);
  $set_proto(Opal.Class, Opal.Class.$$prototype);

  // BasicObject can reach itself, avoid const_set to skip the $$base_module logic
  BasicObject.$$const["BasicObject"] = BasicObject;

  // Assign basic constants
  Opal.const_set(_Object, "BasicObject",  BasicObject);
  Opal.const_set(_Object, "Object",       _Object);
  Opal.const_set(_Object, "Module",       Module);
  Opal.const_set(_Object, "Class",        Class);

  // Fix booted classes to have correct .class value
  BasicObject.$$class = Class;
  _Object.$$class     = Class;
  Module.$$class      = Class;
  Class.$$class       = Class;

  // Forward .toString() to #to_s
  $defineProperty(_Object.$$prototype, 'toString', function() {
    var to_s = this.$to_s();
    if (to_s.$$is_string && typeof(to_s) === 'object') {
      // a string created using new String('string')
      return to_s.valueOf();
    } else {
      return to_s;
    }
  });

  // Make Kernel#require immediately available as it's needed to require all the
  // other corelib files.
  $defineProperty(_Object.$$prototype, '$require', Opal.require);

  // Instantiate the main object
  Opal.top = new _Object();
  Opal.top.$to_s = Opal.top.$inspect = function() { return 'main' };
  Opal.top.$define_method = top_define_method;

  // Foward calls to define_method on the top object to Object
  function top_define_method() {
    var args = Opal.slice.call(arguments, 0, arguments.length);
    var block = top_define_method.$$p;
    top_define_method.$$p = null;
    return Opal.send(_Object, 'define_method', args, block)
  };


  // Nil
  function $NilClass() {}
  Opal.NilClass = Opal.allocate_class('NilClass', Opal.Object, $NilClass);
  Opal.const_set(_Object, 'NilClass', Opal.NilClass);
  nil = Opal.nil = new Opal.NilClass();
  nil.$$id = nil_id;
  nil.call = nil.apply = function() { throw Opal.LocalJumpError.$new('no block given'); };

  // Errors
  Opal.breaker  = new Error('unexpected break (old)');
  Opal.returner = new Error('unexpected return');
  TypeError.$$super = Error;
}).call(this);
Opal.loaded(["corelib/runtime.js"]);
/* Generated by Opal 1.0.0 */
Opal.modules["corelib/helpers"] = function(Opal) {
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.$$$, $$ = Opal.$$, $type_error = Opal.type_error, $coerce_to = Opal.coerce_to, $module = Opal.module, $truthy = Opal.truthy;

  Opal.add_stubs(['$===', '$raise', '$respond_to?', '$nil?', '$__send__', '$<=>', '$class', '$coerce_to!', '$new', '$!=', '$[]', '$upcase']);
  return (function($base, $parent_nesting) {
    var self = $module($base, 'Opal');

    var $nesting = [self].concat($parent_nesting), $Opal_bridge$1, $Opal_coerce_to$excl$2, $Opal_coerce_to$ques$3, $Opal_try_convert$4, $Opal_compare$5, $Opal_destructure$6, $Opal_respond_to$ques$7, $Opal_instance_variable_name$excl$8, $Opal_class_variable_name$excl$9, $Opal_const_name$excl$10, $Opal_pristine$11;

    
    Opal.defs(self, '$bridge', $Opal_bridge$1 = function $$bridge(constructor, klass) {
      var self = this;

      return Opal.bridge(constructor, klass);
    }, $Opal_bridge$1.$$arity = 2);
    Opal.defs(self, '$coerce_to!', $Opal_coerce_to$excl$2 = function(object, type, method, $a) {
      var $post_args, args, self = this, coerced = nil;

      
      
      $post_args = Opal.slice.call(arguments, 3, arguments.length);
      
      args = $post_args;;
      coerced = $coerce_to(object, type, method, args);
      if ($truthy(type['$==='](coerced))) {
      } else {
        self.$raise($type_error(object, type, method, coerced))
      };
      return coerced;
    }, $Opal_coerce_to$excl$2.$$arity = -4);
    Opal.defs(self, '$coerce_to?', $Opal_coerce_to$ques$3 = function(object, type, method, $a) {
      var $post_args, args, self = this, coerced = nil;

      
      
      $post_args = Opal.slice.call(arguments, 3, arguments.length);
      
      args = $post_args;;
      if ($truthy(object['$respond_to?'](method))) {
      } else {
        return nil
      };
      coerced = $coerce_to(object, type, method, args);
      if ($truthy(coerced['$nil?']())) {
        return nil};
      if ($truthy(type['$==='](coerced))) {
      } else {
        self.$raise($type_error(object, type, method, coerced))
      };
      return coerced;
    }, $Opal_coerce_to$ques$3.$$arity = -4);
    Opal.defs(self, '$try_convert', $Opal_try_convert$4 = function $$try_convert(object, type, method) {
      var self = this;

      
      if ($truthy(type['$==='](object))) {
        return object};
      if ($truthy(object['$respond_to?'](method))) {
        return object.$__send__(method)
      } else {
        return nil
      };
    }, $Opal_try_convert$4.$$arity = 3);
    Opal.defs(self, '$compare', $Opal_compare$5 = function $$compare(a, b) {
      var self = this, compare = nil;

      
      compare = a['$<=>'](b);
      if ($truthy(compare === nil)) {
        self.$raise($$($nesting, 'ArgumentError'), "" + "comparison of " + (a.$class()) + " with " + (b.$class()) + " failed")};
      return compare;
    }, $Opal_compare$5.$$arity = 2);
    Opal.defs(self, '$destructure', $Opal_destructure$6 = function $$destructure(args) {
      var self = this;

      
      if (args.length == 1) {
        return args[0];
      }
      else if (args.$$is_array) {
        return args;
      }
      else {
        var args_ary = new Array(args.length);
        for(var i = 0, l = args_ary.length; i < l; i++) { args_ary[i] = args[i]; }

        return args_ary;
      }
    
    }, $Opal_destructure$6.$$arity = 1);
    Opal.defs(self, '$respond_to?', $Opal_respond_to$ques$7 = function(obj, method, include_all) {
      var self = this;

      
      
      if (include_all == null) {
        include_all = false;
      };
      
      if (obj == null || !obj.$$class) {
        return false;
      }
    ;
      return obj['$respond_to?'](method, include_all);
    }, $Opal_respond_to$ques$7.$$arity = -3);
    Opal.defs(self, '$instance_variable_name!', $Opal_instance_variable_name$excl$8 = function(name) {
      var self = this;

      
      name = $$($nesting, 'Opal')['$coerce_to!'](name, $$($nesting, 'String'), "to_str");
      if ($truthy(/^@[a-zA-Z_][a-zA-Z0-9_]*?$/.test(name))) {
      } else {
        self.$raise($$($nesting, 'NameError').$new("" + "'" + (name) + "' is not allowed as an instance variable name", name))
      };
      return name;
    }, $Opal_instance_variable_name$excl$8.$$arity = 1);
    Opal.defs(self, '$class_variable_name!', $Opal_class_variable_name$excl$9 = function(name) {
      var self = this;

      
      name = $$($nesting, 'Opal')['$coerce_to!'](name, $$($nesting, 'String'), "to_str");
      if ($truthy(name.length < 3 || name.slice(0,2) !== '@@')) {
        self.$raise($$($nesting, 'NameError').$new("" + "`" + (name) + "' is not allowed as a class variable name", name))};
      return name;
    }, $Opal_class_variable_name$excl$9.$$arity = 1);
    Opal.defs(self, '$const_name!', $Opal_const_name$excl$10 = function(const_name) {
      var self = this;

      
      const_name = $$($nesting, 'Opal')['$coerce_to!'](const_name, $$($nesting, 'String'), "to_str");
      if ($truthy(const_name['$[]'](0)['$!='](const_name['$[]'](0).$upcase()))) {
        self.$raise($$($nesting, 'NameError'), "" + "wrong constant name " + (const_name))};
      return const_name;
    }, $Opal_const_name$excl$10.$$arity = 1);
    Opal.defs(self, '$pristine', $Opal_pristine$11 = function $$pristine(owner_class, $a) {
      var $post_args, method_names, self = this;

      
      
      $post_args = Opal.slice.call(arguments, 1, arguments.length);
      
      method_names = $post_args;;
      
      var method_name, method;
      for (var i = method_names.length - 1; i >= 0; i--) {
        method_name = method_names[i];
        method = owner_class.$$prototype['$'+method_name];

        if (method && !method.$$stub) {
          method.$$pristine = true;
        }
      }
    ;
      return nil;
    }, $Opal_pristine$11.$$arity = -2);
  })($nesting[0], $nesting)
};

/* Generated by Opal 1.0.0 */
Opal.modules["corelib/module"] = function(Opal) {
  function $rb_lt(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs < rhs : lhs['$<'](rhs);
  }
  function $rb_gt(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs > rhs : lhs['$>'](rhs);
  }
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.$$$, $$ = Opal.$$, $truthy = Opal.truthy, $coerce_to = Opal.coerce_to, $klass = Opal.klass, $send = Opal.send, $hash2 = Opal.hash2, $lambda = Opal.lambda, $range = Opal.range, $send2 = Opal.send2;

  Opal.add_stubs(['$module_eval', '$to_proc', '$===', '$raise', '$equal?', '$<', '$>', '$nil?', '$attr_reader', '$attr_writer', '$warn', '$attr_accessor', '$class_variable_name!', '$new', '$const_name!', '$=~', '$inject', '$split', '$const_get', '$==', '$!~', '$start_with?', '$bind', '$call', '$class', '$append_features', '$included', '$name', '$cover?', '$size', '$merge', '$compile', '$proc', '$any?', '$prepend_features', '$prepended', '$to_s', '$__id__', '$constants', '$include?', '$copy_class_variables', '$copy_constants']);
  return (function($base, $super, $parent_nesting) {
    var self = $klass($base, $super, 'Module');

    var $nesting = [self].concat($parent_nesting), $Module_allocate$1, $Module_initialize$2, $Module_$eq_eq_eq$3, $Module_$lt$4, $Module_$lt_eq$5, $Module_$gt$6, $Module_$gt_eq$7, $Module_$lt_eq_gt$8, $Module_alias_method$9, $Module_alias_native$10, $Module_ancestors$11, $Module_append_features$12, $Module_attr_accessor$13, $Module_attr$14, $Module_attr_reader$15, $Module_attr_writer$16, $Module_autoload$17, $Module_class_variables$18, $Module_class_variable_get$19, $Module_class_variable_set$20, $Module_class_variable_defined$ques$21, $Module_remove_class_variable$22, $Module_constants$23, $Module_constants$24, $Module_nesting$25, $Module_const_defined$ques$26, $Module_const_get$27, $Module_const_missing$29, $Module_const_set$30, $Module_public_constant$31, $Module_define_method$32, $Module_remove_method$34, $Module_singleton_class$ques$35, $Module_include$36, $Module_included_modules$37, $Module_include$ques$38, $Module_instance_method$39, $Module_instance_methods$40, $Module_included$41, $Module_extended$42, $Module_extend_object$43, $Module_method_added$44, $Module_method_removed$45, $Module_method_undefined$46, $Module_module_eval$47, $Module_module_exec$49, $Module_method_defined$ques$50, $Module_module_function$51, $Module_name$52, $Module_prepend$53, $Module_prepend_features$54, $Module_prepended$55, $Module_remove_const$56, $Module_to_s$57, $Module_undef_method$58, $Module_instance_variables$59, $Module_dup$60, $Module_copy_class_variables$61, $Module_copy_constants$62;

    
    Opal.defs(self, '$allocate', $Module_allocate$1 = function $$allocate() {
      var self = this;

      
      var module = Opal.allocate_module(nil, function(){});
      // Link the prototype of Module subclasses
      if (self !== Opal.Module) Object.setPrototypeOf(module, self.$$prototype);
      return module;
    
    }, $Module_allocate$1.$$arity = 0);
    
    Opal.def(self, '$initialize', $Module_initialize$2 = function $$initialize() {
      var $iter = $Module_initialize$2.$$p, block = $iter || nil, self = this;

      if ($iter) $Module_initialize$2.$$p = null;
      
      
      if ($iter) $Module_initialize$2.$$p = null;;
      if ((block !== nil)) {
        return $send(self, 'module_eval', [], block.$to_proc())
      } else {
        return nil
      };
    }, $Module_initialize$2.$$arity = 0);
    
    Opal.def(self, '$===', $Module_$eq_eq_eq$3 = function(object) {
      var self = this;

      
      if ($truthy(object == null)) {
        return false};
      return Opal.is_a(object, self);;
    }, $Module_$eq_eq_eq$3.$$arity = 1);
    
    Opal.def(self, '$<', $Module_$lt$4 = function(other) {
      var self = this;

      
      if ($truthy($$($nesting, 'Module')['$==='](other))) {
      } else {
        self.$raise($$($nesting, 'TypeError'), "compared with non class/module")
      };
      
      var working = self,
          ancestors,
          i, length;

      if (working === other) {
        return false;
      }

      for (i = 0, ancestors = Opal.ancestors(self), length = ancestors.length; i < length; i++) {
        if (ancestors[i] === other) {
          return true;
        }
      }

      for (i = 0, ancestors = Opal.ancestors(other), length = ancestors.length; i < length; i++) {
        if (ancestors[i] === self) {
          return false;
        }
      }

      return nil;
    ;
    }, $Module_$lt$4.$$arity = 1);
    
    Opal.def(self, '$<=', $Module_$lt_eq$5 = function(other) {
      var $a, self = this;

      return ($truthy($a = self['$equal?'](other)) ? $a : $rb_lt(self, other))
    }, $Module_$lt_eq$5.$$arity = 1);
    
    Opal.def(self, '$>', $Module_$gt$6 = function(other) {
      var self = this;

      
      if ($truthy($$($nesting, 'Module')['$==='](other))) {
      } else {
        self.$raise($$($nesting, 'TypeError'), "compared with non class/module")
      };
      return $rb_lt(other, self);
    }, $Module_$gt$6.$$arity = 1);
    
    Opal.def(self, '$>=', $Module_$gt_eq$7 = function(other) {
      var $a, self = this;

      return ($truthy($a = self['$equal?'](other)) ? $a : $rb_gt(self, other))
    }, $Module_$gt_eq$7.$$arity = 1);
    
    Opal.def(self, '$<=>', $Module_$lt_eq_gt$8 = function(other) {
      var self = this, lt = nil;

      
      
      if (self === other) {
        return 0;
      }
    ;
      if ($truthy($$($nesting, 'Module')['$==='](other))) {
      } else {
        return nil
      };
      lt = $rb_lt(self, other);
      if ($truthy(lt['$nil?']())) {
        return nil};
      if ($truthy(lt)) {
        return -1
      } else {
        return 1
      };
    }, $Module_$lt_eq_gt$8.$$arity = 1);
    
    Opal.def(self, '$alias_method', $Module_alias_method$9 = function $$alias_method(newname, oldname) {
      var self = this;

      
      newname = $coerce_to(newname, $$($nesting, 'String'), 'to_str');
      oldname = $coerce_to(oldname, $$($nesting, 'String'), 'to_str');
      Opal.alias(self, newname, oldname);
      return self;
    }, $Module_alias_method$9.$$arity = 2);
    
    Opal.def(self, '$alias_native', $Module_alias_native$10 = function $$alias_native(mid, jsid) {
      var self = this;

      
      
      if (jsid == null) {
        jsid = mid;
      };
      Opal.alias_native(self, mid, jsid);
      return self;
    }, $Module_alias_native$10.$$arity = -2);
    
    Opal.def(self, '$ancestors', $Module_ancestors$11 = function $$ancestors() {
      var self = this;

      return Opal.ancestors(self);
    }, $Module_ancestors$11.$$arity = 0);
    
    Opal.def(self, '$append_features', $Module_append_features$12 = function $$append_features(includer) {
      var self = this;

      
      Opal.append_features(self, includer);
      return self;
    }, $Module_append_features$12.$$arity = 1);
    
    Opal.def(self, '$attr_accessor', $Module_attr_accessor$13 = function $$attr_accessor($a) {
      var $post_args, names, self = this;

      
      
      $post_args = Opal.slice.call(arguments, 0, arguments.length);
      
      names = $post_args;;
      $send(self, 'attr_reader', Opal.to_a(names));
      return $send(self, 'attr_writer', Opal.to_a(names));
    }, $Module_attr_accessor$13.$$arity = -1);
    
    Opal.def(self, '$attr', $Module_attr$14 = function $$attr($a) {
      var $post_args, args, self = this;

      
      
      $post_args = Opal.slice.call(arguments, 0, arguments.length);
      
      args = $post_args;;
      
      if (args.length == 2 && (args[1] === true || args[1] === false)) {
        self.$warn("optional boolean argument is obsoleted", $hash2(["uplevel"], {"uplevel": 1}))

        args[1] ? self.$attr_accessor(args[0]) : self.$attr_reader(args[0]);
        return nil;
      }
    ;
      return $send(self, 'attr_reader', Opal.to_a(args));
    }, $Module_attr$14.$$arity = -1);
    
    Opal.def(self, '$attr_reader', $Module_attr_reader$15 = function $$attr_reader($a) {
      var $post_args, names, self = this;

      
      
      $post_args = Opal.slice.call(arguments, 0, arguments.length);
      
      names = $post_args;;
      
      var proto = self.$$prototype;

      for (var i = names.length - 1; i >= 0; i--) {
        var name = names[i],
            id   = '$' + name,
            ivar = Opal.ivar(name);

        // the closure here is needed because name will change at the next
        // cycle, I wish we could use let.
        var body = (function(ivar) {
          return function() {
            if (this[ivar] == null) {
              return nil;
            }
            else {
              return this[ivar];
            }
          };
        })(ivar);

        // initialize the instance variable as nil
        Opal.defineProperty(proto, ivar, nil);

        body.$$parameters = [];
        body.$$arity = 0;

        Opal.defn(self, id, body);
      }
    ;
      return nil;
    }, $Module_attr_reader$15.$$arity = -1);
    
    Opal.def(self, '$attr_writer', $Module_attr_writer$16 = function $$attr_writer($a) {
      var $post_args, names, self = this;

      
      
      $post_args = Opal.slice.call(arguments, 0, arguments.length);
      
      names = $post_args;;
      
      var proto = self.$$prototype;

      for (var i = names.length - 1; i >= 0; i--) {
        var name = names[i],
            id   = '$' + name + '=',
            ivar = Opal.ivar(name);

        // the closure here is needed because name will change at the next
        // cycle, I wish we could use let.
        var body = (function(ivar){
          return function(value) {
            return this[ivar] = value;
          }
        })(ivar);

        body.$$parameters = [['req']];
        body.$$arity = 1;

        // initialize the instance variable as nil
        Opal.defineProperty(proto, ivar, nil);

        Opal.defn(self, id, body);
      }
    ;
      return nil;
    }, $Module_attr_writer$16.$$arity = -1);
    
    Opal.def(self, '$autoload', $Module_autoload$17 = function $$autoload(const$, path) {
      var self = this;

      
      if (self.$$autoload == null) self.$$autoload = {};
      Opal.const_cache_version++;
      self.$$autoload[const$] = path;
      return nil;
    
    }, $Module_autoload$17.$$arity = 2);
    
    Opal.def(self, '$class_variables', $Module_class_variables$18 = function $$class_variables() {
      var self = this;

      return Object.keys(Opal.class_variables(self));
    }, $Module_class_variables$18.$$arity = 0);
    
    Opal.def(self, '$class_variable_get', $Module_class_variable_get$19 = function $$class_variable_get(name) {
      var self = this;

      
      name = $$($nesting, 'Opal')['$class_variable_name!'](name);
      
      var value = Opal.class_variables(self)[name];
      if (value == null) {
        self.$raise($$($nesting, 'NameError').$new("" + "uninitialized class variable " + (name) + " in " + (self), name))
      }
      return value;
    ;
    }, $Module_class_variable_get$19.$$arity = 1);
    
    Opal.def(self, '$class_variable_set', $Module_class_variable_set$20 = function $$class_variable_set(name, value) {
      var self = this;

      
      name = $$($nesting, 'Opal')['$class_variable_name!'](name);
      return Opal.class_variable_set(self, name, value);;
    }, $Module_class_variable_set$20.$$arity = 2);
    
    Opal.def(self, '$class_variable_defined?', $Module_class_variable_defined$ques$21 = function(name) {
      var self = this;

      
      name = $$($nesting, 'Opal')['$class_variable_name!'](name);
      return Opal.class_variables(self).hasOwnProperty(name);;
    }, $Module_class_variable_defined$ques$21.$$arity = 1);
    
    Opal.def(self, '$remove_class_variable', $Module_remove_class_variable$22 = function $$remove_class_variable(name) {
      var self = this;

      
      name = $$($nesting, 'Opal')['$class_variable_name!'](name);
      
      if (Opal.hasOwnProperty.call(self.$$cvars, name)) {
        var value = self.$$cvars[name];
        delete self.$$cvars[name];
        return value;
      } else {
        self.$raise($$($nesting, 'NameError'), "" + "cannot remove " + (name) + " for " + (self))
      }
    ;
    }, $Module_remove_class_variable$22.$$arity = 1);
    
    Opal.def(self, '$constants', $Module_constants$23 = function $$constants(inherit) {
      var self = this;

      
      
      if (inherit == null) {
        inherit = true;
      };
      return Opal.constants(self, inherit);;
    }, $Module_constants$23.$$arity = -1);
    Opal.defs(self, '$constants', $Module_constants$24 = function $$constants(inherit) {
      var self = this;

      
      ;
      
      if (inherit == null) {
        var nesting = (self.$$nesting || []).concat(Opal.Object),
            constant, constants = {},
            i, ii;

        for(i = 0, ii = nesting.length; i < ii; i++) {
          for (constant in nesting[i].$$const) {
            constants[constant] = true;
          }
        }
        return Object.keys(constants);
      } else {
        return Opal.constants(self, inherit)
      }
    ;
    }, $Module_constants$24.$$arity = -1);
    Opal.defs(self, '$nesting', $Module_nesting$25 = function $$nesting() {
      var self = this;

      return self.$$nesting || [];
    }, $Module_nesting$25.$$arity = 0);
    
    Opal.def(self, '$const_defined?', $Module_const_defined$ques$26 = function(name, inherit) {
      var self = this;

      
      
      if (inherit == null) {
        inherit = true;
      };
      name = $$($nesting, 'Opal')['$const_name!'](name);
      if ($truthy(name['$=~']($$$($$($nesting, 'Opal'), 'CONST_NAME_REGEXP')))) {
      } else {
        self.$raise($$($nesting, 'NameError').$new("" + "wrong constant name " + (name), name))
      };
      
      var module, modules = [self], module_constants, i, ii;

      // Add up ancestors if inherit is true
      if (inherit) {
        modules = modules.concat(Opal.ancestors(self));

        // Add Object's ancestors if it's a module – modules have no ancestors otherwise
        if (self.$$is_module) {
          modules = modules.concat([Opal.Object]).concat(Opal.ancestors(Opal.Object));
        }
      }

      for (i = 0, ii = modules.length; i < ii; i++) {
        module = modules[i];
        if (module.$$const[name] != null) {
          return true;
        }
      }

      return false;
    ;
    }, $Module_const_defined$ques$26.$$arity = -2);
    
    Opal.def(self, '$const_get', $Module_const_get$27 = function $$const_get(name, inherit) {
      var $$28, self = this;

      
      
      if (inherit == null) {
        inherit = true;
      };
      name = $$($nesting, 'Opal')['$const_name!'](name);
      
      if (name.indexOf('::') === 0 && name !== '::'){
        name = name.slice(2);
      }
    ;
      if ($truthy(name.indexOf('::') != -1 && name != '::')) {
        return $send(name.$split("::"), 'inject', [self], ($$28 = function(o, c){var self = $$28.$$s == null ? this : $$28.$$s;

        
          
          if (o == null) {
            o = nil;
          };
          
          if (c == null) {
            c = nil;
          };
          return o.$const_get(c);}, $$28.$$s = self, $$28.$$arity = 2, $$28))};
      if ($truthy(name['$=~']($$$($$($nesting, 'Opal'), 'CONST_NAME_REGEXP')))) {
      } else {
        self.$raise($$($nesting, 'NameError').$new("" + "wrong constant name " + (name), name))
      };
      
      if (inherit) {
        return $$([self], name);
      } else {
        return Opal.const_get_local(self, name);
      }
    ;
    }, $Module_const_get$27.$$arity = -2);
    
    Opal.def(self, '$const_missing', $Module_const_missing$29 = function $$const_missing(name) {
      var self = this, full_const_name = nil;

      
      
      if (self.$$autoload) {
        var file = self.$$autoload[name];

        if (file) {
          self.$require(file);

          return self.$const_get(name);
        }
      }
    ;
      full_const_name = (function() {if (self['$==']($$($nesting, 'Object'))) {
        return name
      } else {
        return "" + (self) + "::" + (name)
      }; return nil; })();
      return self.$raise($$($nesting, 'NameError').$new("" + "uninitialized constant " + (full_const_name), name));
    }, $Module_const_missing$29.$$arity = 1);
    
    Opal.def(self, '$const_set', $Module_const_set$30 = function $$const_set(name, value) {
      var $a, self = this;

      
      name = $$($nesting, 'Opal')['$const_name!'](name);
      if ($truthy(($truthy($a = name['$!~']($$$($$($nesting, 'Opal'), 'CONST_NAME_REGEXP'))) ? $a : name['$start_with?']("::")))) {
        self.$raise($$($nesting, 'NameError').$new("" + "wrong constant name " + (name), name))};
      Opal.const_set(self, name, value);
      return value;
    }, $Module_const_set$30.$$arity = 2);
    
    Opal.def(self, '$public_constant', $Module_public_constant$31 = function $$public_constant(const_name) {
      var self = this;

      return nil
    }, $Module_public_constant$31.$$arity = 1);
    
    Opal.def(self, '$define_method', $Module_define_method$32 = function $$define_method(name, method) {
      var $iter = $Module_define_method$32.$$p, block = $iter || nil, $a, $$33, self = this, $case = nil;

      if ($iter) $Module_define_method$32.$$p = null;
      
      
      if ($iter) $Module_define_method$32.$$p = null;;
      ;
      if ($truthy(method === undefined && block === nil)) {
        self.$raise($$($nesting, 'ArgumentError'), "tried to create a Proc object without a block")};
      block = ($truthy($a = block) ? $a : (function() {$case = method;
      if ($$($nesting, 'Proc')['$===']($case)) {return method}
      else if ($$($nesting, 'Method')['$===']($case)) {return method.$to_proc().$$unbound}
      else if ($$($nesting, 'UnboundMethod')['$===']($case)) {return $lambda(($$33 = function($b){var self = $$33.$$s == null ? this : $$33.$$s, $post_args, args, bound = nil;

      
        
        $post_args = Opal.slice.call(arguments, 0, arguments.length);
        
        args = $post_args;;
        bound = method.$bind(self);
        return $send(bound, 'call', Opal.to_a(args));}, $$33.$$s = self, $$33.$$arity = -1, $$33))}
      else {return self.$raise($$($nesting, 'TypeError'), "" + "wrong argument type " + (block.$class()) + " (expected Proc/Method)")}})());
      
      var id = '$' + name;

      block.$$jsid        = name;
      block.$$s           = null;
      block.$$def         = block;
      block.$$define_meth = true;

      Opal.defn(self, id, block);

      return name;
    ;
    }, $Module_define_method$32.$$arity = -2);
    
    Opal.def(self, '$remove_method', $Module_remove_method$34 = function $$remove_method($a) {
      var $post_args, names, self = this;

      
      
      $post_args = Opal.slice.call(arguments, 0, arguments.length);
      
      names = $post_args;;
      
      for (var i = 0, length = names.length; i < length; i++) {
        Opal.rdef(self, "$" + names[i]);
      }
    ;
      return self;
    }, $Module_remove_method$34.$$arity = -1);
    
    Opal.def(self, '$singleton_class?', $Module_singleton_class$ques$35 = function() {
      var self = this;

      return !!self.$$is_singleton;
    }, $Module_singleton_class$ques$35.$$arity = 0);
    
    Opal.def(self, '$include', $Module_include$36 = function $$include($a) {
      var $post_args, mods, self = this;

      
      
      $post_args = Opal.slice.call(arguments, 0, arguments.length);
      
      mods = $post_args;;
      
      for (var i = mods.length - 1; i >= 0; i--) {
        var mod = mods[i];

        if (!mod.$$is_module) {
          self.$raise($$($nesting, 'TypeError'), "" + "wrong argument type " + ((mod).$class()) + " (expected Module)");
        }

        (mod).$append_features(self);
        (mod).$included(self);
      }
    ;
      return self;
    }, $Module_include$36.$$arity = -1);
    
    Opal.def(self, '$included_modules', $Module_included_modules$37 = function $$included_modules() {
      var self = this;

      return Opal.included_modules(self);
    }, $Module_included_modules$37.$$arity = 0);
    
    Opal.def(self, '$include?', $Module_include$ques$38 = function(mod) {
      var self = this;

      
      if (!mod.$$is_module) {
        self.$raise($$($nesting, 'TypeError'), "" + "wrong argument type " + ((mod).$class()) + " (expected Module)");
      }

      var i, ii, mod2, ancestors = Opal.ancestors(self);

      for (i = 0, ii = ancestors.length; i < ii; i++) {
        mod2 = ancestors[i];
        if (mod2 === mod && mod2 !== self) {
          return true;
        }
      }

      return false;
    
    }, $Module_include$ques$38.$$arity = 1);
    
    Opal.def(self, '$instance_method', $Module_instance_method$39 = function $$instance_method(name) {
      var self = this;

      
      var meth = self.$$prototype['$' + name];

      if (!meth || meth.$$stub) {
        self.$raise($$($nesting, 'NameError').$new("" + "undefined method `" + (name) + "' for class `" + (self.$name()) + "'", name));
      }

      return $$($nesting, 'UnboundMethod').$new(self, meth.$$owner || self, meth, name);
    
    }, $Module_instance_method$39.$$arity = 1);
    
    Opal.def(self, '$instance_methods', $Module_instance_methods$40 = function $$instance_methods(include_super) {
      var self = this;

      
      
      if (include_super == null) {
        include_super = true;
      };
      
      if ($truthy(include_super)) {
        return Opal.instance_methods(self);
      } else {
        return Opal.own_instance_methods(self);
      }
    ;
    }, $Module_instance_methods$40.$$arity = -1);
    
    Opal.def(self, '$included', $Module_included$41 = function $$included(mod) {
      var self = this;

      return nil
    }, $Module_included$41.$$arity = 1);
    
    Opal.def(self, '$extended', $Module_extended$42 = function $$extended(mod) {
      var self = this;

      return nil
    }, $Module_extended$42.$$arity = 1);
    
    Opal.def(self, '$extend_object', $Module_extend_object$43 = function $$extend_object(object) {
      var self = this;

      return nil
    }, $Module_extend_object$43.$$arity = 1);
    
    Opal.def(self, '$method_added', $Module_method_added$44 = function $$method_added($a) {
      var $post_args, self = this;

      
      
      $post_args = Opal.slice.call(arguments, 0, arguments.length);
      ;
      return nil;
    }, $Module_method_added$44.$$arity = -1);
    
    Opal.def(self, '$method_removed', $Module_method_removed$45 = function $$method_removed($a) {
      var $post_args, self = this;

      
      
      $post_args = Opal.slice.call(arguments, 0, arguments.length);
      ;
      return nil;
    }, $Module_method_removed$45.$$arity = -1);
    
    Opal.def(self, '$method_undefined', $Module_method_undefined$46 = function $$method_undefined($a) {
      var $post_args, self = this;

      
      
      $post_args = Opal.slice.call(arguments, 0, arguments.length);
      ;
      return nil;
    }, $Module_method_undefined$46.$$arity = -1);
    
    Opal.def(self, '$module_eval', $Module_module_eval$47 = function $$module_eval($a) {
      var $iter = $Module_module_eval$47.$$p, block = $iter || nil, $post_args, args, $b, $$48, self = this, string = nil, file = nil, _lineno = nil, default_eval_options = nil, compiling_options = nil, compiled = nil;

      if ($iter) $Module_module_eval$47.$$p = null;
      
      
      if ($iter) $Module_module_eval$47.$$p = null;;
      
      $post_args = Opal.slice.call(arguments, 0, arguments.length);
      
      args = $post_args;;
      if ($truthy(($truthy($b = block['$nil?']()) ? !!Opal.compile : $b))) {
        
        if ($truthy($range(1, 3, false)['$cover?'](args.$size()))) {
        } else {
          $$($nesting, 'Kernel').$raise($$($nesting, 'ArgumentError'), "wrong number of arguments (0 for 1..3)")
        };
        $b = [].concat(Opal.to_a(args)), (string = ($b[0] == null ? nil : $b[0])), (file = ($b[1] == null ? nil : $b[1])), (_lineno = ($b[2] == null ? nil : $b[2])), $b;
        default_eval_options = $hash2(["file", "eval"], {"file": ($truthy($b = file) ? $b : "(eval)"), "eval": true});
        compiling_options = Opal.hash({ arity_check: false }).$merge(default_eval_options);
        compiled = $$($nesting, 'Opal').$compile(string, compiling_options);
        block = $send($$($nesting, 'Kernel'), 'proc', [], ($$48 = function(){var self = $$48.$$s == null ? this : $$48.$$s;

        
          return (function(self) {
            return eval(compiled);
          })(self)
        }, $$48.$$s = self, $$48.$$arity = 0, $$48));
      } else if ($truthy(args['$any?']())) {
        $$($nesting, 'Kernel').$raise($$($nesting, 'ArgumentError'), "" + ("" + "wrong number of arguments (" + (args.$size()) + " for 0)") + "\n\n  NOTE:If you want to enable passing a String argument please add \"require 'opal-parser'\" to your script\n")};
      
      var old = block.$$s,
          result;

      block.$$s = null;
      result = block.apply(self, [self]);
      block.$$s = old;

      return result;
    ;
    }, $Module_module_eval$47.$$arity = -1);
    Opal.alias(self, "class_eval", "module_eval");
    
    Opal.def(self, '$module_exec', $Module_module_exec$49 = function $$module_exec($a) {
      var $iter = $Module_module_exec$49.$$p, block = $iter || nil, $post_args, args, self = this;

      if ($iter) $Module_module_exec$49.$$p = null;
      
      
      if ($iter) $Module_module_exec$49.$$p = null;;
      
      $post_args = Opal.slice.call(arguments, 0, arguments.length);
      
      args = $post_args;;
      
      if (block === nil) {
        self.$raise($$($nesting, 'LocalJumpError'), "no block given")
      }

      var block_self = block.$$s, result;

      block.$$s = null;
      result = block.apply(self, args);
      block.$$s = block_self;

      return result;
    ;
    }, $Module_module_exec$49.$$arity = -1);
    Opal.alias(self, "class_exec", "module_exec");
    
    Opal.def(self, '$method_defined?', $Module_method_defined$ques$50 = function(method) {
      var self = this;

      
      var body = self.$$prototype['$' + method];
      return (!!body) && !body.$$stub;
    
    }, $Module_method_defined$ques$50.$$arity = 1);
    
    Opal.def(self, '$module_function', $Module_module_function$51 = function $$module_function($a) {
      var $post_args, methods, self = this;

      
      
      $post_args = Opal.slice.call(arguments, 0, arguments.length);
      
      methods = $post_args;;
      
      if (methods.length === 0) {
        self.$$module_function = true;
      }
      else {
        for (var i = 0, length = methods.length; i < length; i++) {
          var meth = methods[i],
              id   = '$' + meth,
              func = self.$$prototype[id];

          Opal.defs(self, id, func);
        }
      }

      return self;
    ;
    }, $Module_module_function$51.$$arity = -1);
    
    Opal.def(self, '$name', $Module_name$52 = function $$name() {
      var self = this;

      
      if (self.$$full_name) {
        return self.$$full_name;
      }

      var result = [], base = self;

      while (base) {
        // Give up if any of the ancestors is unnamed
        if (base.$$name === nil || base.$$name == null) return nil;

        result.unshift(base.$$name);

        base = base.$$base_module;

        if (base === Opal.Object) {
          break;
        }
      }

      if (result.length === 0) {
        return nil;
      }

      return self.$$full_name = result.join('::');
    
    }, $Module_name$52.$$arity = 0);
    
    Opal.def(self, '$prepend', $Module_prepend$53 = function $$prepend($a) {
      var $post_args, mods, self = this;

      
      
      $post_args = Opal.slice.call(arguments, 0, arguments.length);
      
      mods = $post_args;;
      
      if (mods.length === 0) {
        self.$raise($$($nesting, 'ArgumentError'), "wrong number of arguments (given 0, expected 1+)")
      }

      for (var i = mods.length - 1; i >= 0; i--) {
        var mod = mods[i];

        if (!mod.$$is_module) {
          self.$raise($$($nesting, 'TypeError'), "" + "wrong argument type " + ((mod).$class()) + " (expected Module)");
        }

        (mod).$prepend_features(self);
        (mod).$prepended(self);
      }
    ;
      return self;
    }, $Module_prepend$53.$$arity = -1);
    
    Opal.def(self, '$prepend_features', $Module_prepend_features$54 = function $$prepend_features(prepender) {
      var self = this;

      
      
      if (!self.$$is_module) {
        self.$raise($$($nesting, 'TypeError'), "" + "wrong argument type " + (self.$class()) + " (expected Module)");
      }

      Opal.prepend_features(self, prepender)
    ;
      return self;
    }, $Module_prepend_features$54.$$arity = 1);
    
    Opal.def(self, '$prepended', $Module_prepended$55 = function $$prepended(mod) {
      var self = this;

      return nil
    }, $Module_prepended$55.$$arity = 1);
    
    Opal.def(self, '$remove_const', $Module_remove_const$56 = function $$remove_const(name) {
      var self = this;

      return Opal.const_remove(self, name);
    }, $Module_remove_const$56.$$arity = 1);
    
    Opal.def(self, '$to_s', $Module_to_s$57 = function $$to_s() {
      var $a, self = this;

      return ($truthy($a = Opal.Module.$name.call(self)) ? $a : "" + "#<" + (self.$$is_module ? 'Module' : 'Class') + ":0x" + (self.$__id__().$to_s(16)) + ">")
    }, $Module_to_s$57.$$arity = 0);
    
    Opal.def(self, '$undef_method', $Module_undef_method$58 = function $$undef_method($a) {
      var $post_args, names, self = this;

      
      
      $post_args = Opal.slice.call(arguments, 0, arguments.length);
      
      names = $post_args;;
      
      for (var i = 0, length = names.length; i < length; i++) {
        Opal.udef(self, "$" + names[i]);
      }
    ;
      return self;
    }, $Module_undef_method$58.$$arity = -1);
    
    Opal.def(self, '$instance_variables', $Module_instance_variables$59 = function $$instance_variables() {
      var self = this, consts = nil;

      
      consts = (Opal.Module.$$nesting = $nesting, self.$constants());
      
      var result = [];

      for (var name in self) {
        if (self.hasOwnProperty(name) && name.charAt(0) !== '$' && name !== 'constructor' && !consts['$include?'](name)) {
          result.push('@' + name);
        }
      }

      return result;
    ;
    }, $Module_instance_variables$59.$$arity = 0);
    
    Opal.def(self, '$dup', $Module_dup$60 = function $$dup() {
      var $iter = $Module_dup$60.$$p, $yield = $iter || nil, self = this, copy = nil, $zuper = nil, $zuper_i = nil, $zuper_ii = nil;

      if ($iter) $Module_dup$60.$$p = null;
      // Prepare super implicit arguments
      for($zuper_i = 0, $zuper_ii = arguments.length, $zuper = new Array($zuper_ii); $zuper_i < $zuper_ii; $zuper_i++) {
        $zuper[$zuper_i] = arguments[$zuper_i];
      }
      
      copy = $send2(self, Opal.find_super_dispatcher(self, 'dup', $Module_dup$60, false, true), 'dup', $zuper, $iter);
      copy.$copy_class_variables(self);
      copy.$copy_constants(self);
      return copy;
    }, $Module_dup$60.$$arity = 0);
    
    Opal.def(self, '$copy_class_variables', $Module_copy_class_variables$61 = function $$copy_class_variables(other) {
      var self = this;

      
      for (var name in other.$$cvars) {
        self.$$cvars[name] = other.$$cvars[name];
      }
    
    }, $Module_copy_class_variables$61.$$arity = 1);
    return (Opal.def(self, '$copy_constants', $Module_copy_constants$62 = function $$copy_constants(other) {
      var self = this;

      
      var name, other_constants = other.$$const;

      for (name in other_constants) {
        Opal.const_set(self, name, other_constants[name]);
      }
    
    }, $Module_copy_constants$62.$$arity = 1), nil) && 'copy_constants';
  })($nesting[0], null, $nesting)
};

/* Generated by Opal 1.0.0 */
Opal.modules["corelib/class"] = function(Opal) {
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.$$$, $$ = Opal.$$, $klass = Opal.klass, $send = Opal.send, $send2 = Opal.send2;

  Opal.add_stubs(['$require', '$class_eval', '$to_proc', '$initialize_copy', '$allocate', '$name', '$to_s']);
  
  self.$require("corelib/module");
  return (function($base, $super, $parent_nesting) {
    var self = $klass($base, $super, 'Class');

    var $nesting = [self].concat($parent_nesting), $Class_new$1, $Class_allocate$2, $Class_inherited$3, $Class_initialize_dup$4, $Class_new$5, $Class_superclass$6, $Class_to_s$7;

    
    Opal.defs(self, '$new', $Class_new$1 = function(superclass) {
      var $iter = $Class_new$1.$$p, block = $iter || nil, self = this;

      if ($iter) $Class_new$1.$$p = null;
      
      
      if ($iter) $Class_new$1.$$p = null;;
      
      if (superclass == null) {
        superclass = $$($nesting, 'Object');
      };
      
      if (!superclass.$$is_class) {
        throw Opal.TypeError.$new("superclass must be a Class");
      }

      var klass = Opal.allocate_class(nil, superclass);
      superclass.$inherited(klass);
      (function() {if ((block !== nil)) {
        return $send((klass), 'class_eval', [], block.$to_proc())
      } else {
        return nil
      }; return nil; })()
      return klass;
    ;
    }, $Class_new$1.$$arity = -1);
    
    Opal.def(self, '$allocate', $Class_allocate$2 = function $$allocate() {
      var self = this;

      
      var obj = new self.$$constructor();
      obj.$$id = Opal.uid();
      return obj;
    
    }, $Class_allocate$2.$$arity = 0);
    
    Opal.def(self, '$inherited', $Class_inherited$3 = function $$inherited(cls) {
      var self = this;

      return nil
    }, $Class_inherited$3.$$arity = 1);
    
    Opal.def(self, '$initialize_dup', $Class_initialize_dup$4 = function $$initialize_dup(original) {
      var self = this;

      
      self.$initialize_copy(original);
      
      self.$$name = null;
      self.$$full_name = null;
    ;
    }, $Class_initialize_dup$4.$$arity = 1);
    
    Opal.def(self, '$new', $Class_new$5 = function($a) {
      var $iter = $Class_new$5.$$p, block = $iter || nil, $post_args, args, self = this;

      if ($iter) $Class_new$5.$$p = null;
      
      
      if ($iter) $Class_new$5.$$p = null;;
      
      $post_args = Opal.slice.call(arguments, 0, arguments.length);
      
      args = $post_args;;
      
      var object = self.$allocate();
      Opal.send(object, object.$initialize, args, block);
      return object;
    ;
    }, $Class_new$5.$$arity = -1);
    
    Opal.def(self, '$superclass', $Class_superclass$6 = function $$superclass() {
      var self = this;

      return self.$$super || nil;
    }, $Class_superclass$6.$$arity = 0);
    return (Opal.def(self, '$to_s', $Class_to_s$7 = function $$to_s() {
      var $iter = $Class_to_s$7.$$p, $yield = $iter || nil, self = this;

      if ($iter) $Class_to_s$7.$$p = null;
      
      var singleton_of = self.$$singleton_of;

      if (singleton_of && singleton_of.$$is_a_module) {
        return "" + "#<Class:" + ((singleton_of).$name()) + ">";
      }
      else if (singleton_of) {
        // a singleton class created from an object
        return "" + "#<Class:#<" + ((singleton_of.$$class).$name()) + ":0x" + ((Opal.id(singleton_of)).$to_s(16)) + ">>";
      }

      return $send2(self, Opal.find_super_dispatcher(self, 'to_s', $Class_to_s$7, false, true), 'to_s', [], null);
    
    }, $Class_to_s$7.$$arity = 0), nil) && 'to_s';
  })($nesting[0], null, $nesting);
};

/* Generated by Opal 1.0.0 */
Opal.modules["corelib/basic_object"] = function(Opal) {
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.$$$, $$ = Opal.$$, $klass = Opal.klass, $truthy = Opal.truthy, $range = Opal.range, $hash2 = Opal.hash2, $send = Opal.send;

  Opal.add_stubs(['$==', '$!', '$nil?', '$cover?', '$size', '$raise', '$merge', '$compile', '$proc', '$any?', '$inspect', '$new']);
  return (function($base, $super, $parent_nesting) {
    var self = $klass($base, $super, 'BasicObject');

    var $nesting = [self].concat($parent_nesting), $BasicObject_initialize$1, $BasicObject_$eq_eq$2, $BasicObject_eql$ques$3, $BasicObject___id__$4, $BasicObject___send__$5, $BasicObject_$excl$6, $BasicObject_$not_eq$7, $BasicObject_instance_eval$8, $BasicObject_instance_exec$10, $BasicObject_singleton_method_added$11, $BasicObject_singleton_method_removed$12, $BasicObject_singleton_method_undefined$13, $BasicObject_class$14, $BasicObject_method_missing$15, $BasicObject_respond_to_missing$ques$16;

    
    
    Opal.def(self, '$initialize', $BasicObject_initialize$1 = function $$initialize($a) {
      var $post_args, self = this;

      
      
      $post_args = Opal.slice.call(arguments, 0, arguments.length);
      ;
      return nil;
    }, $BasicObject_initialize$1.$$arity = -1);
    
    Opal.def(self, '$==', $BasicObject_$eq_eq$2 = function(other) {
      var self = this;

      return self === other;
    }, $BasicObject_$eq_eq$2.$$arity = 1);
    
    Opal.def(self, '$eql?', $BasicObject_eql$ques$3 = function(other) {
      var self = this;

      return self['$=='](other)
    }, $BasicObject_eql$ques$3.$$arity = 1);
    Opal.alias(self, "equal?", "==");
    
    Opal.def(self, '$__id__', $BasicObject___id__$4 = function $$__id__() {
      var self = this;

      
      if (self.$$id != null) {
        return self.$$id;
      }
      Opal.defineProperty(self, '$$id', Opal.uid());
      return self.$$id;
    
    }, $BasicObject___id__$4.$$arity = 0);
    
    Opal.def(self, '$__send__', $BasicObject___send__$5 = function $$__send__(symbol, $a) {
      var $iter = $BasicObject___send__$5.$$p, block = $iter || nil, $post_args, args, self = this;

      if ($iter) $BasicObject___send__$5.$$p = null;
      
      
      if ($iter) $BasicObject___send__$5.$$p = null;;
      
      $post_args = Opal.slice.call(arguments, 1, arguments.length);
      
      args = $post_args;;
      
      var func = self['$' + symbol]

      if (func) {
        if (block !== nil) {
          func.$$p = block;
        }

        return func.apply(self, args);
      }

      if (block !== nil) {
        self.$method_missing.$$p = block;
      }

      return self.$method_missing.apply(self, [symbol].concat(args));
    ;
    }, $BasicObject___send__$5.$$arity = -2);
    
    Opal.def(self, '$!', $BasicObject_$excl$6 = function() {
      var self = this;

      return false
    }, $BasicObject_$excl$6.$$arity = 0);
    
    Opal.def(self, '$!=', $BasicObject_$not_eq$7 = function(other) {
      var self = this;

      return self['$=='](other)['$!']()
    }, $BasicObject_$not_eq$7.$$arity = 1);
    
    Opal.def(self, '$instance_eval', $BasicObject_instance_eval$8 = function $$instance_eval($a) {
      var $iter = $BasicObject_instance_eval$8.$$p, block = $iter || nil, $post_args, args, $b, $$9, self = this, string = nil, file = nil, _lineno = nil, default_eval_options = nil, compiling_options = nil, compiled = nil;

      if ($iter) $BasicObject_instance_eval$8.$$p = null;
      
      
      if ($iter) $BasicObject_instance_eval$8.$$p = null;;
      
      $post_args = Opal.slice.call(arguments, 0, arguments.length);
      
      args = $post_args;;
      if ($truthy(($truthy($b = block['$nil?']()) ? !!Opal.compile : $b))) {
        
        if ($truthy($range(1, 3, false)['$cover?'](args.$size()))) {
        } else {
          $$$('::', 'Kernel').$raise($$$('::', 'ArgumentError'), "wrong number of arguments (0 for 1..3)")
        };
        $b = [].concat(Opal.to_a(args)), (string = ($b[0] == null ? nil : $b[0])), (file = ($b[1] == null ? nil : $b[1])), (_lineno = ($b[2] == null ? nil : $b[2])), $b;
        default_eval_options = $hash2(["file", "eval"], {"file": ($truthy($b = file) ? $b : "(eval)"), "eval": true});
        compiling_options = Opal.hash({ arity_check: false }).$merge(default_eval_options);
        compiled = $$$('::', 'Opal').$compile(string, compiling_options);
        block = $send($$$('::', 'Kernel'), 'proc', [], ($$9 = function(){var self = $$9.$$s == null ? this : $$9.$$s;

        
          return (function(self) {
            return eval(compiled);
          })(self)
        }, $$9.$$s = self, $$9.$$arity = 0, $$9));
      } else if ($truthy(args['$any?']())) {
        $$$('::', 'Kernel').$raise($$$('::', 'ArgumentError'), "" + "wrong number of arguments (" + (args.$size()) + " for 0)")};
      
      var old = block.$$s,
          result;

      block.$$s = null;

      // Need to pass $$eval so that method definitions know if this is
      // being done on a class/module. Cannot be compiler driven since
      // send(:instance_eval) needs to work.
      if (self.$$is_a_module) {
        self.$$eval = true;
        try {
          result = block.call(self, self);
        }
        finally {
          self.$$eval = false;
        }
      }
      else {
        result = block.call(self, self);
      }

      block.$$s = old;

      return result;
    ;
    }, $BasicObject_instance_eval$8.$$arity = -1);
    
    Opal.def(self, '$instance_exec', $BasicObject_instance_exec$10 = function $$instance_exec($a) {
      var $iter = $BasicObject_instance_exec$10.$$p, block = $iter || nil, $post_args, args, self = this;

      if ($iter) $BasicObject_instance_exec$10.$$p = null;
      
      
      if ($iter) $BasicObject_instance_exec$10.$$p = null;;
      
      $post_args = Opal.slice.call(arguments, 0, arguments.length);
      
      args = $post_args;;
      if ($truthy(block)) {
      } else {
        $$$('::', 'Kernel').$raise($$$('::', 'ArgumentError'), "no block given")
      };
      
      var block_self = block.$$s,
          result;

      block.$$s = null;

      if (self.$$is_a_module) {
        self.$$eval = true;
        try {
          result = block.apply(self, args);
        }
        finally {
          self.$$eval = false;
        }
      }
      else {
        result = block.apply(self, args);
      }

      block.$$s = block_self;

      return result;
    ;
    }, $BasicObject_instance_exec$10.$$arity = -1);
    
    Opal.def(self, '$singleton_method_added', $BasicObject_singleton_method_added$11 = function $$singleton_method_added($a) {
      var $post_args, self = this;

      
      
      $post_args = Opal.slice.call(arguments, 0, arguments.length);
      ;
      return nil;
    }, $BasicObject_singleton_method_added$11.$$arity = -1);
    
    Opal.def(self, '$singleton_method_removed', $BasicObject_singleton_method_removed$12 = function $$singleton_method_removed($a) {
      var $post_args, self = this;

      
      
      $post_args = Opal.slice.call(arguments, 0, arguments.length);
      ;
      return nil;
    }, $BasicObject_singleton_method_removed$12.$$arity = -1);
    
    Opal.def(self, '$singleton_method_undefined', $BasicObject_singleton_method_undefined$13 = function $$singleton_method_undefined($a) {
      var $post_args, self = this;

      
      
      $post_args = Opal.slice.call(arguments, 0, arguments.length);
      ;
      return nil;
    }, $BasicObject_singleton_method_undefined$13.$$arity = -1);
    
    Opal.def(self, '$class', $BasicObject_class$14 = function() {
      var self = this;

      return self.$$class;
    }, $BasicObject_class$14.$$arity = 0);
    
    Opal.def(self, '$method_missing', $BasicObject_method_missing$15 = function $$method_missing(symbol, $a) {
      var $iter = $BasicObject_method_missing$15.$$p, block = $iter || nil, $post_args, args, self = this, message = nil;

      if ($iter) $BasicObject_method_missing$15.$$p = null;
      
      
      if ($iter) $BasicObject_method_missing$15.$$p = null;;
      
      $post_args = Opal.slice.call(arguments, 1, arguments.length);
      
      args = $post_args;;
      message = (function() {if ($truthy(self.$inspect && !self.$inspect.$$stub)) {
        return "" + "undefined method `" + (symbol) + "' for " + (self.$inspect()) + ":" + (self.$$class)
      } else {
        return "" + "undefined method `" + (symbol) + "' for " + (self.$$class)
      }; return nil; })();
      return $$$('::', 'Kernel').$raise($$$('::', 'NoMethodError').$new(message, symbol));
    }, $BasicObject_method_missing$15.$$arity = -2);
    return (Opal.def(self, '$respond_to_missing?', $BasicObject_respond_to_missing$ques$16 = function(method_name, include_all) {
      var self = this;

      
      
      if (include_all == null) {
        include_all = false;
      };
      return false;
    }, $BasicObject_respond_to_missing$ques$16.$$arity = -2), nil) && 'respond_to_missing?';
  })($nesting[0], null, $nesting)
};

/* Generated by Opal 1.0.0 */
Opal.modules["corelib/kernel"] = function(Opal) {
  function $rb_plus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs + rhs : lhs['$+'](rhs);
  }
  function $rb_le(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs <= rhs : lhs['$<='](rhs);
  }
  function $rb_lt(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs < rhs : lhs['$<'](rhs);
  }
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.$$$, $$ = Opal.$$, $truthy = Opal.truthy, $coerce_to = Opal.coerce_to, $respond_to = Opal.respond_to, $module = Opal.module, $gvars = Opal.gvars, $send = Opal.send, $hash2 = Opal.hash2, $klass = Opal.klass;

  Opal.add_stubs(['$raise', '$new', '$inspect', '$!', '$=~', '$==', '$object_id', '$class', '$coerce_to?', '$<<', '$+', '$map', '$allocate', '$copy_instance_variables', '$copy_singleton_methods', '$initialize_clone', '$initialize_copy', '$define_method', '$singleton_class', '$to_proc', '$initialize_dup', '$for', '$empty?', '$pop', '$call', '$append_features', '$extend_object', '$extended', '$__id__', '$to_s', '$instance_variable_name!', '$respond_to?', '$to_int', '$coerce_to!', '$Integer', '$nil?', '$===', '$enum_for', '$result', '$any?', '$print', '$format', '$puts', '$each', '$<=', '$length', '$[]', '$<', '$first', '$caller', '$exception', '$is_a?', '$rand', '$respond_to_missing?', '$pristine', '$try_convert!', '$expand_path', '$join', '$start_with?', '$new_seed', '$srand', '$sym', '$arg', '$open', '$include']);
  
  (function($base, $parent_nesting) {
    var self = $module($base, 'Kernel');

    var $nesting = [self].concat($parent_nesting), $Kernel_method_missing$1, $Kernel_$eq_tilde$2, $Kernel_$excl_tilde$3, $Kernel_$eq_eq_eq$4, $Kernel_$lt_eq_gt$5, $Kernel_method$6, $Kernel_methods$7, $Kernel_public_methods$8, $Kernel_Array$9, $Kernel_at_exit$10, $Kernel_caller$11, $Kernel_class$13, $Kernel_copy_instance_variables$14, $Kernel_copy_singleton_methods$15, $Kernel_clone$16, $Kernel_initialize_clone$17, $Kernel_define_singleton_method$18, $Kernel_dup$19, $Kernel_initialize_dup$20, $Kernel_enum_for$21, $Kernel_equal$ques$22, $Kernel_exit$23, $Kernel_extend$24, $Kernel_hash$25, $Kernel_initialize_copy$26, $Kernel_inspect$27, $Kernel_instance_of$ques$28, $Kernel_instance_variable_defined$ques$29, $Kernel_instance_variable_get$30, $Kernel_instance_variable_set$31, $Kernel_remove_instance_variable$32, $Kernel_instance_variables$33, $Kernel_Integer$34, $Kernel_Float$35, $Kernel_Hash$36, $Kernel_is_a$ques$37, $Kernel_itself$38, $Kernel_lambda$39, $Kernel_load$40, $Kernel_loop$41, $Kernel_nil$ques$43, $Kernel_printf$44, $Kernel_proc$45, $Kernel_puts$46, $Kernel_p$47, $Kernel_print$49, $Kernel_warn$50, $Kernel_raise$52, $Kernel_rand$53, $Kernel_respond_to$ques$54, $Kernel_respond_to_missing$ques$55, $Kernel_require$56, $Kernel_require_relative$57, $Kernel_require_tree$58, $Kernel_singleton_class$59, $Kernel_sleep$60, $Kernel_srand$61, $Kernel_String$62, $Kernel_tap$63, $Kernel_to_proc$64, $Kernel_to_s$65, $Kernel_catch$66, $Kernel_throw$67, $Kernel_open$68, $Kernel_yield_self$69;

    
    
    Opal.def(self, '$method_missing', $Kernel_method_missing$1 = function $$method_missing(symbol, $a) {
      var $iter = $Kernel_method_missing$1.$$p, block = $iter || nil, $post_args, args, self = this;

      if ($iter) $Kernel_method_missing$1.$$p = null;
      
      
      if ($iter) $Kernel_method_missing$1.$$p = null;;
      
      $post_args = Opal.slice.call(arguments, 1, arguments.length);
      
      args = $post_args;;
      return self.$raise($$($nesting, 'NoMethodError').$new("" + "undefined method `" + (symbol) + "' for " + (self.$inspect()), symbol, args));
    }, $Kernel_method_missing$1.$$arity = -2);
    
    Opal.def(self, '$=~', $Kernel_$eq_tilde$2 = function(obj) {
      var self = this;

      return false
    }, $Kernel_$eq_tilde$2.$$arity = 1);
    
    Opal.def(self, '$!~', $Kernel_$excl_tilde$3 = function(obj) {
      var self = this;

      return self['$=~'](obj)['$!']()
    }, $Kernel_$excl_tilde$3.$$arity = 1);
    
    Opal.def(self, '$===', $Kernel_$eq_eq_eq$4 = function(other) {
      var $a, self = this;

      return ($truthy($a = self.$object_id()['$=='](other.$object_id())) ? $a : self['$=='](other))
    }, $Kernel_$eq_eq_eq$4.$$arity = 1);
    
    Opal.def(self, '$<=>', $Kernel_$lt_eq_gt$5 = function(other) {
      var self = this;

      
      // set guard for infinite recursion
      self.$$comparable = true;

      var x = self['$=='](other);

      if (x && x !== nil) {
        return 0;
      }

      return nil;
    
    }, $Kernel_$lt_eq_gt$5.$$arity = 1);
    
    Opal.def(self, '$method', $Kernel_method$6 = function $$method(name) {
      var self = this;

      
      var meth = self['$' + name];

      if (!meth || meth.$$stub) {
        self.$raise($$($nesting, 'NameError').$new("" + "undefined method `" + (name) + "' for class `" + (self.$class()) + "'", name));
      }

      return $$($nesting, 'Method').$new(self, meth.$$owner || self.$class(), meth, name);
    
    }, $Kernel_method$6.$$arity = 1);
    
    Opal.def(self, '$methods', $Kernel_methods$7 = function $$methods(all) {
      var self = this;

      
      
      if (all == null) {
        all = true;
      };
      
      if ($truthy(all)) {
        return Opal.methods(self);
      } else {
        return Opal.own_methods(self);
      }
    ;
    }, $Kernel_methods$7.$$arity = -1);
    
    Opal.def(self, '$public_methods', $Kernel_public_methods$8 = function $$public_methods(all) {
      var self = this;

      
      
      if (all == null) {
        all = true;
      };
      
      if ($truthy(all)) {
        return Opal.methods(self);
      } else {
        return Opal.receiver_methods(self);
      }
    ;
    }, $Kernel_public_methods$8.$$arity = -1);
    
    Opal.def(self, '$Array', $Kernel_Array$9 = function $$Array(object) {
      var self = this;

      
      var coerced;

      if (object === nil) {
        return [];
      }

      if (object.$$is_array) {
        return object;
      }

      coerced = $$($nesting, 'Opal')['$coerce_to?'](object, $$($nesting, 'Array'), "to_ary");
      if (coerced !== nil) { return coerced; }

      coerced = $$($nesting, 'Opal')['$coerce_to?'](object, $$($nesting, 'Array'), "to_a");
      if (coerced !== nil) { return coerced; }

      return [object];
    
    }, $Kernel_Array$9.$$arity = 1);
    
    Opal.def(self, '$at_exit', $Kernel_at_exit$10 = function $$at_exit() {
      var $iter = $Kernel_at_exit$10.$$p, block = $iter || nil, $a, self = this;
      if ($gvars.__at_exit__ == null) $gvars.__at_exit__ = nil;

      if ($iter) $Kernel_at_exit$10.$$p = null;
      
      
      if ($iter) $Kernel_at_exit$10.$$p = null;;
      $gvars.__at_exit__ = ($truthy($a = $gvars.__at_exit__) ? $a : []);
      $gvars.__at_exit__['$<<'](block);
      return block;
    }, $Kernel_at_exit$10.$$arity = 0);
    
    Opal.def(self, '$caller', $Kernel_caller$11 = function $$caller(start, length) {
      var $$12, self = this, stack = nil;

      
      
      if (start == null) {
        start = 1;
      };
      
      if (length == null) {
        length = nil;
      };
      start = $rb_plus(start, 1);
      stack = (new Error().stack || "").split("\n");
      stack = (function() {if ($truthy(length)) {
        return stack.slice(start, start + length);
      } else {
        return stack.slice(start);
      }; return nil; })();
      return $send(stack, 'map', [], ($$12 = function(line){var self = $$12.$$s == null ? this : $$12.$$s;

      
        
        if (line == null) {
          line = nil;
        };
        return line.replace(/^ *\w+ +/, '').split(':', 3).slice(0,2).join(':');}, $$12.$$s = self, $$12.$$arity = 1, $$12));
    }, $Kernel_caller$11.$$arity = -1);
    
    Opal.def(self, '$class', $Kernel_class$13 = function() {
      var self = this;

      return self.$$class;
    }, $Kernel_class$13.$$arity = 0);
    
    Opal.def(self, '$copy_instance_variables', $Kernel_copy_instance_variables$14 = function $$copy_instance_variables(other) {
      var self = this;

      
      var keys = Object.keys(other), i, ii, name;
      for (i = 0, ii = keys.length; i < ii; i++) {
        name = keys[i];
        if (name.charAt(0) !== '$' && other.hasOwnProperty(name)) {
          self[name] = other[name];
        }
      }
    
    }, $Kernel_copy_instance_variables$14.$$arity = 1);
    
    Opal.def(self, '$copy_singleton_methods', $Kernel_copy_singleton_methods$15 = function $$copy_singleton_methods(other) {
      var self = this;

      
      var i, name, names, length;

      if (other.hasOwnProperty('$$meta')) {
        var other_singleton_class = Opal.get_singleton_class(other);
        var self_singleton_class = Opal.get_singleton_class(self);
        names = Object.getOwnPropertyNames(other_singleton_class.$$prototype);

        for (i = 0, length = names.length; i < length; i++) {
          name = names[i];
          if (Opal.is_method(name)) {
            self_singleton_class.$$prototype[name] = other_singleton_class.$$prototype[name];
          }
        }

        self_singleton_class.$$const = Object.assign({}, other_singleton_class.$$const);
        Object.setPrototypeOf(
          self_singleton_class.$$prototype,
          Object.getPrototypeOf(other_singleton_class.$$prototype)
        );
      }

      for (i = 0, names = Object.getOwnPropertyNames(other), length = names.length; i < length; i++) {
        name = names[i];
        if (name.charAt(0) === '$' && name.charAt(1) !== '$' && other.hasOwnProperty(name)) {
          self[name] = other[name];
        }
      }
    
    }, $Kernel_copy_singleton_methods$15.$$arity = 1);
    
    Opal.def(self, '$clone', $Kernel_clone$16 = function $$clone($kwargs) {
      var freeze, self = this, copy = nil;

      
      
      if ($kwargs == null) {
        $kwargs = $hash2([], {});
      } else if (!$kwargs.$$is_hash) {
        throw Opal.ArgumentError.$new('expected kwargs');
      };
      
      freeze = $kwargs.$$smap["freeze"];
      if (freeze == null) {
        freeze = true
      };
      copy = self.$class().$allocate();
      copy.$copy_instance_variables(self);
      copy.$copy_singleton_methods(self);
      copy.$initialize_clone(self);
      return copy;
    }, $Kernel_clone$16.$$arity = -1);
    
    Opal.def(self, '$initialize_clone', $Kernel_initialize_clone$17 = function $$initialize_clone(other) {
      var self = this;

      return self.$initialize_copy(other)
    }, $Kernel_initialize_clone$17.$$arity = 1);
    
    Opal.def(self, '$define_singleton_method', $Kernel_define_singleton_method$18 = function $$define_singleton_method(name, method) {
      var $iter = $Kernel_define_singleton_method$18.$$p, block = $iter || nil, self = this;

      if ($iter) $Kernel_define_singleton_method$18.$$p = null;
      
      
      if ($iter) $Kernel_define_singleton_method$18.$$p = null;;
      ;
      return $send(self.$singleton_class(), 'define_method', [name, method], block.$to_proc());
    }, $Kernel_define_singleton_method$18.$$arity = -2);
    
    Opal.def(self, '$dup', $Kernel_dup$19 = function $$dup() {
      var self = this, copy = nil;

      
      copy = self.$class().$allocate();
      copy.$copy_instance_variables(self);
      copy.$initialize_dup(self);
      return copy;
    }, $Kernel_dup$19.$$arity = 0);
    
    Opal.def(self, '$initialize_dup', $Kernel_initialize_dup$20 = function $$initialize_dup(other) {
      var self = this;

      return self.$initialize_copy(other)
    }, $Kernel_initialize_dup$20.$$arity = 1);
    
    Opal.def(self, '$enum_for', $Kernel_enum_for$21 = function $$enum_for($a, $b) {
      var $iter = $Kernel_enum_for$21.$$p, block = $iter || nil, $post_args, method, args, self = this;

      if ($iter) $Kernel_enum_for$21.$$p = null;
      
      
      if ($iter) $Kernel_enum_for$21.$$p = null;;
      
      $post_args = Opal.slice.call(arguments, 0, arguments.length);
      
      if ($post_args.length > 0) {
        method = $post_args[0];
        $post_args.splice(0, 1);
      }
      if (method == null) {
        method = "each";
      };
      
      args = $post_args;;
      return $send($$($nesting, 'Enumerator'), 'for', [self, method].concat(Opal.to_a(args)), block.$to_proc());
    }, $Kernel_enum_for$21.$$arity = -1);
    Opal.alias(self, "to_enum", "enum_for");
    
    Opal.def(self, '$equal?', $Kernel_equal$ques$22 = function(other) {
      var self = this;

      return self === other;
    }, $Kernel_equal$ques$22.$$arity = 1);
    
    Opal.def(self, '$exit', $Kernel_exit$23 = function $$exit(status) {
      var $a, self = this, block = nil;
      if ($gvars.__at_exit__ == null) $gvars.__at_exit__ = nil;

      
      
      if (status == null) {
        status = true;
      };
      $gvars.__at_exit__ = ($truthy($a = $gvars.__at_exit__) ? $a : []);
      while (!($truthy($gvars.__at_exit__['$empty?']()))) {
        
        block = $gvars.__at_exit__.$pop();
        block.$call();
      };
      
      if (status.$$is_boolean) {
        status = status ? 0 : 1;
      } else {
        status = $coerce_to(status, $$($nesting, 'Integer'), 'to_int')
      }

      Opal.exit(status);
    ;
      return nil;
    }, $Kernel_exit$23.$$arity = -1);
    
    Opal.def(self, '$extend', $Kernel_extend$24 = function $$extend($a) {
      var $post_args, mods, self = this;

      
      
      $post_args = Opal.slice.call(arguments, 0, arguments.length);
      
      mods = $post_args;;
      
      var singleton = self.$singleton_class();

      for (var i = mods.length - 1; i >= 0; i--) {
        var mod = mods[i];

        if (!mod.$$is_module) {
          self.$raise($$($nesting, 'TypeError'), "" + "wrong argument type " + ((mod).$class()) + " (expected Module)");
        }

        (mod).$append_features(singleton);
        (mod).$extend_object(self);
        (mod).$extended(self);
      }
    ;
      return self;
    }, $Kernel_extend$24.$$arity = -1);
    
    Opal.def(self, '$hash', $Kernel_hash$25 = function $$hash() {
      var self = this;

      return self.$__id__()
    }, $Kernel_hash$25.$$arity = 0);
    
    Opal.def(self, '$initialize_copy', $Kernel_initialize_copy$26 = function $$initialize_copy(other) {
      var self = this;

      return nil
    }, $Kernel_initialize_copy$26.$$arity = 1);
    
    Opal.def(self, '$inspect', $Kernel_inspect$27 = function $$inspect() {
      var self = this;

      return self.$to_s()
    }, $Kernel_inspect$27.$$arity = 0);
    
    Opal.def(self, '$instance_of?', $Kernel_instance_of$ques$28 = function(klass) {
      var self = this;

      
      if (!klass.$$is_class && !klass.$$is_module) {
        self.$raise($$($nesting, 'TypeError'), "class or module required");
      }

      return self.$$class === klass;
    
    }, $Kernel_instance_of$ques$28.$$arity = 1);
    
    Opal.def(self, '$instance_variable_defined?', $Kernel_instance_variable_defined$ques$29 = function(name) {
      var self = this;

      
      name = $$($nesting, 'Opal')['$instance_variable_name!'](name);
      return Opal.hasOwnProperty.call(self, name.substr(1));;
    }, $Kernel_instance_variable_defined$ques$29.$$arity = 1);
    
    Opal.def(self, '$instance_variable_get', $Kernel_instance_variable_get$30 = function $$instance_variable_get(name) {
      var self = this;

      
      name = $$($nesting, 'Opal')['$instance_variable_name!'](name);
      
      var ivar = self[Opal.ivar(name.substr(1))];

      return ivar == null ? nil : ivar;
    ;
    }, $Kernel_instance_variable_get$30.$$arity = 1);
    
    Opal.def(self, '$instance_variable_set', $Kernel_instance_variable_set$31 = function $$instance_variable_set(name, value) {
      var self = this;

      
      name = $$($nesting, 'Opal')['$instance_variable_name!'](name);
      return self[Opal.ivar(name.substr(1))] = value;;
    }, $Kernel_instance_variable_set$31.$$arity = 2);
    
    Opal.def(self, '$remove_instance_variable', $Kernel_remove_instance_variable$32 = function $$remove_instance_variable(name) {
      var self = this;

      
      name = $$($nesting, 'Opal')['$instance_variable_name!'](name);
      
      var key = Opal.ivar(name.substr(1)),
          val;
      if (self.hasOwnProperty(key)) {
        val = self[key];
        delete self[key];
        return val;
      }
    ;
      return self.$raise($$($nesting, 'NameError'), "" + "instance variable " + (name) + " not defined");
    }, $Kernel_remove_instance_variable$32.$$arity = 1);
    
    Opal.def(self, '$instance_variables', $Kernel_instance_variables$33 = function $$instance_variables() {
      var self = this;

      
      var result = [], ivar;

      for (var name in self) {
        if (self.hasOwnProperty(name) && name.charAt(0) !== '$') {
          if (name.substr(-1) === '$') {
            ivar = name.slice(0, name.length - 1);
          } else {
            ivar = name;
          }
          result.push('@' + ivar);
        }
      }

      return result;
    
    }, $Kernel_instance_variables$33.$$arity = 0);
    
    Opal.def(self, '$Integer', $Kernel_Integer$34 = function $$Integer(value, base) {
      var self = this;

      
      ;
      
      var i, str, base_digits;

      if (!value.$$is_string) {
        if (base !== undefined) {
          self.$raise($$($nesting, 'ArgumentError'), "base specified for non string value")
        }
        if (value === nil) {
          self.$raise($$($nesting, 'TypeError'), "can't convert nil into Integer")
        }
        if (value.$$is_number) {
          if (value === Infinity || value === -Infinity || isNaN(value)) {
            self.$raise($$($nesting, 'FloatDomainError'), value)
          }
          return Math.floor(value);
        }
        if (value['$respond_to?']("to_int")) {
          i = value.$to_int();
          if (i !== nil) {
            return i;
          }
        }
        return $$($nesting, 'Opal')['$coerce_to!'](value, $$($nesting, 'Integer'), "to_i");
      }

      if (value === "0") {
        return 0;
      }

      if (base === undefined) {
        base = 0;
      } else {
        base = $coerce_to(base, $$($nesting, 'Integer'), 'to_int');
        if (base === 1 || base < 0 || base > 36) {
          self.$raise($$($nesting, 'ArgumentError'), "" + "invalid radix " + (base))
        }
      }

      str = value.toLowerCase();

      str = str.replace(/(\d)_(?=\d)/g, '$1');

      str = str.replace(/^(\s*[+-]?)(0[bodx]?)/, function (_, head, flag) {
        switch (flag) {
        case '0b':
          if (base === 0 || base === 2) {
            base = 2;
            return head;
          }
        case '0':
        case '0o':
          if (base === 0 || base === 8) {
            base = 8;
            return head;
          }
        case '0d':
          if (base === 0 || base === 10) {
            base = 10;
            return head;
          }
        case '0x':
          if (base === 0 || base === 16) {
            base = 16;
            return head;
          }
        }
        self.$raise($$($nesting, 'ArgumentError'), "" + "invalid value for Integer(): \"" + (value) + "\"")
      });

      base = (base === 0 ? 10 : base);

      base_digits = '0-' + (base <= 10 ? base - 1 : '9a-' + String.fromCharCode(97 + (base - 11)));

      if (!(new RegExp('^\\s*[+-]?[' + base_digits + ']+\\s*$')).test(str)) {
        self.$raise($$($nesting, 'ArgumentError'), "" + "invalid value for Integer(): \"" + (value) + "\"")
      }

      i = parseInt(str, base);

      if (isNaN(i)) {
        self.$raise($$($nesting, 'ArgumentError'), "" + "invalid value for Integer(): \"" + (value) + "\"")
      }

      return i;
    ;
    }, $Kernel_Integer$34.$$arity = -2);
    
    Opal.def(self, '$Float', $Kernel_Float$35 = function $$Float(value) {
      var self = this;

      
      var str;

      if (value === nil) {
        self.$raise($$($nesting, 'TypeError'), "can't convert nil into Float")
      }

      if (value.$$is_string) {
        str = value.toString();

        str = str.replace(/(\d)_(?=\d)/g, '$1');

        //Special case for hex strings only:
        if (/^\s*[-+]?0[xX][0-9a-fA-F]+\s*$/.test(str)) {
          return self.$Integer(str);
        }

        if (!/^\s*[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)?\s*$/.test(str)) {
          self.$raise($$($nesting, 'ArgumentError'), "" + "invalid value for Float(): \"" + (value) + "\"")
        }

        return parseFloat(str);
      }

      return $$($nesting, 'Opal')['$coerce_to!'](value, $$($nesting, 'Float'), "to_f");
    
    }, $Kernel_Float$35.$$arity = 1);
    
    Opal.def(self, '$Hash', $Kernel_Hash$36 = function $$Hash(arg) {
      var $a, self = this;

      
      if ($truthy(($truthy($a = arg['$nil?']()) ? $a : arg['$==']([])))) {
        return $hash2([], {})};
      if ($truthy($$($nesting, 'Hash')['$==='](arg))) {
        return arg};
      return $$($nesting, 'Opal')['$coerce_to!'](arg, $$($nesting, 'Hash'), "to_hash");
    }, $Kernel_Hash$36.$$arity = 1);
    
    Opal.def(self, '$is_a?', $Kernel_is_a$ques$37 = function(klass) {
      var self = this;

      
      if (!klass.$$is_class && !klass.$$is_module) {
        self.$raise($$($nesting, 'TypeError'), "class or module required");
      }

      return Opal.is_a(self, klass);
    
    }, $Kernel_is_a$ques$37.$$arity = 1);
    
    Opal.def(self, '$itself', $Kernel_itself$38 = function $$itself() {
      var self = this;

      return self
    }, $Kernel_itself$38.$$arity = 0);
    Opal.alias(self, "kind_of?", "is_a?");
    
    Opal.def(self, '$lambda', $Kernel_lambda$39 = function $$lambda() {
      var $iter = $Kernel_lambda$39.$$p, block = $iter || nil, self = this;

      if ($iter) $Kernel_lambda$39.$$p = null;
      
      
      if ($iter) $Kernel_lambda$39.$$p = null;;
      return Opal.lambda(block);;
    }, $Kernel_lambda$39.$$arity = 0);
    
    Opal.def(self, '$load', $Kernel_load$40 = function $$load(file) {
      var self = this;

      
      file = $$($nesting, 'Opal')['$coerce_to!'](file, $$($nesting, 'String'), "to_str");
      return Opal.load(file);
    }, $Kernel_load$40.$$arity = 1);
    
    Opal.def(self, '$loop', $Kernel_loop$41 = function $$loop() {
      var $$42, $a, $iter = $Kernel_loop$41.$$p, $yield = $iter || nil, self = this, e = nil;

      if ($iter) $Kernel_loop$41.$$p = null;
      
      if (($yield !== nil)) {
      } else {
        return $send(self, 'enum_for', ["loop"], ($$42 = function(){var self = $$42.$$s == null ? this : $$42.$$s;

        return $$$($$($nesting, 'Float'), 'INFINITY')}, $$42.$$s = self, $$42.$$arity = 0, $$42))
      };
      while ($truthy(true)) {
        
        try {
          Opal.yieldX($yield, [])
        } catch ($err) {
          if (Opal.rescue($err, [$$($nesting, 'StopIteration')])) {e = $err;
            try {
              return e.$result()
            } finally { Opal.pop_exception() }
          } else { throw $err; }
        };
      };
      return self;
    }, $Kernel_loop$41.$$arity = 0);
    
    Opal.def(self, '$nil?', $Kernel_nil$ques$43 = function() {
      var self = this;

      return false
    }, $Kernel_nil$ques$43.$$arity = 0);
    Opal.alias(self, "object_id", "__id__");
    
    Opal.def(self, '$printf', $Kernel_printf$44 = function $$printf($a) {
      var $post_args, args, self = this;

      
      
      $post_args = Opal.slice.call(arguments, 0, arguments.length);
      
      args = $post_args;;
      if ($truthy(args['$any?']())) {
        self.$print($send(self, 'format', Opal.to_a(args)))};
      return nil;
    }, $Kernel_printf$44.$$arity = -1);
    
    Opal.def(self, '$proc', $Kernel_proc$45 = function $$proc() {
      var $iter = $Kernel_proc$45.$$p, block = $iter || nil, self = this;

      if ($iter) $Kernel_proc$45.$$p = null;
      
      
      if ($iter) $Kernel_proc$45.$$p = null;;
      if ($truthy(block)) {
      } else {
        self.$raise($$($nesting, 'ArgumentError'), "tried to create Proc object without a block")
      };
      block.$$is_lambda = false;
      return block;
    }, $Kernel_proc$45.$$arity = 0);
    
    Opal.def(self, '$puts', $Kernel_puts$46 = function $$puts($a) {
      var $post_args, strs, self = this;
      if ($gvars.stdout == null) $gvars.stdout = nil;

      
      
      $post_args = Opal.slice.call(arguments, 0, arguments.length);
      
      strs = $post_args;;
      return $send($gvars.stdout, 'puts', Opal.to_a(strs));
    }, $Kernel_puts$46.$$arity = -1);
    
    Opal.def(self, '$p', $Kernel_p$47 = function $$p($a) {
      var $post_args, args, $$48, self = this;

      
      
      $post_args = Opal.slice.call(arguments, 0, arguments.length);
      
      args = $post_args;;
      $send(args, 'each', [], ($$48 = function(obj){var self = $$48.$$s == null ? this : $$48.$$s;
        if ($gvars.stdout == null) $gvars.stdout = nil;

      
        
        if (obj == null) {
          obj = nil;
        };
        return $gvars.stdout.$puts(obj.$inspect());}, $$48.$$s = self, $$48.$$arity = 1, $$48));
      if ($truthy($rb_le(args.$length(), 1))) {
        return args['$[]'](0)
      } else {
        return args
      };
    }, $Kernel_p$47.$$arity = -1);
    
    Opal.def(self, '$print', $Kernel_print$49 = function $$print($a) {
      var $post_args, strs, self = this;
      if ($gvars.stdout == null) $gvars.stdout = nil;

      
      
      $post_args = Opal.slice.call(arguments, 0, arguments.length);
      
      strs = $post_args;;
      return $send($gvars.stdout, 'print', Opal.to_a(strs));
    }, $Kernel_print$49.$$arity = -1);
    
    Opal.def(self, '$warn', $Kernel_warn$50 = function $$warn($a, $b) {
      var $post_args, $kwargs, strs, uplevel, $$51, $c, self = this, location = nil;
      if ($gvars.VERBOSE == null) $gvars.VERBOSE = nil;
      if ($gvars.stderr == null) $gvars.stderr = nil;

      
      
      $post_args = Opal.slice.call(arguments, 0, arguments.length);
      
      $kwargs = Opal.extract_kwargs($post_args);
      
      if ($kwargs == null) {
        $kwargs = $hash2([], {});
      } else if (!$kwargs.$$is_hash) {
        throw Opal.ArgumentError.$new('expected kwargs');
      };
      
      strs = $post_args;;
      
      uplevel = $kwargs.$$smap["uplevel"];
      if (uplevel == null) {
        uplevel = nil
      };
      if ($truthy(uplevel)) {
        
        uplevel = $$($nesting, 'Opal')['$coerce_to!'](uplevel, $$($nesting, 'Integer'), "to_str");
        if ($truthy($rb_lt(uplevel, 0))) {
          self.$raise($$($nesting, 'ArgumentError'), "" + "negative level (" + (uplevel) + ")")};
        location = self.$caller($rb_plus(uplevel, 2), 1).$first();
        if ($truthy(location)) {
          location = "" + (location) + ": "};
        strs = $send(strs, 'map', [], ($$51 = function(s){var self = $$51.$$s == null ? this : $$51.$$s;

        
          
          if (s == null) {
            s = nil;
          };
          return "" + (location) + "warning: " + (s);}, $$51.$$s = self, $$51.$$arity = 1, $$51));};
      if ($truthy(($truthy($c = $gvars.VERBOSE['$nil?']()) ? $c : strs['$empty?']()))) {
        return nil
      } else {
        return $send($gvars.stderr, 'puts', Opal.to_a(strs))
      };
    }, $Kernel_warn$50.$$arity = -1);
    
    Opal.def(self, '$raise', $Kernel_raise$52 = function $$raise(exception, string, _backtrace) {
      var self = this;
      if ($gvars["!"] == null) $gvars["!"] = nil;

      
      ;
      
      if (string == null) {
        string = nil;
      };
      
      if (_backtrace == null) {
        _backtrace = nil;
      };
      
      if (exception == null && $gvars["!"] !== nil) {
        throw $gvars["!"];
      }
      if (exception == null) {
        exception = $$($nesting, 'RuntimeError').$new();
      }
      else if (exception.$$is_string) {
        exception = $$($nesting, 'RuntimeError').$new(exception);
      }
      // using respond_to? and not an undefined check to avoid method_missing matching as true
      else if (exception.$$is_class && exception['$respond_to?']("exception")) {
        exception = exception.$exception(string);
      }
      else if (exception['$is_a?']($$($nesting, 'Exception'))) {
        // exception is fine
      }
      else {
        exception = $$($nesting, 'TypeError').$new("exception class/object expected");
      }

      if ($gvars["!"] !== nil) {
        Opal.exceptions.push($gvars["!"]);
      }

      $gvars["!"] = exception;

      throw exception;
    ;
    }, $Kernel_raise$52.$$arity = -1);
    Opal.alias(self, "fail", "raise");
    
    Opal.def(self, '$rand', $Kernel_rand$53 = function $$rand(max) {
      var self = this;

      
      ;
      
      if (max === undefined) {
        return $$$($$($nesting, 'Random'), 'DEFAULT').$rand();
      }

      if (max.$$is_number) {
        if (max < 0) {
          max = Math.abs(max);
        }

        if (max % 1 !== 0) {
          max = max.$to_i();
        }

        if (max === 0) {
          max = undefined;
        }
      }
    ;
      return $$$($$($nesting, 'Random'), 'DEFAULT').$rand(max);
    }, $Kernel_rand$53.$$arity = -1);
    
    Opal.def(self, '$respond_to?', $Kernel_respond_to$ques$54 = function(name, include_all) {
      var self = this;

      
      
      if (include_all == null) {
        include_all = false;
      };
      
      var body = self['$' + name];

      if (typeof(body) === "function" && !body.$$stub) {
        return true;
      }

      if (self['$respond_to_missing?'].$$pristine === true) {
        return false;
      } else {
        return self['$respond_to_missing?'](name, include_all);
      }
    ;
    }, $Kernel_respond_to$ques$54.$$arity = -2);
    
    Opal.def(self, '$respond_to_missing?', $Kernel_respond_to_missing$ques$55 = function(method_name, include_all) {
      var self = this;

      
      
      if (include_all == null) {
        include_all = false;
      };
      return false;
    }, $Kernel_respond_to_missing$ques$55.$$arity = -2);
    $$($nesting, 'Opal').$pristine(self, "respond_to?", "respond_to_missing?");
    
    Opal.def(self, '$require', $Kernel_require$56 = function $$require(file) {
      var self = this;

      
      file = $$($nesting, 'Opal')['$coerce_to!'](file, $$($nesting, 'String'), "to_str");
      return Opal.require(file);
    }, $Kernel_require$56.$$arity = 1);
    
    Opal.def(self, '$require_relative', $Kernel_require_relative$57 = function $$require_relative(file) {
      var self = this;

      
      $$($nesting, 'Opal')['$try_convert!'](file, $$($nesting, 'String'), "to_str");
      file = $$($nesting, 'File').$expand_path($$($nesting, 'File').$join(Opal.current_file, "..", file));
      return Opal.require(file);
    }, $Kernel_require_relative$57.$$arity = 1);
    
    Opal.def(self, '$require_tree', $Kernel_require_tree$58 = function $$require_tree(path) {
      var self = this;

      
      var result = [];

      path = $$($nesting, 'File').$expand_path(path)
      path = Opal.normalize(path);
      if (path === '.') path = '';
      for (var name in Opal.modules) {
        if ((name)['$start_with?'](path)) {
          result.push([name, Opal.require(name)]);
        }
      }

      return result;
    
    }, $Kernel_require_tree$58.$$arity = 1);
    Opal.alias(self, "send", "__send__");
    Opal.alias(self, "public_send", "__send__");
    
    Opal.def(self, '$singleton_class', $Kernel_singleton_class$59 = function $$singleton_class() {
      var self = this;

      return Opal.get_singleton_class(self);
    }, $Kernel_singleton_class$59.$$arity = 0);
    
    Opal.def(self, '$sleep', $Kernel_sleep$60 = function $$sleep(seconds) {
      var self = this;

      
      
      if (seconds == null) {
        seconds = nil;
      };
      
      if (seconds === nil) {
        self.$raise($$($nesting, 'TypeError'), "can't convert NilClass into time interval")
      }
      if (!seconds.$$is_number) {
        self.$raise($$($nesting, 'TypeError'), "" + "can't convert " + (seconds.$class()) + " into time interval")
      }
      if (seconds < 0) {
        self.$raise($$($nesting, 'ArgumentError'), "time interval must be positive")
      }
      var get_time = Opal.global.performance ?
        function() {return performance.now()} :
        function() {return new Date()}

      var t = get_time();
      while (get_time() - t <= seconds * 1000);
      return Math.round(seconds);
    ;
    }, $Kernel_sleep$60.$$arity = -1);
    
    Opal.def(self, '$srand', $Kernel_srand$61 = function $$srand(seed) {
      var self = this;

      
      
      if (seed == null) {
        seed = $$($nesting, 'Random').$new_seed();
      };
      return $$($nesting, 'Random').$srand(seed);
    }, $Kernel_srand$61.$$arity = -1);
    
    Opal.def(self, '$String', $Kernel_String$62 = function $$String(str) {
      var $a, self = this;

      return ($truthy($a = $$($nesting, 'Opal')['$coerce_to?'](str, $$($nesting, 'String'), "to_str")) ? $a : $$($nesting, 'Opal')['$coerce_to!'](str, $$($nesting, 'String'), "to_s"))
    }, $Kernel_String$62.$$arity = 1);
    
    Opal.def(self, '$tap', $Kernel_tap$63 = function $$tap() {
      var $iter = $Kernel_tap$63.$$p, block = $iter || nil, self = this;

      if ($iter) $Kernel_tap$63.$$p = null;
      
      
      if ($iter) $Kernel_tap$63.$$p = null;;
      Opal.yield1(block, self);
      return self;
    }, $Kernel_tap$63.$$arity = 0);
    
    Opal.def(self, '$to_proc', $Kernel_to_proc$64 = function $$to_proc() {
      var self = this;

      return self
    }, $Kernel_to_proc$64.$$arity = 0);
    
    Opal.def(self, '$to_s', $Kernel_to_s$65 = function $$to_s() {
      var self = this;

      return "" + "#<" + (self.$class()) + ":0x" + (self.$__id__().$to_s(16)) + ">"
    }, $Kernel_to_s$65.$$arity = 0);
    
    Opal.def(self, '$catch', $Kernel_catch$66 = function(sym) {
      var $iter = $Kernel_catch$66.$$p, $yield = $iter || nil, self = this, e = nil;

      if ($iter) $Kernel_catch$66.$$p = null;
      try {
        return Opal.yieldX($yield, []);
      } catch ($err) {
        if (Opal.rescue($err, [$$($nesting, 'UncaughtThrowError')])) {e = $err;
          try {
            
            if (e.$sym()['$=='](sym)) {
              return e.$arg()};
            return self.$raise();
          } finally { Opal.pop_exception() }
        } else { throw $err; }
      }
    }, $Kernel_catch$66.$$arity = 1);
    
    Opal.def(self, '$throw', $Kernel_throw$67 = function($a) {
      var $post_args, args, self = this;

      
      
      $post_args = Opal.slice.call(arguments, 0, arguments.length);
      
      args = $post_args;;
      return self.$raise($$($nesting, 'UncaughtThrowError'), args);
    }, $Kernel_throw$67.$$arity = -1);
    
    Opal.def(self, '$open', $Kernel_open$68 = function $$open($a) {
      var $iter = $Kernel_open$68.$$p, block = $iter || nil, $post_args, args, self = this;

      if ($iter) $Kernel_open$68.$$p = null;
      
      
      if ($iter) $Kernel_open$68.$$p = null;;
      
      $post_args = Opal.slice.call(arguments, 0, arguments.length);
      
      args = $post_args;;
      return $send($$($nesting, 'File'), 'open', Opal.to_a(args), block.$to_proc());
    }, $Kernel_open$68.$$arity = -1);
    
    Opal.def(self, '$yield_self', $Kernel_yield_self$69 = function $$yield_self() {
      var $$70, $iter = $Kernel_yield_self$69.$$p, $yield = $iter || nil, self = this;

      if ($iter) $Kernel_yield_self$69.$$p = null;
      
      if (($yield !== nil)) {
      } else {
        return $send(self, 'enum_for', ["yield_self"], ($$70 = function(){var self = $$70.$$s == null ? this : $$70.$$s;

        return 1}, $$70.$$s = self, $$70.$$arity = 0, $$70))
      };
      return Opal.yield1($yield, self);;
    }, $Kernel_yield_self$69.$$arity = 0);
    $$($nesting, 'Opal').$pristine(self, "method_missing");
  })($nesting[0], $nesting);
  return (function($base, $super, $parent_nesting) {
    var self = $klass($base, $super, 'Object');

    var $nesting = [self].concat($parent_nesting);

    return self.$include($$($nesting, 'Kernel'))
  })($nesting[0], null, $nesting);
};

/* Generated by Opal 1.0.0 */
Opal.modules["corelib/error"] = function(Opal) {
  function $rb_plus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs + rhs : lhs['$+'](rhs);
  }
  function $rb_gt(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs > rhs : lhs['$>'](rhs);
  }
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.$$$, $$ = Opal.$$, $klass = Opal.klass, $send = Opal.send, $truthy = Opal.truthy, $module = Opal.module, $send2 = Opal.send2, $hash2 = Opal.hash2;

  Opal.add_stubs(['$new', '$clone', '$to_s', '$empty?', '$class', '$raise', '$+', '$attr_reader', '$[]', '$>', '$length', '$inspect']);
  
  (function($base, $super, $parent_nesting) {
    var self = $klass($base, $super, 'Exception');

    var $nesting = [self].concat($parent_nesting), $Exception_new$1, $Exception_exception$2, $Exception_initialize$3, $Exception_backtrace$4, $Exception_exception$5, $Exception_message$6, $Exception_inspect$7, $Exception_set_backtrace$8, $Exception_to_s$9;

    self.$$prototype.message = nil;
    
    var stack_trace_limit;
    Opal.defs(self, '$new', $Exception_new$1 = function($a) {
      var $post_args, args, self = this;

      
      
      $post_args = Opal.slice.call(arguments, 0, arguments.length);
      
      args = $post_args;;
      
      var message   = (args.length > 0) ? args[0] : nil;
      var error     = new self.$$constructor(message);
      error.name    = self.$$name;
      error.message = message;
      Opal.send(error, error.$initialize, args);

      // Error.captureStackTrace() will use .name and .toString to build the
      // first line of the stack trace so it must be called after the error
      // has been initialized.
      // https://nodejs.org/dist/latest-v6.x/docs/api/errors.html
      if (Opal.config.enable_stack_trace && Error.captureStackTrace) {
        // Passing Kernel.raise will cut the stack trace from that point above
        Error.captureStackTrace(error, stack_trace_limit);
      }

      return error;
    ;
    }, $Exception_new$1.$$arity = -1);
    stack_trace_limit = self.$new;
    Opal.defs(self, '$exception', $Exception_exception$2 = function $$exception($a) {
      var $post_args, args, self = this;

      
      
      $post_args = Opal.slice.call(arguments, 0, arguments.length);
      
      args = $post_args;;
      return $send(self, 'new', Opal.to_a(args));
    }, $Exception_exception$2.$$arity = -1);
    
    Opal.def(self, '$initialize', $Exception_initialize$3 = function $$initialize($a) {
      var $post_args, args, self = this;

      
      
      $post_args = Opal.slice.call(arguments, 0, arguments.length);
      
      args = $post_args;;
      return self.message = (args.length > 0) ? args[0] : nil;;
    }, $Exception_initialize$3.$$arity = -1);
    
    Opal.def(self, '$backtrace', $Exception_backtrace$4 = function $$backtrace() {
      var self = this;

      
      if (self.backtrace) {
        // nil is a valid backtrace
        return self.backtrace;
      }

      var backtrace = self.stack;

      if (typeof(backtrace) === 'string') {
        return backtrace.split("\n").slice(0, 15);
      }
      else if (backtrace) {
        return backtrace.slice(0, 15);
      }

      return [];
    
    }, $Exception_backtrace$4.$$arity = 0);
    
    Opal.def(self, '$exception', $Exception_exception$5 = function $$exception(str) {
      var self = this;

      
      
      if (str == null) {
        str = nil;
      };
      
      if (str === nil || self === str) {
        return self;
      }

      var cloned = self.$clone();
      cloned.message = str;
      cloned.stack = self.stack;
      return cloned;
    ;
    }, $Exception_exception$5.$$arity = -1);
    
    Opal.def(self, '$message', $Exception_message$6 = function $$message() {
      var self = this;

      return self.$to_s()
    }, $Exception_message$6.$$arity = 0);
    
    Opal.def(self, '$inspect', $Exception_inspect$7 = function $$inspect() {
      var self = this, as_str = nil;

      
      as_str = self.$to_s();
      if ($truthy(as_str['$empty?']())) {
        return self.$class().$to_s()
      } else {
        return "" + "#<" + (self.$class().$to_s()) + ": " + (self.$to_s()) + ">"
      };
    }, $Exception_inspect$7.$$arity = 0);
    
    Opal.def(self, '$set_backtrace', $Exception_set_backtrace$8 = function $$set_backtrace(backtrace) {
      var self = this;

      
      var valid = true, i, ii;

      if (backtrace === nil) {
        self.backtrace = nil;
        self.stack = '';
      } else if (backtrace.$$is_string) {
        self.backtrace = [backtrace];
        self.stack = backtrace;
      } else {
        if (backtrace.$$is_array) {
          for (i = 0, ii = backtrace.length; i < ii; i++) {
            if (!backtrace[i].$$is_string) {
              valid = false;
              break;
            }
          }
        } else {
          valid = false;
        }

        if (valid === false) {
          self.$raise($$($nesting, 'TypeError'), "backtrace must be Array of String")
        }

        self.backtrace = backtrace;
        self.stack = backtrace.join('\n');
      }

      return backtrace;
    
    }, $Exception_set_backtrace$8.$$arity = 1);
    return (Opal.def(self, '$to_s', $Exception_to_s$9 = function $$to_s() {
      var $a, $b, self = this;

      return ($truthy($a = ($truthy($b = self.message) ? self.message.$to_s() : $b)) ? $a : self.$class().$to_s())
    }, $Exception_to_s$9.$$arity = 0), nil) && 'to_s';
  })($nesting[0], Error, $nesting);
  (function($base, $super, $parent_nesting) {
    var self = $klass($base, $super, 'ScriptError');

    var $nesting = [self].concat($parent_nesting);

    return nil
  })($nesting[0], $$($nesting, 'Exception'), $nesting);
  (function($base, $super, $parent_nesting) {
    var self = $klass($base, $super, 'SyntaxError');

    var $nesting = [self].concat($parent_nesting);

    return nil
  })($nesting[0], $$($nesting, 'ScriptError'), $nesting);
  (function($base, $super, $parent_nesting) {
    var self = $klass($base, $super, 'LoadError');

    var $nesting = [self].concat($parent_nesting);

    return nil
  })($nesting[0], $$($nesting, 'ScriptError'), $nesting);
  (function($base, $super, $parent_nesting) {
    var self = $klass($base, $super, 'NotImplementedError');

    var $nesting = [self].concat($parent_nesting);

    return nil
  })($nesting[0], $$($nesting, 'ScriptError'), $nesting);
  (function($base, $super, $parent_nesting) {
    var self = $klass($base, $super, 'SystemExit');

    var $nesting = [self].concat($parent_nesting);

    return nil
  })($nesting[0], $$($nesting, 'Exception'), $nesting);
  (function($base, $super, $parent_nesting) {
    var self = $klass($base, $super, 'NoMemoryError');

    var $nesting = [self].concat($parent_nesting);

    return nil
  })($nesting[0], $$($nesting, 'Exception'), $nesting);
  (function($base, $super, $parent_nesting) {
    var self = $klass($base, $super, 'SignalException');

    var $nesting = [self].concat($parent_nesting);

    return nil
  })($nesting[0], $$($nesting, 'Exception'), $nesting);
  (function($base, $super, $parent_nesting) {
    var self = $klass($base, $super, 'Interrupt');

    var $nesting = [self].concat($parent_nesting);

    return nil
  })($nesting[0], $$($nesting, 'Exception'), $nesting);
  (function($base, $super, $parent_nesting) {
    var self = $klass($base, $super, 'SecurityError');

    var $nesting = [self].concat($parent_nesting);

    return nil
  })($nesting[0], $$($nesting, 'Exception'), $nesting);
  (function($base, $super, $parent_nesting) {
    var self = $klass($base, $super, 'StandardError');

    var $nesting = [self].concat($parent_nesting);

    return nil
  })($nesting[0], $$($nesting, 'Exception'), $nesting);
  (function($base, $super, $parent_nesting) {
    var self = $klass($base, $super, 'EncodingError');

    var $nesting = [self].concat($parent_nesting);

    return nil
  })($nesting[0], $$($nesting, 'StandardError'), $nesting);
  (function($base, $super, $parent_nesting) {
    var self = $klass($base, $super, 'ZeroDivisionError');

    var $nesting = [self].concat($parent_nesting);

    return nil
  })($nesting[0], $$($nesting, 'StandardError'), $nesting);
  (function($base, $super, $parent_nesting) {
    var self = $klass($base, $super, 'NameError');

    var $nesting = [self].concat($parent_nesting);

    return nil
  })($nesting[0], $$($nesting, 'StandardError'), $nesting);
  (function($base, $super, $parent_nesting) {
    var self = $klass($base, $super, 'NoMethodError');

    var $nesting = [self].concat($parent_nesting);

    return nil
  })($nesting[0], $$($nesting, 'NameError'), $nesting);
  (function($base, $super, $parent_nesting) {
    var self = $klass($base, $super, 'RuntimeError');

    var $nesting = [self].concat($parent_nesting);

    return nil
  })($nesting[0], $$($nesting, 'StandardError'), $nesting);
  (function($base, $super, $parent_nesting) {
    var self = $klass($base, $super, 'FrozenError');

    var $nesting = [self].concat($parent_nesting);

    return nil
  })($nesting[0], $$($nesting, 'RuntimeError'), $nesting);
  (function($base, $super, $parent_nesting) {
    var self = $klass($base, $super, 'LocalJumpError');

    var $nesting = [self].concat($parent_nesting);

    return nil
  })($nesting[0], $$($nesting, 'StandardError'), $nesting);
  (function($base, $super, $parent_nesting) {
    var self = $klass($base, $super, 'TypeError');

    var $nesting = [self].concat($parent_nesting);

    return nil
  })($nesting[0], $$($nesting, 'StandardError'), $nesting);
  (function($base, $super, $parent_nesting) {
    var self = $klass($base, $super, 'ArgumentError');

    var $nesting = [self].concat($parent_nesting);

    return nil
  })($nesting[0], $$($nesting, 'StandardError'), $nesting);
  (function($base, $super, $parent_nesting) {
    var self = $klass($base, $super, 'IndexError');

    var $nesting = [self].concat($parent_nesting);

    return nil
  })($nesting[0], $$($nesting, 'StandardError'), $nesting);
  (function($base, $super, $parent_nesting) {
    var self = $klass($base, $super, 'StopIteration');

    var $nesting = [self].concat($parent_nesting);

    return nil
  })($nesting[0], $$($nesting, 'IndexError'), $nesting);
  (function($base, $super, $parent_nesting) {
    var self = $klass($base, $super, 'KeyError');

    var $nesting = [self].concat($parent_nesting);

    return nil
  })($nesting[0], $$($nesting, 'IndexError'), $nesting);
  (function($base, $super, $parent_nesting) {
    var self = $klass($base, $super, 'RangeError');

    var $nesting = [self].concat($parent_nesting);

    return nil
  })($nesting[0], $$($nesting, 'StandardError'), $nesting);
  (function($base, $super, $parent_nesting) {
    var self = $klass($base, $super, 'FloatDomainError');

    var $nesting = [self].concat($parent_nesting);

    return nil
  })($nesting[0], $$($nesting, 'RangeError'), $nesting);
  (function($base, $super, $parent_nesting) {
    var self = $klass($base, $super, 'IOError');

    var $nesting = [self].concat($parent_nesting);

    return nil
  })($nesting[0], $$($nesting, 'StandardError'), $nesting);
  (function($base, $super, $parent_nesting) {
    var self = $klass($base, $super, 'SystemCallError');

    var $nesting = [self].concat($parent_nesting);

    return nil
  })($nesting[0], $$($nesting, 'StandardError'), $nesting);
  (function($base, $parent_nesting) {
    var self = $module($base, 'Errno');

    var $nesting = [self].concat($parent_nesting);

    (function($base, $super, $parent_nesting) {
      var self = $klass($base, $super, 'EINVAL');

      var $nesting = [self].concat($parent_nesting), $EINVAL_new$10;

      return (Opal.defs(self, '$new', $EINVAL_new$10 = function(name) {
        var $iter = $EINVAL_new$10.$$p, $yield = $iter || nil, self = this, message = nil;

        if ($iter) $EINVAL_new$10.$$p = null;
        
        
        if (name == null) {
          name = nil;
        };
        message = "Invalid argument";
        if ($truthy(name)) {
          message = $rb_plus(message, "" + " - " + (name))};
        return $send2(self, Opal.find_super_dispatcher(self, 'new', $EINVAL_new$10, false, true), 'new', [message], null);
      }, $EINVAL_new$10.$$arity = -1), nil) && 'new'
    })($nesting[0], $$($nesting, 'SystemCallError'), $nesting)
  })($nesting[0], $nesting);
  (function($base, $super, $parent_nesting) {
    var self = $klass($base, $super, 'UncaughtThrowError');

    var $nesting = [self].concat($parent_nesting), $UncaughtThrowError_initialize$11;

    self.$$prototype.sym = nil;
    
    self.$attr_reader("sym", "arg");
    return (Opal.def(self, '$initialize', $UncaughtThrowError_initialize$11 = function $$initialize(args) {
      var $iter = $UncaughtThrowError_initialize$11.$$p, $yield = $iter || nil, self = this;

      if ($iter) $UncaughtThrowError_initialize$11.$$p = null;
      
      self.sym = args['$[]'](0);
      if ($truthy($rb_gt(args.$length(), 1))) {
        self.arg = args['$[]'](1)};
      return $send2(self, Opal.find_super_dispatcher(self, 'initialize', $UncaughtThrowError_initialize$11, false, true), 'initialize', ["" + "uncaught throw " + (self.sym.$inspect())], null);
    }, $UncaughtThrowError_initialize$11.$$arity = 1), nil) && 'initialize';
  })($nesting[0], $$($nesting, 'ArgumentError'), $nesting);
  (function($base, $super, $parent_nesting) {
    var self = $klass($base, $super, 'NameError');

    var $nesting = [self].concat($parent_nesting), $NameError_initialize$12;

    
    self.$attr_reader("name");
    return (Opal.def(self, '$initialize', $NameError_initialize$12 = function $$initialize(message, name) {
      var $iter = $NameError_initialize$12.$$p, $yield = $iter || nil, self = this;

      if ($iter) $NameError_initialize$12.$$p = null;
      
      
      if (name == null) {
        name = nil;
      };
      $send2(self, Opal.find_super_dispatcher(self, 'initialize', $NameError_initialize$12, false, true), 'initialize', [message], null);
      return (self.name = name);
    }, $NameError_initialize$12.$$arity = -2), nil) && 'initialize';
  })($nesting[0], null, $nesting);
  (function($base, $super, $parent_nesting) {
    var self = $klass($base, $super, 'NoMethodError');

    var $nesting = [self].concat($parent_nesting), $NoMethodError_initialize$13;

    
    self.$attr_reader("args");
    return (Opal.def(self, '$initialize', $NoMethodError_initialize$13 = function $$initialize(message, name, args) {
      var $iter = $NoMethodError_initialize$13.$$p, $yield = $iter || nil, self = this;

      if ($iter) $NoMethodError_initialize$13.$$p = null;
      
      
      if (name == null) {
        name = nil;
      };
      
      if (args == null) {
        args = [];
      };
      $send2(self, Opal.find_super_dispatcher(self, 'initialize', $NoMethodError_initialize$13, false, true), 'initialize', [message, name], null);
      return (self.args = args);
    }, $NoMethodError_initialize$13.$$arity = -2), nil) && 'initialize';
  })($nesting[0], null, $nesting);
  (function($base, $super, $parent_nesting) {
    var self = $klass($base, $super, 'StopIteration');

    var $nesting = [self].concat($parent_nesting);

    return self.$attr_reader("result")
  })($nesting[0], null, $nesting);
  (function($base, $super, $parent_nesting) {
    var self = $klass($base, $super, 'KeyError');

    var $nesting = [self].concat($parent_nesting), $KeyError_initialize$14, $KeyError_receiver$15, $KeyError_key$16;

    self.$$prototype.receiver = self.$$prototype.key = nil;
    
    
    Opal.def(self, '$initialize', $KeyError_initialize$14 = function $$initialize(message, $kwargs) {
      var receiver, key, $iter = $KeyError_initialize$14.$$p, $yield = $iter || nil, self = this;

      if ($iter) $KeyError_initialize$14.$$p = null;
      
      
      if ($kwargs == null) {
        $kwargs = $hash2([], {});
      } else if (!$kwargs.$$is_hash) {
        throw Opal.ArgumentError.$new('expected kwargs');
      };
      
      receiver = $kwargs.$$smap["receiver"];
      if (receiver == null) {
        receiver = nil
      };
      
      key = $kwargs.$$smap["key"];
      if (key == null) {
        key = nil
      };
      $send2(self, Opal.find_super_dispatcher(self, 'initialize', $KeyError_initialize$14, false, true), 'initialize', [message], null);
      self.receiver = receiver;
      return (self.key = key);
    }, $KeyError_initialize$14.$$arity = -2);
    
    Opal.def(self, '$receiver', $KeyError_receiver$15 = function $$receiver() {
      var $a, self = this;

      return ($truthy($a = self.receiver) ? $a : self.$raise($$($nesting, 'ArgumentError'), "no receiver is available"))
    }, $KeyError_receiver$15.$$arity = 0);
    return (Opal.def(self, '$key', $KeyError_key$16 = function $$key() {
      var $a, self = this;

      return ($truthy($a = self.key) ? $a : self.$raise($$($nesting, 'ArgumentError'), "no key is available"))
    }, $KeyError_key$16.$$arity = 0), nil) && 'key';
  })($nesting[0], null, $nesting);
  return (function($base, $parent_nesting) {
    var self = $module($base, 'JS');

    var $nesting = [self].concat($parent_nesting);

    (function($base, $super, $parent_nesting) {
      var self = $klass($base, $super, 'Error');

      var $nesting = [self].concat($parent_nesting);

      return nil
    })($nesting[0], null, $nesting)
  })($nesting[0], $nesting);
};

/* Generated by Opal 1.0.0 */
Opal.modules["corelib/constants"] = function(Opal) {
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.$$$, $$ = Opal.$$;

  
  Opal.const_set($nesting[0], 'RUBY_PLATFORM', "opal");
  Opal.const_set($nesting[0], 'RUBY_ENGINE', "opal");
  Opal.const_set($nesting[0], 'RUBY_VERSION', "2.5.3");
  Opal.const_set($nesting[0], 'RUBY_ENGINE_VERSION', "1.0.0");
  Opal.const_set($nesting[0], 'RUBY_RELEASE_DATE', "2019-05-12");
  Opal.const_set($nesting[0], 'RUBY_PATCHLEVEL', 0);
  Opal.const_set($nesting[0], 'RUBY_REVISION', 0);
  Opal.const_set($nesting[0], 'RUBY_COPYRIGHT', "opal - Copyright (C) 2013-2019 Adam Beynon and the Opal contributors");
  return Opal.const_set($nesting[0], 'RUBY_DESCRIPTION', "" + "opal " + ($$($nesting, 'RUBY_ENGINE_VERSION')) + " (" + ($$($nesting, 'RUBY_RELEASE_DATE')) + " revision " + ($$($nesting, 'RUBY_REVISION')) + ")");
};

/* Generated by Opal 1.0.0 */
Opal.modules["opal/base"] = function(Opal) {
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.$$$, $$ = Opal.$$;

  Opal.add_stubs(['$require']);
  
  self.$require("corelib/runtime");
  self.$require("corelib/helpers");
  self.$require("corelib/module");
  self.$require("corelib/class");
  self.$require("corelib/basic_object");
  self.$require("corelib/kernel");
  self.$require("corelib/error");
  return self.$require("corelib/constants");
};

/* Generated by Opal 1.0.0 */
Opal.modules["corelib/nil"] = function(Opal) {
  function $rb_gt(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs > rhs : lhs['$>'](rhs);
  }
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.$$$, $$ = Opal.$$, $klass = Opal.klass, $hash2 = Opal.hash2, $truthy = Opal.truthy;

  Opal.add_stubs(['$raise', '$name', '$new', '$>', '$length', '$Rational']);
  
  (function($base, $super, $parent_nesting) {
    var self = $klass($base, $super, 'NilClass');

    var $nesting = [self].concat($parent_nesting), $NilClass_$excl$2, $NilClass_$$3, $NilClass_$$4, $NilClass_$$5, $NilClass_$eq_eq$6, $NilClass_dup$7, $NilClass_clone$8, $NilClass_inspect$9, $NilClass_nil$ques$10, $NilClass_singleton_class$11, $NilClass_to_a$12, $NilClass_to_h$13, $NilClass_to_i$14, $NilClass_to_s$15, $NilClass_to_c$16, $NilClass_rationalize$17, $NilClass_to_r$18, $NilClass_instance_variables$19;

    
    self.$$prototype.$$meta = self;
    (function(self, $parent_nesting) {
      var $nesting = [self].concat($parent_nesting), $allocate$1;

      
      
      Opal.def(self, '$allocate', $allocate$1 = function $$allocate() {
        var self = this;

        return self.$raise($$($nesting, 'TypeError'), "" + "allocator undefined for " + (self.$name()))
      }, $allocate$1.$$arity = 0);
      
      
      Opal.udef(self, '$' + "new");;
      return nil;;
    })(Opal.get_singleton_class(self), $nesting);
    
    Opal.def(self, '$!', $NilClass_$excl$2 = function() {
      var self = this;

      return true
    }, $NilClass_$excl$2.$$arity = 0);
    
    Opal.def(self, '$&', $NilClass_$$3 = function(other) {
      var self = this;

      return false
    }, $NilClass_$$3.$$arity = 1);
    
    Opal.def(self, '$|', $NilClass_$$4 = function(other) {
      var self = this;

      return other !== false && other !== nil;
    }, $NilClass_$$4.$$arity = 1);
    
    Opal.def(self, '$^', $NilClass_$$5 = function(other) {
      var self = this;

      return other !== false && other !== nil;
    }, $NilClass_$$5.$$arity = 1);
    
    Opal.def(self, '$==', $NilClass_$eq_eq$6 = function(other) {
      var self = this;

      return other === nil;
    }, $NilClass_$eq_eq$6.$$arity = 1);
    
    Opal.def(self, '$dup', $NilClass_dup$7 = function $$dup() {
      var self = this;

      return nil
    }, $NilClass_dup$7.$$arity = 0);
    
    Opal.def(self, '$clone', $NilClass_clone$8 = function $$clone($kwargs) {
      var freeze, self = this;

      
      
      if ($kwargs == null) {
        $kwargs = $hash2([], {});
      } else if (!$kwargs.$$is_hash) {
        throw Opal.ArgumentError.$new('expected kwargs');
      };
      
      freeze = $kwargs.$$smap["freeze"];
      if (freeze == null) {
        freeze = true
      };
      return nil;
    }, $NilClass_clone$8.$$arity = -1);
    
    Opal.def(self, '$inspect', $NilClass_inspect$9 = function $$inspect() {
      var self = this;

      return "nil"
    }, $NilClass_inspect$9.$$arity = 0);
    
    Opal.def(self, '$nil?', $NilClass_nil$ques$10 = function() {
      var self = this;

      return true
    }, $NilClass_nil$ques$10.$$arity = 0);
    
    Opal.def(self, '$singleton_class', $NilClass_singleton_class$11 = function $$singleton_class() {
      var self = this;

      return $$($nesting, 'NilClass')
    }, $NilClass_singleton_class$11.$$arity = 0);
    
    Opal.def(self, '$to_a', $NilClass_to_a$12 = function $$to_a() {
      var self = this;

      return []
    }, $NilClass_to_a$12.$$arity = 0);
    
    Opal.def(self, '$to_h', $NilClass_to_h$13 = function $$to_h() {
      var self = this;

      return Opal.hash();
    }, $NilClass_to_h$13.$$arity = 0);
    
    Opal.def(self, '$to_i', $NilClass_to_i$14 = function $$to_i() {
      var self = this;

      return 0
    }, $NilClass_to_i$14.$$arity = 0);
    Opal.alias(self, "to_f", "to_i");
    
    Opal.def(self, '$to_s', $NilClass_to_s$15 = function $$to_s() {
      var self = this;

      return ""
    }, $NilClass_to_s$15.$$arity = 0);
    
    Opal.def(self, '$to_c', $NilClass_to_c$16 = function $$to_c() {
      var self = this;

      return $$($nesting, 'Complex').$new(0, 0)
    }, $NilClass_to_c$16.$$arity = 0);
    
    Opal.def(self, '$rationalize', $NilClass_rationalize$17 = function $$rationalize($a) {
      var $post_args, args, self = this;

      
      
      $post_args = Opal.slice.call(arguments, 0, arguments.length);
      
      args = $post_args;;
      if ($truthy($rb_gt(args.$length(), 1))) {
        self.$raise($$($nesting, 'ArgumentError'))};
      return self.$Rational(0, 1);
    }, $NilClass_rationalize$17.$$arity = -1);
    
    Opal.def(self, '$to_r', $NilClass_to_r$18 = function $$to_r() {
      var self = this;

      return self.$Rational(0, 1)
    }, $NilClass_to_r$18.$$arity = 0);
    return (Opal.def(self, '$instance_variables', $NilClass_instance_variables$19 = function $$instance_variables() {
      var self = this;

      return []
    }, $NilClass_instance_variables$19.$$arity = 0), nil) && 'instance_variables';
  })($nesting[0], null, $nesting);
  return Opal.const_set($nesting[0], 'NIL', nil);
};

/* Generated by Opal 1.0.0 */
Opal.modules["corelib/boolean"] = function(Opal) {
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.$$$, $$ = Opal.$$, $klass = Opal.klass, $hash2 = Opal.hash2;

  Opal.add_stubs(['$raise', '$name']);
  
  (function($base, $super, $parent_nesting) {
    var self = $klass($base, $super, 'Boolean');

    var $nesting = [self].concat($parent_nesting), $Boolean___id__$2, $Boolean_$excl$3, $Boolean_$$4, $Boolean_$$5, $Boolean_$$6, $Boolean_$eq_eq$7, $Boolean_singleton_class$8, $Boolean_to_s$9, $Boolean_dup$10, $Boolean_clone$11;

    
    Opal.defineProperty(self.$$prototype, '$$is_boolean', true);
    Opal.defineProperty(self.$$prototype, '$$meta', self);
    (function(self, $parent_nesting) {
      var $nesting = [self].concat($parent_nesting), $allocate$1;

      
      
      Opal.def(self, '$allocate', $allocate$1 = function $$allocate() {
        var self = this;

        return self.$raise($$($nesting, 'TypeError'), "" + "allocator undefined for " + (self.$name()))
      }, $allocate$1.$$arity = 0);
      
      
      Opal.udef(self, '$' + "new");;
      return nil;;
    })(Opal.get_singleton_class(self), $nesting);
    
    Opal.def(self, '$__id__', $Boolean___id__$2 = function $$__id__() {
      var self = this;

      return self.valueOf() ? 2 : 0;
    }, $Boolean___id__$2.$$arity = 0);
    Opal.alias(self, "object_id", "__id__");
    
    Opal.def(self, '$!', $Boolean_$excl$3 = function() {
      var self = this;

      return self != true;
    }, $Boolean_$excl$3.$$arity = 0);
    
    Opal.def(self, '$&', $Boolean_$$4 = function(other) {
      var self = this;

      return (self == true) ? (other !== false && other !== nil) : false;
    }, $Boolean_$$4.$$arity = 1);
    
    Opal.def(self, '$|', $Boolean_$$5 = function(other) {
      var self = this;

      return (self == true) ? true : (other !== false && other !== nil);
    }, $Boolean_$$5.$$arity = 1);
    
    Opal.def(self, '$^', $Boolean_$$6 = function(other) {
      var self = this;

      return (self == true) ? (other === false || other === nil) : (other !== false && other !== nil);
    }, $Boolean_$$6.$$arity = 1);
    
    Opal.def(self, '$==', $Boolean_$eq_eq$7 = function(other) {
      var self = this;

      return (self == true) === other.valueOf();
    }, $Boolean_$eq_eq$7.$$arity = 1);
    Opal.alias(self, "equal?", "==");
    Opal.alias(self, "eql?", "==");
    
    Opal.def(self, '$singleton_class', $Boolean_singleton_class$8 = function $$singleton_class() {
      var self = this;

      return $$($nesting, 'Boolean')
    }, $Boolean_singleton_class$8.$$arity = 0);
    
    Opal.def(self, '$to_s', $Boolean_to_s$9 = function $$to_s() {
      var self = this;

      return (self == true) ? 'true' : 'false';
    }, $Boolean_to_s$9.$$arity = 0);
    
    Opal.def(self, '$dup', $Boolean_dup$10 = function $$dup() {
      var self = this;

      return self
    }, $Boolean_dup$10.$$arity = 0);
    return (Opal.def(self, '$clone', $Boolean_clone$11 = function $$clone($kwargs) {
      var freeze, self = this;

      
      
      if ($kwargs == null) {
        $kwargs = $hash2([], {});
      } else if (!$kwargs.$$is_hash) {
        throw Opal.ArgumentError.$new('expected kwargs');
      };
      
      freeze = $kwargs.$$smap["freeze"];
      if (freeze == null) {
        freeze = true
      };
      return self;
    }, $Boolean_clone$11.$$arity = -1), nil) && 'clone';
  })($nesting[0], Boolean, $nesting);
  Opal.const_set($nesting[0], 'TrueClass', $$($nesting, 'Boolean'));
  Opal.const_set($nesting[0], 'FalseClass', $$($nesting, 'Boolean'));
  Opal.const_set($nesting[0], 'TRUE', true);
  return Opal.const_set($nesting[0], 'FALSE', false);
};

/* Generated by Opal 1.0.0 */
Opal.modules["corelib/comparable"] = function(Opal) {
  function $rb_gt(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs > rhs : lhs['$>'](rhs);
  }
  function $rb_lt(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs < rhs : lhs['$<'](rhs);
  }
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.$$$, $$ = Opal.$$, $module = Opal.module, $truthy = Opal.truthy;

  Opal.add_stubs(['$>', '$<', '$===', '$raise', '$class', '$equal?', '$<=>']);
  return (function($base, $parent_nesting) {
    var self = $module($base, 'Comparable');

    var $nesting = [self].concat($parent_nesting), $Comparable_$eq_eq$1, $Comparable_$gt$2, $Comparable_$gt_eq$3, $Comparable_$lt$4, $Comparable_$lt_eq$5, $Comparable_between$ques$6, $Comparable_clamp$7, $case = nil;

    
    
    function normalize(what) {
      if (Opal.is_a(what, Opal.Integer)) { return what; }

      if ($rb_gt(what, 0)) { return 1; }
      if ($rb_lt(what, 0)) { return -1; }
      return 0;
    }

    function fail_comparison(lhs, rhs) {
      var class_name;
      (function() {$case = rhs;
    if (nil['$===']($case) || true['$===']($case) || false['$===']($case) || $$($nesting, 'Integer')['$===']($case) || $$($nesting, 'Float')['$===']($case)) {return class_name = rhs.$inspect();}
    else {return class_name = rhs.$$class;}})()
      self.$raise($$($nesting, 'ArgumentError'), "" + "comparison of " + ((lhs).$class()) + " with " + (class_name) + " failed")
    }
  ;
    
    Opal.def(self, '$==', $Comparable_$eq_eq$1 = function(other) {
      var self = this, cmp = nil;

      
      if ($truthy(self['$equal?'](other))) {
        return true};
      
      if (self["$<=>"] == Opal.Kernel["$<=>"]) {
        return false;
      }

      // check for infinite recursion
      if (self.$$comparable) {
        delete self.$$comparable;
        return false;
      }
    ;
      if ($truthy((cmp = self['$<=>'](other)))) {
      } else {
        return false
      };
      return normalize(cmp) == 0;;
    }, $Comparable_$eq_eq$1.$$arity = 1);
    
    Opal.def(self, '$>', $Comparable_$gt$2 = function(other) {
      var self = this, cmp = nil;

      
      if ($truthy((cmp = self['$<=>'](other)))) {
      } else {
        fail_comparison(self, other)
      };
      return normalize(cmp) > 0;;
    }, $Comparable_$gt$2.$$arity = 1);
    
    Opal.def(self, '$>=', $Comparable_$gt_eq$3 = function(other) {
      var self = this, cmp = nil;

      
      if ($truthy((cmp = self['$<=>'](other)))) {
      } else {
        fail_comparison(self, other)
      };
      return normalize(cmp) >= 0;;
    }, $Comparable_$gt_eq$3.$$arity = 1);
    
    Opal.def(self, '$<', $Comparable_$lt$4 = function(other) {
      var self = this, cmp = nil;

      
      if ($truthy((cmp = self['$<=>'](other)))) {
      } else {
        fail_comparison(self, other)
      };
      return normalize(cmp) < 0;;
    }, $Comparable_$lt$4.$$arity = 1);
    
    Opal.def(self, '$<=', $Comparable_$lt_eq$5 = function(other) {
      var self = this, cmp = nil;

      
      if ($truthy((cmp = self['$<=>'](other)))) {
      } else {
        fail_comparison(self, other)
      };
      return normalize(cmp) <= 0;;
    }, $Comparable_$lt_eq$5.$$arity = 1);
    
    Opal.def(self, '$between?', $Comparable_between$ques$6 = function(min, max) {
      var self = this;

      
      if ($rb_lt(self, min)) {
        return false};
      if ($rb_gt(self, max)) {
        return false};
      return true;
    }, $Comparable_between$ques$6.$$arity = 2);
    
    Opal.def(self, '$clamp', $Comparable_clamp$7 = function $$clamp(min, max) {
      var self = this, cmp = nil;

      
      cmp = min['$<=>'](max);
      if ($truthy(cmp)) {
      } else {
        fail_comparison(min, max)
      };
      if ($truthy(normalize(cmp) > 0)) {
        self.$raise($$($nesting, 'ArgumentError'), "min argument must be smaller than max argument")};
      if ($truthy(normalize(self['$<=>'](min)) < 0)) {
        return min};
      if ($truthy(normalize(self['$<=>'](max)) > 0)) {
        return max};
      return self;
    }, $Comparable_clamp$7.$$arity = 2);
  })($nesting[0], $nesting)
};

/* Generated by Opal 1.0.0 */
Opal.modules["corelib/regexp"] = function(Opal) {
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.$$$, $$ = Opal.$$, $coerce_to = Opal.coerce_to, $klass = Opal.klass, $send2 = Opal.send2, $truthy = Opal.truthy, $gvars = Opal.gvars, $send = Opal.send;

  Opal.add_stubs(['$nil?', '$[]', '$raise', '$escape', '$options', '$to_str', '$new', '$join', '$coerce_to!', '$!', '$match', '$coerce_to?', '$begin', '$=~', '$attr_reader', '$===', '$inspect', '$to_a']);
  
  (function($base, $super, $parent_nesting) {
    var self = $klass($base, $super, 'RegexpError');

    var $nesting = [self].concat($parent_nesting);

    return nil
  })($nesting[0], $$($nesting, 'StandardError'), $nesting);
  (function($base, $super, $parent_nesting) {
    var self = $klass($base, $super, 'Regexp');

    var $nesting = [self].concat($parent_nesting), $Regexp_$eq_eq$6, $Regexp_$eq_eq_eq$7, $Regexp_$eq_tilde$8, $Regexp_inspect$9, $Regexp_match$10, $Regexp_match$ques$11, $Regexp_$$12, $Regexp_source$13, $Regexp_options$14, $Regexp_casefold$ques$15;

    
    Opal.const_set($nesting[0], 'IGNORECASE', 1);
    Opal.const_set($nesting[0], 'EXTENDED', 2);
    Opal.const_set($nesting[0], 'MULTILINE', 4);
    Opal.defineProperty(self.$$prototype, '$$is_regexp', true);
    (function(self, $parent_nesting) {
      var $nesting = [self].concat($parent_nesting), $allocate$1, $escape$2, $last_match$3, $union$4, $new$5;

      
      
      Opal.def(self, '$allocate', $allocate$1 = function $$allocate() {
        var $iter = $allocate$1.$$p, $yield = $iter || nil, self = this, allocated = nil, $zuper = nil, $zuper_i = nil, $zuper_ii = nil;

        if ($iter) $allocate$1.$$p = null;
        // Prepare super implicit arguments
        for($zuper_i = 0, $zuper_ii = arguments.length, $zuper = new Array($zuper_ii); $zuper_i < $zuper_ii; $zuper_i++) {
          $zuper[$zuper_i] = arguments[$zuper_i];
        }
        
        allocated = $send2(self, Opal.find_super_dispatcher(self, 'allocate', $allocate$1, false, true), 'allocate', $zuper, $iter);
        allocated.uninitialized = true;
        return allocated;
      }, $allocate$1.$$arity = 0);
      
      Opal.def(self, '$escape', $escape$2 = function $$escape(string) {
        var self = this;

        return Opal.escape_regexp(string);
      }, $escape$2.$$arity = 1);
      
      Opal.def(self, '$last_match', $last_match$3 = function $$last_match(n) {
        var self = this;
        if ($gvars["~"] == null) $gvars["~"] = nil;

        
        
        if (n == null) {
          n = nil;
        };
        if ($truthy(n['$nil?']())) {
          return $gvars["~"]
        } else {
          return $gvars["~"]['$[]'](n)
        };
      }, $last_match$3.$$arity = -1);
      Opal.alias(self, "quote", "escape");
      
      Opal.def(self, '$union', $union$4 = function $$union($a) {
        var $post_args, parts, self = this;

        
        
        $post_args = Opal.slice.call(arguments, 0, arguments.length);
        
        parts = $post_args;;
        
        var is_first_part_array, quoted_validated, part, options, each_part_options;
        if (parts.length == 0) {
          return /(?!)/;
        }
        // return fast if there's only one element
        if (parts.length == 1 && parts[0].$$is_regexp) {
          return parts[0];
        }
        // cover the 2 arrays passed as arguments case
        is_first_part_array = parts[0].$$is_array;
        if (parts.length > 1 && is_first_part_array) {
          self.$raise($$($nesting, 'TypeError'), "no implicit conversion of Array into String")
        }
        // deal with splat issues (related to https://github.com/opal/opal/issues/858)
        if (is_first_part_array) {
          parts = parts[0];
        }
        options = undefined;
        quoted_validated = [];
        for (var i=0; i < parts.length; i++) {
          part = parts[i];
          if (part.$$is_string) {
            quoted_validated.push(self.$escape(part));
          }
          else if (part.$$is_regexp) {
            each_part_options = (part).$options();
            if (options != undefined && options != each_part_options) {
              self.$raise($$($nesting, 'TypeError'), "All expressions must use the same options")
            }
            options = each_part_options;
            quoted_validated.push('('+part.source+')');
          }
          else {
            quoted_validated.push(self.$escape((part).$to_str()));
          }
        }
      ;
        return self.$new((quoted_validated).$join("|"), options);
      }, $union$4.$$arity = -1);
      
      Opal.def(self, '$new', $new$5 = function(regexp, options) {
        var self = this;

        
        ;
        
        if (regexp.$$is_regexp) {
          return new RegExp(regexp);
        }

        regexp = $$($nesting, 'Opal')['$coerce_to!'](regexp, $$($nesting, 'String'), "to_str");

        if (regexp.charAt(regexp.length - 1) === '\\' && regexp.charAt(regexp.length - 2) !== '\\') {
          self.$raise($$($nesting, 'RegexpError'), "" + "too short escape sequence: /" + (regexp) + "/")
        }

        if (options === undefined || options['$!']()) {
          return new RegExp(regexp);
        }

        if (options.$$is_number) {
          var temp = '';
          if ($$($nesting, 'IGNORECASE') & options) { temp += 'i'; }
          if ($$($nesting, 'MULTILINE')  & options) { temp += 'm'; }
          options = temp;
        }
        else {
          options = 'i';
        }

        return new RegExp(regexp, options);
      ;
      }, $new$5.$$arity = -2);
      return Opal.alias(self, "compile", "new");
    })(Opal.get_singleton_class(self), $nesting);
    
    Opal.def(self, '$==', $Regexp_$eq_eq$6 = function(other) {
      var self = this;

      return other instanceof RegExp && self.toString() === other.toString();
    }, $Regexp_$eq_eq$6.$$arity = 1);
    
    Opal.def(self, '$===', $Regexp_$eq_eq_eq$7 = function(string) {
      var self = this;

      return self.$match($$($nesting, 'Opal')['$coerce_to?'](string, $$($nesting, 'String'), "to_str")) !== nil
    }, $Regexp_$eq_eq_eq$7.$$arity = 1);
    
    Opal.def(self, '$=~', $Regexp_$eq_tilde$8 = function(string) {
      var $a, self = this;
      if ($gvars["~"] == null) $gvars["~"] = nil;

      return ($truthy($a = self.$match(string)) ? $gvars["~"].$begin(0) : $a)
    }, $Regexp_$eq_tilde$8.$$arity = 1);
    Opal.alias(self, "eql?", "==");
    
    Opal.def(self, '$inspect', $Regexp_inspect$9 = function $$inspect() {
      var self = this;

      
      var regexp_format = /^\/(.*)\/([^\/]*)$/;
      var value = self.toString();
      var matches = regexp_format.exec(value);
      if (matches) {
        var regexp_pattern = matches[1];
        var regexp_flags = matches[2];
        var chars = regexp_pattern.split('');
        var chars_length = chars.length;
        var char_escaped = false;
        var regexp_pattern_escaped = '';
        for (var i = 0; i < chars_length; i++) {
          var current_char = chars[i];
          if (!char_escaped && current_char == '/') {
            regexp_pattern_escaped = regexp_pattern_escaped.concat('\\');
          }
          regexp_pattern_escaped = regexp_pattern_escaped.concat(current_char);
          if (current_char == '\\') {
            if (char_escaped) {
              // does not over escape
              char_escaped = false;
            } else {
              char_escaped = true;
            }
          } else {
            char_escaped = false;
          }
        }
        return '/' + regexp_pattern_escaped + '/' + regexp_flags;
      } else {
        return value;
      }
    
    }, $Regexp_inspect$9.$$arity = 0);
    
    Opal.def(self, '$match', $Regexp_match$10 = function $$match(string, pos) {
      var $iter = $Regexp_match$10.$$p, block = $iter || nil, self = this;
      if ($gvars["~"] == null) $gvars["~"] = nil;

      if ($iter) $Regexp_match$10.$$p = null;
      
      
      if ($iter) $Regexp_match$10.$$p = null;;
      ;
      
      if (self.uninitialized) {
        self.$raise($$($nesting, 'TypeError'), "uninitialized Regexp")
      }

      if (pos === undefined) {
        if (string === nil) return ($gvars["~"] = nil);
        var m = self.exec($coerce_to(string, $$($nesting, 'String'), 'to_str'));
        if (m) {
          ($gvars["~"] = $$($nesting, 'MatchData').$new(self, m));
          return block === nil ? $gvars["~"] : Opal.yield1(block, $gvars["~"]);
        } else {
          return ($gvars["~"] = nil);
        }
      }

      pos = $coerce_to(pos, $$($nesting, 'Integer'), 'to_int');

      if (string === nil) {
        return ($gvars["~"] = nil);
      }

      string = $coerce_to(string, $$($nesting, 'String'), 'to_str');

      if (pos < 0) {
        pos += string.length;
        if (pos < 0) {
          return ($gvars["~"] = nil);
        }
      }

      // global RegExp maintains state, so not using self/this
      var md, re = Opal.global_regexp(self);

      while (true) {
        md = re.exec(string);
        if (md === null) {
          return ($gvars["~"] = nil);
        }
        if (md.index >= pos) {
          ($gvars["~"] = $$($nesting, 'MatchData').$new(re, md));
          return block === nil ? $gvars["~"] : Opal.yield1(block, $gvars["~"]);
        }
        re.lastIndex = md.index + 1;
      }
    ;
    }, $Regexp_match$10.$$arity = -2);
    
    Opal.def(self, '$match?', $Regexp_match$ques$11 = function(string, pos) {
      var self = this;

      
      ;
      
      if (self.uninitialized) {
        self.$raise($$($nesting, 'TypeError'), "uninitialized Regexp")
      }

      if (pos === undefined) {
        return string === nil ? false : self.test($coerce_to(string, $$($nesting, 'String'), 'to_str'));
      }

      pos = $coerce_to(pos, $$($nesting, 'Integer'), 'to_int');

      if (string === nil) {
        return false;
      }

      string = $coerce_to(string, $$($nesting, 'String'), 'to_str');

      if (pos < 0) {
        pos += string.length;
        if (pos < 0) {
          return false;
        }
      }

      // global RegExp maintains state, so not using self/this
      var md, re = Opal.global_regexp(self);

      md = re.exec(string);
      if (md === null || md.index < pos) {
        return false;
      } else {
        return true;
      }
    ;
    }, $Regexp_match$ques$11.$$arity = -2);
    
    Opal.def(self, '$~', $Regexp_$$12 = function() {
      var self = this;
      if ($gvars._ == null) $gvars._ = nil;

      return self['$=~']($gvars._)
    }, $Regexp_$$12.$$arity = 0);
    
    Opal.def(self, '$source', $Regexp_source$13 = function $$source() {
      var self = this;

      return self.source;
    }, $Regexp_source$13.$$arity = 0);
    
    Opal.def(self, '$options', $Regexp_options$14 = function $$options() {
      var self = this;

      
      if (self.uninitialized) {
        self.$raise($$($nesting, 'TypeError'), "uninitialized Regexp")
      }
      var result = 0;
      // should be supported in IE6 according to https://msdn.microsoft.com/en-us/library/7f5z26w4(v=vs.94).aspx
      if (self.multiline) {
        result |= $$($nesting, 'MULTILINE');
      }
      if (self.ignoreCase) {
        result |= $$($nesting, 'IGNORECASE');
      }
      return result;
    
    }, $Regexp_options$14.$$arity = 0);
    
    Opal.def(self, '$casefold?', $Regexp_casefold$ques$15 = function() {
      var self = this;

      return self.ignoreCase;
    }, $Regexp_casefold$ques$15.$$arity = 0);
    return Opal.alias(self, "to_s", "source");
  })($nesting[0], RegExp, $nesting);
  return (function($base, $super, $parent_nesting) {
    var self = $klass($base, $super, 'MatchData');

    var $nesting = [self].concat($parent_nesting), $MatchData_initialize$16, $MatchData_$$$17, $MatchData_offset$18, $MatchData_$eq_eq$19, $MatchData_begin$20, $MatchData_end$21, $MatchData_captures$22, $MatchData_inspect$23, $MatchData_length$24, $MatchData_to_a$25, $MatchData_to_s$26, $MatchData_values_at$27;

    self.$$prototype.matches = nil;
    
    self.$attr_reader("post_match", "pre_match", "regexp", "string");
    
    Opal.def(self, '$initialize', $MatchData_initialize$16 = function $$initialize(regexp, match_groups) {
      var self = this;

      
      $gvars["~"] = self;
      self.regexp = regexp;
      self.begin = match_groups.index;
      self.string = match_groups.input;
      self.pre_match = match_groups.input.slice(0, match_groups.index);
      self.post_match = match_groups.input.slice(match_groups.index + match_groups[0].length);
      self.matches = [];
      
      for (var i = 0, length = match_groups.length; i < length; i++) {
        var group = match_groups[i];

        if (group == null) {
          self.matches.push(nil);
        }
        else {
          self.matches.push(group);
        }
      }
    ;
    }, $MatchData_initialize$16.$$arity = 2);
    
    Opal.def(self, '$[]', $MatchData_$$$17 = function($a) {
      var $post_args, args, self = this;

      
      
      $post_args = Opal.slice.call(arguments, 0, arguments.length);
      
      args = $post_args;;
      return $send(self.matches, '[]', Opal.to_a(args));
    }, $MatchData_$$$17.$$arity = -1);
    
    Opal.def(self, '$offset', $MatchData_offset$18 = function $$offset(n) {
      var self = this;

      
      if (n !== 0) {
        self.$raise($$($nesting, 'ArgumentError'), "MatchData#offset only supports 0th element")
      }
      return [self.begin, self.begin + self.matches[n].length];
    
    }, $MatchData_offset$18.$$arity = 1);
    
    Opal.def(self, '$==', $MatchData_$eq_eq$19 = function(other) {
      var $a, $b, $c, $d, self = this;

      
      if ($truthy($$($nesting, 'MatchData')['$==='](other))) {
      } else {
        return false
      };
      return ($truthy($a = ($truthy($b = ($truthy($c = ($truthy($d = self.string == other.string) ? self.regexp.toString() == other.regexp.toString() : $d)) ? self.pre_match == other.pre_match : $c)) ? self.post_match == other.post_match : $b)) ? self.begin == other.begin : $a);
    }, $MatchData_$eq_eq$19.$$arity = 1);
    Opal.alias(self, "eql?", "==");
    
    Opal.def(self, '$begin', $MatchData_begin$20 = function $$begin(n) {
      var self = this;

      
      if (n !== 0) {
        self.$raise($$($nesting, 'ArgumentError'), "MatchData#begin only supports 0th element")
      }
      return self.begin;
    
    }, $MatchData_begin$20.$$arity = 1);
    
    Opal.def(self, '$end', $MatchData_end$21 = function $$end(n) {
      var self = this;

      
      if (n !== 0) {
        self.$raise($$($nesting, 'ArgumentError'), "MatchData#end only supports 0th element")
      }
      return self.begin + self.matches[n].length;
    
    }, $MatchData_end$21.$$arity = 1);
    
    Opal.def(self, '$captures', $MatchData_captures$22 = function $$captures() {
      var self = this;

      return self.matches.slice(1)
    }, $MatchData_captures$22.$$arity = 0);
    
    Opal.def(self, '$inspect', $MatchData_inspect$23 = function $$inspect() {
      var self = this;

      
      var str = "#<MatchData " + (self.matches[0]).$inspect();

      for (var i = 1, length = self.matches.length; i < length; i++) {
        str += " " + i + ":" + (self.matches[i]).$inspect();
      }

      return str + ">";
    
    }, $MatchData_inspect$23.$$arity = 0);
    
    Opal.def(self, '$length', $MatchData_length$24 = function $$length() {
      var self = this;

      return self.matches.length
    }, $MatchData_length$24.$$arity = 0);
    Opal.alias(self, "size", "length");
    
    Opal.def(self, '$to_a', $MatchData_to_a$25 = function $$to_a() {
      var self = this;

      return self.matches
    }, $MatchData_to_a$25.$$arity = 0);
    
    Opal.def(self, '$to_s', $MatchData_to_s$26 = function $$to_s() {
      var self = this;

      return self.matches[0]
    }, $MatchData_to_s$26.$$arity = 0);
    return (Opal.def(self, '$values_at', $MatchData_values_at$27 = function $$values_at($a) {
      var $post_args, args, self = this;

      
      
      $post_args = Opal.slice.call(arguments, 0, arguments.length);
      
      args = $post_args;;
      
      var i, a, index, values = [];

      for (i = 0; i < args.length; i++) {

        if (args[i].$$is_range) {
          a = (args[i]).$to_a();
          a.unshift(i, 1);
          Array.prototype.splice.apply(args, a);
        }

        index = $$($nesting, 'Opal')['$coerce_to!'](args[i], $$($nesting, 'Integer'), "to_int");

        if (index < 0) {
          index += self.matches.length;
          if (index < 0) {
            values.push(nil);
            continue;
          }
        }

        values.push(self.matches[index]);
      }

      return values;
    ;
    }, $MatchData_values_at$27.$$arity = -1), nil) && 'values_at';
  })($nesting[0], null, $nesting);
};

/* Generated by Opal 1.0.0 */
Opal.modules["corelib/string"] = function(Opal) {
  function $rb_divide(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs / rhs : lhs['$/'](rhs);
  }
  function $rb_plus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs + rhs : lhs['$+'](rhs);
  }
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.$$$, $$ = Opal.$$, $coerce_to = Opal.coerce_to, $respond_to = Opal.respond_to, $klass = Opal.klass, $truthy = Opal.truthy, $send = Opal.send, $gvars = Opal.gvars;

  Opal.add_stubs(['$require', '$include', '$coerce_to?', '$raise', '$===', '$format', '$to_s', '$respond_to?', '$to_str', '$<=>', '$==', '$=~', '$new', '$force_encoding', '$casecmp', '$empty?', '$ljust', '$ceil', '$/', '$+', '$rjust', '$floor', '$to_a', '$each_char', '$to_proc', '$coerce_to!', '$copy_singleton_methods', '$initialize_clone', '$initialize_dup', '$enum_for', '$size', '$chomp', '$[]', '$to_i', '$each_line', '$encoding', '$class', '$match', '$match?', '$captures', '$proc', '$succ', '$escape']);
  
  self.$require("corelib/comparable");
  self.$require("corelib/regexp");
  (function($base, $super, $parent_nesting) {
    var self = $klass($base, $super, 'String');

    var $nesting = [self].concat($parent_nesting), $String___id__$1, $String_try_convert$2, $String_new$3, $String_initialize$4, $String_$percent$5, $String_$$6, $String_$plus$7, $String_$lt_eq_gt$8, $String_$eq_eq$9, $String_$eq_tilde$10, $String_$$$11, $String_b$12, $String_capitalize$13, $String_casecmp$14, $String_casecmp$ques$15, $String_center$16, $String_chars$17, $String_chomp$18, $String_chop$19, $String_chr$20, $String_clone$21, $String_dup$22, $String_count$23, $String_delete$24, $String_delete_prefix$25, $String_delete_suffix$26, $String_downcase$27, $String_each_char$28, $String_each_line$30, $String_empty$ques$31, $String_end_with$ques$32, $String_gsub$33, $String_hash$34, $String_hex$35, $String_include$ques$36, $String_index$37, $String_inspect$38, $String_intern$39, $String_lines$40, $String_length$41, $String_ljust$42, $String_lstrip$43, $String_ascii_only$ques$44, $String_match$45, $String_match$ques$46, $String_next$47, $String_oct$48, $String_ord$49, $String_partition$50, $String_reverse$51, $String_rindex$52, $String_rjust$53, $String_rpartition$54, $String_rstrip$55, $String_scan$56, $String_split$57, $String_squeeze$58, $String_start_with$ques$59, $String_strip$60, $String_sub$61, $String_sum$62, $String_swapcase$63, $String_to_f$64, $String_to_i$65, $String_to_proc$66, $String_to_s$68, $String_tr$69, $String_tr_s$70, $String_upcase$71, $String_upto$72, $String_instance_variables$73, $String__load$74, $String_unicode_normalize$75, $String_unicode_normalized$ques$76, $String_unpack$77, $String_unpack1$78;

    
    self.$include($$($nesting, 'Comparable'));
    
    Opal.defineProperty(self.$$prototype, '$$is_string', true);

    Opal.defineProperty(self.$$prototype, '$$cast', function(string) {
      var klass = this.$$class;
      if (klass.$$constructor === String) {
        return string;
      } else {
        return new klass.$$constructor(string);
      }
    });
  ;
    
    Opal.def(self, '$__id__', $String___id__$1 = function $$__id__() {
      var self = this;

      return self.toString();
    }, $String___id__$1.$$arity = 0);
    Opal.alias(self, "object_id", "__id__");
    Opal.defs(self, '$try_convert', $String_try_convert$2 = function $$try_convert(what) {
      var self = this;

      return $$($nesting, 'Opal')['$coerce_to?'](what, $$($nesting, 'String'), "to_str")
    }, $String_try_convert$2.$$arity = 1);
    Opal.defs(self, '$new', $String_new$3 = function(str) {
      var self = this;

      
      
      if (str == null) {
        str = "";
      };
      str = $coerce_to(str, $$($nesting, 'String'), 'to_str');
      return new self.$$constructor(str);;
    }, $String_new$3.$$arity = -1);
    
    Opal.def(self, '$initialize', $String_initialize$4 = function $$initialize(str) {
      var self = this;

      
      ;
      
      if (str === undefined) {
        return self;
      }
    ;
      return self.$raise($$($nesting, 'NotImplementedError'), "Mutable strings are not supported in Opal.");
    }, $String_initialize$4.$$arity = -1);
    
    Opal.def(self, '$%', $String_$percent$5 = function(data) {
      var self = this;

      if ($truthy($$($nesting, 'Array')['$==='](data))) {
        return $send(self, 'format', [self].concat(Opal.to_a(data)))
      } else {
        return self.$format(self, data)
      }
    }, $String_$percent$5.$$arity = 1);
    
    Opal.def(self, '$*', $String_$$6 = function(count) {
      var self = this;

      
      count = $coerce_to(count, $$($nesting, 'Integer'), 'to_int');

      if (count < 0) {
        self.$raise($$($nesting, 'ArgumentError'), "negative argument")
      }

      if (count === 0) {
        return self.$$cast('');
      }

      var result = '',
          string = self.toString();

      // All credit for the bit-twiddling magic code below goes to Mozilla
      // polyfill implementation of String.prototype.repeat() posted here:
      // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/repeat

      if (string.length * count >= 1 << 28) {
        self.$raise($$($nesting, 'RangeError'), "multiply count must not overflow maximum string size")
      }

      for (;;) {
        if ((count & 1) === 1) {
          result += string;
        }
        count >>>= 1;
        if (count === 0) {
          break;
        }
        string += string;
      }

      return self.$$cast(result);
    
    }, $String_$$6.$$arity = 1);
    
    Opal.def(self, '$+', $String_$plus$7 = function(other) {
      var self = this;

      
      other = $coerce_to(other, $$($nesting, 'String'), 'to_str');
      return self + other.$to_s();
    }, $String_$plus$7.$$arity = 1);
    
    Opal.def(self, '$<=>', $String_$lt_eq_gt$8 = function(other) {
      var self = this;

      if ($truthy(other['$respond_to?']("to_str"))) {
        
        other = other.$to_str().$to_s();
        return self > other ? 1 : (self < other ? -1 : 0);;
      } else {
        
        var cmp = other['$<=>'](self);

        if (cmp === nil) {
          return nil;
        }
        else {
          return cmp > 0 ? -1 : (cmp < 0 ? 1 : 0);
        }
      
      }
    }, $String_$lt_eq_gt$8.$$arity = 1);
    
    Opal.def(self, '$==', $String_$eq_eq$9 = function(other) {
      var self = this;

      
      if (other.$$is_string) {
        return self.toString() === other.toString();
      }
      if ($respond_to(other, '$to_str')) {
        return other['$=='](self);
      }
      return false;
    
    }, $String_$eq_eq$9.$$arity = 1);
    Opal.alias(self, "eql?", "==");
    Opal.alias(self, "===", "==");
    
    Opal.def(self, '$=~', $String_$eq_tilde$10 = function(other) {
      var self = this;

      
      if (other.$$is_string) {
        self.$raise($$($nesting, 'TypeError'), "type mismatch: String given");
      }

      return other['$=~'](self);
    
    }, $String_$eq_tilde$10.$$arity = 1);
    
    Opal.def(self, '$[]', $String_$$$11 = function(index, length) {
      var self = this;

      
      ;
      
      var size = self.length, exclude;

      if (index.$$is_range) {
        exclude = index.excl;
        length  = $coerce_to(index.end, $$($nesting, 'Integer'), 'to_int');
        index   = $coerce_to(index.begin, $$($nesting, 'Integer'), 'to_int');

        if (Math.abs(index) > size) {
          return nil;
        }

        if (index < 0) {
          index += size;
        }

        if (length < 0) {
          length += size;
        }

        if (!exclude) {
          length += 1;
        }

        length = length - index;

        if (length < 0) {
          length = 0;
        }

        return self.$$cast(self.substr(index, length));
      }


      if (index.$$is_string) {
        if (length != null) {
          self.$raise($$($nesting, 'TypeError'))
        }
        return self.indexOf(index) !== -1 ? self.$$cast(index) : nil;
      }


      if (index.$$is_regexp) {
        var match = self.match(index);

        if (match === null) {
          ($gvars["~"] = nil)
          return nil;
        }

        ($gvars["~"] = $$($nesting, 'MatchData').$new(index, match))

        if (length == null) {
          return self.$$cast(match[0]);
        }

        length = $coerce_to(length, $$($nesting, 'Integer'), 'to_int');

        if (length < 0 && -length < match.length) {
          return self.$$cast(match[length += match.length]);
        }

        if (length >= 0 && length < match.length) {
          return self.$$cast(match[length]);
        }

        return nil;
      }


      index = $coerce_to(index, $$($nesting, 'Integer'), 'to_int');

      if (index < 0) {
        index += size;
      }

      if (length == null) {
        if (index >= size || index < 0) {
          return nil;
        }
        return self.$$cast(self.substr(index, 1));
      }

      length = $coerce_to(length, $$($nesting, 'Integer'), 'to_int');

      if (length < 0) {
        return nil;
      }

      if (index > size || index < 0) {
        return nil;
      }

      return self.$$cast(self.substr(index, length));
    ;
    }, $String_$$$11.$$arity = -2);
    Opal.alias(self, "byteslice", "[]");
    
    Opal.def(self, '$b', $String_b$12 = function $$b() {
      var self = this;

      return self.$force_encoding("binary")
    }, $String_b$12.$$arity = 0);
    
    Opal.def(self, '$capitalize', $String_capitalize$13 = function $$capitalize() {
      var self = this;

      return self.$$cast(self.charAt(0).toUpperCase() + self.substr(1).toLowerCase());
    }, $String_capitalize$13.$$arity = 0);
    
    Opal.def(self, '$casecmp', $String_casecmp$14 = function $$casecmp(other) {
      var self = this;

      
      if ($truthy(other['$respond_to?']("to_str"))) {
      } else {
        return nil
      };
      other = ($coerce_to(other, $$($nesting, 'String'), 'to_str')).$to_s();
      
      var ascii_only = /^[\x00-\x7F]*$/;
      if (ascii_only.test(self) && ascii_only.test(other)) {
        self = self.toLowerCase();
        other = other.toLowerCase();
      }
    ;
      return self['$<=>'](other);
    }, $String_casecmp$14.$$arity = 1);
    
    Opal.def(self, '$casecmp?', $String_casecmp$ques$15 = function(other) {
      var self = this;

      
      var cmp = self.$casecmp(other);
      if (cmp === nil) {
        return nil;
      } else {
        return cmp === 0;
      }
    
    }, $String_casecmp$ques$15.$$arity = 1);
    
    Opal.def(self, '$center', $String_center$16 = function $$center(width, padstr) {
      var self = this;

      
      
      if (padstr == null) {
        padstr = " ";
      };
      width = $coerce_to(width, $$($nesting, 'Integer'), 'to_int');
      padstr = ($coerce_to(padstr, $$($nesting, 'String'), 'to_str')).$to_s();
      if ($truthy(padstr['$empty?']())) {
        self.$raise($$($nesting, 'ArgumentError'), "zero width padding")};
      if ($truthy(width <= self.length)) {
        return self};
      
      var ljustified = self.$ljust($rb_divide($rb_plus(width, self.length), 2).$ceil(), padstr),
          rjustified = self.$rjust($rb_divide($rb_plus(width, self.length), 2).$floor(), padstr);

      return self.$$cast(rjustified + ljustified.slice(self.length));
    ;
    }, $String_center$16.$$arity = -2);
    
    Opal.def(self, '$chars', $String_chars$17 = function $$chars() {
      var $iter = $String_chars$17.$$p, block = $iter || nil, self = this;

      if ($iter) $String_chars$17.$$p = null;
      
      
      if ($iter) $String_chars$17.$$p = null;;
      if ($truthy(block)) {
      } else {
        return self.$each_char().$to_a()
      };
      return $send(self, 'each_char', [], block.$to_proc());
    }, $String_chars$17.$$arity = 0);
    
    Opal.def(self, '$chomp', $String_chomp$18 = function $$chomp(separator) {
      var self = this;
      if ($gvars["/"] == null) $gvars["/"] = nil;

      
      
      if (separator == null) {
        separator = $gvars["/"];
      };
      if ($truthy(separator === nil || self.length === 0)) {
        return self};
      separator = $$($nesting, 'Opal')['$coerce_to!'](separator, $$($nesting, 'String'), "to_str").$to_s();
      
      var result;

      if (separator === "\n") {
        result = self.replace(/\r?\n?$/, '');
      }
      else if (separator === "") {
        result = self.replace(/(\r?\n)+$/, '');
      }
      else if (self.length >= separator.length) {
        var tail = self.substr(self.length - separator.length, separator.length);

        if (tail === separator) {
          result = self.substr(0, self.length - separator.length);
        }
      }

      if (result != null) {
        return self.$$cast(result);
      }
    ;
      return self;
    }, $String_chomp$18.$$arity = -1);
    
    Opal.def(self, '$chop', $String_chop$19 = function $$chop() {
      var self = this;

      
      var length = self.length, result;

      if (length <= 1) {
        result = "";
      } else if (self.charAt(length - 1) === "\n" && self.charAt(length - 2) === "\r") {
        result = self.substr(0, length - 2);
      } else {
        result = self.substr(0, length - 1);
      }

      return self.$$cast(result);
    
    }, $String_chop$19.$$arity = 0);
    
    Opal.def(self, '$chr', $String_chr$20 = function $$chr() {
      var self = this;

      return self.charAt(0);
    }, $String_chr$20.$$arity = 0);
    
    Opal.def(self, '$clone', $String_clone$21 = function $$clone() {
      var self = this, copy = nil;

      
      copy = new String(self);
      copy.$copy_singleton_methods(self);
      copy.$initialize_clone(self);
      return copy;
    }, $String_clone$21.$$arity = 0);
    
    Opal.def(self, '$dup', $String_dup$22 = function $$dup() {
      var self = this, copy = nil;

      
      copy = new String(self);
      copy.$initialize_dup(self);
      return copy;
    }, $String_dup$22.$$arity = 0);
    
    Opal.def(self, '$count', $String_count$23 = function $$count($a) {
      var $post_args, sets, self = this;

      
      
      $post_args = Opal.slice.call(arguments, 0, arguments.length);
      
      sets = $post_args;;
      
      if (sets.length === 0) {
        self.$raise($$($nesting, 'ArgumentError'), "ArgumentError: wrong number of arguments (0 for 1+)")
      }
      var char_class = char_class_from_char_sets(sets);
      if (char_class === null) {
        return 0;
      }
      return self.length - self.replace(new RegExp(char_class, 'g'), '').length;
    ;
    }, $String_count$23.$$arity = -1);
    
    Opal.def(self, '$delete', $String_delete$24 = function($a) {
      var $post_args, sets, self = this;

      
      
      $post_args = Opal.slice.call(arguments, 0, arguments.length);
      
      sets = $post_args;;
      
      if (sets.length === 0) {
        self.$raise($$($nesting, 'ArgumentError'), "ArgumentError: wrong number of arguments (0 for 1+)")
      }
      var char_class = char_class_from_char_sets(sets);
      if (char_class === null) {
        return self;
      }
      return self.$$cast(self.replace(new RegExp(char_class, 'g'), ''));
    ;
    }, $String_delete$24.$$arity = -1);
    
    Opal.def(self, '$delete_prefix', $String_delete_prefix$25 = function $$delete_prefix(prefix) {
      var self = this;

      
      if (!prefix.$$is_string) {
        prefix = $coerce_to(prefix, $$($nesting, 'String'), 'to_str');
      }

      if (self.slice(0, prefix.length) === prefix) {
        return self.$$cast(self.slice(prefix.length));
      } else {
        return self;
      }
    
    }, $String_delete_prefix$25.$$arity = 1);
    
    Opal.def(self, '$delete_suffix', $String_delete_suffix$26 = function $$delete_suffix(suffix) {
      var self = this;

      
      if (!suffix.$$is_string) {
        suffix = $coerce_to(suffix, $$($nesting, 'String'), 'to_str');
      }

      if (self.slice(self.length - suffix.length) === suffix) {
        return self.$$cast(self.slice(0, self.length - suffix.length));
      } else {
        return self;
      }
    
    }, $String_delete_suffix$26.$$arity = 1);
    
    Opal.def(self, '$downcase', $String_downcase$27 = function $$downcase() {
      var self = this;

      return self.$$cast(self.toLowerCase());
    }, $String_downcase$27.$$arity = 0);
    
    Opal.def(self, '$each_char', $String_each_char$28 = function $$each_char() {
      var $iter = $String_each_char$28.$$p, block = $iter || nil, $$29, self = this;

      if ($iter) $String_each_char$28.$$p = null;
      
      
      if ($iter) $String_each_char$28.$$p = null;;
      if ((block !== nil)) {
      } else {
        return $send(self, 'enum_for', ["each_char"], ($$29 = function(){var self = $$29.$$s == null ? this : $$29.$$s;

        return self.$size()}, $$29.$$s = self, $$29.$$arity = 0, $$29))
      };
      
      for (var i = 0, length = self.length; i < length; i++) {
        Opal.yield1(block, self.charAt(i));
      }
    ;
      return self;
    }, $String_each_char$28.$$arity = 0);
    
    Opal.def(self, '$each_line', $String_each_line$30 = function $$each_line(separator) {
      var $iter = $String_each_line$30.$$p, block = $iter || nil, self = this;
      if ($gvars["/"] == null) $gvars["/"] = nil;

      if ($iter) $String_each_line$30.$$p = null;
      
      
      if ($iter) $String_each_line$30.$$p = null;;
      
      if (separator == null) {
        separator = $gvars["/"];
      };
      if ((block !== nil)) {
      } else {
        return self.$enum_for("each_line", separator)
      };
      
      if (separator === nil) {
        Opal.yield1(block, self);

        return self;
      }

      separator = $coerce_to(separator, $$($nesting, 'String'), 'to_str')

      var a, i, n, length, chomped, trailing, splitted;

      if (separator.length === 0) {
        for (a = self.split(/(\n{2,})/), i = 0, n = a.length; i < n; i += 2) {
          if (a[i] || a[i + 1]) {
            var value = (a[i] || "") + (a[i + 1] || "");
            Opal.yield1(block, self.$$cast(value));
          }
        }

        return self;
      }

      chomped  = self.$chomp(separator);
      trailing = self.length != chomped.length;
      splitted = chomped.split(separator);

      for (i = 0, length = splitted.length; i < length; i++) {
        if (i < length - 1 || trailing) {
          Opal.yield1(block, self.$$cast(splitted[i] + separator));
        }
        else {
          Opal.yield1(block, self.$$cast(splitted[i]));
        }
      }
    ;
      return self;
    }, $String_each_line$30.$$arity = -1);
    
    Opal.def(self, '$empty?', $String_empty$ques$31 = function() {
      var self = this;

      return self.length === 0;
    }, $String_empty$ques$31.$$arity = 0);
    
    Opal.def(self, '$end_with?', $String_end_with$ques$32 = function($a) {
      var $post_args, suffixes, self = this;

      
      
      $post_args = Opal.slice.call(arguments, 0, arguments.length);
      
      suffixes = $post_args;;
      
      for (var i = 0, length = suffixes.length; i < length; i++) {
        var suffix = $coerce_to(suffixes[i], $$($nesting, 'String'), 'to_str').$to_s();

        if (self.length >= suffix.length &&
            self.substr(self.length - suffix.length, suffix.length) == suffix) {
          return true;
        }
      }
    ;
      return false;
    }, $String_end_with$ques$32.$$arity = -1);
    Opal.alias(self, "equal?", "===");
    
    Opal.def(self, '$gsub', $String_gsub$33 = function $$gsub(pattern, replacement) {
      var $iter = $String_gsub$33.$$p, block = $iter || nil, self = this;

      if ($iter) $String_gsub$33.$$p = null;
      
      
      if ($iter) $String_gsub$33.$$p = null;;
      ;
      
      if (replacement === undefined && block === nil) {
        return self.$enum_for("gsub", pattern);
      }

      var result = '', match_data = nil, index = 0, match, _replacement;

      if (pattern.$$is_regexp) {
        pattern = Opal.global_multiline_regexp(pattern);
      } else {
        pattern = $coerce_to(pattern, $$($nesting, 'String'), 'to_str');
        pattern = new RegExp(pattern.replace(/[.*+?^${}()|[\]\\]/g, '\\$&'), 'gm');
      }

      var lastIndex;
      while (true) {
        match = pattern.exec(self);

        if (match === null) {
          ($gvars["~"] = nil)
          result += self.slice(index);
          break;
        }

        match_data = $$($nesting, 'MatchData').$new(pattern, match);

        if (replacement === undefined) {
          lastIndex = pattern.lastIndex;
          _replacement = block(match[0]);
          pattern.lastIndex = lastIndex; // save and restore lastIndex
        }
        else if (replacement.$$is_hash) {
          _replacement = (replacement)['$[]'](match[0]).$to_s();
        }
        else {
          if (!replacement.$$is_string) {
            replacement = $coerce_to(replacement, $$($nesting, 'String'), 'to_str');
          }
          _replacement = replacement.replace(/([\\]+)([0-9+&`'])/g, function (original, slashes, command) {
            if (slashes.length % 2 === 0) {
              return original;
            }
            switch (command) {
            case "+":
              for (var i = match.length - 1; i > 0; i--) {
                if (match[i] !== undefined) {
                  return slashes.slice(1) + match[i];
                }
              }
              return '';
            case "&": return slashes.slice(1) + match[0];
            case "`": return slashes.slice(1) + self.slice(0, match.index);
            case "'": return slashes.slice(1) + self.slice(match.index + match[0].length);
            default:  return slashes.slice(1) + (match[command] || '');
            }
          }).replace(/\\\\/g, '\\');
        }

        if (pattern.lastIndex === match.index) {
          result += (_replacement + self.slice(index, match.index + 1))
          pattern.lastIndex += 1;
        }
        else {
          result += (self.slice(index, match.index) + _replacement)
        }
        index = pattern.lastIndex;
      }

      ($gvars["~"] = match_data)
      return self.$$cast(result);
    ;
    }, $String_gsub$33.$$arity = -2);
    
    Opal.def(self, '$hash', $String_hash$34 = function $$hash() {
      var self = this;

      return self.toString();
    }, $String_hash$34.$$arity = 0);
    
    Opal.def(self, '$hex', $String_hex$35 = function $$hex() {
      var self = this;

      return self.$to_i(16)
    }, $String_hex$35.$$arity = 0);
    
    Opal.def(self, '$include?', $String_include$ques$36 = function(other) {
      var self = this;

      
      if (!other.$$is_string) {
        other = $coerce_to(other, $$($nesting, 'String'), 'to_str');
      }
      return self.indexOf(other) !== -1;
    
    }, $String_include$ques$36.$$arity = 1);
    
    Opal.def(self, '$index', $String_index$37 = function $$index(search, offset) {
      var self = this;

      
      ;
      
      var index,
          match,
          regex;

      if (offset === undefined) {
        offset = 0;
      } else {
        offset = $coerce_to(offset, $$($nesting, 'Integer'), 'to_int');
        if (offset < 0) {
          offset += self.length;
          if (offset < 0) {
            return nil;
          }
        }
      }

      if (search.$$is_regexp) {
        regex = Opal.global_multiline_regexp(search);
        while (true) {
          match = regex.exec(self);
          if (match === null) {
            ($gvars["~"] = nil);
            index = -1;
            break;
          }
          if (match.index >= offset) {
            ($gvars["~"] = $$($nesting, 'MatchData').$new(regex, match))
            index = match.index;
            break;
          }
          regex.lastIndex = match.index + 1;
        }
      } else {
        search = $coerce_to(search, $$($nesting, 'String'), 'to_str');
        if (search.length === 0 && offset > self.length) {
          index = -1;
        } else {
          index = self.indexOf(search, offset);
        }
      }

      return index === -1 ? nil : index;
    ;
    }, $String_index$37.$$arity = -2);
    
    Opal.def(self, '$inspect', $String_inspect$38 = function $$inspect() {
      var self = this;

      
      var escapable = /[\\\"\x00-\x1f\u007F-\u009F\u0600-\u0604\u070f\u17b4\u17b5\u200c-\u200f\u2028-\u202f\u2060-\u206f\ufeff\ufff0-\uffff]/g,
          meta = {
            '\u0007': '\\a',
            '\u001b': '\\e',
            '\b': '\\b',
            '\t': '\\t',
            '\n': '\\n',
            '\f': '\\f',
            '\r': '\\r',
            '\v': '\\v',
            '"' : '\\"',
            '\\': '\\\\'
          },
          escaped = self.replace(escapable, function (chr) {
            return meta[chr] || '\\u' + ('0000' + chr.charCodeAt(0).toString(16).toUpperCase()).slice(-4);
          });
      return '"' + escaped.replace(/\#[\$\@\{]/g, '\\$&') + '"';
    
    }, $String_inspect$38.$$arity = 0);
    
    Opal.def(self, '$intern', $String_intern$39 = function $$intern() {
      var self = this;

      return self.toString();
    }, $String_intern$39.$$arity = 0);
    
    Opal.def(self, '$lines', $String_lines$40 = function $$lines(separator) {
      var $iter = $String_lines$40.$$p, block = $iter || nil, self = this, e = nil;
      if ($gvars["/"] == null) $gvars["/"] = nil;

      if ($iter) $String_lines$40.$$p = null;
      
      
      if ($iter) $String_lines$40.$$p = null;;
      
      if (separator == null) {
        separator = $gvars["/"];
      };
      e = $send(self, 'each_line', [separator], block.$to_proc());
      if ($truthy(block)) {
        return self
      } else {
        return e.$to_a()
      };
    }, $String_lines$40.$$arity = -1);
    
    Opal.def(self, '$length', $String_length$41 = function $$length() {
      var self = this;

      return self.length;
    }, $String_length$41.$$arity = 0);
    
    Opal.def(self, '$ljust', $String_ljust$42 = function $$ljust(width, padstr) {
      var self = this;

      
      
      if (padstr == null) {
        padstr = " ";
      };
      width = $coerce_to(width, $$($nesting, 'Integer'), 'to_int');
      padstr = ($coerce_to(padstr, $$($nesting, 'String'), 'to_str')).$to_s();
      if ($truthy(padstr['$empty?']())) {
        self.$raise($$($nesting, 'ArgumentError'), "zero width padding")};
      if ($truthy(width <= self.length)) {
        return self};
      
      var index  = -1,
          result = "";

      width -= self.length;

      while (++index < width) {
        result += padstr;
      }

      return self.$$cast(self + result.slice(0, width));
    ;
    }, $String_ljust$42.$$arity = -2);
    
    Opal.def(self, '$lstrip', $String_lstrip$43 = function $$lstrip() {
      var self = this;

      return self.replace(/^\s*/, '');
    }, $String_lstrip$43.$$arity = 0);
    
    Opal.def(self, '$ascii_only?', $String_ascii_only$ques$44 = function() {
      var self = this;

      
      if (self.$encoding()['$==']($$$($$($nesting, 'Encoding'), 'UTF_16BE'))) {
        return false};
      return /^[\x00-\x7F]*$/.test(self);;
    }, $String_ascii_only$ques$44.$$arity = 0);
    
    Opal.def(self, '$match', $String_match$45 = function $$match(pattern, pos) {
      var $iter = $String_match$45.$$p, block = $iter || nil, $a, self = this;

      if ($iter) $String_match$45.$$p = null;
      
      
      if ($iter) $String_match$45.$$p = null;;
      ;
      if ($truthy(($truthy($a = $$($nesting, 'String')['$==='](pattern)) ? $a : pattern['$respond_to?']("to_str")))) {
        pattern = $$($nesting, 'Regexp').$new(pattern.$to_str())};
      if ($truthy($$($nesting, 'Regexp')['$==='](pattern))) {
      } else {
        self.$raise($$($nesting, 'TypeError'), "" + "wrong argument type " + (pattern.$class()) + " (expected Regexp)")
      };
      return $send(pattern, 'match', [self, pos], block.$to_proc());
    }, $String_match$45.$$arity = -2);
    
    Opal.def(self, '$match?', $String_match$ques$46 = function(pattern, pos) {
      var $a, self = this;

      
      ;
      if ($truthy(($truthy($a = $$($nesting, 'String')['$==='](pattern)) ? $a : pattern['$respond_to?']("to_str")))) {
        pattern = $$($nesting, 'Regexp').$new(pattern.$to_str())};
      if ($truthy($$($nesting, 'Regexp')['$==='](pattern))) {
      } else {
        self.$raise($$($nesting, 'TypeError'), "" + "wrong argument type " + (pattern.$class()) + " (expected Regexp)")
      };
      return pattern['$match?'](self, pos);
    }, $String_match$ques$46.$$arity = -2);
    
    Opal.def(self, '$next', $String_next$47 = function $$next() {
      var self = this;

      
      var i = self.length;
      if (i === 0) {
        return self.$$cast('');
      }
      var result = self;
      var first_alphanum_char_index = self.search(/[a-zA-Z0-9]/);
      var carry = false;
      var code;
      while (i--) {
        code = self.charCodeAt(i);
        if ((code >= 48 && code <= 57) ||
          (code >= 65 && code <= 90) ||
          (code >= 97 && code <= 122)) {
          switch (code) {
          case 57:
            carry = true;
            code = 48;
            break;
          case 90:
            carry = true;
            code = 65;
            break;
          case 122:
            carry = true;
            code = 97;
            break;
          default:
            carry = false;
            code += 1;
          }
        } else {
          if (first_alphanum_char_index === -1) {
            if (code === 255) {
              carry = true;
              code = 0;
            } else {
              carry = false;
              code += 1;
            }
          } else {
            carry = true;
          }
        }
        result = result.slice(0, i) + String.fromCharCode(code) + result.slice(i + 1);
        if (carry && (i === 0 || i === first_alphanum_char_index)) {
          switch (code) {
          case 65:
            break;
          case 97:
            break;
          default:
            code += 1;
          }
          if (i === 0) {
            result = String.fromCharCode(code) + result;
          } else {
            result = result.slice(0, i) + String.fromCharCode(code) + result.slice(i);
          }
          carry = false;
        }
        if (!carry) {
          break;
        }
      }
      return self.$$cast(result);
    
    }, $String_next$47.$$arity = 0);
    
    Opal.def(self, '$oct', $String_oct$48 = function $$oct() {
      var self = this;

      
      var result,
          string = self,
          radix = 8;

      if (/^\s*_/.test(string)) {
        return 0;
      }

      string = string.replace(/^(\s*[+-]?)(0[bodx]?)(.+)$/i, function (original, head, flag, tail) {
        switch (tail.charAt(0)) {
        case '+':
        case '-':
          return original;
        case '0':
          if (tail.charAt(1) === 'x' && flag === '0x') {
            return original;
          }
        }
        switch (flag) {
        case '0b':
          radix = 2;
          break;
        case '0':
        case '0o':
          radix = 8;
          break;
        case '0d':
          radix = 10;
          break;
        case '0x':
          radix = 16;
          break;
        }
        return head + tail;
      });

      result = parseInt(string.replace(/_(?!_)/g, ''), radix);
      return isNaN(result) ? 0 : result;
    
    }, $String_oct$48.$$arity = 0);
    
    Opal.def(self, '$ord', $String_ord$49 = function $$ord() {
      var self = this;

      return self.charCodeAt(0);
    }, $String_ord$49.$$arity = 0);
    
    Opal.def(self, '$partition', $String_partition$50 = function $$partition(sep) {
      var self = this;

      
      var i, m;

      if (sep.$$is_regexp) {
        m = sep.exec(self);
        if (m === null) {
          i = -1;
        } else {
          $$($nesting, 'MatchData').$new(sep, m);
          sep = m[0];
          i = m.index;
        }
      } else {
        sep = $coerce_to(sep, $$($nesting, 'String'), 'to_str');
        i = self.indexOf(sep);
      }

      if (i === -1) {
        return [self, '', ''];
      }

      return [
        self.slice(0, i),
        self.slice(i, i + sep.length),
        self.slice(i + sep.length)
      ];
    
    }, $String_partition$50.$$arity = 1);
    
    Opal.def(self, '$reverse', $String_reverse$51 = function $$reverse() {
      var self = this;

      return self.split('').reverse().join('');
    }, $String_reverse$51.$$arity = 0);
    
    Opal.def(self, '$rindex', $String_rindex$52 = function $$rindex(search, offset) {
      var self = this;

      
      ;
      
      var i, m, r, _m;

      if (offset === undefined) {
        offset = self.length;
      } else {
        offset = $coerce_to(offset, $$($nesting, 'Integer'), 'to_int');
        if (offset < 0) {
          offset += self.length;
          if (offset < 0) {
            return nil;
          }
        }
      }

      if (search.$$is_regexp) {
        m = null;
        r = Opal.global_multiline_regexp(search);
        while (true) {
          _m = r.exec(self);
          if (_m === null || _m.index > offset) {
            break;
          }
          m = _m;
          r.lastIndex = m.index + 1;
        }
        if (m === null) {
          ($gvars["~"] = nil)
          i = -1;
        } else {
          $$($nesting, 'MatchData').$new(r, m);
          i = m.index;
        }
      } else {
        search = $coerce_to(search, $$($nesting, 'String'), 'to_str');
        i = self.lastIndexOf(search, offset);
      }

      return i === -1 ? nil : i;
    ;
    }, $String_rindex$52.$$arity = -2);
    
    Opal.def(self, '$rjust', $String_rjust$53 = function $$rjust(width, padstr) {
      var self = this;

      
      
      if (padstr == null) {
        padstr = " ";
      };
      width = $coerce_to(width, $$($nesting, 'Integer'), 'to_int');
      padstr = ($coerce_to(padstr, $$($nesting, 'String'), 'to_str')).$to_s();
      if ($truthy(padstr['$empty?']())) {
        self.$raise($$($nesting, 'ArgumentError'), "zero width padding")};
      if ($truthy(width <= self.length)) {
        return self};
      
      var chars     = Math.floor(width - self.length),
          patterns  = Math.floor(chars / padstr.length),
          result    = Array(patterns + 1).join(padstr),
          remaining = chars - result.length;

      return self.$$cast(result + padstr.slice(0, remaining) + self);
    ;
    }, $String_rjust$53.$$arity = -2);
    
    Opal.def(self, '$rpartition', $String_rpartition$54 = function $$rpartition(sep) {
      var self = this;

      
      var i, m, r, _m;

      if (sep.$$is_regexp) {
        m = null;
        r = Opal.global_multiline_regexp(sep);

        while (true) {
          _m = r.exec(self);
          if (_m === null) {
            break;
          }
          m = _m;
          r.lastIndex = m.index + 1;
        }

        if (m === null) {
          i = -1;
        } else {
          $$($nesting, 'MatchData').$new(r, m);
          sep = m[0];
          i = m.index;
        }

      } else {
        sep = $coerce_to(sep, $$($nesting, 'String'), 'to_str');
        i = self.lastIndexOf(sep);
      }

      if (i === -1) {
        return ['', '', self];
      }

      return [
        self.slice(0, i),
        self.slice(i, i + sep.length),
        self.slice(i + sep.length)
      ];
    
    }, $String_rpartition$54.$$arity = 1);
    
    Opal.def(self, '$rstrip', $String_rstrip$55 = function $$rstrip() {
      var self = this;

      return self.replace(/[\s\u0000]*$/, '');
    }, $String_rstrip$55.$$arity = 0);
    
    Opal.def(self, '$scan', $String_scan$56 = function $$scan(pattern) {
      var $iter = $String_scan$56.$$p, block = $iter || nil, self = this;

      if ($iter) $String_scan$56.$$p = null;
      
      
      if ($iter) $String_scan$56.$$p = null;;
      
      var result = [],
          match_data = nil,
          match;

      if (pattern.$$is_regexp) {
        pattern = Opal.global_multiline_regexp(pattern);
      } else {
        pattern = $coerce_to(pattern, $$($nesting, 'String'), 'to_str');
        pattern = new RegExp(pattern.replace(/[.*+?^${}()|[\]\\]/g, '\\$&'), 'gm');
      }

      while ((match = pattern.exec(self)) != null) {
        match_data = $$($nesting, 'MatchData').$new(pattern, match);
        if (block === nil) {
          match.length == 1 ? result.push(match[0]) : result.push((match_data).$captures());
        } else {
          match.length == 1 ? block(match[0]) : block.call(self, (match_data).$captures());
        }
        if (pattern.lastIndex === match.index) {
          pattern.lastIndex += 1;
        }
      }

      ($gvars["~"] = match_data)

      return (block !== nil ? self : result);
    ;
    }, $String_scan$56.$$arity = 1);
    Opal.alias(self, "size", "length");
    Opal.alias(self, "slice", "[]");
    
    Opal.def(self, '$split', $String_split$57 = function $$split(pattern, limit) {
      var $a, self = this;
      if ($gvars[";"] == null) $gvars[";"] = nil;

      
      ;
      ;
      
      if (self.length === 0) {
        return [];
      }

      if (limit === undefined) {
        limit = 0;
      } else {
        limit = $$($nesting, 'Opal')['$coerce_to!'](limit, $$($nesting, 'Integer'), "to_int");
        if (limit === 1) {
          return [self];
        }
      }

      if (pattern === undefined || pattern === nil) {
        pattern = ($truthy($a = $gvars[";"]) ? $a : " ");
      }

      var result = [],
          string = self.toString(),
          index = 0,
          match,
          i, ii;

      if (pattern.$$is_regexp) {
        pattern = Opal.global_multiline_regexp(pattern);
      } else {
        pattern = $coerce_to(pattern, $$($nesting, 'String'), 'to_str').$to_s();
        if (pattern === ' ') {
          pattern = /\s+/gm;
          string = string.replace(/^\s+/, '');
        } else {
          pattern = new RegExp(pattern.replace(/[.*+?^${}()|[\]\\]/g, '\\$&'), 'gm');
        }
      }

      result = string.split(pattern);

      if (result.length === 1 && result[0] === string) {
        return [self.$$cast(result[0])];
      }

      while ((i = result.indexOf(undefined)) !== -1) {
        result.splice(i, 1);
      }

      function castResult() {
        for (i = 0; i < result.length; i++) {
          result[i] = self.$$cast(result[i]);
        }
      }

      if (limit === 0) {
        while (result[result.length - 1] === '') {
          result.length -= 1;
        }
        castResult();
        return result;
      }

      match = pattern.exec(string);

      if (limit < 0) {
        if (match !== null && match[0] === '' && pattern.source.indexOf('(?=') === -1) {
          for (i = 0, ii = match.length; i < ii; i++) {
            result.push('');
          }
        }
        castResult();
        return result;
      }

      if (match !== null && match[0] === '') {
        result.splice(limit - 1, result.length - 1, result.slice(limit - 1).join(''));
        castResult();
        return result;
      }

      if (limit >= result.length) {
        castResult();
        return result;
      }

      i = 0;
      while (match !== null) {
        i++;
        index = pattern.lastIndex;
        if (i + 1 === limit) {
          break;
        }
        match = pattern.exec(string);
      }
      result.splice(limit - 1, result.length - 1, string.slice(index));
      castResult();
      return result;
    ;
    }, $String_split$57.$$arity = -1);
    
    Opal.def(self, '$squeeze', $String_squeeze$58 = function $$squeeze($a) {
      var $post_args, sets, self = this;

      
      
      $post_args = Opal.slice.call(arguments, 0, arguments.length);
      
      sets = $post_args;;
      
      if (sets.length === 0) {
        return self.$$cast(self.replace(/(.)\1+/g, '$1'));
      }
      var char_class = char_class_from_char_sets(sets);
      if (char_class === null) {
        return self;
      }
      return self.$$cast(self.replace(new RegExp('(' + char_class + ')\\1+', 'g'), '$1'));
    ;
    }, $String_squeeze$58.$$arity = -1);
    
    Opal.def(self, '$start_with?', $String_start_with$ques$59 = function($a) {
      var $post_args, prefixes, self = this;

      
      
      $post_args = Opal.slice.call(arguments, 0, arguments.length);
      
      prefixes = $post_args;;
      
      for (var i = 0, length = prefixes.length; i < length; i++) {
        var prefix = $coerce_to(prefixes[i], $$($nesting, 'String'), 'to_str').$to_s();

        if (self.indexOf(prefix) === 0) {
          return true;
        }
      }

      return false;
    ;
    }, $String_start_with$ques$59.$$arity = -1);
    
    Opal.def(self, '$strip', $String_strip$60 = function $$strip() {
      var self = this;

      return self.replace(/^\s*/, '').replace(/[\s\u0000]*$/, '');
    }, $String_strip$60.$$arity = 0);
    
    Opal.def(self, '$sub', $String_sub$61 = function $$sub(pattern, replacement) {
      var $iter = $String_sub$61.$$p, block = $iter || nil, self = this;

      if ($iter) $String_sub$61.$$p = null;
      
      
      if ($iter) $String_sub$61.$$p = null;;
      ;
      
      if (!pattern.$$is_regexp) {
        pattern = $coerce_to(pattern, $$($nesting, 'String'), 'to_str');
        pattern = new RegExp(pattern.replace(/[.*+?^${}()|[\]\\]/g, '\\$&'));
      }

      var result, match = pattern.exec(self);

      if (match === null) {
        ($gvars["~"] = nil)
        result = self.toString();
      } else {
        $$($nesting, 'MatchData').$new(pattern, match)

        if (replacement === undefined) {

          if (block === nil) {
            self.$raise($$($nesting, 'ArgumentError'), "wrong number of arguments (1 for 2)")
          }
          result = self.slice(0, match.index) + block(match[0]) + self.slice(match.index + match[0].length);

        } else if (replacement.$$is_hash) {

          result = self.slice(0, match.index) + (replacement)['$[]'](match[0]).$to_s() + self.slice(match.index + match[0].length);

        } else {

          replacement = $coerce_to(replacement, $$($nesting, 'String'), 'to_str');

          replacement = replacement.replace(/([\\]+)([0-9+&`'])/g, function (original, slashes, command) {
            if (slashes.length % 2 === 0) {
              return original;
            }
            switch (command) {
            case "+":
              for (var i = match.length - 1; i > 0; i--) {
                if (match[i] !== undefined) {
                  return slashes.slice(1) + match[i];
                }
              }
              return '';
            case "&": return slashes.slice(1) + match[0];
            case "`": return slashes.slice(1) + self.slice(0, match.index);
            case "'": return slashes.slice(1) + self.slice(match.index + match[0].length);
            default:  return slashes.slice(1) + (match[command] || '');
            }
          }).replace(/\\\\/g, '\\');

          result = self.slice(0, match.index) + replacement + self.slice(match.index + match[0].length);
        }
      }

      return self.$$cast(result);
    ;
    }, $String_sub$61.$$arity = -2);
    Opal.alias(self, "succ", "next");
    
    Opal.def(self, '$sum', $String_sum$62 = function $$sum(n) {
      var self = this;

      
      
      if (n == null) {
        n = 16;
      };
      
      n = $coerce_to(n, $$($nesting, 'Integer'), 'to_int');

      var result = 0,
          length = self.length,
          i = 0;

      for (; i < length; i++) {
        result += self.charCodeAt(i);
      }

      if (n <= 0) {
        return result;
      }

      return result & (Math.pow(2, n) - 1);
    ;
    }, $String_sum$62.$$arity = -1);
    
    Opal.def(self, '$swapcase', $String_swapcase$63 = function $$swapcase() {
      var self = this;

      
      var str = self.replace(/([a-z]+)|([A-Z]+)/g, function($0,$1,$2) {
        return $1 ? $0.toUpperCase() : $0.toLowerCase();
      });

      if (self.constructor === String) {
        return str;
      }

      return self.$class().$new(str);
    
    }, $String_swapcase$63.$$arity = 0);
    
    Opal.def(self, '$to_f', $String_to_f$64 = function $$to_f() {
      var self = this;

      
      if (self.charAt(0) === '_') {
        return 0;
      }

      var result = parseFloat(self.replace(/_/g, ''));

      if (isNaN(result) || result == Infinity || result == -Infinity) {
        return 0;
      }
      else {
        return result;
      }
    
    }, $String_to_f$64.$$arity = 0);
    
    Opal.def(self, '$to_i', $String_to_i$65 = function $$to_i(base) {
      var self = this;

      
      
      if (base == null) {
        base = 10;
      };
      
      var result,
          string = self.toLowerCase(),
          radix = $coerce_to(base, $$($nesting, 'Integer'), 'to_int');

      if (radix === 1 || radix < 0 || radix > 36) {
        self.$raise($$($nesting, 'ArgumentError'), "" + "invalid radix " + (radix))
      }

      if (/^\s*_/.test(string)) {
        return 0;
      }

      string = string.replace(/^(\s*[+-]?)(0[bodx]?)(.+)$/, function (original, head, flag, tail) {
        switch (tail.charAt(0)) {
        case '+':
        case '-':
          return original;
        case '0':
          if (tail.charAt(1) === 'x' && flag === '0x' && (radix === 0 || radix === 16)) {
            return original;
          }
        }
        switch (flag) {
        case '0b':
          if (radix === 0 || radix === 2) {
            radix = 2;
            return head + tail;
          }
          break;
        case '0':
        case '0o':
          if (radix === 0 || radix === 8) {
            radix = 8;
            return head + tail;
          }
          break;
        case '0d':
          if (radix === 0 || radix === 10) {
            radix = 10;
            return head + tail;
          }
          break;
        case '0x':
          if (radix === 0 || radix === 16) {
            radix = 16;
            return head + tail;
          }
          break;
        }
        return original
      });

      result = parseInt(string.replace(/_(?!_)/g, ''), radix);
      return isNaN(result) ? 0 : result;
    ;
    }, $String_to_i$65.$$arity = -1);
    
    Opal.def(self, '$to_proc', $String_to_proc$66 = function $$to_proc() {
      var $$67, $iter = $String_to_proc$66.$$p, $yield = $iter || nil, self = this, method_name = nil;

      if ($iter) $String_to_proc$66.$$p = null;
      
      method_name = $rb_plus("$", self.valueOf());
      return $send(self, 'proc', [], ($$67 = function($a){var self = $$67.$$s == null ? this : $$67.$$s, $iter = $$67.$$p, block = $iter || nil, $post_args, args;

      
        
        if ($iter) $$67.$$p = null;;
        
        $post_args = Opal.slice.call(arguments, 0, arguments.length);
        
        args = $post_args;;
        
        if (args.length === 0) {
          self.$raise($$($nesting, 'ArgumentError'), "no receiver given")
        }

        var recv = args[0];

        if (recv == null) recv = nil;

        var body = recv[method_name];

        if (!body) {
          return recv.$method_missing.apply(recv, args);
        }

        if (typeof block === 'function') {
          body.$$p = block;
        }

        if (args.length === 1) {
          return body.call(recv);
        } else {
          return body.apply(recv, args.slice(1));
        }
      ;}, $$67.$$s = self, $$67.$$arity = -1, $$67));
    }, $String_to_proc$66.$$arity = 0);
    
    Opal.def(self, '$to_s', $String_to_s$68 = function $$to_s() {
      var self = this;

      return self.toString();
    }, $String_to_s$68.$$arity = 0);
    Opal.alias(self, "to_str", "to_s");
    Opal.alias(self, "to_sym", "intern");
    
    Opal.def(self, '$tr', $String_tr$69 = function $$tr(from, to) {
      var self = this;

      
      from = $coerce_to(from, $$($nesting, 'String'), 'to_str').$to_s();
      to = $coerce_to(to, $$($nesting, 'String'), 'to_str').$to_s();

      if (from.length == 0 || from === to) {
        return self;
      }

      var i, in_range, c, ch, start, end, length;
      var subs = {};
      var from_chars = from.split('');
      var from_length = from_chars.length;
      var to_chars = to.split('');
      var to_length = to_chars.length;

      var inverse = false;
      var global_sub = null;
      if (from_chars[0] === '^' && from_chars.length > 1) {
        inverse = true;
        from_chars.shift();
        global_sub = to_chars[to_length - 1]
        from_length -= 1;
      }

      var from_chars_expanded = [];
      var last_from = null;
      in_range = false;
      for (i = 0; i < from_length; i++) {
        ch = from_chars[i];
        if (last_from == null) {
          last_from = ch;
          from_chars_expanded.push(ch);
        }
        else if (ch === '-') {
          if (last_from === '-') {
            from_chars_expanded.push('-');
            from_chars_expanded.push('-');
          }
          else if (i == from_length - 1) {
            from_chars_expanded.push('-');
          }
          else {
            in_range = true;
          }
        }
        else if (in_range) {
          start = last_from.charCodeAt(0);
          end = ch.charCodeAt(0);
          if (start > end) {
            self.$raise($$($nesting, 'ArgumentError'), "" + "invalid range \"" + (String.fromCharCode(start)) + "-" + (String.fromCharCode(end)) + "\" in string transliteration")
          }
          for (c = start + 1; c < end; c++) {
            from_chars_expanded.push(String.fromCharCode(c));
          }
          from_chars_expanded.push(ch);
          in_range = null;
          last_from = null;
        }
        else {
          from_chars_expanded.push(ch);
        }
      }

      from_chars = from_chars_expanded;
      from_length = from_chars.length;

      if (inverse) {
        for (i = 0; i < from_length; i++) {
          subs[from_chars[i]] = true;
        }
      }
      else {
        if (to_length > 0) {
          var to_chars_expanded = [];
          var last_to = null;
          in_range = false;
          for (i = 0; i < to_length; i++) {
            ch = to_chars[i];
            if (last_to == null) {
              last_to = ch;
              to_chars_expanded.push(ch);
            }
            else if (ch === '-') {
              if (last_to === '-') {
                to_chars_expanded.push('-');
                to_chars_expanded.push('-');
              }
              else if (i == to_length - 1) {
                to_chars_expanded.push('-');
              }
              else {
                in_range = true;
              }
            }
            else if (in_range) {
              start = last_to.charCodeAt(0);
              end = ch.charCodeAt(0);
              if (start > end) {
                self.$raise($$($nesting, 'ArgumentError'), "" + "invalid range \"" + (String.fromCharCode(start)) + "-" + (String.fromCharCode(end)) + "\" in string transliteration")
              }
              for (c = start + 1; c < end; c++) {
                to_chars_expanded.push(String.fromCharCode(c));
              }
              to_chars_expanded.push(ch);
              in_range = null;
              last_to = null;
            }
            else {
              to_chars_expanded.push(ch);
            }
          }

          to_chars = to_chars_expanded;
          to_length = to_chars.length;
        }

        var length_diff = from_length - to_length;
        if (length_diff > 0) {
          var pad_char = (to_length > 0 ? to_chars[to_length - 1] : '');
          for (i = 0; i < length_diff; i++) {
            to_chars.push(pad_char);
          }
        }

        for (i = 0; i < from_length; i++) {
          subs[from_chars[i]] = to_chars[i];
        }
      }

      var new_str = ''
      for (i = 0, length = self.length; i < length; i++) {
        ch = self.charAt(i);
        var sub = subs[ch];
        if (inverse) {
          new_str += (sub == null ? global_sub : ch);
        }
        else {
          new_str += (sub != null ? sub : ch);
        }
      }
      return self.$$cast(new_str);
    
    }, $String_tr$69.$$arity = 2);
    
    Opal.def(self, '$tr_s', $String_tr_s$70 = function $$tr_s(from, to) {
      var self = this;

      
      from = $coerce_to(from, $$($nesting, 'String'), 'to_str').$to_s();
      to = $coerce_to(to, $$($nesting, 'String'), 'to_str').$to_s();

      if (from.length == 0) {
        return self;
      }

      var i, in_range, c, ch, start, end, length;
      var subs = {};
      var from_chars = from.split('');
      var from_length = from_chars.length;
      var to_chars = to.split('');
      var to_length = to_chars.length;

      var inverse = false;
      var global_sub = null;
      if (from_chars[0] === '^' && from_chars.length > 1) {
        inverse = true;
        from_chars.shift();
        global_sub = to_chars[to_length - 1]
        from_length -= 1;
      }

      var from_chars_expanded = [];
      var last_from = null;
      in_range = false;
      for (i = 0; i < from_length; i++) {
        ch = from_chars[i];
        if (last_from == null) {
          last_from = ch;
          from_chars_expanded.push(ch);
        }
        else if (ch === '-') {
          if (last_from === '-') {
            from_chars_expanded.push('-');
            from_chars_expanded.push('-');
          }
          else if (i == from_length - 1) {
            from_chars_expanded.push('-');
          }
          else {
            in_range = true;
          }
        }
        else if (in_range) {
          start = last_from.charCodeAt(0);
          end = ch.charCodeAt(0);
          if (start > end) {
            self.$raise($$($nesting, 'ArgumentError'), "" + "invalid range \"" + (String.fromCharCode(start)) + "-" + (String.fromCharCode(end)) + "\" in string transliteration")
          }
          for (c = start + 1; c < end; c++) {
            from_chars_expanded.push(String.fromCharCode(c));
          }
          from_chars_expanded.push(ch);
          in_range = null;
          last_from = null;
        }
        else {
          from_chars_expanded.push(ch);
        }
      }

      from_chars = from_chars_expanded;
      from_length = from_chars.length;

      if (inverse) {
        for (i = 0; i < from_length; i++) {
          subs[from_chars[i]] = true;
        }
      }
      else {
        if (to_length > 0) {
          var to_chars_expanded = [];
          var last_to = null;
          in_range = false;
          for (i = 0; i < to_length; i++) {
            ch = to_chars[i];
            if (last_from == null) {
              last_from = ch;
              to_chars_expanded.push(ch);
            }
            else if (ch === '-') {
              if (last_to === '-') {
                to_chars_expanded.push('-');
                to_chars_expanded.push('-');
              }
              else if (i == to_length - 1) {
                to_chars_expanded.push('-');
              }
              else {
                in_range = true;
              }
            }
            else if (in_range) {
              start = last_from.charCodeAt(0);
              end = ch.charCodeAt(0);
              if (start > end) {
                self.$raise($$($nesting, 'ArgumentError'), "" + "invalid range \"" + (String.fromCharCode(start)) + "-" + (String.fromCharCode(end)) + "\" in string transliteration")
              }
              for (c = start + 1; c < end; c++) {
                to_chars_expanded.push(String.fromCharCode(c));
              }
              to_chars_expanded.push(ch);
              in_range = null;
              last_from = null;
            }
            else {
              to_chars_expanded.push(ch);
            }
          }

          to_chars = to_chars_expanded;
          to_length = to_chars.length;
        }

        var length_diff = from_length - to_length;
        if (length_diff > 0) {
          var pad_char = (to_length > 0 ? to_chars[to_length - 1] : '');
          for (i = 0; i < length_diff; i++) {
            to_chars.push(pad_char);
          }
        }

        for (i = 0; i < from_length; i++) {
          subs[from_chars[i]] = to_chars[i];
        }
      }
      var new_str = ''
      var last_substitute = null
      for (i = 0, length = self.length; i < length; i++) {
        ch = self.charAt(i);
        var sub = subs[ch]
        if (inverse) {
          if (sub == null) {
            if (last_substitute == null) {
              new_str += global_sub;
              last_substitute = true;
            }
          }
          else {
            new_str += ch;
            last_substitute = null;
          }
        }
        else {
          if (sub != null) {
            if (last_substitute == null || last_substitute !== sub) {
              new_str += sub;
              last_substitute = sub;
            }
          }
          else {
            new_str += ch;
            last_substitute = null;
          }
        }
      }
      return self.$$cast(new_str);
    
    }, $String_tr_s$70.$$arity = 2);
    
    Opal.def(self, '$upcase', $String_upcase$71 = function $$upcase() {
      var self = this;

      return self.$$cast(self.toUpperCase());
    }, $String_upcase$71.$$arity = 0);
    
    Opal.def(self, '$upto', $String_upto$72 = function $$upto(stop, excl) {
      var $iter = $String_upto$72.$$p, block = $iter || nil, self = this;

      if ($iter) $String_upto$72.$$p = null;
      
      
      if ($iter) $String_upto$72.$$p = null;;
      
      if (excl == null) {
        excl = false;
      };
      if ((block !== nil)) {
      } else {
        return self.$enum_for("upto", stop, excl)
      };
      
      var a, b, s = self.toString();

      stop = $coerce_to(stop, $$($nesting, 'String'), 'to_str');

      if (s.length === 1 && stop.length === 1) {

        a = s.charCodeAt(0);
        b = stop.charCodeAt(0);

        while (a <= b) {
          if (excl && a === b) {
            break;
          }

          block(String.fromCharCode(a));

          a += 1;
        }

      } else if (parseInt(s, 10).toString() === s && parseInt(stop, 10).toString() === stop) {

        a = parseInt(s, 10);
        b = parseInt(stop, 10);

        while (a <= b) {
          if (excl && a === b) {
            break;
          }

          block(a.toString());

          a += 1;
        }

      } else {

        while (s.length <= stop.length && s <= stop) {
          if (excl && s === stop) {
            break;
          }

          block(s);

          s = (s).$succ();
        }

      }
      return self;
    ;
    }, $String_upto$72.$$arity = -2);
    
    function char_class_from_char_sets(sets) {
      function explode_sequences_in_character_set(set) {
        var result = '',
            i, len = set.length,
            curr_char,
            skip_next_dash,
            char_code_from,
            char_code_upto,
            char_code;
        for (i = 0; i < len; i++) {
          curr_char = set.charAt(i);
          if (curr_char === '-' && i > 0 && i < (len - 1) && !skip_next_dash) {
            char_code_from = set.charCodeAt(i - 1);
            char_code_upto = set.charCodeAt(i + 1);
            if (char_code_from > char_code_upto) {
              self.$raise($$($nesting, 'ArgumentError'), "" + "invalid range \"" + (char_code_from) + "-" + (char_code_upto) + "\" in string transliteration")
            }
            for (char_code = char_code_from + 1; char_code < char_code_upto + 1; char_code++) {
              result += String.fromCharCode(char_code);
            }
            skip_next_dash = true;
            i++;
          } else {
            skip_next_dash = (curr_char === '\\');
            result += curr_char;
          }
        }
        return result;
      }

      function intersection(setA, setB) {
        if (setA.length === 0) {
          return setB;
        }
        var result = '',
            i, len = setA.length,
            chr;
        for (i = 0; i < len; i++) {
          chr = setA.charAt(i);
          if (setB.indexOf(chr) !== -1) {
            result += chr;
          }
        }
        return result;
      }

      var i, len, set, neg, chr, tmp,
          pos_intersection = '',
          neg_intersection = '';

      for (i = 0, len = sets.length; i < len; i++) {
        set = $coerce_to(sets[i], $$($nesting, 'String'), 'to_str');
        neg = (set.charAt(0) === '^' && set.length > 1);
        set = explode_sequences_in_character_set(neg ? set.slice(1) : set);
        if (neg) {
          neg_intersection = intersection(neg_intersection, set);
        } else {
          pos_intersection = intersection(pos_intersection, set);
        }
      }

      if (pos_intersection.length > 0 && neg_intersection.length > 0) {
        tmp = '';
        for (i = 0, len = pos_intersection.length; i < len; i++) {
          chr = pos_intersection.charAt(i);
          if (neg_intersection.indexOf(chr) === -1) {
            tmp += chr;
          }
        }
        pos_intersection = tmp;
        neg_intersection = '';
      }

      if (pos_intersection.length > 0) {
        return '[' + $$($nesting, 'Regexp').$escape(pos_intersection) + ']';
      }

      if (neg_intersection.length > 0) {
        return '[^' + $$($nesting, 'Regexp').$escape(neg_intersection) + ']';
      }

      return null;
    }
  ;
    
    Opal.def(self, '$instance_variables', $String_instance_variables$73 = function $$instance_variables() {
      var self = this;

      return []
    }, $String_instance_variables$73.$$arity = 0);
    Opal.defs(self, '$_load', $String__load$74 = function $$_load($a) {
      var $post_args, args, self = this;

      
      
      $post_args = Opal.slice.call(arguments, 0, arguments.length);
      
      args = $post_args;;
      return $send(self, 'new', Opal.to_a(args));
    }, $String__load$74.$$arity = -1);
    
    Opal.def(self, '$unicode_normalize', $String_unicode_normalize$75 = function $$unicode_normalize(form) {
      var self = this;

      
      ;
      return self.toString();;
    }, $String_unicode_normalize$75.$$arity = -1);
    
    Opal.def(self, '$unicode_normalized?', $String_unicode_normalized$ques$76 = function(form) {
      var self = this;

      
      ;
      return true;
    }, $String_unicode_normalized$ques$76.$$arity = -1);
    
    Opal.def(self, '$unpack', $String_unpack$77 = function $$unpack(format) {
      var self = this;

      return self.$raise("To use String#unpack, you must first require 'corelib/string/unpack'.")
    }, $String_unpack$77.$$arity = 1);
    return (Opal.def(self, '$unpack1', $String_unpack1$78 = function $$unpack1(format) {
      var self = this;

      return self.$raise("To use String#unpack1, you must first require 'corelib/string/unpack'.")
    }, $String_unpack1$78.$$arity = 1), nil) && 'unpack1';
  })($nesting[0], String, $nesting);
  return Opal.const_set($nesting[0], 'Symbol', $$($nesting, 'String'));
};

/* Generated by Opal 1.0.0 */
Opal.modules["corelib/enumerable"] = function(Opal) {
  function $rb_gt(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs > rhs : lhs['$>'](rhs);
  }
  function $rb_times(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs * rhs : lhs['$*'](rhs);
  }
  function $rb_lt(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs < rhs : lhs['$<'](rhs);
  }
  function $rb_plus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs + rhs : lhs['$+'](rhs);
  }
  function $rb_minus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs - rhs : lhs['$-'](rhs);
  }
  function $rb_divide(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs / rhs : lhs['$/'](rhs);
  }
  function $rb_le(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs <= rhs : lhs['$<='](rhs);
  }
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.$$$, $$ = Opal.$$, $falsy = Opal.falsy, $truthy = Opal.truthy, $coerce_to = Opal.coerce_to, $module = Opal.module, $send = Opal.send, $hash2 = Opal.hash2, $lambda = Opal.lambda;

  Opal.add_stubs(['$each', '$public_send', '$destructure', '$to_enum', '$enumerator_size', '$new', '$yield', '$raise', '$slice_when', '$!', '$enum_for', '$flatten', '$map', '$warn', '$proc', '$==', '$nil?', '$respond_to?', '$coerce_to!', '$>', '$*', '$try_convert', '$<', '$+', '$-', '$ceil', '$/', '$size', '$__send__', '$length', '$<=', '$[]', '$push', '$<<', '$[]=', '$===', '$inspect', '$<=>', '$first', '$reverse', '$sort', '$to_proc', '$take', '$sort_by', '$compare', '$call', '$dup', '$to_a', '$sort!', '$map!', '$key?', '$values', '$coerce_to?', '$class', '$zip']);
  return (function($base, $parent_nesting) {
    var self = $module($base, 'Enumerable');

    var $nesting = [self].concat($parent_nesting), $Enumerable_all$ques$1, $Enumerable_any$ques$5, $Enumerable_chunk$9, $Enumerable_chunk_while$12, $Enumerable_collect$14, $Enumerable_collect_concat$16, $Enumerable_count$19, $Enumerable_cycle$23, $Enumerable_detect$25, $Enumerable_drop$27, $Enumerable_drop_while$28, $Enumerable_each_cons$29, $Enumerable_each_entry$31, $Enumerable_each_slice$33, $Enumerable_each_with_index$35, $Enumerable_each_with_object$37, $Enumerable_entries$39, $Enumerable_find_all$40, $Enumerable_find_index$42, $Enumerable_first$45, $Enumerable_grep$48, $Enumerable_grep_v$50, $Enumerable_group_by$52, $Enumerable_include$ques$54, $Enumerable_inject$56, $Enumerable_lazy$57, $Enumerable_enumerator_size$59, $Enumerable_max$60, $Enumerable_max_by$61, $Enumerable_min$63, $Enumerable_min_by$65, $Enumerable_minmax$67, $Enumerable_minmax_by$69, $Enumerable_none$ques$71, $Enumerable_one$ques$75, $Enumerable_partition$79, $Enumerable_reject$81, $Enumerable_reverse_each$83, $Enumerable_slice_before$85, $Enumerable_slice_after$87, $Enumerable_slice_when$90, $Enumerable_sort$92, $Enumerable_sort_by$94, $Enumerable_sum$99, $Enumerable_take$101, $Enumerable_take_while$102, $Enumerable_uniq$104, $Enumerable_to_h$106, $Enumerable_zip$107;

    
    
    function comparableForPattern(value) {
      if (value.length === 0) {
        value = [nil];
      }

      if (value.length > 1) {
        value = [value];
      }

      return value;
    }
  ;
    
    Opal.def(self, '$all?', $Enumerable_all$ques$1 = function(pattern) {try {

      var $iter = $Enumerable_all$ques$1.$$p, block = $iter || nil, $$2, $$3, $$4, self = this;

      if ($iter) $Enumerable_all$ques$1.$$p = null;
      
      
      if ($iter) $Enumerable_all$ques$1.$$p = null;;
      ;
      if ($truthy(pattern !== undefined)) {
        $send(self, 'each', [], ($$2 = function($a){var self = $$2.$$s == null ? this : $$2.$$s, $post_args, value, comparable = nil;

        
          
          $post_args = Opal.slice.call(arguments, 0, arguments.length);
          
          value = $post_args;;
          comparable = comparableForPattern(value);
          if ($truthy($send(pattern, 'public_send', ["==="].concat(Opal.to_a(comparable))))) {
            return nil
          } else {
            Opal.ret(false)
          };}, $$2.$$s = self, $$2.$$arity = -1, $$2))
      } else if ((block !== nil)) {
        $send(self, 'each', [], ($$3 = function($a){var self = $$3.$$s == null ? this : $$3.$$s, $post_args, value;

        
          
          $post_args = Opal.slice.call(arguments, 0, arguments.length);
          
          value = $post_args;;
          if ($truthy(Opal.yieldX(block, Opal.to_a(value)))) {
            return nil
          } else {
            Opal.ret(false)
          };}, $$3.$$s = self, $$3.$$arity = -1, $$3))
      } else {
        $send(self, 'each', [], ($$4 = function($a){var self = $$4.$$s == null ? this : $$4.$$s, $post_args, value;

        
          
          $post_args = Opal.slice.call(arguments, 0, arguments.length);
          
          value = $post_args;;
          if ($truthy($$($nesting, 'Opal').$destructure(value))) {
            return nil
          } else {
            Opal.ret(false)
          };}, $$4.$$s = self, $$4.$$arity = -1, $$4))
      };
      return true;
      } catch ($returner) { if ($returner === Opal.returner) { return $returner.$v } throw $returner; }
    }, $Enumerable_all$ques$1.$$arity = -1);
    
    Opal.def(self, '$any?', $Enumerable_any$ques$5 = function(pattern) {try {

      var $iter = $Enumerable_any$ques$5.$$p, block = $iter || nil, $$6, $$7, $$8, self = this;

      if ($iter) $Enumerable_any$ques$5.$$p = null;
      
      
      if ($iter) $Enumerable_any$ques$5.$$p = null;;
      ;
      if ($truthy(pattern !== undefined)) {
        $send(self, 'each', [], ($$6 = function($a){var self = $$6.$$s == null ? this : $$6.$$s, $post_args, value, comparable = nil;

        
          
          $post_args = Opal.slice.call(arguments, 0, arguments.length);
          
          value = $post_args;;
          comparable = comparableForPattern(value);
          if ($truthy($send(pattern, 'public_send', ["==="].concat(Opal.to_a(comparable))))) {
            Opal.ret(true)
          } else {
            return nil
          };}, $$6.$$s = self, $$6.$$arity = -1, $$6))
      } else if ((block !== nil)) {
        $send(self, 'each', [], ($$7 = function($a){var self = $$7.$$s == null ? this : $$7.$$s, $post_args, value;

        
          
          $post_args = Opal.slice.call(arguments, 0, arguments.length);
          
          value = $post_args;;
          if ($truthy(Opal.yieldX(block, Opal.to_a(value)))) {
            Opal.ret(true)
          } else {
            return nil
          };}, $$7.$$s = self, $$7.$$arity = -1, $$7))
      } else {
        $send(self, 'each', [], ($$8 = function($a){var self = $$8.$$s == null ? this : $$8.$$s, $post_args, value;

        
          
          $post_args = Opal.slice.call(arguments, 0, arguments.length);
          
          value = $post_args;;
          if ($truthy($$($nesting, 'Opal').$destructure(value))) {
            Opal.ret(true)
          } else {
            return nil
          };}, $$8.$$s = self, $$8.$$arity = -1, $$8))
      };
      return false;
      } catch ($returner) { if ($returner === Opal.returner) { return $returner.$v } throw $returner; }
    }, $Enumerable_any$ques$5.$$arity = -1);
    
    Opal.def(self, '$chunk', $Enumerable_chunk$9 = function $$chunk() {
      var $iter = $Enumerable_chunk$9.$$p, block = $iter || nil, $$10, $$11, self = this;

      if ($iter) $Enumerable_chunk$9.$$p = null;
      
      
      if ($iter) $Enumerable_chunk$9.$$p = null;;
      if ((block !== nil)) {
      } else {
        return $send(self, 'to_enum', ["chunk"], ($$10 = function(){var self = $$10.$$s == null ? this : $$10.$$s;

        return self.$enumerator_size()}, $$10.$$s = self, $$10.$$arity = 0, $$10))
      };
      return $send($$$('::', 'Enumerator'), 'new', [], ($$11 = function(yielder){var self = $$11.$$s == null ? this : $$11.$$s;

      
        
        if (yielder == null) {
          yielder = nil;
        };
        
        var previous = nil, accumulate = [];

        function releaseAccumulate() {
          if (accumulate.length > 0) {
            yielder.$yield(previous, accumulate)
          }
        }

        self.$each.$$p = function(value) {
          var key = Opal.yield1(block, value);

          if (key === nil) {
            releaseAccumulate();
            accumulate = [];
            previous = nil;
          } else {
            if (previous === nil || previous === key) {
              accumulate.push(value);
            } else {
              releaseAccumulate();
              accumulate = [value];
            }

            previous = key;
          }
        }

        self.$each();

        releaseAccumulate();
      ;}, $$11.$$s = self, $$11.$$arity = 1, $$11));
    }, $Enumerable_chunk$9.$$arity = 0);
    
    Opal.def(self, '$chunk_while', $Enumerable_chunk_while$12 = function $$chunk_while() {
      var $iter = $Enumerable_chunk_while$12.$$p, block = $iter || nil, $$13, self = this;

      if ($iter) $Enumerable_chunk_while$12.$$p = null;
      
      
      if ($iter) $Enumerable_chunk_while$12.$$p = null;;
      if ((block !== nil)) {
      } else {
        self.$raise($$($nesting, 'ArgumentError'), "no block given")
      };
      return $send(self, 'slice_when', [], ($$13 = function(before, after){var self = $$13.$$s == null ? this : $$13.$$s;

      
        
        if (before == null) {
          before = nil;
        };
        
        if (after == null) {
          after = nil;
        };
        return Opal.yieldX(block, [before, after])['$!']();}, $$13.$$s = self, $$13.$$arity = 2, $$13));
    }, $Enumerable_chunk_while$12.$$arity = 0);
    
    Opal.def(self, '$collect', $Enumerable_collect$14 = function $$collect() {
      var $iter = $Enumerable_collect$14.$$p, block = $iter || nil, $$15, self = this;

      if ($iter) $Enumerable_collect$14.$$p = null;
      
      
      if ($iter) $Enumerable_collect$14.$$p = null;;
      if ((block !== nil)) {
      } else {
        return $send(self, 'enum_for', ["collect"], ($$15 = function(){var self = $$15.$$s == null ? this : $$15.$$s;

        return self.$enumerator_size()}, $$15.$$s = self, $$15.$$arity = 0, $$15))
      };
      
      var result = [];

      self.$each.$$p = function() {
        var value = Opal.yieldX(block, arguments);

        result.push(value);
      };

      self.$each();

      return result;
    ;
    }, $Enumerable_collect$14.$$arity = 0);
    
    Opal.def(self, '$collect_concat', $Enumerable_collect_concat$16 = function $$collect_concat() {
      var $iter = $Enumerable_collect_concat$16.$$p, block = $iter || nil, $$17, $$18, self = this;

      if ($iter) $Enumerable_collect_concat$16.$$p = null;
      
      
      if ($iter) $Enumerable_collect_concat$16.$$p = null;;
      if ((block !== nil)) {
      } else {
        return $send(self, 'enum_for', ["collect_concat"], ($$17 = function(){var self = $$17.$$s == null ? this : $$17.$$s;

        return self.$enumerator_size()}, $$17.$$s = self, $$17.$$arity = 0, $$17))
      };
      return $send(self, 'map', [], ($$18 = function(item){var self = $$18.$$s == null ? this : $$18.$$s;

      
        
        if (item == null) {
          item = nil;
        };
        return Opal.yield1(block, item);;}, $$18.$$s = self, $$18.$$arity = 1, $$18)).$flatten(1);
    }, $Enumerable_collect_concat$16.$$arity = 0);
    
    Opal.def(self, '$count', $Enumerable_count$19 = function $$count(object) {
      var $iter = $Enumerable_count$19.$$p, block = $iter || nil, $$20, $$21, $$22, self = this, result = nil;

      if ($iter) $Enumerable_count$19.$$p = null;
      
      
      if ($iter) $Enumerable_count$19.$$p = null;;
      ;
      result = 0;
      
      if (object != null && block !== nil) {
        self.$warn("warning: given block not used")
      }
    ;
      if ($truthy(object != null)) {
        block = $send(self, 'proc', [], ($$20 = function($a){var self = $$20.$$s == null ? this : $$20.$$s, $post_args, args;

        
          
          $post_args = Opal.slice.call(arguments, 0, arguments.length);
          
          args = $post_args;;
          return $$($nesting, 'Opal').$destructure(args)['$=='](object);}, $$20.$$s = self, $$20.$$arity = -1, $$20))
      } else if ($truthy(block['$nil?']())) {
        block = $send(self, 'proc', [], ($$21 = function(){var self = $$21.$$s == null ? this : $$21.$$s;

        return true}, $$21.$$s = self, $$21.$$arity = 0, $$21))};
      $send(self, 'each', [], ($$22 = function($a){var self = $$22.$$s == null ? this : $$22.$$s, $post_args, args;

      
        
        $post_args = Opal.slice.call(arguments, 0, arguments.length);
        
        args = $post_args;;
        if ($truthy(Opal.yieldX(block, args))) {
          return result++;
        } else {
          return nil
        };}, $$22.$$s = self, $$22.$$arity = -1, $$22));
      return result;
    }, $Enumerable_count$19.$$arity = -1);
    
    Opal.def(self, '$cycle', $Enumerable_cycle$23 = function $$cycle(n) {
      var $iter = $Enumerable_cycle$23.$$p, block = $iter || nil, $$24, self = this;

      if ($iter) $Enumerable_cycle$23.$$p = null;
      
      
      if ($iter) $Enumerable_cycle$23.$$p = null;;
      
      if (n == null) {
        n = nil;
      };
      if ((block !== nil)) {
      } else {
        return $send(self, 'enum_for', ["cycle", n], ($$24 = function(){var self = $$24.$$s == null ? this : $$24.$$s;

        if ($truthy(n['$nil?']())) {
            if ($truthy(self['$respond_to?']("size"))) {
              return $$$($$($nesting, 'Float'), 'INFINITY')
            } else {
              return nil
            }
          } else {
            
            n = $$($nesting, 'Opal')['$coerce_to!'](n, $$($nesting, 'Integer'), "to_int");
            if ($truthy($rb_gt(n, 0))) {
              return $rb_times(self.$enumerator_size(), n)
            } else {
              return 0
            };
          }}, $$24.$$s = self, $$24.$$arity = 0, $$24))
      };
      if ($truthy(n['$nil?']())) {
      } else {
        
        n = $$($nesting, 'Opal')['$coerce_to!'](n, $$($nesting, 'Integer'), "to_int");
        if ($truthy(n <= 0)) {
          return nil};
      };
      
      var all = [], i, length, value;

      self.$each.$$p = function() {
        var param = $$($nesting, 'Opal').$destructure(arguments),
            value = Opal.yield1(block, param);

        all.push(param);
      }

      self.$each();

      if (all.length === 0) {
        return nil;
      }

      if (n === nil) {
        while (true) {
          for (i = 0, length = all.length; i < length; i++) {
            value = Opal.yield1(block, all[i]);
          }
        }
      }
      else {
        while (n > 1) {
          for (i = 0, length = all.length; i < length; i++) {
            value = Opal.yield1(block, all[i]);
          }

          n--;
        }
      }
    ;
    }, $Enumerable_cycle$23.$$arity = -1);
    
    Opal.def(self, '$detect', $Enumerable_detect$25 = function $$detect(ifnone) {try {

      var $iter = $Enumerable_detect$25.$$p, block = $iter || nil, $$26, self = this;

      if ($iter) $Enumerable_detect$25.$$p = null;
      
      
      if ($iter) $Enumerable_detect$25.$$p = null;;
      ;
      if ((block !== nil)) {
      } else {
        return self.$enum_for("detect", ifnone)
      };
      $send(self, 'each', [], ($$26 = function($a){var self = $$26.$$s == null ? this : $$26.$$s, $post_args, args, value = nil;

      
        
        $post_args = Opal.slice.call(arguments, 0, arguments.length);
        
        args = $post_args;;
        value = $$($nesting, 'Opal').$destructure(args);
        if ($truthy(Opal.yield1(block, value))) {
          Opal.ret(value)
        } else {
          return nil
        };}, $$26.$$s = self, $$26.$$arity = -1, $$26));
      
      if (ifnone !== undefined) {
        if (typeof(ifnone) === 'function') {
          return ifnone();
        } else {
          return ifnone;
        }
      }
    ;
      return nil;
      } catch ($returner) { if ($returner === Opal.returner) { return $returner.$v } throw $returner; }
    }, $Enumerable_detect$25.$$arity = -1);
    
    Opal.def(self, '$drop', $Enumerable_drop$27 = function $$drop(number) {
      var self = this;

      
      number = $coerce_to(number, $$($nesting, 'Integer'), 'to_int');
      if ($truthy(number < 0)) {
        self.$raise($$($nesting, 'ArgumentError'), "attempt to drop negative size")};
      
      var result  = [],
          current = 0;

      self.$each.$$p = function() {
        if (number <= current) {
          result.push($$($nesting, 'Opal').$destructure(arguments));
        }

        current++;
      };

      self.$each()

      return result;
    ;
    }, $Enumerable_drop$27.$$arity = 1);
    
    Opal.def(self, '$drop_while', $Enumerable_drop_while$28 = function $$drop_while() {
      var $iter = $Enumerable_drop_while$28.$$p, block = $iter || nil, self = this;

      if ($iter) $Enumerable_drop_while$28.$$p = null;
      
      
      if ($iter) $Enumerable_drop_while$28.$$p = null;;
      if ((block !== nil)) {
      } else {
        return self.$enum_for("drop_while")
      };
      
      var result   = [],
          dropping = true;

      self.$each.$$p = function() {
        var param = $$($nesting, 'Opal').$destructure(arguments);

        if (dropping) {
          var value = Opal.yield1(block, param);

          if ($falsy(value)) {
            dropping = false;
            result.push(param);
          }
        }
        else {
          result.push(param);
        }
      };

      self.$each();

      return result;
    ;
    }, $Enumerable_drop_while$28.$$arity = 0);
    
    Opal.def(self, '$each_cons', $Enumerable_each_cons$29 = function $$each_cons(n) {
      var $iter = $Enumerable_each_cons$29.$$p, block = $iter || nil, $$30, self = this;

      if ($iter) $Enumerable_each_cons$29.$$p = null;
      
      
      if ($iter) $Enumerable_each_cons$29.$$p = null;;
      if ($truthy(arguments.length != 1)) {
        self.$raise($$($nesting, 'ArgumentError'), "" + "wrong number of arguments (" + (arguments.length) + " for 1)")};
      n = $$($nesting, 'Opal').$try_convert(n, $$($nesting, 'Integer'), "to_int");
      if ($truthy(n <= 0)) {
        self.$raise($$($nesting, 'ArgumentError'), "invalid size")};
      if ((block !== nil)) {
      } else {
        return $send(self, 'enum_for', ["each_cons", n], ($$30 = function(){var self = $$30.$$s == null ? this : $$30.$$s, $a, enum_size = nil;

        
          enum_size = self.$enumerator_size();
          if ($truthy(enum_size['$nil?']())) {
            return nil
          } else if ($truthy(($truthy($a = enum_size['$=='](0)) ? $a : $rb_lt(enum_size, n)))) {
            return 0
          } else {
            return $rb_plus($rb_minus(enum_size, n), 1)
          };}, $$30.$$s = self, $$30.$$arity = 0, $$30))
      };
      
      var buffer = [];

      self.$each.$$p = function() {
        var element = $$($nesting, 'Opal').$destructure(arguments);
        buffer.push(element);
        if (buffer.length > n) {
          buffer.shift();
        }
        if (buffer.length == n) {
          Opal.yield1(block, buffer.slice(0, n));
        }
      }

      self.$each();

      return nil;
    ;
    }, $Enumerable_each_cons$29.$$arity = 1);
    
    Opal.def(self, '$each_entry', $Enumerable_each_entry$31 = function $$each_entry($a) {
      var $iter = $Enumerable_each_entry$31.$$p, block = $iter || nil, $post_args, data, $$32, self = this;

      if ($iter) $Enumerable_each_entry$31.$$p = null;
      
      
      if ($iter) $Enumerable_each_entry$31.$$p = null;;
      
      $post_args = Opal.slice.call(arguments, 0, arguments.length);
      
      data = $post_args;;
      if ((block !== nil)) {
      } else {
        return $send(self, 'to_enum', ["each_entry"].concat(Opal.to_a(data)), ($$32 = function(){var self = $$32.$$s == null ? this : $$32.$$s;

        return self.$enumerator_size()}, $$32.$$s = self, $$32.$$arity = 0, $$32))
      };
      
      self.$each.$$p = function() {
        var item = $$($nesting, 'Opal').$destructure(arguments);

        Opal.yield1(block, item);
      }

      self.$each.apply(self, data);

      return self;
    ;
    }, $Enumerable_each_entry$31.$$arity = -1);
    
    Opal.def(self, '$each_slice', $Enumerable_each_slice$33 = function $$each_slice(n) {
      var $iter = $Enumerable_each_slice$33.$$p, block = $iter || nil, $$34, self = this;

      if ($iter) $Enumerable_each_slice$33.$$p = null;
      
      
      if ($iter) $Enumerable_each_slice$33.$$p = null;;
      n = $coerce_to(n, $$($nesting, 'Integer'), 'to_int');
      if ($truthy(n <= 0)) {
        self.$raise($$($nesting, 'ArgumentError'), "invalid slice size")};
      if ((block !== nil)) {
      } else {
        return $send(self, 'enum_for', ["each_slice", n], ($$34 = function(){var self = $$34.$$s == null ? this : $$34.$$s;

        if ($truthy(self['$respond_to?']("size"))) {
            return $rb_divide(self.$size(), n).$ceil()
          } else {
            return nil
          }}, $$34.$$s = self, $$34.$$arity = 0, $$34))
      };
      
      var slice = []

      self.$each.$$p = function() {
        var param = $$($nesting, 'Opal').$destructure(arguments);

        slice.push(param);

        if (slice.length === n) {
          Opal.yield1(block, slice);
          slice = [];
        }
      };

      self.$each();

      // our "last" group, if smaller than n then won't have been yielded
      if (slice.length > 0) {
        Opal.yield1(block, slice);
      }
    ;
      return nil;
    }, $Enumerable_each_slice$33.$$arity = 1);
    
    Opal.def(self, '$each_with_index', $Enumerable_each_with_index$35 = function $$each_with_index($a) {
      var $iter = $Enumerable_each_with_index$35.$$p, block = $iter || nil, $post_args, args, $$36, self = this;

      if ($iter) $Enumerable_each_with_index$35.$$p = null;
      
      
      if ($iter) $Enumerable_each_with_index$35.$$p = null;;
      
      $post_args = Opal.slice.call(arguments, 0, arguments.length);
      
      args = $post_args;;
      if ((block !== nil)) {
      } else {
        return $send(self, 'enum_for', ["each_with_index"].concat(Opal.to_a(args)), ($$36 = function(){var self = $$36.$$s == null ? this : $$36.$$s;

        return self.$enumerator_size()}, $$36.$$s = self, $$36.$$arity = 0, $$36))
      };
      
      var index = 0;

      self.$each.$$p = function() {
        var param = $$($nesting, 'Opal').$destructure(arguments);

        block(param, index);

        index++;
      };

      self.$each.apply(self, args);
    ;
      return self;
    }, $Enumerable_each_with_index$35.$$arity = -1);
    
    Opal.def(self, '$each_with_object', $Enumerable_each_with_object$37 = function $$each_with_object(object) {
      var $iter = $Enumerable_each_with_object$37.$$p, block = $iter || nil, $$38, self = this;

      if ($iter) $Enumerable_each_with_object$37.$$p = null;
      
      
      if ($iter) $Enumerable_each_with_object$37.$$p = null;;
      if ((block !== nil)) {
      } else {
        return $send(self, 'enum_for', ["each_with_object", object], ($$38 = function(){var self = $$38.$$s == null ? this : $$38.$$s;

        return self.$enumerator_size()}, $$38.$$s = self, $$38.$$arity = 0, $$38))
      };
      
      self.$each.$$p = function() {
        var param = $$($nesting, 'Opal').$destructure(arguments);

        block(param, object);
      };

      self.$each();
    ;
      return object;
    }, $Enumerable_each_with_object$37.$$arity = 1);
    
    Opal.def(self, '$entries', $Enumerable_entries$39 = function $$entries($a) {
      var $post_args, args, self = this;

      
      
      $post_args = Opal.slice.call(arguments, 0, arguments.length);
      
      args = $post_args;;
      
      var result = [];

      self.$each.$$p = function() {
        result.push($$($nesting, 'Opal').$destructure(arguments));
      };

      self.$each.apply(self, args);

      return result;
    ;
    }, $Enumerable_entries$39.$$arity = -1);
    Opal.alias(self, "find", "detect");
    
    Opal.def(self, '$find_all', $Enumerable_find_all$40 = function $$find_all() {
      var $iter = $Enumerable_find_all$40.$$p, block = $iter || nil, $$41, self = this;

      if ($iter) $Enumerable_find_all$40.$$p = null;
      
      
      if ($iter) $Enumerable_find_all$40.$$p = null;;
      if ((block !== nil)) {
      } else {
        return $send(self, 'enum_for', ["find_all"], ($$41 = function(){var self = $$41.$$s == null ? this : $$41.$$s;

        return self.$enumerator_size()}, $$41.$$s = self, $$41.$$arity = 0, $$41))
      };
      
      var result = [];

      self.$each.$$p = function() {
        var param = $$($nesting, 'Opal').$destructure(arguments),
            value = Opal.yield1(block, param);

        if ($truthy(value)) {
          result.push(param);
        }
      };

      self.$each();

      return result;
    ;
    }, $Enumerable_find_all$40.$$arity = 0);
    
    Opal.def(self, '$find_index', $Enumerable_find_index$42 = function $$find_index(object) {try {

      var $iter = $Enumerable_find_index$42.$$p, block = $iter || nil, $$43, $$44, self = this, index = nil;

      if ($iter) $Enumerable_find_index$42.$$p = null;
      
      
      if ($iter) $Enumerable_find_index$42.$$p = null;;
      ;
      if ($truthy(object === undefined && block === nil)) {
        return self.$enum_for("find_index")};
      
      if (object != null && block !== nil) {
        self.$warn("warning: given block not used")
      }
    ;
      index = 0;
      if ($truthy(object != null)) {
        $send(self, 'each', [], ($$43 = function($a){var self = $$43.$$s == null ? this : $$43.$$s, $post_args, value;

        
          
          $post_args = Opal.slice.call(arguments, 0, arguments.length);
          
          value = $post_args;;
          if ($$($nesting, 'Opal').$destructure(value)['$=='](object)) {
            Opal.ret(index)};
          return index += 1;;}, $$43.$$s = self, $$43.$$arity = -1, $$43))
      } else {
        $send(self, 'each', [], ($$44 = function($a){var self = $$44.$$s == null ? this : $$44.$$s, $post_args, value;

        
          
          $post_args = Opal.slice.call(arguments, 0, arguments.length);
          
          value = $post_args;;
          if ($truthy(Opal.yieldX(block, Opal.to_a(value)))) {
            Opal.ret(index)};
          return index += 1;;}, $$44.$$s = self, $$44.$$arity = -1, $$44))
      };
      return nil;
      } catch ($returner) { if ($returner === Opal.returner) { return $returner.$v } throw $returner; }
    }, $Enumerable_find_index$42.$$arity = -1);
    
    Opal.def(self, '$first', $Enumerable_first$45 = function $$first(number) {try {

      var $$46, $$47, self = this, result = nil, current = nil;

      
      ;
      if ($truthy(number === undefined)) {
        return $send(self, 'each', [], ($$46 = function(value){var self = $$46.$$s == null ? this : $$46.$$s;

        
          
          if (value == null) {
            value = nil;
          };
          Opal.ret(value);}, $$46.$$s = self, $$46.$$arity = 1, $$46))
      } else {
        
        result = [];
        number = $coerce_to(number, $$($nesting, 'Integer'), 'to_int');
        if ($truthy(number < 0)) {
          self.$raise($$($nesting, 'ArgumentError'), "attempt to take negative size")};
        if ($truthy(number == 0)) {
          return []};
        current = 0;
        $send(self, 'each', [], ($$47 = function($a){var self = $$47.$$s == null ? this : $$47.$$s, $post_args, args;

        
          
          $post_args = Opal.slice.call(arguments, 0, arguments.length);
          
          args = $post_args;;
          result.push($$($nesting, 'Opal').$destructure(args));
          if ($truthy(number <= ++current)) {
            Opal.ret(result)
          } else {
            return nil
          };}, $$47.$$s = self, $$47.$$arity = -1, $$47));
        return result;
      };
      } catch ($returner) { if ($returner === Opal.returner) { return $returner.$v } throw $returner; }
    }, $Enumerable_first$45.$$arity = -1);
    Opal.alias(self, "flat_map", "collect_concat");
    
    Opal.def(self, '$grep', $Enumerable_grep$48 = function $$grep(pattern) {
      var $iter = $Enumerable_grep$48.$$p, block = $iter || nil, $$49, self = this, result = nil;

      if ($iter) $Enumerable_grep$48.$$p = null;
      
      
      if ($iter) $Enumerable_grep$48.$$p = null;;
      result = [];
      $send(self, 'each', [], ($$49 = function($a){var self = $$49.$$s == null ? this : $$49.$$s, $post_args, value, cmp = nil;

      
        
        $post_args = Opal.slice.call(arguments, 0, arguments.length);
        
        value = $post_args;;
        cmp = comparableForPattern(value);
        if ($truthy($send(pattern, '__send__', ["==="].concat(Opal.to_a(cmp))))) {
        } else {
          return nil;
        };
        if ((block !== nil)) {
          
          if ($truthy($rb_gt(value.$length(), 1))) {
            value = [value]};
          value = Opal.yieldX(block, Opal.to_a(value));
        } else if ($truthy($rb_le(value.$length(), 1))) {
          value = value['$[]'](0)};
        return result.$push(value);}, $$49.$$s = self, $$49.$$arity = -1, $$49));
      return result;
    }, $Enumerable_grep$48.$$arity = 1);
    
    Opal.def(self, '$grep_v', $Enumerable_grep_v$50 = function $$grep_v(pattern) {
      var $iter = $Enumerable_grep_v$50.$$p, block = $iter || nil, $$51, self = this, result = nil;

      if ($iter) $Enumerable_grep_v$50.$$p = null;
      
      
      if ($iter) $Enumerable_grep_v$50.$$p = null;;
      result = [];
      $send(self, 'each', [], ($$51 = function($a){var self = $$51.$$s == null ? this : $$51.$$s, $post_args, value, cmp = nil;

      
        
        $post_args = Opal.slice.call(arguments, 0, arguments.length);
        
        value = $post_args;;
        cmp = comparableForPattern(value);
        if ($truthy($send(pattern, '__send__', ["==="].concat(Opal.to_a(cmp))))) {
          return nil;};
        if ((block !== nil)) {
          
          if ($truthy($rb_gt(value.$length(), 1))) {
            value = [value]};
          value = Opal.yieldX(block, Opal.to_a(value));
        } else if ($truthy($rb_le(value.$length(), 1))) {
          value = value['$[]'](0)};
        return result.$push(value);}, $$51.$$s = self, $$51.$$arity = -1, $$51));
      return result;
    }, $Enumerable_grep_v$50.$$arity = 1);
    
    Opal.def(self, '$group_by', $Enumerable_group_by$52 = function $$group_by() {
      var $iter = $Enumerable_group_by$52.$$p, block = $iter || nil, $$53, $a, self = this, hash = nil, $writer = nil;

      if ($iter) $Enumerable_group_by$52.$$p = null;
      
      
      if ($iter) $Enumerable_group_by$52.$$p = null;;
      if ((block !== nil)) {
      } else {
        return $send(self, 'enum_for', ["group_by"], ($$53 = function(){var self = $$53.$$s == null ? this : $$53.$$s;

        return self.$enumerator_size()}, $$53.$$s = self, $$53.$$arity = 0, $$53))
      };
      hash = $hash2([], {});
      
      var result;

      self.$each.$$p = function() {
        var param = $$($nesting, 'Opal').$destructure(arguments),
            value = Opal.yield1(block, param);

        ($truthy($a = hash['$[]'](value)) ? $a : (($writer = [value, []]), $send(hash, '[]=', Opal.to_a($writer)), $writer[$rb_minus($writer["length"], 1)]))['$<<'](param);
      }

      self.$each();

      if (result !== undefined) {
        return result;
      }
    ;
      return hash;
    }, $Enumerable_group_by$52.$$arity = 0);
    
    Opal.def(self, '$include?', $Enumerable_include$ques$54 = function(obj) {try {

      var $$55, self = this;

      
      $send(self, 'each', [], ($$55 = function($a){var self = $$55.$$s == null ? this : $$55.$$s, $post_args, args;

      
        
        $post_args = Opal.slice.call(arguments, 0, arguments.length);
        
        args = $post_args;;
        if ($$($nesting, 'Opal').$destructure(args)['$=='](obj)) {
          Opal.ret(true)
        } else {
          return nil
        };}, $$55.$$s = self, $$55.$$arity = -1, $$55));
      return false;
      } catch ($returner) { if ($returner === Opal.returner) { return $returner.$v } throw $returner; }
    }, $Enumerable_include$ques$54.$$arity = 1);
    
    Opal.def(self, '$inject', $Enumerable_inject$56 = function $$inject(object, sym) {
      var $iter = $Enumerable_inject$56.$$p, block = $iter || nil, self = this;

      if ($iter) $Enumerable_inject$56.$$p = null;
      
      
      if ($iter) $Enumerable_inject$56.$$p = null;;
      ;
      ;
      
      var result = object;

      if (block !== nil && sym === undefined) {
        self.$each.$$p = function() {
          var value = $$($nesting, 'Opal').$destructure(arguments);

          if (result === undefined) {
            result = value;
            return;
          }

          value = Opal.yieldX(block, [result, value]);

          result = value;
        };
      }
      else {
        if (sym === undefined) {
          if (!$$($nesting, 'Symbol')['$==='](object)) {
            self.$raise($$($nesting, 'TypeError'), "" + (object.$inspect()) + " is not a Symbol");
          }

          sym    = object;
          result = undefined;
        }

        self.$each.$$p = function() {
          var value = $$($nesting, 'Opal').$destructure(arguments);

          if (result === undefined) {
            result = value;
            return;
          }

          result = (result).$__send__(sym, value);
        };
      }

      self.$each();

      return result == undefined ? nil : result;
    ;
    }, $Enumerable_inject$56.$$arity = -1);
    
    Opal.def(self, '$lazy', $Enumerable_lazy$57 = function $$lazy() {
      var $$58, self = this;

      return $send($$$($$($nesting, 'Enumerator'), 'Lazy'), 'new', [self, self.$enumerator_size()], ($$58 = function(enum$, $a){var self = $$58.$$s == null ? this : $$58.$$s, $post_args, args;

      
        
        if (enum$ == null) {
          enum$ = nil;
        };
        
        $post_args = Opal.slice.call(arguments, 1, arguments.length);
        
        args = $post_args;;
        return $send(enum$, 'yield', Opal.to_a(args));}, $$58.$$s = self, $$58.$$arity = -2, $$58))
    }, $Enumerable_lazy$57.$$arity = 0);
    
    Opal.def(self, '$enumerator_size', $Enumerable_enumerator_size$59 = function $$enumerator_size() {
      var self = this;

      if ($truthy(self['$respond_to?']("size"))) {
        return self.$size()
      } else {
        return nil
      }
    }, $Enumerable_enumerator_size$59.$$arity = 0);
    Opal.alias(self, "map", "collect");
    
    Opal.def(self, '$max', $Enumerable_max$60 = function $$max(n) {
      var $iter = $Enumerable_max$60.$$p, block = $iter || nil, self = this;

      if ($iter) $Enumerable_max$60.$$p = null;
      
      
      if ($iter) $Enumerable_max$60.$$p = null;;
      ;
      
      if (n === undefined || n === nil) {
        var result, value;

        self.$each.$$p = function() {
          var item = $$($nesting, 'Opal').$destructure(arguments);

          if (result === undefined) {
            result = item;
            return;
          }

          if (block !== nil) {
            value = Opal.yieldX(block, [item, result]);
          } else {
            value = (item)['$<=>'](result);
          }

          if (value === nil) {
            self.$raise($$($nesting, 'ArgumentError'), "comparison failed");
          }

          if (value > 0) {
            result = item;
          }
        }

        self.$each();

        if (result === undefined) {
          return nil;
        } else {
          return result;
        }
      }

      n = $coerce_to(n, $$($nesting, 'Integer'), 'to_int');
    ;
      return $send(self, 'sort', [], block.$to_proc()).$reverse().$first(n);
    }, $Enumerable_max$60.$$arity = -1);
    
    Opal.def(self, '$max_by', $Enumerable_max_by$61 = function $$max_by(n) {
      var $iter = $Enumerable_max_by$61.$$p, block = $iter || nil, $$62, self = this;

      if ($iter) $Enumerable_max_by$61.$$p = null;
      
      
      if ($iter) $Enumerable_max_by$61.$$p = null;;
      
      if (n == null) {
        n = nil;
      };
      if ($truthy(block)) {
      } else {
        return $send(self, 'enum_for', ["max_by", n], ($$62 = function(){var self = $$62.$$s == null ? this : $$62.$$s;

        return self.$enumerator_size()}, $$62.$$s = self, $$62.$$arity = 0, $$62))
      };
      if ($truthy(n['$nil?']())) {
      } else {
        return $send(self, 'sort_by', [], block.$to_proc()).$reverse().$take(n)
      };
      
      var result,
          by;

      self.$each.$$p = function() {
        var param = $$($nesting, 'Opal').$destructure(arguments),
            value = Opal.yield1(block, param);

        if (result === undefined) {
          result = param;
          by     = value;
          return;
        }

        if ((value)['$<=>'](by) > 0) {
          result = param
          by     = value;
        }
      };

      self.$each();

      return result === undefined ? nil : result;
    ;
    }, $Enumerable_max_by$61.$$arity = -1);
    Opal.alias(self, "member?", "include?");
    
    Opal.def(self, '$min', $Enumerable_min$63 = function $$min(n) {
      var $iter = $Enumerable_min$63.$$p, block = $iter || nil, $$64, self = this;

      if ($iter) $Enumerable_min$63.$$p = null;
      
      
      if ($iter) $Enumerable_min$63.$$p = null;;
      
      if (n == null) {
        n = nil;
      };
      if ($truthy(n['$nil?']())) {
      } else if ((block !== nil)) {
        return $send(self, 'sort', [], ($$64 = function(a, b){var self = $$64.$$s == null ? this : $$64.$$s;

        
          
          if (a == null) {
            a = nil;
          };
          
          if (b == null) {
            b = nil;
          };
          return Opal.yieldX(block, [a, b]);;}, $$64.$$s = self, $$64.$$arity = 2, $$64)).$take(n)
      } else {
        return self.$sort().$take(n)
      };
      
      var result;

      if (block !== nil) {
        self.$each.$$p = function() {
          var param = $$($nesting, 'Opal').$destructure(arguments);

          if (result === undefined) {
            result = param;
            return;
          }

          var value = block(param, result);

          if (value === nil) {
            self.$raise($$($nesting, 'ArgumentError'), "comparison failed");
          }

          if (value < 0) {
            result = param;
          }
        };
      }
      else {
        self.$each.$$p = function() {
          var param = $$($nesting, 'Opal').$destructure(arguments);

          if (result === undefined) {
            result = param;
            return;
          }

          if ($$($nesting, 'Opal').$compare(param, result) < 0) {
            result = param;
          }
        };
      }

      self.$each();

      return result === undefined ? nil : result;
    ;
    }, $Enumerable_min$63.$$arity = -1);
    
    Opal.def(self, '$min_by', $Enumerable_min_by$65 = function $$min_by(n) {
      var $iter = $Enumerable_min_by$65.$$p, block = $iter || nil, $$66, self = this;

      if ($iter) $Enumerable_min_by$65.$$p = null;
      
      
      if ($iter) $Enumerable_min_by$65.$$p = null;;
      
      if (n == null) {
        n = nil;
      };
      if ($truthy(block)) {
      } else {
        return $send(self, 'enum_for', ["min_by", n], ($$66 = function(){var self = $$66.$$s == null ? this : $$66.$$s;

        return self.$enumerator_size()}, $$66.$$s = self, $$66.$$arity = 0, $$66))
      };
      if ($truthy(n['$nil?']())) {
      } else {
        return $send(self, 'sort_by', [], block.$to_proc()).$take(n)
      };
      
      var result,
          by;

      self.$each.$$p = function() {
        var param = $$($nesting, 'Opal').$destructure(arguments),
            value = Opal.yield1(block, param);

        if (result === undefined) {
          result = param;
          by     = value;
          return;
        }

        if ((value)['$<=>'](by) < 0) {
          result = param
          by     = value;
        }
      };

      self.$each();

      return result === undefined ? nil : result;
    ;
    }, $Enumerable_min_by$65.$$arity = -1);
    
    Opal.def(self, '$minmax', $Enumerable_minmax$67 = function $$minmax() {
      var $iter = $Enumerable_minmax$67.$$p, block = $iter || nil, $a, $$68, self = this;

      if ($iter) $Enumerable_minmax$67.$$p = null;
      
      
      if ($iter) $Enumerable_minmax$67.$$p = null;;
      block = ($truthy($a = block) ? $a : $send(self, 'proc', [], ($$68 = function(a, b){var self = $$68.$$s == null ? this : $$68.$$s;

      
        
        if (a == null) {
          a = nil;
        };
        
        if (b == null) {
          b = nil;
        };
        return a['$<=>'](b);}, $$68.$$s = self, $$68.$$arity = 2, $$68)));
      
      var min = nil, max = nil, first_time = true;

      self.$each.$$p = function() {
        var element = $$($nesting, 'Opal').$destructure(arguments);
        if (first_time) {
          min = max = element;
          first_time = false;
        } else {
          var min_cmp = block.$call(min, element);

          if (min_cmp === nil) {
            self.$raise($$($nesting, 'ArgumentError'), "comparison failed")
          } else if (min_cmp > 0) {
            min = element;
          }

          var max_cmp = block.$call(max, element);

          if (max_cmp === nil) {
            self.$raise($$($nesting, 'ArgumentError'), "comparison failed")
          } else if (max_cmp < 0) {
            max = element;
          }
        }
      }

      self.$each();

      return [min, max];
    ;
    }, $Enumerable_minmax$67.$$arity = 0);
    
    Opal.def(self, '$minmax_by', $Enumerable_minmax_by$69 = function $$minmax_by() {
      var $iter = $Enumerable_minmax_by$69.$$p, block = $iter || nil, $$70, self = this;

      if ($iter) $Enumerable_minmax_by$69.$$p = null;
      
      
      if ($iter) $Enumerable_minmax_by$69.$$p = null;;
      if ($truthy(block)) {
      } else {
        return $send(self, 'enum_for', ["minmax_by"], ($$70 = function(){var self = $$70.$$s == null ? this : $$70.$$s;

        return self.$enumerator_size()}, $$70.$$s = self, $$70.$$arity = 0, $$70))
      };
      
      var min_result = nil,
          max_result = nil,
          min_by,
          max_by;

      self.$each.$$p = function() {
        var param = $$($nesting, 'Opal').$destructure(arguments),
            value = Opal.yield1(block, param);

        if ((min_by === undefined) || (value)['$<=>'](min_by) < 0) {
          min_result = param;
          min_by     = value;
        }

        if ((max_by === undefined) || (value)['$<=>'](max_by) > 0) {
          max_result = param;
          max_by     = value;
        }
      };

      self.$each();

      return [min_result, max_result];
    ;
    }, $Enumerable_minmax_by$69.$$arity = 0);
    
    Opal.def(self, '$none?', $Enumerable_none$ques$71 = function(pattern) {try {

      var $iter = $Enumerable_none$ques$71.$$p, block = $iter || nil, $$72, $$73, $$74, self = this;

      if ($iter) $Enumerable_none$ques$71.$$p = null;
      
      
      if ($iter) $Enumerable_none$ques$71.$$p = null;;
      ;
      if ($truthy(pattern !== undefined)) {
        $send(self, 'each', [], ($$72 = function($a){var self = $$72.$$s == null ? this : $$72.$$s, $post_args, value, comparable = nil;

        
          
          $post_args = Opal.slice.call(arguments, 0, arguments.length);
          
          value = $post_args;;
          comparable = comparableForPattern(value);
          if ($truthy($send(pattern, 'public_send', ["==="].concat(Opal.to_a(comparable))))) {
            Opal.ret(false)
          } else {
            return nil
          };}, $$72.$$s = self, $$72.$$arity = -1, $$72))
      } else if ((block !== nil)) {
        $send(self, 'each', [], ($$73 = function($a){var self = $$73.$$s == null ? this : $$73.$$s, $post_args, value;

        
          
          $post_args = Opal.slice.call(arguments, 0, arguments.length);
          
          value = $post_args;;
          if ($truthy(Opal.yieldX(block, Opal.to_a(value)))) {
            Opal.ret(false)
          } else {
            return nil
          };}, $$73.$$s = self, $$73.$$arity = -1, $$73))
      } else {
        $send(self, 'each', [], ($$74 = function($a){var self = $$74.$$s == null ? this : $$74.$$s, $post_args, value, item = nil;

        
          
          $post_args = Opal.slice.call(arguments, 0, arguments.length);
          
          value = $post_args;;
          item = $$($nesting, 'Opal').$destructure(value);
          if ($truthy(item)) {
            Opal.ret(false)
          } else {
            return nil
          };}, $$74.$$s = self, $$74.$$arity = -1, $$74))
      };
      return true;
      } catch ($returner) { if ($returner === Opal.returner) { return $returner.$v } throw $returner; }
    }, $Enumerable_none$ques$71.$$arity = -1);
    
    Opal.def(self, '$one?', $Enumerable_one$ques$75 = function(pattern) {try {

      var $iter = $Enumerable_one$ques$75.$$p, block = $iter || nil, $$76, $$77, $$78, self = this, count = nil;

      if ($iter) $Enumerable_one$ques$75.$$p = null;
      
      
      if ($iter) $Enumerable_one$ques$75.$$p = null;;
      ;
      count = 0;
      if ($truthy(pattern !== undefined)) {
        $send(self, 'each', [], ($$76 = function($a){var self = $$76.$$s == null ? this : $$76.$$s, $post_args, value, comparable = nil;

        
          
          $post_args = Opal.slice.call(arguments, 0, arguments.length);
          
          value = $post_args;;
          comparable = comparableForPattern(value);
          if ($truthy($send(pattern, 'public_send', ["==="].concat(Opal.to_a(comparable))))) {
            
            count = $rb_plus(count, 1);
            if ($truthy($rb_gt(count, 1))) {
              Opal.ret(false)
            } else {
              return nil
            };
          } else {
            return nil
          };}, $$76.$$s = self, $$76.$$arity = -1, $$76))
      } else if ((block !== nil)) {
        $send(self, 'each', [], ($$77 = function($a){var self = $$77.$$s == null ? this : $$77.$$s, $post_args, value;

        
          
          $post_args = Opal.slice.call(arguments, 0, arguments.length);
          
          value = $post_args;;
          if ($truthy(Opal.yieldX(block, Opal.to_a(value)))) {
          } else {
            return nil;
          };
          count = $rb_plus(count, 1);
          if ($truthy($rb_gt(count, 1))) {
            Opal.ret(false)
          } else {
            return nil
          };}, $$77.$$s = self, $$77.$$arity = -1, $$77))
      } else {
        $send(self, 'each', [], ($$78 = function($a){var self = $$78.$$s == null ? this : $$78.$$s, $post_args, value;

        
          
          $post_args = Opal.slice.call(arguments, 0, arguments.length);
          
          value = $post_args;;
          if ($truthy($$($nesting, 'Opal').$destructure(value))) {
          } else {
            return nil;
          };
          count = $rb_plus(count, 1);
          if ($truthy($rb_gt(count, 1))) {
            Opal.ret(false)
          } else {
            return nil
          };}, $$78.$$s = self, $$78.$$arity = -1, $$78))
      };
      return count['$=='](1);
      } catch ($returner) { if ($returner === Opal.returner) { return $returner.$v } throw $returner; }
    }, $Enumerable_one$ques$75.$$arity = -1);
    
    Opal.def(self, '$partition', $Enumerable_partition$79 = function $$partition() {
      var $iter = $Enumerable_partition$79.$$p, block = $iter || nil, $$80, self = this;

      if ($iter) $Enumerable_partition$79.$$p = null;
      
      
      if ($iter) $Enumerable_partition$79.$$p = null;;
      if ((block !== nil)) {
      } else {
        return $send(self, 'enum_for', ["partition"], ($$80 = function(){var self = $$80.$$s == null ? this : $$80.$$s;

        return self.$enumerator_size()}, $$80.$$s = self, $$80.$$arity = 0, $$80))
      };
      
      var truthy = [], falsy = [], result;

      self.$each.$$p = function() {
        var param = $$($nesting, 'Opal').$destructure(arguments),
            value = Opal.yield1(block, param);

        if ($truthy(value)) {
          truthy.push(param);
        }
        else {
          falsy.push(param);
        }
      };

      self.$each();

      return [truthy, falsy];
    ;
    }, $Enumerable_partition$79.$$arity = 0);
    Opal.alias(self, "reduce", "inject");
    
    Opal.def(self, '$reject', $Enumerable_reject$81 = function $$reject() {
      var $iter = $Enumerable_reject$81.$$p, block = $iter || nil, $$82, self = this;

      if ($iter) $Enumerable_reject$81.$$p = null;
      
      
      if ($iter) $Enumerable_reject$81.$$p = null;;
      if ((block !== nil)) {
      } else {
        return $send(self, 'enum_for', ["reject"], ($$82 = function(){var self = $$82.$$s == null ? this : $$82.$$s;

        return self.$enumerator_size()}, $$82.$$s = self, $$82.$$arity = 0, $$82))
      };
      
      var result = [];

      self.$each.$$p = function() {
        var param = $$($nesting, 'Opal').$destructure(arguments),
            value = Opal.yield1(block, param);

        if ($falsy(value)) {
          result.push(param);
        }
      };

      self.$each();

      return result;
    ;
    }, $Enumerable_reject$81.$$arity = 0);
    
    Opal.def(self, '$reverse_each', $Enumerable_reverse_each$83 = function $$reverse_each() {
      var $iter = $Enumerable_reverse_each$83.$$p, block = $iter || nil, $$84, self = this;

      if ($iter) $Enumerable_reverse_each$83.$$p = null;
      
      
      if ($iter) $Enumerable_reverse_each$83.$$p = null;;
      if ((block !== nil)) {
      } else {
        return $send(self, 'enum_for', ["reverse_each"], ($$84 = function(){var self = $$84.$$s == null ? this : $$84.$$s;

        return self.$enumerator_size()}, $$84.$$s = self, $$84.$$arity = 0, $$84))
      };
      
      var result = [];

      self.$each.$$p = function() {
        result.push(arguments);
      };

      self.$each();

      for (var i = result.length - 1; i >= 0; i--) {
        Opal.yieldX(block, result[i]);
      }

      return result;
    ;
    }, $Enumerable_reverse_each$83.$$arity = 0);
    Opal.alias(self, "select", "find_all");
    
    Opal.def(self, '$slice_before', $Enumerable_slice_before$85 = function $$slice_before(pattern) {
      var $iter = $Enumerable_slice_before$85.$$p, block = $iter || nil, $$86, self = this;

      if ($iter) $Enumerable_slice_before$85.$$p = null;
      
      
      if ($iter) $Enumerable_slice_before$85.$$p = null;;
      ;
      if ($truthy(pattern === undefined && block === nil)) {
        self.$raise($$($nesting, 'ArgumentError'), "both pattern and block are given")};
      if ($truthy(pattern !== undefined && block !== nil || arguments.length > 1)) {
        self.$raise($$($nesting, 'ArgumentError'), "" + "wrong number of arguments (" + (arguments.length) + " expected 1)")};
      return $send($$($nesting, 'Enumerator'), 'new', [], ($$86 = function(e){var self = $$86.$$s == null ? this : $$86.$$s;

      
        
        if (e == null) {
          e = nil;
        };
        
        var slice = [];

        if (block !== nil) {
          if (pattern === undefined) {
            self.$each.$$p = function() {
              var param = $$($nesting, 'Opal').$destructure(arguments),
                  value = Opal.yield1(block, param);

              if ($truthy(value) && slice.length > 0) {
                e['$<<'](slice);
                slice = [];
              }

              slice.push(param);
            };
          }
          else {
            self.$each.$$p = function() {
              var param = $$($nesting, 'Opal').$destructure(arguments),
                  value = block(param, pattern.$dup());

              if ($truthy(value) && slice.length > 0) {
                e['$<<'](slice);
                slice = [];
              }

              slice.push(param);
            };
          }
        }
        else {
          self.$each.$$p = function() {
            var param = $$($nesting, 'Opal').$destructure(arguments),
                value = pattern['$==='](param);

            if ($truthy(value) && slice.length > 0) {
              e['$<<'](slice);
              slice = [];
            }

            slice.push(param);
          };
        }

        self.$each();

        if (slice.length > 0) {
          e['$<<'](slice);
        }
      ;}, $$86.$$s = self, $$86.$$arity = 1, $$86));
    }, $Enumerable_slice_before$85.$$arity = -1);
    
    Opal.def(self, '$slice_after', $Enumerable_slice_after$87 = function $$slice_after(pattern) {
      var $iter = $Enumerable_slice_after$87.$$p, block = $iter || nil, $$88, $$89, self = this;

      if ($iter) $Enumerable_slice_after$87.$$p = null;
      
      
      if ($iter) $Enumerable_slice_after$87.$$p = null;;
      ;
      if ($truthy(pattern === undefined && block === nil)) {
        self.$raise($$($nesting, 'ArgumentError'), "both pattern and block are given")};
      if ($truthy(pattern !== undefined && block !== nil || arguments.length > 1)) {
        self.$raise($$($nesting, 'ArgumentError'), "" + "wrong number of arguments (" + (arguments.length) + " expected 1)")};
      if ($truthy(pattern !== undefined)) {
        block = $send(self, 'proc', [], ($$88 = function(e){var self = $$88.$$s == null ? this : $$88.$$s;

        
          
          if (e == null) {
            e = nil;
          };
          return pattern['$==='](e);}, $$88.$$s = self, $$88.$$arity = 1, $$88))};
      return $send($$($nesting, 'Enumerator'), 'new', [], ($$89 = function(yielder){var self = $$89.$$s == null ? this : $$89.$$s;

      
        
        if (yielder == null) {
          yielder = nil;
        };
        
        var accumulate;

        self.$each.$$p = function() {
          var element = $$($nesting, 'Opal').$destructure(arguments),
              end_chunk = Opal.yield1(block, element);

          if (accumulate == null) {
            accumulate = [];
          }

          if ($truthy(end_chunk)) {
            accumulate.push(element);
            yielder.$yield(accumulate);
            accumulate = null;
          } else {
            accumulate.push(element)
          }
        }

        self.$each();

        if (accumulate != null) {
          yielder.$yield(accumulate);
        }
      ;}, $$89.$$s = self, $$89.$$arity = 1, $$89));
    }, $Enumerable_slice_after$87.$$arity = -1);
    
    Opal.def(self, '$slice_when', $Enumerable_slice_when$90 = function $$slice_when() {
      var $iter = $Enumerable_slice_when$90.$$p, block = $iter || nil, $$91, self = this;

      if ($iter) $Enumerable_slice_when$90.$$p = null;
      
      
      if ($iter) $Enumerable_slice_when$90.$$p = null;;
      if ((block !== nil)) {
      } else {
        self.$raise($$($nesting, 'ArgumentError'), "wrong number of arguments (0 for 1)")
      };
      return $send($$($nesting, 'Enumerator'), 'new', [], ($$91 = function(yielder){var self = $$91.$$s == null ? this : $$91.$$s;

      
        
        if (yielder == null) {
          yielder = nil;
        };
        
        var slice = nil, last_after = nil;

        self.$each_cons.$$p = function() {
          var params = $$($nesting, 'Opal').$destructure(arguments),
              before = params[0],
              after = params[1],
              match = Opal.yieldX(block, [before, after]);

          last_after = after;

          if (slice === nil) {
            slice = [];
          }

          if ($truthy(match)) {
            slice.push(before);
            yielder.$yield(slice);
            slice = [];
          } else {
            slice.push(before);
          }
        }

        self.$each_cons(2);

        if (slice !== nil) {
          slice.push(last_after);
          yielder.$yield(slice);
        }
      ;}, $$91.$$s = self, $$91.$$arity = 1, $$91));
    }, $Enumerable_slice_when$90.$$arity = 0);
    
    Opal.def(self, '$sort', $Enumerable_sort$92 = function $$sort() {
      var $iter = $Enumerable_sort$92.$$p, block = $iter || nil, $$93, self = this, ary = nil;

      if ($iter) $Enumerable_sort$92.$$p = null;
      
      
      if ($iter) $Enumerable_sort$92.$$p = null;;
      ary = self.$to_a();
      if ((block !== nil)) {
      } else {
        block = $lambda(($$93 = function(a, b){var self = $$93.$$s == null ? this : $$93.$$s;

        
          
          if (a == null) {
            a = nil;
          };
          
          if (b == null) {
            b = nil;
          };
          return a['$<=>'](b);}, $$93.$$s = self, $$93.$$arity = 2, $$93))
      };
      return $send(ary, 'sort', [], block.$to_proc());
    }, $Enumerable_sort$92.$$arity = 0);
    
    Opal.def(self, '$sort_by', $Enumerable_sort_by$94 = function $$sort_by() {
      var $iter = $Enumerable_sort_by$94.$$p, block = $iter || nil, $$95, $$96, $$97, $$98, self = this, dup = nil;

      if ($iter) $Enumerable_sort_by$94.$$p = null;
      
      
      if ($iter) $Enumerable_sort_by$94.$$p = null;;
      if ((block !== nil)) {
      } else {
        return $send(self, 'enum_for', ["sort_by"], ($$95 = function(){var self = $$95.$$s == null ? this : $$95.$$s;

        return self.$enumerator_size()}, $$95.$$s = self, $$95.$$arity = 0, $$95))
      };
      dup = $send(self, 'map', [], ($$96 = function(){var self = $$96.$$s == null ? this : $$96.$$s, arg = nil;

      
        arg = $$($nesting, 'Opal').$destructure(arguments);
        return [Opal.yield1(block, arg), arg];}, $$96.$$s = self, $$96.$$arity = 0, $$96));
      $send(dup, 'sort!', [], ($$97 = function(a, b){var self = $$97.$$s == null ? this : $$97.$$s;

      
        
        if (a == null) {
          a = nil;
        };
        
        if (b == null) {
          b = nil;
        };
        return (a[0])['$<=>'](b[0]);}, $$97.$$s = self, $$97.$$arity = 2, $$97));
      return $send(dup, 'map!', [], ($$98 = function(i){var self = $$98.$$s == null ? this : $$98.$$s;

      
        
        if (i == null) {
          i = nil;
        };
        return i[1];;}, $$98.$$s = self, $$98.$$arity = 1, $$98));
    }, $Enumerable_sort_by$94.$$arity = 0);
    
    Opal.def(self, '$sum', $Enumerable_sum$99 = function $$sum(initial) {
      var $$100, $iter = $Enumerable_sum$99.$$p, $yield = $iter || nil, self = this, result = nil;

      if ($iter) $Enumerable_sum$99.$$p = null;
      
      
      if (initial == null) {
        initial = 0;
      };
      result = initial;
      $send(self, 'each', [], ($$100 = function($a){var self = $$100.$$s == null ? this : $$100.$$s, $post_args, args, item = nil;

      
        
        $post_args = Opal.slice.call(arguments, 0, arguments.length);
        
        args = $post_args;;
        item = (function() {if (($yield !== nil)) {
          return Opal.yieldX($yield, Opal.to_a(args));
        } else {
          return $$($nesting, 'Opal').$destructure(args)
        }; return nil; })();
        return (result = $rb_plus(result, item));}, $$100.$$s = self, $$100.$$arity = -1, $$100));
      return result;
    }, $Enumerable_sum$99.$$arity = -1);
    
    Opal.def(self, '$take', $Enumerable_take$101 = function $$take(num) {
      var self = this;

      return self.$first(num)
    }, $Enumerable_take$101.$$arity = 1);
    
    Opal.def(self, '$take_while', $Enumerable_take_while$102 = function $$take_while() {try {

      var $iter = $Enumerable_take_while$102.$$p, block = $iter || nil, $$103, self = this, result = nil;

      if ($iter) $Enumerable_take_while$102.$$p = null;
      
      
      if ($iter) $Enumerable_take_while$102.$$p = null;;
      if ($truthy(block)) {
      } else {
        return self.$enum_for("take_while")
      };
      result = [];
      return $send(self, 'each', [], ($$103 = function($a){var self = $$103.$$s == null ? this : $$103.$$s, $post_args, args, value = nil;

      
        
        $post_args = Opal.slice.call(arguments, 0, arguments.length);
        
        args = $post_args;;
        value = $$($nesting, 'Opal').$destructure(args);
        if ($truthy(Opal.yield1(block, value))) {
        } else {
          Opal.ret(result)
        };
        return result.push(value);;}, $$103.$$s = self, $$103.$$arity = -1, $$103));
      } catch ($returner) { if ($returner === Opal.returner) { return $returner.$v } throw $returner; }
    }, $Enumerable_take_while$102.$$arity = 0);
    
    Opal.def(self, '$uniq', $Enumerable_uniq$104 = function $$uniq() {
      var $iter = $Enumerable_uniq$104.$$p, block = $iter || nil, $$105, self = this, hash = nil;

      if ($iter) $Enumerable_uniq$104.$$p = null;
      
      
      if ($iter) $Enumerable_uniq$104.$$p = null;;
      hash = $hash2([], {});
      $send(self, 'each', [], ($$105 = function($a){var self = $$105.$$s == null ? this : $$105.$$s, $post_args, args, value = nil, produced = nil, $writer = nil;

      
        
        $post_args = Opal.slice.call(arguments, 0, arguments.length);
        
        args = $post_args;;
        value = $$($nesting, 'Opal').$destructure(args);
        produced = (function() {if ((block !== nil)) {
          return Opal.yield1(block, value);
        } else {
          return value
        }; return nil; })();
        if ($truthy(hash['$key?'](produced))) {
          return nil
        } else {
          
          $writer = [produced, value];
          $send(hash, '[]=', Opal.to_a($writer));
          return $writer[$rb_minus($writer["length"], 1)];
        };}, $$105.$$s = self, $$105.$$arity = -1, $$105));
      return hash.$values();
    }, $Enumerable_uniq$104.$$arity = 0);
    Opal.alias(self, "to_a", "entries");
    
    Opal.def(self, '$to_h', $Enumerable_to_h$106 = function $$to_h($a) {
      var $post_args, args, self = this;

      
      
      $post_args = Opal.slice.call(arguments, 0, arguments.length);
      
      args = $post_args;;
      
      var hash = $hash2([], {});

      self.$each.$$p = function() {
        var param = $$($nesting, 'Opal').$destructure(arguments);
        var ary = $$($nesting, 'Opal')['$coerce_to?'](param, $$($nesting, 'Array'), "to_ary"), key, val;
        if (!ary.$$is_array) {
          self.$raise($$($nesting, 'TypeError'), "" + "wrong element type " + ((ary).$class()) + " (expected array)")
        }
        if (ary.length !== 2) {
          self.$raise($$($nesting, 'ArgumentError'), "" + "wrong array length (expected 2, was " + ((ary).$length()) + ")")
        }
        key = ary[0];
        val = ary[1];

        Opal.hash_put(hash, key, val);
      };

      self.$each.apply(self, args);

      return hash;
    ;
    }, $Enumerable_to_h$106.$$arity = -1);
    
    Opal.def(self, '$zip', $Enumerable_zip$107 = function $$zip($a) {
      var $iter = $Enumerable_zip$107.$$p, block = $iter || nil, $post_args, others, self = this;

      if ($iter) $Enumerable_zip$107.$$p = null;
      
      
      if ($iter) $Enumerable_zip$107.$$p = null;;
      
      $post_args = Opal.slice.call(arguments, 0, arguments.length);
      
      others = $post_args;;
      return $send(self.$to_a(), 'zip', Opal.to_a(others));
    }, $Enumerable_zip$107.$$arity = -1);
  })($nesting[0], $nesting)
};

/* Generated by Opal 1.0.0 */
Opal.modules["corelib/enumerator"] = function(Opal) {
  function $rb_plus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs + rhs : lhs['$+'](rhs);
  }
  function $rb_lt(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs < rhs : lhs['$<'](rhs);
  }
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.$$$, $$ = Opal.$$, $breaker = Opal.breaker, $slice = Opal.slice, $falsy = Opal.falsy, $truthy = Opal.truthy, $coerce_to = Opal.coerce_to, $klass = Opal.klass, $send = Opal.send, $send2 = Opal.send2;

  Opal.add_stubs(['$require', '$include', '$allocate', '$new', '$to_proc', '$!', '$respond_to?', '$nil?', '$empty?', '$+', '$class', '$__send__', '$call', '$enum_for', '$size', '$destructure', '$inspect', '$any?', '$[]', '$raise', '$yield', '$each', '$enumerator_size', '$try_convert', '$<', '$===', '$for']);
  
  self.$require("corelib/enumerable");
  return (function($base, $super, $parent_nesting) {
    var self = $klass($base, $super, 'Enumerator');

    var $nesting = [self].concat($parent_nesting), $Enumerator_for$1, $Enumerator_initialize$2, $Enumerator_each$3, $Enumerator_size$4, $Enumerator_with_index$5, $Enumerator_each_with_index$7, $Enumerator_inspect$9;

    self.$$prototype.size = self.$$prototype.args = self.$$prototype.object = self.$$prototype.method = nil;
    
    self.$include($$($nesting, 'Enumerable'));
    self.$$prototype.$$is_enumerator = true;
    Opal.defs(self, '$for', $Enumerator_for$1 = function(object, $a, $b) {
      var $iter = $Enumerator_for$1.$$p, block = $iter || nil, $post_args, method, args, self = this;

      if ($iter) $Enumerator_for$1.$$p = null;
      
      
      if ($iter) $Enumerator_for$1.$$p = null;;
      
      $post_args = Opal.slice.call(arguments, 1, arguments.length);
      
      if ($post_args.length > 0) {
        method = $post_args[0];
        $post_args.splice(0, 1);
      }
      if (method == null) {
        method = "each";
      };
      
      args = $post_args;;
      
      var obj = self.$allocate();

      obj.object = object;
      obj.size   = block;
      obj.method = method;
      obj.args   = args;

      return obj;
    ;
    }, $Enumerator_for$1.$$arity = -2);
    
    Opal.def(self, '$initialize', $Enumerator_initialize$2 = function $$initialize($a) {
      var $iter = $Enumerator_initialize$2.$$p, block = $iter || nil, $post_args, $b, self = this;

      if ($iter) $Enumerator_initialize$2.$$p = null;
      
      
      if ($iter) $Enumerator_initialize$2.$$p = null;;
      
      $post_args = Opal.slice.call(arguments, 0, arguments.length);
      ;
      if ($truthy(block)) {
        
        self.object = $send($$($nesting, 'Generator'), 'new', [], block.$to_proc());
        self.method = "each";
        self.args = [];
        self.size = arguments[0] || nil;
        if ($truthy(($truthy($b = self.size) ? self.size['$respond_to?']("call")['$!']() : $b))) {
          return (self.size = $coerce_to(self.size, $$($nesting, 'Integer'), 'to_int'))
        } else {
          return nil
        };
      } else {
        
        self.object = arguments[0];
        self.method = arguments[1] || "each";
        self.args = $slice.call(arguments, 2);
        return (self.size = nil);
      };
    }, $Enumerator_initialize$2.$$arity = -1);
    
    Opal.def(self, '$each', $Enumerator_each$3 = function $$each($a) {
      var $iter = $Enumerator_each$3.$$p, block = $iter || nil, $post_args, args, $b, self = this;

      if ($iter) $Enumerator_each$3.$$p = null;
      
      
      if ($iter) $Enumerator_each$3.$$p = null;;
      
      $post_args = Opal.slice.call(arguments, 0, arguments.length);
      
      args = $post_args;;
      if ($truthy(($truthy($b = block['$nil?']()) ? args['$empty?']() : $b))) {
        return self};
      args = $rb_plus(self.args, args);
      if ($truthy(block['$nil?']())) {
        return $send(self.$class(), 'new', [self.object, self.method].concat(Opal.to_a(args)))};
      return $send(self.object, '__send__', [self.method].concat(Opal.to_a(args)), block.$to_proc());
    }, $Enumerator_each$3.$$arity = -1);
    
    Opal.def(self, '$size', $Enumerator_size$4 = function $$size() {
      var self = this;

      if ($truthy(self.size['$respond_to?']("call"))) {
        return $send(self.size, 'call', Opal.to_a(self.args))
      } else {
        return self.size
      }
    }, $Enumerator_size$4.$$arity = 0);
    
    Opal.def(self, '$with_index', $Enumerator_with_index$5 = function $$with_index(offset) {
      var $iter = $Enumerator_with_index$5.$$p, block = $iter || nil, $$6, self = this;

      if ($iter) $Enumerator_with_index$5.$$p = null;
      
      
      if ($iter) $Enumerator_with_index$5.$$p = null;;
      
      if (offset == null) {
        offset = 0;
      };
      offset = (function() {if ($truthy(offset)) {
        return $coerce_to(offset, $$($nesting, 'Integer'), 'to_int')
      } else {
        return 0
      }; return nil; })();
      if ($truthy(block)) {
      } else {
        return $send(self, 'enum_for', ["with_index", offset], ($$6 = function(){var self = $$6.$$s == null ? this : $$6.$$s;

        return self.$size()}, $$6.$$s = self, $$6.$$arity = 0, $$6))
      };
      
      var result, index = offset;

      self.$each.$$p = function() {
        var param = $$($nesting, 'Opal').$destructure(arguments),
            value = block(param, index);

        index++;

        return value;
      }

      return self.$each();
    ;
    }, $Enumerator_with_index$5.$$arity = -1);
    Opal.alias(self, "with_object", "each_with_object");
    
    Opal.def(self, '$each_with_index', $Enumerator_each_with_index$7 = function $$each_with_index() {
      var $iter = $Enumerator_each_with_index$7.$$p, block = $iter || nil, $$8, self = this, $zuper = nil, $zuper_i = nil, $zuper_ii = nil;

      if ($iter) $Enumerator_each_with_index$7.$$p = null;
      // Prepare super implicit arguments
      for($zuper_i = 0, $zuper_ii = arguments.length, $zuper = new Array($zuper_ii); $zuper_i < $zuper_ii; $zuper_i++) {
        $zuper[$zuper_i] = arguments[$zuper_i];
      }
      
      
      if ($iter) $Enumerator_each_with_index$7.$$p = null;;
      if ((block !== nil)) {
      } else {
        return $send(self, 'enum_for', ["each_with_index"], ($$8 = function(){var self = $$8.$$s == null ? this : $$8.$$s;

        return self.$size()}, $$8.$$s = self, $$8.$$arity = 0, $$8))
      };
      $send2(self, Opal.find_super_dispatcher(self, 'each_with_index', $Enumerator_each_with_index$7, false, true), 'each_with_index', $zuper, $iter);
      return self.object;
    }, $Enumerator_each_with_index$7.$$arity = 0);
    
    Opal.def(self, '$inspect', $Enumerator_inspect$9 = function $$inspect() {
      var self = this, result = nil;

      
      result = "" + "#<" + (self.$class()) + ": " + (self.object.$inspect()) + ":" + (self.method);
      if ($truthy(self.args['$any?']())) {
        result = $rb_plus(result, "" + "(" + (self.args.$inspect()['$[]']($$($nesting, 'Range').$new(1, -2))) + ")")};
      return $rb_plus(result, ">");
    }, $Enumerator_inspect$9.$$arity = 0);
    (function($base, $super, $parent_nesting) {
      var self = $klass($base, $super, 'Generator');

      var $nesting = [self].concat($parent_nesting), $Generator_initialize$10, $Generator_each$11;

      self.$$prototype.block = nil;
      
      self.$include($$($nesting, 'Enumerable'));
      
      Opal.def(self, '$initialize', $Generator_initialize$10 = function $$initialize() {
        var $iter = $Generator_initialize$10.$$p, block = $iter || nil, self = this;

        if ($iter) $Generator_initialize$10.$$p = null;
        
        
        if ($iter) $Generator_initialize$10.$$p = null;;
        if ($truthy(block)) {
        } else {
          self.$raise($$($nesting, 'LocalJumpError'), "no block given")
        };
        return (self.block = block);
      }, $Generator_initialize$10.$$arity = 0);
      return (Opal.def(self, '$each', $Generator_each$11 = function $$each($a) {
        var $iter = $Generator_each$11.$$p, block = $iter || nil, $post_args, args, self = this, yielder = nil;

        if ($iter) $Generator_each$11.$$p = null;
        
        
        if ($iter) $Generator_each$11.$$p = null;;
        
        $post_args = Opal.slice.call(arguments, 0, arguments.length);
        
        args = $post_args;;
        yielder = $send($$($nesting, 'Yielder'), 'new', [], block.$to_proc());
        
        try {
          args.unshift(yielder);

          Opal.yieldX(self.block, args);
        }
        catch (e) {
          if (e === $breaker) {
            return $breaker.$v;
          }
          else {
            throw e;
          }
        }
      ;
        return self;
      }, $Generator_each$11.$$arity = -1), nil) && 'each';
    })($nesting[0], null, $nesting);
    (function($base, $super, $parent_nesting) {
      var self = $klass($base, $super, 'Yielder');

      var $nesting = [self].concat($parent_nesting), $Yielder_initialize$12, $Yielder_yield$13, $Yielder_$lt$lt$14;

      self.$$prototype.block = nil;
      
      
      Opal.def(self, '$initialize', $Yielder_initialize$12 = function $$initialize() {
        var $iter = $Yielder_initialize$12.$$p, block = $iter || nil, self = this;

        if ($iter) $Yielder_initialize$12.$$p = null;
        
        
        if ($iter) $Yielder_initialize$12.$$p = null;;
        return (self.block = block);
      }, $Yielder_initialize$12.$$arity = 0);
      
      Opal.def(self, '$yield', $Yielder_yield$13 = function($a) {
        var $post_args, values, self = this;

        
        
        $post_args = Opal.slice.call(arguments, 0, arguments.length);
        
        values = $post_args;;
        
        var value = Opal.yieldX(self.block, values);

        if (value === $breaker) {
          throw $breaker;
        }

        return value;
      ;
      }, $Yielder_yield$13.$$arity = -1);
      return (Opal.def(self, '$<<', $Yielder_$lt$lt$14 = function($a) {
        var $post_args, values, self = this;

        
        
        $post_args = Opal.slice.call(arguments, 0, arguments.length);
        
        values = $post_args;;
        $send(self, 'yield', Opal.to_a(values));
        return self;
      }, $Yielder_$lt$lt$14.$$arity = -1), nil) && '<<';
    })($nesting[0], null, $nesting);
    return (function($base, $super, $parent_nesting) {
      var self = $klass($base, $super, 'Lazy');

      var $nesting = [self].concat($parent_nesting), $Lazy_initialize$15, $Lazy_lazy$18, $Lazy_collect$19, $Lazy_collect_concat$21, $Lazy_drop$25, $Lazy_drop_while$27, $Lazy_enum_for$29, $Lazy_find_all$30, $Lazy_grep$32, $Lazy_reject$35, $Lazy_take$37, $Lazy_take_while$39, $Lazy_inspect$41;

      self.$$prototype.enumerator = nil;
      
      (function($base, $super, $parent_nesting) {
        var self = $klass($base, $super, 'StopLazyError');

        var $nesting = [self].concat($parent_nesting);

        return nil
      })($nesting[0], $$($nesting, 'Exception'), $nesting);
      
      Opal.def(self, '$initialize', $Lazy_initialize$15 = function $$initialize(object, size) {
        var $iter = $Lazy_initialize$15.$$p, block = $iter || nil, $$16, self = this;

        if ($iter) $Lazy_initialize$15.$$p = null;
        
        
        if ($iter) $Lazy_initialize$15.$$p = null;;
        
        if (size == null) {
          size = nil;
        };
        if ((block !== nil)) {
        } else {
          self.$raise($$($nesting, 'ArgumentError'), "tried to call lazy new without a block")
        };
        self.enumerator = object;
        return $send2(self, Opal.find_super_dispatcher(self, 'initialize', $Lazy_initialize$15, false, true), 'initialize', [size], ($$16 = function(yielder, $a){var self = $$16.$$s == null ? this : $$16.$$s, $post_args, each_args, $$17;

        
          
          if (yielder == null) {
            yielder = nil;
          };
          
          $post_args = Opal.slice.call(arguments, 1, arguments.length);
          
          each_args = $post_args;;
          try {
            return $send(object, 'each', Opal.to_a(each_args), ($$17 = function($b){var self = $$17.$$s == null ? this : $$17.$$s, $post_args, args;

            
              
              $post_args = Opal.slice.call(arguments, 0, arguments.length);
              
              args = $post_args;;
              
            args.unshift(yielder);

            Opal.yieldX(block, args);
          ;}, $$17.$$s = self, $$17.$$arity = -1, $$17))
          } catch ($err) {
            if (Opal.rescue($err, [$$($nesting, 'Exception')])) {
              try {
                return nil
              } finally { Opal.pop_exception() }
            } else { throw $err; }
          };}, $$16.$$s = self, $$16.$$arity = -2, $$16));
      }, $Lazy_initialize$15.$$arity = -2);
      Opal.alias(self, "force", "to_a");
      
      Opal.def(self, '$lazy', $Lazy_lazy$18 = function $$lazy() {
        var self = this;

        return self
      }, $Lazy_lazy$18.$$arity = 0);
      
      Opal.def(self, '$collect', $Lazy_collect$19 = function $$collect() {
        var $iter = $Lazy_collect$19.$$p, block = $iter || nil, $$20, self = this;

        if ($iter) $Lazy_collect$19.$$p = null;
        
        
        if ($iter) $Lazy_collect$19.$$p = null;;
        if ($truthy(block)) {
        } else {
          self.$raise($$($nesting, 'ArgumentError'), "tried to call lazy map without a block")
        };
        return $send($$($nesting, 'Lazy'), 'new', [self, self.$enumerator_size()], ($$20 = function(enum$, $a){var self = $$20.$$s == null ? this : $$20.$$s, $post_args, args;

        
          
          if (enum$ == null) {
            enum$ = nil;
          };
          
          $post_args = Opal.slice.call(arguments, 1, arguments.length);
          
          args = $post_args;;
          
          var value = Opal.yieldX(block, args);

          enum$.$yield(value);
        ;}, $$20.$$s = self, $$20.$$arity = -2, $$20));
      }, $Lazy_collect$19.$$arity = 0);
      
      Opal.def(self, '$collect_concat', $Lazy_collect_concat$21 = function $$collect_concat() {
        var $iter = $Lazy_collect_concat$21.$$p, block = $iter || nil, $$22, self = this;

        if ($iter) $Lazy_collect_concat$21.$$p = null;
        
        
        if ($iter) $Lazy_collect_concat$21.$$p = null;;
        if ($truthy(block)) {
        } else {
          self.$raise($$($nesting, 'ArgumentError'), "tried to call lazy map without a block")
        };
        return $send($$($nesting, 'Lazy'), 'new', [self, nil], ($$22 = function(enum$, $a){var self = $$22.$$s == null ? this : $$22.$$s, $post_args, args, $$23, $$24;

        
          
          if (enum$ == null) {
            enum$ = nil;
          };
          
          $post_args = Opal.slice.call(arguments, 1, arguments.length);
          
          args = $post_args;;
          
          var value = Opal.yieldX(block, args);

          if ((value)['$respond_to?']("force") && (value)['$respond_to?']("each")) {
            $send((value), 'each', [], ($$23 = function(v){var self = $$23.$$s == null ? this : $$23.$$s;

          
            
            if (v == null) {
              v = nil;
            };
            return enum$.$yield(v);}, $$23.$$s = self, $$23.$$arity = 1, $$23))
          }
          else {
            var array = $$($nesting, 'Opal').$try_convert(value, $$($nesting, 'Array'), "to_ary");

            if (array === nil) {
              enum$.$yield(value);
            }
            else {
              $send((value), 'each', [], ($$24 = function(v){var self = $$24.$$s == null ? this : $$24.$$s;

          
            
            if (v == null) {
              v = nil;
            };
            return enum$.$yield(v);}, $$24.$$s = self, $$24.$$arity = 1, $$24));
            }
          }
        ;}, $$22.$$s = self, $$22.$$arity = -2, $$22));
      }, $Lazy_collect_concat$21.$$arity = 0);
      
      Opal.def(self, '$drop', $Lazy_drop$25 = function $$drop(n) {
        var $$26, self = this, current_size = nil, set_size = nil, dropped = nil;

        
        n = $coerce_to(n, $$($nesting, 'Integer'), 'to_int');
        if ($truthy($rb_lt(n, 0))) {
          self.$raise($$($nesting, 'ArgumentError'), "attempt to drop negative size")};
        current_size = self.$enumerator_size();
        set_size = (function() {if ($truthy($$($nesting, 'Integer')['$==='](current_size))) {
          if ($truthy($rb_lt(n, current_size))) {
            return n
          } else {
            return current_size
          }
        } else {
          return current_size
        }; return nil; })();
        dropped = 0;
        return $send($$($nesting, 'Lazy'), 'new', [self, set_size], ($$26 = function(enum$, $a){var self = $$26.$$s == null ? this : $$26.$$s, $post_args, args;

        
          
          if (enum$ == null) {
            enum$ = nil;
          };
          
          $post_args = Opal.slice.call(arguments, 1, arguments.length);
          
          args = $post_args;;
          if ($truthy($rb_lt(dropped, n))) {
            return (dropped = $rb_plus(dropped, 1))
          } else {
            return $send(enum$, 'yield', Opal.to_a(args))
          };}, $$26.$$s = self, $$26.$$arity = -2, $$26));
      }, $Lazy_drop$25.$$arity = 1);
      
      Opal.def(self, '$drop_while', $Lazy_drop_while$27 = function $$drop_while() {
        var $iter = $Lazy_drop_while$27.$$p, block = $iter || nil, $$28, self = this, succeeding = nil;

        if ($iter) $Lazy_drop_while$27.$$p = null;
        
        
        if ($iter) $Lazy_drop_while$27.$$p = null;;
        if ($truthy(block)) {
        } else {
          self.$raise($$($nesting, 'ArgumentError'), "tried to call lazy drop_while without a block")
        };
        succeeding = true;
        return $send($$($nesting, 'Lazy'), 'new', [self, nil], ($$28 = function(enum$, $a){var self = $$28.$$s == null ? this : $$28.$$s, $post_args, args;

        
          
          if (enum$ == null) {
            enum$ = nil;
          };
          
          $post_args = Opal.slice.call(arguments, 1, arguments.length);
          
          args = $post_args;;
          if ($truthy(succeeding)) {
            
            var value = Opal.yieldX(block, args);

            if ($falsy(value)) {
              succeeding = false;

              $send(enum$, 'yield', Opal.to_a(args));
            }
          
          } else {
            return $send(enum$, 'yield', Opal.to_a(args))
          };}, $$28.$$s = self, $$28.$$arity = -2, $$28));
      }, $Lazy_drop_while$27.$$arity = 0);
      
      Opal.def(self, '$enum_for', $Lazy_enum_for$29 = function $$enum_for($a, $b) {
        var $iter = $Lazy_enum_for$29.$$p, block = $iter || nil, $post_args, method, args, self = this;

        if ($iter) $Lazy_enum_for$29.$$p = null;
        
        
        if ($iter) $Lazy_enum_for$29.$$p = null;;
        
        $post_args = Opal.slice.call(arguments, 0, arguments.length);
        
        if ($post_args.length > 0) {
          method = $post_args[0];
          $post_args.splice(0, 1);
        }
        if (method == null) {
          method = "each";
        };
        
        args = $post_args;;
        return $send(self.$class(), 'for', [self, method].concat(Opal.to_a(args)), block.$to_proc());
      }, $Lazy_enum_for$29.$$arity = -1);
      
      Opal.def(self, '$find_all', $Lazy_find_all$30 = function $$find_all() {
        var $iter = $Lazy_find_all$30.$$p, block = $iter || nil, $$31, self = this;

        if ($iter) $Lazy_find_all$30.$$p = null;
        
        
        if ($iter) $Lazy_find_all$30.$$p = null;;
        if ($truthy(block)) {
        } else {
          self.$raise($$($nesting, 'ArgumentError'), "tried to call lazy select without a block")
        };
        return $send($$($nesting, 'Lazy'), 'new', [self, nil], ($$31 = function(enum$, $a){var self = $$31.$$s == null ? this : $$31.$$s, $post_args, args;

        
          
          if (enum$ == null) {
            enum$ = nil;
          };
          
          $post_args = Opal.slice.call(arguments, 1, arguments.length);
          
          args = $post_args;;
          
          var value = Opal.yieldX(block, args);

          if ($truthy(value)) {
            $send(enum$, 'yield', Opal.to_a(args));
          }
        ;}, $$31.$$s = self, $$31.$$arity = -2, $$31));
      }, $Lazy_find_all$30.$$arity = 0);
      Opal.alias(self, "flat_map", "collect_concat");
      
      Opal.def(self, '$grep', $Lazy_grep$32 = function $$grep(pattern) {
        var $iter = $Lazy_grep$32.$$p, block = $iter || nil, $$33, $$34, self = this;

        if ($iter) $Lazy_grep$32.$$p = null;
        
        
        if ($iter) $Lazy_grep$32.$$p = null;;
        if ($truthy(block)) {
          return $send($$($nesting, 'Lazy'), 'new', [self, nil], ($$33 = function(enum$, $a){var self = $$33.$$s == null ? this : $$33.$$s, $post_args, args;

          
            
            if (enum$ == null) {
              enum$ = nil;
            };
            
            $post_args = Opal.slice.call(arguments, 1, arguments.length);
            
            args = $post_args;;
            
            var param = $$($nesting, 'Opal').$destructure(args),
                value = pattern['$==='](param);

            if ($truthy(value)) {
              value = Opal.yield1(block, param);

              enum$.$yield(Opal.yield1(block, param));
            }
          ;}, $$33.$$s = self, $$33.$$arity = -2, $$33))
        } else {
          return $send($$($nesting, 'Lazy'), 'new', [self, nil], ($$34 = function(enum$, $a){var self = $$34.$$s == null ? this : $$34.$$s, $post_args, args;

          
            
            if (enum$ == null) {
              enum$ = nil;
            };
            
            $post_args = Opal.slice.call(arguments, 1, arguments.length);
            
            args = $post_args;;
            
            var param = $$($nesting, 'Opal').$destructure(args),
                value = pattern['$==='](param);

            if ($truthy(value)) {
              enum$.$yield(param);
            }
          ;}, $$34.$$s = self, $$34.$$arity = -2, $$34))
        };
      }, $Lazy_grep$32.$$arity = 1);
      Opal.alias(self, "map", "collect");
      Opal.alias(self, "select", "find_all");
      
      Opal.def(self, '$reject', $Lazy_reject$35 = function $$reject() {
        var $iter = $Lazy_reject$35.$$p, block = $iter || nil, $$36, self = this;

        if ($iter) $Lazy_reject$35.$$p = null;
        
        
        if ($iter) $Lazy_reject$35.$$p = null;;
        if ($truthy(block)) {
        } else {
          self.$raise($$($nesting, 'ArgumentError'), "tried to call lazy reject without a block")
        };
        return $send($$($nesting, 'Lazy'), 'new', [self, nil], ($$36 = function(enum$, $a){var self = $$36.$$s == null ? this : $$36.$$s, $post_args, args;

        
          
          if (enum$ == null) {
            enum$ = nil;
          };
          
          $post_args = Opal.slice.call(arguments, 1, arguments.length);
          
          args = $post_args;;
          
          var value = Opal.yieldX(block, args);

          if ($falsy(value)) {
            $send(enum$, 'yield', Opal.to_a(args));
          }
        ;}, $$36.$$s = self, $$36.$$arity = -2, $$36));
      }, $Lazy_reject$35.$$arity = 0);
      
      Opal.def(self, '$take', $Lazy_take$37 = function $$take(n) {
        var $$38, self = this, current_size = nil, set_size = nil, taken = nil;

        
        n = $coerce_to(n, $$($nesting, 'Integer'), 'to_int');
        if ($truthy($rb_lt(n, 0))) {
          self.$raise($$($nesting, 'ArgumentError'), "attempt to take negative size")};
        current_size = self.$enumerator_size();
        set_size = (function() {if ($truthy($$($nesting, 'Integer')['$==='](current_size))) {
          if ($truthy($rb_lt(n, current_size))) {
            return n
          } else {
            return current_size
          }
        } else {
          return current_size
        }; return nil; })();
        taken = 0;
        return $send($$($nesting, 'Lazy'), 'new', [self, set_size], ($$38 = function(enum$, $a){var self = $$38.$$s == null ? this : $$38.$$s, $post_args, args;

        
          
          if (enum$ == null) {
            enum$ = nil;
          };
          
          $post_args = Opal.slice.call(arguments, 1, arguments.length);
          
          args = $post_args;;
          if ($truthy($rb_lt(taken, n))) {
            
            $send(enum$, 'yield', Opal.to_a(args));
            return (taken = $rb_plus(taken, 1));
          } else {
            return self.$raise($$($nesting, 'StopLazyError'))
          };}, $$38.$$s = self, $$38.$$arity = -2, $$38));
      }, $Lazy_take$37.$$arity = 1);
      
      Opal.def(self, '$take_while', $Lazy_take_while$39 = function $$take_while() {
        var $iter = $Lazy_take_while$39.$$p, block = $iter || nil, $$40, self = this;

        if ($iter) $Lazy_take_while$39.$$p = null;
        
        
        if ($iter) $Lazy_take_while$39.$$p = null;;
        if ($truthy(block)) {
        } else {
          self.$raise($$($nesting, 'ArgumentError'), "tried to call lazy take_while without a block")
        };
        return $send($$($nesting, 'Lazy'), 'new', [self, nil], ($$40 = function(enum$, $a){var self = $$40.$$s == null ? this : $$40.$$s, $post_args, args;

        
          
          if (enum$ == null) {
            enum$ = nil;
          };
          
          $post_args = Opal.slice.call(arguments, 1, arguments.length);
          
          args = $post_args;;
          
          var value = Opal.yieldX(block, args);

          if ($truthy(value)) {
            $send(enum$, 'yield', Opal.to_a(args));
          }
          else {
            self.$raise($$($nesting, 'StopLazyError'));
          }
        ;}, $$40.$$s = self, $$40.$$arity = -2, $$40));
      }, $Lazy_take_while$39.$$arity = 0);
      Opal.alias(self, "to_enum", "enum_for");
      return (Opal.def(self, '$inspect', $Lazy_inspect$41 = function $$inspect() {
        var self = this;

        return "" + "#<" + (self.$class()) + ": " + (self.enumerator.$inspect()) + ">"
      }, $Lazy_inspect$41.$$arity = 0), nil) && 'inspect';
    })($nesting[0], self, $nesting);
  })($nesting[0], null, $nesting);
};

/* Generated by Opal 1.0.0 */
Opal.modules["corelib/numeric"] = function(Opal) {
  function $rb_minus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs - rhs : lhs['$-'](rhs);
  }
  function $rb_times(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs * rhs : lhs['$*'](rhs);
  }
  function $rb_lt(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs < rhs : lhs['$<'](rhs);
  }
  function $rb_divide(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs / rhs : lhs['$/'](rhs);
  }
  function $rb_gt(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs > rhs : lhs['$>'](rhs);
  }
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.$$$, $$ = Opal.$$, $klass = Opal.klass, $truthy = Opal.truthy, $hash2 = Opal.hash2;

  Opal.add_stubs(['$require', '$include', '$instance_of?', '$class', '$Float', '$respond_to?', '$coerce', '$__send__', '$===', '$raise', '$equal?', '$-', '$*', '$div', '$<', '$-@', '$ceil', '$to_f', '$denominator', '$to_r', '$==', '$floor', '$/', '$%', '$Complex', '$zero?', '$numerator', '$abs', '$arg', '$coerce_to!', '$round', '$to_i', '$truncate', '$>']);
  
  self.$require("corelib/comparable");
  return (function($base, $super, $parent_nesting) {
    var self = $klass($base, $super, 'Numeric');

    var $nesting = [self].concat($parent_nesting), $Numeric_coerce$1, $Numeric___coerced__$2, $Numeric_$lt_eq_gt$3, $Numeric_$plus$$4, $Numeric_$minus$$5, $Numeric_$percent$6, $Numeric_abs$7, $Numeric_abs2$8, $Numeric_angle$9, $Numeric_ceil$10, $Numeric_conj$11, $Numeric_denominator$12, $Numeric_div$13, $Numeric_divmod$14, $Numeric_fdiv$15, $Numeric_floor$16, $Numeric_i$17, $Numeric_imag$18, $Numeric_integer$ques$19, $Numeric_nonzero$ques$20, $Numeric_numerator$21, $Numeric_polar$22, $Numeric_quo$23, $Numeric_real$24, $Numeric_real$ques$25, $Numeric_rect$26, $Numeric_round$27, $Numeric_to_c$28, $Numeric_to_int$29, $Numeric_truncate$30, $Numeric_zero$ques$31, $Numeric_positive$ques$32, $Numeric_negative$ques$33, $Numeric_dup$34, $Numeric_clone$35, $Numeric_finite$ques$36, $Numeric_infinite$ques$37;

    
    self.$include($$($nesting, 'Comparable'));
    
    Opal.def(self, '$coerce', $Numeric_coerce$1 = function $$coerce(other) {
      var self = this;

      
      if ($truthy(other['$instance_of?'](self.$class()))) {
        return [other, self]};
      return [self.$Float(other), self.$Float(self)];
    }, $Numeric_coerce$1.$$arity = 1);
    
    Opal.def(self, '$__coerced__', $Numeric___coerced__$2 = function $$__coerced__(method, other) {
      var $a, $b, self = this, a = nil, b = nil, $case = nil;

      if ($truthy(other['$respond_to?']("coerce"))) {
        
        $b = other.$coerce(self), $a = Opal.to_ary($b), (a = ($a[0] == null ? nil : $a[0])), (b = ($a[1] == null ? nil : $a[1])), $b;
        return a.$__send__(method, b);
      } else {
        return (function() {$case = method;
        if ("+"['$===']($case) || "-"['$===']($case) || "*"['$===']($case) || "/"['$===']($case) || "%"['$===']($case) || "&"['$===']($case) || "|"['$===']($case) || "^"['$===']($case) || "**"['$===']($case)) {return self.$raise($$($nesting, 'TypeError'), "" + (other.$class()) + " can't be coerced into Numeric")}
        else if (">"['$===']($case) || ">="['$===']($case) || "<"['$===']($case) || "<="['$===']($case) || "<=>"['$===']($case)) {return self.$raise($$($nesting, 'ArgumentError'), "" + "comparison of " + (self.$class()) + " with " + (other.$class()) + " failed")}
        else { return nil }})()
      }
    }, $Numeric___coerced__$2.$$arity = 2);
    
    Opal.def(self, '$<=>', $Numeric_$lt_eq_gt$3 = function(other) {
      var self = this;

      
      if ($truthy(self['$equal?'](other))) {
        return 0};
      return nil;
    }, $Numeric_$lt_eq_gt$3.$$arity = 1);
    
    Opal.def(self, '$+@', $Numeric_$plus$$4 = function() {
      var self = this;

      return self
    }, $Numeric_$plus$$4.$$arity = 0);
    
    Opal.def(self, '$-@', $Numeric_$minus$$5 = function() {
      var self = this;

      return $rb_minus(0, self)
    }, $Numeric_$minus$$5.$$arity = 0);
    
    Opal.def(self, '$%', $Numeric_$percent$6 = function(other) {
      var self = this;

      return $rb_minus(self, $rb_times(other, self.$div(other)))
    }, $Numeric_$percent$6.$$arity = 1);
    
    Opal.def(self, '$abs', $Numeric_abs$7 = function $$abs() {
      var self = this;

      if ($rb_lt(self, 0)) {
        return self['$-@']()
      } else {
        return self
      }
    }, $Numeric_abs$7.$$arity = 0);
    
    Opal.def(self, '$abs2', $Numeric_abs2$8 = function $$abs2() {
      var self = this;

      return $rb_times(self, self)
    }, $Numeric_abs2$8.$$arity = 0);
    
    Opal.def(self, '$angle', $Numeric_angle$9 = function $$angle() {
      var self = this;

      if ($rb_lt(self, 0)) {
        return $$$($$($nesting, 'Math'), 'PI')
      } else {
        return 0
      }
    }, $Numeric_angle$9.$$arity = 0);
    Opal.alias(self, "arg", "angle");
    
    Opal.def(self, '$ceil', $Numeric_ceil$10 = function $$ceil(ndigits) {
      var self = this;

      
      
      if (ndigits == null) {
        ndigits = 0;
      };
      return self.$to_f().$ceil(ndigits);
    }, $Numeric_ceil$10.$$arity = -1);
    
    Opal.def(self, '$conj', $Numeric_conj$11 = function $$conj() {
      var self = this;

      return self
    }, $Numeric_conj$11.$$arity = 0);
    Opal.alias(self, "conjugate", "conj");
    
    Opal.def(self, '$denominator', $Numeric_denominator$12 = function $$denominator() {
      var self = this;

      return self.$to_r().$denominator()
    }, $Numeric_denominator$12.$$arity = 0);
    
    Opal.def(self, '$div', $Numeric_div$13 = function $$div(other) {
      var self = this;

      
      if (other['$=='](0)) {
        self.$raise($$($nesting, 'ZeroDivisionError'), "divided by o")};
      return $rb_divide(self, other).$floor();
    }, $Numeric_div$13.$$arity = 1);
    
    Opal.def(self, '$divmod', $Numeric_divmod$14 = function $$divmod(other) {
      var self = this;

      return [self.$div(other), self['$%'](other)]
    }, $Numeric_divmod$14.$$arity = 1);
    
    Opal.def(self, '$fdiv', $Numeric_fdiv$15 = function $$fdiv(other) {
      var self = this;

      return $rb_divide(self.$to_f(), other)
    }, $Numeric_fdiv$15.$$arity = 1);
    
    Opal.def(self, '$floor', $Numeric_floor$16 = function $$floor(ndigits) {
      var self = this;

      
      
      if (ndigits == null) {
        ndigits = 0;
      };
      return self.$to_f().$floor(ndigits);
    }, $Numeric_floor$16.$$arity = -1);
    
    Opal.def(self, '$i', $Numeric_i$17 = function $$i() {
      var self = this;

      return self.$Complex(0, self)
    }, $Numeric_i$17.$$arity = 0);
    
    Opal.def(self, '$imag', $Numeric_imag$18 = function $$imag() {
      var self = this;

      return 0
    }, $Numeric_imag$18.$$arity = 0);
    Opal.alias(self, "imaginary", "imag");
    
    Opal.def(self, '$integer?', $Numeric_integer$ques$19 = function() {
      var self = this;

      return false
    }, $Numeric_integer$ques$19.$$arity = 0);
    Opal.alias(self, "magnitude", "abs");
    Opal.alias(self, "modulo", "%");
    
    Opal.def(self, '$nonzero?', $Numeric_nonzero$ques$20 = function() {
      var self = this;

      if ($truthy(self['$zero?']())) {
        return nil
      } else {
        return self
      }
    }, $Numeric_nonzero$ques$20.$$arity = 0);
    
    Opal.def(self, '$numerator', $Numeric_numerator$21 = function $$numerator() {
      var self = this;

      return self.$to_r().$numerator()
    }, $Numeric_numerator$21.$$arity = 0);
    Opal.alias(self, "phase", "arg");
    
    Opal.def(self, '$polar', $Numeric_polar$22 = function $$polar() {
      var self = this;

      return [self.$abs(), self.$arg()]
    }, $Numeric_polar$22.$$arity = 0);
    
    Opal.def(self, '$quo', $Numeric_quo$23 = function $$quo(other) {
      var self = this;

      return $rb_divide($$($nesting, 'Opal')['$coerce_to!'](self, $$($nesting, 'Rational'), "to_r"), other)
    }, $Numeric_quo$23.$$arity = 1);
    
    Opal.def(self, '$real', $Numeric_real$24 = function $$real() {
      var self = this;

      return self
    }, $Numeric_real$24.$$arity = 0);
    
    Opal.def(self, '$real?', $Numeric_real$ques$25 = function() {
      var self = this;

      return true
    }, $Numeric_real$ques$25.$$arity = 0);
    
    Opal.def(self, '$rect', $Numeric_rect$26 = function $$rect() {
      var self = this;

      return [self, 0]
    }, $Numeric_rect$26.$$arity = 0);
    Opal.alias(self, "rectangular", "rect");
    
    Opal.def(self, '$round', $Numeric_round$27 = function $$round(digits) {
      var self = this;

      
      ;
      return self.$to_f().$round(digits);
    }, $Numeric_round$27.$$arity = -1);
    
    Opal.def(self, '$to_c', $Numeric_to_c$28 = function $$to_c() {
      var self = this;

      return self.$Complex(self, 0)
    }, $Numeric_to_c$28.$$arity = 0);
    
    Opal.def(self, '$to_int', $Numeric_to_int$29 = function $$to_int() {
      var self = this;

      return self.$to_i()
    }, $Numeric_to_int$29.$$arity = 0);
    
    Opal.def(self, '$truncate', $Numeric_truncate$30 = function $$truncate(ndigits) {
      var self = this;

      
      
      if (ndigits == null) {
        ndigits = 0;
      };
      return self.$to_f().$truncate(ndigits);
    }, $Numeric_truncate$30.$$arity = -1);
    
    Opal.def(self, '$zero?', $Numeric_zero$ques$31 = function() {
      var self = this;

      return self['$=='](0)
    }, $Numeric_zero$ques$31.$$arity = 0);
    
    Opal.def(self, '$positive?', $Numeric_positive$ques$32 = function() {
      var self = this;

      return $rb_gt(self, 0)
    }, $Numeric_positive$ques$32.$$arity = 0);
    
    Opal.def(self, '$negative?', $Numeric_negative$ques$33 = function() {
      var self = this;

      return $rb_lt(self, 0)
    }, $Numeric_negative$ques$33.$$arity = 0);
    
    Opal.def(self, '$dup', $Numeric_dup$34 = function $$dup() {
      var self = this;

      return self
    }, $Numeric_dup$34.$$arity = 0);
    
    Opal.def(self, '$clone', $Numeric_clone$35 = function $$clone($kwargs) {
      var freeze, self = this;

      
      
      if ($kwargs == null) {
        $kwargs = $hash2([], {});
      } else if (!$kwargs.$$is_hash) {
        throw Opal.ArgumentError.$new('expected kwargs');
      };
      
      freeze = $kwargs.$$smap["freeze"];
      if (freeze == null) {
        freeze = true
      };
      return self;
    }, $Numeric_clone$35.$$arity = -1);
    
    Opal.def(self, '$finite?', $Numeric_finite$ques$36 = function() {
      var self = this;

      return true
    }, $Numeric_finite$ques$36.$$arity = 0);
    return (Opal.def(self, '$infinite?', $Numeric_infinite$ques$37 = function() {
      var self = this;

      return nil
    }, $Numeric_infinite$ques$37.$$arity = 0), nil) && 'infinite?';
  })($nesting[0], null, $nesting);
};

/* Generated by Opal 1.0.0 */
Opal.modules["corelib/array"] = function(Opal) {
  function $rb_gt(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs > rhs : lhs['$>'](rhs);
  }
  function $rb_times(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs * rhs : lhs['$*'](rhs);
  }
  function $rb_ge(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs >= rhs : lhs['$>='](rhs);
  }
  function $rb_lt(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs < rhs : lhs['$<'](rhs);
  }
  function $rb_minus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs - rhs : lhs['$-'](rhs);
  }
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.$$$, $$ = Opal.$$, $truthy = Opal.truthy, $falsy = Opal.falsy, $hash_ids = Opal.hash_ids, $yield1 = Opal.yield1, $hash_get = Opal.hash_get, $hash_put = Opal.hash_put, $hash_delete = Opal.hash_delete, $coerce_to = Opal.coerce_to, $respond_to = Opal.respond_to, $klass = Opal.klass, $hash2 = Opal.hash2, $send2 = Opal.send2, $send = Opal.send, $gvars = Opal.gvars;

  Opal.add_stubs(['$require', '$include', '$to_a', '$warn', '$raise', '$replace', '$respond_to?', '$to_ary', '$coerce_to?', '$===', '$join', '$to_str', '$class', '$hash', '$<=>', '$==', '$object_id', '$inspect', '$enum_for', '$bsearch_index', '$to_proc', '$nil?', '$coerce_to!', '$>', '$*', '$enumerator_size', '$empty?', '$size', '$map', '$equal?', '$dup', '$each', '$[]', '$dig', '$eql?', '$length', '$exclude_end?', '$flatten', '$__id__', '$to_s', '$new', '$max', '$min', '$!', '$>=', '$**', '$delete_if', '$reverse', '$rotate', '$rand', '$at', '$keep_if', '$shuffle!', '$<', '$sort', '$sort_by', '$!=', '$times', '$[]=', '$-', '$<<', '$values', '$is_a?', '$last', '$first', '$upto', '$reject', '$pristine', '$singleton_class']);
  
  self.$require("corelib/enumerable");
  self.$require("corelib/numeric");
  return (function($base, $super, $parent_nesting) {
    var self = $klass($base, $super, 'Array');

    var $nesting = [self].concat($parent_nesting), $Array_$$$1, $Array_initialize$2, $Array_try_convert$3, $Array_$$4, $Array_$$5, $Array_$$6, $Array_$plus$7, $Array_$minus$8, $Array_$lt$lt$9, $Array_$lt_eq_gt$10, $Array_$eq_eq$11, $Array_$$$12, $Array_$$$eq$13, $Array_any$ques$14, $Array_assoc$15, $Array_at$16, $Array_bsearch_index$17, $Array_bsearch$18, $Array_cycle$19, $Array_clear$21, $Array_count$22, $Array_initialize_copy$23, $Array_collect$24, $Array_collect$excl$26, $Array_combination$28, $Array_repeated_combination$30, $Array_compact$32, $Array_compact$excl$33, $Array_concat$34, $Array_delete$37, $Array_delete_at$38, $Array_delete_if$39, $Array_dig$41, $Array_drop$42, $Array_dup$43, $Array_each$44, $Array_each_index$46, $Array_empty$ques$48, $Array_eql$ques$49, $Array_fetch$50, $Array_fill$51, $Array_first$52, $Array_flatten$53, $Array_flatten$excl$54, $Array_hash$55, $Array_include$ques$56, $Array_index$57, $Array_insert$58, $Array_inspect$59, $Array_join$60, $Array_keep_if$61, $Array_last$63, $Array_length$64, $Array_max$65, $Array_min$66, $Array_permutation$67, $Array_repeated_permutation$69, $Array_pop$71, $Array_product$72, $Array_push$73, $Array_rassoc$74, $Array_reject$75, $Array_reject$excl$77, $Array_replace$79, $Array_reverse$80, $Array_reverse$excl$81, $Array_reverse_each$82, $Array_rindex$84, $Array_rotate$85, $Array_rotate$excl$86, $Array_sample$89, $Array_select$90, $Array_select$excl$92, $Array_shift$94, $Array_shuffle$95, $Array_shuffle$excl$96, $Array_slice$excl$97, $Array_sort$98, $Array_sort$excl$99, $Array_sort_by$excl$100, $Array_take$102, $Array_take_while$103, $Array_to_a$104, $Array_to_h$105, $Array_transpose$106, $Array_uniq$109, $Array_uniq$excl$110, $Array_unshift$111, $Array_values_at$112, $Array_zip$115, $Array_inherited$116, $Array_instance_variables$117, $Array_pack$119;

    
    self.$include($$($nesting, 'Enumerable'));
    Opal.defineProperty(self.$$prototype, '$$is_array', true);
    
    function toArraySubclass(obj, klass) {
      if (klass.$$name === Opal.Array) {
        return obj;
      } else {
        return klass.$allocate().$replace((obj).$to_a());
      }
    }

    // A helper for keep_if and delete_if, filter is either Opal.truthy
    // or Opal.falsy.
    function filterIf(self, filter, block) {
      var value, raised = null, updated = new Array(self.length);

      for (var i = 0, i2 = 0, length = self.length; i < length; i++) {
        if (!raised) {
          try {
            value = $yield1(block, self[i])
          } catch(error) {
            raised = error;
          }
        }

        if (raised || filter(value)) {
          updated[i2] = self[i]
          i2 += 1;
        }
      }

      if (i2 !== i) {
        self.splice.apply(self, [0, updated.length].concat(updated));
        self.splice(i2, updated.length);
      }

      if (raised) throw raised;
    }
  ;
    Opal.defs(self, '$[]', $Array_$$$1 = function($a) {
      var $post_args, objects, self = this;

      
      
      $post_args = Opal.slice.call(arguments, 0, arguments.length);
      
      objects = $post_args;;
      return toArraySubclass(objects, self);;
    }, $Array_$$$1.$$arity = -1);
    
    Opal.def(self, '$initialize', $Array_initialize$2 = function $$initialize(size, obj) {
      var $iter = $Array_initialize$2.$$p, block = $iter || nil, self = this;

      if ($iter) $Array_initialize$2.$$p = null;
      
      
      if ($iter) $Array_initialize$2.$$p = null;;
      
      if (size == null) {
        size = nil;
      };
      
      if (obj == null) {
        obj = nil;
      };
      
      if (obj !== nil && block !== nil) {
        self.$warn("warning: block supersedes default value argument")
      }

      if (size > $$$($$($nesting, 'Integer'), 'MAX')) {
        self.$raise($$($nesting, 'ArgumentError'), "array size too big")
      }

      if (arguments.length > 2) {
        self.$raise($$($nesting, 'ArgumentError'), "" + "wrong number of arguments (" + (arguments.length) + " for 0..2)")
      }

      if (arguments.length === 0) {
        self.splice(0, self.length);
        return self;
      }

      if (arguments.length === 1) {
        if (size.$$is_array) {
          self.$replace(size.$to_a())
          return self;
        } else if (size['$respond_to?']("to_ary")) {
          self.$replace(size.$to_ary())
          return self;
        }
      }

      size = $coerce_to(size, $$($nesting, 'Integer'), 'to_int');

      if (size < 0) {
        self.$raise($$($nesting, 'ArgumentError'), "negative array size")
      }

      self.splice(0, self.length);
      var i, value;

      if (block === nil) {
        for (i = 0; i < size; i++) {
          self.push(obj);
        }
      }
      else {
        for (i = 0, value; i < size; i++) {
          value = block(i);
          self[i] = value;
        }
      }

      return self;
    ;
    }, $Array_initialize$2.$$arity = -1);
    Opal.defs(self, '$try_convert', $Array_try_convert$3 = function $$try_convert(obj) {
      var self = this;

      return $$($nesting, 'Opal')['$coerce_to?'](obj, $$($nesting, 'Array'), "to_ary")
    }, $Array_try_convert$3.$$arity = 1);
    
    Opal.def(self, '$&', $Array_$$4 = function(other) {
      var self = this;

      
      other = (function() {if ($truthy($$($nesting, 'Array')['$==='](other))) {
        return other.$to_a()
      } else {
        return ($coerce_to(other, $$($nesting, 'Array'), 'to_ary')).$to_a()
      }; return nil; })();
      
      var result = [], hash = $hash2([], {}), i, length, item;

      for (i = 0, length = other.length; i < length; i++) {
        $hash_put(hash, other[i], true);
      }

      for (i = 0, length = self.length; i < length; i++) {
        item = self[i];
        if ($hash_delete(hash, item) !== undefined) {
          result.push(item);
        }
      }

      return result;
    ;
    }, $Array_$$4.$$arity = 1);
    
    Opal.def(self, '$|', $Array_$$5 = function(other) {
      var self = this;

      
      other = (function() {if ($truthy($$($nesting, 'Array')['$==='](other))) {
        return other.$to_a()
      } else {
        return ($coerce_to(other, $$($nesting, 'Array'), 'to_ary')).$to_a()
      }; return nil; })();
      
      var hash = $hash2([], {}), i, length, item;

      for (i = 0, length = self.length; i < length; i++) {
        $hash_put(hash, self[i], true);
      }

      for (i = 0, length = other.length; i < length; i++) {
        $hash_put(hash, other[i], true);
      }

      return hash.$keys();
    ;
    }, $Array_$$5.$$arity = 1);
    
    Opal.def(self, '$*', $Array_$$6 = function(other) {
      var self = this;

      
      if ($truthy(other['$respond_to?']("to_str"))) {
        return self.$join(other.$to_str())};
      other = $coerce_to(other, $$($nesting, 'Integer'), 'to_int');
      if ($truthy(other < 0)) {
        self.$raise($$($nesting, 'ArgumentError'), "negative argument")};
      
      var result = [],
          converted = self.$to_a();

      for (var i = 0; i < other; i++) {
        result = result.concat(converted);
      }

      return toArraySubclass(result, self.$class());
    ;
    }, $Array_$$6.$$arity = 1);
    
    Opal.def(self, '$+', $Array_$plus$7 = function(other) {
      var self = this;

      
      other = (function() {if ($truthy($$($nesting, 'Array')['$==='](other))) {
        return other.$to_a()
      } else {
        return ($coerce_to(other, $$($nesting, 'Array'), 'to_ary')).$to_a()
      }; return nil; })();
      return self.concat(other);;
    }, $Array_$plus$7.$$arity = 1);
    
    Opal.def(self, '$-', $Array_$minus$8 = function(other) {
      var self = this;

      
      other = (function() {if ($truthy($$($nesting, 'Array')['$==='](other))) {
        return other.$to_a()
      } else {
        return ($coerce_to(other, $$($nesting, 'Array'), 'to_ary')).$to_a()
      }; return nil; })();
      if ($truthy(self.length === 0)) {
        return []};
      if ($truthy(other.length === 0)) {
        return self.slice()};
      
      var result = [], hash = $hash2([], {}), i, length, item;

      for (i = 0, length = other.length; i < length; i++) {
        $hash_put(hash, other[i], true);
      }

      for (i = 0, length = self.length; i < length; i++) {
        item = self[i];
        if ($hash_get(hash, item) === undefined) {
          result.push(item);
        }
      }

      return result;
    ;
    }, $Array_$minus$8.$$arity = 1);
    
    Opal.def(self, '$<<', $Array_$lt$lt$9 = function(object) {
      var self = this;

      
      self.push(object);
      return self;
    }, $Array_$lt$lt$9.$$arity = 1);
    
    Opal.def(self, '$<=>', $Array_$lt_eq_gt$10 = function(other) {
      var self = this;

      
      if ($truthy($$($nesting, 'Array')['$==='](other))) {
        other = other.$to_a()
      } else if ($truthy(other['$respond_to?']("to_ary"))) {
        other = other.$to_ary().$to_a()
      } else {
        return nil
      };
      
      if (self.$hash() === other.$hash()) {
        return 0;
      }

      var count = Math.min(self.length, other.length);

      for (var i = 0; i < count; i++) {
        var tmp = (self[i])['$<=>'](other[i]);

        if (tmp !== 0) {
          return tmp;
        }
      }

      return (self.length)['$<=>'](other.length);
    ;
    }, $Array_$lt_eq_gt$10.$$arity = 1);
    
    Opal.def(self, '$==', $Array_$eq_eq$11 = function(other) {
      var self = this;

      
      var recursed = {};

      function _eqeq(array, other) {
        var i, length, a, b;

        if (array === other)
          return true;

        if (!other.$$is_array) {
          if ($respond_to(other, '$to_ary')) {
            return (other)['$=='](array);
          } else {
            return false;
          }
        }

        if (array.$$constructor !== Array)
          array = (array).$to_a();
        if (other.$$constructor !== Array)
          other = (other).$to_a();

        if (array.length !== other.length) {
          return false;
        }

        recursed[(array).$object_id()] = true;

        for (i = 0, length = array.length; i < length; i++) {
          a = array[i];
          b = other[i];
          if (a.$$is_array) {
            if (b.$$is_array && b.length !== a.length) {
              return false;
            }
            if (!recursed.hasOwnProperty((a).$object_id())) {
              if (!_eqeq(a, b)) {
                return false;
              }
            }
          } else {
            if (!(a)['$=='](b)) {
              return false;
            }
          }
        }

        return true;
      }

      return _eqeq(self, other);
    
    }, $Array_$eq_eq$11.$$arity = 1);
    
    function $array_slice_range(self, index) {
      var size = self.length,
          exclude, from, to, result;

      exclude = index.excl;
      from    = $coerce_to(index.begin, Opal.Integer, 'to_int');
      to      = $coerce_to(index.end, Opal.Integer, 'to_int');

      if (from < 0) {
        from += size;

        if (from < 0) {
          return nil;
        }
      }

      if (from > size) {
        return nil;
      }

      if (to < 0) {
        to += size;

        if (to < 0) {
          return [];
        }
      }

      if (!exclude) {
        to += 1;
      }

      result = self.slice(from, to);
      return toArraySubclass(result, self.$class());
    }

    function $array_slice_index_length(self, index, length) {
      var size = self.length,
          exclude, from, to, result;

      index = $coerce_to(index, Opal.Integer, 'to_int');

      if (index < 0) {
        index += size;

        if (index < 0) {
          return nil;
        }
      }

      if (length === undefined) {
        if (index >= size || index < 0) {
          return nil;
        }

        return self[index];
      }
      else {
        length = $coerce_to(length, Opal.Integer, 'to_int');

        if (length < 0 || index > size || index < 0) {
          return nil;
        }

        result = self.slice(index, index + length);
      }
      return toArraySubclass(result, self.$class());
    }
  ;
    
    Opal.def(self, '$[]', $Array_$$$12 = function(index, length) {
      var self = this;

      
      ;
      
      if (index.$$is_range) {
        return $array_slice_range(self, index);
      }
      else {
        return $array_slice_index_length(self, index, length);
      }
    ;
    }, $Array_$$$12.$$arity = -2);
    
    Opal.def(self, '$[]=', $Array_$$$eq$13 = function(index, value, extra) {
      var self = this, data = nil, length = nil;

      
      ;
            var i, size = self.length;;
      if ($truthy($$($nesting, 'Range')['$==='](index))) {
        
        data = (function() {if ($truthy($$($nesting, 'Array')['$==='](value))) {
          return value.$to_a()
        } else if ($truthy(value['$respond_to?']("to_ary"))) {
          return value.$to_ary().$to_a()
        } else {
          return [value]
        }; return nil; })();
        
        var exclude = index.excl,
            from    = $coerce_to(index.begin, $$($nesting, 'Integer'), 'to_int'),
            to      = $coerce_to(index.end, $$($nesting, 'Integer'), 'to_int');

        if (from < 0) {
          from += size;

          if (from < 0) {
            self.$raise($$($nesting, 'RangeError'), "" + (index.$inspect()) + " out of range");
          }
        }

        if (to < 0) {
          to += size;
        }

        if (!exclude) {
          to += 1;
        }

        if (from > size) {
          for (i = size; i < from; i++) {
            self[i] = nil;
          }
        }

        if (to < 0) {
          self.splice.apply(self, [from, 0].concat(data));
        }
        else {
          self.splice.apply(self, [from, to - from].concat(data));
        }

        return value;
      ;
      } else {
        
        if ($truthy(extra === undefined)) {
          length = 1
        } else {
          
          length = value;
          value = extra;
          data = (function() {if ($truthy($$($nesting, 'Array')['$==='](value))) {
            return value.$to_a()
          } else if ($truthy(value['$respond_to?']("to_ary"))) {
            return value.$to_ary().$to_a()
          } else {
            return [value]
          }; return nil; })();
        };
        
        var old;

        index  = $coerce_to(index, $$($nesting, 'Integer'), 'to_int');
        length = $coerce_to(length, $$($nesting, 'Integer'), 'to_int');

        if (index < 0) {
          old    = index;
          index += size;

          if (index < 0) {
            self.$raise($$($nesting, 'IndexError'), "" + "index " + (old) + " too small for array; minimum " + (-self.length));
          }
        }

        if (length < 0) {
          self.$raise($$($nesting, 'IndexError'), "" + "negative length (" + (length) + ")")
        }

        if (index > size) {
          for (i = size; i < index; i++) {
            self[i] = nil;
          }
        }

        if (extra === undefined) {
          self[index] = value;
        }
        else {
          self.splice.apply(self, [index, length].concat(data));
        }

        return value;
      ;
      };
    }, $Array_$$$eq$13.$$arity = -3);
    
    Opal.def(self, '$any?', $Array_any$ques$14 = function(pattern) {
      var $iter = $Array_any$ques$14.$$p, block = $iter || nil, self = this, $zuper = nil, $zuper_i = nil, $zuper_ii = nil;

      if ($iter) $Array_any$ques$14.$$p = null;
      // Prepare super implicit arguments
      for($zuper_i = 0, $zuper_ii = arguments.length, $zuper = new Array($zuper_ii); $zuper_i < $zuper_ii; $zuper_i++) {
        $zuper[$zuper_i] = arguments[$zuper_i];
      }
      
      
      if ($iter) $Array_any$ques$14.$$p = null;;
      ;
      if (self.length === 0) return false;
      return $send2(self, Opal.find_super_dispatcher(self, 'any?', $Array_any$ques$14, false, true), 'any?', $zuper, $iter);
    }, $Array_any$ques$14.$$arity = -1);
    
    Opal.def(self, '$assoc', $Array_assoc$15 = function $$assoc(object) {
      var self = this;

      
      for (var i = 0, length = self.length, item; i < length; i++) {
        if (item = self[i], item.length && (item[0])['$=='](object)) {
          return item;
        }
      }

      return nil;
    
    }, $Array_assoc$15.$$arity = 1);
    
    Opal.def(self, '$at', $Array_at$16 = function $$at(index) {
      var self = this;

      
      index = $coerce_to(index, $$($nesting, 'Integer'), 'to_int')

      if (index < 0) {
        index += self.length;
      }

      if (index < 0 || index >= self.length) {
        return nil;
      }

      return self[index];
    
    }, $Array_at$16.$$arity = 1);
    
    Opal.def(self, '$bsearch_index', $Array_bsearch_index$17 = function $$bsearch_index() {
      var $iter = $Array_bsearch_index$17.$$p, block = $iter || nil, self = this;

      if ($iter) $Array_bsearch_index$17.$$p = null;
      
      
      if ($iter) $Array_bsearch_index$17.$$p = null;;
      if ((block !== nil)) {
      } else {
        return self.$enum_for("bsearch_index")
      };
      
      var min = 0,
          max = self.length,
          mid,
          val,
          ret,
          smaller = false,
          satisfied = nil;

      while (min < max) {
        mid = min + Math.floor((max - min) / 2);
        val = self[mid];
        ret = $yield1(block, val);

        if (ret === true) {
          satisfied = mid;
          smaller = true;
        }
        else if (ret === false || ret === nil) {
          smaller = false;
        }
        else if (ret.$$is_number) {
          if (ret === 0) { return mid; }
          smaller = (ret < 0);
        }
        else {
          self.$raise($$($nesting, 'TypeError'), "" + "wrong argument type " + ((ret).$class()) + " (must be numeric, true, false or nil)")
        }

        if (smaller) { max = mid; } else { min = mid + 1; }
      }

      return satisfied;
    ;
    }, $Array_bsearch_index$17.$$arity = 0);
    
    Opal.def(self, '$bsearch', $Array_bsearch$18 = function $$bsearch() {
      var $iter = $Array_bsearch$18.$$p, block = $iter || nil, self = this, index = nil;

      if ($iter) $Array_bsearch$18.$$p = null;
      
      
      if ($iter) $Array_bsearch$18.$$p = null;;
      if ((block !== nil)) {
      } else {
        return self.$enum_for("bsearch")
      };
      index = $send(self, 'bsearch_index', [], block.$to_proc());
      
      if (index != null && index.$$is_number) {
        return self[index];
      } else {
        return index;
      }
    ;
    }, $Array_bsearch$18.$$arity = 0);
    
    Opal.def(self, '$cycle', $Array_cycle$19 = function $$cycle(n) {
      var $iter = $Array_cycle$19.$$p, block = $iter || nil, $$20, $a, self = this;

      if ($iter) $Array_cycle$19.$$p = null;
      
      
      if ($iter) $Array_cycle$19.$$p = null;;
      
      if (n == null) {
        n = nil;
      };
      if ((block !== nil)) {
      } else {
        return $send(self, 'enum_for', ["cycle", n], ($$20 = function(){var self = $$20.$$s == null ? this : $$20.$$s;

        if ($truthy(n['$nil?']())) {
            return $$$($$($nesting, 'Float'), 'INFINITY')
          } else {
            
            n = $$($nesting, 'Opal')['$coerce_to!'](n, $$($nesting, 'Integer'), "to_int");
            if ($truthy($rb_gt(n, 0))) {
              return $rb_times(self.$enumerator_size(), n)
            } else {
              return 0
            };
          }}, $$20.$$s = self, $$20.$$arity = 0, $$20))
      };
      if ($truthy(($truthy($a = self['$empty?']()) ? $a : n['$=='](0)))) {
        return nil};
      
      var i, length, value;

      if (n === nil) {
        while (true) {
          for (i = 0, length = self.length; i < length; i++) {
            value = $yield1(block, self[i]);
          }
        }
      }
      else {
        n = $$($nesting, 'Opal')['$coerce_to!'](n, $$($nesting, 'Integer'), "to_int");
        if (n <= 0) {
          return self;
        }

        while (n > 0) {
          for (i = 0, length = self.length; i < length; i++) {
            value = $yield1(block, self[i]);
          }

          n--;
        }
      }
    ;
      return self;
    }, $Array_cycle$19.$$arity = -1);
    
    Opal.def(self, '$clear', $Array_clear$21 = function $$clear() {
      var self = this;

      
      self.splice(0, self.length);
      return self;
    }, $Array_clear$21.$$arity = 0);
    
    Opal.def(self, '$count', $Array_count$22 = function $$count(object) {
      var $iter = $Array_count$22.$$p, block = $iter || nil, $a, self = this, $zuper = nil, $zuper_i = nil, $zuper_ii = nil;

      if ($iter) $Array_count$22.$$p = null;
      // Prepare super implicit arguments
      for($zuper_i = 0, $zuper_ii = arguments.length, $zuper = new Array($zuper_ii); $zuper_i < $zuper_ii; $zuper_i++) {
        $zuper[$zuper_i] = arguments[$zuper_i];
      }
      
      
      if ($iter) $Array_count$22.$$p = null;;
      
      if (object == null) {
        object = nil;
      };
      if ($truthy(($truthy($a = object) ? $a : block))) {
        return $send2(self, Opal.find_super_dispatcher(self, 'count', $Array_count$22, false, true), 'count', $zuper, $iter)
      } else {
        return self.$size()
      };
    }, $Array_count$22.$$arity = -1);
    
    Opal.def(self, '$initialize_copy', $Array_initialize_copy$23 = function $$initialize_copy(other) {
      var self = this;

      return self.$replace(other)
    }, $Array_initialize_copy$23.$$arity = 1);
    
    Opal.def(self, '$collect', $Array_collect$24 = function $$collect() {
      var $iter = $Array_collect$24.$$p, block = $iter || nil, $$25, self = this;

      if ($iter) $Array_collect$24.$$p = null;
      
      
      if ($iter) $Array_collect$24.$$p = null;;
      if ((block !== nil)) {
      } else {
        return $send(self, 'enum_for', ["collect"], ($$25 = function(){var self = $$25.$$s == null ? this : $$25.$$s;

        return self.$size()}, $$25.$$s = self, $$25.$$arity = 0, $$25))
      };
      
      var result = [];

      for (var i = 0, length = self.length; i < length; i++) {
        var value = $yield1(block, self[i]);
        result.push(value);
      }

      return result;
    ;
    }, $Array_collect$24.$$arity = 0);
    
    Opal.def(self, '$collect!', $Array_collect$excl$26 = function() {
      var $iter = $Array_collect$excl$26.$$p, block = $iter || nil, $$27, self = this;

      if ($iter) $Array_collect$excl$26.$$p = null;
      
      
      if ($iter) $Array_collect$excl$26.$$p = null;;
      if ((block !== nil)) {
      } else {
        return $send(self, 'enum_for', ["collect!"], ($$27 = function(){var self = $$27.$$s == null ? this : $$27.$$s;

        return self.$size()}, $$27.$$s = self, $$27.$$arity = 0, $$27))
      };
      
      for (var i = 0, length = self.length; i < length; i++) {
        var value = $yield1(block, self[i]);
        self[i] = value;
      }
    ;
      return self;
    }, $Array_collect$excl$26.$$arity = 0);
    
    function binomial_coefficient(n, k) {
      if (n === k || k === 0) {
        return 1;
      }

      if (k > 0 && n > k) {
        return binomial_coefficient(n - 1, k - 1) + binomial_coefficient(n - 1, k);
      }

      return 0;
    }
  ;
    
    Opal.def(self, '$combination', $Array_combination$28 = function $$combination(n) {
      var $$29, $iter = $Array_combination$28.$$p, $yield = $iter || nil, self = this, num = nil;

      if ($iter) $Array_combination$28.$$p = null;
      
      num = $$($nesting, 'Opal')['$coerce_to!'](n, $$($nesting, 'Integer'), "to_int");
      if (($yield !== nil)) {
      } else {
        return $send(self, 'enum_for', ["combination", num], ($$29 = function(){var self = $$29.$$s == null ? this : $$29.$$s;

        return binomial_coefficient(self.length, num)}, $$29.$$s = self, $$29.$$arity = 0, $$29))
      };
      
      var i, length, stack, chosen, lev, done, next;

      if (num === 0) {
        Opal.yield1($yield, [])
      } else if (num === 1) {
        for (i = 0, length = self.length; i < length; i++) {
          Opal.yield1($yield, [self[i]])
        }
      }
      else if (num === self.length) {
        Opal.yield1($yield, self.slice())
      }
      else if (num >= 0 && num < self.length) {
        stack = [];
        for (i = 0; i <= num + 1; i++) {
          stack.push(0);
        }

        chosen = [];
        lev = 0;
        done = false;
        stack[0] = -1;

        while (!done) {
          chosen[lev] = self[stack[lev+1]];
          while (lev < num - 1) {
            lev++;
            next = stack[lev+1] = stack[lev] + 1;
            chosen[lev] = self[next];
          }
          Opal.yield1($yield, chosen.slice())
          lev++;
          do {
            done = (lev === 0);
            stack[lev]++;
            lev--;
          } while ( stack[lev+1] + num === self.length + lev + 1 );
        }
      }
    ;
      return self;
    }, $Array_combination$28.$$arity = 1);
    
    Opal.def(self, '$repeated_combination', $Array_repeated_combination$30 = function $$repeated_combination(n) {
      var $$31, $iter = $Array_repeated_combination$30.$$p, $yield = $iter || nil, self = this, num = nil;

      if ($iter) $Array_repeated_combination$30.$$p = null;
      
      num = $$($nesting, 'Opal')['$coerce_to!'](n, $$($nesting, 'Integer'), "to_int");
      if (($yield !== nil)) {
      } else {
        return $send(self, 'enum_for', ["repeated_combination", num], ($$31 = function(){var self = $$31.$$s == null ? this : $$31.$$s;

        return binomial_coefficient(self.length + num - 1, num);}, $$31.$$s = self, $$31.$$arity = 0, $$31))
      };
      
      function iterate(max, from, buffer, self) {
        if (buffer.length == max) {
          var copy = buffer.slice();
          Opal.yield1($yield, copy)
          return;
        }
        for (var i = from; i < self.length; i++) {
          buffer.push(self[i]);
          iterate(max, i, buffer, self);
          buffer.pop();
        }
      }

      if (num >= 0) {
        iterate(num, 0, [], self);
      }
    ;
      return self;
    }, $Array_repeated_combination$30.$$arity = 1);
    
    Opal.def(self, '$compact', $Array_compact$32 = function $$compact() {
      var self = this;

      
      var result = [];

      for (var i = 0, length = self.length, item; i < length; i++) {
        if ((item = self[i]) !== nil) {
          result.push(item);
        }
      }

      return result;
    
    }, $Array_compact$32.$$arity = 0);
    
    Opal.def(self, '$compact!', $Array_compact$excl$33 = function() {
      var self = this;

      
      var original = self.length;

      for (var i = 0, length = self.length; i < length; i++) {
        if (self[i] === nil) {
          self.splice(i, 1);

          length--;
          i--;
        }
      }

      return self.length === original ? nil : self;
    
    }, $Array_compact$excl$33.$$arity = 0);
    
    Opal.def(self, '$concat', $Array_concat$34 = function $$concat($a) {
      var $post_args, others, $$35, $$36, self = this;

      
      
      $post_args = Opal.slice.call(arguments, 0, arguments.length);
      
      others = $post_args;;
      others = $send(others, 'map', [], ($$35 = function(other){var self = $$35.$$s == null ? this : $$35.$$s;

      
        
        if (other == null) {
          other = nil;
        };
        other = (function() {if ($truthy($$($nesting, 'Array')['$==='](other))) {
          return other.$to_a()
        } else {
          return ($coerce_to(other, $$($nesting, 'Array'), 'to_ary')).$to_a()
        }; return nil; })();
        if ($truthy(other['$equal?'](self))) {
          other = other.$dup()};
        return other;}, $$35.$$s = self, $$35.$$arity = 1, $$35));
      $send(others, 'each', [], ($$36 = function(other){var self = $$36.$$s == null ? this : $$36.$$s;

      
        
        if (other == null) {
          other = nil;
        };
        
        for (var i = 0, length = other.length; i < length; i++) {
          self.push(other[i]);
        }
      ;}, $$36.$$s = self, $$36.$$arity = 1, $$36));
      return self;
    }, $Array_concat$34.$$arity = -1);
    
    Opal.def(self, '$delete', $Array_delete$37 = function(object) {
      var $iter = $Array_delete$37.$$p, $yield = $iter || nil, self = this;

      if ($iter) $Array_delete$37.$$p = null;
      
      var original = self.length;

      for (var i = 0, length = original; i < length; i++) {
        if ((self[i])['$=='](object)) {
          self.splice(i, 1);

          length--;
          i--;
        }
      }

      if (self.length === original) {
        if (($yield !== nil)) {
          return Opal.yieldX($yield, []);
        }
        return nil;
      }
      return object;
    
    }, $Array_delete$37.$$arity = 1);
    
    Opal.def(self, '$delete_at', $Array_delete_at$38 = function $$delete_at(index) {
      var self = this;

      
      index = $coerce_to(index, $$($nesting, 'Integer'), 'to_int');

      if (index < 0) {
        index += self.length;
      }

      if (index < 0 || index >= self.length) {
        return nil;
      }

      var result = self[index];

      self.splice(index, 1);

      return result;
    
    }, $Array_delete_at$38.$$arity = 1);
    
    Opal.def(self, '$delete_if', $Array_delete_if$39 = function $$delete_if() {
      var $iter = $Array_delete_if$39.$$p, block = $iter || nil, $$40, self = this;

      if ($iter) $Array_delete_if$39.$$p = null;
      
      
      if ($iter) $Array_delete_if$39.$$p = null;;
      if ((block !== nil)) {
      } else {
        return $send(self, 'enum_for', ["delete_if"], ($$40 = function(){var self = $$40.$$s == null ? this : $$40.$$s;

        return self.$size()}, $$40.$$s = self, $$40.$$arity = 0, $$40))
      };
      filterIf(self, $falsy, block);
      return self;
    }, $Array_delete_if$39.$$arity = 0);
    
    Opal.def(self, '$dig', $Array_dig$41 = function $$dig(idx, $a) {
      var $post_args, idxs, self = this, item = nil;

      
      
      $post_args = Opal.slice.call(arguments, 1, arguments.length);
      
      idxs = $post_args;;
      item = self['$[]'](idx);
      
      if (item === nil || idxs.length === 0) {
        return item;
      }
    ;
      if ($truthy(item['$respond_to?']("dig"))) {
      } else {
        self.$raise($$($nesting, 'TypeError'), "" + (item.$class()) + " does not have #dig method")
      };
      return $send(item, 'dig', Opal.to_a(idxs));
    }, $Array_dig$41.$$arity = -2);
    
    Opal.def(self, '$drop', $Array_drop$42 = function $$drop(number) {
      var self = this;

      
      if (number < 0) {
        self.$raise($$($nesting, 'ArgumentError'))
      }

      return self.slice(number);
    
    }, $Array_drop$42.$$arity = 1);
    
    Opal.def(self, '$dup', $Array_dup$43 = function $$dup() {
      var $iter = $Array_dup$43.$$p, $yield = $iter || nil, self = this, $zuper = nil, $zuper_i = nil, $zuper_ii = nil;

      if ($iter) $Array_dup$43.$$p = null;
      // Prepare super implicit arguments
      for($zuper_i = 0, $zuper_ii = arguments.length, $zuper = new Array($zuper_ii); $zuper_i < $zuper_ii; $zuper_i++) {
        $zuper[$zuper_i] = arguments[$zuper_i];
      }
      
      
      if (self.$$class === Opal.Array &&
          self.$$class.$allocate.$$pristine &&
          self.$copy_instance_variables.$$pristine &&
          self.$initialize_dup.$$pristine) {
        return self.slice(0);
      }
    ;
      return $send2(self, Opal.find_super_dispatcher(self, 'dup', $Array_dup$43, false, true), 'dup', $zuper, $iter);
    }, $Array_dup$43.$$arity = 0);
    
    Opal.def(self, '$each', $Array_each$44 = function $$each() {
      var $iter = $Array_each$44.$$p, block = $iter || nil, $$45, self = this;

      if ($iter) $Array_each$44.$$p = null;
      
      
      if ($iter) $Array_each$44.$$p = null;;
      if ((block !== nil)) {
      } else {
        return $send(self, 'enum_for', ["each"], ($$45 = function(){var self = $$45.$$s == null ? this : $$45.$$s;

        return self.$size()}, $$45.$$s = self, $$45.$$arity = 0, $$45))
      };
      
      for (var i = 0, length = self.length; i < length; i++) {
        var value = $yield1(block, self[i]);
      }
    ;
      return self;
    }, $Array_each$44.$$arity = 0);
    
    Opal.def(self, '$each_index', $Array_each_index$46 = function $$each_index() {
      var $iter = $Array_each_index$46.$$p, block = $iter || nil, $$47, self = this;

      if ($iter) $Array_each_index$46.$$p = null;
      
      
      if ($iter) $Array_each_index$46.$$p = null;;
      if ((block !== nil)) {
      } else {
        return $send(self, 'enum_for', ["each_index"], ($$47 = function(){var self = $$47.$$s == null ? this : $$47.$$s;

        return self.$size()}, $$47.$$s = self, $$47.$$arity = 0, $$47))
      };
      
      for (var i = 0, length = self.length; i < length; i++) {
        var value = $yield1(block, i);
      }
    ;
      return self;
    }, $Array_each_index$46.$$arity = 0);
    
    Opal.def(self, '$empty?', $Array_empty$ques$48 = function() {
      var self = this;

      return self.length === 0;
    }, $Array_empty$ques$48.$$arity = 0);
    
    Opal.def(self, '$eql?', $Array_eql$ques$49 = function(other) {
      var self = this;

      
      var recursed = {};

      function _eql(array, other) {
        var i, length, a, b;

        if (!other.$$is_array) {
          return false;
        }

        other = other.$to_a();

        if (array.length !== other.length) {
          return false;
        }

        recursed[(array).$object_id()] = true;

        for (i = 0, length = array.length; i < length; i++) {
          a = array[i];
          b = other[i];
          if (a.$$is_array) {
            if (b.$$is_array && b.length !== a.length) {
              return false;
            }
            if (!recursed.hasOwnProperty((a).$object_id())) {
              if (!_eql(a, b)) {
                return false;
              }
            }
          } else {
            if (!(a)['$eql?'](b)) {
              return false;
            }
          }
        }

        return true;
      }

      return _eql(self, other);
    
    }, $Array_eql$ques$49.$$arity = 1);
    
    Opal.def(self, '$fetch', $Array_fetch$50 = function $$fetch(index, defaults) {
      var $iter = $Array_fetch$50.$$p, block = $iter || nil, self = this;

      if ($iter) $Array_fetch$50.$$p = null;
      
      
      if ($iter) $Array_fetch$50.$$p = null;;
      ;
      
      var original = index;

      index = $coerce_to(index, $$($nesting, 'Integer'), 'to_int');

      if (index < 0) {
        index += self.length;
      }

      if (index >= 0 && index < self.length) {
        return self[index];
      }

      if (block !== nil && defaults != null) {
        self.$warn("warning: block supersedes default value argument")
      }

      if (block !== nil) {
        return block(original);
      }

      if (defaults != null) {
        return defaults;
      }

      if (self.length === 0) {
        self.$raise($$($nesting, 'IndexError'), "" + "index " + (original) + " outside of array bounds: 0...0")
      }
      else {
        self.$raise($$($nesting, 'IndexError'), "" + "index " + (original) + " outside of array bounds: -" + (self.length) + "..." + (self.length));
      }
    ;
    }, $Array_fetch$50.$$arity = -2);
    
    Opal.def(self, '$fill', $Array_fill$51 = function $$fill($a) {
      var $iter = $Array_fill$51.$$p, block = $iter || nil, $post_args, args, $b, $c, self = this, one = nil, two = nil, obj = nil, left = nil, right = nil;

      if ($iter) $Array_fill$51.$$p = null;
      
      
      if ($iter) $Array_fill$51.$$p = null;;
      
      $post_args = Opal.slice.call(arguments, 0, arguments.length);
      
      args = $post_args;;
            var i, length, value;;
      if ($truthy(block)) {
        
        if ($truthy(args.length > 2)) {
          self.$raise($$($nesting, 'ArgumentError'), "" + "wrong number of arguments (" + (args.$length()) + " for 0..2)")};
        $c = args, $b = Opal.to_ary($c), (one = ($b[0] == null ? nil : $b[0])), (two = ($b[1] == null ? nil : $b[1])), $c;
      } else {
        
        if ($truthy(args.length == 0)) {
          self.$raise($$($nesting, 'ArgumentError'), "wrong number of arguments (0 for 1..3)")
        } else if ($truthy(args.length > 3)) {
          self.$raise($$($nesting, 'ArgumentError'), "" + "wrong number of arguments (" + (args.$length()) + " for 1..3)")};
        $c = args, $b = Opal.to_ary($c), (obj = ($b[0] == null ? nil : $b[0])), (one = ($b[1] == null ? nil : $b[1])), (two = ($b[2] == null ? nil : $b[2])), $c;
      };
      if ($truthy($$($nesting, 'Range')['$==='](one))) {
        
        if ($truthy(two)) {
          self.$raise($$($nesting, 'TypeError'), "length invalid with range")};
        left = $coerce_to(one.begin, $$($nesting, 'Integer'), 'to_int');
        if ($truthy(left < 0)) {
          left += this.length};
        if ($truthy(left < 0)) {
          self.$raise($$($nesting, 'RangeError'), "" + (one.$inspect()) + " out of range")};
        right = $coerce_to(one.end, $$($nesting, 'Integer'), 'to_int');
        if ($truthy(right < 0)) {
          right += this.length};
        if ($truthy(one['$exclude_end?']())) {
        } else {
          right += 1
        };
        if ($truthy(right <= left)) {
          return self};
      } else if ($truthy(one)) {
        
        left = $coerce_to(one, $$($nesting, 'Integer'), 'to_int');
        if ($truthy(left < 0)) {
          left += this.length};
        if ($truthy(left < 0)) {
          left = 0};
        if ($truthy(two)) {
          
          right = $coerce_to(two, $$($nesting, 'Integer'), 'to_int');
          if ($truthy(right == 0)) {
            return self};
          right += left;
        } else {
          right = this.length
        };
      } else {
        
        left = 0;
        right = this.length;
      };
      if ($truthy(left > this.length)) {
        
        for (i = this.length; i < right; i++) {
          self[i] = nil;
        }
      };
      if ($truthy(right > this.length)) {
        this.length = right};
      if ($truthy(block)) {
        
        for (length = this.length; left < right; left++) {
          value = block(left);
          self[left] = value;
        }
      
      } else {
        
        for (length = this.length; left < right; left++) {
          self[left] = obj;
        }
      
      };
      return self;
    }, $Array_fill$51.$$arity = -1);
    
    Opal.def(self, '$first', $Array_first$52 = function $$first(count) {
      var self = this;

      
      ;
      
      if (count == null) {
        return self.length === 0 ? nil : self[0];
      }

      count = $coerce_to(count, $$($nesting, 'Integer'), 'to_int');

      if (count < 0) {
        self.$raise($$($nesting, 'ArgumentError'), "negative array size");
      }

      return self.slice(0, count);
    ;
    }, $Array_first$52.$$arity = -1);
    
    Opal.def(self, '$flatten', $Array_flatten$53 = function $$flatten(level) {
      var self = this;

      
      ;
      
      function _flatten(array, level) {
        var result = [],
            i, length,
            item, ary;

        array = (array).$to_a();

        for (i = 0, length = array.length; i < length; i++) {
          item = array[i];

          if (!$respond_to(item, '$to_ary', true)) {
            result.push(item);
            continue;
          }

          ary = (item).$to_ary();

          if (ary === nil) {
            result.push(item);
            continue;
          }

          if (!ary.$$is_array) {
            self.$raise($$($nesting, 'TypeError'));
          }

          if (ary === self) {
            self.$raise($$($nesting, 'ArgumentError'));
          }

          switch (level) {
          case undefined:
            result = result.concat(_flatten(ary));
            break;
          case 0:
            result.push(ary);
            break;
          default:
            result.push.apply(result, _flatten(ary, level - 1));
          }
        }
        return result;
      }

      if (level !== undefined) {
        level = $coerce_to(level, $$($nesting, 'Integer'), 'to_int');
      }

      return toArraySubclass(_flatten(self, level), self.$class());
    ;
    }, $Array_flatten$53.$$arity = -1);
    
    Opal.def(self, '$flatten!', $Array_flatten$excl$54 = function(level) {
      var self = this;

      
      ;
      
      var flattened = self.$flatten(level);

      if (self.length == flattened.length) {
        for (var i = 0, length = self.length; i < length; i++) {
          if (self[i] !== flattened[i]) {
            break;
          }
        }

        if (i == length) {
          return nil;
        }
      }

      self.$replace(flattened);
    ;
      return self;
    }, $Array_flatten$excl$54.$$arity = -1);
    
    Opal.def(self, '$hash', $Array_hash$55 = function $$hash() {
      var self = this;

      
      var top = ($hash_ids === undefined),
          result = ['A'],
          hash_id = self.$object_id(),
          item, i, key;

      try {
        if (top) {
          $hash_ids = Object.create(null);
        }

        // return early for recursive structures
        if ($hash_ids[hash_id]) {
          return 'self';
        }

        for (key in $hash_ids) {
          item = $hash_ids[key];
          if (self['$eql?'](item)) {
            return 'self';
          }
        }

        $hash_ids[hash_id] = self;

        for (i = 0; i < self.length; i++) {
          item = self[i];
          result.push(item.$hash());
        }

        return result.join(',');
      } finally {
        if (top) {
          $hash_ids = undefined;
        }
      }
    
    }, $Array_hash$55.$$arity = 0);
    
    Opal.def(self, '$include?', $Array_include$ques$56 = function(member) {
      var self = this;

      
      for (var i = 0, length = self.length; i < length; i++) {
        if ((self[i])['$=='](member)) {
          return true;
        }
      }

      return false;
    
    }, $Array_include$ques$56.$$arity = 1);
    
    Opal.def(self, '$index', $Array_index$57 = function $$index(object) {
      var $iter = $Array_index$57.$$p, block = $iter || nil, self = this;

      if ($iter) $Array_index$57.$$p = null;
      
      
      if ($iter) $Array_index$57.$$p = null;;
      ;
      
      var i, length, value;

      if (object != null && block !== nil) {
        self.$warn("warning: given block not used")
      }

      if (object != null) {
        for (i = 0, length = self.length; i < length; i++) {
          if ((self[i])['$=='](object)) {
            return i;
          }
        }
      }
      else if (block !== nil) {
        for (i = 0, length = self.length; i < length; i++) {
          value = block(self[i]);

          if (value !== false && value !== nil) {
            return i;
          }
        }
      }
      else {
        return self.$enum_for("index");
      }

      return nil;
    ;
    }, $Array_index$57.$$arity = -1);
    
    Opal.def(self, '$insert', $Array_insert$58 = function $$insert(index, $a) {
      var $post_args, objects, self = this;

      
      
      $post_args = Opal.slice.call(arguments, 1, arguments.length);
      
      objects = $post_args;;
      
      index = $coerce_to(index, $$($nesting, 'Integer'), 'to_int');

      if (objects.length > 0) {
        if (index < 0) {
          index += self.length + 1;

          if (index < 0) {
            self.$raise($$($nesting, 'IndexError'), "" + (index) + " is out of bounds");
          }
        }
        if (index > self.length) {
          for (var i = self.length; i < index; i++) {
            self.push(nil);
          }
        }

        self.splice.apply(self, [index, 0].concat(objects));
      }
    ;
      return self;
    }, $Array_insert$58.$$arity = -2);
    
    Opal.def(self, '$inspect', $Array_inspect$59 = function $$inspect() {
      var self = this;

      
      var result = [],
          id     = self.$__id__();

      for (var i = 0, length = self.length; i < length; i++) {
        var item = self['$[]'](i);

        if ((item).$__id__() === id) {
          result.push('[...]');
        }
        else {
          result.push((item).$inspect());
        }
      }

      return '[' + result.join(', ') + ']';
    
    }, $Array_inspect$59.$$arity = 0);
    
    Opal.def(self, '$join', $Array_join$60 = function $$join(sep) {
      var self = this;
      if ($gvars[","] == null) $gvars[","] = nil;

      
      
      if (sep == null) {
        sep = nil;
      };
      if ($truthy(self.length === 0)) {
        return ""};
      if ($truthy(sep === nil)) {
        sep = $gvars[","]};
      
      var result = [];
      var i, length, item, tmp;

      for (i = 0, length = self.length; i < length; i++) {
        item = self[i];

        if ($respond_to(item, '$to_str')) {
          tmp = (item).$to_str();

          if (tmp !== nil) {
            result.push((tmp).$to_s());

            continue;
          }
        }

        if ($respond_to(item, '$to_ary')) {
          tmp = (item).$to_ary();

          if (tmp === self) {
            self.$raise($$($nesting, 'ArgumentError'));
          }

          if (tmp !== nil) {
            result.push((tmp).$join(sep));

            continue;
          }
        }

        if ($respond_to(item, '$to_s')) {
          tmp = (item).$to_s();

          if (tmp !== nil) {
            result.push(tmp);

            continue;
          }
        }

        self.$raise($$($nesting, 'NoMethodError').$new("" + (Opal.inspect(item)) + " doesn't respond to #to_str, #to_ary or #to_s", "to_str"));
      }

      if (sep === nil) {
        return result.join('');
      }
      else {
        return result.join($$($nesting, 'Opal')['$coerce_to!'](sep, $$($nesting, 'String'), "to_str").$to_s());
      }
    ;
    }, $Array_join$60.$$arity = -1);
    
    Opal.def(self, '$keep_if', $Array_keep_if$61 = function $$keep_if() {
      var $iter = $Array_keep_if$61.$$p, block = $iter || nil, $$62, self = this;

      if ($iter) $Array_keep_if$61.$$p = null;
      
      
      if ($iter) $Array_keep_if$61.$$p = null;;
      if ((block !== nil)) {
      } else {
        return $send(self, 'enum_for', ["keep_if"], ($$62 = function(){var self = $$62.$$s == null ? this : $$62.$$s;

        return self.$size()}, $$62.$$s = self, $$62.$$arity = 0, $$62))
      };
      filterIf(self, $truthy, block);
      return self;
    }, $Array_keep_if$61.$$arity = 0);
    
    Opal.def(self, '$last', $Array_last$63 = function $$last(count) {
      var self = this;

      
      ;
      
      if (count == null) {
        return self.length === 0 ? nil : self[self.length - 1];
      }

      count = $coerce_to(count, $$($nesting, 'Integer'), 'to_int');

      if (count < 0) {
        self.$raise($$($nesting, 'ArgumentError'), "negative array size");
      }

      if (count > self.length) {
        count = self.length;
      }

      return self.slice(self.length - count, self.length);
    ;
    }, $Array_last$63.$$arity = -1);
    
    Opal.def(self, '$length', $Array_length$64 = function $$length() {
      var self = this;

      return self.length;
    }, $Array_length$64.$$arity = 0);
    Opal.alias(self, "map", "collect");
    Opal.alias(self, "map!", "collect!");
    
    Opal.def(self, '$max', $Array_max$65 = function $$max(n) {
      var $iter = $Array_max$65.$$p, block = $iter || nil, self = this;

      if ($iter) $Array_max$65.$$p = null;
      
      
      if ($iter) $Array_max$65.$$p = null;;
      ;
      return $send(self.$each(), 'max', [n], block.$to_proc());
    }, $Array_max$65.$$arity = -1);
    
    Opal.def(self, '$min', $Array_min$66 = function $$min() {
      var $iter = $Array_min$66.$$p, block = $iter || nil, self = this;

      if ($iter) $Array_min$66.$$p = null;
      
      
      if ($iter) $Array_min$66.$$p = null;;
      return $send(self.$each(), 'min', [], block.$to_proc());
    }, $Array_min$66.$$arity = 0);
    
    // Returns the product of from, from-1, ..., from - how_many + 1.
    function descending_factorial(from, how_many) {
      var count = how_many >= 0 ? 1 : 0;
      while (how_many) {
        count *= from;
        from--;
        how_many--;
      }
      return count;
    }
  ;
    
    Opal.def(self, '$permutation', $Array_permutation$67 = function $$permutation(num) {
      var $iter = $Array_permutation$67.$$p, block = $iter || nil, $$68, self = this, perm = nil, used = nil;

      if ($iter) $Array_permutation$67.$$p = null;
      
      
      if ($iter) $Array_permutation$67.$$p = null;;
      ;
      if ((block !== nil)) {
      } else {
        return $send(self, 'enum_for', ["permutation", num], ($$68 = function(){var self = $$68.$$s == null ? this : $$68.$$s;

        return descending_factorial(self.length, num === undefined ? self.length : num);}, $$68.$$s = self, $$68.$$arity = 0, $$68))
      };
      
      var permute, offensive, output;

      if (num === undefined) {
        num = self.length;
      }
      else {
        num = $coerce_to(num, $$($nesting, 'Integer'), 'to_int');
      }

      if (num < 0 || self.length < num) {
        // no permutations, yield nothing
      }
      else if (num === 0) {
        // exactly one permutation: the zero-length array
        Opal.yield1(block, [])
      }
      else if (num === 1) {
        // this is a special, easy case
        for (var i = 0; i < self.length; i++) {
          Opal.yield1(block, [self[i]])
        }
      }
      else {
        // this is the general case
        (perm = $$($nesting, 'Array').$new(num));
        (used = $$($nesting, 'Array').$new(self.length, false));

        permute = function(num, perm, index, used, blk) {
          self = this;
          for(var i = 0; i < self.length; i++){
            if(used['$[]'](i)['$!']()) {
              perm[index] = i;
              if(index < num - 1) {
                used[i] = true;
                permute.call(self, num, perm, index + 1, used, blk);
                used[i] = false;
              }
              else {
                output = [];
                for (var j = 0; j < perm.length; j++) {
                  output.push(self[perm[j]]);
                }
                $yield1(blk, output);
              }
            }
          }
        }

        if ((block !== nil)) {
          // offensive (both definitions) copy.
          offensive = self.slice();
          permute.call(offensive, num, perm, 0, used, block);
        }
        else {
          permute.call(self, num, perm, 0, used, block);
        }
      }
    ;
      return self;
    }, $Array_permutation$67.$$arity = -1);
    
    Opal.def(self, '$repeated_permutation', $Array_repeated_permutation$69 = function $$repeated_permutation(n) {
      var $$70, $iter = $Array_repeated_permutation$69.$$p, $yield = $iter || nil, self = this, num = nil;

      if ($iter) $Array_repeated_permutation$69.$$p = null;
      
      num = $$($nesting, 'Opal')['$coerce_to!'](n, $$($nesting, 'Integer'), "to_int");
      if (($yield !== nil)) {
      } else {
        return $send(self, 'enum_for', ["repeated_permutation", num], ($$70 = function(){var self = $$70.$$s == null ? this : $$70.$$s;

        if ($truthy($rb_ge(num, 0))) {
            return self.$size()['$**'](num)
          } else {
            return 0
          }}, $$70.$$s = self, $$70.$$arity = 0, $$70))
      };
      
      function iterate(max, buffer, self) {
        if (buffer.length == max) {
          var copy = buffer.slice();
          Opal.yield1($yield, copy)
          return;
        }
        for (var i = 0; i < self.length; i++) {
          buffer.push(self[i]);
          iterate(max, buffer, self);
          buffer.pop();
        }
      }

      iterate(num, [], self.slice());
    ;
      return self;
    }, $Array_repeated_permutation$69.$$arity = 1);
    
    Opal.def(self, '$pop', $Array_pop$71 = function $$pop(count) {
      var self = this;

      
      ;
      if ($truthy(count === undefined)) {
        
        if ($truthy(self.length === 0)) {
          return nil};
        return self.pop();};
      count = $coerce_to(count, $$($nesting, 'Integer'), 'to_int');
      if ($truthy(count < 0)) {
        self.$raise($$($nesting, 'ArgumentError'), "negative array size")};
      if ($truthy(self.length === 0)) {
        return []};
      if ($truthy(count > self.length)) {
        return self.splice(0, self.length);
      } else {
        return self.splice(self.length - count, self.length);
      };
    }, $Array_pop$71.$$arity = -1);
    
    Opal.def(self, '$product', $Array_product$72 = function $$product($a) {
      var $iter = $Array_product$72.$$p, block = $iter || nil, $post_args, args, self = this;

      if ($iter) $Array_product$72.$$p = null;
      
      
      if ($iter) $Array_product$72.$$p = null;;
      
      $post_args = Opal.slice.call(arguments, 0, arguments.length);
      
      args = $post_args;;
      
      var result = (block !== nil) ? null : [],
          n = args.length + 1,
          counters = new Array(n),
          lengths  = new Array(n),
          arrays   = new Array(n),
          i, m, subarray, len, resultlen = 1;

      arrays[0] = self;
      for (i = 1; i < n; i++) {
        arrays[i] = $coerce_to(args[i - 1], $$($nesting, 'Array'), 'to_ary');
      }

      for (i = 0; i < n; i++) {
        len = arrays[i].length;
        if (len === 0) {
          return result || self;
        }
        resultlen *= len;
        if (resultlen > 2147483647) {
          self.$raise($$($nesting, 'RangeError'), "too big to product")
        }
        lengths[i] = len;
        counters[i] = 0;
      }

      outer_loop: for (;;) {
        subarray = [];
        for (i = 0; i < n; i++) {
          subarray.push(arrays[i][counters[i]]);
        }
        if (result) {
          result.push(subarray);
        } else {
          Opal.yield1(block, subarray)
        }
        m = n - 1;
        counters[m]++;
        while (counters[m] === lengths[m]) {
          counters[m] = 0;
          if (--m < 0) break outer_loop;
          counters[m]++;
        }
      }

      return result || self;
    ;
    }, $Array_product$72.$$arity = -1);
    
    Opal.def(self, '$push', $Array_push$73 = function $$push($a) {
      var $post_args, objects, self = this;

      
      
      $post_args = Opal.slice.call(arguments, 0, arguments.length);
      
      objects = $post_args;;
      
      for (var i = 0, length = objects.length; i < length; i++) {
        self.push(objects[i]);
      }
    ;
      return self;
    }, $Array_push$73.$$arity = -1);
    Opal.alias(self, "append", "push");
    
    Opal.def(self, '$rassoc', $Array_rassoc$74 = function $$rassoc(object) {
      var self = this;

      
      for (var i = 0, length = self.length, item; i < length; i++) {
        item = self[i];

        if (item.length && item[1] !== undefined) {
          if ((item[1])['$=='](object)) {
            return item;
          }
        }
      }

      return nil;
    
    }, $Array_rassoc$74.$$arity = 1);
    
    Opal.def(self, '$reject', $Array_reject$75 = function $$reject() {
      var $iter = $Array_reject$75.$$p, block = $iter || nil, $$76, self = this;

      if ($iter) $Array_reject$75.$$p = null;
      
      
      if ($iter) $Array_reject$75.$$p = null;;
      if ((block !== nil)) {
      } else {
        return $send(self, 'enum_for', ["reject"], ($$76 = function(){var self = $$76.$$s == null ? this : $$76.$$s;

        return self.$size()}, $$76.$$s = self, $$76.$$arity = 0, $$76))
      };
      
      var result = [];

      for (var i = 0, length = self.length, value; i < length; i++) {
        value = block(self[i]);

        if (value === false || value === nil) {
          result.push(self[i]);
        }
      }
      return result;
    ;
    }, $Array_reject$75.$$arity = 0);
    
    Opal.def(self, '$reject!', $Array_reject$excl$77 = function() {
      var $iter = $Array_reject$excl$77.$$p, block = $iter || nil, $$78, self = this, original = nil;

      if ($iter) $Array_reject$excl$77.$$p = null;
      
      
      if ($iter) $Array_reject$excl$77.$$p = null;;
      if ((block !== nil)) {
      } else {
        return $send(self, 'enum_for', ["reject!"], ($$78 = function(){var self = $$78.$$s == null ? this : $$78.$$s;

        return self.$size()}, $$78.$$s = self, $$78.$$arity = 0, $$78))
      };
      original = self.$length();
      $send(self, 'delete_if', [], block.$to_proc());
      if (self.$length()['$=='](original)) {
        return nil
      } else {
        return self
      };
    }, $Array_reject$excl$77.$$arity = 0);
    
    Opal.def(self, '$replace', $Array_replace$79 = function $$replace(other) {
      var self = this;

      
      other = (function() {if ($truthy($$($nesting, 'Array')['$==='](other))) {
        return other.$to_a()
      } else {
        return ($coerce_to(other, $$($nesting, 'Array'), 'to_ary')).$to_a()
      }; return nil; })();
      
      self.splice(0, self.length);
      self.push.apply(self, other);
    ;
      return self;
    }, $Array_replace$79.$$arity = 1);
    
    Opal.def(self, '$reverse', $Array_reverse$80 = function $$reverse() {
      var self = this;

      return self.slice(0).reverse();
    }, $Array_reverse$80.$$arity = 0);
    
    Opal.def(self, '$reverse!', $Array_reverse$excl$81 = function() {
      var self = this;

      return self.reverse();
    }, $Array_reverse$excl$81.$$arity = 0);
    
    Opal.def(self, '$reverse_each', $Array_reverse_each$82 = function $$reverse_each() {
      var $iter = $Array_reverse_each$82.$$p, block = $iter || nil, $$83, self = this;

      if ($iter) $Array_reverse_each$82.$$p = null;
      
      
      if ($iter) $Array_reverse_each$82.$$p = null;;
      if ((block !== nil)) {
      } else {
        return $send(self, 'enum_for', ["reverse_each"], ($$83 = function(){var self = $$83.$$s == null ? this : $$83.$$s;

        return self.$size()}, $$83.$$s = self, $$83.$$arity = 0, $$83))
      };
      $send(self.$reverse(), 'each', [], block.$to_proc());
      return self;
    }, $Array_reverse_each$82.$$arity = 0);
    
    Opal.def(self, '$rindex', $Array_rindex$84 = function $$rindex(object) {
      var $iter = $Array_rindex$84.$$p, block = $iter || nil, self = this;

      if ($iter) $Array_rindex$84.$$p = null;
      
      
      if ($iter) $Array_rindex$84.$$p = null;;
      ;
      
      var i, value;

      if (object != null && block !== nil) {
        self.$warn("warning: given block not used")
      }

      if (object != null) {
        for (i = self.length - 1; i >= 0; i--) {
          if (i >= self.length) {
            break;
          }
          if ((self[i])['$=='](object)) {
            return i;
          }
        }
      }
      else if (block !== nil) {
        for (i = self.length - 1; i >= 0; i--) {
          if (i >= self.length) {
            break;
          }

          value = block(self[i]);

          if (value !== false && value !== nil) {
            return i;
          }
        }
      }
      else if (object == null) {
        return self.$enum_for("rindex");
      }

      return nil;
    ;
    }, $Array_rindex$84.$$arity = -1);
    
    Opal.def(self, '$rotate', $Array_rotate$85 = function $$rotate(n) {
      var self = this;

      
      
      if (n == null) {
        n = 1;
      };
      
      var ary, idx, firstPart, lastPart;

      n = $coerce_to(n, $$($nesting, 'Integer'), 'to_int')

      if (self.length === 1) {
        return self.slice();
      }
      if (self.length === 0) {
        return [];
      }

      ary = self.slice();
      idx = n % ary.length;

      firstPart = ary.slice(idx);
      lastPart = ary.slice(0, idx);
      return firstPart.concat(lastPart);
    ;
    }, $Array_rotate$85.$$arity = -1);
    
    Opal.def(self, '$rotate!', $Array_rotate$excl$86 = function(cnt) {
      var self = this, ary = nil;

      
      
      if (cnt == null) {
        cnt = 1;
      };
      
      if (self.length === 0 || self.length === 1) {
        return self;
      }
      cnt = $coerce_to(cnt, $$($nesting, 'Integer'), 'to_int');
    ;
      ary = self.$rotate(cnt);
      return self.$replace(ary);
    }, $Array_rotate$excl$86.$$arity = -1);
    (function($base, $super, $parent_nesting) {
      var self = $klass($base, $super, 'SampleRandom');

      var $nesting = [self].concat($parent_nesting), $SampleRandom_initialize$87, $SampleRandom_rand$88;

      self.$$prototype.rng = nil;
      
      
      Opal.def(self, '$initialize', $SampleRandom_initialize$87 = function $$initialize(rng) {
        var self = this;

        return (self.rng = rng)
      }, $SampleRandom_initialize$87.$$arity = 1);
      return (Opal.def(self, '$rand', $SampleRandom_rand$88 = function $$rand(size) {
        var self = this, random = nil;

        
        random = $coerce_to(self.rng.$rand(size), $$($nesting, 'Integer'), 'to_int');
        if ($truthy(random < 0)) {
          self.$raise($$($nesting, 'RangeError'), "random value must be >= 0")};
        if ($truthy(random < size)) {
        } else {
          self.$raise($$($nesting, 'RangeError'), "random value must be less than Array size")
        };
        return random;
      }, $SampleRandom_rand$88.$$arity = 1), nil) && 'rand';
    })($nesting[0], null, $nesting);
    
    Opal.def(self, '$sample', $Array_sample$89 = function $$sample(count, options) {
      var $a, self = this, o = nil, rng = nil;

      
      ;
      ;
      if ($truthy(count === undefined)) {
        return self.$at($$($nesting, 'Kernel').$rand(self.length))};
      if ($truthy(options === undefined)) {
        if ($truthy((o = $$($nesting, 'Opal')['$coerce_to?'](count, $$($nesting, 'Hash'), "to_hash")))) {
          
          options = o;
          count = nil;
        } else {
          
          options = nil;
          count = $coerce_to(count, $$($nesting, 'Integer'), 'to_int');
        }
      } else {
        
        count = $coerce_to(count, $$($nesting, 'Integer'), 'to_int');
        options = $coerce_to(options, $$($nesting, 'Hash'), 'to_hash');
      };
      if ($truthy(($truthy($a = count) ? count < 0 : $a))) {
        self.$raise($$($nesting, 'ArgumentError'), "count must be greater than 0")};
      if ($truthy(options)) {
        rng = options['$[]']("random")};
      rng = (function() {if ($truthy(($truthy($a = rng) ? rng['$respond_to?']("rand") : $a))) {
        return $$($nesting, 'SampleRandom').$new(rng)
      } else {
        return $$($nesting, 'Kernel')
      }; return nil; })();
      if ($truthy(count)) {
      } else {
        return self[rng.$rand(self.length)]
      };
      

      var abandon, spin, result, i, j, k, targetIndex, oldValue;

      if (count > self.length) {
        count = self.length;
      }

      switch (count) {
        case 0:
          return [];
          break;
        case 1:
          return [self[rng.$rand(self.length)]];
          break;
        case 2:
          i = rng.$rand(self.length);
          j = rng.$rand(self.length);
          if (i === j) {
            j = i === 0 ? i + 1 : i - 1;
          }
          return [self[i], self[j]];
          break;
        default:
          if (self.length / count > 3) {
            abandon = false;
            spin = 0;

            result = $$($nesting, 'Array').$new(count);
            i = 1;

            result[0] = rng.$rand(self.length);
            while (i < count) {
              k = rng.$rand(self.length);
              j = 0;

              while (j < i) {
                while (k === result[j]) {
                  spin++;
                  if (spin > 100) {
                    abandon = true;
                    break;
                  }
                  k = rng.$rand(self.length);
                }
                if (abandon) { break; }

                j++;
              }

              if (abandon) { break; }

              result[i] = k;

              i++;
            }

            if (!abandon) {
              i = 0;
              while (i < count) {
                result[i] = self[result[i]];
                i++;
              }

              return result;
            }
          }

          result = self.slice();

          for (var c = 0; c < count; c++) {
            targetIndex = rng.$rand(self.length);
            oldValue = result[c];
            result[c] = result[targetIndex];
            result[targetIndex] = oldValue;
          }

          return count === self.length ? result : (result)['$[]'](0, count);
      }
    ;
    }, $Array_sample$89.$$arity = -1);
    
    Opal.def(self, '$select', $Array_select$90 = function $$select() {
      var $iter = $Array_select$90.$$p, block = $iter || nil, $$91, self = this;

      if ($iter) $Array_select$90.$$p = null;
      
      
      if ($iter) $Array_select$90.$$p = null;;
      if ((block !== nil)) {
      } else {
        return $send(self, 'enum_for', ["select"], ($$91 = function(){var self = $$91.$$s == null ? this : $$91.$$s;

        return self.$size()}, $$91.$$s = self, $$91.$$arity = 0, $$91))
      };
      
      var result = [];

      for (var i = 0, length = self.length, item, value; i < length; i++) {
        item = self[i];

        value = $yield1(block, item);

        if ($truthy(value)) {
          result.push(item);
        }
      }

      return result;
    ;
    }, $Array_select$90.$$arity = 0);
    
    Opal.def(self, '$select!', $Array_select$excl$92 = function() {
      var $iter = $Array_select$excl$92.$$p, block = $iter || nil, $$93, self = this;

      if ($iter) $Array_select$excl$92.$$p = null;
      
      
      if ($iter) $Array_select$excl$92.$$p = null;;
      if ((block !== nil)) {
      } else {
        return $send(self, 'enum_for', ["select!"], ($$93 = function(){var self = $$93.$$s == null ? this : $$93.$$s;

        return self.$size()}, $$93.$$s = self, $$93.$$arity = 0, $$93))
      };
      
      var original = self.length;
      $send(self, 'keep_if', [], block.$to_proc());
      return self.length === original ? nil : self;
    ;
    }, $Array_select$excl$92.$$arity = 0);
    
    Opal.def(self, '$shift', $Array_shift$94 = function $$shift(count) {
      var self = this;

      
      ;
      if ($truthy(count === undefined)) {
        
        if ($truthy(self.length === 0)) {
          return nil};
        return self.shift();};
      count = $coerce_to(count, $$($nesting, 'Integer'), 'to_int');
      if ($truthy(count < 0)) {
        self.$raise($$($nesting, 'ArgumentError'), "negative array size")};
      if ($truthy(self.length === 0)) {
        return []};
      return self.splice(0, count);;
    }, $Array_shift$94.$$arity = -1);
    Opal.alias(self, "size", "length");
    
    Opal.def(self, '$shuffle', $Array_shuffle$95 = function $$shuffle(rng) {
      var self = this;

      
      ;
      return self.$dup().$to_a()['$shuffle!'](rng);
    }, $Array_shuffle$95.$$arity = -1);
    
    Opal.def(self, '$shuffle!', $Array_shuffle$excl$96 = function(rng) {
      var self = this;

      
      ;
      
      var randgen, i = self.length, j, tmp;

      if (rng !== undefined) {
        rng = $$($nesting, 'Opal')['$coerce_to?'](rng, $$($nesting, 'Hash'), "to_hash");

        if (rng !== nil) {
          rng = rng['$[]']("random");

          if (rng !== nil && rng['$respond_to?']("rand")) {
            randgen = rng;
          }
        }
      }

      while (i) {
        if (randgen) {
          j = randgen.$rand(i).$to_int();

          if (j < 0) {
            self.$raise($$($nesting, 'RangeError'), "" + "random number too small " + (j))
          }

          if (j >= i) {
            self.$raise($$($nesting, 'RangeError'), "" + "random number too big " + (j))
          }
        }
        else {
          j = self.$rand(i);
        }

        tmp = self[--i];
        self[i] = self[j];
        self[j] = tmp;
      }

      return self;
    ;
    }, $Array_shuffle$excl$96.$$arity = -1);
    Opal.alias(self, "slice", "[]");
    
    Opal.def(self, '$slice!', $Array_slice$excl$97 = function(index, length) {
      var self = this, result = nil, range = nil, range_start = nil, range_end = nil, start = nil;

      
      ;
      result = nil;
      if ($truthy(length === undefined)) {
        if ($truthy($$($nesting, 'Range')['$==='](index))) {
          
          range = index;
          result = self['$[]'](range);
          range_start = $coerce_to(range.begin, $$($nesting, 'Integer'), 'to_int');
          range_end = $coerce_to(range.end, $$($nesting, 'Integer'), 'to_int');
          
          if (range_start < 0) {
            range_start += self.length;
          }

          if (range_end < 0) {
            range_end += self.length;
          } else if (range_end >= self.length) {
            range_end = self.length - 1;
            if (range.excl) {
              range_end += 1;
            }
          }

          var range_length = range_end - range_start;
          if (range.excl) {
            range_end -= 1;
          } else {
            range_length += 1;
          }

          if (range_start < self.length && range_start >= 0 && range_end < self.length && range_end >= 0 && range_length > 0) {
            self.splice(range_start, range_length);
          }
        ;
        } else {
          
          start = $coerce_to(index, $$($nesting, 'Integer'), 'to_int');
          
          if (start < 0) {
            start += self.length;
          }

          if (start < 0 || start >= self.length) {
            return nil;
          }

          result = self[start];

          if (start === 0) {
            self.shift();
          } else {
            self.splice(start, 1);
          }
        ;
        }
      } else {
        
        start = $coerce_to(index, $$($nesting, 'Integer'), 'to_int');
        length = $coerce_to(length, $$($nesting, 'Integer'), 'to_int');
        
        if (length < 0) {
          return nil;
        }

        var end = start + length;

        result = self['$[]'](start, length);

        if (start < 0) {
          start += self.length;
        }

        if (start + length > self.length) {
          length = self.length - start;
        }

        if (start < self.length && start >= 0) {
          self.splice(start, length);
        }
      ;
      };
      return result;
    }, $Array_slice$excl$97.$$arity = -2);
    
    Opal.def(self, '$sort', $Array_sort$98 = function $$sort() {
      var $iter = $Array_sort$98.$$p, block = $iter || nil, self = this;

      if ($iter) $Array_sort$98.$$p = null;
      
      
      if ($iter) $Array_sort$98.$$p = null;;
      if ($truthy(self.length > 1)) {
      } else {
        return self
      };
      
      if (block === nil) {
        block = function(a, b) {
          return (a)['$<=>'](b);
        };
      }

      return self.slice().sort(function(x, y) {
        var ret = block(x, y);

        if (ret === nil) {
          self.$raise($$($nesting, 'ArgumentError'), "" + "comparison of " + ((x).$inspect()) + " with " + ((y).$inspect()) + " failed");
        }

        return $rb_gt(ret, 0) ? 1 : ($rb_lt(ret, 0) ? -1 : 0);
      });
    ;
    }, $Array_sort$98.$$arity = 0);
    
    Opal.def(self, '$sort!', $Array_sort$excl$99 = function() {
      var $iter = $Array_sort$excl$99.$$p, block = $iter || nil, self = this;

      if ($iter) $Array_sort$excl$99.$$p = null;
      
      
      if ($iter) $Array_sort$excl$99.$$p = null;;
      
      var result;

      if ((block !== nil)) {
        result = $send((self.slice()), 'sort', [], block.$to_proc());
      }
      else {
        result = (self.slice()).$sort();
      }

      self.length = 0;
      for(var i = 0, length = result.length; i < length; i++) {
        self.push(result[i]);
      }

      return self;
    ;
    }, $Array_sort$excl$99.$$arity = 0);
    
    Opal.def(self, '$sort_by!', $Array_sort_by$excl$100 = function() {
      var $iter = $Array_sort_by$excl$100.$$p, block = $iter || nil, $$101, self = this;

      if ($iter) $Array_sort_by$excl$100.$$p = null;
      
      
      if ($iter) $Array_sort_by$excl$100.$$p = null;;
      if ((block !== nil)) {
      } else {
        return $send(self, 'enum_for', ["sort_by!"], ($$101 = function(){var self = $$101.$$s == null ? this : $$101.$$s;

        return self.$size()}, $$101.$$s = self, $$101.$$arity = 0, $$101))
      };
      return self.$replace($send(self, 'sort_by', [], block.$to_proc()));
    }, $Array_sort_by$excl$100.$$arity = 0);
    
    Opal.def(self, '$take', $Array_take$102 = function $$take(count) {
      var self = this;

      
      if (count < 0) {
        self.$raise($$($nesting, 'ArgumentError'));
      }

      return self.slice(0, count);
    
    }, $Array_take$102.$$arity = 1);
    
    Opal.def(self, '$take_while', $Array_take_while$103 = function $$take_while() {
      var $iter = $Array_take_while$103.$$p, block = $iter || nil, self = this;

      if ($iter) $Array_take_while$103.$$p = null;
      
      
      if ($iter) $Array_take_while$103.$$p = null;;
      
      var result = [];

      for (var i = 0, length = self.length, item, value; i < length; i++) {
        item = self[i];

        value = block(item);

        if (value === false || value === nil) {
          return result;
        }

        result.push(item);
      }

      return result;
    ;
    }, $Array_take_while$103.$$arity = 0);
    
    Opal.def(self, '$to_a', $Array_to_a$104 = function $$to_a() {
      var self = this;

      return self
    }, $Array_to_a$104.$$arity = 0);
    Opal.alias(self, "to_ary", "to_a");
    
    Opal.def(self, '$to_h', $Array_to_h$105 = function $$to_h() {
      var self = this;

      
      var i, len = self.length, ary, key, val, hash = $hash2([], {});

      for (i = 0; i < len; i++) {
        ary = $$($nesting, 'Opal')['$coerce_to?'](self[i], $$($nesting, 'Array'), "to_ary");
        if (!ary.$$is_array) {
          self.$raise($$($nesting, 'TypeError'), "" + "wrong element type " + ((ary).$class()) + " at " + (i) + " (expected array)")
        }
        if (ary.length !== 2) {
          self.$raise($$($nesting, 'ArgumentError'), "" + "wrong array length at " + (i) + " (expected 2, was " + ((ary).$length()) + ")")
        }
        key = ary[0];
        val = ary[1];
        $hash_put(hash, key, val);
      }

      return hash;
    
    }, $Array_to_h$105.$$arity = 0);
    Opal.alias(self, "to_s", "inspect");
    
    Opal.def(self, '$transpose', $Array_transpose$106 = function $$transpose() {
      var $$107, self = this, result = nil, max = nil;

      
      if ($truthy(self['$empty?']())) {
        return []};
      result = [];
      max = nil;
      $send(self, 'each', [], ($$107 = function(row){var self = $$107.$$s == null ? this : $$107.$$s, $a, $$108;

      
        
        if (row == null) {
          row = nil;
        };
        row = (function() {if ($truthy($$($nesting, 'Array')['$==='](row))) {
          return row.$to_a()
        } else {
          return ($coerce_to(row, $$($nesting, 'Array'), 'to_ary')).$to_a()
        }; return nil; })();
        max = ($truthy($a = max) ? $a : row.length);
        if ($truthy((row.length)['$!='](max))) {
          self.$raise($$($nesting, 'IndexError'), "" + "element size differs (" + (row.length) + " should be " + (max) + ")")};
        return $send((row.length), 'times', [], ($$108 = function(i){var self = $$108.$$s == null ? this : $$108.$$s, $b, entry = nil, $writer = nil;

        
          
          if (i == null) {
            i = nil;
          };
          entry = ($truthy($b = result['$[]'](i)) ? $b : (($writer = [i, []]), $send(result, '[]=', Opal.to_a($writer)), $writer[$rb_minus($writer["length"], 1)]));
          return entry['$<<'](row.$at(i));}, $$108.$$s = self, $$108.$$arity = 1, $$108));}, $$107.$$s = self, $$107.$$arity = 1, $$107));
      return result;
    }, $Array_transpose$106.$$arity = 0);
    
    Opal.def(self, '$uniq', $Array_uniq$109 = function $$uniq() {
      var $iter = $Array_uniq$109.$$p, block = $iter || nil, self = this;

      if ($iter) $Array_uniq$109.$$p = null;
      
      
      if ($iter) $Array_uniq$109.$$p = null;;
      
      var hash = $hash2([], {}), i, length, item, key;

      if (block === nil) {
        for (i = 0, length = self.length; i < length; i++) {
          item = self[i];
          if ($hash_get(hash, item) === undefined) {
            $hash_put(hash, item, item);
          }
        }
      }
      else {
        for (i = 0, length = self.length; i < length; i++) {
          item = self[i];
          key = $yield1(block, item);
          if ($hash_get(hash, key) === undefined) {
            $hash_put(hash, key, item);
          }
        }
      }

      return toArraySubclass((hash).$values(), self.$class());
    ;
    }, $Array_uniq$109.$$arity = 0);
    
    Opal.def(self, '$uniq!', $Array_uniq$excl$110 = function() {
      var $iter = $Array_uniq$excl$110.$$p, block = $iter || nil, self = this;

      if ($iter) $Array_uniq$excl$110.$$p = null;
      
      
      if ($iter) $Array_uniq$excl$110.$$p = null;;
      
      var original_length = self.length, hash = $hash2([], {}), i, length, item, key;

      for (i = 0, length = original_length; i < length; i++) {
        item = self[i];
        key = (block === nil ? item : $yield1(block, item));

        if ($hash_get(hash, key) === undefined) {
          $hash_put(hash, key, item);
          continue;
        }

        self.splice(i, 1);
        length--;
        i--;
      }

      return self.length === original_length ? nil : self;
    ;
    }, $Array_uniq$excl$110.$$arity = 0);
    
    Opal.def(self, '$unshift', $Array_unshift$111 = function $$unshift($a) {
      var $post_args, objects, self = this;

      
      
      $post_args = Opal.slice.call(arguments, 0, arguments.length);
      
      objects = $post_args;;
      
      for (var i = objects.length - 1; i >= 0; i--) {
        self.unshift(objects[i]);
      }
    ;
      return self;
    }, $Array_unshift$111.$$arity = -1);
    Opal.alias(self, "prepend", "unshift");
    
    Opal.def(self, '$values_at', $Array_values_at$112 = function $$values_at($a) {
      var $post_args, args, $$113, self = this, out = nil;

      
      
      $post_args = Opal.slice.call(arguments, 0, arguments.length);
      
      args = $post_args;;
      out = [];
      $send(args, 'each', [], ($$113 = function(elem){var self = $$113.$$s == null ? this : $$113.$$s, $$114, finish = nil, start = nil, i = nil;

      
        
        if (elem == null) {
          elem = nil;
        };
        if ($truthy(elem['$is_a?']($$($nesting, 'Range')))) {
          
          finish = $coerce_to(elem.$last(), $$($nesting, 'Integer'), 'to_int');
          start = $coerce_to(elem.$first(), $$($nesting, 'Integer'), 'to_int');
          
          if (start < 0) {
            start = start + self.length;
            return nil;;
          }
        ;
          
          if (finish < 0) {
            finish = finish + self.length;
          }
          if (elem['$exclude_end?']()) {
            finish--;
          }
          if (finish < start) {
            return nil;;
          }
        ;
          return $send(start, 'upto', [finish], ($$114 = function(i){var self = $$114.$$s == null ? this : $$114.$$s;

          
            
            if (i == null) {
              i = nil;
            };
            return out['$<<'](self.$at(i));}, $$114.$$s = self, $$114.$$arity = 1, $$114));
        } else {
          
          i = $coerce_to(elem, $$($nesting, 'Integer'), 'to_int');
          return out['$<<'](self.$at(i));
        };}, $$113.$$s = self, $$113.$$arity = 1, $$113));
      return out;
    }, $Array_values_at$112.$$arity = -1);
    
    Opal.def(self, '$zip', $Array_zip$115 = function $$zip($a) {
      var $iter = $Array_zip$115.$$p, block = $iter || nil, $post_args, others, $b, self = this;

      if ($iter) $Array_zip$115.$$p = null;
      
      
      if ($iter) $Array_zip$115.$$p = null;;
      
      $post_args = Opal.slice.call(arguments, 0, arguments.length);
      
      others = $post_args;;
      
      var result = [], size = self.length, part, o, i, j, jj;

      for (j = 0, jj = others.length; j < jj; j++) {
        o = others[j];
        if (o.$$is_array) {
          continue;
        }
        if (o.$$is_enumerator) {
          if (o.$size() === Infinity) {
            others[j] = o.$take(size);
          } else {
            others[j] = o.$to_a();
          }
          continue;
        }
        others[j] = ($truthy($b = $$($nesting, 'Opal')['$coerce_to?'](o, $$($nesting, 'Array'), "to_ary")) ? $b : $$($nesting, 'Opal')['$coerce_to!'](o, $$($nesting, 'Enumerator'), "to_enum", "each")).$to_a();
      }

      for (i = 0; i < size; i++) {
        part = [self[i]];

        for (j = 0, jj = others.length; j < jj; j++) {
          o = others[j][i];

          if (o == null) {
            o = nil;
          }

          part[j + 1] = o;
        }

        result[i] = part;
      }

      if (block !== nil) {
        for (i = 0; i < size; i++) {
          block(result[i]);
        }

        return nil;
      }

      return result;
    ;
    }, $Array_zip$115.$$arity = -1);
    Opal.defs(self, '$inherited', $Array_inherited$116 = function $$inherited(klass) {
      var self = this;

      
      klass.$$prototype.$to_a = function() {
        return this.slice(0, this.length);
      }
    
    }, $Array_inherited$116.$$arity = 1);
    
    Opal.def(self, '$instance_variables', $Array_instance_variables$117 = function $$instance_variables() {
      var $$118, $iter = $Array_instance_variables$117.$$p, $yield = $iter || nil, self = this, $zuper = nil, $zuper_i = nil, $zuper_ii = nil;

      if ($iter) $Array_instance_variables$117.$$p = null;
      // Prepare super implicit arguments
      for($zuper_i = 0, $zuper_ii = arguments.length, $zuper = new Array($zuper_ii); $zuper_i < $zuper_ii; $zuper_i++) {
        $zuper[$zuper_i] = arguments[$zuper_i];
      }
      return $send($send2(self, Opal.find_super_dispatcher(self, 'instance_variables', $Array_instance_variables$117, false, true), 'instance_variables', $zuper, $iter), 'reject', [], ($$118 = function(ivar){var self = $$118.$$s == null ? this : $$118.$$s, $a;

      
        
        if (ivar == null) {
          ivar = nil;
        };
        return ($truthy($a = /^@\d+$/.test(ivar)) ? $a : ivar['$==']("@length"));}, $$118.$$s = self, $$118.$$arity = 1, $$118))
    }, $Array_instance_variables$117.$$arity = 0);
    $$($nesting, 'Opal').$pristine(self.$singleton_class(), "allocate");
    $$($nesting, 'Opal').$pristine(self, "copy_instance_variables", "initialize_dup");
    return (Opal.def(self, '$pack', $Array_pack$119 = function $$pack($a) {
      var $post_args, args, self = this;

      
      
      $post_args = Opal.slice.call(arguments, 0, arguments.length);
      
      args = $post_args;;
      return self.$raise("To use Array#pack, you must first require 'corelib/array/pack'.");
    }, $Array_pack$119.$$arity = -1), nil) && 'pack';
  })($nesting[0], Array, $nesting);
};

/* Generated by Opal 1.0.0 */
Opal.modules["corelib/hash"] = function(Opal) {
  function $rb_ge(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs >= rhs : lhs['$>='](rhs);
  }
  function $rb_gt(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs > rhs : lhs['$>'](rhs);
  }
  function $rb_minus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs - rhs : lhs['$-'](rhs);
  }
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.$$$, $$ = Opal.$$, $klass = Opal.klass, $send = Opal.send, $hash2 = Opal.hash2, $truthy = Opal.truthy;

  Opal.add_stubs(['$require', '$include', '$coerce_to?', '$[]', '$merge!', '$allocate', '$raise', '$coerce_to!', '$each', '$fetch', '$>=', '$>', '$==', '$compare_by_identity', '$lambda?', '$abs', '$arity', '$enum_for', '$size', '$respond_to?', '$class', '$dig', '$new', '$inspect', '$map', '$to_proc', '$flatten', '$eql?', '$default', '$dup', '$default_proc', '$default_proc=', '$-', '$default=', '$proc']);
  
  self.$require("corelib/enumerable");
  return (function($base, $super, $parent_nesting) {
    var self = $klass($base, $super, 'Hash');

    var $nesting = [self].concat($parent_nesting), $Hash_$$$1, $Hash_allocate$2, $Hash_try_convert$3, $Hash_initialize$4, $Hash_$eq_eq$5, $Hash_$gt_eq$6, $Hash_$gt$8, $Hash_$lt$9, $Hash_$lt_eq$10, $Hash_$$$11, $Hash_$$$eq$12, $Hash_assoc$13, $Hash_clear$14, $Hash_clone$15, $Hash_compact$16, $Hash_compact$excl$17, $Hash_compare_by_identity$18, $Hash_compare_by_identity$ques$19, $Hash_default$20, $Hash_default$eq$21, $Hash_default_proc$22, $Hash_default_proc$eq$23, $Hash_delete$24, $Hash_delete_if$25, $Hash_dig$27, $Hash_each$28, $Hash_each_key$30, $Hash_each_value$32, $Hash_empty$ques$34, $Hash_fetch$35, $Hash_fetch_values$36, $Hash_flatten$38, $Hash_has_key$ques$39, $Hash_has_value$ques$40, $Hash_hash$41, $Hash_index$42, $Hash_indexes$43, $Hash_inspect$44, $Hash_invert$45, $Hash_keep_if$46, $Hash_keys$48, $Hash_length$49, $Hash_merge$50, $Hash_merge$excl$51, $Hash_rassoc$52, $Hash_rehash$53, $Hash_reject$54, $Hash_reject$excl$56, $Hash_replace$58, $Hash_select$59, $Hash_select$excl$61, $Hash_shift$63, $Hash_slice$64, $Hash_to_a$65, $Hash_to_h$66, $Hash_to_hash$67, $Hash_to_proc$68, $Hash_transform_keys$70, $Hash_transform_keys$excl$72, $Hash_transform_values$74, $Hash_transform_values$excl$76, $Hash_values$78;

    
    self.$include($$($nesting, 'Enumerable'));
    self.$$prototype.$$is_hash = true;
    Opal.defs(self, '$[]', $Hash_$$$1 = function($a) {
      var $post_args, argv, self = this;

      
      
      $post_args = Opal.slice.call(arguments, 0, arguments.length);
      
      argv = $post_args;;
      
      var hash, argc = argv.length, i;

      if (argc === 1) {
        hash = $$($nesting, 'Opal')['$coerce_to?'](argv['$[]'](0), $$($nesting, 'Hash'), "to_hash");
        if (hash !== nil) {
          return self.$allocate()['$merge!'](hash);
        }

        argv = $$($nesting, 'Opal')['$coerce_to?'](argv['$[]'](0), $$($nesting, 'Array'), "to_ary");
        if (argv === nil) {
          self.$raise($$($nesting, 'ArgumentError'), "odd number of arguments for Hash")
        }

        argc = argv.length;
        hash = self.$allocate();

        for (i = 0; i < argc; i++) {
          if (!argv[i].$$is_array) continue;
          switch(argv[i].length) {
          case 1:
            hash.$store(argv[i][0], nil);
            break;
          case 2:
            hash.$store(argv[i][0], argv[i][1]);
            break;
          default:
            self.$raise($$($nesting, 'ArgumentError'), "" + "invalid number of elements (" + (argv[i].length) + " for 1..2)")
          }
        }

        return hash;
      }

      if (argc % 2 !== 0) {
        self.$raise($$($nesting, 'ArgumentError'), "odd number of arguments for Hash")
      }

      hash = self.$allocate();

      for (i = 0; i < argc; i += 2) {
        hash.$store(argv[i], argv[i + 1]);
      }

      return hash;
    ;
    }, $Hash_$$$1.$$arity = -1);
    Opal.defs(self, '$allocate', $Hash_allocate$2 = function $$allocate() {
      var self = this;

      
      var hash = new self.$$constructor();

      Opal.hash_init(hash);

      hash.$$none = nil;
      hash.$$proc = nil;

      return hash;
    
    }, $Hash_allocate$2.$$arity = 0);
    Opal.defs(self, '$try_convert', $Hash_try_convert$3 = function $$try_convert(obj) {
      var self = this;

      return $$($nesting, 'Opal')['$coerce_to?'](obj, $$($nesting, 'Hash'), "to_hash")
    }, $Hash_try_convert$3.$$arity = 1);
    
    Opal.def(self, '$initialize', $Hash_initialize$4 = function $$initialize(defaults) {
      var $iter = $Hash_initialize$4.$$p, block = $iter || nil, self = this;

      if ($iter) $Hash_initialize$4.$$p = null;
      
      
      if ($iter) $Hash_initialize$4.$$p = null;;
      ;
      
      if (defaults !== undefined && block !== nil) {
        self.$raise($$($nesting, 'ArgumentError'), "wrong number of arguments (1 for 0)")
      }
      self.$$none = (defaults === undefined ? nil : defaults);
      self.$$proc = block;

      return self;
    ;
    }, $Hash_initialize$4.$$arity = -1);
    
    Opal.def(self, '$==', $Hash_$eq_eq$5 = function(other) {
      var self = this;

      
      if (self === other) {
        return true;
      }

      if (!other.$$is_hash) {
        return false;
      }

      if (self.$$keys.length !== other.$$keys.length) {
        return false;
      }

      for (var i = 0, keys = self.$$keys, length = keys.length, key, value, other_value; i < length; i++) {
        key = keys[i];

        if (key.$$is_string) {
          value = self.$$smap[key];
          other_value = other.$$smap[key];
        } else {
          value = key.value;
          other_value = Opal.hash_get(other, key.key);
        }

        if (other_value === undefined || !value['$eql?'](other_value)) {
          return false;
        }
      }

      return true;
    
    }, $Hash_$eq_eq$5.$$arity = 1);
    
    Opal.def(self, '$>=', $Hash_$gt_eq$6 = function(other) {
      var $$7, self = this, result = nil;

      
      other = $$($nesting, 'Opal')['$coerce_to!'](other, $$($nesting, 'Hash'), "to_hash");
      
      if (self.$$keys.length < other.$$keys.length) {
        return false
      }
    ;
      result = true;
      $send(other, 'each', [], ($$7 = function(other_key, other_val){var self = $$7.$$s == null ? this : $$7.$$s, val = nil;

      
        
        if (other_key == null) {
          other_key = nil;
        };
        
        if (other_val == null) {
          other_val = nil;
        };
        val = self.$fetch(other_key, null);
        
        if (val == null || val !== other_val) {
          result = false;
          return;
        }
      ;}, $$7.$$s = self, $$7.$$arity = 2, $$7));
      return result;
    }, $Hash_$gt_eq$6.$$arity = 1);
    
    Opal.def(self, '$>', $Hash_$gt$8 = function(other) {
      var self = this;

      
      other = $$($nesting, 'Opal')['$coerce_to!'](other, $$($nesting, 'Hash'), "to_hash");
      
      if (self.$$keys.length <= other.$$keys.length) {
        return false
      }
    ;
      return $rb_ge(self, other);
    }, $Hash_$gt$8.$$arity = 1);
    
    Opal.def(self, '$<', $Hash_$lt$9 = function(other) {
      var self = this;

      
      other = $$($nesting, 'Opal')['$coerce_to!'](other, $$($nesting, 'Hash'), "to_hash");
      return $rb_gt(other, self);
    }, $Hash_$lt$9.$$arity = 1);
    
    Opal.def(self, '$<=', $Hash_$lt_eq$10 = function(other) {
      var self = this;

      
      other = $$($nesting, 'Opal')['$coerce_to!'](other, $$($nesting, 'Hash'), "to_hash");
      return $rb_ge(other, self);
    }, $Hash_$lt_eq$10.$$arity = 1);
    
    Opal.def(self, '$[]', $Hash_$$$11 = function(key) {
      var self = this;

      
      var value = Opal.hash_get(self, key);

      if (value !== undefined) {
        return value;
      }

      return self.$default(key);
    
    }, $Hash_$$$11.$$arity = 1);
    
    Opal.def(self, '$[]=', $Hash_$$$eq$12 = function(key, value) {
      var self = this;

      
      Opal.hash_put(self, key, value);
      return value;
    
    }, $Hash_$$$eq$12.$$arity = 2);
    
    Opal.def(self, '$assoc', $Hash_assoc$13 = function $$assoc(object) {
      var self = this;

      
      for (var i = 0, keys = self.$$keys, length = keys.length, key; i < length; i++) {
        key = keys[i];

        if (key.$$is_string) {
          if ((key)['$=='](object)) {
            return [key, self.$$smap[key]];
          }
        } else {
          if ((key.key)['$=='](object)) {
            return [key.key, key.value];
          }
        }
      }

      return nil;
    
    }, $Hash_assoc$13.$$arity = 1);
    
    Opal.def(self, '$clear', $Hash_clear$14 = function $$clear() {
      var self = this;

      
      Opal.hash_init(self);
      return self;
    
    }, $Hash_clear$14.$$arity = 0);
    
    Opal.def(self, '$clone', $Hash_clone$15 = function $$clone() {
      var self = this;

      
      var hash = new self.$$class();

      Opal.hash_init(hash);
      Opal.hash_clone(self, hash);

      return hash;
    
    }, $Hash_clone$15.$$arity = 0);
    
    Opal.def(self, '$compact', $Hash_compact$16 = function $$compact() {
      var self = this;

      
      var hash = Opal.hash();

      for (var i = 0, keys = self.$$keys, length = keys.length, key, value, obj; i < length; i++) {
        key = keys[i];

        if (key.$$is_string) {
          value = self.$$smap[key];
        } else {
          value = key.value;
          key = key.key;
        }

        if (value !== nil) {
          Opal.hash_put(hash, key, value);
        }
      }

      return hash;
    
    }, $Hash_compact$16.$$arity = 0);
    
    Opal.def(self, '$compact!', $Hash_compact$excl$17 = function() {
      var self = this;

      
      var changes_were_made = false;

      for (var i = 0, keys = self.$$keys, length = keys.length, key, value, obj; i < length; i++) {
        key = keys[i];

        if (key.$$is_string) {
          value = self.$$smap[key];
        } else {
          value = key.value;
          key = key.key;
        }

        if (value === nil) {
          if (Opal.hash_delete(self, key) !== undefined) {
            changes_were_made = true;
            length--;
            i--;
          }
        }
      }

      return changes_were_made ? self : nil;
    
    }, $Hash_compact$excl$17.$$arity = 0);
    
    Opal.def(self, '$compare_by_identity', $Hash_compare_by_identity$18 = function $$compare_by_identity() {
      var self = this;

      
      var i, ii, key, keys = self.$$keys, identity_hash;

      if (self.$$by_identity) return self;
      if (self.$$keys.length === 0) {
        self.$$by_identity = true
        return self;
      }

      identity_hash = $hash2([], {}).$compare_by_identity();
      for(i = 0, ii = keys.length; i < ii; i++) {
        key = keys[i];
        if (!key.$$is_string) key = key.key;
        Opal.hash_put(identity_hash, key, Opal.hash_get(self, key));
      }

      self.$$by_identity = true;
      self.$$map = identity_hash.$$map;
      self.$$smap = identity_hash.$$smap;
      return self;
    
    }, $Hash_compare_by_identity$18.$$arity = 0);
    
    Opal.def(self, '$compare_by_identity?', $Hash_compare_by_identity$ques$19 = function() {
      var self = this;

      return self.$$by_identity === true;
    }, $Hash_compare_by_identity$ques$19.$$arity = 0);
    
    Opal.def(self, '$default', $Hash_default$20 = function(key) {
      var self = this;

      
      ;
      
      if (key !== undefined && self.$$proc !== nil && self.$$proc !== undefined) {
        return self.$$proc.$call(self, key);
      }
      if (self.$$none === undefined) {
        return nil;
      }
      return self.$$none;
    ;
    }, $Hash_default$20.$$arity = -1);
    
    Opal.def(self, '$default=', $Hash_default$eq$21 = function(object) {
      var self = this;

      
      self.$$proc = nil;
      self.$$none = object;

      return object;
    
    }, $Hash_default$eq$21.$$arity = 1);
    
    Opal.def(self, '$default_proc', $Hash_default_proc$22 = function $$default_proc() {
      var self = this;

      
      if (self.$$proc !== undefined) {
        return self.$$proc;
      }
      return nil;
    
    }, $Hash_default_proc$22.$$arity = 0);
    
    Opal.def(self, '$default_proc=', $Hash_default_proc$eq$23 = function(default_proc) {
      var self = this;

      
      var proc = default_proc;

      if (proc !== nil) {
        proc = $$($nesting, 'Opal')['$coerce_to!'](proc, $$($nesting, 'Proc'), "to_proc");

        if ((proc)['$lambda?']() && (proc).$arity().$abs() !== 2) {
          self.$raise($$($nesting, 'TypeError'), "default_proc takes two arguments");
        }
      }

      self.$$none = nil;
      self.$$proc = proc;

      return default_proc;
    
    }, $Hash_default_proc$eq$23.$$arity = 1);
    
    Opal.def(self, '$delete', $Hash_delete$24 = function(key) {
      var $iter = $Hash_delete$24.$$p, block = $iter || nil, self = this;

      if ($iter) $Hash_delete$24.$$p = null;
      
      
      if ($iter) $Hash_delete$24.$$p = null;;
      
      var value = Opal.hash_delete(self, key);

      if (value !== undefined) {
        return value;
      }

      if (block !== nil) {
        return Opal.yield1(block, key);
      }

      return nil;
    ;
    }, $Hash_delete$24.$$arity = 1);
    
    Opal.def(self, '$delete_if', $Hash_delete_if$25 = function $$delete_if() {
      var $iter = $Hash_delete_if$25.$$p, block = $iter || nil, $$26, self = this;

      if ($iter) $Hash_delete_if$25.$$p = null;
      
      
      if ($iter) $Hash_delete_if$25.$$p = null;;
      if ($truthy(block)) {
      } else {
        return $send(self, 'enum_for', ["delete_if"], ($$26 = function(){var self = $$26.$$s == null ? this : $$26.$$s;

        return self.$size()}, $$26.$$s = self, $$26.$$arity = 0, $$26))
      };
      
      for (var i = 0, keys = self.$$keys, length = keys.length, key, value, obj; i < length; i++) {
        key = keys[i];

        if (key.$$is_string) {
          value = self.$$smap[key];
        } else {
          value = key.value;
          key = key.key;
        }

        obj = block(key, value);

        if (obj !== false && obj !== nil) {
          if (Opal.hash_delete(self, key) !== undefined) {
            length--;
            i--;
          }
        }
      }

      return self;
    ;
    }, $Hash_delete_if$25.$$arity = 0);
    Opal.alias(self, "dup", "clone");
    
    Opal.def(self, '$dig', $Hash_dig$27 = function $$dig(key, $a) {
      var $post_args, keys, self = this, item = nil;

      
      
      $post_args = Opal.slice.call(arguments, 1, arguments.length);
      
      keys = $post_args;;
      item = self['$[]'](key);
      
      if (item === nil || keys.length === 0) {
        return item;
      }
    ;
      if ($truthy(item['$respond_to?']("dig"))) {
      } else {
        self.$raise($$($nesting, 'TypeError'), "" + (item.$class()) + " does not have #dig method")
      };
      return $send(item, 'dig', Opal.to_a(keys));
    }, $Hash_dig$27.$$arity = -2);
    
    Opal.def(self, '$each', $Hash_each$28 = function $$each() {
      var $iter = $Hash_each$28.$$p, block = $iter || nil, $$29, self = this;

      if ($iter) $Hash_each$28.$$p = null;
      
      
      if ($iter) $Hash_each$28.$$p = null;;
      if ($truthy(block)) {
      } else {
        return $send(self, 'enum_for', ["each"], ($$29 = function(){var self = $$29.$$s == null ? this : $$29.$$s;

        return self.$size()}, $$29.$$s = self, $$29.$$arity = 0, $$29))
      };
      
      for (var i = 0, keys = self.$$keys, length = keys.length, key, value; i < length; i++) {
        key = keys[i];

        if (key.$$is_string) {
          value = self.$$smap[key];
        } else {
          value = key.value;
          key = key.key;
        }

        Opal.yield1(block, [key, value]);
      }

      return self;
    ;
    }, $Hash_each$28.$$arity = 0);
    
    Opal.def(self, '$each_key', $Hash_each_key$30 = function $$each_key() {
      var $iter = $Hash_each_key$30.$$p, block = $iter || nil, $$31, self = this;

      if ($iter) $Hash_each_key$30.$$p = null;
      
      
      if ($iter) $Hash_each_key$30.$$p = null;;
      if ($truthy(block)) {
      } else {
        return $send(self, 'enum_for', ["each_key"], ($$31 = function(){var self = $$31.$$s == null ? this : $$31.$$s;

        return self.$size()}, $$31.$$s = self, $$31.$$arity = 0, $$31))
      };
      
      for (var i = 0, keys = self.$$keys, length = keys.length, key; i < length; i++) {
        key = keys[i];

        block(key.$$is_string ? key : key.key);
      }

      return self;
    ;
    }, $Hash_each_key$30.$$arity = 0);
    Opal.alias(self, "each_pair", "each");
    
    Opal.def(self, '$each_value', $Hash_each_value$32 = function $$each_value() {
      var $iter = $Hash_each_value$32.$$p, block = $iter || nil, $$33, self = this;

      if ($iter) $Hash_each_value$32.$$p = null;
      
      
      if ($iter) $Hash_each_value$32.$$p = null;;
      if ($truthy(block)) {
      } else {
        return $send(self, 'enum_for', ["each_value"], ($$33 = function(){var self = $$33.$$s == null ? this : $$33.$$s;

        return self.$size()}, $$33.$$s = self, $$33.$$arity = 0, $$33))
      };
      
      for (var i = 0, keys = self.$$keys, length = keys.length, key; i < length; i++) {
        key = keys[i];

        block(key.$$is_string ? self.$$smap[key] : key.value);
      }

      return self;
    ;
    }, $Hash_each_value$32.$$arity = 0);
    
    Opal.def(self, '$empty?', $Hash_empty$ques$34 = function() {
      var self = this;

      return self.$$keys.length === 0;
    }, $Hash_empty$ques$34.$$arity = 0);
    Opal.alias(self, "eql?", "==");
    
    Opal.def(self, '$fetch', $Hash_fetch$35 = function $$fetch(key, defaults) {
      var $iter = $Hash_fetch$35.$$p, block = $iter || nil, self = this;

      if ($iter) $Hash_fetch$35.$$p = null;
      
      
      if ($iter) $Hash_fetch$35.$$p = null;;
      ;
      
      var value = Opal.hash_get(self, key);

      if (value !== undefined) {
        return value;
      }

      if (block !== nil) {
        return block(key);
      }

      if (defaults !== undefined) {
        return defaults;
      }
    ;
      return self.$raise($$($nesting, 'KeyError').$new("" + "key not found: " + (key.$inspect()), $hash2(["key", "receiver"], {"key": key, "receiver": self})));
    }, $Hash_fetch$35.$$arity = -2);
    
    Opal.def(self, '$fetch_values', $Hash_fetch_values$36 = function $$fetch_values($a) {
      var $iter = $Hash_fetch_values$36.$$p, block = $iter || nil, $post_args, keys, $$37, self = this;

      if ($iter) $Hash_fetch_values$36.$$p = null;
      
      
      if ($iter) $Hash_fetch_values$36.$$p = null;;
      
      $post_args = Opal.slice.call(arguments, 0, arguments.length);
      
      keys = $post_args;;
      return $send(keys, 'map', [], ($$37 = function(key){var self = $$37.$$s == null ? this : $$37.$$s;

      
        
        if (key == null) {
          key = nil;
        };
        return $send(self, 'fetch', [key], block.$to_proc());}, $$37.$$s = self, $$37.$$arity = 1, $$37));
    }, $Hash_fetch_values$36.$$arity = -1);
    
    Opal.def(self, '$flatten', $Hash_flatten$38 = function $$flatten(level) {
      var self = this;

      
      
      if (level == null) {
        level = 1;
      };
      level = $$($nesting, 'Opal')['$coerce_to!'](level, $$($nesting, 'Integer'), "to_int");
      
      var result = [];

      for (var i = 0, keys = self.$$keys, length = keys.length, key, value; i < length; i++) {
        key = keys[i];

        if (key.$$is_string) {
          value = self.$$smap[key];
        } else {
          value = key.value;
          key = key.key;
        }

        result.push(key);

        if (value.$$is_array) {
          if (level === 1) {
            result.push(value);
            continue;
          }

          result = result.concat((value).$flatten(level - 2));
          continue;
        }

        result.push(value);
      }

      return result;
    ;
    }, $Hash_flatten$38.$$arity = -1);
    
    Opal.def(self, '$has_key?', $Hash_has_key$ques$39 = function(key) {
      var self = this;

      return Opal.hash_get(self, key) !== undefined;
    }, $Hash_has_key$ques$39.$$arity = 1);
    
    Opal.def(self, '$has_value?', $Hash_has_value$ques$40 = function(value) {
      var self = this;

      
      for (var i = 0, keys = self.$$keys, length = keys.length, key; i < length; i++) {
        key = keys[i];

        if (((key.$$is_string ? self.$$smap[key] : key.value))['$=='](value)) {
          return true;
        }
      }

      return false;
    
    }, $Hash_has_value$ques$40.$$arity = 1);
    
    Opal.def(self, '$hash', $Hash_hash$41 = function $$hash() {
      var self = this;

      
      var top = (Opal.hash_ids === undefined),
          hash_id = self.$object_id(),
          result = ['Hash'],
          key, item;

      try {
        if (top) {
          Opal.hash_ids = Object.create(null);
        }

        if (Opal[hash_id]) {
          return 'self';
        }

        for (key in Opal.hash_ids) {
          item = Opal.hash_ids[key];
          if (self['$eql?'](item)) {
            return 'self';
          }
        }

        Opal.hash_ids[hash_id] = self;

        for (var i = 0, keys = self.$$keys, length = keys.length; i < length; i++) {
          key = keys[i];

          if (key.$$is_string) {
            result.push([key, self.$$smap[key].$hash()]);
          } else {
            result.push([key.key_hash, key.value.$hash()]);
          }
        }

        return result.sort().join();

      } finally {
        if (top) {
          Opal.hash_ids = undefined;
        }
      }
    
    }, $Hash_hash$41.$$arity = 0);
    Opal.alias(self, "include?", "has_key?");
    
    Opal.def(self, '$index', $Hash_index$42 = function $$index(object) {
      var self = this;

      
      for (var i = 0, keys = self.$$keys, length = keys.length, key, value; i < length; i++) {
        key = keys[i];

        if (key.$$is_string) {
          value = self.$$smap[key];
        } else {
          value = key.value;
          key = key.key;
        }

        if ((value)['$=='](object)) {
          return key;
        }
      }

      return nil;
    
    }, $Hash_index$42.$$arity = 1);
    
    Opal.def(self, '$indexes', $Hash_indexes$43 = function $$indexes($a) {
      var $post_args, args, self = this;

      
      
      $post_args = Opal.slice.call(arguments, 0, arguments.length);
      
      args = $post_args;;
      
      var result = [];

      for (var i = 0, length = args.length, key, value; i < length; i++) {
        key = args[i];
        value = Opal.hash_get(self, key);

        if (value === undefined) {
          result.push(self.$default());
          continue;
        }

        result.push(value);
      }

      return result;
    ;
    }, $Hash_indexes$43.$$arity = -1);
    Opal.alias(self, "indices", "indexes");
    var inspect_ids;
    
    Opal.def(self, '$inspect', $Hash_inspect$44 = function $$inspect() {
      var self = this;

      
      var top = (inspect_ids === undefined),
          hash_id = self.$object_id(),
          result = [];

      try {
        if (top) {
          inspect_ids = {};
        }

        if (inspect_ids.hasOwnProperty(hash_id)) {
          return '{...}';
        }

        inspect_ids[hash_id] = true;

        for (var i = 0, keys = self.$$keys, length = keys.length, key, value; i < length; i++) {
          key = keys[i];

          if (key.$$is_string) {
            value = self.$$smap[key];
          } else {
            value = key.value;
            key = key.key;
          }

          result.push(key.$inspect() + '=>' + value.$inspect());
        }

        return '{' + result.join(', ') + '}';

      } finally {
        if (top) {
          inspect_ids = undefined;
        }
      }
    
    }, $Hash_inspect$44.$$arity = 0);
    
    Opal.def(self, '$invert', $Hash_invert$45 = function $$invert() {
      var self = this;

      
      var hash = Opal.hash();

      for (var i = 0, keys = self.$$keys, length = keys.length, key, value; i < length; i++) {
        key = keys[i];

        if (key.$$is_string) {
          value = self.$$smap[key];
        } else {
          value = key.value;
          key = key.key;
        }

        Opal.hash_put(hash, value, key);
      }

      return hash;
    
    }, $Hash_invert$45.$$arity = 0);
    
    Opal.def(self, '$keep_if', $Hash_keep_if$46 = function $$keep_if() {
      var $iter = $Hash_keep_if$46.$$p, block = $iter || nil, $$47, self = this;

      if ($iter) $Hash_keep_if$46.$$p = null;
      
      
      if ($iter) $Hash_keep_if$46.$$p = null;;
      if ($truthy(block)) {
      } else {
        return $send(self, 'enum_for', ["keep_if"], ($$47 = function(){var self = $$47.$$s == null ? this : $$47.$$s;

        return self.$size()}, $$47.$$s = self, $$47.$$arity = 0, $$47))
      };
      
      for (var i = 0, keys = self.$$keys, length = keys.length, key, value, obj; i < length; i++) {
        key = keys[i];

        if (key.$$is_string) {
          value = self.$$smap[key];
        } else {
          value = key.value;
          key = key.key;
        }

        obj = block(key, value);

        if (obj === false || obj === nil) {
          if (Opal.hash_delete(self, key) !== undefined) {
            length--;
            i--;
          }
        }
      }

      return self;
    ;
    }, $Hash_keep_if$46.$$arity = 0);
    Opal.alias(self, "key", "index");
    Opal.alias(self, "key?", "has_key?");
    
    Opal.def(self, '$keys', $Hash_keys$48 = function $$keys() {
      var self = this;

      
      var result = [];

      for (var i = 0, keys = self.$$keys, length = keys.length, key; i < length; i++) {
        key = keys[i];

        if (key.$$is_string) {
          result.push(key);
        } else {
          result.push(key.key);
        }
      }

      return result;
    
    }, $Hash_keys$48.$$arity = 0);
    
    Opal.def(self, '$length', $Hash_length$49 = function $$length() {
      var self = this;

      return self.$$keys.length;
    }, $Hash_length$49.$$arity = 0);
    Opal.alias(self, "member?", "has_key?");
    
    Opal.def(self, '$merge', $Hash_merge$50 = function $$merge(other) {
      var $iter = $Hash_merge$50.$$p, block = $iter || nil, self = this;

      if ($iter) $Hash_merge$50.$$p = null;
      
      
      if ($iter) $Hash_merge$50.$$p = null;;
      return $send(self.$dup(), 'merge!', [other], block.$to_proc());
    }, $Hash_merge$50.$$arity = 1);
    
    Opal.def(self, '$merge!', $Hash_merge$excl$51 = function(other) {
      var $iter = $Hash_merge$excl$51.$$p, block = $iter || nil, self = this;

      if ($iter) $Hash_merge$excl$51.$$p = null;
      
      
      if ($iter) $Hash_merge$excl$51.$$p = null;;
      
      if (!other.$$is_hash) {
        other = $$($nesting, 'Opal')['$coerce_to!'](other, $$($nesting, 'Hash'), "to_hash");
      }

      var i, other_keys = other.$$keys, length = other_keys.length, key, value, other_value;

      if (block === nil) {
        for (i = 0; i < length; i++) {
          key = other_keys[i];

          if (key.$$is_string) {
            other_value = other.$$smap[key];
          } else {
            other_value = key.value;
            key = key.key;
          }

          Opal.hash_put(self, key, other_value);
        }

        return self;
      }

      for (i = 0; i < length; i++) {
        key = other_keys[i];

        if (key.$$is_string) {
          other_value = other.$$smap[key];
        } else {
          other_value = key.value;
          key = key.key;
        }

        value = Opal.hash_get(self, key);

        if (value === undefined) {
          Opal.hash_put(self, key, other_value);
          continue;
        }

        Opal.hash_put(self, key, block(key, value, other_value));
      }

      return self;
    ;
    }, $Hash_merge$excl$51.$$arity = 1);
    
    Opal.def(self, '$rassoc', $Hash_rassoc$52 = function $$rassoc(object) {
      var self = this;

      
      for (var i = 0, keys = self.$$keys, length = keys.length, key, value; i < length; i++) {
        key = keys[i];

        if (key.$$is_string) {
          value = self.$$smap[key];
        } else {
          value = key.value;
          key = key.key;
        }

        if ((value)['$=='](object)) {
          return [key, value];
        }
      }

      return nil;
    
    }, $Hash_rassoc$52.$$arity = 1);
    
    Opal.def(self, '$rehash', $Hash_rehash$53 = function $$rehash() {
      var self = this;

      
      Opal.hash_rehash(self);
      return self;
    
    }, $Hash_rehash$53.$$arity = 0);
    
    Opal.def(self, '$reject', $Hash_reject$54 = function $$reject() {
      var $iter = $Hash_reject$54.$$p, block = $iter || nil, $$55, self = this;

      if ($iter) $Hash_reject$54.$$p = null;
      
      
      if ($iter) $Hash_reject$54.$$p = null;;
      if ($truthy(block)) {
      } else {
        return $send(self, 'enum_for', ["reject"], ($$55 = function(){var self = $$55.$$s == null ? this : $$55.$$s;

        return self.$size()}, $$55.$$s = self, $$55.$$arity = 0, $$55))
      };
      
      var hash = Opal.hash();

      for (var i = 0, keys = self.$$keys, length = keys.length, key, value, obj; i < length; i++) {
        key = keys[i];

        if (key.$$is_string) {
          value = self.$$smap[key];
        } else {
          value = key.value;
          key = key.key;
        }

        obj = block(key, value);

        if (obj === false || obj === nil) {
          Opal.hash_put(hash, key, value);
        }
      }

      return hash;
    ;
    }, $Hash_reject$54.$$arity = 0);
    
    Opal.def(self, '$reject!', $Hash_reject$excl$56 = function() {
      var $iter = $Hash_reject$excl$56.$$p, block = $iter || nil, $$57, self = this;

      if ($iter) $Hash_reject$excl$56.$$p = null;
      
      
      if ($iter) $Hash_reject$excl$56.$$p = null;;
      if ($truthy(block)) {
      } else {
        return $send(self, 'enum_for', ["reject!"], ($$57 = function(){var self = $$57.$$s == null ? this : $$57.$$s;

        return self.$size()}, $$57.$$s = self, $$57.$$arity = 0, $$57))
      };
      
      var changes_were_made = false;

      for (var i = 0, keys = self.$$keys, length = keys.length, key, value, obj; i < length; i++) {
        key = keys[i];

        if (key.$$is_string) {
          value = self.$$smap[key];
        } else {
          value = key.value;
          key = key.key;
        }

        obj = block(key, value);

        if (obj !== false && obj !== nil) {
          if (Opal.hash_delete(self, key) !== undefined) {
            changes_were_made = true;
            length--;
            i--;
          }
        }
      }

      return changes_were_made ? self : nil;
    ;
    }, $Hash_reject$excl$56.$$arity = 0);
    
    Opal.def(self, '$replace', $Hash_replace$58 = function $$replace(other) {
      var self = this, $writer = nil;

      
      other = $$($nesting, 'Opal')['$coerce_to!'](other, $$($nesting, 'Hash'), "to_hash");
      
      Opal.hash_init(self);

      for (var i = 0, other_keys = other.$$keys, length = other_keys.length, key, value, other_value; i < length; i++) {
        key = other_keys[i];

        if (key.$$is_string) {
          other_value = other.$$smap[key];
        } else {
          other_value = key.value;
          key = key.key;
        }

        Opal.hash_put(self, key, other_value);
      }
    ;
      if ($truthy(other.$default_proc())) {
        
        $writer = [other.$default_proc()];
        $send(self, 'default_proc=', Opal.to_a($writer));
        $writer[$rb_minus($writer["length"], 1)];
      } else {
        
        $writer = [other.$default()];
        $send(self, 'default=', Opal.to_a($writer));
        $writer[$rb_minus($writer["length"], 1)];
      };
      return self;
    }, $Hash_replace$58.$$arity = 1);
    
    Opal.def(self, '$select', $Hash_select$59 = function $$select() {
      var $iter = $Hash_select$59.$$p, block = $iter || nil, $$60, self = this;

      if ($iter) $Hash_select$59.$$p = null;
      
      
      if ($iter) $Hash_select$59.$$p = null;;
      if ($truthy(block)) {
      } else {
        return $send(self, 'enum_for', ["select"], ($$60 = function(){var self = $$60.$$s == null ? this : $$60.$$s;

        return self.$size()}, $$60.$$s = self, $$60.$$arity = 0, $$60))
      };
      
      var hash = Opal.hash();

      for (var i = 0, keys = self.$$keys, length = keys.length, key, value, obj; i < length; i++) {
        key = keys[i];

        if (key.$$is_string) {
          value = self.$$smap[key];
        } else {
          value = key.value;
          key = key.key;
        }

        obj = block(key, value);

        if (obj !== false && obj !== nil) {
          Opal.hash_put(hash, key, value);
        }
      }

      return hash;
    ;
    }, $Hash_select$59.$$arity = 0);
    
    Opal.def(self, '$select!', $Hash_select$excl$61 = function() {
      var $iter = $Hash_select$excl$61.$$p, block = $iter || nil, $$62, self = this;

      if ($iter) $Hash_select$excl$61.$$p = null;
      
      
      if ($iter) $Hash_select$excl$61.$$p = null;;
      if ($truthy(block)) {
      } else {
        return $send(self, 'enum_for', ["select!"], ($$62 = function(){var self = $$62.$$s == null ? this : $$62.$$s;

        return self.$size()}, $$62.$$s = self, $$62.$$arity = 0, $$62))
      };
      
      var result = nil;

      for (var i = 0, keys = self.$$keys, length = keys.length, key, value, obj; i < length; i++) {
        key = keys[i];

        if (key.$$is_string) {
          value = self.$$smap[key];
        } else {
          value = key.value;
          key = key.key;
        }

        obj = block(key, value);

        if (obj === false || obj === nil) {
          if (Opal.hash_delete(self, key) !== undefined) {
            length--;
            i--;
          }
          result = self;
        }
      }

      return result;
    ;
    }, $Hash_select$excl$61.$$arity = 0);
    
    Opal.def(self, '$shift', $Hash_shift$63 = function $$shift() {
      var self = this;

      
      var keys = self.$$keys,
          key;

      if (keys.length > 0) {
        key = keys[0];

        key = key.$$is_string ? key : key.key;

        return [key, Opal.hash_delete(self, key)];
      }

      return self.$default(nil);
    
    }, $Hash_shift$63.$$arity = 0);
    Opal.alias(self, "size", "length");
    
    Opal.def(self, '$slice', $Hash_slice$64 = function $$slice($a) {
      var $post_args, keys, self = this;

      
      
      $post_args = Opal.slice.call(arguments, 0, arguments.length);
      
      keys = $post_args;;
      
      var result = Opal.hash();

      for (var i = 0, length = keys.length; i < length; i++) {
        var key = keys[i], value = Opal.hash_get(self, key);

        if (value !== undefined) {
          Opal.hash_put(result, key, value);
        }
      }

      return result;
    ;
    }, $Hash_slice$64.$$arity = -1);
    Opal.alias(self, "store", "[]=");
    
    Opal.def(self, '$to_a', $Hash_to_a$65 = function $$to_a() {
      var self = this;

      
      var result = [];

      for (var i = 0, keys = self.$$keys, length = keys.length, key, value; i < length; i++) {
        key = keys[i];

        if (key.$$is_string) {
          value = self.$$smap[key];
        } else {
          value = key.value;
          key = key.key;
        }

        result.push([key, value]);
      }

      return result;
    
    }, $Hash_to_a$65.$$arity = 0);
    
    Opal.def(self, '$to_h', $Hash_to_h$66 = function $$to_h() {
      var self = this;

      
      if (self.$$class === Opal.Hash) {
        return self;
      }

      var hash = new Opal.Hash();

      Opal.hash_init(hash);
      Opal.hash_clone(self, hash);

      return hash;
    
    }, $Hash_to_h$66.$$arity = 0);
    
    Opal.def(self, '$to_hash', $Hash_to_hash$67 = function $$to_hash() {
      var self = this;

      return self
    }, $Hash_to_hash$67.$$arity = 0);
    
    Opal.def(self, '$to_proc', $Hash_to_proc$68 = function $$to_proc() {
      var $$69, self = this;

      return $send(self, 'proc', [], ($$69 = function(key){var self = $$69.$$s == null ? this : $$69.$$s;

      
        ;
        
        if (key == null) {
          self.$raise($$($nesting, 'ArgumentError'), "no key given")
        }
      ;
        return self['$[]'](key);}, $$69.$$s = self, $$69.$$arity = -1, $$69))
    }, $Hash_to_proc$68.$$arity = 0);
    Opal.alias(self, "to_s", "inspect");
    
    Opal.def(self, '$transform_keys', $Hash_transform_keys$70 = function $$transform_keys() {
      var $iter = $Hash_transform_keys$70.$$p, block = $iter || nil, $$71, self = this;

      if ($iter) $Hash_transform_keys$70.$$p = null;
      
      
      if ($iter) $Hash_transform_keys$70.$$p = null;;
      if ($truthy(block)) {
      } else {
        return $send(self, 'enum_for', ["transform_keys"], ($$71 = function(){var self = $$71.$$s == null ? this : $$71.$$s;

        return self.$size()}, $$71.$$s = self, $$71.$$arity = 0, $$71))
      };
      
      var result = Opal.hash();

      for (var i = 0, keys = self.$$keys, length = keys.length, key, value; i < length; i++) {
        key = keys[i];

        if (key.$$is_string) {
          value = self.$$smap[key];
        } else {
          value = key.value;
          key = key.key;
        }

        key = Opal.yield1(block, key);

        Opal.hash_put(result, key, value);
      }

      return result;
    ;
    }, $Hash_transform_keys$70.$$arity = 0);
    
    Opal.def(self, '$transform_keys!', $Hash_transform_keys$excl$72 = function() {
      var $iter = $Hash_transform_keys$excl$72.$$p, block = $iter || nil, $$73, self = this;

      if ($iter) $Hash_transform_keys$excl$72.$$p = null;
      
      
      if ($iter) $Hash_transform_keys$excl$72.$$p = null;;
      if ($truthy(block)) {
      } else {
        return $send(self, 'enum_for', ["transform_keys!"], ($$73 = function(){var self = $$73.$$s == null ? this : $$73.$$s;

        return self.$size()}, $$73.$$s = self, $$73.$$arity = 0, $$73))
      };
      
      var keys = Opal.slice.call(self.$$keys),
          i, length = keys.length, key, value, new_key;

      for (i = 0; i < length; i++) {
        key = keys[i];

        if (key.$$is_string) {
          value = self.$$smap[key];
        } else {
          value = key.value;
          key = key.key;
        }

        new_key = Opal.yield1(block, key);

        Opal.hash_delete(self, key);
        Opal.hash_put(self, new_key, value);
      }

      return self;
    ;
    }, $Hash_transform_keys$excl$72.$$arity = 0);
    
    Opal.def(self, '$transform_values', $Hash_transform_values$74 = function $$transform_values() {
      var $iter = $Hash_transform_values$74.$$p, block = $iter || nil, $$75, self = this;

      if ($iter) $Hash_transform_values$74.$$p = null;
      
      
      if ($iter) $Hash_transform_values$74.$$p = null;;
      if ($truthy(block)) {
      } else {
        return $send(self, 'enum_for', ["transform_values"], ($$75 = function(){var self = $$75.$$s == null ? this : $$75.$$s;

        return self.$size()}, $$75.$$s = self, $$75.$$arity = 0, $$75))
      };
      
      var result = Opal.hash();

      for (var i = 0, keys = self.$$keys, length = keys.length, key, value; i < length; i++) {
        key = keys[i];

        if (key.$$is_string) {
          value = self.$$smap[key];
        } else {
          value = key.value;
          key = key.key;
        }

        value = Opal.yield1(block, value);

        Opal.hash_put(result, key, value);
      }

      return result;
    ;
    }, $Hash_transform_values$74.$$arity = 0);
    
    Opal.def(self, '$transform_values!', $Hash_transform_values$excl$76 = function() {
      var $iter = $Hash_transform_values$excl$76.$$p, block = $iter || nil, $$77, self = this;

      if ($iter) $Hash_transform_values$excl$76.$$p = null;
      
      
      if ($iter) $Hash_transform_values$excl$76.$$p = null;;
      if ($truthy(block)) {
      } else {
        return $send(self, 'enum_for', ["transform_values!"], ($$77 = function(){var self = $$77.$$s == null ? this : $$77.$$s;

        return self.$size()}, $$77.$$s = self, $$77.$$arity = 0, $$77))
      };
      
      for (var i = 0, keys = self.$$keys, length = keys.length, key, value; i < length; i++) {
        key = keys[i];

        if (key.$$is_string) {
          value = self.$$smap[key];
        } else {
          value = key.value;
          key = key.key;
        }

        value = Opal.yield1(block, value);

        Opal.hash_put(self, key, value);
      }

      return self;
    ;
    }, $Hash_transform_values$excl$76.$$arity = 0);
    Opal.alias(self, "update", "merge!");
    Opal.alias(self, "value?", "has_value?");
    Opal.alias(self, "values_at", "indexes");
    return (Opal.def(self, '$values', $Hash_values$78 = function $$values() {
      var self = this;

      
      var result = [];

      for (var i = 0, keys = self.$$keys, length = keys.length, key; i < length; i++) {
        key = keys[i];

        if (key.$$is_string) {
          result.push(self.$$smap[key]);
        } else {
          result.push(key.value);
        }
      }

      return result;
    
    }, $Hash_values$78.$$arity = 0), nil) && 'values';
  })($nesting[0], null, $nesting);
};

/* Generated by Opal 1.0.0 */
Opal.modules["corelib/number"] = function(Opal) {
  function $rb_gt(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs > rhs : lhs['$>'](rhs);
  }
  function $rb_lt(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs < rhs : lhs['$<'](rhs);
  }
  function $rb_plus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs + rhs : lhs['$+'](rhs);
  }
  function $rb_minus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs - rhs : lhs['$-'](rhs);
  }
  function $rb_divide(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs / rhs : lhs['$/'](rhs);
  }
  function $rb_times(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs * rhs : lhs['$*'](rhs);
  }
  function $rb_le(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs <= rhs : lhs['$<='](rhs);
  }
  function $rb_ge(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs >= rhs : lhs['$>='](rhs);
  }
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.$$$, $$ = Opal.$$, $klass = Opal.klass, $truthy = Opal.truthy, $send2 = Opal.send2, $send = Opal.send, $hash2 = Opal.hash2;

  Opal.add_stubs(['$require', '$bridge', '$raise', '$name', '$class', '$Float', '$respond_to?', '$coerce_to!', '$__coerced__', '$===', '$!', '$>', '$**', '$new', '$<', '$to_f', '$==', '$nan?', '$infinite?', '$enum_for', '$+', '$-', '$gcd', '$lcm', '$%', '$/', '$frexp', '$to_i', '$ldexp', '$rationalize', '$*', '$<<', '$to_r', '$truncate', '$-@', '$size', '$<=', '$>=', '$<=>', '$compare', '$any?']);
  
  self.$require("corelib/numeric");
  (function($base, $super, $parent_nesting) {
    var self = $klass($base, $super, 'Number');

    var $nesting = [self].concat($parent_nesting), $Number_coerce$2, $Number___id__$3, $Number_$plus$4, $Number_$minus$5, $Number_$$6, $Number_$slash$7, $Number_$percent$8, $Number_$$9, $Number_$$10, $Number_$$11, $Number_$lt$12, $Number_$lt_eq$13, $Number_$gt$14, $Number_$gt_eq$15, $Number_$lt_eq_gt$16, $Number_$lt$lt$17, $Number_$gt$gt$18, $Number_$$$19, $Number_$plus$$20, $Number_$minus$$21, $Number_$$22, $Number_$$$23, $Number_$eq_eq_eq$24, $Number_$eq_eq$25, $Number_abs$26, $Number_abs2$27, $Number_allbits$ques$28, $Number_anybits$ques$29, $Number_angle$30, $Number_bit_length$31, $Number_ceil$32, $Number_chr$33, $Number_denominator$34, $Number_downto$35, $Number_equal$ques$37, $Number_even$ques$38, $Number_floor$39, $Number_gcd$40, $Number_gcdlcm$41, $Number_integer$ques$42, $Number_is_a$ques$43, $Number_instance_of$ques$44, $Number_lcm$45, $Number_next$46, $Number_nobits$ques$47, $Number_nonzero$ques$48, $Number_numerator$49, $Number_odd$ques$50, $Number_ord$51, $Number_pow$52, $Number_pred$53, $Number_quo$54, $Number_rationalize$55, $Number_remainder$56, $Number_round$57, $Number_step$58, $Number_times$60, $Number_to_f$62, $Number_to_i$63, $Number_to_r$64, $Number_to_s$65, $Number_truncate$66, $Number_digits$67, $Number_divmod$68, $Number_upto$69, $Number_zero$ques$71, $Number_size$72, $Number_nan$ques$73, $Number_finite$ques$74, $Number_infinite$ques$75, $Number_positive$ques$76, $Number_negative$ques$77;

    
    $$($nesting, 'Opal').$bridge(Number, self);
    Opal.defineProperty(self.$$prototype, '$$is_number', true);
    self.$$is_number_class = true;
    (function(self, $parent_nesting) {
      var $nesting = [self].concat($parent_nesting), $allocate$1;

      
      
      Opal.def(self, '$allocate', $allocate$1 = function $$allocate() {
        var self = this;

        return self.$raise($$($nesting, 'TypeError'), "" + "allocator undefined for " + (self.$name()))
      }, $allocate$1.$$arity = 0);
      
      
      Opal.udef(self, '$' + "new");;
      return nil;;
    })(Opal.get_singleton_class(self), $nesting);
    
    Opal.def(self, '$coerce', $Number_coerce$2 = function $$coerce(other) {
      var self = this;

      
      if (other === nil) {
        self.$raise($$($nesting, 'TypeError'), "" + "can't convert " + (other.$class()) + " into Float");
      }
      else if (other.$$is_string) {
        return [self.$Float(other), self];
      }
      else if (other['$respond_to?']("to_f")) {
        return [$$($nesting, 'Opal')['$coerce_to!'](other, $$($nesting, 'Float'), "to_f"), self];
      }
      else if (other.$$is_number) {
        return [other, self];
      }
      else {
        self.$raise($$($nesting, 'TypeError'), "" + "can't convert " + (other.$class()) + " into Float");
      }
    
    }, $Number_coerce$2.$$arity = 1);
    
    Opal.def(self, '$__id__', $Number___id__$3 = function $$__id__() {
      var self = this;

      return (self * 2) + 1;
    }, $Number___id__$3.$$arity = 0);
    Opal.alias(self, "object_id", "__id__");
    
    Opal.def(self, '$+', $Number_$plus$4 = function(other) {
      var self = this;

      
      if (other.$$is_number) {
        return self + other;
      }
      else {
        return self.$__coerced__("+", other);
      }
    
    }, $Number_$plus$4.$$arity = 1);
    
    Opal.def(self, '$-', $Number_$minus$5 = function(other) {
      var self = this;

      
      if (other.$$is_number) {
        return self - other;
      }
      else {
        return self.$__coerced__("-", other);
      }
    
    }, $Number_$minus$5.$$arity = 1);
    
    Opal.def(self, '$*', $Number_$$6 = function(other) {
      var self = this;

      
      if (other.$$is_number) {
        return self * other;
      }
      else {
        return self.$__coerced__("*", other);
      }
    
    }, $Number_$$6.$$arity = 1);
    
    Opal.def(self, '$/', $Number_$slash$7 = function(other) {
      var self = this;

      
      if (other.$$is_number) {
        return self / other;
      }
      else {
        return self.$__coerced__("/", other);
      }
    
    }, $Number_$slash$7.$$arity = 1);
    Opal.alias(self, "fdiv", "/");
    
    Opal.def(self, '$%', $Number_$percent$8 = function(other) {
      var self = this;

      
      if (other.$$is_number) {
        if (other == -Infinity) {
          return other;
        }
        else if (other == 0) {
          self.$raise($$($nesting, 'ZeroDivisionError'), "divided by 0");
        }
        else if (other < 0 || self < 0) {
          return (self % other + other) % other;
        }
        else {
          return self % other;
        }
      }
      else {
        return self.$__coerced__("%", other);
      }
    
    }, $Number_$percent$8.$$arity = 1);
    
    Opal.def(self, '$&', $Number_$$9 = function(other) {
      var self = this;

      
      if (other.$$is_number) {
        return self & other;
      }
      else {
        return self.$__coerced__("&", other);
      }
    
    }, $Number_$$9.$$arity = 1);
    
    Opal.def(self, '$|', $Number_$$10 = function(other) {
      var self = this;

      
      if (other.$$is_number) {
        return self | other;
      }
      else {
        return self.$__coerced__("|", other);
      }
    
    }, $Number_$$10.$$arity = 1);
    
    Opal.def(self, '$^', $Number_$$11 = function(other) {
      var self = this;

      
      if (other.$$is_number) {
        return self ^ other;
      }
      else {
        return self.$__coerced__("^", other);
      }
    
    }, $Number_$$11.$$arity = 1);
    
    Opal.def(self, '$<', $Number_$lt$12 = function(other) {
      var self = this;

      
      if (other.$$is_number) {
        return self < other;
      }
      else {
        return self.$__coerced__("<", other);
      }
    
    }, $Number_$lt$12.$$arity = 1);
    
    Opal.def(self, '$<=', $Number_$lt_eq$13 = function(other) {
      var self = this;

      
      if (other.$$is_number) {
        return self <= other;
      }
      else {
        return self.$__coerced__("<=", other);
      }
    
    }, $Number_$lt_eq$13.$$arity = 1);
    
    Opal.def(self, '$>', $Number_$gt$14 = function(other) {
      var self = this;

      
      if (other.$$is_number) {
        return self > other;
      }
      else {
        return self.$__coerced__(">", other);
      }
    
    }, $Number_$gt$14.$$arity = 1);
    
    Opal.def(self, '$>=', $Number_$gt_eq$15 = function(other) {
      var self = this;

      
      if (other.$$is_number) {
        return self >= other;
      }
      else {
        return self.$__coerced__(">=", other);
      }
    
    }, $Number_$gt_eq$15.$$arity = 1);
    
    var spaceship_operator = function(self, other) {
      if (other.$$is_number) {
        if (isNaN(self) || isNaN(other)) {
          return nil;
        }

        if (self > other) {
          return 1;
        } else if (self < other) {
          return -1;
        } else {
          return 0;
        }
      }
      else {
        return self.$__coerced__("<=>", other);
      }
    }
  ;
    
    Opal.def(self, '$<=>', $Number_$lt_eq_gt$16 = function(other) {
      var self = this;

      try {
        return spaceship_operator(self, other);
      } catch ($err) {
        if (Opal.rescue($err, [$$($nesting, 'ArgumentError')])) {
          try {
            return nil
          } finally { Opal.pop_exception() }
        } else { throw $err; }
      }
    }, $Number_$lt_eq_gt$16.$$arity = 1);
    
    Opal.def(self, '$<<', $Number_$lt$lt$17 = function(count) {
      var self = this;

      
      count = $$($nesting, 'Opal')['$coerce_to!'](count, $$($nesting, 'Integer'), "to_int");
      return count > 0 ? self << count : self >> -count;
    }, $Number_$lt$lt$17.$$arity = 1);
    
    Opal.def(self, '$>>', $Number_$gt$gt$18 = function(count) {
      var self = this;

      
      count = $$($nesting, 'Opal')['$coerce_to!'](count, $$($nesting, 'Integer'), "to_int");
      return count > 0 ? self >> count : self << -count;
    }, $Number_$gt$gt$18.$$arity = 1);
    
    Opal.def(self, '$[]', $Number_$$$19 = function(bit) {
      var self = this;

      
      bit = $$($nesting, 'Opal')['$coerce_to!'](bit, $$($nesting, 'Integer'), "to_int");
      
      if (bit < 0) {
        return 0;
      }
      if (bit >= 32) {
        return self < 0 ? 1 : 0;
      }
      return (self >> bit) & 1;
    ;
    }, $Number_$$$19.$$arity = 1);
    
    Opal.def(self, '$+@', $Number_$plus$$20 = function() {
      var self = this;

      return +self;
    }, $Number_$plus$$20.$$arity = 0);
    
    Opal.def(self, '$-@', $Number_$minus$$21 = function() {
      var self = this;

      return -self;
    }, $Number_$minus$$21.$$arity = 0);
    
    Opal.def(self, '$~', $Number_$$22 = function() {
      var self = this;

      return ~self;
    }, $Number_$$22.$$arity = 0);
    
    Opal.def(self, '$**', $Number_$$$23 = function(other) {
      var $a, $b, self = this;

      if ($truthy($$($nesting, 'Integer')['$==='](other))) {
        if ($truthy(($truthy($a = $$($nesting, 'Integer')['$==='](self)['$!']()) ? $a : $rb_gt(other, 0)))) {
          return Math.pow(self, other);
        } else {
          return $$($nesting, 'Rational').$new(self, 1)['$**'](other)
        }
      } else if ($truthy((($a = $rb_lt(self, 0)) ? ($truthy($b = $$($nesting, 'Float')['$==='](other)) ? $b : $$($nesting, 'Rational')['$==='](other)) : $rb_lt(self, 0)))) {
        return $$($nesting, 'Complex').$new(self, 0)['$**'](other.$to_f())
      } else if ($truthy(other.$$is_number != null)) {
        return Math.pow(self, other);
      } else {
        return self.$__coerced__("**", other)
      }
    }, $Number_$$$23.$$arity = 1);
    
    Opal.def(self, '$===', $Number_$eq_eq_eq$24 = function(other) {
      var self = this;

      
      if (other.$$is_number) {
        return self.valueOf() === other.valueOf();
      }
      else if (other['$respond_to?']("==")) {
        return other['$=='](self);
      }
      else {
        return false;
      }
    
    }, $Number_$eq_eq_eq$24.$$arity = 1);
    
    Opal.def(self, '$==', $Number_$eq_eq$25 = function(other) {
      var self = this;

      
      if (other.$$is_number) {
        return self.valueOf() === other.valueOf();
      }
      else if (other['$respond_to?']("==")) {
        return other['$=='](self);
      }
      else {
        return false;
      }
    
    }, $Number_$eq_eq$25.$$arity = 1);
    
    Opal.def(self, '$abs', $Number_abs$26 = function $$abs() {
      var self = this;

      return Math.abs(self);
    }, $Number_abs$26.$$arity = 0);
    
    Opal.def(self, '$abs2', $Number_abs2$27 = function $$abs2() {
      var self = this;

      return Math.abs(self * self);
    }, $Number_abs2$27.$$arity = 0);
    
    Opal.def(self, '$allbits?', $Number_allbits$ques$28 = function(mask) {
      var self = this;

      
      mask = $$($nesting, 'Opal')['$coerce_to!'](mask, $$($nesting, 'Integer'), "to_int");
      return (self & mask) == mask;;
    }, $Number_allbits$ques$28.$$arity = 1);
    
    Opal.def(self, '$anybits?', $Number_anybits$ques$29 = function(mask) {
      var self = this;

      
      mask = $$($nesting, 'Opal')['$coerce_to!'](mask, $$($nesting, 'Integer'), "to_int");
      return (self & mask) !== 0;;
    }, $Number_anybits$ques$29.$$arity = 1);
    
    Opal.def(self, '$angle', $Number_angle$30 = function $$angle() {
      var self = this;

      
      if ($truthy(self['$nan?']())) {
        return self};
      
      if (self == 0) {
        if (1 / self > 0) {
          return 0;
        }
        else {
          return Math.PI;
        }
      }
      else if (self < 0) {
        return Math.PI;
      }
      else {
        return 0;
      }
    ;
    }, $Number_angle$30.$$arity = 0);
    Opal.alias(self, "arg", "angle");
    Opal.alias(self, "phase", "angle");
    
    Opal.def(self, '$bit_length', $Number_bit_length$31 = function $$bit_length() {
      var self = this;

      
      if ($truthy($$($nesting, 'Integer')['$==='](self))) {
      } else {
        self.$raise($$($nesting, 'NoMethodError').$new("" + "undefined method `bit_length` for " + (self) + ":Float", "bit_length"))
      };
      
      if (self === 0 || self === -1) {
        return 0;
      }

      var result = 0,
          value  = self < 0 ? ~self : self;

      while (value != 0) {
        result   += 1;
        value  >>>= 1;
      }

      return result;
    ;
    }, $Number_bit_length$31.$$arity = 0);
    
    Opal.def(self, '$ceil', $Number_ceil$32 = function $$ceil(ndigits) {
      var self = this;

      
      
      if (ndigits == null) {
        ndigits = 0;
      };
      
      var f = self.$to_f();

      if (f % 1 === 0 && ndigits >= 0) {
        return f;
      }

      var factor = Math.pow(10, ndigits),
          result = Math.ceil(f * factor) / factor;

      if (f % 1 === 0) {
        result = Math.round(result);
      }

      return result;
    ;
    }, $Number_ceil$32.$$arity = -1);
    
    Opal.def(self, '$chr', $Number_chr$33 = function $$chr(encoding) {
      var self = this;

      
      ;
      return String.fromCharCode(self);;
    }, $Number_chr$33.$$arity = -1);
    
    Opal.def(self, '$denominator', $Number_denominator$34 = function $$denominator() {
      var $a, $iter = $Number_denominator$34.$$p, $yield = $iter || nil, self = this, $zuper = nil, $zuper_i = nil, $zuper_ii = nil;

      if ($iter) $Number_denominator$34.$$p = null;
      // Prepare super implicit arguments
      for($zuper_i = 0, $zuper_ii = arguments.length, $zuper = new Array($zuper_ii); $zuper_i < $zuper_ii; $zuper_i++) {
        $zuper[$zuper_i] = arguments[$zuper_i];
      }
      if ($truthy(($truthy($a = self['$nan?']()) ? $a : self['$infinite?']()))) {
        return 1
      } else {
        return $send2(self, Opal.find_super_dispatcher(self, 'denominator', $Number_denominator$34, false, true), 'denominator', $zuper, $iter)
      }
    }, $Number_denominator$34.$$arity = 0);
    
    Opal.def(self, '$downto', $Number_downto$35 = function $$downto(stop) {
      var $iter = $Number_downto$35.$$p, block = $iter || nil, $$36, self = this;

      if ($iter) $Number_downto$35.$$p = null;
      
      
      if ($iter) $Number_downto$35.$$p = null;;
      if ((block !== nil)) {
      } else {
        return $send(self, 'enum_for', ["downto", stop], ($$36 = function(){var self = $$36.$$s == null ? this : $$36.$$s;

        
          if ($truthy($$($nesting, 'Numeric')['$==='](stop))) {
          } else {
            self.$raise($$($nesting, 'ArgumentError'), "" + "comparison of " + (self.$class()) + " with " + (stop.$class()) + " failed")
          };
          if ($truthy($rb_gt(stop, self))) {
            return 0
          } else {
            return $rb_plus($rb_minus(self, stop), 1)
          };}, $$36.$$s = self, $$36.$$arity = 0, $$36))
      };
      
      if (!stop.$$is_number) {
        self.$raise($$($nesting, 'ArgumentError'), "" + "comparison of " + (self.$class()) + " with " + (stop.$class()) + " failed")
      }
      for (var i = self; i >= stop; i--) {
        block(i);
      }
    ;
      return self;
    }, $Number_downto$35.$$arity = 1);
    Opal.alias(self, "eql?", "==");
    
    Opal.def(self, '$equal?', $Number_equal$ques$37 = function(other) {
      var $a, self = this;

      return ($truthy($a = self['$=='](other)) ? $a : isNaN(self) && isNaN(other))
    }, $Number_equal$ques$37.$$arity = 1);
    
    Opal.def(self, '$even?', $Number_even$ques$38 = function() {
      var self = this;

      return self % 2 === 0;
    }, $Number_even$ques$38.$$arity = 0);
    
    Opal.def(self, '$floor', $Number_floor$39 = function $$floor(ndigits) {
      var self = this;

      
      
      if (ndigits == null) {
        ndigits = 0;
      };
      
      var f = self.$to_f();

      if (f % 1 === 0 && ndigits >= 0) {
        return f;
      }

      var factor = Math.pow(10, ndigits),
          result = Math.floor(f * factor) / factor;

      if (f % 1 === 0) {
        result = Math.round(result);
      }

      return result;
    ;
    }, $Number_floor$39.$$arity = -1);
    
    Opal.def(self, '$gcd', $Number_gcd$40 = function $$gcd(other) {
      var self = this;

      
      if ($truthy($$($nesting, 'Integer')['$==='](other))) {
      } else {
        self.$raise($$($nesting, 'TypeError'), "not an integer")
      };
      
      var min = Math.abs(self),
          max = Math.abs(other);

      while (min > 0) {
        var tmp = min;

        min = max % min;
        max = tmp;
      }

      return max;
    ;
    }, $Number_gcd$40.$$arity = 1);
    
    Opal.def(self, '$gcdlcm', $Number_gcdlcm$41 = function $$gcdlcm(other) {
      var self = this;

      return [self.$gcd(other), self.$lcm(other)]
    }, $Number_gcdlcm$41.$$arity = 1);
    
    Opal.def(self, '$integer?', $Number_integer$ques$42 = function() {
      var self = this;

      return self % 1 === 0;
    }, $Number_integer$ques$42.$$arity = 0);
    
    Opal.def(self, '$is_a?', $Number_is_a$ques$43 = function(klass) {
      var $a, $iter = $Number_is_a$ques$43.$$p, $yield = $iter || nil, self = this, $zuper = nil, $zuper_i = nil, $zuper_ii = nil;

      if ($iter) $Number_is_a$ques$43.$$p = null;
      // Prepare super implicit arguments
      for($zuper_i = 0, $zuper_ii = arguments.length, $zuper = new Array($zuper_ii); $zuper_i < $zuper_ii; $zuper_i++) {
        $zuper[$zuper_i] = arguments[$zuper_i];
      }
      
      if ($truthy((($a = klass['$==']($$($nesting, 'Integer'))) ? $$($nesting, 'Integer')['$==='](self) : klass['$==']($$($nesting, 'Integer'))))) {
        return true};
      if ($truthy((($a = klass['$==']($$($nesting, 'Integer'))) ? $$($nesting, 'Integer')['$==='](self) : klass['$==']($$($nesting, 'Integer'))))) {
        return true};
      if ($truthy((($a = klass['$==']($$($nesting, 'Float'))) ? $$($nesting, 'Float')['$==='](self) : klass['$==']($$($nesting, 'Float'))))) {
        return true};
      return $send2(self, Opal.find_super_dispatcher(self, 'is_a?', $Number_is_a$ques$43, false, true), 'is_a?', $zuper, $iter);
    }, $Number_is_a$ques$43.$$arity = 1);
    Opal.alias(self, "kind_of?", "is_a?");
    
    Opal.def(self, '$instance_of?', $Number_instance_of$ques$44 = function(klass) {
      var $a, $iter = $Number_instance_of$ques$44.$$p, $yield = $iter || nil, self = this, $zuper = nil, $zuper_i = nil, $zuper_ii = nil;

      if ($iter) $Number_instance_of$ques$44.$$p = null;
      // Prepare super implicit arguments
      for($zuper_i = 0, $zuper_ii = arguments.length, $zuper = new Array($zuper_ii); $zuper_i < $zuper_ii; $zuper_i++) {
        $zuper[$zuper_i] = arguments[$zuper_i];
      }
      
      if ($truthy((($a = klass['$==']($$($nesting, 'Integer'))) ? $$($nesting, 'Integer')['$==='](self) : klass['$==']($$($nesting, 'Integer'))))) {
        return true};
      if ($truthy((($a = klass['$==']($$($nesting, 'Integer'))) ? $$($nesting, 'Integer')['$==='](self) : klass['$==']($$($nesting, 'Integer'))))) {
        return true};
      if ($truthy((($a = klass['$==']($$($nesting, 'Float'))) ? $$($nesting, 'Float')['$==='](self) : klass['$==']($$($nesting, 'Float'))))) {
        return true};
      return $send2(self, Opal.find_super_dispatcher(self, 'instance_of?', $Number_instance_of$ques$44, false, true), 'instance_of?', $zuper, $iter);
    }, $Number_instance_of$ques$44.$$arity = 1);
    
    Opal.def(self, '$lcm', $Number_lcm$45 = function $$lcm(other) {
      var self = this;

      
      if ($truthy($$($nesting, 'Integer')['$==='](other))) {
      } else {
        self.$raise($$($nesting, 'TypeError'), "not an integer")
      };
      
      if (self == 0 || other == 0) {
        return 0;
      }
      else {
        return Math.abs(self * other / self.$gcd(other));
      }
    ;
    }, $Number_lcm$45.$$arity = 1);
    Opal.alias(self, "magnitude", "abs");
    Opal.alias(self, "modulo", "%");
    
    Opal.def(self, '$next', $Number_next$46 = function $$next() {
      var self = this;

      return self + 1;
    }, $Number_next$46.$$arity = 0);
    
    Opal.def(self, '$nobits?', $Number_nobits$ques$47 = function(mask) {
      var self = this;

      
      mask = $$($nesting, 'Opal')['$coerce_to!'](mask, $$($nesting, 'Integer'), "to_int");
      return (self & mask) == 0;;
    }, $Number_nobits$ques$47.$$arity = 1);
    
    Opal.def(self, '$nonzero?', $Number_nonzero$ques$48 = function() {
      var self = this;

      return self == 0 ? nil : self;
    }, $Number_nonzero$ques$48.$$arity = 0);
    
    Opal.def(self, '$numerator', $Number_numerator$49 = function $$numerator() {
      var $a, $iter = $Number_numerator$49.$$p, $yield = $iter || nil, self = this, $zuper = nil, $zuper_i = nil, $zuper_ii = nil;

      if ($iter) $Number_numerator$49.$$p = null;
      // Prepare super implicit arguments
      for($zuper_i = 0, $zuper_ii = arguments.length, $zuper = new Array($zuper_ii); $zuper_i < $zuper_ii; $zuper_i++) {
        $zuper[$zuper_i] = arguments[$zuper_i];
      }
      if ($truthy(($truthy($a = self['$nan?']()) ? $a : self['$infinite?']()))) {
        return self
      } else {
        return $send2(self, Opal.find_super_dispatcher(self, 'numerator', $Number_numerator$49, false, true), 'numerator', $zuper, $iter)
      }
    }, $Number_numerator$49.$$arity = 0);
    
    Opal.def(self, '$odd?', $Number_odd$ques$50 = function() {
      var self = this;

      return self % 2 !== 0;
    }, $Number_odd$ques$50.$$arity = 0);
    
    Opal.def(self, '$ord', $Number_ord$51 = function $$ord() {
      var self = this;

      return self
    }, $Number_ord$51.$$arity = 0);
    
    Opal.def(self, '$pow', $Number_pow$52 = function $$pow(b, m) {
      var self = this;

      
      ;
      
      if (self == 0) {
        self.$raise($$($nesting, 'ZeroDivisionError'), "divided by 0")
      }

      if (m === undefined) {
        return self['$**'](b);
      } else {
        if (!($$($nesting, 'Integer')['$==='](b))) {
          self.$raise($$($nesting, 'TypeError'), "Integer#pow() 2nd argument not allowed unless a 1st argument is integer")
        }

        if (b < 0) {
          self.$raise($$($nesting, 'TypeError'), "Integer#pow() 1st argument cannot be negative when 2nd argument specified")
        }

        if (!($$($nesting, 'Integer')['$==='](m))) {
          self.$raise($$($nesting, 'TypeError'), "Integer#pow() 2nd argument not allowed unless all arguments are integers")
        }

        if (m === 0) {
          self.$raise($$($nesting, 'ZeroDivisionError'), "divided by 0")
        }

        return self['$**'](b)['$%'](m)
      }
    ;
    }, $Number_pow$52.$$arity = -2);
    
    Opal.def(self, '$pred', $Number_pred$53 = function $$pred() {
      var self = this;

      return self - 1;
    }, $Number_pred$53.$$arity = 0);
    
    Opal.def(self, '$quo', $Number_quo$54 = function $$quo(other) {
      var $iter = $Number_quo$54.$$p, $yield = $iter || nil, self = this, $zuper = nil, $zuper_i = nil, $zuper_ii = nil;

      if ($iter) $Number_quo$54.$$p = null;
      // Prepare super implicit arguments
      for($zuper_i = 0, $zuper_ii = arguments.length, $zuper = new Array($zuper_ii); $zuper_i < $zuper_ii; $zuper_i++) {
        $zuper[$zuper_i] = arguments[$zuper_i];
      }
      if ($truthy($$($nesting, 'Integer')['$==='](self))) {
        return $send2(self, Opal.find_super_dispatcher(self, 'quo', $Number_quo$54, false, true), 'quo', $zuper, $iter)
      } else {
        return $rb_divide(self, other)
      }
    }, $Number_quo$54.$$arity = 1);
    
    Opal.def(self, '$rationalize', $Number_rationalize$55 = function $$rationalize(eps) {
      var $a, $b, self = this, f = nil, n = nil;

      
      ;
      
      if (arguments.length > 1) {
        self.$raise($$($nesting, 'ArgumentError'), "" + "wrong number of arguments (" + (arguments.length) + " for 0..1)");
      }
    ;
      if ($truthy($$($nesting, 'Integer')['$==='](self))) {
        return $$($nesting, 'Rational').$new(self, 1)
      } else if ($truthy(self['$infinite?']())) {
        return self.$raise($$($nesting, 'FloatDomainError'), "Infinity")
      } else if ($truthy(self['$nan?']())) {
        return self.$raise($$($nesting, 'FloatDomainError'), "NaN")
      } else if ($truthy(eps == null)) {
        
        $b = $$($nesting, 'Math').$frexp(self), $a = Opal.to_ary($b), (f = ($a[0] == null ? nil : $a[0])), (n = ($a[1] == null ? nil : $a[1])), $b;
        f = $$($nesting, 'Math').$ldexp(f, $$$($$($nesting, 'Float'), 'MANT_DIG')).$to_i();
        n = $rb_minus(n, $$$($$($nesting, 'Float'), 'MANT_DIG'));
        return $$($nesting, 'Rational').$new($rb_times(2, f), (1)['$<<']($rb_minus(1, n))).$rationalize($$($nesting, 'Rational').$new(1, (1)['$<<']($rb_minus(1, n))));
      } else {
        return self.$to_r().$rationalize(eps)
      };
    }, $Number_rationalize$55.$$arity = -1);
    
    Opal.def(self, '$remainder', $Number_remainder$56 = function $$remainder(y) {
      var self = this;

      return $rb_minus(self, $rb_times(y, $rb_divide(self, y).$truncate()))
    }, $Number_remainder$56.$$arity = 1);
    
    Opal.def(self, '$round', $Number_round$57 = function $$round(ndigits) {
      var $a, $b, self = this, _ = nil, exp = nil;

      
      ;
      if ($truthy($$($nesting, 'Integer')['$==='](self))) {
        
        if ($truthy(ndigits == null)) {
          return self};
        if ($truthy(($truthy($a = $$($nesting, 'Float')['$==='](ndigits)) ? ndigits['$infinite?']() : $a))) {
          self.$raise($$($nesting, 'RangeError'), "Infinity")};
        ndigits = $$($nesting, 'Opal')['$coerce_to!'](ndigits, $$($nesting, 'Integer'), "to_int");
        if ($truthy($rb_lt(ndigits, $$$($$($nesting, 'Integer'), 'MIN')))) {
          self.$raise($$($nesting, 'RangeError'), "out of bounds")};
        if ($truthy(ndigits >= 0)) {
          return self};
        ndigits = ndigits['$-@']();
        
        if (0.415241 * ndigits - 0.125 > self.$size()) {
          return 0;
        }

        var f = Math.pow(10, ndigits),
            x = Math.floor((Math.abs(self) + f / 2) / f) * f;

        return self < 0 ? -x : x;
      ;
      } else {
        
        if ($truthy(($truthy($a = self['$nan?']()) ? ndigits == null : $a))) {
          self.$raise($$($nesting, 'FloatDomainError'), "NaN")};
        ndigits = $$($nesting, 'Opal')['$coerce_to!'](ndigits || 0, $$($nesting, 'Integer'), "to_int");
        if ($truthy($rb_le(ndigits, 0))) {
          if ($truthy(self['$nan?']())) {
            self.$raise($$($nesting, 'RangeError'), "NaN")
          } else if ($truthy(self['$infinite?']())) {
            self.$raise($$($nesting, 'FloatDomainError'), "Infinity")}
        } else if (ndigits['$=='](0)) {
          return Math.round(self)
        } else if ($truthy(($truthy($a = self['$nan?']()) ? $a : self['$infinite?']()))) {
          return self};
        $b = $$($nesting, 'Math').$frexp(self), $a = Opal.to_ary($b), (_ = ($a[0] == null ? nil : $a[0])), (exp = ($a[1] == null ? nil : $a[1])), $b;
        if ($truthy($rb_ge(ndigits, $rb_minus($rb_plus($$$($$($nesting, 'Float'), 'DIG'), 2), (function() {if ($truthy($rb_gt(exp, 0))) {
          return $rb_divide(exp, 4)
        } else {
          return $rb_minus($rb_divide(exp, 3), 1)
        }; return nil; })())))) {
          return self};
        if ($truthy($rb_lt(ndigits, (function() {if ($truthy($rb_gt(exp, 0))) {
          return $rb_plus($rb_divide(exp, 3), 1)
        } else {
          return $rb_divide(exp, 4)
        }; return nil; })()['$-@']()))) {
          return 0};
        return Math.round(self * Math.pow(10, ndigits)) / Math.pow(10, ndigits);;
      };
    }, $Number_round$57.$$arity = -1);
    
    Opal.def(self, '$step', $Number_step$58 = function $$step($a, $b, $c) {
      var $iter = $Number_step$58.$$p, block = $iter || nil, $post_args, $kwargs, limit, step, to, by, $$59, self = this, positional_args = nil, keyword_args = nil;

      if ($iter) $Number_step$58.$$p = null;
      
      
      if ($iter) $Number_step$58.$$p = null;;
      
      $post_args = Opal.slice.call(arguments, 0, arguments.length);
      
      $kwargs = Opal.extract_kwargs($post_args);
      
      if ($kwargs == null) {
        $kwargs = $hash2([], {});
      } else if (!$kwargs.$$is_hash) {
        throw Opal.ArgumentError.$new('expected kwargs');
      };
      
      if ($post_args.length > 0) {
        limit = $post_args[0];
        $post_args.splice(0, 1);
      };
      
      if ($post_args.length > 0) {
        step = $post_args[0];
        $post_args.splice(0, 1);
      };
      
      to = $kwargs.$$smap["to"];;
      
      by = $kwargs.$$smap["by"];;
      
      if (limit !== undefined && to !== undefined) {
        self.$raise($$($nesting, 'ArgumentError'), "to is given twice")
      }

      if (step !== undefined && by !== undefined) {
        self.$raise($$($nesting, 'ArgumentError'), "step is given twice")
      }

      function validateParameters() {
        if (to !== undefined) {
          limit = to;
        }

        if (limit === undefined) {
          limit = nil;
        }

        if (step === nil) {
          self.$raise($$($nesting, 'TypeError'), "step must be numeric")
        }

        if (step === 0) {
          self.$raise($$($nesting, 'ArgumentError'), "step can't be 0")
        }

        if (by !== undefined) {
          step = by;
        }

        if (step === nil || step == null) {
          step = 1;
        }

        var sign = step['$<=>'](0);

        if (sign === nil) {
          self.$raise($$($nesting, 'ArgumentError'), "" + "0 can't be coerced into " + (step.$class()))
        }

        if (limit === nil || limit == null) {
          limit = sign > 0 ? $$$($$($nesting, 'Float'), 'INFINITY') : $$$($$($nesting, 'Float'), 'INFINITY')['$-@']();
        }

        $$($nesting, 'Opal').$compare(self, limit)
      }

      function stepFloatSize() {
        if ((step > 0 && self > limit) || (step < 0 && self < limit)) {
          return 0;
        } else if (step === Infinity || step === -Infinity) {
          return 1;
        } else {
          var abs = Math.abs, floor = Math.floor,
              err = (abs(self) + abs(limit) + abs(limit - self)) / abs(step) * $$$($$($nesting, 'Float'), 'EPSILON');

          if (err === Infinity || err === -Infinity) {
            return 0;
          } else {
            if (err > 0.5) {
              err = 0.5;
            }

            return floor((limit - self) / step + err) + 1
          }
        }
      }

      function stepSize() {
        validateParameters();

        if (step === 0) {
          return Infinity;
        }

        if (step % 1 !== 0) {
          return stepFloatSize();
        } else if ((step > 0 && self > limit) || (step < 0 && self < limit)) {
          return 0;
        } else {
          var ceil = Math.ceil, abs = Math.abs,
              lhs = abs(self - limit) + 1,
              rhs = abs(step);

          return ceil(lhs / rhs);
        }
      }
    ;
      if ((block !== nil)) {
      } else {
        
        positional_args = [];
        keyword_args = $hash2([], {});
        
        if (limit !== undefined) {
          positional_args.push(limit);
        }

        if (step !== undefined) {
          positional_args.push(step);
        }

        if (to !== undefined) {
          Opal.hash_put(keyword_args, "to", to);
        }

        if (by !== undefined) {
          Opal.hash_put(keyword_args, "by", by);
        }

        if (keyword_args['$any?']()) {
          positional_args.push(keyword_args);
        }
      ;
        return $send(self, 'enum_for', ["step"].concat(Opal.to_a(positional_args)), ($$59 = function(){var self = $$59.$$s == null ? this : $$59.$$s;

        return stepSize();}, $$59.$$s = self, $$59.$$arity = 0, $$59));
      };
      
      validateParameters();

      if (step === 0) {
        while (true) {
          block(self);
        }
      }

      if (self % 1 !== 0 || limit % 1 !== 0 || step % 1 !== 0) {
        var n = stepFloatSize();

        if (n > 0) {
          if (step === Infinity || step === -Infinity) {
            block(self);
          } else {
            var i = 0, d;

            if (step > 0) {
              while (i < n) {
                d = i * step + self;
                if (limit < d) {
                  d = limit;
                }
                block(d);
                i += 1;
              }
            } else {
              while (i < n) {
                d = i * step + self;
                if (limit > d) {
                  d = limit;
                }
                block(d);
                i += 1
              }
            }
          }
        }
      } else {
        var value = self;

        if (step > 0) {
          while (value <= limit) {
            block(value);
            value += step;
          }
        } else {
          while (value >= limit) {
            block(value);
            value += step
          }
        }
      }

      return self;
    ;
    }, $Number_step$58.$$arity = -1);
    Opal.alias(self, "succ", "next");
    
    Opal.def(self, '$times', $Number_times$60 = function $$times() {
      var $iter = $Number_times$60.$$p, block = $iter || nil, $$61, self = this;

      if ($iter) $Number_times$60.$$p = null;
      
      
      if ($iter) $Number_times$60.$$p = null;;
      if ($truthy(block)) {
      } else {
        return $send(self, 'enum_for', ["times"], ($$61 = function(){var self = $$61.$$s == null ? this : $$61.$$s;

        return self}, $$61.$$s = self, $$61.$$arity = 0, $$61))
      };
      
      for (var i = 0; i < self; i++) {
        block(i);
      }
    ;
      return self;
    }, $Number_times$60.$$arity = 0);
    
    Opal.def(self, '$to_f', $Number_to_f$62 = function $$to_f() {
      var self = this;

      return self
    }, $Number_to_f$62.$$arity = 0);
    
    Opal.def(self, '$to_i', $Number_to_i$63 = function $$to_i() {
      var self = this;

      return parseInt(self, 10);
    }, $Number_to_i$63.$$arity = 0);
    Opal.alias(self, "to_int", "to_i");
    
    Opal.def(self, '$to_r', $Number_to_r$64 = function $$to_r() {
      var $a, $b, self = this, f = nil, e = nil;

      if ($truthy($$($nesting, 'Integer')['$==='](self))) {
        return $$($nesting, 'Rational').$new(self, 1)
      } else {
        
        $b = $$($nesting, 'Math').$frexp(self), $a = Opal.to_ary($b), (f = ($a[0] == null ? nil : $a[0])), (e = ($a[1] == null ? nil : $a[1])), $b;
        f = $$($nesting, 'Math').$ldexp(f, $$$($$($nesting, 'Float'), 'MANT_DIG')).$to_i();
        e = $rb_minus(e, $$$($$($nesting, 'Float'), 'MANT_DIG'));
        return $rb_times(f, $$$($$($nesting, 'Float'), 'RADIX')['$**'](e)).$to_r();
      }
    }, $Number_to_r$64.$$arity = 0);
    
    Opal.def(self, '$to_s', $Number_to_s$65 = function $$to_s(base) {
      var $a, self = this;

      
      
      if (base == null) {
        base = 10;
      };
      base = $$($nesting, 'Opal')['$coerce_to!'](base, $$($nesting, 'Integer'), "to_int");
      if ($truthy(($truthy($a = $rb_lt(base, 2)) ? $a : $rb_gt(base, 36)))) {
        self.$raise($$($nesting, 'ArgumentError'), "" + "invalid radix " + (base))};
      return self.toString(base);;
    }, $Number_to_s$65.$$arity = -1);
    
    Opal.def(self, '$truncate', $Number_truncate$66 = function $$truncate(ndigits) {
      var self = this;

      
      
      if (ndigits == null) {
        ndigits = 0;
      };
      
      var f = self.$to_f();

      if (f % 1 === 0 && ndigits >= 0) {
        return f;
      }

      var factor = Math.pow(10, ndigits),
          result = parseInt(f * factor, 10) / factor;

      if (f % 1 === 0) {
        result = Math.round(result);
      }

      return result;
    ;
    }, $Number_truncate$66.$$arity = -1);
    Opal.alias(self, "inspect", "to_s");
    
    Opal.def(self, '$digits', $Number_digits$67 = function $$digits(base) {
      var self = this;

      
      
      if (base == null) {
        base = 10;
      };
      if ($rb_lt(self, 0)) {
        self.$raise($$$($$($nesting, 'Math'), 'DomainError'), "out of domain")};
      base = $$($nesting, 'Opal')['$coerce_to!'](base, $$($nesting, 'Integer'), "to_int");
      if ($truthy($rb_lt(base, 2))) {
        self.$raise($$($nesting, 'ArgumentError'), "" + "invalid radix " + (base))};
      
      var value = self, result = [];

      while (value !== 0) {
        result.push(value % base);
        value = parseInt(value / base, 10);
      }

      return result;
    ;
    }, $Number_digits$67.$$arity = -1);
    
    Opal.def(self, '$divmod', $Number_divmod$68 = function $$divmod(other) {
      var $a, $iter = $Number_divmod$68.$$p, $yield = $iter || nil, self = this, $zuper = nil, $zuper_i = nil, $zuper_ii = nil;

      if ($iter) $Number_divmod$68.$$p = null;
      // Prepare super implicit arguments
      for($zuper_i = 0, $zuper_ii = arguments.length, $zuper = new Array($zuper_ii); $zuper_i < $zuper_ii; $zuper_i++) {
        $zuper[$zuper_i] = arguments[$zuper_i];
      }
      if ($truthy(($truthy($a = self['$nan?']()) ? $a : other['$nan?']()))) {
        return self.$raise($$($nesting, 'FloatDomainError'), "NaN")
      } else if ($truthy(self['$infinite?']())) {
        return self.$raise($$($nesting, 'FloatDomainError'), "Infinity")
      } else {
        return $send2(self, Opal.find_super_dispatcher(self, 'divmod', $Number_divmod$68, false, true), 'divmod', $zuper, $iter)
      }
    }, $Number_divmod$68.$$arity = 1);
    
    Opal.def(self, '$upto', $Number_upto$69 = function $$upto(stop) {
      var $iter = $Number_upto$69.$$p, block = $iter || nil, $$70, self = this;

      if ($iter) $Number_upto$69.$$p = null;
      
      
      if ($iter) $Number_upto$69.$$p = null;;
      if ((block !== nil)) {
      } else {
        return $send(self, 'enum_for', ["upto", stop], ($$70 = function(){var self = $$70.$$s == null ? this : $$70.$$s;

        
          if ($truthy($$($nesting, 'Numeric')['$==='](stop))) {
          } else {
            self.$raise($$($nesting, 'ArgumentError'), "" + "comparison of " + (self.$class()) + " with " + (stop.$class()) + " failed")
          };
          if ($truthy($rb_lt(stop, self))) {
            return 0
          } else {
            return $rb_plus($rb_minus(stop, self), 1)
          };}, $$70.$$s = self, $$70.$$arity = 0, $$70))
      };
      
      if (!stop.$$is_number) {
        self.$raise($$($nesting, 'ArgumentError'), "" + "comparison of " + (self.$class()) + " with " + (stop.$class()) + " failed")
      }
      for (var i = self; i <= stop; i++) {
        block(i);
      }
    ;
      return self;
    }, $Number_upto$69.$$arity = 1);
    
    Opal.def(self, '$zero?', $Number_zero$ques$71 = function() {
      var self = this;

      return self == 0;
    }, $Number_zero$ques$71.$$arity = 0);
    
    Opal.def(self, '$size', $Number_size$72 = function $$size() {
      var self = this;

      return 4
    }, $Number_size$72.$$arity = 0);
    
    Opal.def(self, '$nan?', $Number_nan$ques$73 = function() {
      var self = this;

      return isNaN(self);
    }, $Number_nan$ques$73.$$arity = 0);
    
    Opal.def(self, '$finite?', $Number_finite$ques$74 = function() {
      var self = this;

      return self != Infinity && self != -Infinity && !isNaN(self);
    }, $Number_finite$ques$74.$$arity = 0);
    
    Opal.def(self, '$infinite?', $Number_infinite$ques$75 = function() {
      var self = this;

      
      if (self == Infinity) {
        return +1;
      }
      else if (self == -Infinity) {
        return -1;
      }
      else {
        return nil;
      }
    
    }, $Number_infinite$ques$75.$$arity = 0);
    
    Opal.def(self, '$positive?', $Number_positive$ques$76 = function() {
      var self = this;

      return self != 0 && (self == Infinity || 1 / self > 0);
    }, $Number_positive$ques$76.$$arity = 0);
    return (Opal.def(self, '$negative?', $Number_negative$ques$77 = function() {
      var self = this;

      return self == -Infinity || 1 / self < 0;
    }, $Number_negative$ques$77.$$arity = 0), nil) && 'negative?';
  })($nesting[0], $$($nesting, 'Numeric'), $nesting);
  Opal.const_set($nesting[0], 'Fixnum', $$($nesting, 'Number'));
  (function($base, $super, $parent_nesting) {
    var self = $klass($base, $super, 'Integer');

    var $nesting = [self].concat($parent_nesting);

    
    self.$$is_number_class = true;
    self.$$is_integer_class = true;
    (function(self, $parent_nesting) {
      var $nesting = [self].concat($parent_nesting), $allocate$78, $sqrt$79;

      
      
      Opal.def(self, '$allocate', $allocate$78 = function $$allocate() {
        var self = this;

        return self.$raise($$($nesting, 'TypeError'), "" + "allocator undefined for " + (self.$name()))
      }, $allocate$78.$$arity = 0);
      
      Opal.udef(self, '$' + "new");;
      return (Opal.def(self, '$sqrt', $sqrt$79 = function $$sqrt(n) {
        var self = this;

        
        n = $$($nesting, 'Opal')['$coerce_to!'](n, $$($nesting, 'Integer'), "to_int");
        
        if (n < 0) {
          self.$raise($$$($$($nesting, 'Math'), 'DomainError'), "Numerical argument is out of domain - \"isqrt\"")
        }

        return parseInt(Math.sqrt(n), 10);
      ;
      }, $sqrt$79.$$arity = 1), nil) && 'sqrt';
    })(Opal.get_singleton_class(self), $nesting);
    Opal.const_set($nesting[0], 'MAX', Math.pow(2, 30) - 1);
    return Opal.const_set($nesting[0], 'MIN', -Math.pow(2, 30));
  })($nesting[0], $$($nesting, 'Numeric'), $nesting);
  return (function($base, $super, $parent_nesting) {
    var self = $klass($base, $super, 'Float');

    var $nesting = [self].concat($parent_nesting);

    
    self.$$is_number_class = true;
    (function(self, $parent_nesting) {
      var $nesting = [self].concat($parent_nesting), $allocate$80, $eq_eq_eq$81;

      
      
      Opal.def(self, '$allocate', $allocate$80 = function $$allocate() {
        var self = this;

        return self.$raise($$($nesting, 'TypeError'), "" + "allocator undefined for " + (self.$name()))
      }, $allocate$80.$$arity = 0);
      
      Opal.udef(self, '$' + "new");;
      return (Opal.def(self, '$===', $eq_eq_eq$81 = function(other) {
        var self = this;

        return !!other.$$is_number;
      }, $eq_eq_eq$81.$$arity = 1), nil) && '===';
    })(Opal.get_singleton_class(self), $nesting);
    Opal.const_set($nesting[0], 'INFINITY', Infinity);
    Opal.const_set($nesting[0], 'MAX', Number.MAX_VALUE);
    Opal.const_set($nesting[0], 'MIN', Number.MIN_VALUE);
    Opal.const_set($nesting[0], 'NAN', NaN);
    Opal.const_set($nesting[0], 'DIG', 15);
    Opal.const_set($nesting[0], 'MANT_DIG', 53);
    Opal.const_set($nesting[0], 'RADIX', 2);
    return Opal.const_set($nesting[0], 'EPSILON', Number.EPSILON || 2.2204460492503130808472633361816E-16);
  })($nesting[0], $$($nesting, 'Numeric'), $nesting);
};

/* Generated by Opal 1.0.0 */
Opal.modules["corelib/range"] = function(Opal) {
  function $rb_le(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs <= rhs : lhs['$<='](rhs);
  }
  function $rb_lt(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs < rhs : lhs['$<'](rhs);
  }
  function $rb_gt(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs > rhs : lhs['$>'](rhs);
  }
  function $rb_minus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs - rhs : lhs['$-'](rhs);
  }
  function $rb_divide(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs / rhs : lhs['$/'](rhs);
  }
  function $rb_plus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs + rhs : lhs['$+'](rhs);
  }
  function $rb_times(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs * rhs : lhs['$*'](rhs);
  }
  function $rb_ge(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs >= rhs : lhs['$>='](rhs);
  }
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.$$$, $$ = Opal.$$, $klass = Opal.klass, $truthy = Opal.truthy, $send = Opal.send, $send2 = Opal.send2;

  Opal.add_stubs(['$require', '$include', '$attr_reader', '$raise', '$<=>', '$include?', '$<=', '$<', '$enum_for', '$size', '$upto', '$to_proc', '$respond_to?', '$class', '$succ', '$!', '$==', '$===', '$exclude_end?', '$eql?', '$begin', '$end', '$last', '$to_a', '$>', '$-', '$abs', '$to_i', '$coerce_to!', '$ceil', '$/', '$loop', '$+', '$*', '$>=', '$each_with_index', '$%', '$bsearch', '$inspect', '$[]', '$hash']);
  
  self.$require("corelib/enumerable");
  return (function($base, $super, $parent_nesting) {
    var self = $klass($base, $super, 'Range');

    var $nesting = [self].concat($parent_nesting), $Range_initialize$1, $Range_$eq_eq_eq$2, $Range_cover$ques$3, $Range_each$4, $Range_eql$ques$6, $Range_exclude_end$ques$7, $Range_first$8, $Range_last$9, $Range_max$10, $Range_min$11, $Range_size$12, $Range_step$13, $Range_bsearch$17, $Range_to_s$18, $Range_inspect$19, $Range_marshal_load$20, $Range_hash$21;

    self.$$prototype.begin = self.$$prototype.end = self.$$prototype.excl = nil;
    
    self.$include($$($nesting, 'Enumerable'));
    self.$$prototype.$$is_range = true;
    self.$attr_reader("begin", "end");
    
    Opal.def(self, '$initialize', $Range_initialize$1 = function $$initialize(first, last, exclude) {
      var self = this;

      
      
      if (exclude == null) {
        exclude = false;
      };
      if ($truthy(self.begin)) {
        self.$raise($$($nesting, 'NameError'), "'initialize' called twice")};
      if ($truthy(first['$<=>'](last))) {
      } else {
        self.$raise($$($nesting, 'ArgumentError'), "bad value for range")
      };
      self.begin = first;
      self.end = last;
      return (self.excl = exclude);
    }, $Range_initialize$1.$$arity = -3);
    
    Opal.def(self, '$===', $Range_$eq_eq_eq$2 = function(value) {
      var self = this;

      return self['$include?'](value)
    }, $Range_$eq_eq_eq$2.$$arity = 1);
    
    Opal.def(self, '$cover?', $Range_cover$ques$3 = function(value) {
      var $a, self = this, beg_cmp = nil, end_cmp = nil;

      
      beg_cmp = self.begin['$<=>'](value);
      if ($truthy(($truthy($a = beg_cmp) ? $rb_le(beg_cmp, 0) : $a))) {
      } else {
        return false
      };
      end_cmp = value['$<=>'](self.end);
      if ($truthy(self.excl)) {
        return ($truthy($a = end_cmp) ? $rb_lt(end_cmp, 0) : $a)
      } else {
        return ($truthy($a = end_cmp) ? $rb_le(end_cmp, 0) : $a)
      };
    }, $Range_cover$ques$3.$$arity = 1);
    
    Opal.def(self, '$each', $Range_each$4 = function $$each() {
      var $iter = $Range_each$4.$$p, block = $iter || nil, $$5, $a, self = this, current = nil, last = nil;

      if ($iter) $Range_each$4.$$p = null;
      
      
      if ($iter) $Range_each$4.$$p = null;;
      if ((block !== nil)) {
      } else {
        return $send(self, 'enum_for', ["each"], ($$5 = function(){var self = $$5.$$s == null ? this : $$5.$$s;

        return self.$size()}, $$5.$$s = self, $$5.$$arity = 0, $$5))
      };
      
      var i, limit;

      if (self.begin.$$is_number && self.end.$$is_number) {
        if (self.begin % 1 !== 0 || self.end % 1 !== 0) {
          self.$raise($$($nesting, 'TypeError'), "can't iterate from Float")
        }

        for (i = self.begin, limit = self.end + (function() {if ($truthy(self.excl)) {
        return 0
      } else {
        return 1
      }; return nil; })(); i < limit; i++) {
          block(i);
        }

        return self;
      }

      if (self.begin.$$is_string && self.end.$$is_string) {
        $send(self.begin, 'upto', [self.end, self.excl], block.$to_proc())
        return self;
      }
    ;
      current = self.begin;
      last = self.end;
      if ($truthy(current['$respond_to?']("succ"))) {
      } else {
        self.$raise($$($nesting, 'TypeError'), "" + "can't iterate from " + (current.$class()))
      };
      while ($truthy($rb_lt(current['$<=>'](last), 0))) {
        
        Opal.yield1(block, current);
        current = current.$succ();
      };
      if ($truthy(($truthy($a = self.excl['$!']()) ? current['$=='](last) : $a))) {
        Opal.yield1(block, current)};
      return self;
    }, $Range_each$4.$$arity = 0);
    
    Opal.def(self, '$eql?', $Range_eql$ques$6 = function(other) {
      var $a, $b, self = this;

      
      if ($truthy($$($nesting, 'Range')['$==='](other))) {
      } else {
        return false
      };
      return ($truthy($a = ($truthy($b = self.excl['$==='](other['$exclude_end?']())) ? self.begin['$eql?'](other.$begin()) : $b)) ? self.end['$eql?'](other.$end()) : $a);
    }, $Range_eql$ques$6.$$arity = 1);
    Opal.alias(self, "==", "eql?");
    
    Opal.def(self, '$exclude_end?', $Range_exclude_end$ques$7 = function() {
      var self = this;

      return self.excl
    }, $Range_exclude_end$ques$7.$$arity = 0);
    
    Opal.def(self, '$first', $Range_first$8 = function $$first(n) {
      var $iter = $Range_first$8.$$p, $yield = $iter || nil, self = this, $zuper = nil, $zuper_i = nil, $zuper_ii = nil;

      if ($iter) $Range_first$8.$$p = null;
      // Prepare super implicit arguments
      for($zuper_i = 0, $zuper_ii = arguments.length, $zuper = new Array($zuper_ii); $zuper_i < $zuper_ii; $zuper_i++) {
        $zuper[$zuper_i] = arguments[$zuper_i];
      }
      
      ;
      if ($truthy(n == null)) {
        return self.begin};
      return $send2(self, Opal.find_super_dispatcher(self, 'first', $Range_first$8, false, true), 'first', $zuper, $iter);
    }, $Range_first$8.$$arity = -1);
    Opal.alias(self, "include?", "cover?");
    
    Opal.def(self, '$last', $Range_last$9 = function $$last(n) {
      var self = this;

      
      ;
      if ($truthy(n == null)) {
        return self.end};
      return self.$to_a().$last(n);
    }, $Range_last$9.$$arity = -1);
    
    Opal.def(self, '$max', $Range_max$10 = function $$max() {
      var $a, $iter = $Range_max$10.$$p, $yield = $iter || nil, self = this, $zuper = nil, $zuper_i = nil, $zuper_ii = nil;

      if ($iter) $Range_max$10.$$p = null;
      // Prepare super implicit arguments
      for($zuper_i = 0, $zuper_ii = arguments.length, $zuper = new Array($zuper_ii); $zuper_i < $zuper_ii; $zuper_i++) {
        $zuper[$zuper_i] = arguments[$zuper_i];
      }
      if (($yield !== nil)) {
        return $send2(self, Opal.find_super_dispatcher(self, 'max', $Range_max$10, false, true), 'max', $zuper, $iter)
      } else if ($truthy($rb_gt(self.begin, self.end))) {
        return nil
      } else if ($truthy(($truthy($a = self.excl) ? self.begin['$=='](self.end) : $a))) {
        return nil
      } else {
        return self.excl ? self.end - 1 : self.end
      }
    }, $Range_max$10.$$arity = 0);
    Opal.alias(self, "member?", "cover?");
    
    Opal.def(self, '$min', $Range_min$11 = function $$min() {
      var $a, $iter = $Range_min$11.$$p, $yield = $iter || nil, self = this, $zuper = nil, $zuper_i = nil, $zuper_ii = nil;

      if ($iter) $Range_min$11.$$p = null;
      // Prepare super implicit arguments
      for($zuper_i = 0, $zuper_ii = arguments.length, $zuper = new Array($zuper_ii); $zuper_i < $zuper_ii; $zuper_i++) {
        $zuper[$zuper_i] = arguments[$zuper_i];
      }
      if (($yield !== nil)) {
        return $send2(self, Opal.find_super_dispatcher(self, 'min', $Range_min$11, false, true), 'min', $zuper, $iter)
      } else if ($truthy($rb_gt(self.begin, self.end))) {
        return nil
      } else if ($truthy(($truthy($a = self.excl) ? self.begin['$=='](self.end) : $a))) {
        return nil
      } else {
        return self.begin
      }
    }, $Range_min$11.$$arity = 0);
    
    Opal.def(self, '$size', $Range_size$12 = function $$size() {
      var $a, self = this, range_begin = nil, range_end = nil, infinity = nil;

      
      range_begin = self.begin;
      range_end = self.end;
      if ($truthy(self.excl)) {
        range_end = $rb_minus(range_end, 1)};
      if ($truthy(($truthy($a = $$($nesting, 'Numeric')['$==='](range_begin)) ? $$($nesting, 'Numeric')['$==='](range_end) : $a))) {
      } else {
        return nil
      };
      if ($truthy($rb_lt(range_end, range_begin))) {
        return 0};
      infinity = $$$($$($nesting, 'Float'), 'INFINITY');
      if ($truthy([range_begin.$abs(), range_end.$abs()]['$include?'](infinity))) {
        return infinity};
      return (Math.abs(range_end - range_begin) + 1).$to_i();
    }, $Range_size$12.$$arity = 0);
    
    Opal.def(self, '$step', $Range_step$13 = function $$step(n) {
      var $$14, $$15, $$16, $iter = $Range_step$13.$$p, $yield = $iter || nil, self = this, i = nil;

      if ($iter) $Range_step$13.$$p = null;
      
      
      if (n == null) {
        n = 1;
      };
      
      function coerceStepSize() {
        if (!n.$$is_number) {
          n = $$($nesting, 'Opal')['$coerce_to!'](n, $$($nesting, 'Integer'), "to_int")
        }

        if (n < 0) {
          self.$raise($$($nesting, 'ArgumentError'), "step can't be negative")
        } else if (n === 0) {
          self.$raise($$($nesting, 'ArgumentError'), "step can't be 0")
        }
      }

      function enumeratorSize() {
        if (!self.begin['$respond_to?']("succ")) {
          return nil;
        }

        if (self.begin.$$is_string && self.end.$$is_string) {
          return nil;
        }

        if (n % 1 === 0) {
          return $rb_divide(self.$size(), n).$ceil();
        } else {
          // n is a float
          var begin = self.begin, end = self.end,
              abs = Math.abs, floor = Math.floor,
              err = (abs(begin) + abs(end) + abs(end - begin)) / abs(n) * $$$($$($nesting, 'Float'), 'EPSILON'),
              size;

          if (err > 0.5) {
            err = 0.5;
          }

          if (self.excl) {
            size = floor((end - begin) / n - err);
            if (size * n + begin < end) {
              size++;
            }
          } else {
            size = floor((end - begin) / n + err) + 1
          }

          return size;
        }
      }
    ;
      if (($yield !== nil)) {
      } else {
        return $send(self, 'enum_for', ["step", n], ($$14 = function(){var self = $$14.$$s == null ? this : $$14.$$s;

        
          coerceStepSize();
          return enumeratorSize();
        }, $$14.$$s = self, $$14.$$arity = 0, $$14))
      };
      coerceStepSize();
      if ($truthy(self.begin.$$is_number && self.end.$$is_number)) {
        
        i = 0;
        (function(){var $brk = Opal.new_brk(); try {return $send(self, 'loop', [], ($$15 = function(){var self = $$15.$$s == null ? this : $$15.$$s, current = nil;
          if (self.begin == null) self.begin = nil;
          if (self.excl == null) self.excl = nil;
          if (self.end == null) self.end = nil;

        
          current = $rb_plus(self.begin, $rb_times(i, n));
          if ($truthy(self.excl)) {
            if ($truthy($rb_ge(current, self.end))) {
              
              Opal.brk(nil, $brk)}
          } else if ($truthy($rb_gt(current, self.end))) {
            
            Opal.brk(nil, $brk)};
          Opal.yield1($yield, current);
          return (i = $rb_plus(i, 1));}, $$15.$$s = self, $$15.$$brk = $brk, $$15.$$arity = 0, $$15))
        } catch (err) { if (err === $brk) { return err.$v } else { throw err } }})();
      } else {
        
        
        if (self.begin.$$is_string && self.end.$$is_string && n % 1 !== 0) {
          self.$raise($$($nesting, 'TypeError'), "no implicit conversion to float from string")
        }
      ;
        $send(self, 'each_with_index', [], ($$16 = function(value, idx){var self = $$16.$$s == null ? this : $$16.$$s;

        
          
          if (value == null) {
            value = nil;
          };
          
          if (idx == null) {
            idx = nil;
          };
          if (idx['$%'](n)['$=='](0)) {
            return Opal.yield1($yield, value);
          } else {
            return nil
          };}, $$16.$$s = self, $$16.$$arity = 2, $$16));
      };
      return self;
    }, $Range_step$13.$$arity = -1);
    
    Opal.def(self, '$bsearch', $Range_bsearch$17 = function $$bsearch() {
      var $iter = $Range_bsearch$17.$$p, block = $iter || nil, self = this;

      if ($iter) $Range_bsearch$17.$$p = null;
      
      
      if ($iter) $Range_bsearch$17.$$p = null;;
      if ((block !== nil)) {
      } else {
        return self.$enum_for("bsearch")
      };
      if ($truthy(self.begin.$$is_number && self.end.$$is_number)) {
      } else {
        self.$raise($$($nesting, 'TypeError'), "" + "can't do binary search for " + (self.begin.$class()))
      };
      return $send(self.$to_a(), 'bsearch', [], block.$to_proc());
    }, $Range_bsearch$17.$$arity = 0);
    
    Opal.def(self, '$to_s', $Range_to_s$18 = function $$to_s() {
      var self = this;

      return "" + (self.begin) + ((function() {if ($truthy(self.excl)) {
        return "..."
      } else {
        return ".."
      }; return nil; })()) + (self.end)
    }, $Range_to_s$18.$$arity = 0);
    
    Opal.def(self, '$inspect', $Range_inspect$19 = function $$inspect() {
      var self = this;

      return "" + (self.begin.$inspect()) + ((function() {if ($truthy(self.excl)) {
        return "..."
      } else {
        return ".."
      }; return nil; })()) + (self.end.$inspect())
    }, $Range_inspect$19.$$arity = 0);
    
    Opal.def(self, '$marshal_load', $Range_marshal_load$20 = function $$marshal_load(args) {
      var self = this;

      
      self.begin = args['$[]']("begin");
      self.end = args['$[]']("end");
      return (self.excl = args['$[]']("excl"));
    }, $Range_marshal_load$20.$$arity = 1);
    return (Opal.def(self, '$hash', $Range_hash$21 = function $$hash() {
      var self = this;

      return [self.begin, self.end, self.excl].$hash()
    }, $Range_hash$21.$$arity = 0), nil) && 'hash';
  })($nesting[0], null, $nesting);
};

/* Generated by Opal 1.0.0 */
Opal.modules["corelib/proc"] = function(Opal) {
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.$$$, $$ = Opal.$$, $slice = Opal.slice, $klass = Opal.klass, $truthy = Opal.truthy;

  Opal.add_stubs(['$raise', '$coerce_to!']);
  return (function($base, $super, $parent_nesting) {
    var self = $klass($base, $super, 'Proc');

    var $nesting = [self].concat($parent_nesting), $Proc_new$1, $Proc_call$2, $Proc_to_proc$3, $Proc_lambda$ques$4, $Proc_arity$5, $Proc_source_location$6, $Proc_binding$7, $Proc_parameters$8, $Proc_curry$9, $Proc_dup$10;

    
    Opal.defineProperty(self.$$prototype, '$$is_proc', true);
    Opal.defineProperty(self.$$prototype, '$$is_lambda', false);
    Opal.defs(self, '$new', $Proc_new$1 = function() {
      var $iter = $Proc_new$1.$$p, block = $iter || nil, self = this;

      if ($iter) $Proc_new$1.$$p = null;
      
      
      if ($iter) $Proc_new$1.$$p = null;;
      if ($truthy(block)) {
      } else {
        self.$raise($$($nesting, 'ArgumentError'), "tried to create a Proc object without a block")
      };
      return block;
    }, $Proc_new$1.$$arity = 0);
    
    Opal.def(self, '$call', $Proc_call$2 = function $$call($a) {
      var $iter = $Proc_call$2.$$p, block = $iter || nil, $post_args, args, self = this;

      if ($iter) $Proc_call$2.$$p = null;
      
      
      if ($iter) $Proc_call$2.$$p = null;;
      
      $post_args = Opal.slice.call(arguments, 0, arguments.length);
      
      args = $post_args;;
      
      if (block !== nil) {
        self.$$p = block;
      }

      var result, $brk = self.$$brk;

      if ($brk) {
        try {
          if (self.$$is_lambda) {
            result = self.apply(null, args);
          }
          else {
            result = Opal.yieldX(self, args);
          }
        } catch (err) {
          if (err === $brk) {
            return $brk.$v
          }
          else {
            throw err
          }
        }
      }
      else {
        if (self.$$is_lambda) {
          result = self.apply(null, args);
        }
        else {
          result = Opal.yieldX(self, args);
        }
      }

      return result;
    ;
    }, $Proc_call$2.$$arity = -1);
    Opal.alias(self, "[]", "call");
    Opal.alias(self, "===", "call");
    Opal.alias(self, "yield", "call");
    
    Opal.def(self, '$to_proc', $Proc_to_proc$3 = function $$to_proc() {
      var self = this;

      return self
    }, $Proc_to_proc$3.$$arity = 0);
    
    Opal.def(self, '$lambda?', $Proc_lambda$ques$4 = function() {
      var self = this;

      return !!self.$$is_lambda;
    }, $Proc_lambda$ques$4.$$arity = 0);
    
    Opal.def(self, '$arity', $Proc_arity$5 = function $$arity() {
      var self = this;

      
      if (self.$$is_curried) {
        return -1;
      } else {
        return self.$$arity;
      }
    
    }, $Proc_arity$5.$$arity = 0);
    
    Opal.def(self, '$source_location', $Proc_source_location$6 = function $$source_location() {
      var self = this;

      
      if (self.$$is_curried) { return nil; };
      return nil;
    }, $Proc_source_location$6.$$arity = 0);
    
    Opal.def(self, '$binding', $Proc_binding$7 = function $$binding() {
      var self = this;

      
      if (self.$$is_curried) { self.$raise($$($nesting, 'ArgumentError'), "Can't create Binding") };
      return nil;
    }, $Proc_binding$7.$$arity = 0);
    
    Opal.def(self, '$parameters', $Proc_parameters$8 = function $$parameters() {
      var self = this;

      
      if (self.$$is_curried) {
        return [["rest"]];
      } else if (self.$$parameters) {
        if (self.$$is_lambda) {
          return self.$$parameters;
        } else {
          var result = [], i, length;

          for (i = 0, length = self.$$parameters.length; i < length; i++) {
            var parameter = self.$$parameters[i];

            if (parameter[0] === 'req') {
              // required arguments always have name
              parameter = ['opt', parameter[1]];
            }

            result.push(parameter);
          }

          return result;
        }
      } else {
        return [];
      }
    
    }, $Proc_parameters$8.$$arity = 0);
    
    Opal.def(self, '$curry', $Proc_curry$9 = function $$curry(arity) {
      var self = this;

      
      ;
      
      if (arity === undefined) {
        arity = self.length;
      }
      else {
        arity = $$($nesting, 'Opal')['$coerce_to!'](arity, $$($nesting, 'Integer'), "to_int");
        if (self.$$is_lambda && arity !== self.length) {
          self.$raise($$($nesting, 'ArgumentError'), "" + "wrong number of arguments (" + (arity) + " for " + (self.length) + ")")
        }
      }

      function curried () {
        var args = $slice.call(arguments),
            length = args.length,
            result;

        if (length > arity && self.$$is_lambda && !self.$$is_curried) {
          self.$raise($$($nesting, 'ArgumentError'), "" + "wrong number of arguments (" + (length) + " for " + (arity) + ")")
        }

        if (length >= arity) {
          return self.$call.apply(self, args);
        }

        result = function () {
          return curried.apply(null,
            args.concat($slice.call(arguments)));
        }
        result.$$is_lambda = self.$$is_lambda;
        result.$$is_curried = true;

        return result;
      };

      curried.$$is_lambda = self.$$is_lambda;
      curried.$$is_curried = true;
      return curried;
    ;
    }, $Proc_curry$9.$$arity = -1);
    
    Opal.def(self, '$dup', $Proc_dup$10 = function $$dup() {
      var self = this;

      
      var original_proc = self.$$original_proc || self,
          proc = function () {
            return original_proc.apply(this, arguments);
          };

      for (var prop in self) {
        if (self.hasOwnProperty(prop)) {
          proc[prop] = self[prop];
        }
      }

      return proc;
    
    }, $Proc_dup$10.$$arity = 0);
    return Opal.alias(self, "clone", "dup");
  })($nesting[0], Function, $nesting)
};

/* Generated by Opal 1.0.0 */
Opal.modules["corelib/method"] = function(Opal) {
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.$$$, $$ = Opal.$$, $klass = Opal.klass, $truthy = Opal.truthy;

  Opal.add_stubs(['$attr_reader', '$arity', '$new', '$class', '$join', '$source_location', '$raise']);
  
  (function($base, $super, $parent_nesting) {
    var self = $klass($base, $super, 'Method');

    var $nesting = [self].concat($parent_nesting), $Method_initialize$1, $Method_arity$2, $Method_parameters$3, $Method_source_location$4, $Method_comments$5, $Method_call$6, $Method_unbind$7, $Method_to_proc$8, $Method_inspect$9;

    self.$$prototype.method = self.$$prototype.receiver = self.$$prototype.owner = self.$$prototype.name = nil;
    
    self.$attr_reader("owner", "receiver", "name");
    
    Opal.def(self, '$initialize', $Method_initialize$1 = function $$initialize(receiver, owner, method, name) {
      var self = this;

      
      self.receiver = receiver;
      self.owner = owner;
      self.name = name;
      return (self.method = method);
    }, $Method_initialize$1.$$arity = 4);
    
    Opal.def(self, '$arity', $Method_arity$2 = function $$arity() {
      var self = this;

      return self.method.$arity()
    }, $Method_arity$2.$$arity = 0);
    
    Opal.def(self, '$parameters', $Method_parameters$3 = function $$parameters() {
      var self = this;

      return self.method.$$parameters
    }, $Method_parameters$3.$$arity = 0);
    
    Opal.def(self, '$source_location', $Method_source_location$4 = function $$source_location() {
      var $a, self = this;

      return ($truthy($a = self.method.$$source_location) ? $a : ["(eval)", 0])
    }, $Method_source_location$4.$$arity = 0);
    
    Opal.def(self, '$comments', $Method_comments$5 = function $$comments() {
      var $a, self = this;

      return ($truthy($a = self.method.$$comments) ? $a : [])
    }, $Method_comments$5.$$arity = 0);
    
    Opal.def(self, '$call', $Method_call$6 = function $$call($a) {
      var $iter = $Method_call$6.$$p, block = $iter || nil, $post_args, args, self = this;

      if ($iter) $Method_call$6.$$p = null;
      
      
      if ($iter) $Method_call$6.$$p = null;;
      
      $post_args = Opal.slice.call(arguments, 0, arguments.length);
      
      args = $post_args;;
      
      self.method.$$p = block;

      return self.method.apply(self.receiver, args);
    ;
    }, $Method_call$6.$$arity = -1);
    Opal.alias(self, "[]", "call");
    
    Opal.def(self, '$unbind', $Method_unbind$7 = function $$unbind() {
      var self = this;

      return $$($nesting, 'UnboundMethod').$new(self.receiver.$class(), self.owner, self.method, self.name)
    }, $Method_unbind$7.$$arity = 0);
    
    Opal.def(self, '$to_proc', $Method_to_proc$8 = function $$to_proc() {
      var self = this;

      
      var proc = self.$call.bind(self);
      proc.$$unbound = self.method;
      proc.$$is_lambda = true;
      proc.$$arity = self.method.$$arity;
      proc.$$parameters = self.method.$$parameters;
      return proc;
    
    }, $Method_to_proc$8.$$arity = 0);
    return (Opal.def(self, '$inspect', $Method_inspect$9 = function $$inspect() {
      var self = this;

      return "" + "#<" + (self.$class()) + ": " + (self.receiver.$class()) + "#" + (self.name) + " (defined in " + (self.owner) + " in " + (self.$source_location().$join(":")) + ")>"
    }, $Method_inspect$9.$$arity = 0), nil) && 'inspect';
  })($nesting[0], null, $nesting);
  return (function($base, $super, $parent_nesting) {
    var self = $klass($base, $super, 'UnboundMethod');

    var $nesting = [self].concat($parent_nesting), $UnboundMethod_initialize$10, $UnboundMethod_arity$11, $UnboundMethod_parameters$12, $UnboundMethod_source_location$13, $UnboundMethod_comments$14, $UnboundMethod_bind$15, $UnboundMethod_inspect$16;

    self.$$prototype.method = self.$$prototype.owner = self.$$prototype.name = self.$$prototype.source = nil;
    
    self.$attr_reader("source", "owner", "name");
    
    Opal.def(self, '$initialize', $UnboundMethod_initialize$10 = function $$initialize(source, owner, method, name) {
      var self = this;

      
      self.source = source;
      self.owner = owner;
      self.method = method;
      return (self.name = name);
    }, $UnboundMethod_initialize$10.$$arity = 4);
    
    Opal.def(self, '$arity', $UnboundMethod_arity$11 = function $$arity() {
      var self = this;

      return self.method.$arity()
    }, $UnboundMethod_arity$11.$$arity = 0);
    
    Opal.def(self, '$parameters', $UnboundMethod_parameters$12 = function $$parameters() {
      var self = this;

      return self.method.$$parameters
    }, $UnboundMethod_parameters$12.$$arity = 0);
    
    Opal.def(self, '$source_location', $UnboundMethod_source_location$13 = function $$source_location() {
      var $a, self = this;

      return ($truthy($a = self.method.$$source_location) ? $a : ["(eval)", 0])
    }, $UnboundMethod_source_location$13.$$arity = 0);
    
    Opal.def(self, '$comments', $UnboundMethod_comments$14 = function $$comments() {
      var $a, self = this;

      return ($truthy($a = self.method.$$comments) ? $a : [])
    }, $UnboundMethod_comments$14.$$arity = 0);
    
    Opal.def(self, '$bind', $UnboundMethod_bind$15 = function $$bind(object) {
      var self = this;

      
      if (self.owner.$$is_module || Opal.is_a(object, self.owner)) {
        return $$($nesting, 'Method').$new(object, self.owner, self.method, self.name);
      }
      else {
        self.$raise($$($nesting, 'TypeError'), "" + "can't bind singleton method to a different class (expected " + (object) + ".kind_of?(" + (self.owner) + " to be true)");
      }
    
    }, $UnboundMethod_bind$15.$$arity = 1);
    return (Opal.def(self, '$inspect', $UnboundMethod_inspect$16 = function $$inspect() {
      var self = this;

      return "" + "#<" + (self.$class()) + ": " + (self.source) + "#" + (self.name) + " (defined in " + (self.owner) + " in " + (self.$source_location().$join(":")) + ")>"
    }, $UnboundMethod_inspect$16.$$arity = 0), nil) && 'inspect';
  })($nesting[0], null, $nesting);
};

/* Generated by Opal 1.0.0 */
Opal.modules["corelib/variables"] = function(Opal) {
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.$$$, $$ = Opal.$$, $gvars = Opal.gvars, $hash2 = Opal.hash2;

  Opal.add_stubs(['$new']);
  
  $gvars['&'] = $gvars['~'] = $gvars['`'] = $gvars["'"] = nil;
  $gvars.LOADED_FEATURES = ($gvars["\""] = Opal.loaded_features);
  $gvars.LOAD_PATH = ($gvars[":"] = []);
  $gvars["/"] = "\n";
  $gvars[","] = nil;
  Opal.const_set($nesting[0], 'ARGV', []);
  Opal.const_set($nesting[0], 'ARGF', $$($nesting, 'Object').$new());
  Opal.const_set($nesting[0], 'ENV', $hash2([], {}));
  $gvars.VERBOSE = false;
  $gvars.DEBUG = false;
  return ($gvars.SAFE = 0);
};

/* Generated by Opal 1.0.0 */
Opal.modules["corelib/io"] = function(Opal) {
  function $rb_minus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs - rhs : lhs['$-'](rhs);
  }
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.$$$, $$ = Opal.$$, $klass = Opal.klass, $module = Opal.module, $gvars = Opal.gvars, $send = Opal.send, $writer = nil;

  Opal.add_stubs(['$attr_accessor', '$size', '$write', '$String', '$chomp', '$getbyte', '$getc', '$raise', '$new', '$write_proc=', '$-', '$extend']);
  
  (function($base, $super, $parent_nesting) {
    var self = $klass($base, $super, 'IO');

    var $nesting = [self].concat($parent_nesting), $IO_tty$ques$1, $IO_closed$ques$2, $IO_write$3, $IO_flush$4;

    self.$$prototype.tty = self.$$prototype.closed = nil;
    
    Opal.const_set($nesting[0], 'SEEK_SET', 0);
    Opal.const_set($nesting[0], 'SEEK_CUR', 1);
    Opal.const_set($nesting[0], 'SEEK_END', 2);
    
    Opal.def(self, '$tty?', $IO_tty$ques$1 = function() {
      var self = this;

      return self.tty
    }, $IO_tty$ques$1.$$arity = 0);
    
    Opal.def(self, '$closed?', $IO_closed$ques$2 = function() {
      var self = this;

      return self.closed
    }, $IO_closed$ques$2.$$arity = 0);
    self.$attr_accessor("write_proc");
    
    Opal.def(self, '$write', $IO_write$3 = function $$write(string) {
      var self = this;

      
      self.write_proc(string);
      return string.$size();
    }, $IO_write$3.$$arity = 1);
    self.$attr_accessor("sync", "tty");
    
    Opal.def(self, '$flush', $IO_flush$4 = function $$flush() {
      var self = this;

      return nil
    }, $IO_flush$4.$$arity = 0);
    (function($base, $parent_nesting) {
      var self = $module($base, 'Writable');

      var $nesting = [self].concat($parent_nesting), $Writable_$lt$lt$5, $Writable_print$6, $Writable_puts$7;

      
      
      Opal.def(self, '$<<', $Writable_$lt$lt$5 = function(string) {
        var self = this;

        
        self.$write(string);
        return self;
      }, $Writable_$lt$lt$5.$$arity = 1);
      
      Opal.def(self, '$print', $Writable_print$6 = function $$print($a) {
        var $post_args, args, self = this;
        if ($gvars[","] == null) $gvars[","] = nil;

        
        
        $post_args = Opal.slice.call(arguments, 0, arguments.length);
        
        args = $post_args;;
        
        for (var i = 0, ii = args.length; i < ii; i++) {
          args[i] = self.$String(args[i])
        }
        self.$write(args.join($gvars[","]));
      ;
        return nil;
      }, $Writable_print$6.$$arity = -1);
      
      Opal.def(self, '$puts', $Writable_puts$7 = function $$puts($a) {
        var $post_args, args, self = this;
        if ($gvars["/"] == null) $gvars["/"] = nil;

        
        
        $post_args = Opal.slice.call(arguments, 0, arguments.length);
        
        args = $post_args;;
        
        for (var i = 0, ii = args.length; i < ii; i++) {
          args[i] = self.$String(args[i]).$chomp()
        }
        self.$write(args.concat([nil]).join($gvars["/"]));
      ;
        return nil;
      }, $Writable_puts$7.$$arity = -1);
    })($nesting[0], $nesting);
    return (function($base, $parent_nesting) {
      var self = $module($base, 'Readable');

      var $nesting = [self].concat($parent_nesting), $Readable_readbyte$8, $Readable_readchar$9, $Readable_readline$10, $Readable_readpartial$11;

      
      
      Opal.def(self, '$readbyte', $Readable_readbyte$8 = function $$readbyte() {
        var self = this;

        return self.$getbyte()
      }, $Readable_readbyte$8.$$arity = 0);
      
      Opal.def(self, '$readchar', $Readable_readchar$9 = function $$readchar() {
        var self = this;

        return self.$getc()
      }, $Readable_readchar$9.$$arity = 0);
      
      Opal.def(self, '$readline', $Readable_readline$10 = function $$readline(sep) {
        var self = this;
        if ($gvars["/"] == null) $gvars["/"] = nil;

        
        
        if (sep == null) {
          sep = $gvars["/"];
        };
        return self.$raise($$($nesting, 'NotImplementedError'));
      }, $Readable_readline$10.$$arity = -1);
      
      Opal.def(self, '$readpartial', $Readable_readpartial$11 = function $$readpartial(integer, outbuf) {
        var self = this;

        
        
        if (outbuf == null) {
          outbuf = nil;
        };
        return self.$raise($$($nesting, 'NotImplementedError'));
      }, $Readable_readpartial$11.$$arity = -2);
    })($nesting[0], $nesting);
  })($nesting[0], null, $nesting);
  Opal.const_set($nesting[0], 'STDERR', ($gvars.stderr = $$($nesting, 'IO').$new()));
  Opal.const_set($nesting[0], 'STDIN', ($gvars.stdin = $$($nesting, 'IO').$new()));
  Opal.const_set($nesting[0], 'STDOUT', ($gvars.stdout = $$($nesting, 'IO').$new()));
  var console = Opal.global.console;
  
  $writer = [typeof(process) === 'object' && typeof(process.stdout) === 'object' ? function(s){process.stdout.write(s)} : function(s){console.log(s)}];
  $send($$($nesting, 'STDOUT'), 'write_proc=', Opal.to_a($writer));
  $writer[$rb_minus($writer["length"], 1)];;
  
  $writer = [typeof(process) === 'object' && typeof(process.stderr) === 'object' ? function(s){process.stderr.write(s)} : function(s){console.warn(s)}];
  $send($$($nesting, 'STDERR'), 'write_proc=', Opal.to_a($writer));
  $writer[$rb_minus($writer["length"], 1)];;
  $$($nesting, 'STDOUT').$extend($$$($$($nesting, 'IO'), 'Writable'));
  return $$($nesting, 'STDERR').$extend($$$($$($nesting, 'IO'), 'Writable'));
};

/* Generated by Opal 1.0.0 */
Opal.modules["opal/regexp_anchors"] = function(Opal) {
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.$$$, $$ = Opal.$$, $module = Opal.module;

  Opal.add_stubs(['$==', '$new']);
  return (function($base, $parent_nesting) {
    var self = $module($base, 'Opal');

    var $nesting = [self].concat($parent_nesting);

    
    Opal.const_set($nesting[0], 'REGEXP_START', (function() {if ($$($nesting, 'RUBY_ENGINE')['$==']("opal")) {
      return "^"
    } else {
      return nil
    }; return nil; })());
    Opal.const_set($nesting[0], 'REGEXP_END', (function() {if ($$($nesting, 'RUBY_ENGINE')['$==']("opal")) {
      return "$"
    } else {
      return nil
    }; return nil; })());
    Opal.const_set($nesting[0], 'FORBIDDEN_STARTING_IDENTIFIER_CHARS', "\\u0001-\\u002F\\u003A-\\u0040\\u005B-\\u005E\\u0060\\u007B-\\u007F");
    Opal.const_set($nesting[0], 'FORBIDDEN_ENDING_IDENTIFIER_CHARS', "\\u0001-\\u0020\\u0022-\\u002F\\u003A-\\u003E\\u0040\\u005B-\\u005E\\u0060\\u007B-\\u007F");
    Opal.const_set($nesting[0], 'INLINE_IDENTIFIER_REGEXP', $$($nesting, 'Regexp').$new("" + "[^" + ($$($nesting, 'FORBIDDEN_STARTING_IDENTIFIER_CHARS')) + "]*[^" + ($$($nesting, 'FORBIDDEN_ENDING_IDENTIFIER_CHARS')) + "]"));
    Opal.const_set($nesting[0], 'FORBIDDEN_CONST_NAME_CHARS', "\\u0001-\\u0020\\u0021-\\u002F\\u003B-\\u003F\\u0040\\u005B-\\u005E\\u0060\\u007B-\\u007F");
    Opal.const_set($nesting[0], 'CONST_NAME_REGEXP', $$($nesting, 'Regexp').$new("" + ($$($nesting, 'REGEXP_START')) + "(::)?[A-Z][^" + ($$($nesting, 'FORBIDDEN_CONST_NAME_CHARS')) + "]*" + ($$($nesting, 'REGEXP_END'))));
  })($nesting[0], $nesting)
};

/* Generated by Opal 1.0.0 */
Opal.modules["opal/mini"] = function(Opal) {
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.$$$, $$ = Opal.$$;

  Opal.add_stubs(['$require']);
  
  self.$require("opal/base");
  self.$require("corelib/nil");
  self.$require("corelib/boolean");
  self.$require("corelib/string");
  self.$require("corelib/comparable");
  self.$require("corelib/enumerable");
  self.$require("corelib/enumerator");
  self.$require("corelib/array");
  self.$require("corelib/hash");
  self.$require("corelib/number");
  self.$require("corelib/range");
  self.$require("corelib/proc");
  self.$require("corelib/method");
  self.$require("corelib/regexp");
  self.$require("corelib/variables");
  self.$require("corelib/io");
  return self.$require("opal/regexp_anchors");
};

/* Generated by Opal 1.0.0 */
Opal.modules["corelib/kernel/format"] = function(Opal) {
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.$$$, $$ = Opal.$$, $coerce_to = Opal.coerce_to, $module = Opal.module, $truthy = Opal.truthy, $gvars = Opal.gvars;

  Opal.add_stubs(['$==', '$length', '$respond_to?', '$[]', '$coerce_to?', '$nil?', '$to_a', '$raise', '$to_int', '$fetch', '$Integer', '$Float', '$to_ary', '$to_str', '$inspect', '$to_s']);
  return (function($base, $parent_nesting) {
    var self = $module($base, 'Kernel');

    var $nesting = [self].concat($parent_nesting), $Kernel_format$1;

    
    
    Opal.def(self, '$format', $Kernel_format$1 = function $$format(format_string, $a) {
      var $post_args, args, $b, self = this, ary = nil;
      if ($gvars.DEBUG == null) $gvars.DEBUG = nil;

      
      
      $post_args = Opal.slice.call(arguments, 1, arguments.length);
      
      args = $post_args;;
      if ($truthy((($b = args.$length()['$=='](1)) ? args['$[]'](0)['$respond_to?']("to_ary") : args.$length()['$=='](1)))) {
        
        ary = $$($nesting, 'Opal')['$coerce_to?'](args['$[]'](0), $$($nesting, 'Array'), "to_ary");
        if ($truthy(ary['$nil?']())) {
        } else {
          args = ary.$to_a()
        };};
      
      var result = '',
          //used for slicing:
          begin_slice = 0,
          end_slice,
          //used for iterating over the format string:
          i,
          len = format_string.length,
          //used for processing field values:
          arg,
          str,
          //used for processing %g and %G fields:
          exponent,
          //used for keeping track of width and precision:
          width,
          precision,
          //used for holding temporary values:
          tmp_num,
          //used for processing %{} and %<> fileds:
          hash_parameter_key,
          closing_brace_char,
          //used for processing %b, %B, %o, %x, and %X fields:
          base_number,
          base_prefix,
          base_neg_zero_regex,
          base_neg_zero_digit,
          //used for processing arguments:
          next_arg,
          seq_arg_num = 1,
          pos_arg_num = 0,
          //used for keeping track of flags:
          flags,
          FNONE  = 0,
          FSHARP = 1,
          FMINUS = 2,
          FPLUS  = 4,
          FZERO  = 8,
          FSPACE = 16,
          FWIDTH = 32,
          FPREC  = 64,
          FPREC0 = 128;

      function CHECK_FOR_FLAGS() {
        if (flags&FWIDTH) { self.$raise($$($nesting, 'ArgumentError'), "flag after width") }
        if (flags&FPREC0) { self.$raise($$($nesting, 'ArgumentError'), "flag after precision") }
      }

      function CHECK_FOR_WIDTH() {
        if (flags&FWIDTH) { self.$raise($$($nesting, 'ArgumentError'), "width given twice") }
        if (flags&FPREC0) { self.$raise($$($nesting, 'ArgumentError'), "width after precision") }
      }

      function GET_NTH_ARG(num) {
        if (num >= args.length) { self.$raise($$($nesting, 'ArgumentError'), "too few arguments") }
        return args[num];
      }

      function GET_NEXT_ARG() {
        switch (pos_arg_num) {
        case -1: self.$raise($$($nesting, 'ArgumentError'), "" + "unnumbered(" + (seq_arg_num) + ") mixed with numbered")
        case -2: self.$raise($$($nesting, 'ArgumentError'), "" + "unnumbered(" + (seq_arg_num) + ") mixed with named")
        }
        pos_arg_num = seq_arg_num++;
        return GET_NTH_ARG(pos_arg_num - 1);
      }

      function GET_POS_ARG(num) {
        if (pos_arg_num > 0) {
          self.$raise($$($nesting, 'ArgumentError'), "" + "numbered(" + (num) + ") after unnumbered(" + (pos_arg_num) + ")")
        }
        if (pos_arg_num === -2) {
          self.$raise($$($nesting, 'ArgumentError'), "" + "numbered(" + (num) + ") after named")
        }
        if (num < 1) {
          self.$raise($$($nesting, 'ArgumentError'), "" + "invalid index - " + (num) + "$")
        }
        pos_arg_num = -1;
        return GET_NTH_ARG(num - 1);
      }

      function GET_ARG() {
        return (next_arg === undefined ? GET_NEXT_ARG() : next_arg);
      }

      function READ_NUM(label) {
        var num, str = '';
        for (;; i++) {
          if (i === len) {
            self.$raise($$($nesting, 'ArgumentError'), "malformed format string - %*[0-9]")
          }
          if (format_string.charCodeAt(i) < 48 || format_string.charCodeAt(i) > 57) {
            i--;
            num = parseInt(str, 10) || 0;
            if (num > 2147483647) {
              self.$raise($$($nesting, 'ArgumentError'), "" + (label) + " too big")
            }
            return num;
          }
          str += format_string.charAt(i);
        }
      }

      function READ_NUM_AFTER_ASTER(label) {
        var arg, num = READ_NUM(label);
        if (format_string.charAt(i + 1) === '$') {
          i++;
          arg = GET_POS_ARG(num);
        } else {
          arg = GET_NEXT_ARG();
        }
        return (arg).$to_int();
      }

      for (i = format_string.indexOf('%'); i !== -1; i = format_string.indexOf('%', i)) {
        str = undefined;

        flags = FNONE;
        width = -1;
        precision = -1;
        next_arg = undefined;

        end_slice = i;

        i++;

        switch (format_string.charAt(i)) {
        case '%':
          begin_slice = i;
        case '':
        case '\n':
        case '\0':
          i++;
          continue;
        }

        format_sequence: for (; i < len; i++) {
          switch (format_string.charAt(i)) {

          case ' ':
            CHECK_FOR_FLAGS();
            flags |= FSPACE;
            continue format_sequence;

          case '#':
            CHECK_FOR_FLAGS();
            flags |= FSHARP;
            continue format_sequence;

          case '+':
            CHECK_FOR_FLAGS();
            flags |= FPLUS;
            continue format_sequence;

          case '-':
            CHECK_FOR_FLAGS();
            flags |= FMINUS;
            continue format_sequence;

          case '0':
            CHECK_FOR_FLAGS();
            flags |= FZERO;
            continue format_sequence;

          case '1':
          case '2':
          case '3':
          case '4':
          case '5':
          case '6':
          case '7':
          case '8':
          case '9':
            tmp_num = READ_NUM('width');
            if (format_string.charAt(i + 1) === '$') {
              if (i + 2 === len) {
                str = '%';
                i++;
                break format_sequence;
              }
              if (next_arg !== undefined) {
                self.$raise($$($nesting, 'ArgumentError'), "" + "value given twice - %" + (tmp_num) + "$")
              }
              next_arg = GET_POS_ARG(tmp_num);
              i++;
            } else {
              CHECK_FOR_WIDTH();
              flags |= FWIDTH;
              width = tmp_num;
            }
            continue format_sequence;

          case '<':
          case '\{':
            closing_brace_char = (format_string.charAt(i) === '<' ? '>' : '\}');
            hash_parameter_key = '';

            i++;

            for (;; i++) {
              if (i === len) {
                self.$raise($$($nesting, 'ArgumentError'), "malformed name - unmatched parenthesis")
              }
              if (format_string.charAt(i) === closing_brace_char) {

                if (pos_arg_num > 0) {
                  self.$raise($$($nesting, 'ArgumentError'), "" + "named " + (hash_parameter_key) + " after unnumbered(" + (pos_arg_num) + ")")
                }
                if (pos_arg_num === -1) {
                  self.$raise($$($nesting, 'ArgumentError'), "" + "named " + (hash_parameter_key) + " after numbered")
                }
                pos_arg_num = -2;

                if (args[0] === undefined || !args[0].$$is_hash) {
                  self.$raise($$($nesting, 'ArgumentError'), "one hash required")
                }

                next_arg = (args[0]).$fetch(hash_parameter_key);

                if (closing_brace_char === '>') {
                  continue format_sequence;
                } else {
                  str = next_arg.toString();
                  if (precision !== -1) { str = str.slice(0, precision); }
                  if (flags&FMINUS) {
                    while (str.length < width) { str = str + ' '; }
                  } else {
                    while (str.length < width) { str = ' ' + str; }
                  }
                  break format_sequence;
                }
              }
              hash_parameter_key += format_string.charAt(i);
            }

          case '*':
            i++;
            CHECK_FOR_WIDTH();
            flags |= FWIDTH;
            width = READ_NUM_AFTER_ASTER('width');
            if (width < 0) {
              flags |= FMINUS;
              width = -width;
            }
            continue format_sequence;

          case '.':
            if (flags&FPREC0) {
              self.$raise($$($nesting, 'ArgumentError'), "precision given twice")
            }
            flags |= FPREC|FPREC0;
            precision = 0;
            i++;
            if (format_string.charAt(i) === '*') {
              i++;
              precision = READ_NUM_AFTER_ASTER('precision');
              if (precision < 0) {
                flags &= ~FPREC;
              }
              continue format_sequence;
            }
            precision = READ_NUM('precision');
            continue format_sequence;

          case 'd':
          case 'i':
          case 'u':
            arg = self.$Integer(GET_ARG());
            if (arg >= 0) {
              str = arg.toString();
              while (str.length < precision) { str = '0' + str; }
              if (flags&FMINUS) {
                if (flags&FPLUS || flags&FSPACE) { str = (flags&FPLUS ? '+' : ' ') + str; }
                while (str.length < width) { str = str + ' '; }
              } else {
                if (flags&FZERO && precision === -1) {
                  while (str.length < width - ((flags&FPLUS || flags&FSPACE) ? 1 : 0)) { str = '0' + str; }
                  if (flags&FPLUS || flags&FSPACE) { str = (flags&FPLUS ? '+' : ' ') + str; }
                } else {
                  if (flags&FPLUS || flags&FSPACE) { str = (flags&FPLUS ? '+' : ' ') + str; }
                  while (str.length < width) { str = ' ' + str; }
                }
              }
            } else {
              str = (-arg).toString();
              while (str.length < precision) { str = '0' + str; }
              if (flags&FMINUS) {
                str = '-' + str;
                while (str.length < width) { str = str + ' '; }
              } else {
                if (flags&FZERO && precision === -1) {
                  while (str.length < width - 1) { str = '0' + str; }
                  str = '-' + str;
                } else {
                  str = '-' + str;
                  while (str.length < width) { str = ' ' + str; }
                }
              }
            }
            break format_sequence;

          case 'b':
          case 'B':
          case 'o':
          case 'x':
          case 'X':
            switch (format_string.charAt(i)) {
            case 'b':
            case 'B':
              base_number = 2;
              base_prefix = '0b';
              base_neg_zero_regex = /^1+/;
              base_neg_zero_digit = '1';
              break;
            case 'o':
              base_number = 8;
              base_prefix = '0';
              base_neg_zero_regex = /^3?7+/;
              base_neg_zero_digit = '7';
              break;
            case 'x':
            case 'X':
              base_number = 16;
              base_prefix = '0x';
              base_neg_zero_regex = /^f+/;
              base_neg_zero_digit = 'f';
              break;
            }
            arg = self.$Integer(GET_ARG());
            if (arg >= 0) {
              str = arg.toString(base_number);
              while (str.length < precision) { str = '0' + str; }
              if (flags&FMINUS) {
                if (flags&FPLUS || flags&FSPACE) { str = (flags&FPLUS ? '+' : ' ') + str; }
                if (flags&FSHARP && arg !== 0) { str = base_prefix + str; }
                while (str.length < width) { str = str + ' '; }
              } else {
                if (flags&FZERO && precision === -1) {
                  while (str.length < width - ((flags&FPLUS || flags&FSPACE) ? 1 : 0) - ((flags&FSHARP && arg !== 0) ? base_prefix.length : 0)) { str = '0' + str; }
                  if (flags&FSHARP && arg !== 0) { str = base_prefix + str; }
                  if (flags&FPLUS || flags&FSPACE) { str = (flags&FPLUS ? '+' : ' ') + str; }
                } else {
                  if (flags&FSHARP && arg !== 0) { str = base_prefix + str; }
                  if (flags&FPLUS || flags&FSPACE) { str = (flags&FPLUS ? '+' : ' ') + str; }
                  while (str.length < width) { str = ' ' + str; }
                }
              }
            } else {
              if (flags&FPLUS || flags&FSPACE) {
                str = (-arg).toString(base_number);
                while (str.length < precision) { str = '0' + str; }
                if (flags&FMINUS) {
                  if (flags&FSHARP) { str = base_prefix + str; }
                  str = '-' + str;
                  while (str.length < width) { str = str + ' '; }
                } else {
                  if (flags&FZERO && precision === -1) {
                    while (str.length < width - 1 - (flags&FSHARP ? 2 : 0)) { str = '0' + str; }
                    if (flags&FSHARP) { str = base_prefix + str; }
                    str = '-' + str;
                  } else {
                    if (flags&FSHARP) { str = base_prefix + str; }
                    str = '-' + str;
                    while (str.length < width) { str = ' ' + str; }
                  }
                }
              } else {
                str = (arg >>> 0).toString(base_number).replace(base_neg_zero_regex, base_neg_zero_digit);
                while (str.length < precision - 2) { str = base_neg_zero_digit + str; }
                if (flags&FMINUS) {
                  str = '..' + str;
                  if (flags&FSHARP) { str = base_prefix + str; }
                  while (str.length < width) { str = str + ' '; }
                } else {
                  if (flags&FZERO && precision === -1) {
                    while (str.length < width - 2 - (flags&FSHARP ? base_prefix.length : 0)) { str = base_neg_zero_digit + str; }
                    str = '..' + str;
                    if (flags&FSHARP) { str = base_prefix + str; }
                  } else {
                    str = '..' + str;
                    if (flags&FSHARP) { str = base_prefix + str; }
                    while (str.length < width) { str = ' ' + str; }
                  }
                }
              }
            }
            if (format_string.charAt(i) === format_string.charAt(i).toUpperCase()) {
              str = str.toUpperCase();
            }
            break format_sequence;

          case 'f':
          case 'e':
          case 'E':
          case 'g':
          case 'G':
            arg = self.$Float(GET_ARG());
            if (arg >= 0 || isNaN(arg)) {
              if (arg === Infinity) {
                str = 'Inf';
              } else {
                switch (format_string.charAt(i)) {
                case 'f':
                  str = arg.toFixed(precision === -1 ? 6 : precision);
                  break;
                case 'e':
                case 'E':
                  str = arg.toExponential(precision === -1 ? 6 : precision);
                  break;
                case 'g':
                case 'G':
                  str = arg.toExponential();
                  exponent = parseInt(str.split('e')[1], 10);
                  if (!(exponent < -4 || exponent >= (precision === -1 ? 6 : precision))) {
                    str = arg.toPrecision(precision === -1 ? (flags&FSHARP ? 6 : undefined) : precision);
                  }
                  break;
                }
              }
              if (flags&FMINUS) {
                if (flags&FPLUS || flags&FSPACE) { str = (flags&FPLUS ? '+' : ' ') + str; }
                while (str.length < width) { str = str + ' '; }
              } else {
                if (flags&FZERO && arg !== Infinity && !isNaN(arg)) {
                  while (str.length < width - ((flags&FPLUS || flags&FSPACE) ? 1 : 0)) { str = '0' + str; }
                  if (flags&FPLUS || flags&FSPACE) { str = (flags&FPLUS ? '+' : ' ') + str; }
                } else {
                  if (flags&FPLUS || flags&FSPACE) { str = (flags&FPLUS ? '+' : ' ') + str; }
                  while (str.length < width) { str = ' ' + str; }
                }
              }
            } else {
              if (arg === -Infinity) {
                str = 'Inf';
              } else {
                switch (format_string.charAt(i)) {
                case 'f':
                  str = (-arg).toFixed(precision === -1 ? 6 : precision);
                  break;
                case 'e':
                case 'E':
                  str = (-arg).toExponential(precision === -1 ? 6 : precision);
                  break;
                case 'g':
                case 'G':
                  str = (-arg).toExponential();
                  exponent = parseInt(str.split('e')[1], 10);
                  if (!(exponent < -4 || exponent >= (precision === -1 ? 6 : precision))) {
                    str = (-arg).toPrecision(precision === -1 ? (flags&FSHARP ? 6 : undefined) : precision);
                  }
                  break;
                }
              }
              if (flags&FMINUS) {
                str = '-' + str;
                while (str.length < width) { str = str + ' '; }
              } else {
                if (flags&FZERO && arg !== -Infinity) {
                  while (str.length < width - 1) { str = '0' + str; }
                  str = '-' + str;
                } else {
                  str = '-' + str;
                  while (str.length < width) { str = ' ' + str; }
                }
              }
            }
            if (format_string.charAt(i) === format_string.charAt(i).toUpperCase() && arg !== Infinity && arg !== -Infinity && !isNaN(arg)) {
              str = str.toUpperCase();
            }
            str = str.replace(/([eE][-+]?)([0-9])$/, '$10$2');
            break format_sequence;

          case 'a':
          case 'A':
            // Not implemented because there are no specs for this field type.
            self.$raise($$($nesting, 'NotImplementedError'), "`A` and `a` format field types are not implemented in Opal yet")

          case 'c':
            arg = GET_ARG();
            if ((arg)['$respond_to?']("to_ary")) { arg = (arg).$to_ary()[0]; }
            if ((arg)['$respond_to?']("to_str")) {
              str = (arg).$to_str();
            } else {
              str = String.fromCharCode($coerce_to(arg, $$($nesting, 'Integer'), 'to_int'));
            }
            if (str.length !== 1) {
              self.$raise($$($nesting, 'ArgumentError'), "%c requires a character")
            }
            if (flags&FMINUS) {
              while (str.length < width) { str = str + ' '; }
            } else {
              while (str.length < width) { str = ' ' + str; }
            }
            break format_sequence;

          case 'p':
            str = (GET_ARG()).$inspect();
            if (precision !== -1) { str = str.slice(0, precision); }
            if (flags&FMINUS) {
              while (str.length < width) { str = str + ' '; }
            } else {
              while (str.length < width) { str = ' ' + str; }
            }
            break format_sequence;

          case 's':
            str = (GET_ARG()).$to_s();
            if (precision !== -1) { str = str.slice(0, precision); }
            if (flags&FMINUS) {
              while (str.length < width) { str = str + ' '; }
            } else {
              while (str.length < width) { str = ' ' + str; }
            }
            break format_sequence;

          default:
            self.$raise($$($nesting, 'ArgumentError'), "" + "malformed format string - %" + (format_string.charAt(i)))
          }
        }

        if (str === undefined) {
          self.$raise($$($nesting, 'ArgumentError'), "malformed format string - %")
        }

        result += format_string.slice(begin_slice, end_slice) + str;
        begin_slice = i + 1;
      }

      if ($gvars.DEBUG && pos_arg_num >= 0 && seq_arg_num < args.length) {
        self.$raise($$($nesting, 'ArgumentError'), "too many arguments for format string")
      }

      return result + format_string.slice(begin_slice);
    ;
    }, $Kernel_format$1.$$arity = -2);
    Opal.alias(self, "sprintf", "format");
  })($nesting[0], $nesting)
};

/* Generated by Opal 1.0.0 */
Opal.modules["corelib/string/encoding"] = function(Opal) {
  function $rb_plus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs + rhs : lhs['$+'](rhs);
  }
  function $rb_minus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs - rhs : lhs['$-'](rhs);
  }
  var $$12, $$15, $$18, $$21, $$24, self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.$$$, $$ = Opal.$$, $klass = Opal.klass, $hash2 = Opal.hash2, $truthy = Opal.truthy, $send = Opal.send, $writer = nil;

  Opal.add_stubs(['$require', '$+', '$[]', '$new', '$instance_eval', '$to_proc', '$each', '$const_set', '$sub', '$==', '$default_external', '$upcase', '$raise', '$attr_accessor', '$singleton_class', '$attr_reader', '$register', '$length', '$bytes', '$to_a', '$each_byte', '$bytesize', '$enum_for', '$each_codepoint', '$force_encoding', '$dup', '$coerce_to!', '$find', '$getbyte', '$default_external=', '$-']);
  
  self.$require("corelib/string");
  (function($base, $super, $parent_nesting) {
    var self = $klass($base, $super, 'Encoding');

    var $nesting = [self].concat($parent_nesting), $Encoding_register$1, $Encoding_find$3, $Encoding_initialize$4, $Encoding_ascii_compatible$ques$5, $Encoding_dummy$ques$6, $Encoding_to_s$7, $Encoding_inspect$8, $Encoding_each_byte$9, $Encoding_getbyte$10, $Encoding_bytesize$11;

    self.$$prototype.ascii = self.$$prototype.dummy = self.$$prototype.name = nil;
    
    Opal.defs(self, '$register', $Encoding_register$1 = function $$register(name, options) {
      var $iter = $Encoding_register$1.$$p, block = $iter || nil, $a, $$2, self = this, names = nil, ascii = nil, dummy = nil, encoding = nil, register = nil;

      if ($iter) $Encoding_register$1.$$p = null;
      
      
      if ($iter) $Encoding_register$1.$$p = null;;
      
      if (options == null) {
        options = $hash2([], {});
      };
      names = $rb_plus([name], ($truthy($a = options['$[]']("aliases")) ? $a : []));
      ascii = ($truthy($a = options['$[]']("ascii")) ? $a : false);
      dummy = ($truthy($a = options['$[]']("dummy")) ? $a : false);
      encoding = self.$new(name, names, ascii, dummy);
      $send(encoding, 'instance_eval', [], block.$to_proc());
      register = Opal.encodings;
      return $send(names, 'each', [], ($$2 = function(encoding_name){var self = $$2.$$s == null ? this : $$2.$$s;

      
        
        if (encoding_name == null) {
          encoding_name = nil;
        };
        self.$const_set(encoding_name.$sub("-", "_"), encoding);
        return register[encoding_name] = encoding;}, $$2.$$s = self, $$2.$$arity = 1, $$2));
    }, $Encoding_register$1.$$arity = -2);
    Opal.defs(self, '$find', $Encoding_find$3 = function $$find(name) {
      var $a, self = this, register = nil, encoding = nil;

      
      if (name['$==']("default_external")) {
        return self.$default_external()};
      register = Opal.encodings;
      encoding = ($truthy($a = register[name]) ? $a : register[name.$upcase()]);
      if ($truthy(encoding)) {
      } else {
        self.$raise($$($nesting, 'ArgumentError'), "" + "unknown encoding name - " + (name))
      };
      return encoding;
    }, $Encoding_find$3.$$arity = 1);
    self.$singleton_class().$attr_accessor("default_external");
    self.$attr_reader("name", "names");
    
    Opal.def(self, '$initialize', $Encoding_initialize$4 = function $$initialize(name, names, ascii, dummy) {
      var self = this;

      
      self.name = name;
      self.names = names;
      self.ascii = ascii;
      return (self.dummy = dummy);
    }, $Encoding_initialize$4.$$arity = 4);
    
    Opal.def(self, '$ascii_compatible?', $Encoding_ascii_compatible$ques$5 = function() {
      var self = this;

      return self.ascii
    }, $Encoding_ascii_compatible$ques$5.$$arity = 0);
    
    Opal.def(self, '$dummy?', $Encoding_dummy$ques$6 = function() {
      var self = this;

      return self.dummy
    }, $Encoding_dummy$ques$6.$$arity = 0);
    
    Opal.def(self, '$to_s', $Encoding_to_s$7 = function $$to_s() {
      var self = this;

      return self.name
    }, $Encoding_to_s$7.$$arity = 0);
    
    Opal.def(self, '$inspect', $Encoding_inspect$8 = function $$inspect() {
      var self = this;

      return "" + "#<Encoding:" + (self.name) + ((function() {if ($truthy(self.dummy)) {
        return " (dummy)"
      } else {
        return nil
      }; return nil; })()) + ">"
    }, $Encoding_inspect$8.$$arity = 0);
    
    Opal.def(self, '$each_byte', $Encoding_each_byte$9 = function $$each_byte($a) {
      var $post_args, self = this;

      
      
      $post_args = Opal.slice.call(arguments, 0, arguments.length);
      ;
      return self.$raise($$($nesting, 'NotImplementedError'));
    }, $Encoding_each_byte$9.$$arity = -1);
    
    Opal.def(self, '$getbyte', $Encoding_getbyte$10 = function $$getbyte($a) {
      var $post_args, self = this;

      
      
      $post_args = Opal.slice.call(arguments, 0, arguments.length);
      ;
      return self.$raise($$($nesting, 'NotImplementedError'));
    }, $Encoding_getbyte$10.$$arity = -1);
    
    Opal.def(self, '$bytesize', $Encoding_bytesize$11 = function $$bytesize($a) {
      var $post_args, self = this;

      
      
      $post_args = Opal.slice.call(arguments, 0, arguments.length);
      ;
      return self.$raise($$($nesting, 'NotImplementedError'));
    }, $Encoding_bytesize$11.$$arity = -1);
    (function($base, $super, $parent_nesting) {
      var self = $klass($base, $super, 'EncodingError');

      var $nesting = [self].concat($parent_nesting);

      return nil
    })($nesting[0], $$($nesting, 'StandardError'), $nesting);
    return (function($base, $super, $parent_nesting) {
      var self = $klass($base, $super, 'CompatibilityError');

      var $nesting = [self].concat($parent_nesting);

      return nil
    })($nesting[0], $$($nesting, 'EncodingError'), $nesting);
  })($nesting[0], null, $nesting);
  $send($$($nesting, 'Encoding'), 'register', ["UTF-8", $hash2(["aliases", "ascii"], {"aliases": ["CP65001"], "ascii": true})], ($$12 = function(){var self = $$12.$$s == null ? this : $$12.$$s, $each_byte$13, $bytesize$14;

  
    
    Opal.def(self, '$each_byte', $each_byte$13 = function $$each_byte(string) {
      var $iter = $each_byte$13.$$p, block = $iter || nil, self = this;

      if ($iter) $each_byte$13.$$p = null;
      
      
      if ($iter) $each_byte$13.$$p = null;;
      
      for (var i = 0, length = string.length; i < length; i++) {
        var code = string.charCodeAt(i);

        if (code <= 0x7f) {
          Opal.yield1(block, code);
        }
        else {
          var encoded = encodeURIComponent(string.charAt(i)).substr(1).split('%');

          for (var j = 0, encoded_length = encoded.length; j < encoded_length; j++) {
            Opal.yield1(block, parseInt(encoded[j], 16));
          }
        }
      }
    ;
    }, $each_byte$13.$$arity = 1);
    return (Opal.def(self, '$bytesize', $bytesize$14 = function $$bytesize(string) {
      var self = this;

      return string.$bytes().$length()
    }, $bytesize$14.$$arity = 1), nil) && 'bytesize';}, $$12.$$s = self, $$12.$$arity = 0, $$12));
  $send($$($nesting, 'Encoding'), 'register', ["UTF-16LE"], ($$15 = function(){var self = $$15.$$s == null ? this : $$15.$$s, $each_byte$16, $bytesize$17;

  
    
    Opal.def(self, '$each_byte', $each_byte$16 = function $$each_byte(string) {
      var $iter = $each_byte$16.$$p, block = $iter || nil, self = this;

      if ($iter) $each_byte$16.$$p = null;
      
      
      if ($iter) $each_byte$16.$$p = null;;
      
      for (var i = 0, length = string.length; i < length; i++) {
        var code = string.charCodeAt(i);

        Opal.yield1(block, code & 0xff);
        Opal.yield1(block, code >> 8);
      }
    ;
    }, $each_byte$16.$$arity = 1);
    return (Opal.def(self, '$bytesize', $bytesize$17 = function $$bytesize(string) {
      var self = this;

      return string.$bytes().$length()
    }, $bytesize$17.$$arity = 1), nil) && 'bytesize';}, $$15.$$s = self, $$15.$$arity = 0, $$15));
  $send($$($nesting, 'Encoding'), 'register', ["UTF-16BE"], ($$18 = function(){var self = $$18.$$s == null ? this : $$18.$$s, $each_byte$19, $bytesize$20;

  
    
    Opal.def(self, '$each_byte', $each_byte$19 = function $$each_byte(string) {
      var $iter = $each_byte$19.$$p, block = $iter || nil, self = this;

      if ($iter) $each_byte$19.$$p = null;
      
      
      if ($iter) $each_byte$19.$$p = null;;
      
      for (var i = 0, length = string.length; i < length; i++) {
        var code = string.charCodeAt(i);

        Opal.yield1(block, code >> 8);
        Opal.yield1(block, code & 0xff);
      }
    ;
    }, $each_byte$19.$$arity = 1);
    return (Opal.def(self, '$bytesize', $bytesize$20 = function $$bytesize(string) {
      var self = this;

      return string.$bytes().$length()
    }, $bytesize$20.$$arity = 1), nil) && 'bytesize';}, $$18.$$s = self, $$18.$$arity = 0, $$18));
  $send($$($nesting, 'Encoding'), 'register', ["UTF-32LE"], ($$21 = function(){var self = $$21.$$s == null ? this : $$21.$$s, $each_byte$22, $bytesize$23;

  
    
    Opal.def(self, '$each_byte', $each_byte$22 = function $$each_byte(string) {
      var $iter = $each_byte$22.$$p, block = $iter || nil, self = this;

      if ($iter) $each_byte$22.$$p = null;
      
      
      if ($iter) $each_byte$22.$$p = null;;
      
      for (var i = 0, length = string.length; i < length; i++) {
        var code = string.charCodeAt(i);

        Opal.yield1(block, code & 0xff);
        Opal.yield1(block, code >> 8);
      }
    ;
    }, $each_byte$22.$$arity = 1);
    return (Opal.def(self, '$bytesize', $bytesize$23 = function $$bytesize(string) {
      var self = this;

      return string.$bytes().$length()
    }, $bytesize$23.$$arity = 1), nil) && 'bytesize';}, $$21.$$s = self, $$21.$$arity = 0, $$21));
  $send($$($nesting, 'Encoding'), 'register', ["ASCII-8BIT", $hash2(["aliases", "ascii", "dummy"], {"aliases": ["BINARY", "US-ASCII", "ASCII"], "ascii": true, "dummy": true})], ($$24 = function(){var self = $$24.$$s == null ? this : $$24.$$s, $each_byte$25, $bytesize$26;

  
    
    Opal.def(self, '$each_byte', $each_byte$25 = function $$each_byte(string) {
      var $iter = $each_byte$25.$$p, block = $iter || nil, self = this;

      if ($iter) $each_byte$25.$$p = null;
      
      
      if ($iter) $each_byte$25.$$p = null;;
      
      for (var i = 0, length = string.length; i < length; i++) {
        var code = string.charCodeAt(i);
        Opal.yield1(block, code & 0xff);
        Opal.yield1(block, code >> 8);
      }
    ;
    }, $each_byte$25.$$arity = 1);
    return (Opal.def(self, '$bytesize', $bytesize$26 = function $$bytesize(string) {
      var self = this;

      return string.$bytes().$length()
    }, $bytesize$26.$$arity = 1), nil) && 'bytesize';}, $$24.$$s = self, $$24.$$arity = 0, $$24));
  (function($base, $super, $parent_nesting) {
    var self = $klass($base, $super, 'String');

    var $nesting = [self].concat($parent_nesting), $String_bytes$27, $String_bytesize$28, $String_each_byte$29, $String_each_codepoint$30, $String_codepoints$31, $String_encode$32, $String_force_encoding$33, $String_getbyte$34, $String_valid_encoding$ques$35;

    self.$$prototype.encoding = nil;
    
    self.$attr_reader("encoding");
    Opal.defineProperty(String.prototype, 'encoding', $$$($$($nesting, 'Encoding'), 'UTF_16LE'));
    
    Opal.def(self, '$bytes', $String_bytes$27 = function $$bytes() {
      var self = this;

      return self.$each_byte().$to_a()
    }, $String_bytes$27.$$arity = 0);
    
    Opal.def(self, '$bytesize', $String_bytesize$28 = function $$bytesize() {
      var self = this;

      return self.encoding.$bytesize(self)
    }, $String_bytesize$28.$$arity = 0);
    
    Opal.def(self, '$each_byte', $String_each_byte$29 = function $$each_byte() {
      var $iter = $String_each_byte$29.$$p, block = $iter || nil, self = this;

      if ($iter) $String_each_byte$29.$$p = null;
      
      
      if ($iter) $String_each_byte$29.$$p = null;;
      if ((block !== nil)) {
      } else {
        return self.$enum_for("each_byte")
      };
      $send(self.encoding, 'each_byte', [self], block.$to_proc());
      return self;
    }, $String_each_byte$29.$$arity = 0);
    
    Opal.def(self, '$each_codepoint', $String_each_codepoint$30 = function $$each_codepoint() {
      var $iter = $String_each_codepoint$30.$$p, block = $iter || nil, self = this;

      if ($iter) $String_each_codepoint$30.$$p = null;
      
      
      if ($iter) $String_each_codepoint$30.$$p = null;;
      if ((block !== nil)) {
      } else {
        return self.$enum_for("each_codepoint")
      };
      
      for (var i = 0, length = self.length; i < length; i++) {
        Opal.yield1(block, self.codePointAt(i));
      }
    ;
      return self;
    }, $String_each_codepoint$30.$$arity = 0);
    
    Opal.def(self, '$codepoints', $String_codepoints$31 = function $$codepoints() {
      var $iter = $String_codepoints$31.$$p, block = $iter || nil, self = this;

      if ($iter) $String_codepoints$31.$$p = null;
      
      
      if ($iter) $String_codepoints$31.$$p = null;;
      if ((block !== nil)) {
        return $send(self, 'each_codepoint', [], block.$to_proc())};
      return self.$each_codepoint().$to_a();
    }, $String_codepoints$31.$$arity = 0);
    
    Opal.def(self, '$encode', $String_encode$32 = function $$encode(encoding) {
      var self = this;

      return self.$dup().$force_encoding(encoding)
    }, $String_encode$32.$$arity = 1);
    
    Opal.def(self, '$force_encoding', $String_force_encoding$33 = function $$force_encoding(encoding) {
      var self = this;

      
      if (encoding === self.encoding) { return self; }

      encoding = $$($nesting, 'Opal')['$coerce_to!'](encoding, $$($nesting, 'String'), "to_s");
      encoding = $$($nesting, 'Encoding').$find(encoding);

      if (encoding === self.encoding) { return self; }

      Opal.set_encoding(self, encoding);

      return self;
    
    }, $String_force_encoding$33.$$arity = 1);
    
    Opal.def(self, '$getbyte', $String_getbyte$34 = function $$getbyte(idx) {
      var self = this;

      return self.encoding.$getbyte(self, idx)
    }, $String_getbyte$34.$$arity = 1);
    return (Opal.def(self, '$valid_encoding?', $String_valid_encoding$ques$35 = function() {
      var self = this;

      return true
    }, $String_valid_encoding$ques$35.$$arity = 0), nil) && 'valid_encoding?';
  })($nesting[0], null, $nesting);
  
  $writer = [$$$($$($nesting, 'Encoding'), 'UTF_8')];
  $send($$($nesting, 'Encoding'), 'default_external=', Opal.to_a($writer));
  return $writer[$rb_minus($writer["length"], 1)];;
};

/* Generated by Opal 1.0.0 */
Opal.modules["corelib/math"] = function(Opal) {
  function $rb_minus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs - rhs : lhs['$-'](rhs);
  }
  function $rb_divide(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs / rhs : lhs['$/'](rhs);
  }
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.$$$, $$ = Opal.$$, $type_error = Opal.type_error, $module = Opal.module, $truthy = Opal.truthy;

  Opal.add_stubs(['$new', '$raise', '$Float', '$Integer', '$module_function', '$checked', '$float!', '$===', '$gamma', '$-', '$integer!', '$/', '$infinite?']);
  return (function($base, $parent_nesting) {
    var self = $module($base, 'Math');

    var $nesting = [self].concat($parent_nesting), $Math_checked$1, $Math_float$excl$2, $Math_integer$excl$3, $Math_acos$4, $Math_acosh$5, $Math_asin$6, $Math_asinh$7, $Math_atan$8, $Math_atan2$9, $Math_atanh$10, $Math_cbrt$11, $Math_cos$12, $Math_cosh$13, $Math_erf$14, $Math_erfc$15, $Math_exp$16, $Math_frexp$17, $Math_gamma$18, $Math_hypot$19, $Math_ldexp$20, $Math_lgamma$21, $Math_log$22, $Math_log10$23, $Math_log2$24, $Math_sin$25, $Math_sinh$26, $Math_sqrt$27, $Math_tan$28, $Math_tanh$29;

    
    Opal.const_set($nesting[0], 'E', Math.E);
    Opal.const_set($nesting[0], 'PI', Math.PI);
    Opal.const_set($nesting[0], 'DomainError', $$($nesting, 'Class').$new($$($nesting, 'StandardError')));
    Opal.defs(self, '$checked', $Math_checked$1 = function $$checked(method, $a) {
      var $post_args, args, self = this;

      
      
      $post_args = Opal.slice.call(arguments, 1, arguments.length);
      
      args = $post_args;;
      
      if (isNaN(args[0]) || (args.length == 2 && isNaN(args[1]))) {
        return NaN;
      }

      var result = Math[method].apply(null, args);

      if (isNaN(result)) {
        self.$raise($$($nesting, 'DomainError'), "" + "Numerical argument is out of domain - \"" + (method) + "\"");
      }

      return result;
    ;
    }, $Math_checked$1.$$arity = -2);
    Opal.defs(self, '$float!', $Math_float$excl$2 = function(value) {
      var self = this;

      try {
        return self.$Float(value)
      } catch ($err) {
        if (Opal.rescue($err, [$$($nesting, 'ArgumentError')])) {
          try {
            return self.$raise($type_error(value, $$($nesting, 'Float')))
          } finally { Opal.pop_exception() }
        } else { throw $err; }
      }
    }, $Math_float$excl$2.$$arity = 1);
    Opal.defs(self, '$integer!', $Math_integer$excl$3 = function(value) {
      var self = this;

      try {
        return self.$Integer(value)
      } catch ($err) {
        if (Opal.rescue($err, [$$($nesting, 'ArgumentError')])) {
          try {
            return self.$raise($type_error(value, $$($nesting, 'Integer')))
          } finally { Opal.pop_exception() }
        } else { throw $err; }
      }
    }, $Math_integer$excl$3.$$arity = 1);
    self.$module_function();
    
    Opal.def(self, '$acos', $Math_acos$4 = function $$acos(x) {
      var self = this;

      return $$($nesting, 'Math').$checked("acos", $$($nesting, 'Math')['$float!'](x))
    }, $Math_acos$4.$$arity = 1);
    if ($truthy((typeof(Math.acosh) !== "undefined"))) {
    } else {
      
      Math.acosh = function(x) {
        return Math.log(x + Math.sqrt(x * x - 1));
      }
    
    };
    
    Opal.def(self, '$acosh', $Math_acosh$5 = function $$acosh(x) {
      var self = this;

      return $$($nesting, 'Math').$checked("acosh", $$($nesting, 'Math')['$float!'](x))
    }, $Math_acosh$5.$$arity = 1);
    
    Opal.def(self, '$asin', $Math_asin$6 = function $$asin(x) {
      var self = this;

      return $$($nesting, 'Math').$checked("asin", $$($nesting, 'Math')['$float!'](x))
    }, $Math_asin$6.$$arity = 1);
    if ($truthy((typeof(Math.asinh) !== "undefined"))) {
    } else {
      
      Math.asinh = function(x) {
        return Math.log(x + Math.sqrt(x * x + 1))
      }
    
    };
    
    Opal.def(self, '$asinh', $Math_asinh$7 = function $$asinh(x) {
      var self = this;

      return $$($nesting, 'Math').$checked("asinh", $$($nesting, 'Math')['$float!'](x))
    }, $Math_asinh$7.$$arity = 1);
    
    Opal.def(self, '$atan', $Math_atan$8 = function $$atan(x) {
      var self = this;

      return $$($nesting, 'Math').$checked("atan", $$($nesting, 'Math')['$float!'](x))
    }, $Math_atan$8.$$arity = 1);
    
    Opal.def(self, '$atan2', $Math_atan2$9 = function $$atan2(y, x) {
      var self = this;

      return $$($nesting, 'Math').$checked("atan2", $$($nesting, 'Math')['$float!'](y), $$($nesting, 'Math')['$float!'](x))
    }, $Math_atan2$9.$$arity = 2);
    if ($truthy((typeof(Math.atanh) !== "undefined"))) {
    } else {
      
      Math.atanh = function(x) {
        return 0.5 * Math.log((1 + x) / (1 - x));
      }
    
    };
    
    Opal.def(self, '$atanh', $Math_atanh$10 = function $$atanh(x) {
      var self = this;

      return $$($nesting, 'Math').$checked("atanh", $$($nesting, 'Math')['$float!'](x))
    }, $Math_atanh$10.$$arity = 1);
    if ($truthy((typeof(Math.cbrt) !== "undefined"))) {
    } else {
      
      Math.cbrt = function(x) {
        if (x == 0) {
          return 0;
        }

        if (x < 0) {
          return -Math.cbrt(-x);
        }

        var r  = x,
            ex = 0;

        while (r < 0.125) {
          r *= 8;
          ex--;
        }

        while (r > 1.0) {
          r *= 0.125;
          ex++;
        }

        r = (-0.46946116 * r + 1.072302) * r + 0.3812513;

        while (ex < 0) {
          r *= 0.5;
          ex++;
        }

        while (ex > 0) {
          r *= 2;
          ex--;
        }

        r = (2.0 / 3.0) * r + (1.0 / 3.0) * x / (r * r);
        r = (2.0 / 3.0) * r + (1.0 / 3.0) * x / (r * r);
        r = (2.0 / 3.0) * r + (1.0 / 3.0) * x / (r * r);
        r = (2.0 / 3.0) * r + (1.0 / 3.0) * x / (r * r);

        return r;
      }
    
    };
    
    Opal.def(self, '$cbrt', $Math_cbrt$11 = function $$cbrt(x) {
      var self = this;

      return $$($nesting, 'Math').$checked("cbrt", $$($nesting, 'Math')['$float!'](x))
    }, $Math_cbrt$11.$$arity = 1);
    
    Opal.def(self, '$cos', $Math_cos$12 = function $$cos(x) {
      var self = this;

      return $$($nesting, 'Math').$checked("cos", $$($nesting, 'Math')['$float!'](x))
    }, $Math_cos$12.$$arity = 1);
    if ($truthy((typeof(Math.cosh) !== "undefined"))) {
    } else {
      
      Math.cosh = function(x) {
        return (Math.exp(x) + Math.exp(-x)) / 2;
      }
    
    };
    
    Opal.def(self, '$cosh', $Math_cosh$13 = function $$cosh(x) {
      var self = this;

      return $$($nesting, 'Math').$checked("cosh", $$($nesting, 'Math')['$float!'](x))
    }, $Math_cosh$13.$$arity = 1);
    if ($truthy((typeof(Math.erf) !== "undefined"))) {
    } else {
      
      Opal.defineProperty(Math, 'erf', function(x) {
        var A1 =  0.254829592,
            A2 = -0.284496736,
            A3 =  1.421413741,
            A4 = -1.453152027,
            A5 =  1.061405429,
            P  =  0.3275911;

        var sign = 1;

        if (x < 0) {
            sign = -1;
        }

        x = Math.abs(x);

        var t = 1.0 / (1.0 + P * x);
        var y = 1.0 - (((((A5 * t + A4) * t) + A3) * t + A2) * t + A1) * t * Math.exp(-x * x);

        return sign * y;
      });
    
    };
    
    Opal.def(self, '$erf', $Math_erf$14 = function $$erf(x) {
      var self = this;

      return $$($nesting, 'Math').$checked("erf", $$($nesting, 'Math')['$float!'](x))
    }, $Math_erf$14.$$arity = 1);
    if ($truthy((typeof(Math.erfc) !== "undefined"))) {
    } else {
      
      Opal.defineProperty(Math, 'erfc', function(x) {
        var z = Math.abs(x),
            t = 1.0 / (0.5 * z + 1.0);

        var A1 = t * 0.17087277 + -0.82215223,
            A2 = t * A1 + 1.48851587,
            A3 = t * A2 + -1.13520398,
            A4 = t * A3 + 0.27886807,
            A5 = t * A4 + -0.18628806,
            A6 = t * A5 + 0.09678418,
            A7 = t * A6 + 0.37409196,
            A8 = t * A7 + 1.00002368,
            A9 = t * A8,
            A10 = -z * z - 1.26551223 + A9;

        var a = t * Math.exp(A10);

        if (x < 0.0) {
          return 2.0 - a;
        }
        else {
          return a;
        }
      });
    
    };
    
    Opal.def(self, '$erfc', $Math_erfc$15 = function $$erfc(x) {
      var self = this;

      return $$($nesting, 'Math').$checked("erfc", $$($nesting, 'Math')['$float!'](x))
    }, $Math_erfc$15.$$arity = 1);
    
    Opal.def(self, '$exp', $Math_exp$16 = function $$exp(x) {
      var self = this;

      return $$($nesting, 'Math').$checked("exp", $$($nesting, 'Math')['$float!'](x))
    }, $Math_exp$16.$$arity = 1);
    
    Opal.def(self, '$frexp', $Math_frexp$17 = function $$frexp(x) {
      var self = this;

      
      x = $$($nesting, 'Math')['$float!'](x);
      
      if (isNaN(x)) {
        return [NaN, 0];
      }

      var ex   = Math.floor(Math.log(Math.abs(x)) / Math.log(2)) + 1,
          frac = x / Math.pow(2, ex);

      return [frac, ex];
    ;
    }, $Math_frexp$17.$$arity = 1);
    
    Opal.def(self, '$gamma', $Math_gamma$18 = function $$gamma(n) {
      var self = this;

      
      n = $$($nesting, 'Math')['$float!'](n);
      
      var i, t, x, value, result, twoN, threeN, fourN, fiveN;

      var G = 4.7421875;

      var P = [
         0.99999999999999709182,
         57.156235665862923517,
        -59.597960355475491248,
         14.136097974741747174,
        -0.49191381609762019978,
         0.33994649984811888699e-4,
         0.46523628927048575665e-4,
        -0.98374475304879564677e-4,
         0.15808870322491248884e-3,
        -0.21026444172410488319e-3,
         0.21743961811521264320e-3,
        -0.16431810653676389022e-3,
         0.84418223983852743293e-4,
        -0.26190838401581408670e-4,
         0.36899182659531622704e-5
      ];


      if (isNaN(n)) {
        return NaN;
      }

      if (n === 0 && 1 / n < 0) {
        return -Infinity;
      }

      if (n === -1 || n === -Infinity) {
        self.$raise($$($nesting, 'DomainError'), "Numerical argument is out of domain - \"gamma\"");
      }

      if ($$($nesting, 'Integer')['$==='](n)) {
        if (n <= 0) {
          return isFinite(n) ? Infinity : NaN;
        }

        if (n > 171) {
          return Infinity;
        }

        value  = n - 2;
        result = n - 1;

        while (value > 1) {
          result *= value;
          value--;
        }

        if (result == 0) {
          result = 1;
        }

        return result;
      }

      if (n < 0.5) {
        return Math.PI / (Math.sin(Math.PI * n) * $$($nesting, 'Math').$gamma($rb_minus(1, n)));
      }

      if (n >= 171.35) {
        return Infinity;
      }

      if (n > 85.0) {
        twoN   = n * n;
        threeN = twoN * n;
        fourN  = threeN * n;
        fiveN  = fourN * n;

        return Math.sqrt(2 * Math.PI / n) * Math.pow((n / Math.E), n) *
          (1 + 1 / (12 * n) + 1 / (288 * twoN) - 139 / (51840 * threeN) -
          571 / (2488320 * fourN) + 163879 / (209018880 * fiveN) +
          5246819 / (75246796800 * fiveN * n));
      }

      n -= 1;
      x  = P[0];

      for (i = 1; i < P.length; ++i) {
        x += P[i] / (n + i);
      }

      t = n + G + 0.5;

      return Math.sqrt(2 * Math.PI) * Math.pow(t, n + 0.5) * Math.exp(-t) * x;
    ;
    }, $Math_gamma$18.$$arity = 1);
    if ($truthy((typeof(Math.hypot) !== "undefined"))) {
    } else {
      
      Math.hypot = function(x, y) {
        return Math.sqrt(x * x + y * y)
      }
    
    };
    
    Opal.def(self, '$hypot', $Math_hypot$19 = function $$hypot(x, y) {
      var self = this;

      return $$($nesting, 'Math').$checked("hypot", $$($nesting, 'Math')['$float!'](x), $$($nesting, 'Math')['$float!'](y))
    }, $Math_hypot$19.$$arity = 2);
    
    Opal.def(self, '$ldexp', $Math_ldexp$20 = function $$ldexp(mantissa, exponent) {
      var self = this;

      
      mantissa = $$($nesting, 'Math')['$float!'](mantissa);
      exponent = $$($nesting, 'Math')['$integer!'](exponent);
      
      if (isNaN(exponent)) {
        self.$raise($$($nesting, 'RangeError'), "float NaN out of range of integer");
      }

      return mantissa * Math.pow(2, exponent);
    ;
    }, $Math_ldexp$20.$$arity = 2);
    
    Opal.def(self, '$lgamma', $Math_lgamma$21 = function $$lgamma(n) {
      var self = this;

      
      if (n == -1) {
        return [Infinity, 1];
      }
      else {
        return [Math.log(Math.abs($$($nesting, 'Math').$gamma(n))), $$($nesting, 'Math').$gamma(n) < 0 ? -1 : 1];
      }
    
    }, $Math_lgamma$21.$$arity = 1);
    
    Opal.def(self, '$log', $Math_log$22 = function $$log(x, base) {
      var self = this;

      
      ;
      if ($truthy($$($nesting, 'String')['$==='](x))) {
        self.$raise($type_error(x, $$($nesting, 'Float')))};
      if ($truthy(base == null)) {
        return $$($nesting, 'Math').$checked("log", $$($nesting, 'Math')['$float!'](x))
      } else {
        
        if ($truthy($$($nesting, 'String')['$==='](base))) {
          self.$raise($type_error(base, $$($nesting, 'Float')))};
        return $rb_divide($$($nesting, 'Math').$checked("log", $$($nesting, 'Math')['$float!'](x)), $$($nesting, 'Math').$checked("log", $$($nesting, 'Math')['$float!'](base)));
      };
    }, $Math_log$22.$$arity = -2);
    if ($truthy((typeof(Math.log10) !== "undefined"))) {
    } else {
      
      Math.log10 = function(x) {
        return Math.log(x) / Math.LN10;
      }
    
    };
    
    Opal.def(self, '$log10', $Math_log10$23 = function $$log10(x) {
      var self = this;

      
      if ($truthy($$($nesting, 'String')['$==='](x))) {
        self.$raise($type_error(x, $$($nesting, 'Float')))};
      return $$($nesting, 'Math').$checked("log10", $$($nesting, 'Math')['$float!'](x));
    }, $Math_log10$23.$$arity = 1);
    if ($truthy((typeof(Math.log2) !== "undefined"))) {
    } else {
      
      Math.log2 = function(x) {
        return Math.log(x) / Math.LN2;
      }
    
    };
    
    Opal.def(self, '$log2', $Math_log2$24 = function $$log2(x) {
      var self = this;

      
      if ($truthy($$($nesting, 'String')['$==='](x))) {
        self.$raise($type_error(x, $$($nesting, 'Float')))};
      return $$($nesting, 'Math').$checked("log2", $$($nesting, 'Math')['$float!'](x));
    }, $Math_log2$24.$$arity = 1);
    
    Opal.def(self, '$sin', $Math_sin$25 = function $$sin(x) {
      var self = this;

      return $$($nesting, 'Math').$checked("sin", $$($nesting, 'Math')['$float!'](x))
    }, $Math_sin$25.$$arity = 1);
    if ($truthy((typeof(Math.sinh) !== "undefined"))) {
    } else {
      
      Math.sinh = function(x) {
        return (Math.exp(x) - Math.exp(-x)) / 2;
      }
    
    };
    
    Opal.def(self, '$sinh', $Math_sinh$26 = function $$sinh(x) {
      var self = this;

      return $$($nesting, 'Math').$checked("sinh", $$($nesting, 'Math')['$float!'](x))
    }, $Math_sinh$26.$$arity = 1);
    
    Opal.def(self, '$sqrt', $Math_sqrt$27 = function $$sqrt(x) {
      var self = this;

      return $$($nesting, 'Math').$checked("sqrt", $$($nesting, 'Math')['$float!'](x))
    }, $Math_sqrt$27.$$arity = 1);
    
    Opal.def(self, '$tan', $Math_tan$28 = function $$tan(x) {
      var self = this;

      
      x = $$($nesting, 'Math')['$float!'](x);
      if ($truthy(x['$infinite?']())) {
        return $$$($$($nesting, 'Float'), 'NAN')};
      return $$($nesting, 'Math').$checked("tan", $$($nesting, 'Math')['$float!'](x));
    }, $Math_tan$28.$$arity = 1);
    if ($truthy((typeof(Math.tanh) !== "undefined"))) {
    } else {
      
      Math.tanh = function(x) {
        if (x == Infinity) {
          return 1;
        }
        else if (x == -Infinity) {
          return -1;
        }
        else {
          return (Math.exp(x) - Math.exp(-x)) / (Math.exp(x) + Math.exp(-x));
        }
      }
    
    };
    
    Opal.def(self, '$tanh', $Math_tanh$29 = function $$tanh(x) {
      var self = this;

      return $$($nesting, 'Math').$checked("tanh", $$($nesting, 'Math')['$float!'](x))
    }, $Math_tanh$29.$$arity = 1);
  })($nesting[0], $nesting)
};

/* Generated by Opal 1.0.0 */
Opal.modules["corelib/complex"] = function(Opal) {
  function $rb_times(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs * rhs : lhs['$*'](rhs);
  }
  function $rb_plus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs + rhs : lhs['$+'](rhs);
  }
  function $rb_minus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs - rhs : lhs['$-'](rhs);
  }
  function $rb_divide(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs / rhs : lhs['$/'](rhs);
  }
  function $rb_gt(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs > rhs : lhs['$>'](rhs);
  }
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.$$$, $$ = Opal.$$, $klass = Opal.klass, $truthy = Opal.truthy, $module = Opal.module;

  Opal.add_stubs(['$require', '$===', '$real?', '$raise', '$new', '$*', '$cos', '$sin', '$attr_reader', '$class', '$==', '$real', '$imag', '$Complex', '$-@', '$+', '$__coerced__', '$-', '$nan?', '$/', '$conj', '$abs2', '$quo', '$polar', '$exp', '$log', '$>', '$!=', '$divmod', '$**', '$hypot', '$atan2', '$lcm', '$denominator', '$finite?', '$infinite?', '$numerator', '$abs', '$arg', '$rationalize', '$to_f', '$to_i', '$to_r', '$inspect', '$positive?', '$zero?', '$Rational']);
  
  self.$require("corelib/numeric");
  (function($base, $super, $parent_nesting) {
    var self = $klass($base, $super, 'Complex');

    var $nesting = [self].concat($parent_nesting), $Complex_rect$1, $Complex_polar$2, $Complex_initialize$3, $Complex_coerce$4, $Complex_$eq_eq$5, $Complex_$minus$$6, $Complex_$plus$7, $Complex_$minus$8, $Complex_$$9, $Complex_$slash$10, $Complex_$$$11, $Complex_abs$12, $Complex_abs2$13, $Complex_angle$14, $Complex_conj$15, $Complex_denominator$16, $Complex_eql$ques$17, $Complex_fdiv$18, $Complex_finite$ques$19, $Complex_hash$20, $Complex_infinite$ques$21, $Complex_inspect$22, $Complex_numerator$23, $Complex_polar$24, $Complex_rationalize$25, $Complex_real$ques$26, $Complex_rect$27, $Complex_to_f$28, $Complex_to_i$29, $Complex_to_r$30, $Complex_to_s$31;

    self.$$prototype.real = self.$$prototype.imag = nil;
    
    Opal.defs(self, '$rect', $Complex_rect$1 = function $$rect(real, imag) {
      var $a, $b, $c, self = this;

      
      
      if (imag == null) {
        imag = 0;
      };
      if ($truthy(($truthy($a = ($truthy($b = ($truthy($c = $$($nesting, 'Numeric')['$==='](real)) ? real['$real?']() : $c)) ? $$($nesting, 'Numeric')['$==='](imag) : $b)) ? imag['$real?']() : $a))) {
      } else {
        self.$raise($$($nesting, 'TypeError'), "not a real")
      };
      return self.$new(real, imag);
    }, $Complex_rect$1.$$arity = -2);
    (function(self, $parent_nesting) {
      var $nesting = [self].concat($parent_nesting);

      return Opal.alias(self, "rectangular", "rect")
    })(Opal.get_singleton_class(self), $nesting);
    Opal.defs(self, '$polar', $Complex_polar$2 = function $$polar(r, theta) {
      var $a, $b, $c, self = this;

      
      
      if (theta == null) {
        theta = 0;
      };
      if ($truthy(($truthy($a = ($truthy($b = ($truthy($c = $$($nesting, 'Numeric')['$==='](r)) ? r['$real?']() : $c)) ? $$($nesting, 'Numeric')['$==='](theta) : $b)) ? theta['$real?']() : $a))) {
      } else {
        self.$raise($$($nesting, 'TypeError'), "not a real")
      };
      return self.$new($rb_times(r, $$($nesting, 'Math').$cos(theta)), $rb_times(r, $$($nesting, 'Math').$sin(theta)));
    }, $Complex_polar$2.$$arity = -2);
    self.$attr_reader("real", "imag");
    
    Opal.def(self, '$initialize', $Complex_initialize$3 = function $$initialize(real, imag) {
      var self = this;

      
      
      if (imag == null) {
        imag = 0;
      };
      self.real = real;
      return (self.imag = imag);
    }, $Complex_initialize$3.$$arity = -2);
    
    Opal.def(self, '$coerce', $Complex_coerce$4 = function $$coerce(other) {
      var $a, self = this;

      if ($truthy($$($nesting, 'Complex')['$==='](other))) {
        return [other, self]
      } else if ($truthy(($truthy($a = $$($nesting, 'Numeric')['$==='](other)) ? other['$real?']() : $a))) {
        return [$$($nesting, 'Complex').$new(other, 0), self]
      } else {
        return self.$raise($$($nesting, 'TypeError'), "" + (other.$class()) + " can't be coerced into Complex")
      }
    }, $Complex_coerce$4.$$arity = 1);
    
    Opal.def(self, '$==', $Complex_$eq_eq$5 = function(other) {
      var $a, self = this;

      if ($truthy($$($nesting, 'Complex')['$==='](other))) {
        return (($a = self.real['$=='](other.$real())) ? self.imag['$=='](other.$imag()) : self.real['$=='](other.$real()))
      } else if ($truthy(($truthy($a = $$($nesting, 'Numeric')['$==='](other)) ? other['$real?']() : $a))) {
        return (($a = self.real['$=='](other)) ? self.imag['$=='](0) : self.real['$=='](other))
      } else {
        return other['$=='](self)
      }
    }, $Complex_$eq_eq$5.$$arity = 1);
    
    Opal.def(self, '$-@', $Complex_$minus$$6 = function() {
      var self = this;

      return self.$Complex(self.real['$-@'](), self.imag['$-@']())
    }, $Complex_$minus$$6.$$arity = 0);
    
    Opal.def(self, '$+', $Complex_$plus$7 = function(other) {
      var $a, self = this;

      if ($truthy($$($nesting, 'Complex')['$==='](other))) {
        return self.$Complex($rb_plus(self.real, other.$real()), $rb_plus(self.imag, other.$imag()))
      } else if ($truthy(($truthy($a = $$($nesting, 'Numeric')['$==='](other)) ? other['$real?']() : $a))) {
        return self.$Complex($rb_plus(self.real, other), self.imag)
      } else {
        return self.$__coerced__("+", other)
      }
    }, $Complex_$plus$7.$$arity = 1);
    
    Opal.def(self, '$-', $Complex_$minus$8 = function(other) {
      var $a, self = this;

      if ($truthy($$($nesting, 'Complex')['$==='](other))) {
        return self.$Complex($rb_minus(self.real, other.$real()), $rb_minus(self.imag, other.$imag()))
      } else if ($truthy(($truthy($a = $$($nesting, 'Numeric')['$==='](other)) ? other['$real?']() : $a))) {
        return self.$Complex($rb_minus(self.real, other), self.imag)
      } else {
        return self.$__coerced__("-", other)
      }
    }, $Complex_$minus$8.$$arity = 1);
    
    Opal.def(self, '$*', $Complex_$$9 = function(other) {
      var $a, self = this;

      if ($truthy($$($nesting, 'Complex')['$==='](other))) {
        return self.$Complex($rb_minus($rb_times(self.real, other.$real()), $rb_times(self.imag, other.$imag())), $rb_plus($rb_times(self.real, other.$imag()), $rb_times(self.imag, other.$real())))
      } else if ($truthy(($truthy($a = $$($nesting, 'Numeric')['$==='](other)) ? other['$real?']() : $a))) {
        return self.$Complex($rb_times(self.real, other), $rb_times(self.imag, other))
      } else {
        return self.$__coerced__("*", other)
      }
    }, $Complex_$$9.$$arity = 1);
    
    Opal.def(self, '$/', $Complex_$slash$10 = function(other) {
      var $a, $b, $c, $d, self = this;

      if ($truthy($$($nesting, 'Complex')['$==='](other))) {
        if ($truthy(($truthy($a = ($truthy($b = ($truthy($c = ($truthy($d = $$($nesting, 'Number')['$==='](self.real)) ? self.real['$nan?']() : $d)) ? $c : ($truthy($d = $$($nesting, 'Number')['$==='](self.imag)) ? self.imag['$nan?']() : $d))) ? $b : ($truthy($c = $$($nesting, 'Number')['$==='](other.$real())) ? other.$real()['$nan?']() : $c))) ? $a : ($truthy($b = $$($nesting, 'Number')['$==='](other.$imag())) ? other.$imag()['$nan?']() : $b)))) {
          return $$($nesting, 'Complex').$new($$$($$($nesting, 'Float'), 'NAN'), $$$($$($nesting, 'Float'), 'NAN'))
        } else {
          return $rb_divide($rb_times(self, other.$conj()), other.$abs2())
        }
      } else if ($truthy(($truthy($a = $$($nesting, 'Numeric')['$==='](other)) ? other['$real?']() : $a))) {
        return self.$Complex(self.real.$quo(other), self.imag.$quo(other))
      } else {
        return self.$__coerced__("/", other)
      }
    }, $Complex_$slash$10.$$arity = 1);
    
    Opal.def(self, '$**', $Complex_$$$11 = function(other) {
      var $a, $b, $c, $d, self = this, r = nil, theta = nil, ore = nil, oim = nil, nr = nil, ntheta = nil, x = nil, z = nil, n = nil, div = nil, mod = nil;

      
      if (other['$=='](0)) {
        return $$($nesting, 'Complex').$new(1, 0)};
      if ($truthy($$($nesting, 'Complex')['$==='](other))) {
        
        $b = self.$polar(), $a = Opal.to_ary($b), (r = ($a[0] == null ? nil : $a[0])), (theta = ($a[1] == null ? nil : $a[1])), $b;
        ore = other.$real();
        oim = other.$imag();
        nr = $$($nesting, 'Math').$exp($rb_minus($rb_times(ore, $$($nesting, 'Math').$log(r)), $rb_times(oim, theta)));
        ntheta = $rb_plus($rb_times(theta, ore), $rb_times(oim, $$($nesting, 'Math').$log(r)));
        return $$($nesting, 'Complex').$polar(nr, ntheta);
      } else if ($truthy($$($nesting, 'Integer')['$==='](other))) {
        if ($truthy($rb_gt(other, 0))) {
          
          x = self;
          z = x;
          n = $rb_minus(other, 1);
          while ($truthy(n['$!='](0))) {
            
            $c = n.$divmod(2), $b = Opal.to_ary($c), (div = ($b[0] == null ? nil : $b[0])), (mod = ($b[1] == null ? nil : $b[1])), $c;
            while (mod['$=='](0)) {
              
              x = self.$Complex($rb_minus($rb_times(x.$real(), x.$real()), $rb_times(x.$imag(), x.$imag())), $rb_times($rb_times(2, x.$real()), x.$imag()));
              n = div;
              $d = n.$divmod(2), $c = Opal.to_ary($d), (div = ($c[0] == null ? nil : $c[0])), (mod = ($c[1] == null ? nil : $c[1])), $d;
            };
            z = $rb_times(z, x);
            n = $rb_minus(n, 1);
          };
          return z;
        } else {
          return $rb_divide($$($nesting, 'Rational').$new(1, 1), self)['$**'](other['$-@']())
        }
      } else if ($truthy(($truthy($a = $$($nesting, 'Float')['$==='](other)) ? $a : $$($nesting, 'Rational')['$==='](other)))) {
        
        $b = self.$polar(), $a = Opal.to_ary($b), (r = ($a[0] == null ? nil : $a[0])), (theta = ($a[1] == null ? nil : $a[1])), $b;
        return $$($nesting, 'Complex').$polar(r['$**'](other), $rb_times(theta, other));
      } else {
        return self.$__coerced__("**", other)
      };
    }, $Complex_$$$11.$$arity = 1);
    
    Opal.def(self, '$abs', $Complex_abs$12 = function $$abs() {
      var self = this;

      return $$($nesting, 'Math').$hypot(self.real, self.imag)
    }, $Complex_abs$12.$$arity = 0);
    
    Opal.def(self, '$abs2', $Complex_abs2$13 = function $$abs2() {
      var self = this;

      return $rb_plus($rb_times(self.real, self.real), $rb_times(self.imag, self.imag))
    }, $Complex_abs2$13.$$arity = 0);
    
    Opal.def(self, '$angle', $Complex_angle$14 = function $$angle() {
      var self = this;

      return $$($nesting, 'Math').$atan2(self.imag, self.real)
    }, $Complex_angle$14.$$arity = 0);
    Opal.alias(self, "arg", "angle");
    
    Opal.def(self, '$conj', $Complex_conj$15 = function $$conj() {
      var self = this;

      return self.$Complex(self.real, self.imag['$-@']())
    }, $Complex_conj$15.$$arity = 0);
    Opal.alias(self, "conjugate", "conj");
    
    Opal.def(self, '$denominator', $Complex_denominator$16 = function $$denominator() {
      var self = this;

      return self.real.$denominator().$lcm(self.imag.$denominator())
    }, $Complex_denominator$16.$$arity = 0);
    Opal.alias(self, "divide", "/");
    
    Opal.def(self, '$eql?', $Complex_eql$ques$17 = function(other) {
      var $a, $b, self = this;

      return ($truthy($a = ($truthy($b = $$($nesting, 'Complex')['$==='](other)) ? self.real.$class()['$=='](self.imag.$class()) : $b)) ? self['$=='](other) : $a)
    }, $Complex_eql$ques$17.$$arity = 1);
    
    Opal.def(self, '$fdiv', $Complex_fdiv$18 = function $$fdiv(other) {
      var self = this;

      
      if ($truthy($$($nesting, 'Numeric')['$==='](other))) {
      } else {
        self.$raise($$($nesting, 'TypeError'), "" + (other.$class()) + " can't be coerced into Complex")
      };
      return $rb_divide(self, other);
    }, $Complex_fdiv$18.$$arity = 1);
    
    Opal.def(self, '$finite?', $Complex_finite$ques$19 = function() {
      var $a, self = this;

      return ($truthy($a = self.real['$finite?']()) ? self.imag['$finite?']() : $a)
    }, $Complex_finite$ques$19.$$arity = 0);
    
    Opal.def(self, '$hash', $Complex_hash$20 = function $$hash() {
      var self = this;

      return "" + "Complex:" + (self.real) + ":" + (self.imag)
    }, $Complex_hash$20.$$arity = 0);
    Opal.alias(self, "imaginary", "imag");
    
    Opal.def(self, '$infinite?', $Complex_infinite$ques$21 = function() {
      var $a, self = this;

      return ($truthy($a = self.real['$infinite?']()) ? $a : self.imag['$infinite?']())
    }, $Complex_infinite$ques$21.$$arity = 0);
    
    Opal.def(self, '$inspect', $Complex_inspect$22 = function $$inspect() {
      var self = this;

      return "" + "(" + (self) + ")"
    }, $Complex_inspect$22.$$arity = 0);
    Opal.alias(self, "magnitude", "abs");
    
    Opal.udef(self, '$' + "negative?");;
    
    Opal.def(self, '$numerator', $Complex_numerator$23 = function $$numerator() {
      var self = this, d = nil;

      
      d = self.$denominator();
      return self.$Complex($rb_times(self.real.$numerator(), $rb_divide(d, self.real.$denominator())), $rb_times(self.imag.$numerator(), $rb_divide(d, self.imag.$denominator())));
    }, $Complex_numerator$23.$$arity = 0);
    Opal.alias(self, "phase", "arg");
    
    Opal.def(self, '$polar', $Complex_polar$24 = function $$polar() {
      var self = this;

      return [self.$abs(), self.$arg()]
    }, $Complex_polar$24.$$arity = 0);
    
    Opal.udef(self, '$' + "positive?");;
    Opal.alias(self, "quo", "/");
    
    Opal.def(self, '$rationalize', $Complex_rationalize$25 = function $$rationalize(eps) {
      var self = this;

      
      ;
      
      if (arguments.length > 1) {
        self.$raise($$($nesting, 'ArgumentError'), "" + "wrong number of arguments (" + (arguments.length) + " for 0..1)");
      }
    ;
      if ($truthy(self.imag['$!='](0))) {
        self.$raise($$($nesting, 'RangeError'), "" + "can't' convert " + (self) + " into Rational")};
      return self.$real().$rationalize(eps);
    }, $Complex_rationalize$25.$$arity = -1);
    
    Opal.def(self, '$real?', $Complex_real$ques$26 = function() {
      var self = this;

      return false
    }, $Complex_real$ques$26.$$arity = 0);
    
    Opal.def(self, '$rect', $Complex_rect$27 = function $$rect() {
      var self = this;

      return [self.real, self.imag]
    }, $Complex_rect$27.$$arity = 0);
    Opal.alias(self, "rectangular", "rect");
    
    Opal.def(self, '$to_f', $Complex_to_f$28 = function $$to_f() {
      var self = this;

      
      if (self.imag['$=='](0)) {
      } else {
        self.$raise($$($nesting, 'RangeError'), "" + "can't convert " + (self) + " into Float")
      };
      return self.real.$to_f();
    }, $Complex_to_f$28.$$arity = 0);
    
    Opal.def(self, '$to_i', $Complex_to_i$29 = function $$to_i() {
      var self = this;

      
      if (self.imag['$=='](0)) {
      } else {
        self.$raise($$($nesting, 'RangeError'), "" + "can't convert " + (self) + " into Integer")
      };
      return self.real.$to_i();
    }, $Complex_to_i$29.$$arity = 0);
    
    Opal.def(self, '$to_r', $Complex_to_r$30 = function $$to_r() {
      var self = this;

      
      if (self.imag['$=='](0)) {
      } else {
        self.$raise($$($nesting, 'RangeError'), "" + "can't convert " + (self) + " into Rational")
      };
      return self.real.$to_r();
    }, $Complex_to_r$30.$$arity = 0);
    
    Opal.def(self, '$to_s', $Complex_to_s$31 = function $$to_s() {
      var $a, $b, $c, self = this, result = nil;

      
      result = self.real.$inspect();
      result = $rb_plus(result, (function() {if ($truthy(($truthy($a = ($truthy($b = ($truthy($c = $$($nesting, 'Number')['$==='](self.imag)) ? self.imag['$nan?']() : $c)) ? $b : self.imag['$positive?']())) ? $a : self.imag['$zero?']()))) {
        return "+"
      } else {
        return "-"
      }; return nil; })());
      result = $rb_plus(result, self.imag.$abs().$inspect());
      if ($truthy(($truthy($a = $$($nesting, 'Number')['$==='](self.imag)) ? ($truthy($b = self.imag['$nan?']()) ? $b : self.imag['$infinite?']()) : $a))) {
        result = $rb_plus(result, "*")};
      return $rb_plus(result, "i");
    }, $Complex_to_s$31.$$arity = 0);
    return Opal.const_set($nesting[0], 'I', self.$new(0, 1));
  })($nesting[0], $$($nesting, 'Numeric'), $nesting);
  (function($base, $parent_nesting) {
    var self = $module($base, 'Kernel');

    var $nesting = [self].concat($parent_nesting), $Kernel_Complex$32;

    
    Opal.def(self, '$Complex', $Kernel_Complex$32 = function $$Complex(real, imag) {
      var self = this;

      
      
      if (imag == null) {
        imag = nil;
      };
      if ($truthy(imag)) {
        return $$($nesting, 'Complex').$new(real, imag)
      } else {
        return $$($nesting, 'Complex').$new(real, 0)
      };
    }, $Kernel_Complex$32.$$arity = -2)
  })($nesting[0], $nesting);
  return (function($base, $super, $parent_nesting) {
    var self = $klass($base, $super, 'String');

    var $nesting = [self].concat($parent_nesting), $String_to_c$33;

    return (Opal.def(self, '$to_c', $String_to_c$33 = function $$to_c() {
      var self = this;

      
      var str = self,
          re = /[+-]?[\d_]+(\.[\d_]+)?(e\d+)?/,
          match = str.match(re),
          real, imag, denominator;

      function isFloat() {
        return re.test(str);
      }

      function cutFloat() {
        var match = str.match(re);
        var number = match[0];
        str = str.slice(number.length);
        return number.replace(/_/g, '');
      }

      // handles both floats and rationals
      function cutNumber() {
        if (isFloat()) {
          var numerator = parseFloat(cutFloat());

          if (str[0] === '/') {
            // rational real part
            str = str.slice(1);

            if (isFloat()) {
              var denominator = parseFloat(cutFloat());
              return self.$Rational(numerator, denominator);
            } else {
              // reverting '/'
              str = '/' + str;
              return numerator;
            }
          } else {
            // float real part, no denominator
            return numerator;
          }
        } else {
          return null;
        }
      }

      real = cutNumber();

      if (!real) {
        if (str[0] === 'i') {
          // i => Complex(0, 1)
          return self.$Complex(0, 1);
        }
        if (str[0] === '-' && str[1] === 'i') {
          // -i => Complex(0, -1)
          return self.$Complex(0, -1);
        }
        if (str[0] === '+' && str[1] === 'i') {
          // +i => Complex(0, 1)
          return self.$Complex(0, 1);
        }
        // anything => Complex(0, 0)
        return self.$Complex(0, 0);
      }

      imag = cutNumber();
      if (!imag) {
        if (str[0] === 'i') {
          // 3i => Complex(0, 3)
          return self.$Complex(0, real);
        } else {
          // 3 => Complex(3, 0)
          return self.$Complex(real, 0);
        }
      } else {
        // 3+2i => Complex(3, 2)
        return self.$Complex(real, imag);
      }
    
    }, $String_to_c$33.$$arity = 0), nil) && 'to_c'
  })($nesting[0], null, $nesting);
};

/* Generated by Opal 1.0.0 */
Opal.modules["corelib/rational"] = function(Opal) {
  function $rb_lt(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs < rhs : lhs['$<'](rhs);
  }
  function $rb_divide(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs / rhs : lhs['$/'](rhs);
  }
  function $rb_minus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs - rhs : lhs['$-'](rhs);
  }
  function $rb_times(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs * rhs : lhs['$*'](rhs);
  }
  function $rb_plus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs + rhs : lhs['$+'](rhs);
  }
  function $rb_gt(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs > rhs : lhs['$>'](rhs);
  }
  function $rb_le(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs <= rhs : lhs['$<='](rhs);
  }
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.$$$, $$ = Opal.$$, $klass = Opal.klass, $truthy = Opal.truthy, $module = Opal.module;

  Opal.add_stubs(['$require', '$to_i', '$==', '$raise', '$<', '$-@', '$new', '$gcd', '$/', '$nil?', '$===', '$reduce', '$to_r', '$equal?', '$!', '$coerce_to!', '$to_f', '$numerator', '$denominator', '$<=>', '$-', '$*', '$__coerced__', '$+', '$Rational', '$>', '$**', '$abs', '$ceil', '$with_precision', '$floor', '$<=', '$truncate', '$send', '$convert']);
  
  self.$require("corelib/numeric");
  (function($base, $super, $parent_nesting) {
    var self = $klass($base, $super, 'Rational');

    var $nesting = [self].concat($parent_nesting), $Rational_reduce$1, $Rational_convert$2, $Rational_initialize$3, $Rational_numerator$4, $Rational_denominator$5, $Rational_coerce$6, $Rational_$eq_eq$7, $Rational_$lt_eq_gt$8, $Rational_$plus$9, $Rational_$minus$10, $Rational_$$11, $Rational_$slash$12, $Rational_$$$13, $Rational_abs$14, $Rational_ceil$15, $Rational_floor$16, $Rational_hash$17, $Rational_inspect$18, $Rational_rationalize$19, $Rational_round$20, $Rational_to_f$21, $Rational_to_i$22, $Rational_to_r$23, $Rational_to_s$24, $Rational_truncate$25, $Rational_with_precision$26;

    self.$$prototype.num = self.$$prototype.den = nil;
    
    Opal.defs(self, '$reduce', $Rational_reduce$1 = function $$reduce(num, den) {
      var self = this, gcd = nil;

      
      num = num.$to_i();
      den = den.$to_i();
      if (den['$=='](0)) {
        self.$raise($$($nesting, 'ZeroDivisionError'), "divided by 0")
      } else if ($truthy($rb_lt(den, 0))) {
        
        num = num['$-@']();
        den = den['$-@']();
      } else if (den['$=='](1)) {
        return self.$new(num, den)};
      gcd = num.$gcd(den);
      return self.$new($rb_divide(num, gcd), $rb_divide(den, gcd));
    }, $Rational_reduce$1.$$arity = 2);
    Opal.defs(self, '$convert', $Rational_convert$2 = function $$convert(num, den) {
      var $a, $b, self = this;

      
      if ($truthy(($truthy($a = num['$nil?']()) ? $a : den['$nil?']()))) {
        self.$raise($$($nesting, 'TypeError'), "cannot convert nil into Rational")};
      if ($truthy(($truthy($a = $$($nesting, 'Integer')['$==='](num)) ? $$($nesting, 'Integer')['$==='](den) : $a))) {
        return self.$reduce(num, den)};
      if ($truthy(($truthy($a = ($truthy($b = $$($nesting, 'Float')['$==='](num)) ? $b : $$($nesting, 'String')['$==='](num))) ? $a : $$($nesting, 'Complex')['$==='](num)))) {
        num = num.$to_r()};
      if ($truthy(($truthy($a = ($truthy($b = $$($nesting, 'Float')['$==='](den)) ? $b : $$($nesting, 'String')['$==='](den))) ? $a : $$($nesting, 'Complex')['$==='](den)))) {
        den = den.$to_r()};
      if ($truthy(($truthy($a = den['$equal?'](1)) ? $$($nesting, 'Integer')['$==='](num)['$!']() : $a))) {
        return $$($nesting, 'Opal')['$coerce_to!'](num, $$($nesting, 'Rational'), "to_r")
      } else if ($truthy(($truthy($a = $$($nesting, 'Numeric')['$==='](num)) ? $$($nesting, 'Numeric')['$==='](den) : $a))) {
        return $rb_divide(num, den)
      } else {
        return self.$reduce(num, den)
      };
    }, $Rational_convert$2.$$arity = 2);
    
    Opal.def(self, '$initialize', $Rational_initialize$3 = function $$initialize(num, den) {
      var self = this;

      
      self.num = num;
      return (self.den = den);
    }, $Rational_initialize$3.$$arity = 2);
    
    Opal.def(self, '$numerator', $Rational_numerator$4 = function $$numerator() {
      var self = this;

      return self.num
    }, $Rational_numerator$4.$$arity = 0);
    
    Opal.def(self, '$denominator', $Rational_denominator$5 = function $$denominator() {
      var self = this;

      return self.den
    }, $Rational_denominator$5.$$arity = 0);
    
    Opal.def(self, '$coerce', $Rational_coerce$6 = function $$coerce(other) {
      var self = this, $case = nil;

      return (function() {$case = other;
      if ($$($nesting, 'Rational')['$===']($case)) {return [other, self]}
      else if ($$($nesting, 'Integer')['$===']($case)) {return [other.$to_r(), self]}
      else if ($$($nesting, 'Float')['$===']($case)) {return [other, self.$to_f()]}
      else { return nil }})()
    }, $Rational_coerce$6.$$arity = 1);
    
    Opal.def(self, '$==', $Rational_$eq_eq$7 = function(other) {
      var $a, self = this, $case = nil;

      return (function() {$case = other;
      if ($$($nesting, 'Rational')['$===']($case)) {return (($a = self.num['$=='](other.$numerator())) ? self.den['$=='](other.$denominator()) : self.num['$=='](other.$numerator()))}
      else if ($$($nesting, 'Integer')['$===']($case)) {return (($a = self.num['$=='](other)) ? self.den['$=='](1) : self.num['$=='](other))}
      else if ($$($nesting, 'Float')['$===']($case)) {return self.$to_f()['$=='](other)}
      else {return other['$=='](self)}})()
    }, $Rational_$eq_eq$7.$$arity = 1);
    
    Opal.def(self, '$<=>', $Rational_$lt_eq_gt$8 = function(other) {
      var self = this, $case = nil;

      return (function() {$case = other;
      if ($$($nesting, 'Rational')['$===']($case)) {return $rb_minus($rb_times(self.num, other.$denominator()), $rb_times(self.den, other.$numerator()))['$<=>'](0)}
      else if ($$($nesting, 'Integer')['$===']($case)) {return $rb_minus(self.num, $rb_times(self.den, other))['$<=>'](0)}
      else if ($$($nesting, 'Float')['$===']($case)) {return self.$to_f()['$<=>'](other)}
      else {return self.$__coerced__("<=>", other)}})()
    }, $Rational_$lt_eq_gt$8.$$arity = 1);
    
    Opal.def(self, '$+', $Rational_$plus$9 = function(other) {
      var self = this, $case = nil, num = nil, den = nil;

      return (function() {$case = other;
      if ($$($nesting, 'Rational')['$===']($case)) {
      num = $rb_plus($rb_times(self.num, other.$denominator()), $rb_times(self.den, other.$numerator()));
      den = $rb_times(self.den, other.$denominator());
      return self.$Rational(num, den);}
      else if ($$($nesting, 'Integer')['$===']($case)) {return self.$Rational($rb_plus(self.num, $rb_times(other, self.den)), self.den)}
      else if ($$($nesting, 'Float')['$===']($case)) {return $rb_plus(self.$to_f(), other)}
      else {return self.$__coerced__("+", other)}})()
    }, $Rational_$plus$9.$$arity = 1);
    
    Opal.def(self, '$-', $Rational_$minus$10 = function(other) {
      var self = this, $case = nil, num = nil, den = nil;

      return (function() {$case = other;
      if ($$($nesting, 'Rational')['$===']($case)) {
      num = $rb_minus($rb_times(self.num, other.$denominator()), $rb_times(self.den, other.$numerator()));
      den = $rb_times(self.den, other.$denominator());
      return self.$Rational(num, den);}
      else if ($$($nesting, 'Integer')['$===']($case)) {return self.$Rational($rb_minus(self.num, $rb_times(other, self.den)), self.den)}
      else if ($$($nesting, 'Float')['$===']($case)) {return $rb_minus(self.$to_f(), other)}
      else {return self.$__coerced__("-", other)}})()
    }, $Rational_$minus$10.$$arity = 1);
    
    Opal.def(self, '$*', $Rational_$$11 = function(other) {
      var self = this, $case = nil, num = nil, den = nil;

      return (function() {$case = other;
      if ($$($nesting, 'Rational')['$===']($case)) {
      num = $rb_times(self.num, other.$numerator());
      den = $rb_times(self.den, other.$denominator());
      return self.$Rational(num, den);}
      else if ($$($nesting, 'Integer')['$===']($case)) {return self.$Rational($rb_times(self.num, other), self.den)}
      else if ($$($nesting, 'Float')['$===']($case)) {return $rb_times(self.$to_f(), other)}
      else {return self.$__coerced__("*", other)}})()
    }, $Rational_$$11.$$arity = 1);
    
    Opal.def(self, '$/', $Rational_$slash$12 = function(other) {
      var self = this, $case = nil, num = nil, den = nil;

      return (function() {$case = other;
      if ($$($nesting, 'Rational')['$===']($case)) {
      num = $rb_times(self.num, other.$denominator());
      den = $rb_times(self.den, other.$numerator());
      return self.$Rational(num, den);}
      else if ($$($nesting, 'Integer')['$===']($case)) {if (other['$=='](0)) {
        return $rb_divide(self.$to_f(), 0.0)
      } else {
        return self.$Rational(self.num, $rb_times(self.den, other))
      }}
      else if ($$($nesting, 'Float')['$===']($case)) {return $rb_divide(self.$to_f(), other)}
      else {return self.$__coerced__("/", other)}})()
    }, $Rational_$slash$12.$$arity = 1);
    
    Opal.def(self, '$**', $Rational_$$$13 = function(other) {
      var $a, self = this, $case = nil;

      return (function() {$case = other;
      if ($$($nesting, 'Integer')['$===']($case)) {if ($truthy((($a = self['$=='](0)) ? $rb_lt(other, 0) : self['$=='](0)))) {
        return $$$($$($nesting, 'Float'), 'INFINITY')
      } else if ($truthy($rb_gt(other, 0))) {
        return self.$Rational(self.num['$**'](other), self.den['$**'](other))
      } else if ($truthy($rb_lt(other, 0))) {
        return self.$Rational(self.den['$**'](other['$-@']()), self.num['$**'](other['$-@']()))
      } else {
        return self.$Rational(1, 1)
      }}
      else if ($$($nesting, 'Float')['$===']($case)) {return self.$to_f()['$**'](other)}
      else if ($$($nesting, 'Rational')['$===']($case)) {if (other['$=='](0)) {
        return self.$Rational(1, 1)
      } else if (other.$denominator()['$=='](1)) {
        if ($truthy($rb_lt(other, 0))) {
          return self.$Rational(self.den['$**'](other.$numerator().$abs()), self.num['$**'](other.$numerator().$abs()))
        } else {
          return self.$Rational(self.num['$**'](other.$numerator()), self.den['$**'](other.$numerator()))
        }
      } else if ($truthy((($a = self['$=='](0)) ? $rb_lt(other, 0) : self['$=='](0)))) {
        return self.$raise($$($nesting, 'ZeroDivisionError'), "divided by 0")
      } else {
        return self.$to_f()['$**'](other)
      }}
      else {return self.$__coerced__("**", other)}})()
    }, $Rational_$$$13.$$arity = 1);
    
    Opal.def(self, '$abs', $Rational_abs$14 = function $$abs() {
      var self = this;

      return self.$Rational(self.num.$abs(), self.den.$abs())
    }, $Rational_abs$14.$$arity = 0);
    
    Opal.def(self, '$ceil', $Rational_ceil$15 = function $$ceil(precision) {
      var self = this;

      
      
      if (precision == null) {
        precision = 0;
      };
      if (precision['$=='](0)) {
        return $rb_divide(self.num['$-@'](), self.den)['$-@']().$ceil()
      } else {
        return self.$with_precision("ceil", precision)
      };
    }, $Rational_ceil$15.$$arity = -1);
    Opal.alias(self, "divide", "/");
    
    Opal.def(self, '$floor', $Rational_floor$16 = function $$floor(precision) {
      var self = this;

      
      
      if (precision == null) {
        precision = 0;
      };
      if (precision['$=='](0)) {
        return $rb_divide(self.num['$-@'](), self.den)['$-@']().$floor()
      } else {
        return self.$with_precision("floor", precision)
      };
    }, $Rational_floor$16.$$arity = -1);
    
    Opal.def(self, '$hash', $Rational_hash$17 = function $$hash() {
      var self = this;

      return "" + "Rational:" + (self.num) + ":" + (self.den)
    }, $Rational_hash$17.$$arity = 0);
    
    Opal.def(self, '$inspect', $Rational_inspect$18 = function $$inspect() {
      var self = this;

      return "" + "(" + (self) + ")"
    }, $Rational_inspect$18.$$arity = 0);
    Opal.alias(self, "quo", "/");
    
    Opal.def(self, '$rationalize', $Rational_rationalize$19 = function $$rationalize(eps) {
      var self = this;

      
      ;
      
      if (arguments.length > 1) {
        self.$raise($$($nesting, 'ArgumentError'), "" + "wrong number of arguments (" + (arguments.length) + " for 0..1)");
      }

      if (eps == null) {
        return self;
      }

      var e = eps.$abs(),
          a = $rb_minus(self, e),
          b = $rb_plus(self, e);

      var p0 = 0,
          p1 = 1,
          q0 = 1,
          q1 = 0,
          p2, q2;

      var c, k, t;

      while (true) {
        c = (a).$ceil();

        if ($rb_le(c, b)) {
          break;
        }

        k  = c - 1;
        p2 = k * p1 + p0;
        q2 = k * q1 + q0;
        t  = $rb_divide(1, $rb_minus(b, k));
        b  = $rb_divide(1, $rb_minus(a, k));
        a  = t;

        p0 = p1;
        q0 = q1;
        p1 = p2;
        q1 = q2;
      }

      return self.$Rational(c * p1 + p0, c * q1 + q0);
    ;
    }, $Rational_rationalize$19.$$arity = -1);
    
    Opal.def(self, '$round', $Rational_round$20 = function $$round(precision) {
      var self = this, num = nil, den = nil, approx = nil;

      
      
      if (precision == null) {
        precision = 0;
      };
      if (precision['$=='](0)) {
      } else {
        return self.$with_precision("round", precision)
      };
      if (self.num['$=='](0)) {
        return 0};
      if (self.den['$=='](1)) {
        return self.num};
      num = $rb_plus($rb_times(self.num.$abs(), 2), self.den);
      den = $rb_times(self.den, 2);
      approx = $rb_divide(num, den).$truncate();
      if ($truthy($rb_lt(self.num, 0))) {
        return approx['$-@']()
      } else {
        return approx
      };
    }, $Rational_round$20.$$arity = -1);
    
    Opal.def(self, '$to_f', $Rational_to_f$21 = function $$to_f() {
      var self = this;

      return $rb_divide(self.num, self.den)
    }, $Rational_to_f$21.$$arity = 0);
    
    Opal.def(self, '$to_i', $Rational_to_i$22 = function $$to_i() {
      var self = this;

      return self.$truncate()
    }, $Rational_to_i$22.$$arity = 0);
    
    Opal.def(self, '$to_r', $Rational_to_r$23 = function $$to_r() {
      var self = this;

      return self
    }, $Rational_to_r$23.$$arity = 0);
    
    Opal.def(self, '$to_s', $Rational_to_s$24 = function $$to_s() {
      var self = this;

      return "" + (self.num) + "/" + (self.den)
    }, $Rational_to_s$24.$$arity = 0);
    
    Opal.def(self, '$truncate', $Rational_truncate$25 = function $$truncate(precision) {
      var self = this;

      
      
      if (precision == null) {
        precision = 0;
      };
      if (precision['$=='](0)) {
        if ($truthy($rb_lt(self.num, 0))) {
          return self.$ceil()
        } else {
          return self.$floor()
        }
      } else {
        return self.$with_precision("truncate", precision)
      };
    }, $Rational_truncate$25.$$arity = -1);
    return (Opal.def(self, '$with_precision', $Rational_with_precision$26 = function $$with_precision(method, precision) {
      var self = this, p = nil, s = nil;

      
      if ($truthy($$($nesting, 'Integer')['$==='](precision))) {
      } else {
        self.$raise($$($nesting, 'TypeError'), "not an Integer")
      };
      p = (10)['$**'](precision);
      s = $rb_times(self, p);
      if ($truthy($rb_lt(precision, 1))) {
        return $rb_divide(s.$send(method), p).$to_i()
      } else {
        return self.$Rational(s.$send(method), p)
      };
    }, $Rational_with_precision$26.$$arity = 2), nil) && 'with_precision';
  })($nesting[0], $$($nesting, 'Numeric'), $nesting);
  (function($base, $parent_nesting) {
    var self = $module($base, 'Kernel');

    var $nesting = [self].concat($parent_nesting), $Kernel_Rational$27;

    
    Opal.def(self, '$Rational', $Kernel_Rational$27 = function $$Rational(numerator, denominator) {
      var self = this;

      
      
      if (denominator == null) {
        denominator = 1;
      };
      return $$($nesting, 'Rational').$convert(numerator, denominator);
    }, $Kernel_Rational$27.$$arity = -2)
  })($nesting[0], $nesting);
  return (function($base, $super, $parent_nesting) {
    var self = $klass($base, $super, 'String');

    var $nesting = [self].concat($parent_nesting), $String_to_r$28;

    return (Opal.def(self, '$to_r', $String_to_r$28 = function $$to_r() {
      var self = this;

      
      var str = self.trimLeft(),
          re = /^[+-]?[\d_]+(\.[\d_]+)?/,
          match = str.match(re),
          numerator, denominator;

      function isFloat() {
        return re.test(str);
      }

      function cutFloat() {
        var match = str.match(re);
        var number = match[0];
        str = str.slice(number.length);
        return number.replace(/_/g, '');
      }

      if (isFloat()) {
        numerator = parseFloat(cutFloat());

        if (str[0] === '/') {
          // rational real part
          str = str.slice(1);

          if (isFloat()) {
            denominator = parseFloat(cutFloat());
            return self.$Rational(numerator, denominator);
          } else {
            return self.$Rational(numerator, 1);
          }
        } else {
          return self.$Rational(numerator, 1);
        }
      } else {
        return self.$Rational(0, 1);
      }
    
    }, $String_to_r$28.$$arity = 0), nil) && 'to_r'
  })($nesting[0], null, $nesting);
};

/* Generated by Opal 1.0.0 */
Opal.modules["corelib/time"] = function(Opal) {
  function $rb_gt(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs > rhs : lhs['$>'](rhs);
  }
  function $rb_lt(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs < rhs : lhs['$<'](rhs);
  }
  function $rb_plus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs + rhs : lhs['$+'](rhs);
  }
  function $rb_divide(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs / rhs : lhs['$/'](rhs);
  }
  function $rb_minus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs - rhs : lhs['$-'](rhs);
  }
  function $rb_le(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs <= rhs : lhs['$<='](rhs);
  }
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.$$$, $$ = Opal.$$, $slice = Opal.slice, $klass = Opal.klass, $truthy = Opal.truthy, $range = Opal.range;

  Opal.add_stubs(['$require', '$include', '$===', '$raise', '$coerce_to!', '$respond_to?', '$to_str', '$to_i', '$new', '$<=>', '$to_f', '$nil?', '$>', '$<', '$strftime', '$year', '$month', '$day', '$+', '$round', '$/', '$-', '$copy_instance_variables', '$initialize_dup', '$is_a?', '$zero?', '$wday', '$utc?', '$mon', '$yday', '$hour', '$min', '$sec', '$rjust', '$ljust', '$zone', '$to_s', '$[]', '$cweek_cyear', '$isdst', '$<=', '$!=', '$==', '$ceil']);
  
  self.$require("corelib/comparable");
  return (function($base, $super, $parent_nesting) {
    var self = $klass($base, $super, 'Time');

    var $nesting = [self].concat($parent_nesting), $Time_at$1, $Time_new$2, $Time_local$3, $Time_gm$4, $Time_now$5, $Time_$plus$6, $Time_$minus$7, $Time_$lt_eq_gt$8, $Time_$eq_eq$9, $Time_asctime$10, $Time_day$11, $Time_yday$12, $Time_isdst$13, $Time_dup$14, $Time_eql$ques$15, $Time_friday$ques$16, $Time_hash$17, $Time_hour$18, $Time_inspect$19, $Time_min$20, $Time_mon$21, $Time_monday$ques$22, $Time_saturday$ques$23, $Time_sec$24, $Time_succ$25, $Time_usec$26, $Time_zone$27, $Time_getgm$28, $Time_gmtime$29, $Time_gmt$ques$30, $Time_gmt_offset$31, $Time_strftime$32, $Time_sunday$ques$33, $Time_thursday$ques$34, $Time_to_a$35, $Time_to_f$36, $Time_to_i$37, $Time_tuesday$ques$38, $Time_wday$39, $Time_wednesday$ques$40, $Time_year$41, $Time_cweek_cyear$42;

    
    self.$include($$($nesting, 'Comparable'));
    
    var days_of_week = ["Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday", "Sunday"],
        short_days   = ["Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"],
        short_months = ["Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"],
        long_months  = ["January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"];
  ;
    Opal.defs(self, '$at', $Time_at$1 = function $$at(seconds, frac) {
      var self = this;

      
      ;
      
      var result;

      if ($$($nesting, 'Time')['$==='](seconds)) {
        if (frac !== undefined) {
          self.$raise($$($nesting, 'TypeError'), "can't convert Time into an exact number")
        }
        result = new Date(seconds.getTime());
        result.is_utc = seconds.is_utc;
        return result;
      }

      if (!seconds.$$is_number) {
        seconds = $$($nesting, 'Opal')['$coerce_to!'](seconds, $$($nesting, 'Integer'), "to_int");
      }

      if (frac === undefined) {
        return new Date(seconds * 1000);
      }

      if (!frac.$$is_number) {
        frac = $$($nesting, 'Opal')['$coerce_to!'](frac, $$($nesting, 'Integer'), "to_int");
      }

      return new Date(seconds * 1000 + (frac / 1000));
    ;
    }, $Time_at$1.$$arity = -2);
    
    function time_params(year, month, day, hour, min, sec) {
      if (year.$$is_string) {
        year = parseInt(year, 10);
      } else {
        year = $$($nesting, 'Opal')['$coerce_to!'](year, $$($nesting, 'Integer'), "to_int");
      }

      if (month === nil) {
        month = 1;
      } else if (!month.$$is_number) {
        if ((month)['$respond_to?']("to_str")) {
          month = (month).$to_str();
          switch (month.toLowerCase()) {
          case 'jan': month =  1; break;
          case 'feb': month =  2; break;
          case 'mar': month =  3; break;
          case 'apr': month =  4; break;
          case 'may': month =  5; break;
          case 'jun': month =  6; break;
          case 'jul': month =  7; break;
          case 'aug': month =  8; break;
          case 'sep': month =  9; break;
          case 'oct': month = 10; break;
          case 'nov': month = 11; break;
          case 'dec': month = 12; break;
          default: month = (month).$to_i();
          }
        } else {
          month = $$($nesting, 'Opal')['$coerce_to!'](month, $$($nesting, 'Integer'), "to_int");
        }
      }

      if (month < 1 || month > 12) {
        self.$raise($$($nesting, 'ArgumentError'), "" + "month out of range: " + (month))
      }
      month = month - 1;

      if (day === nil) {
        day = 1;
      } else if (day.$$is_string) {
        day = parseInt(day, 10);
      } else {
        day = $$($nesting, 'Opal')['$coerce_to!'](day, $$($nesting, 'Integer'), "to_int");
      }

      if (day < 1 || day > 31) {
        self.$raise($$($nesting, 'ArgumentError'), "" + "day out of range: " + (day))
      }

      if (hour === nil) {
        hour = 0;
      } else if (hour.$$is_string) {
        hour = parseInt(hour, 10);
      } else {
        hour = $$($nesting, 'Opal')['$coerce_to!'](hour, $$($nesting, 'Integer'), "to_int");
      }

      if (hour < 0 || hour > 24) {
        self.$raise($$($nesting, 'ArgumentError'), "" + "hour out of range: " + (hour))
      }

      if (min === nil) {
        min = 0;
      } else if (min.$$is_string) {
        min = parseInt(min, 10);
      } else {
        min = $$($nesting, 'Opal')['$coerce_to!'](min, $$($nesting, 'Integer'), "to_int");
      }

      if (min < 0 || min > 59) {
        self.$raise($$($nesting, 'ArgumentError'), "" + "min out of range: " + (min))
      }

      if (sec === nil) {
        sec = 0;
      } else if (!sec.$$is_number) {
        if (sec.$$is_string) {
          sec = parseInt(sec, 10);
        } else {
          sec = $$($nesting, 'Opal')['$coerce_to!'](sec, $$($nesting, 'Integer'), "to_int");
        }
      }

      if (sec < 0 || sec > 60) {
        self.$raise($$($nesting, 'ArgumentError'), "" + "sec out of range: " + (sec))
      }

      return [year, month, day, hour, min, sec];
    }
  ;
    Opal.defs(self, '$new', $Time_new$2 = function(year, month, day, hour, min, sec, utc_offset) {
      var self = this;

      
      ;
      
      if (month == null) {
        month = nil;
      };
      
      if (day == null) {
        day = nil;
      };
      
      if (hour == null) {
        hour = nil;
      };
      
      if (min == null) {
        min = nil;
      };
      
      if (sec == null) {
        sec = nil;
      };
      
      if (utc_offset == null) {
        utc_offset = nil;
      };
      
      var args, result;

      if (year === undefined) {
        return new Date();
      }

      if (utc_offset !== nil) {
        self.$raise($$($nesting, 'ArgumentError'), "Opal does not support explicitly specifying UTC offset for Time")
      }

      args  = time_params(year, month, day, hour, min, sec);
      year  = args[0];
      month = args[1];
      day   = args[2];
      hour  = args[3];
      min   = args[4];
      sec   = args[5];

      result = new Date(year, month, day, hour, min, 0, sec * 1000);
      if (year < 100) {
        result.setFullYear(year);
      }
      return result;
    ;
    }, $Time_new$2.$$arity = -1);
    Opal.defs(self, '$local', $Time_local$3 = function $$local(year, month, day, hour, min, sec, millisecond, _dummy1, _dummy2, _dummy3) {
      var self = this;

      
      
      if (month == null) {
        month = nil;
      };
      
      if (day == null) {
        day = nil;
      };
      
      if (hour == null) {
        hour = nil;
      };
      
      if (min == null) {
        min = nil;
      };
      
      if (sec == null) {
        sec = nil;
      };
      
      if (millisecond == null) {
        millisecond = nil;
      };
      
      if (_dummy1 == null) {
        _dummy1 = nil;
      };
      
      if (_dummy2 == null) {
        _dummy2 = nil;
      };
      
      if (_dummy3 == null) {
        _dummy3 = nil;
      };
      
      var args, result;

      if (arguments.length === 10) {
        args  = $slice.call(arguments);
        year  = args[5];
        month = args[4];
        day   = args[3];
        hour  = args[2];
        min   = args[1];
        sec   = args[0];
      }

      args  = time_params(year, month, day, hour, min, sec);
      year  = args[0];
      month = args[1];
      day   = args[2];
      hour  = args[3];
      min   = args[4];
      sec   = args[5];

      result = new Date(year, month, day, hour, min, 0, sec * 1000);
      if (year < 100) {
        result.setFullYear(year);
      }
      return result;
    ;
    }, $Time_local$3.$$arity = -2);
    Opal.defs(self, '$gm', $Time_gm$4 = function $$gm(year, month, day, hour, min, sec, millisecond, _dummy1, _dummy2, _dummy3) {
      var self = this;

      
      
      if (month == null) {
        month = nil;
      };
      
      if (day == null) {
        day = nil;
      };
      
      if (hour == null) {
        hour = nil;
      };
      
      if (min == null) {
        min = nil;
      };
      
      if (sec == null) {
        sec = nil;
      };
      
      if (millisecond == null) {
        millisecond = nil;
      };
      
      if (_dummy1 == null) {
        _dummy1 = nil;
      };
      
      if (_dummy2 == null) {
        _dummy2 = nil;
      };
      
      if (_dummy3 == null) {
        _dummy3 = nil;
      };
      
      var args, result;

      if (arguments.length === 10) {
        args  = $slice.call(arguments);
        year  = args[5];
        month = args[4];
        day   = args[3];
        hour  = args[2];
        min   = args[1];
        sec   = args[0];
      }

      args  = time_params(year, month, day, hour, min, sec);
      year  = args[0];
      month = args[1];
      day   = args[2];
      hour  = args[3];
      min   = args[4];
      sec   = args[5];

      result = new Date(Date.UTC(year, month, day, hour, min, 0, sec * 1000));
      if (year < 100) {
        result.setUTCFullYear(year);
      }
      result.is_utc = true;
      return result;
    ;
    }, $Time_gm$4.$$arity = -2);
    (function(self, $parent_nesting) {
      var $nesting = [self].concat($parent_nesting);

      
      Opal.alias(self, "mktime", "local");
      return Opal.alias(self, "utc", "gm");
    })(Opal.get_singleton_class(self), $nesting);
    Opal.defs(self, '$now', $Time_now$5 = function $$now() {
      var self = this;

      return self.$new()
    }, $Time_now$5.$$arity = 0);
    
    Opal.def(self, '$+', $Time_$plus$6 = function(other) {
      var self = this;

      
      if ($truthy($$($nesting, 'Time')['$==='](other))) {
        self.$raise($$($nesting, 'TypeError'), "time + time?")};
      
      if (!other.$$is_number) {
        other = $$($nesting, 'Opal')['$coerce_to!'](other, $$($nesting, 'Integer'), "to_int");
      }
      var result = new Date(self.getTime() + (other * 1000));
      result.is_utc = self.is_utc;
      return result;
    ;
    }, $Time_$plus$6.$$arity = 1);
    
    Opal.def(self, '$-', $Time_$minus$7 = function(other) {
      var self = this;

      
      if ($truthy($$($nesting, 'Time')['$==='](other))) {
        return (self.getTime() - other.getTime()) / 1000};
      
      if (!other.$$is_number) {
        other = $$($nesting, 'Opal')['$coerce_to!'](other, $$($nesting, 'Integer'), "to_int");
      }
      var result = new Date(self.getTime() - (other * 1000));
      result.is_utc = self.is_utc;
      return result;
    ;
    }, $Time_$minus$7.$$arity = 1);
    
    Opal.def(self, '$<=>', $Time_$lt_eq_gt$8 = function(other) {
      var self = this, r = nil;

      if ($truthy($$($nesting, 'Time')['$==='](other))) {
        return self.$to_f()['$<=>'](other.$to_f())
      } else {
        
        r = other['$<=>'](self);
        if ($truthy(r['$nil?']())) {
          return nil
        } else if ($truthy($rb_gt(r, 0))) {
          return -1
        } else if ($truthy($rb_lt(r, 0))) {
          return 1
        } else {
          return 0
        };
      }
    }, $Time_$lt_eq_gt$8.$$arity = 1);
    
    Opal.def(self, '$==', $Time_$eq_eq$9 = function(other) {
      var $a, self = this;

      return ($truthy($a = $$($nesting, 'Time')['$==='](other)) ? self.$to_f() === other.$to_f() : $a)
    }, $Time_$eq_eq$9.$$arity = 1);
    
    Opal.def(self, '$asctime', $Time_asctime$10 = function $$asctime() {
      var self = this;

      return self.$strftime("%a %b %e %H:%M:%S %Y")
    }, $Time_asctime$10.$$arity = 0);
    Opal.alias(self, "ctime", "asctime");
    
    Opal.def(self, '$day', $Time_day$11 = function $$day() {
      var self = this;

      return self.is_utc ? self.getUTCDate() : self.getDate();
    }, $Time_day$11.$$arity = 0);
    
    Opal.def(self, '$yday', $Time_yday$12 = function $$yday() {
      var self = this, start_of_year = nil, start_of_day = nil, one_day = nil;

      
      start_of_year = $$($nesting, 'Time').$new(self.$year()).$to_i();
      start_of_day = $$($nesting, 'Time').$new(self.$year(), self.$month(), self.$day()).$to_i();
      one_day = 86400;
      return $rb_plus($rb_divide($rb_minus(start_of_day, start_of_year), one_day).$round(), 1);
    }, $Time_yday$12.$$arity = 0);
    
    Opal.def(self, '$isdst', $Time_isdst$13 = function $$isdst() {
      var self = this;

      
      var jan = new Date(self.getFullYear(), 0, 1),
          jul = new Date(self.getFullYear(), 6, 1);
      return self.getTimezoneOffset() < Math.max(jan.getTimezoneOffset(), jul.getTimezoneOffset());
    
    }, $Time_isdst$13.$$arity = 0);
    Opal.alias(self, "dst?", "isdst");
    
    Opal.def(self, '$dup', $Time_dup$14 = function $$dup() {
      var self = this, copy = nil;

      
      copy = new Date(self.getTime());
      copy.$copy_instance_variables(self);
      copy.$initialize_dup(self);
      return copy;
    }, $Time_dup$14.$$arity = 0);
    
    Opal.def(self, '$eql?', $Time_eql$ques$15 = function(other) {
      var $a, self = this;

      return ($truthy($a = other['$is_a?']($$($nesting, 'Time'))) ? self['$<=>'](other)['$zero?']() : $a)
    }, $Time_eql$ques$15.$$arity = 1);
    
    Opal.def(self, '$friday?', $Time_friday$ques$16 = function() {
      var self = this;

      return self.$wday() == 5
    }, $Time_friday$ques$16.$$arity = 0);
    
    Opal.def(self, '$hash', $Time_hash$17 = function $$hash() {
      var self = this;

      return 'Time:' + self.getTime();
    }, $Time_hash$17.$$arity = 0);
    
    Opal.def(self, '$hour', $Time_hour$18 = function $$hour() {
      var self = this;

      return self.is_utc ? self.getUTCHours() : self.getHours();
    }, $Time_hour$18.$$arity = 0);
    
    Opal.def(self, '$inspect', $Time_inspect$19 = function $$inspect() {
      var self = this;

      if ($truthy(self['$utc?']())) {
        return self.$strftime("%Y-%m-%d %H:%M:%S UTC")
      } else {
        return self.$strftime("%Y-%m-%d %H:%M:%S %z")
      }
    }, $Time_inspect$19.$$arity = 0);
    Opal.alias(self, "mday", "day");
    
    Opal.def(self, '$min', $Time_min$20 = function $$min() {
      var self = this;

      return self.is_utc ? self.getUTCMinutes() : self.getMinutes();
    }, $Time_min$20.$$arity = 0);
    
    Opal.def(self, '$mon', $Time_mon$21 = function $$mon() {
      var self = this;

      return (self.is_utc ? self.getUTCMonth() : self.getMonth()) + 1;
    }, $Time_mon$21.$$arity = 0);
    
    Opal.def(self, '$monday?', $Time_monday$ques$22 = function() {
      var self = this;

      return self.$wday() == 1
    }, $Time_monday$ques$22.$$arity = 0);
    Opal.alias(self, "month", "mon");
    
    Opal.def(self, '$saturday?', $Time_saturday$ques$23 = function() {
      var self = this;

      return self.$wday() == 6
    }, $Time_saturday$ques$23.$$arity = 0);
    
    Opal.def(self, '$sec', $Time_sec$24 = function $$sec() {
      var self = this;

      return self.is_utc ? self.getUTCSeconds() : self.getSeconds();
    }, $Time_sec$24.$$arity = 0);
    
    Opal.def(self, '$succ', $Time_succ$25 = function $$succ() {
      var self = this;

      
      var result = new Date(self.getTime() + 1000);
      result.is_utc = self.is_utc;
      return result;
    
    }, $Time_succ$25.$$arity = 0);
    
    Opal.def(self, '$usec', $Time_usec$26 = function $$usec() {
      var self = this;

      return self.getMilliseconds() * 1000;
    }, $Time_usec$26.$$arity = 0);
    
    Opal.def(self, '$zone', $Time_zone$27 = function $$zone() {
      var self = this;

      
      var string = self.toString(),
          result;

      if (string.indexOf('(') == -1) {
        result = string.match(/[A-Z]{3,4}/)[0];
      }
      else {
        result = string.match(/\((.+)\)(?:\s|$)/)[1]
      }

      if (result == "GMT" && /(GMT\W*\d{4})/.test(string)) {
        return RegExp.$1;
      }
      else {
        return result;
      }
    
    }, $Time_zone$27.$$arity = 0);
    
    Opal.def(self, '$getgm', $Time_getgm$28 = function $$getgm() {
      var self = this;

      
      var result = new Date(self.getTime());
      result.is_utc = true;
      return result;
    
    }, $Time_getgm$28.$$arity = 0);
    Opal.alias(self, "getutc", "getgm");
    
    Opal.def(self, '$gmtime', $Time_gmtime$29 = function $$gmtime() {
      var self = this;

      
      self.is_utc = true;
      return self;
    
    }, $Time_gmtime$29.$$arity = 0);
    Opal.alias(self, "utc", "gmtime");
    
    Opal.def(self, '$gmt?', $Time_gmt$ques$30 = function() {
      var self = this;

      return self.is_utc === true;
    }, $Time_gmt$ques$30.$$arity = 0);
    
    Opal.def(self, '$gmt_offset', $Time_gmt_offset$31 = function $$gmt_offset() {
      var self = this;

      return self.is_utc ? 0 : -self.getTimezoneOffset() * 60;
    }, $Time_gmt_offset$31.$$arity = 0);
    
    Opal.def(self, '$strftime', $Time_strftime$32 = function $$strftime(format) {
      var self = this;

      
      return format.replace(/%([\-_#^0]*:{0,2})(\d+)?([EO]*)(.)/g, function(full, flags, width, _, conv) {
        var result = "",
            zero   = flags.indexOf('0') !== -1,
            pad    = flags.indexOf('-') === -1,
            blank  = flags.indexOf('_') !== -1,
            upcase = flags.indexOf('^') !== -1,
            invert = flags.indexOf('#') !== -1,
            colons = (flags.match(':') || []).length;

        width = parseInt(width, 10);

        if (zero && blank) {
          if (flags.indexOf('0') < flags.indexOf('_')) {
            zero = false;
          }
          else {
            blank = false;
          }
        }

        switch (conv) {
          case 'Y':
            result += self.$year();
            break;

          case 'C':
            zero    = !blank;
            result += Math.round(self.$year() / 100);
            break;

          case 'y':
            zero    = !blank;
            result += (self.$year() % 100);
            break;

          case 'm':
            zero    = !blank;
            result += self.$mon();
            break;

          case 'B':
            result += long_months[self.$mon() - 1];
            break;

          case 'b':
          case 'h':
            blank   = !zero;
            result += short_months[self.$mon() - 1];
            break;

          case 'd':
            zero    = !blank
            result += self.$day();
            break;

          case 'e':
            blank   = !zero
            result += self.$day();
            break;

          case 'j':
            result += self.$yday();
            break;

          case 'H':
            zero    = !blank;
            result += self.$hour();
            break;

          case 'k':
            blank   = !zero;
            result += self.$hour();
            break;

          case 'I':
            zero    = !blank;
            result += (self.$hour() % 12 || 12);
            break;

          case 'l':
            blank   = !zero;
            result += (self.$hour() % 12 || 12);
            break;

          case 'P':
            result += (self.$hour() >= 12 ? "pm" : "am");
            break;

          case 'p':
            result += (self.$hour() >= 12 ? "PM" : "AM");
            break;

          case 'M':
            zero    = !blank;
            result += self.$min();
            break;

          case 'S':
            zero    = !blank;
            result += self.$sec()
            break;

          case 'L':
            zero    = !blank;
            width   = isNaN(width) ? 3 : width;
            result += self.getMilliseconds();
            break;

          case 'N':
            width   = isNaN(width) ? 9 : width;
            result += (self.getMilliseconds().toString()).$rjust(3, "0");
            result  = (result).$ljust(width, "0");
            break;

          case 'z':
            var offset  = self.getTimezoneOffset(),
                hours   = Math.floor(Math.abs(offset) / 60),
                minutes = Math.abs(offset) % 60;

            result += offset < 0 ? "+" : "-";
            result += hours < 10 ? "0" : "";
            result += hours;

            if (colons > 0) {
              result += ":";
            }

            result += minutes < 10 ? "0" : "";
            result += minutes;

            if (colons > 1) {
              result += ":00";
            }

            break;

          case 'Z':
            result += self.$zone();
            break;

          case 'A':
            result += days_of_week[self.$wday()];
            break;

          case 'a':
            result += short_days[self.$wday()];
            break;

          case 'u':
            result += (self.$wday() + 1);
            break;

          case 'w':
            result += self.$wday();
            break;

          case 'V':
            result += self.$cweek_cyear()['$[]'](0).$to_s().$rjust(2, "0");
            break;

          case 'G':
            result += self.$cweek_cyear()['$[]'](1);
            break;

          case 'g':
            result += self.$cweek_cyear()['$[]'](1)['$[]']($range(-2, -1, false));
            break;

          case 's':
            result += self.$to_i();
            break;

          case 'n':
            result += "\n";
            break;

          case 't':
            result += "\t";
            break;

          case '%':
            result += "%";
            break;

          case 'c':
            result += self.$strftime("%a %b %e %T %Y");
            break;

          case 'D':
          case 'x':
            result += self.$strftime("%m/%d/%y");
            break;

          case 'F':
            result += self.$strftime("%Y-%m-%d");
            break;

          case 'v':
            result += self.$strftime("%e-%^b-%4Y");
            break;

          case 'r':
            result += self.$strftime("%I:%M:%S %p");
            break;

          case 'R':
            result += self.$strftime("%H:%M");
            break;

          case 'T':
          case 'X':
            result += self.$strftime("%H:%M:%S");
            break;

          default:
            return full;
        }

        if (upcase) {
          result = result.toUpperCase();
        }

        if (invert) {
          result = result.replace(/[A-Z]/, function(c) { c.toLowerCase() }).
                          replace(/[a-z]/, function(c) { c.toUpperCase() });
        }

        if (pad && (zero || blank)) {
          result = (result).$rjust(isNaN(width) ? 2 : width, blank ? " " : "0");
        }

        return result;
      });
    
    }, $Time_strftime$32.$$arity = 1);
    
    Opal.def(self, '$sunday?', $Time_sunday$ques$33 = function() {
      var self = this;

      return self.$wday() == 0
    }, $Time_sunday$ques$33.$$arity = 0);
    
    Opal.def(self, '$thursday?', $Time_thursday$ques$34 = function() {
      var self = this;

      return self.$wday() == 4
    }, $Time_thursday$ques$34.$$arity = 0);
    
    Opal.def(self, '$to_a', $Time_to_a$35 = function $$to_a() {
      var self = this;

      return [self.$sec(), self.$min(), self.$hour(), self.$day(), self.$month(), self.$year(), self.$wday(), self.$yday(), self.$isdst(), self.$zone()]
    }, $Time_to_a$35.$$arity = 0);
    
    Opal.def(self, '$to_f', $Time_to_f$36 = function $$to_f() {
      var self = this;

      return self.getTime() / 1000;
    }, $Time_to_f$36.$$arity = 0);
    
    Opal.def(self, '$to_i', $Time_to_i$37 = function $$to_i() {
      var self = this;

      return parseInt(self.getTime() / 1000, 10);
    }, $Time_to_i$37.$$arity = 0);
    Opal.alias(self, "to_s", "inspect");
    
    Opal.def(self, '$tuesday?', $Time_tuesday$ques$38 = function() {
      var self = this;

      return self.$wday() == 2
    }, $Time_tuesday$ques$38.$$arity = 0);
    Opal.alias(self, "tv_sec", "to_i");
    Opal.alias(self, "tv_usec", "usec");
    Opal.alias(self, "utc?", "gmt?");
    Opal.alias(self, "gmtoff", "gmt_offset");
    Opal.alias(self, "utc_offset", "gmt_offset");
    
    Opal.def(self, '$wday', $Time_wday$39 = function $$wday() {
      var self = this;

      return self.is_utc ? self.getUTCDay() : self.getDay();
    }, $Time_wday$39.$$arity = 0);
    
    Opal.def(self, '$wednesday?', $Time_wednesday$ques$40 = function() {
      var self = this;

      return self.$wday() == 3
    }, $Time_wednesday$ques$40.$$arity = 0);
    
    Opal.def(self, '$year', $Time_year$41 = function $$year() {
      var self = this;

      return self.is_utc ? self.getUTCFullYear() : self.getFullYear();
    }, $Time_year$41.$$arity = 0);
    return (Opal.def(self, '$cweek_cyear', $Time_cweek_cyear$42 = function $$cweek_cyear() {
      var $a, self = this, jan01 = nil, jan01_wday = nil, first_monday = nil, year = nil, offset = nil, week = nil, dec31 = nil, dec31_wday = nil;

      
      jan01 = $$($nesting, 'Time').$new(self.$year(), 1, 1);
      jan01_wday = jan01.$wday();
      first_monday = 0;
      year = self.$year();
      if ($truthy(($truthy($a = $rb_le(jan01_wday, 4)) ? jan01_wday['$!='](0) : $a))) {
        offset = $rb_minus(jan01_wday, 1)
      } else {
        
        offset = $rb_minus($rb_minus(jan01_wday, 7), 1);
        if (offset['$=='](-8)) {
          offset = -1};
      };
      week = $rb_divide($rb_plus(self.$yday(), offset), 7.0).$ceil();
      if ($truthy($rb_le(week, 0))) {
        return $$($nesting, 'Time').$new($rb_minus(self.$year(), 1), 12, 31).$cweek_cyear()
      } else if (week['$=='](53)) {
        
        dec31 = $$($nesting, 'Time').$new(self.$year(), 12, 31);
        dec31_wday = dec31.$wday();
        if ($truthy(($truthy($a = $rb_le(dec31_wday, 3)) ? dec31_wday['$!='](0) : $a))) {
          
          week = 1;
          year = $rb_plus(year, 1);};};
      return [week, year];
    }, $Time_cweek_cyear$42.$$arity = 0), nil) && 'cweek_cyear';
  })($nesting[0], Date, $nesting);
};

/* Generated by Opal 1.0.0 */
Opal.modules["corelib/struct"] = function(Opal) {
  function $rb_gt(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs > rhs : lhs['$>'](rhs);
  }
  function $rb_minus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs - rhs : lhs['$-'](rhs);
  }
  function $rb_lt(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs < rhs : lhs['$<'](rhs);
  }
  function $rb_ge(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs >= rhs : lhs['$>='](rhs);
  }
  function $rb_plus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs + rhs : lhs['$+'](rhs);
  }
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.$$$, $$ = Opal.$$, $klass = Opal.klass, $hash2 = Opal.hash2, $truthy = Opal.truthy, $send = Opal.send;

  Opal.add_stubs(['$require', '$include', '$const_name!', '$unshift', '$map', '$coerce_to!', '$new', '$each', '$define_struct_attribute', '$allocate', '$initialize', '$alias_method', '$module_eval', '$to_proc', '$const_set', '$==', '$raise', '$<<', '$members', '$define_method', '$instance_eval', '$class', '$last', '$>', '$length', '$-', '$keys', '$any?', '$join', '$[]', '$[]=', '$each_with_index', '$hash', '$===', '$<', '$-@', '$size', '$>=', '$include?', '$to_sym', '$instance_of?', '$__id__', '$eql?', '$enum_for', '$name', '$+', '$each_pair', '$inspect', '$each_with_object', '$flatten', '$to_a', '$respond_to?', '$dig']);
  
  self.$require("corelib/enumerable");
  return (function($base, $super, $parent_nesting) {
    var self = $klass($base, $super, 'Struct');

    var $nesting = [self].concat($parent_nesting), $Struct_new$1, $Struct_define_struct_attribute$6, $Struct_members$9, $Struct_inherited$10, $Struct_initialize$12, $Struct_initialize_copy$15, $Struct_members$16, $Struct_hash$17, $Struct_$$$18, $Struct_$$$eq$19, $Struct_$eq_eq$20, $Struct_eql$ques$21, $Struct_each$22, $Struct_each_pair$25, $Struct_length$28, $Struct_to_a$29, $Struct_inspect$31, $Struct_to_h$33, $Struct_values_at$35, $Struct_dig$37;

    
    self.$include($$($nesting, 'Enumerable'));
    Opal.defs(self, '$new', $Struct_new$1 = function(const_name, $a, $b) {
      var $iter = $Struct_new$1.$$p, block = $iter || nil, $post_args, $kwargs, args, keyword_init, $$2, $$3, self = this, klass = nil;

      if ($iter) $Struct_new$1.$$p = null;
      
      
      if ($iter) $Struct_new$1.$$p = null;;
      
      $post_args = Opal.slice.call(arguments, 1, arguments.length);
      
      $kwargs = Opal.extract_kwargs($post_args);
      
      if ($kwargs == null) {
        $kwargs = $hash2([], {});
      } else if (!$kwargs.$$is_hash) {
        throw Opal.ArgumentError.$new('expected kwargs');
      };
      
      args = $post_args;;
      
      keyword_init = $kwargs.$$smap["keyword_init"];
      if (keyword_init == null) {
        keyword_init = false
      };
      if ($truthy(const_name)) {
        
        try {
          const_name = $$($nesting, 'Opal')['$const_name!'](const_name)
        } catch ($err) {
          if (Opal.rescue($err, [$$($nesting, 'TypeError'), $$($nesting, 'NameError')])) {
            try {
              
              args.$unshift(const_name);
              const_name = nil;
            } finally { Opal.pop_exception() }
          } else { throw $err; }
        };};
      $send(args, 'map', [], ($$2 = function(arg){var self = $$2.$$s == null ? this : $$2.$$s;

      
        
        if (arg == null) {
          arg = nil;
        };
        return $$($nesting, 'Opal')['$coerce_to!'](arg, $$($nesting, 'String'), "to_str");}, $$2.$$s = self, $$2.$$arity = 1, $$2));
      klass = $send($$($nesting, 'Class'), 'new', [self], ($$3 = function(){var self = $$3.$$s == null ? this : $$3.$$s, $$4;

      
        $send(args, 'each', [], ($$4 = function(arg){var self = $$4.$$s == null ? this : $$4.$$s;

        
          
          if (arg == null) {
            arg = nil;
          };
          return self.$define_struct_attribute(arg);}, $$4.$$s = self, $$4.$$arity = 1, $$4));
        return (function(self, $parent_nesting) {
          var $nesting = [self].concat($parent_nesting), $new$5;

          
          
          Opal.def(self, '$new', $new$5 = function($a) {
            var $post_args, args, self = this, instance = nil;

            
            
            $post_args = Opal.slice.call(arguments, 0, arguments.length);
            
            args = $post_args;;
            instance = self.$allocate();
            instance.$$data = {};
            $send(instance, 'initialize', Opal.to_a(args));
            return instance;
          }, $new$5.$$arity = -1);
          return self.$alias_method("[]", "new");
        })(Opal.get_singleton_class(self), $nesting);}, $$3.$$s = self, $$3.$$arity = 0, $$3));
      if ($truthy(block)) {
        $send(klass, 'module_eval', [], block.$to_proc())};
      klass.$$keyword_init = keyword_init;
      if ($truthy(const_name)) {
        $$($nesting, 'Struct').$const_set(const_name, klass)};
      return klass;
    }, $Struct_new$1.$$arity = -2);
    Opal.defs(self, '$define_struct_attribute', $Struct_define_struct_attribute$6 = function $$define_struct_attribute(name) {
      var $$7, $$8, self = this;

      
      if (self['$==']($$($nesting, 'Struct'))) {
        self.$raise($$($nesting, 'ArgumentError'), "you cannot define attributes to the Struct class")};
      self.$members()['$<<'](name);
      $send(self, 'define_method', [name], ($$7 = function(){var self = $$7.$$s == null ? this : $$7.$$s;

      return self.$$data[name];}, $$7.$$s = self, $$7.$$arity = 0, $$7));
      return $send(self, 'define_method', ["" + (name) + "="], ($$8 = function(value){var self = $$8.$$s == null ? this : $$8.$$s;

      
        
        if (value == null) {
          value = nil;
        };
        return self.$$data[name] = value;;}, $$8.$$s = self, $$8.$$arity = 1, $$8));
    }, $Struct_define_struct_attribute$6.$$arity = 1);
    Opal.defs(self, '$members', $Struct_members$9 = function $$members() {
      var $a, self = this;
      if (self.members == null) self.members = nil;

      
      if (self['$==']($$($nesting, 'Struct'))) {
        self.$raise($$($nesting, 'ArgumentError'), "the Struct class has no members")};
      return (self.members = ($truthy($a = self.members) ? $a : []));
    }, $Struct_members$9.$$arity = 0);
    Opal.defs(self, '$inherited', $Struct_inherited$10 = function $$inherited(klass) {
      var $$11, self = this, members = nil;
      if (self.members == null) self.members = nil;

      
      members = self.members;
      return $send(klass, 'instance_eval', [], ($$11 = function(){var self = $$11.$$s == null ? this : $$11.$$s;

      return (self.members = members)}, $$11.$$s = self, $$11.$$arity = 0, $$11));
    }, $Struct_inherited$10.$$arity = 1);
    
    Opal.def(self, '$initialize', $Struct_initialize$12 = function $$initialize($a) {
      var $post_args, args, $b, $$13, $$14, self = this, kwargs = nil, extra = nil;

      
      
      $post_args = Opal.slice.call(arguments, 0, arguments.length);
      
      args = $post_args;;
      if ($truthy(self.$class().$$keyword_init)) {
        
        kwargs = ($truthy($b = args.$last()) ? $b : $hash2([], {}));
        if ($truthy(($truthy($b = $rb_gt(args.$length(), 1)) ? $b : (args.length === 1 && !kwargs.$$is_hash)))) {
          self.$raise($$($nesting, 'ArgumentError'), "" + "wrong number of arguments (given " + (args.$length()) + ", expected 0)")};
        extra = $rb_minus(kwargs.$keys(), self.$class().$members());
        if ($truthy(extra['$any?']())) {
          self.$raise($$($nesting, 'ArgumentError'), "" + "unknown keywords: " + (extra.$join(", ")))};
        return $send(self.$class().$members(), 'each', [], ($$13 = function(name){var self = $$13.$$s == null ? this : $$13.$$s, $writer = nil;

        
          
          if (name == null) {
            name = nil;
          };
          $writer = [name, kwargs['$[]'](name)];
          $send(self, '[]=', Opal.to_a($writer));
          return $writer[$rb_minus($writer["length"], 1)];}, $$13.$$s = self, $$13.$$arity = 1, $$13));
      } else {
        
        if ($truthy($rb_gt(args.$length(), self.$class().$members().$length()))) {
          self.$raise($$($nesting, 'ArgumentError'), "struct size differs")};
        return $send(self.$class().$members(), 'each_with_index', [], ($$14 = function(name, index){var self = $$14.$$s == null ? this : $$14.$$s, $writer = nil;

        
          
          if (name == null) {
            name = nil;
          };
          
          if (index == null) {
            index = nil;
          };
          $writer = [name, args['$[]'](index)];
          $send(self, '[]=', Opal.to_a($writer));
          return $writer[$rb_minus($writer["length"], 1)];}, $$14.$$s = self, $$14.$$arity = 2, $$14));
      };
    }, $Struct_initialize$12.$$arity = -1);
    
    Opal.def(self, '$initialize_copy', $Struct_initialize_copy$15 = function $$initialize_copy(from) {
      var self = this;

      
      self.$$data = {}
      var keys = Object.keys(from.$$data), i, max, name;
      for (i = 0, max = keys.length; i < max; i++) {
        name = keys[i];
        self.$$data[name] = from.$$data[name];
      }
    
    }, $Struct_initialize_copy$15.$$arity = 1);
    
    Opal.def(self, '$members', $Struct_members$16 = function $$members() {
      var self = this;

      return self.$class().$members()
    }, $Struct_members$16.$$arity = 0);
    
    Opal.def(self, '$hash', $Struct_hash$17 = function $$hash() {
      var self = this;

      return $$($nesting, 'Hash').$new(self.$$data).$hash()
    }, $Struct_hash$17.$$arity = 0);
    
    Opal.def(self, '$[]', $Struct_$$$18 = function(name) {
      var self = this;

      
      if ($truthy($$($nesting, 'Integer')['$==='](name))) {
        
        if ($truthy($rb_lt(name, self.$class().$members().$size()['$-@']()))) {
          self.$raise($$($nesting, 'IndexError'), "" + "offset " + (name) + " too small for struct(size:" + (self.$class().$members().$size()) + ")")};
        if ($truthy($rb_ge(name, self.$class().$members().$size()))) {
          self.$raise($$($nesting, 'IndexError'), "" + "offset " + (name) + " too large for struct(size:" + (self.$class().$members().$size()) + ")")};
        name = self.$class().$members()['$[]'](name);
      } else if ($truthy($$($nesting, 'String')['$==='](name))) {
        
        if(!self.$$data.hasOwnProperty(name)) {
          self.$raise($$($nesting, 'NameError').$new("" + "no member '" + (name) + "' in struct", name))
        }
      
      } else {
        self.$raise($$($nesting, 'TypeError'), "" + "no implicit conversion of " + (name.$class()) + " into Integer")
      };
      name = $$($nesting, 'Opal')['$coerce_to!'](name, $$($nesting, 'String'), "to_str");
      return self.$$data[name];;
    }, $Struct_$$$18.$$arity = 1);
    
    Opal.def(self, '$[]=', $Struct_$$$eq$19 = function(name, value) {
      var self = this;

      
      if ($truthy($$($nesting, 'Integer')['$==='](name))) {
        
        if ($truthy($rb_lt(name, self.$class().$members().$size()['$-@']()))) {
          self.$raise($$($nesting, 'IndexError'), "" + "offset " + (name) + " too small for struct(size:" + (self.$class().$members().$size()) + ")")};
        if ($truthy($rb_ge(name, self.$class().$members().$size()))) {
          self.$raise($$($nesting, 'IndexError'), "" + "offset " + (name) + " too large for struct(size:" + (self.$class().$members().$size()) + ")")};
        name = self.$class().$members()['$[]'](name);
      } else if ($truthy($$($nesting, 'String')['$==='](name))) {
        if ($truthy(self.$class().$members()['$include?'](name.$to_sym()))) {
        } else {
          self.$raise($$($nesting, 'NameError').$new("" + "no member '" + (name) + "' in struct", name))
        }
      } else {
        self.$raise($$($nesting, 'TypeError'), "" + "no implicit conversion of " + (name.$class()) + " into Integer")
      };
      name = $$($nesting, 'Opal')['$coerce_to!'](name, $$($nesting, 'String'), "to_str");
      return self.$$data[name] = value;;
    }, $Struct_$$$eq$19.$$arity = 2);
    
    Opal.def(self, '$==', $Struct_$eq_eq$20 = function(other) {
      var self = this;

      
      if ($truthy(other['$instance_of?'](self.$class()))) {
      } else {
        return false
      };
      
      var recursed1 = {}, recursed2 = {};

      function _eqeq(struct, other) {
        var key, a, b;

        recursed1[(struct).$__id__()] = true;
        recursed2[(other).$__id__()] = true;

        for (key in struct.$$data) {
          a = struct.$$data[key];
          b = other.$$data[key];

          if ($$($nesting, 'Struct')['$==='](a)) {
            if (!recursed1.hasOwnProperty((a).$__id__()) || !recursed2.hasOwnProperty((b).$__id__())) {
              if (!_eqeq(a, b)) {
                return false;
              }
            }
          } else {
            if (!(a)['$=='](b)) {
              return false;
            }
          }
        }

        return true;
      }

      return _eqeq(self, other);
    ;
    }, $Struct_$eq_eq$20.$$arity = 1);
    
    Opal.def(self, '$eql?', $Struct_eql$ques$21 = function(other) {
      var self = this;

      
      if ($truthy(other['$instance_of?'](self.$class()))) {
      } else {
        return false
      };
      
      var recursed1 = {}, recursed2 = {};

      function _eqeq(struct, other) {
        var key, a, b;

        recursed1[(struct).$__id__()] = true;
        recursed2[(other).$__id__()] = true;

        for (key in struct.$$data) {
          a = struct.$$data[key];
          b = other.$$data[key];

          if ($$($nesting, 'Struct')['$==='](a)) {
            if (!recursed1.hasOwnProperty((a).$__id__()) || !recursed2.hasOwnProperty((b).$__id__())) {
              if (!_eqeq(a, b)) {
                return false;
              }
            }
          } else {
            if (!(a)['$eql?'](b)) {
              return false;
            }
          }
        }

        return true;
      }

      return _eqeq(self, other);
    ;
    }, $Struct_eql$ques$21.$$arity = 1);
    
    Opal.def(self, '$each', $Struct_each$22 = function $$each() {
      var $$23, $$24, $iter = $Struct_each$22.$$p, $yield = $iter || nil, self = this;

      if ($iter) $Struct_each$22.$$p = null;
      
      if (($yield !== nil)) {
      } else {
        return $send(self, 'enum_for', ["each"], ($$23 = function(){var self = $$23.$$s == null ? this : $$23.$$s;

        return self.$size()}, $$23.$$s = self, $$23.$$arity = 0, $$23))
      };
      $send(self.$class().$members(), 'each', [], ($$24 = function(name){var self = $$24.$$s == null ? this : $$24.$$s;

      
        
        if (name == null) {
          name = nil;
        };
        return Opal.yield1($yield, self['$[]'](name));;}, $$24.$$s = self, $$24.$$arity = 1, $$24));
      return self;
    }, $Struct_each$22.$$arity = 0);
    
    Opal.def(self, '$each_pair', $Struct_each_pair$25 = function $$each_pair() {
      var $$26, $$27, $iter = $Struct_each_pair$25.$$p, $yield = $iter || nil, self = this;

      if ($iter) $Struct_each_pair$25.$$p = null;
      
      if (($yield !== nil)) {
      } else {
        return $send(self, 'enum_for', ["each_pair"], ($$26 = function(){var self = $$26.$$s == null ? this : $$26.$$s;

        return self.$size()}, $$26.$$s = self, $$26.$$arity = 0, $$26))
      };
      $send(self.$class().$members(), 'each', [], ($$27 = function(name){var self = $$27.$$s == null ? this : $$27.$$s;

      
        
        if (name == null) {
          name = nil;
        };
        return Opal.yield1($yield, [name, self['$[]'](name)]);;}, $$27.$$s = self, $$27.$$arity = 1, $$27));
      return self;
    }, $Struct_each_pair$25.$$arity = 0);
    
    Opal.def(self, '$length', $Struct_length$28 = function $$length() {
      var self = this;

      return self.$class().$members().$length()
    }, $Struct_length$28.$$arity = 0);
    Opal.alias(self, "size", "length");
    
    Opal.def(self, '$to_a', $Struct_to_a$29 = function $$to_a() {
      var $$30, self = this;

      return $send(self.$class().$members(), 'map', [], ($$30 = function(name){var self = $$30.$$s == null ? this : $$30.$$s;

      
        
        if (name == null) {
          name = nil;
        };
        return self['$[]'](name);}, $$30.$$s = self, $$30.$$arity = 1, $$30))
    }, $Struct_to_a$29.$$arity = 0);
    Opal.alias(self, "values", "to_a");
    
    Opal.def(self, '$inspect', $Struct_inspect$31 = function $$inspect() {
      var $a, $$32, self = this, result = nil;

      
      result = "#<struct ";
      if ($truthy(($truthy($a = $$($nesting, 'Struct')['$==='](self)) ? self.$class().$name() : $a))) {
        result = $rb_plus(result, "" + (self.$class()) + " ")};
      result = $rb_plus(result, $send(self.$each_pair(), 'map', [], ($$32 = function(name, value){var self = $$32.$$s == null ? this : $$32.$$s;

      
        
        if (name == null) {
          name = nil;
        };
        
        if (value == null) {
          value = nil;
        };
        return "" + (name) + "=" + (value.$inspect());}, $$32.$$s = self, $$32.$$arity = 2, $$32)).$join(", "));
      result = $rb_plus(result, ">");
      return result;
    }, $Struct_inspect$31.$$arity = 0);
    Opal.alias(self, "to_s", "inspect");
    
    Opal.def(self, '$to_h', $Struct_to_h$33 = function $$to_h() {
      var $$34, self = this;

      return $send(self.$class().$members(), 'each_with_object', [$hash2([], {})], ($$34 = function(name, h){var self = $$34.$$s == null ? this : $$34.$$s, $writer = nil;

      
        
        if (name == null) {
          name = nil;
        };
        
        if (h == null) {
          h = nil;
        };
        $writer = [name, self['$[]'](name)];
        $send(h, '[]=', Opal.to_a($writer));
        return $writer[$rb_minus($writer["length"], 1)];}, $$34.$$s = self, $$34.$$arity = 2, $$34))
    }, $Struct_to_h$33.$$arity = 0);
    
    Opal.def(self, '$values_at', $Struct_values_at$35 = function $$values_at($a) {
      var $post_args, args, $$36, self = this;

      
      
      $post_args = Opal.slice.call(arguments, 0, arguments.length);
      
      args = $post_args;;
      args = $send(args, 'map', [], ($$36 = function(arg){var self = $$36.$$s == null ? this : $$36.$$s;

      
        
        if (arg == null) {
          arg = nil;
        };
        return arg.$$is_range ? arg.$to_a() : arg;}, $$36.$$s = self, $$36.$$arity = 1, $$36)).$flatten();
      
      var result = [];
      for (var i = 0, len = args.length; i < len; i++) {
        if (!args[i].$$is_number) {
          self.$raise($$($nesting, 'TypeError'), "" + "no implicit conversion of " + ((args[i]).$class()) + " into Integer")
        }
        result.push(self['$[]'](args[i]));
      }
      return result;
    ;
    }, $Struct_values_at$35.$$arity = -1);
    return (Opal.def(self, '$dig', $Struct_dig$37 = function $$dig(key, $a) {
      var $post_args, keys, self = this, item = nil;

      
      
      $post_args = Opal.slice.call(arguments, 1, arguments.length);
      
      keys = $post_args;;
      item = (function() {if ($truthy(key.$$is_string && self.$$data.hasOwnProperty(key))) {
        return self.$$data[key] || nil;
      } else {
        return nil
      }; return nil; })();
      
      if (item === nil || keys.length === 0) {
        return item;
      }
    ;
      if ($truthy(item['$respond_to?']("dig"))) {
      } else {
        self.$raise($$($nesting, 'TypeError'), "" + (item.$class()) + " does not have #dig method")
      };
      return $send(item, 'dig', Opal.to_a(keys));
    }, $Struct_dig$37.$$arity = -2), nil) && 'dig';
  })($nesting[0], null, $nesting);
};

/* Generated by Opal 1.0.0 */
Opal.modules["corelib/main"] = function(Opal) {
  var $to_s$1, $include$2, self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.$$$, $$ = Opal.$$;

  Opal.add_stubs(['$include']);
  
  Opal.defs(self, '$to_s', $to_s$1 = function $$to_s() {
    var self = this;

    return "main"
  }, $to_s$1.$$arity = 0);
  return (Opal.defs(self, '$include', $include$2 = function $$include(mod) {
    var self = this;

    return $$($nesting, 'Object').$include(mod)
  }, $include$2.$$arity = 1), nil) && 'include';
};

/* Generated by Opal 1.0.0 */
Opal.modules["corelib/dir"] = function(Opal) {
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.$$$, $$ = Opal.$$, $klass = Opal.klass, $truthy = Opal.truthy;

  Opal.add_stubs(['$[]']);
  return (function($base, $super, $parent_nesting) {
    var self = $klass($base, $super, 'Dir');

    var $nesting = [self].concat($parent_nesting);

    return (function(self, $parent_nesting) {
      var $nesting = [self].concat($parent_nesting), $chdir$1, $pwd$2, $home$3;

      
      
      Opal.def(self, '$chdir', $chdir$1 = function $$chdir(dir) {
        var $iter = $chdir$1.$$p, $yield = $iter || nil, self = this, prev_cwd = nil;

        if ($iter) $chdir$1.$$p = null;
        return (function() { try {
        
        prev_cwd = Opal.current_dir;
        Opal.current_dir = dir;
        return Opal.yieldX($yield, []);;
        } finally {
          Opal.current_dir = prev_cwd
        }; })()
      }, $chdir$1.$$arity = 1);
      
      Opal.def(self, '$pwd', $pwd$2 = function $$pwd() {
        var self = this;

        return Opal.current_dir || '.';
      }, $pwd$2.$$arity = 0);
      Opal.alias(self, "getwd", "pwd");
      return (Opal.def(self, '$home', $home$3 = function $$home() {
        var $a, self = this;

        return ($truthy($a = $$($nesting, 'ENV')['$[]']("HOME")) ? $a : ".")
      }, $home$3.$$arity = 0), nil) && 'home';
    })(Opal.get_singleton_class(self), $nesting)
  })($nesting[0], null, $nesting)
};

/* Generated by Opal 1.0.0 */
Opal.modules["corelib/file"] = function(Opal) {
  function $rb_plus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs + rhs : lhs['$+'](rhs);
  }
  function $rb_minus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs - rhs : lhs['$-'](rhs);
  }
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.$$$, $$ = Opal.$$, $truthy = Opal.truthy, $klass = Opal.klass, $range = Opal.range, $send = Opal.send;

  Opal.add_stubs(['$respond_to?', '$to_path', '$pwd', '$split', '$sub', '$+', '$unshift', '$join', '$home', '$raise', '$start_with?', '$absolute_path', '$coerce_to!', '$basename', '$empty?', '$rindex', '$[]', '$nil?', '$==', '$-', '$length', '$gsub', '$find', '$=~', '$map', '$each_with_index', '$flatten', '$reject', '$to_proc', '$end_with?']);
  return (function($base, $super, $parent_nesting) {
    var self = $klass($base, $super, 'File');

    var $nesting = [self].concat($parent_nesting), windows_root_rx = nil;

    
    Opal.const_set($nesting[0], 'Separator', Opal.const_set($nesting[0], 'SEPARATOR', "/"));
    Opal.const_set($nesting[0], 'ALT_SEPARATOR', nil);
    Opal.const_set($nesting[0], 'PATH_SEPARATOR', ":");
    Opal.const_set($nesting[0], 'FNM_SYSCASE', 0);
    windows_root_rx = /^[a-zA-Z]:(?:\\|\/)/;
    return (function(self, $parent_nesting) {
      var $nesting = [self].concat($parent_nesting), $absolute_path$1, $expand_path$2, $dirname$3, $basename$4, $extname$5, $exist$ques$6, $directory$ques$7, $join$9, $split$12;

      
      
      Opal.def(self, '$absolute_path', $absolute_path$1 = function $$absolute_path(path, basedir) {
        var $a, self = this, sep = nil, sep_chars = nil, new_parts = nil, path_abs = nil, basedir_abs = nil, parts = nil, leading_sep = nil, abs = nil, new_path = nil;

        
        
        if (basedir == null) {
          basedir = nil;
        };
        sep = $$($nesting, 'SEPARATOR');
        sep_chars = $sep_chars();
        new_parts = [];
        path = (function() {if ($truthy(path['$respond_to?']("to_path"))) {
          return path.$to_path()
        } else {
          return path
        }; return nil; })();
        basedir = ($truthy($a = basedir) ? $a : $$($nesting, 'Dir').$pwd());
        path_abs = path.substr(0, sep.length) === sep || windows_root_rx.test(path);
        basedir_abs = basedir.substr(0, sep.length) === sep || windows_root_rx.test(basedir);
        if ($truthy(path_abs)) {
          
          parts = path.$split(Opal.regexp(["[", sep_chars, "]"]));
          leading_sep = windows_root_rx.test(path) ? '' : path.$sub(Opal.regexp(["^([", sep_chars, "]+).*$"]), "\\1");
          abs = true;
        } else {
          
          parts = $rb_plus(basedir.$split(Opal.regexp(["[", sep_chars, "]"])), path.$split(Opal.regexp(["[", sep_chars, "]"])));
          leading_sep = windows_root_rx.test(basedir) ? '' : basedir.$sub(Opal.regexp(["^([", sep_chars, "]+).*$"]), "\\1");
          abs = basedir_abs;
        };
        
        var part;
        for (var i = 0, ii = parts.length; i < ii; i++) {
          part = parts[i];

          if (
            (part === nil) ||
            (part === ''  && ((new_parts.length === 0) || abs)) ||
            (part === '.' && ((new_parts.length === 0) || abs))
          ) {
            continue;
          }
          if (part === '..') {
            new_parts.pop();
          } else {
            new_parts.push(part);
          }
        }

        if (!abs && parts[0] !== '.') {
          new_parts.$unshift(".")
        }
      ;
        new_path = new_parts.$join(sep);
        if ($truthy(abs)) {
          new_path = $rb_plus(leading_sep, new_path)};
        return new_path;
      }, $absolute_path$1.$$arity = -2);
      
      Opal.def(self, '$expand_path', $expand_path$2 = function $$expand_path(path, basedir) {
        var self = this, sep = nil, sep_chars = nil, home = nil, leading_sep = nil, home_path_regexp = nil;

        
        
        if (basedir == null) {
          basedir = nil;
        };
        sep = $$($nesting, 'SEPARATOR');
        sep_chars = $sep_chars();
        if ($truthy(path[0] === '~' || (basedir && basedir[0] === '~'))) {
          
          home = $$($nesting, 'Dir').$home();
          if ($truthy(home)) {
          } else {
            self.$raise($$($nesting, 'ArgumentError'), "couldn't find HOME environment -- expanding `~'")
          };
          leading_sep = windows_root_rx.test(home) ? '' : home.$sub(Opal.regexp(["^([", sep_chars, "]+).*$"]), "\\1");
          if ($truthy(home['$start_with?'](leading_sep))) {
          } else {
            self.$raise($$($nesting, 'ArgumentError'), "non-absolute home")
          };
          home = $rb_plus(home, sep);
          home_path_regexp = Opal.regexp(["^\\~(?:", sep, "|$)"]);
          path = path.$sub(home_path_regexp, home);
          if ($truthy(basedir)) {
            basedir = basedir.$sub(home_path_regexp, home)};};
        return self.$absolute_path(path, basedir);
      }, $expand_path$2.$$arity = -2);
      Opal.alias(self, "realpath", "expand_path");
      
      // Coerce a given path to a path string using #to_path and #to_str
      function $coerce_to_path(path) {
        if ($truthy((path)['$respond_to?']("to_path"))) {
          path = path.$to_path();
        }

        path = $$($nesting, 'Opal')['$coerce_to!'](path, $$($nesting, 'String'), "to_str");

        return path;
      }

      // Return a RegExp compatible char class
      function $sep_chars() {
        if ($$($nesting, 'ALT_SEPARATOR') === nil) {
          return Opal.escape_regexp($$($nesting, 'SEPARATOR'));
        } else {
          return Opal.escape_regexp($rb_plus($$($nesting, 'SEPARATOR'), $$($nesting, 'ALT_SEPARATOR')));
        }
      }
    ;
      
      Opal.def(self, '$dirname', $dirname$3 = function $$dirname(path) {
        var self = this, sep_chars = nil;

        
        sep_chars = $sep_chars();
        path = $coerce_to_path(path);
        
        var absolute = path.match(new RegExp("" + "^[" + (sep_chars) + "]"));

        path = path.replace(new RegExp("" + "[" + (sep_chars) + "]+$"), ''); // remove trailing separators
        path = path.replace(new RegExp("" + "[^" + (sep_chars) + "]+$"), ''); // remove trailing basename
        path = path.replace(new RegExp("" + "[" + (sep_chars) + "]+$"), ''); // remove final trailing separators

        if (path === '') {
          return absolute ? '/' : '.';
        }

        return path;
      ;
      }, $dirname$3.$$arity = 1);
      
      Opal.def(self, '$basename', $basename$4 = function $$basename(name, suffix) {
        var self = this, sep_chars = nil;

        
        
        if (suffix == null) {
          suffix = nil;
        };
        sep_chars = $sep_chars();
        name = $coerce_to_path(name);
        
        if (name.length == 0) {
          return name;
        }

        if (suffix !== nil) {
          suffix = $$($nesting, 'Opal')['$coerce_to!'](suffix, $$($nesting, 'String'), "to_str")
        } else {
          suffix = null;
        }

        name = name.replace(new RegExp("" + "(.)[" + (sep_chars) + "]*$"), '$1');
        name = name.replace(new RegExp("" + "^(?:.*[" + (sep_chars) + "])?([^" + (sep_chars) + "]+)$"), '$1');

        if (suffix === ".*") {
          name = name.replace(/\.[^\.]+$/, '');
        } else if(suffix !== null) {
          suffix = Opal.escape_regexp(suffix);
          name = name.replace(new RegExp("" + (suffix) + "$"), '');
        }

        return name;
      ;
      }, $basename$4.$$arity = -2);
      
      Opal.def(self, '$extname', $extname$5 = function $$extname(path) {
        var $a, self = this, filename = nil, last_dot_idx = nil;

        
        path = $coerce_to_path(path);
        filename = self.$basename(path);
        if ($truthy(filename['$empty?']())) {
          return ""};
        last_dot_idx = filename['$[]']($range(1, -1, false)).$rindex(".");
        if ($truthy(($truthy($a = last_dot_idx['$nil?']()) ? $a : $rb_plus(last_dot_idx, 1)['$==']($rb_minus(filename.$length(), 1))))) {
          return ""
        } else {
          return filename['$[]'](Opal.Range.$new($rb_plus(last_dot_idx, 1), -1, false))
        };
      }, $extname$5.$$arity = 1);
      
      Opal.def(self, '$exist?', $exist$ques$6 = function(path) {
        var self = this;

        return Opal.modules[path] != null
      }, $exist$ques$6.$$arity = 1);
      Opal.alias(self, "exists?", "exist?");
      
      Opal.def(self, '$directory?', $directory$ques$7 = function(path) {
        var $$8, self = this, files = nil, file = nil;

        
        files = [];
        
        for (var key in Opal.modules) {
          files.push(key)
        }
      ;
        path = path.$gsub(Opal.regexp(["(^.", $$($nesting, 'SEPARATOR'), "+|", $$($nesting, 'SEPARATOR'), "+$)"]));
        file = $send(files, 'find', [], ($$8 = function(f){var self = $$8.$$s == null ? this : $$8.$$s;

        
          
          if (f == null) {
            f = nil;
          };
          return f['$=~'](Opal.regexp(["^", path]));}, $$8.$$s = self, $$8.$$arity = 1, $$8));
        return file;
      }, $directory$ques$7.$$arity = 1);
      
      Opal.def(self, '$join', $join$9 = function $$join($a) {
        var $post_args, paths, $$10, $$11, self = this, result = nil;

        
        
        $post_args = Opal.slice.call(arguments, 0, arguments.length);
        
        paths = $post_args;;
        if ($truthy(paths['$empty?']())) {
          return ""};
        result = "";
        paths = $send(paths.$flatten().$each_with_index(), 'map', [], ($$10 = function(item, index){var self = $$10.$$s == null ? this : $$10.$$s, $b;

        
          
          if (item == null) {
            item = nil;
          };
          
          if (index == null) {
            index = nil;
          };
          if ($truthy((($b = index['$=='](0)) ? item['$empty?']() : index['$=='](0)))) {
            return $$($nesting, 'SEPARATOR')
          } else if ($truthy((($b = paths.$length()['$==']($rb_plus(index, 1))) ? item['$empty?']() : paths.$length()['$==']($rb_plus(index, 1))))) {
            return $$($nesting, 'SEPARATOR')
          } else {
            return item
          };}, $$10.$$s = self, $$10.$$arity = 2, $$10));
        paths = $send(paths, 'reject', [], "empty?".$to_proc());
        $send(paths, 'each_with_index', [], ($$11 = function(item, index){var self = $$11.$$s == null ? this : $$11.$$s, $b, next_item = nil;

        
          
          if (item == null) {
            item = nil;
          };
          
          if (index == null) {
            index = nil;
          };
          next_item = paths['$[]']($rb_plus(index, 1));
          if ($truthy(next_item['$nil?']())) {
            return (result = "" + (result) + (item))
          } else {
            
            if ($truthy(($truthy($b = item['$end_with?']($$($nesting, 'SEPARATOR'))) ? next_item['$start_with?']($$($nesting, 'SEPARATOR')) : $b))) {
              item = item.$sub(Opal.regexp([$$($nesting, 'SEPARATOR'), "+$"]), "")};
            return (result = (function() {if ($truthy(($truthy($b = item['$end_with?']($$($nesting, 'SEPARATOR'))) ? $b : next_item['$start_with?']($$($nesting, 'SEPARATOR'))))) {
              return "" + (result) + (item)
            } else {
              return "" + (result) + (item) + ($$($nesting, 'SEPARATOR'))
            }; return nil; })());
          };}, $$11.$$s = self, $$11.$$arity = 2, $$11));
        return result;
      }, $join$9.$$arity = -1);
      return (Opal.def(self, '$split', $split$12 = function $$split(path) {
        var self = this;

        return path.$split($$($nesting, 'SEPARATOR'))
      }, $split$12.$$arity = 1), nil) && 'split';
    })(Opal.get_singleton_class(self), $nesting);
  })($nesting[0], $$($nesting, 'IO'), $nesting)
};

/* Generated by Opal 1.0.0 */
Opal.modules["corelib/process"] = function(Opal) {
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.$$$, $$ = Opal.$$, $klass = Opal.klass, $truthy = Opal.truthy;

  Opal.add_stubs(['$const_set', '$size', '$<<', '$__register_clock__', '$to_f', '$now', '$new', '$[]', '$raise']);
  
  (function($base, $super, $parent_nesting) {
    var self = $klass($base, $super, 'Process');

    var $nesting = [self].concat($parent_nesting), $Process___register_clock__$1, $Process_pid$2, $Process_times$3, $Process_clock_gettime$4, monotonic = nil;

    
    self.__clocks__ = [];
    Opal.defs(self, '$__register_clock__', $Process___register_clock__$1 = function $$__register_clock__(name, func) {
      var self = this;
      if (self.__clocks__ == null) self.__clocks__ = nil;

      
      self.$const_set(name, self.__clocks__.$size());
      return self.__clocks__['$<<'](func);
    }, $Process___register_clock__$1.$$arity = 2);
    self.$__register_clock__("CLOCK_REALTIME", function() { return Date.now() });
    monotonic = false;
    
    if (Opal.global.performance) {
      monotonic = function() {
        return performance.now()
      };
    }
    else if (Opal.global.process && process.hrtime) {
      // let now be the base to get smaller numbers
      var hrtime_base = process.hrtime();

      monotonic = function() {
        var hrtime = process.hrtime(hrtime_base);
        var us = (hrtime[1] / 1000) | 0; // cut below microsecs;
        return ((hrtime[0] * 1000) + (us / 1000));
      };
    }
  ;
    if ($truthy(monotonic)) {
      self.$__register_clock__("CLOCK_MONOTONIC", monotonic)};
    Opal.defs(self, '$pid', $Process_pid$2 = function $$pid() {
      var self = this;

      return 0
    }, $Process_pid$2.$$arity = 0);
    Opal.defs(self, '$times', $Process_times$3 = function $$times() {
      var self = this, t = nil;

      
      t = $$($nesting, 'Time').$now().$to_f();
      return $$$($$($nesting, 'Benchmark'), 'Tms').$new(t, t, t, t, t);
    }, $Process_times$3.$$arity = 0);
    return (Opal.defs(self, '$clock_gettime', $Process_clock_gettime$4 = function $$clock_gettime(clock_id, unit) {
      var $a, self = this, clock = nil;
      if (self.__clocks__ == null) self.__clocks__ = nil;

      
      
      if (unit == null) {
        unit = "float_second";
      };
      ($truthy($a = (clock = self.__clocks__['$[]'](clock_id))) ? $a : self.$raise($$$($$($nesting, 'Errno'), 'EINVAL'), "" + "clock_gettime(" + (clock_id) + ") " + (self.__clocks__['$[]'](clock_id))));
      
      var ms = clock();
      switch (unit) {
        case 'float_second':      return  (ms / 1000);         // number of seconds as a float (default)
        case 'float_millisecond': return  (ms / 1);            // number of milliseconds as a float
        case 'float_microsecond': return  (ms * 1000);         // number of microseconds as a float
        case 'second':            return ((ms / 1000)    | 0); // number of seconds as an integer
        case 'millisecond':       return ((ms / 1)       | 0); // number of milliseconds as an integer
        case 'microsecond':       return ((ms * 1000)    | 0); // number of microseconds as an integer
        case 'nanosecond':        return ((ms * 1000000) | 0); // number of nanoseconds as an integer
        default: self.$raise($$($nesting, 'ArgumentError'), "" + "unexpected unit: " + (unit))
      }
    ;
    }, $Process_clock_gettime$4.$$arity = -2), nil) && 'clock_gettime';
  })($nesting[0], null, $nesting);
  (function($base, $super, $parent_nesting) {
    var self = $klass($base, $super, 'Signal');

    var $nesting = [self].concat($parent_nesting), $Signal_trap$5;

    return (Opal.defs(self, '$trap', $Signal_trap$5 = function $$trap($a) {
      var $post_args, self = this;

      
      
      $post_args = Opal.slice.call(arguments, 0, arguments.length);
      ;
      return nil;
    }, $Signal_trap$5.$$arity = -1), nil) && 'trap'
  })($nesting[0], null, $nesting);
  return (function($base, $super, $parent_nesting) {
    var self = $klass($base, $super, 'GC');

    var $nesting = [self].concat($parent_nesting), $GC_start$6;

    return (Opal.defs(self, '$start', $GC_start$6 = function $$start() {
      var self = this;

      return nil
    }, $GC_start$6.$$arity = 0), nil) && 'start'
  })($nesting[0], null, $nesting);
};

/* Generated by Opal 1.0.0 */
Opal.modules["corelib/random"] = function(Opal) {
  function $rb_lt(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs < rhs : lhs['$<'](rhs);
  }
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.$$$, $$ = Opal.$$, $klass = Opal.klass, $truthy = Opal.truthy, $send = Opal.send;

  Opal.add_stubs(['$attr_reader', '$new_seed', '$coerce_to!', '$reseed', '$rand', '$seed', '$<', '$raise', '$encode', '$join', '$new', '$chr', '$===', '$==', '$state', '$const_defined?', '$const_set']);
  return (function($base, $super, $parent_nesting) {
    var self = $klass($base, $super, 'Random');

    var $nesting = [self].concat($parent_nesting), $Random_initialize$1, $Random_reseed$2, $Random_new_seed$3, $Random_rand$4, $Random_srand$5, $Random_urandom$6, $Random_$eq_eq$8, $Random_bytes$9, $Random_rand$11, $Random_generator$eq$12;

    
    self.$attr_reader("seed", "state");
    
    Opal.def(self, '$initialize', $Random_initialize$1 = function $$initialize(seed) {
      var self = this;

      
      
      if (seed == null) {
        seed = $$($nesting, 'Random').$new_seed();
      };
      seed = $$($nesting, 'Opal')['$coerce_to!'](seed, $$($nesting, 'Integer'), "to_int");
      self.state = seed;
      return self.$reseed(seed);
    }, $Random_initialize$1.$$arity = -1);
    
    Opal.def(self, '$reseed', $Random_reseed$2 = function $$reseed(seed) {
      var self = this;

      
      self.seed = seed;
      return self.$rng = Opal.$$rand.reseed(seed);;
    }, $Random_reseed$2.$$arity = 1);
    Opal.defs(self, '$new_seed', $Random_new_seed$3 = function $$new_seed() {
      var self = this;

      return Opal.$$rand.new_seed();
    }, $Random_new_seed$3.$$arity = 0);
    Opal.defs(self, '$rand', $Random_rand$4 = function $$rand(limit) {
      var self = this;

      
      ;
      return $$($nesting, 'DEFAULT').$rand(limit);
    }, $Random_rand$4.$$arity = -1);
    Opal.defs(self, '$srand', $Random_srand$5 = function $$srand(n) {
      var self = this, previous_seed = nil;

      
      
      if (n == null) {
        n = $$($nesting, 'Random').$new_seed();
      };
      n = $$($nesting, 'Opal')['$coerce_to!'](n, $$($nesting, 'Integer'), "to_int");
      previous_seed = $$($nesting, 'DEFAULT').$seed();
      $$($nesting, 'DEFAULT').$reseed(n);
      return previous_seed;
    }, $Random_srand$5.$$arity = -1);
    Opal.defs(self, '$urandom', $Random_urandom$6 = function $$urandom(size) {
      var $$7, self = this;

      
      size = $$($nesting, 'Opal')['$coerce_to!'](size, $$($nesting, 'Integer'), "to_int");
      if ($truthy($rb_lt(size, 0))) {
        self.$raise($$($nesting, 'ArgumentError'), "negative string size (or size too big)")};
      return $send($$($nesting, 'Array'), 'new', [size], ($$7 = function(){var self = $$7.$$s == null ? this : $$7.$$s;

      return self.$rand(255).$chr()}, $$7.$$s = self, $$7.$$arity = 0, $$7)).$join().$encode("ASCII-8BIT");
    }, $Random_urandom$6.$$arity = 1);
    
    Opal.def(self, '$==', $Random_$eq_eq$8 = function(other) {
      var $a, self = this;

      
      if ($truthy($$($nesting, 'Random')['$==='](other))) {
      } else {
        return false
      };
      return (($a = self.$seed()['$=='](other.$seed())) ? self.$state()['$=='](other.$state()) : self.$seed()['$=='](other.$seed()));
    }, $Random_$eq_eq$8.$$arity = 1);
    
    Opal.def(self, '$bytes', $Random_bytes$9 = function $$bytes(length) {
      var $$10, self = this;

      
      length = $$($nesting, 'Opal')['$coerce_to!'](length, $$($nesting, 'Integer'), "to_int");
      return $send($$($nesting, 'Array'), 'new', [length], ($$10 = function(){var self = $$10.$$s == null ? this : $$10.$$s;

      return self.$rand(255).$chr()}, $$10.$$s = self, $$10.$$arity = 0, $$10)).$join().$encode("ASCII-8BIT");
    }, $Random_bytes$9.$$arity = 1);
    
    Opal.def(self, '$rand', $Random_rand$11 = function $$rand(limit) {
      var self = this;

      
      ;
      
      function randomFloat() {
        self.state++;
        return Opal.$$rand.rand(self.$rng);
      }

      function randomInt() {
        return Math.floor(randomFloat() * limit);
      }

      function randomRange() {
        var min = limit.begin,
            max = limit.end;

        if (min === nil || max === nil) {
          return nil;
        }

        var length = max - min;

        if (length < 0) {
          return nil;
        }

        if (length === 0) {
          return min;
        }

        if (max % 1 === 0 && min % 1 === 0 && !limit.excl) {
          length++;
        }

        return self.$rand(length) + min;
      }

      if (limit == null) {
        return randomFloat();
      } else if (limit.$$is_range) {
        return randomRange();
      } else if (limit.$$is_number) {
        if (limit <= 0) {
          self.$raise($$($nesting, 'ArgumentError'), "" + "invalid argument - " + (limit))
        }

        if (limit % 1 === 0) {
          // integer
          return randomInt();
        } else {
          return randomFloat() * limit;
        }
      } else {
        limit = $$($nesting, 'Opal')['$coerce_to!'](limit, $$($nesting, 'Integer'), "to_int");

        if (limit <= 0) {
          self.$raise($$($nesting, 'ArgumentError'), "" + "invalid argument - " + (limit))
        }

        return randomInt();
      }
    ;
    }, $Random_rand$11.$$arity = -1);
    return (Opal.defs(self, '$generator=', $Random_generator$eq$12 = function(generator) {
      var self = this;

      
      Opal.$$rand = generator;
      if ($truthy(self['$const_defined?']("DEFAULT"))) {
        return $$($nesting, 'DEFAULT').$reseed()
      } else {
        return self.$const_set("DEFAULT", self.$new(self.$new_seed()))
      };
    }, $Random_generator$eq$12.$$arity = 1), nil) && 'generator=';
  })($nesting[0], null, $nesting)
};

/* Generated by Opal 1.0.0 */
Opal.modules["corelib/random/mersenne_twister"] = function(Opal) {
  function $rb_minus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs - rhs : lhs['$-'](rhs);
  }
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.$$$, $$ = Opal.$$, $klass = Opal.klass, $send = Opal.send, mersenne_twister = nil;

  Opal.add_stubs(['$generator=', '$-']);
  
  mersenne_twister = (function() {
  /* Period parameters */
  var N = 624;
  var M = 397;
  var MATRIX_A = 0x9908b0df;      /* constant vector a */
  var UMASK = 0x80000000;         /* most significant w-r bits */
  var LMASK = 0x7fffffff;         /* least significant r bits */
  var MIXBITS = function(u,v) { return ( ((u) & UMASK) | ((v) & LMASK) ); };
  var TWIST = function(u,v) { return (MIXBITS((u),(v)) >>> 1) ^ ((v & 0x1) ? MATRIX_A : 0x0); };

  function init(s) {
    var mt = {left: 0, next: N, state: new Array(N)};
    init_genrand(mt, s);
    return mt;
  }

  /* initializes mt[N] with a seed */
  function init_genrand(mt, s) {
    var j, i;
    mt.state[0] = s >>> 0;
    for (j=1; j<N; j++) {
      mt.state[j] = (1812433253 * ((mt.state[j-1] ^ (mt.state[j-1] >> 30) >>> 0)) + j);
      /* See Knuth TAOCP Vol2. 3rd Ed. P.106 for multiplier. */
      /* In the previous versions, MSBs of the seed affect   */
      /* only MSBs of the array state[].                     */
      /* 2002/01/09 modified by Makoto Matsumoto             */
      mt.state[j] &= 0xffffffff;  /* for >32 bit machines */
    }
    mt.left = 1;
    mt.next = N;
  }

  /* generate N words at one time */
  function next_state(mt) {
    var p = 0, _p = mt.state;
    var j;

    mt.left = N;
    mt.next = 0;

    for (j=N-M+1; --j; p++)
      _p[p] = _p[p+(M)] ^ TWIST(_p[p+(0)], _p[p+(1)]);

    for (j=M; --j; p++)
      _p[p] = _p[p+(M-N)] ^ TWIST(_p[p+(0)], _p[p+(1)]);

    _p[p] = _p[p+(M-N)] ^ TWIST(_p[p+(0)], _p[0]);
  }

  /* generates a random number on [0,0xffffffff]-interval */
  function genrand_int32(mt) {
    /* mt must be initialized */
    var y;

    if (--mt.left <= 0) next_state(mt);
    y = mt.state[mt.next++];

    /* Tempering */
    y ^= (y >>> 11);
    y ^= (y << 7) & 0x9d2c5680;
    y ^= (y << 15) & 0xefc60000;
    y ^= (y >>> 18);

    return y >>> 0;
  }

  function int_pair_to_real_exclusive(a, b) {
    a >>>= 5;
    b >>>= 6;
    return(a*67108864.0+b)*(1.0/9007199254740992.0);
  }

  // generates a random number on [0,1) with 53-bit resolution
  function genrand_real(mt) {
    /* mt must be initialized */
    var a = genrand_int32(mt), b = genrand_int32(mt);
    return int_pair_to_real_exclusive(a, b);
  }

  return { genrand_real: genrand_real, init: init };
})();
  return (function($base, $super, $parent_nesting) {
    var self = $klass($base, $super, 'Random');

    var $nesting = [self].concat($parent_nesting), $writer = nil;

    
    var MAX_INT = Number.MAX_SAFE_INTEGER || Math.pow(2, 53) - 1;
    Opal.const_set($nesting[0], 'MERSENNE_TWISTER_GENERATOR', {
    new_seed: function() { return Math.round(Math.random() * MAX_INT); },
    reseed: function(seed) { return mersenne_twister.init(seed); },
    rand: function(mt) { return mersenne_twister.genrand_real(mt); }
  });
    
    $writer = [$$($nesting, 'MERSENNE_TWISTER_GENERATOR')];
    $send(self, 'generator=', Opal.to_a($writer));
    return $writer[$rb_minus($writer["length"], 1)];;
  })($nesting[0], null, $nesting);
};

/* Generated by Opal 1.0.0 */
Opal.modules["corelib/unsupported"] = function(Opal) {
  var $public$35, $private$36, self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.$$$, $$ = Opal.$$, $klass = Opal.klass, $module = Opal.module;

  Opal.add_stubs(['$raise', '$warn', '$%']);
  
  
  var warnings = {};

  function handle_unsupported_feature(message) {
    switch (Opal.config.unsupported_features_severity) {
    case 'error':
      $$($nesting, 'Kernel').$raise($$($nesting, 'NotImplementedError'), message)
      break;
    case 'warning':
      warn(message)
      break;
    default: // ignore
      // noop
    }
  }

  function warn(string) {
    if (warnings[string]) {
      return;
    }

    warnings[string] = true;
    self.$warn(string);
  }
;
  (function($base, $super, $parent_nesting) {
    var self = $klass($base, $super, 'String');

    var $nesting = [self].concat($parent_nesting), $String_$lt$lt$1, $String_capitalize$excl$2, $String_chomp$excl$3, $String_chop$excl$4, $String_downcase$excl$5, $String_gsub$excl$6, $String_lstrip$excl$7, $String_next$excl$8, $String_reverse$excl$9, $String_slice$excl$10, $String_squeeze$excl$11, $String_strip$excl$12, $String_sub$excl$13, $String_succ$excl$14, $String_swapcase$excl$15, $String_tr$excl$16, $String_tr_s$excl$17, $String_upcase$excl$18, $String_prepend$19, $String_$$$eq$20, $String_clear$21, $String_encode$excl$22, $String_unicode_normalize$excl$23;

    
    var ERROR = "String#%s not supported. Mutable String methods are not supported in Opal.";
    
    Opal.def(self, '$<<', $String_$lt$lt$1 = function($a) {
      var $post_args, self = this;

      
      
      $post_args = Opal.slice.call(arguments, 0, arguments.length);
      ;
      return self.$raise($$($nesting, 'NotImplementedError'), (ERROR)['$%']("<<"));
    }, $String_$lt$lt$1.$$arity = -1);
    
    Opal.def(self, '$capitalize!', $String_capitalize$excl$2 = function($a) {
      var $post_args, self = this;

      
      
      $post_args = Opal.slice.call(arguments, 0, arguments.length);
      ;
      return self.$raise($$($nesting, 'NotImplementedError'), (ERROR)['$%']("capitalize!"));
    }, $String_capitalize$excl$2.$$arity = -1);
    
    Opal.def(self, '$chomp!', $String_chomp$excl$3 = function($a) {
      var $post_args, self = this;

      
      
      $post_args = Opal.slice.call(arguments, 0, arguments.length);
      ;
      return self.$raise($$($nesting, 'NotImplementedError'), (ERROR)['$%']("chomp!"));
    }, $String_chomp$excl$3.$$arity = -1);
    
    Opal.def(self, '$chop!', $String_chop$excl$4 = function($a) {
      var $post_args, self = this;

      
      
      $post_args = Opal.slice.call(arguments, 0, arguments.length);
      ;
      return self.$raise($$($nesting, 'NotImplementedError'), (ERROR)['$%']("chop!"));
    }, $String_chop$excl$4.$$arity = -1);
    
    Opal.def(self, '$downcase!', $String_downcase$excl$5 = function($a) {
      var $post_args, self = this;

      
      
      $post_args = Opal.slice.call(arguments, 0, arguments.length);
      ;
      return self.$raise($$($nesting, 'NotImplementedError'), (ERROR)['$%']("downcase!"));
    }, $String_downcase$excl$5.$$arity = -1);
    
    Opal.def(self, '$gsub!', $String_gsub$excl$6 = function($a) {
      var $post_args, self = this;

      
      
      $post_args = Opal.slice.call(arguments, 0, arguments.length);
      ;
      return self.$raise($$($nesting, 'NotImplementedError'), (ERROR)['$%']("gsub!"));
    }, $String_gsub$excl$6.$$arity = -1);
    
    Opal.def(self, '$lstrip!', $String_lstrip$excl$7 = function($a) {
      var $post_args, self = this;

      
      
      $post_args = Opal.slice.call(arguments, 0, arguments.length);
      ;
      return self.$raise($$($nesting, 'NotImplementedError'), (ERROR)['$%']("lstrip!"));
    }, $String_lstrip$excl$7.$$arity = -1);
    
    Opal.def(self, '$next!', $String_next$excl$8 = function($a) {
      var $post_args, self = this;

      
      
      $post_args = Opal.slice.call(arguments, 0, arguments.length);
      ;
      return self.$raise($$($nesting, 'NotImplementedError'), (ERROR)['$%']("next!"));
    }, $String_next$excl$8.$$arity = -1);
    
    Opal.def(self, '$reverse!', $String_reverse$excl$9 = function($a) {
      var $post_args, self = this;

      
      
      $post_args = Opal.slice.call(arguments, 0, arguments.length);
      ;
      return self.$raise($$($nesting, 'NotImplementedError'), (ERROR)['$%']("reverse!"));
    }, $String_reverse$excl$9.$$arity = -1);
    
    Opal.def(self, '$slice!', $String_slice$excl$10 = function($a) {
      var $post_args, self = this;

      
      
      $post_args = Opal.slice.call(arguments, 0, arguments.length);
      ;
      return self.$raise($$($nesting, 'NotImplementedError'), (ERROR)['$%']("slice!"));
    }, $String_slice$excl$10.$$arity = -1);
    
    Opal.def(self, '$squeeze!', $String_squeeze$excl$11 = function($a) {
      var $post_args, self = this;

      
      
      $post_args = Opal.slice.call(arguments, 0, arguments.length);
      ;
      return self.$raise($$($nesting, 'NotImplementedError'), (ERROR)['$%']("squeeze!"));
    }, $String_squeeze$excl$11.$$arity = -1);
    
    Opal.def(self, '$strip!', $String_strip$excl$12 = function($a) {
      var $post_args, self = this;

      
      
      $post_args = Opal.slice.call(arguments, 0, arguments.length);
      ;
      return self.$raise($$($nesting, 'NotImplementedError'), (ERROR)['$%']("strip!"));
    }, $String_strip$excl$12.$$arity = -1);
    
    Opal.def(self, '$sub!', $String_sub$excl$13 = function($a) {
      var $post_args, self = this;

      
      
      $post_args = Opal.slice.call(arguments, 0, arguments.length);
      ;
      return self.$raise($$($nesting, 'NotImplementedError'), (ERROR)['$%']("sub!"));
    }, $String_sub$excl$13.$$arity = -1);
    
    Opal.def(self, '$succ!', $String_succ$excl$14 = function($a) {
      var $post_args, self = this;

      
      
      $post_args = Opal.slice.call(arguments, 0, arguments.length);
      ;
      return self.$raise($$($nesting, 'NotImplementedError'), (ERROR)['$%']("succ!"));
    }, $String_succ$excl$14.$$arity = -1);
    
    Opal.def(self, '$swapcase!', $String_swapcase$excl$15 = function($a) {
      var $post_args, self = this;

      
      
      $post_args = Opal.slice.call(arguments, 0, arguments.length);
      ;
      return self.$raise($$($nesting, 'NotImplementedError'), (ERROR)['$%']("swapcase!"));
    }, $String_swapcase$excl$15.$$arity = -1);
    
    Opal.def(self, '$tr!', $String_tr$excl$16 = function($a) {
      var $post_args, self = this;

      
      
      $post_args = Opal.slice.call(arguments, 0, arguments.length);
      ;
      return self.$raise($$($nesting, 'NotImplementedError'), (ERROR)['$%']("tr!"));
    }, $String_tr$excl$16.$$arity = -1);
    
    Opal.def(self, '$tr_s!', $String_tr_s$excl$17 = function($a) {
      var $post_args, self = this;

      
      
      $post_args = Opal.slice.call(arguments, 0, arguments.length);
      ;
      return self.$raise($$($nesting, 'NotImplementedError'), (ERROR)['$%']("tr_s!"));
    }, $String_tr_s$excl$17.$$arity = -1);
    
    Opal.def(self, '$upcase!', $String_upcase$excl$18 = function($a) {
      var $post_args, self = this;

      
      
      $post_args = Opal.slice.call(arguments, 0, arguments.length);
      ;
      return self.$raise($$($nesting, 'NotImplementedError'), (ERROR)['$%']("upcase!"));
    }, $String_upcase$excl$18.$$arity = -1);
    
    Opal.def(self, '$prepend', $String_prepend$19 = function $$prepend($a) {
      var $post_args, self = this;

      
      
      $post_args = Opal.slice.call(arguments, 0, arguments.length);
      ;
      return self.$raise($$($nesting, 'NotImplementedError'), (ERROR)['$%']("prepend"));
    }, $String_prepend$19.$$arity = -1);
    
    Opal.def(self, '$[]=', $String_$$$eq$20 = function($a) {
      var $post_args, self = this;

      
      
      $post_args = Opal.slice.call(arguments, 0, arguments.length);
      ;
      return self.$raise($$($nesting, 'NotImplementedError'), (ERROR)['$%']("[]="));
    }, $String_$$$eq$20.$$arity = -1);
    
    Opal.def(self, '$clear', $String_clear$21 = function $$clear($a) {
      var $post_args, self = this;

      
      
      $post_args = Opal.slice.call(arguments, 0, arguments.length);
      ;
      return self.$raise($$($nesting, 'NotImplementedError'), (ERROR)['$%']("clear"));
    }, $String_clear$21.$$arity = -1);
    
    Opal.def(self, '$encode!', $String_encode$excl$22 = function($a) {
      var $post_args, self = this;

      
      
      $post_args = Opal.slice.call(arguments, 0, arguments.length);
      ;
      return self.$raise($$($nesting, 'NotImplementedError'), (ERROR)['$%']("encode!"));
    }, $String_encode$excl$22.$$arity = -1);
    return (Opal.def(self, '$unicode_normalize!', $String_unicode_normalize$excl$23 = function($a) {
      var $post_args, self = this;

      
      
      $post_args = Opal.slice.call(arguments, 0, arguments.length);
      ;
      return self.$raise($$($nesting, 'NotImplementedError'), (ERROR)['$%']("unicode_normalize!"));
    }, $String_unicode_normalize$excl$23.$$arity = -1), nil) && 'unicode_normalize!';
  })($nesting[0], null, $nesting);
  (function($base, $parent_nesting) {
    var self = $module($base, 'Kernel');

    var $nesting = [self].concat($parent_nesting), $Kernel_freeze$24, $Kernel_frozen$ques$25;

    
    var ERROR = "Object freezing is not supported by Opal";
    
    Opal.def(self, '$freeze', $Kernel_freeze$24 = function $$freeze() {
      var self = this;

      
      handle_unsupported_feature(ERROR);
      return self;
    }, $Kernel_freeze$24.$$arity = 0);
    
    Opal.def(self, '$frozen?', $Kernel_frozen$ques$25 = function() {
      var self = this;

      
      handle_unsupported_feature(ERROR);
      return false;
    }, $Kernel_frozen$ques$25.$$arity = 0);
  })($nesting[0], $nesting);
  (function($base, $parent_nesting) {
    var self = $module($base, 'Kernel');

    var $nesting = [self].concat($parent_nesting), $Kernel_taint$26, $Kernel_untaint$27, $Kernel_tainted$ques$28;

    
    var ERROR = "Object tainting is not supported by Opal";
    
    Opal.def(self, '$taint', $Kernel_taint$26 = function $$taint() {
      var self = this;

      
      handle_unsupported_feature(ERROR);
      return self;
    }, $Kernel_taint$26.$$arity = 0);
    
    Opal.def(self, '$untaint', $Kernel_untaint$27 = function $$untaint() {
      var self = this;

      
      handle_unsupported_feature(ERROR);
      return self;
    }, $Kernel_untaint$27.$$arity = 0);
    
    Opal.def(self, '$tainted?', $Kernel_tainted$ques$28 = function() {
      var self = this;

      
      handle_unsupported_feature(ERROR);
      return false;
    }, $Kernel_tainted$ques$28.$$arity = 0);
  })($nesting[0], $nesting);
  (function($base, $super, $parent_nesting) {
    var self = $klass($base, $super, 'Module');

    var $nesting = [self].concat($parent_nesting), $Module_public$29, $Module_private_class_method$30, $Module_private_method_defined$ques$31, $Module_private_constant$32;

    
    
    Opal.def(self, '$public', $Module_public$29 = function($a) {
      var $post_args, methods, self = this;

      
      
      $post_args = Opal.slice.call(arguments, 0, arguments.length);
      
      methods = $post_args;;
      
      if (methods.length === 0) {
        self.$$module_function = false;
      }

      return nil;
    ;
    }, $Module_public$29.$$arity = -1);
    Opal.alias(self, "private", "public");
    Opal.alias(self, "protected", "public");
    Opal.alias(self, "nesting", "public");
    
    Opal.def(self, '$private_class_method', $Module_private_class_method$30 = function $$private_class_method($a) {
      var $post_args, self = this;

      
      
      $post_args = Opal.slice.call(arguments, 0, arguments.length);
      ;
      return self;
    }, $Module_private_class_method$30.$$arity = -1);
    Opal.alias(self, "public_class_method", "private_class_method");
    
    Opal.def(self, '$private_method_defined?', $Module_private_method_defined$ques$31 = function(obj) {
      var self = this;

      return false
    }, $Module_private_method_defined$ques$31.$$arity = 1);
    
    Opal.def(self, '$private_constant', $Module_private_constant$32 = function $$private_constant($a) {
      var $post_args, self = this;

      
      
      $post_args = Opal.slice.call(arguments, 0, arguments.length);
      ;
      return nil;
    }, $Module_private_constant$32.$$arity = -1);
    Opal.alias(self, "protected_method_defined?", "private_method_defined?");
    Opal.alias(self, "public_instance_methods", "instance_methods");
    Opal.alias(self, "public_instance_method", "instance_method");
    return Opal.alias(self, "public_method_defined?", "method_defined?");
  })($nesting[0], null, $nesting);
  (function($base, $parent_nesting) {
    var self = $module($base, 'Kernel');

    var $nesting = [self].concat($parent_nesting), $Kernel_private_methods$33;

    
    
    Opal.def(self, '$private_methods', $Kernel_private_methods$33 = function $$private_methods($a) {
      var $post_args, self = this;

      
      
      $post_args = Opal.slice.call(arguments, 0, arguments.length);
      ;
      return [];
    }, $Kernel_private_methods$33.$$arity = -1);
    Opal.alias(self, "private_instance_methods", "private_methods");
  })($nesting[0], $nesting);
  (function($base, $parent_nesting) {
    var self = $module($base, 'Kernel');

    var $nesting = [self].concat($parent_nesting), $Kernel_eval$34;

    
    Opal.def(self, '$eval', $Kernel_eval$34 = function($a) {
      var $post_args, self = this;

      
      
      $post_args = Opal.slice.call(arguments, 0, arguments.length);
      ;
      return self.$raise($$($nesting, 'NotImplementedError'), "" + "To use Kernel#eval, you must first require 'opal-parser'. " + ("" + "See https://github.com/opal/opal/blob/" + ($$($nesting, 'RUBY_ENGINE_VERSION')) + "/docs/opal_parser.md for details."));
    }, $Kernel_eval$34.$$arity = -1)
  })($nesting[0], $nesting);
  Opal.defs(self, '$public', $public$35 = function($a) {
    var $post_args, self = this;

    
    
    $post_args = Opal.slice.call(arguments, 0, arguments.length);
    ;
    return nil;
  }, $public$35.$$arity = -1);
  return (Opal.defs(self, '$private', $private$36 = function($a) {
    var $post_args, self = this;

    
    
    $post_args = Opal.slice.call(arguments, 0, arguments.length);
    ;
    return nil;
  }, $private$36.$$arity = -1), nil) && 'private';
};

/* Generated by Opal 1.0.0 */
(function(Opal) {
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.$$$, $$ = Opal.$$;

  Opal.add_stubs(['$require']);
  
  self.$require("opal/base");
  self.$require("opal/mini");
  self.$require("corelib/kernel/format");
  self.$require("corelib/string/encoding");
  self.$require("corelib/math");
  self.$require("corelib/complex");
  self.$require("corelib/rational");
  self.$require("corelib/time");
  self.$require("corelib/struct");
  self.$require("corelib/io");
  self.$require("corelib/main");
  self.$require("corelib/dir");
  self.$require("corelib/file");
  self.$require("corelib/process");
  self.$require("corelib/random");
  self.$require("corelib/random/mersenne_twister");
  return self.$require("corelib/unsupported");
})(Opal);

/* Generated by Opal 1.0.0 */
Opal.modules["corelib/pack_unpack/format_string_parser"] = function(Opal) {
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.$$$, $$ = Opal.$$, $module = Opal.module;

  Opal.add_stubs(['$raise']);
  return (function($base, $parent_nesting) {
    var self = $module($base, 'PackUnpack');

    var $nesting = [self].concat($parent_nesting);

    
    var directives = [
      // Integer
      'C',
      'S',
      'L',
      'Q',
      'J',

      'c',
      's',
      'l',
      'q',
      'j',

      'n',
      'N',
      'v',
      'V',

      'U',
      'w',

      // Float
      'D',
      'd',
      'F',
      'f',
      'E',
      'e',
      'G',
      'g',

      // String
      'A',
      'a',
      'Z',
      'B',
      'b',
      'H',
      'h',
      'u',
      'M',
      'm',

      'P',
      'p',

      // Misc
      '@',
      'X',
      'x'
    ];

    var modifiers = [
      '!', // ignored
      '_', // ignored
      '>', // big endian
      '<'  // little endian
    ];

    self.eachDirectiveAndCount = function(format, callback) {
      var currentDirective,
          currentCount,
          currentModifiers,
          countSpecified;

      function reset() {
        currentDirective = null;
        currentCount = 0;
        currentModifiers = [];
        countSpecified = false;
      }

      reset();

      function yieldAndReset() {
        if (currentDirective == null) {
          reset();
          return;
        }

        var directiveSupportsModifiers = /[sSiIlLqQjJ]/.test(currentDirective);

        if (!directiveSupportsModifiers && currentModifiers.length > 0) {
          self.$raise($$($nesting, 'ArgumentError'), "" + "'" + (currentModifiers[0]) + "' allowed only after types sSiIlLqQjJ")
        }

        if (currentModifiers.indexOf('<') !== -1 && currentModifiers.indexOf('>') !== -1) {
          self.$raise($$($nesting, 'RangeError'), "Can't use both '<' and '>'")
        }

        if (!countSpecified) {
          currentCount = 1;
        }

        if (currentModifiers.indexOf('>') !== -1) {
          currentDirective = currentDirective + '>';
        }

        callback(currentDirective, currentCount);

        reset();
      }

      for (var i = 0; i < format.length; i++) {
        var currentChar = format[i];

        if (directives.indexOf(currentChar) !== -1) {
          // Directive char always resets current state
          yieldAndReset();
          currentDirective = currentChar;
        } else if (currentDirective) {
          if (/\d/.test(currentChar)) {
            // Count can be represented as a sequence of digits
            currentCount = currentCount * 10 + parseInt(currentChar, 10);
            countSpecified = true;
          } else if (currentChar === '*' && countSpecified === false) {
            // Count can be represented by a star character
            currentCount = Infinity;
            countSpecified = true;
          } else if (modifiers.indexOf(currentChar) !== -1 && countSpecified === false) {
            // Directives can be specified only after directive and before count
            currentModifiers.push(currentChar);
          } else {
            yieldAndReset();
          }
        }
      }

      yieldAndReset();
    }
  
  })($nesting[0], $nesting)
};

/* Generated by Opal 1.0.0 */
Opal.modules["corelib/string/unpack"] = function(Opal) {
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.$$$, $$ = Opal.$$, $klass = Opal.klass;

  Opal.add_stubs(['$require', '$flatten', '$decode64', '$raise', '$delete', '$gsub', '$coerce_to!', '$inspect', '$[]', '$unpack']);
  
  self.$require("corelib/pack_unpack/format_string_parser");
  return (function($base, $super, $parent_nesting) {
    var self = $klass($base, $super, 'String');

    var $nesting = [self].concat($parent_nesting), $a, $String_unpack$1, $String_unpack1$2, expected = nil, given = nil;

    
    
    // Format Parser
    var eachDirectiveAndCount = Opal.PackUnpack.eachDirectiveAndCount;

    function flattenArray(callback) {
      return function(data) {
        var array = callback(data);
        return (array).$flatten();
      }
    }

    function mapChunksToWords(callback) {
      return function(data) {
        var chunks = callback(data);

        return chunks.map(function(chunk) {
          return chunk.reverse().reduce(function(result, singleByte) {
            return result * 256 + singleByte;
          }, 0);
        });
      }
    }

    function chunkBy(chunkSize, callback) {
      return function(data) {
        var array = callback(data),
            chunks = [],
            chunksCount = (array.length / chunkSize);

        for (var i = 0; i < chunksCount; i++) {
          var chunk = array.splice(0, chunkSize);
          if (chunk.length === chunkSize) {
            chunks.push(chunk);
          }
        }

        return chunks;
      }
    }

    function utf16LEToBytes(string) {
      var utf8 = [];
      for (var i=0; i < string.length; i++) {
        var charcode = string.charCodeAt(i);
        if (charcode < 0x100) utf8.push(charcode);
        else if (charcode < 0x800) {
          utf8.push(0xc0 | (charcode >> 6),
                    0x80 | (charcode & 0x3f));
        }
        else if (charcode < 0xd800 || charcode >= 0xe000) {
          utf8.push(0xe0 | (charcode >> 12),
                    0x80 | ((charcode>>6) & 0x3f),
                    0x80 | (charcode & 0x3f));
        }
        // surrogate pair
        else {
          i++;
          // UTF-16 encodes 0x10000-0x10FFFF by
          // subtracting 0x10000 and splitting the
          // 20 bits of 0x0-0xFFFFF into two halves
          charcode = 0x10000 + (((charcode & 0x3ff)<<10)
                    | (string.charCodeAt(i) & 0x3ff))
          utf8.push(0xf0 | (charcode >>18),
                    0x80 | ((charcode>>12) & 0x3f),
                    0x80 | ((charcode>>6) & 0x3f),
                    0x80 | (charcode & 0x3f));
        }
      }

      return utf8;
    }

    function toNByteSigned(bytesCount, callback) {
      return function(data) {
        var unsignedBits = callback(data),
            bitsCount = bytesCount * 8,
            limit = Math.pow(2, bitsCount);

        return unsignedBits.map(function(n) {
          if (n >= limit / 2) {
            n -= limit;
          }

          return n;
        });
      }
    }

    function bytesToAsciiChars(callback) {
      return function(data) {
        var bytes = callback(data);

        return bytes.map(function(singleByte) {
          return String.fromCharCode(singleByte);
        });
      }
    }

    function joinChars(callback) {
      return function(data) {
        var chars = callback(data);
        return chars.join('');
      }
    }

    function wrapIntoArray(callback) {
      return function(data) {
        var object = callback(data);
        return [object];
      }
    }

    function filterTrailingChars(chars) {
      var charCodesToFilter = chars.map(function(s) { return s.charCodeAt(0); });

      return function(callback) {
        return function(data) {
          var charCodes = callback(data);

          while (charCodesToFilter.indexOf(charCodes[charCodes.length - 1]) !== -1) {
            charCodes = charCodes.slice(0, charCodes.length - 1);
          }

          return charCodes;
        }
      }
    }

    var filterTrailingZerosAndSpaces = filterTrailingChars(["\u0000", " "]);

    function invertChunks(callback) {
      return function(data) {
        var chunks = callback(data);

        return chunks.map(function(chunk) {
          return chunk.reverse();
        });
      }
    }

    function uudecode(callback) {
      return function(data) {
        var bytes = callback(data);

        var stop = false;
        var i = 0, length = 0;

        var result = [];

        do {
          if (i < bytes.length) {
            var n = bytes[i] - 32 & 0x3F;

            ++i;

            if (bytes[i] === 10) {
              continue;
            }

            if (n > 45) {
              return '';
            }

            length += n;

            while (n > 0) {
              var c1 = bytes[i];
              var c2 = bytes[i + 1];
              var c3 = bytes[i + 2];
              var c4 = bytes[i + 3];

              var b1 = (c1 - 32 & 0x3F) << 2 | (c2 - 32 & 0x3F) >> 4;
              var b2 = (c2 - 32 & 0x3F) << 4 | (c3 - 32 & 0x3F) >> 2;
              var b3 = (c3 - 32 & 0x3F) << 6 | c4 - 32 & 0x3F;

              result.push(b1 & 0xFF);
              result.push(b2 & 0xFF);
              result.push(b3 & 0xFF);

              i += 4;
              n -= 3;
            }

            ++i;
          } else {
            break;
          }
        } while (true);

        return result.slice(0, length);
      }
    }

    function toBits(callback) {
      return function(data) {
        var bytes = callback(data);

        var bits = bytes.map(function(singleByte) {
          return singleByte.toString(2);
        });

        return bits;
      }
    }

    function decodeBERCompressedIntegers(callback) {
      return function(data) {
        var bytes = callback(data), result = [], buffer = '';

        for (var i = 0; i < bytes.length; i++) {
          var singleByte = bytes[i],
              bits = singleByte.toString(2);

          bits = Array(8 - bits.length + 1).join('0').concat(bits);

          var firstBit = bits[0];
          bits = bits.slice(1, bits.length);

          buffer = buffer.concat(bits);

          if (firstBit === '0') {
            var decoded = parseInt(buffer, 2);
            result.push(decoded);
            buffer = ''
          }
        }

        return result;
      }
    }

    function base64Decode(callback) {
      return function(data) {
        var string = callback(data);
        if (typeof(atob) === 'function') {
          // Browser
          return atob(string);
        } else if (typeof(Buffer) === 'function') {
          // Node
          if (typeof(Buffer.from) === 'function') {
            // Node 5.10+
            return Buffer.from(string, 'base64').toString();
          } else {
            return new Buffer(string, 'base64').toString();
          }
        } else if ((($a = $$($nesting, 'Base64', 'skip_raise')) ? 'constant' : nil)) {
          return $$($nesting, 'Base64').$decode64(string);
        } else {
          self.$raise("To use String#unpack('m'), you must first require 'base64'.")
        }
      }
    }

    // quoted-printable decode
    function qpdecode(callback) {
      return function(data) {
        var string = callback(data);

        return string
          .replace(/[\t\x20]$/gm, '')
          .replace(/=(?:\r\n?|\n|$)/g, '')
          .replace(/=([a-fA-F0-9]{2})/g, function($0, $1) {
            var codePoint = parseInt($1, 16);
            return String.fromCharCode(codePoint);
          });
      }
    }

    function identityFunction(value) { return value; }

    var handlers = {
      // Integer
      'C': identityFunction,
      'S': mapChunksToWords(chunkBy(2, identityFunction)),
      'L': mapChunksToWords(chunkBy(4, identityFunction)),
      'Q': mapChunksToWords(chunkBy(8, identityFunction)),
      'J': null,

      'S>': mapChunksToWords(invertChunks(chunkBy(2, identityFunction))),
      'L>': mapChunksToWords(invertChunks(chunkBy(4, identityFunction))),
      'Q>': mapChunksToWords(invertChunks(chunkBy(8, identityFunction))),

      'c': toNByteSigned(1, identityFunction),
      's': toNByteSigned(2, mapChunksToWords(chunkBy(2, identityFunction))),
      'l': toNByteSigned(4, mapChunksToWords(chunkBy(4, identityFunction))),
      'q': toNByteSigned(8, mapChunksToWords(chunkBy(8, identityFunction))),
      'j': null,

      's>': toNByteSigned(2, mapChunksToWords(invertChunks(chunkBy(2, identityFunction)))),
      'l>': toNByteSigned(4, mapChunksToWords(invertChunks(chunkBy(4, identityFunction)))),
      'q>': toNByteSigned(8, mapChunksToWords(invertChunks(chunkBy(8, identityFunction)))),

      'n': null, // aliased later
      'N': null, // aliased later
      'v': null, // aliased later
      'V': null, // aliased later

      'U': identityFunction,
      'w': decodeBERCompressedIntegers(identityFunction),

      // Float
      'D': null,
      'd': null,
      'F': null,
      'f': null,
      'E': null,
      'e': null,
      'G': null,
      'g': null,

      // String
      'A': wrapIntoArray(joinChars(bytesToAsciiChars(filterTrailingZerosAndSpaces(identityFunction)))),
      'a': wrapIntoArray(joinChars(bytesToAsciiChars(identityFunction))),
      'Z': joinChars(bytesToAsciiChars(identityFunction)),
      'B': joinChars(identityFunction),
      'b': joinChars(identityFunction),
      'H': joinChars(identityFunction),
      'h': joinChars(identityFunction),
      'u': joinChars(bytesToAsciiChars(uudecode(identityFunction))),
      'M': qpdecode(joinChars(bytesToAsciiChars(identityFunction))),
      'm': base64Decode(joinChars(bytesToAsciiChars(identityFunction))),

      'P': null,
      'p': null
    };

    function readBytes(n) {
      return function(bytes) {
        var chunk = bytes.slice(0, n);
        bytes = bytes.slice(n, bytes.length);
        return { chunk: chunk, rest: bytes };
      }
    }

    function readUnicodeCharChunk(bytes) {
      function readByte() {
        var result = bytes[0];
        bytes = bytes.slice(1, bytes.length);
        return result;
      }

      var c = readByte(), extraLength;

      if (c >> 7 == 0) {
        // 0xxx xxxx
        return { chunk: [c], rest: bytes };
      }

      if (c >> 6 == 0x02) {
        self.$raise($$($nesting, 'ArgumentError'), "malformed UTF-8 character")
      }

      if (c >> 5 == 0x06) {
        // 110x xxxx (two bytes)
        extraLength = 1;
      } else if (c >> 4 == 0x0e) {
        // 1110 xxxx (three bytes)
        extraLength = 2;
      } else if (c >> 3 == 0x1e) {
        // 1111 0xxx (four bytes)
        extraLength = 3;
      } else if (c >> 2 == 0x3e) {
        // 1111 10xx (five bytes)
        extraLength = 4;
      } else if (c >> 1 == 0x7e) {
        // 1111 110x (six bytes)
        extraLength = 5;
      } else {
        self.$raise("malformed UTF-8 character")
      }

      if (extraLength > bytes.length) {
        ((expected = extraLength + 1), (given = bytes.length + 1), self.$raise($$($nesting, 'ArgumentError'), "" + "malformed UTF-8 character (expected " + (expected) + " bytes, given " + (given) + " bytes)"))
      }

      // Remove the UTF-8 prefix from the char
      var mask = (1 << (8 - extraLength - 1)) - 1,
          result = c & mask;

      for (var i = 0; i < extraLength; i++) {
        c = readByte();

        if (c >> 6 != 0x02) {
          self.$raise("Invalid multibyte sequence")
        }

        result = (result << 6) | (c & 0x3f);
      }

      if (result <= 0xffff) {
        return { chunk: [result], rest: bytes };
      } else {
        result -= 0x10000;
        var high = ((result >> 10) & 0x3ff) + 0xd800,
            low = (result & 0x3ff) + 0xdc00;
        return { chunk: [high, low], rest: bytes };
      }
    }

    function readUuencodingChunk(buffer) {
      var length = buffer.indexOf(32); // 32 = space

      if (length === -1) {
        return { chunk: buffer, rest: [] };
      } else {
        return { chunk: buffer.slice(0, length), rest: buffer.slice(length, buffer.length) };
      }
    }

    function readNBitsLSBFirst(buffer, count) {
      var result = '';

      while (count > 0 && buffer.length > 0) {
        var singleByte = buffer[0],
            bitsToTake = Math.min(count, 8),
            bytesToTake = Math.ceil(bitsToTake / 8);

        buffer = buffer.slice(1, buffer.length);

        if (singleByte != null) {
          var bits = singleByte.toString(2);
          bits = Array(8 - bits.length + 1).join('0').concat(bits).split('').reverse().join('');

          for (var j = 0; j < bitsToTake; j++) {
            result += bits[j] || '0';
            count--;
          }
        }
      }

      return { chunk: [result], rest: buffer };
    }

    function readNBitsMSBFirst(buffer, count) {
      var result = '';

      while (count > 0 && buffer.length > 0) {
        var singleByte = buffer[0],
            bitsToTake = Math.min(count, 8),
            bytesToTake = Math.ceil(bitsToTake / 8);

        buffer = buffer.slice(1, buffer.length);

        if (singleByte != null) {
          var bits = singleByte.toString(2);
          bits = Array(8 - bits.length + 1).join('0').concat(bits);

          for (var j = 0; j < bitsToTake; j++) {
            result += bits[j] || '0';
            count--;
          }
        }
      }

      return { chunk: [result], rest: buffer };
    }

    function readWhileFirstBitIsOne(buffer) {
      var result = [];

      for (var i = 0; i < buffer.length; i++) {
        var singleByte = buffer[i];

        result.push(singleByte);

        if ((singleByte & 128) === 0) {
          break;
        }
      }

      return { chunk: result, rest: buffer.slice(result.length, buffer.length) };
    }

    function readTillNullCharacter(buffer, count) {
      var result = [];

      for (var i = 0; i < count && i < buffer.length; i++) {
        var singleByte = buffer[i];

        if (singleByte === 0) {
          break;
        } else {
          result.push(singleByte);
        }
      }

      if (count === Infinity) {
        count = result.length;
      }

      if (buffer[count] === 0) {
        count++;
      }

      buffer = buffer.slice(count, buffer.length);

      return { chunk: result, rest: buffer };
    }

    function readHexCharsHighNibbleFirst(buffer, count) {
      var result = [];

      while (count > 0 && buffer.length > 0) {
        var singleByte = buffer[0],
            hex = singleByte.toString(16);

        buffer = buffer.slice(1, buffer.length);
        hex = Array(2 - hex.length + 1).join('0').concat(hex);

        if (count === 1) {
          result.push(hex[0]);
          count--;
        } else {
          result.push(hex[0], hex[1]);
          count -= 2;
        }
      }

      return { chunk: result, rest: buffer };
    }

    function readHexCharsLowNibbleFirst(buffer, count) {
      var result = [];

      while (count > 0 && buffer.length > 0) {
        var singleByte = buffer[0],
            hex = singleByte.toString(16);

        buffer = buffer.slice(1, buffer.length);
        hex = Array(2 - hex.length + 1).join('0').concat(hex);

        if (count === 1) {
          result.push(hex[1]);
          count--;
        } else {
          result.push(hex[1], hex[0]);
          count -= 2;
        }
      }

      return { chunk: result, rest: buffer };
    }

    function readNTimesAndMerge(callback) {
      return function(buffer, count) {
        var chunk = [], chunkData;

        if (count === Infinity) {
          while (buffer.length > 0) {
            chunkData = callback(buffer);
            buffer = chunkData.rest;
            chunk = chunk.concat(chunkData.chunk);
          }
        } else {
          for (var i = 0; i < count; i++) {
            chunkData = callback(buffer);
            buffer = chunkData.rest;
            chunk = chunk.concat(chunkData.chunk);
          }
        }

        return { chunk: chunk, rest: buffer };
      }
    }

    function readAll(buffer, count) {
      return { chunk: buffer, rest: [] };
    }

    var readChunk = {
      // Integer
      'C': readNTimesAndMerge(readBytes(1)),
      'S': readNTimesAndMerge(readBytes(2)),
      'L': readNTimesAndMerge(readBytes(4)),
      'Q': readNTimesAndMerge(readBytes(8)),
      'J': null,

      'S>': readNTimesAndMerge(readBytes(2)),
      'L>': readNTimesAndMerge(readBytes(4)),
      'Q>': readNTimesAndMerge(readBytes(8)),

      'c': readNTimesAndMerge(readBytes(1)),
      's': readNTimesAndMerge(readBytes(2)),
      'l': readNTimesAndMerge(readBytes(4)),
      'q': readNTimesAndMerge(readBytes(8)),
      'j': null,

      's>': readNTimesAndMerge(readBytes(2)),
      'l>': readNTimesAndMerge(readBytes(4)),
      'q>': readNTimesAndMerge(readBytes(8)),

      'n': null, // aliased later
      'N': null, // aliased later
      'v': null, // aliased later
      'V': null, // aliased later

      'U': readNTimesAndMerge(readUnicodeCharChunk),
      'w': readNTimesAndMerge(readWhileFirstBitIsOne),

      // Float
      'D': null,
      'd': null,
      'F': null,
      'f': null,
      'E': null,
      'e': null,
      'G': null,
      'g': null,

      // String
      'A': readNTimesAndMerge(readBytes(1)),
      'a': readNTimesAndMerge(readBytes(1)),
      'Z': readTillNullCharacter,
      'B': readNBitsMSBFirst,
      'b': readNBitsLSBFirst,
      'H': readHexCharsHighNibbleFirst,
      'h': readHexCharsLowNibbleFirst,
      'u': readNTimesAndMerge(readUuencodingChunk),
      'M': readAll,
      'm': readAll,

      'P': null,
      'p': null
    }

    var autocompletion = {
      // Integer
      'C': true,
      'S': true,
      'L': true,
      'Q': true,
      'J': null,

      'S>': true,
      'L>': true,
      'Q>': true,

      'c': true,
      's': true,
      'l': true,
      'q': true,
      'j': null,

      's>': true,
      'l>': true,
      'q>': true,

      'n': null, // aliased later
      'N': null, // aliased later
      'v': null, // aliased later
      'V': null, // aliased later

      'U': false,
      'w': false,

      // Float
      'D': null,
      'd': null,
      'F': null,
      'f': null,
      'E': null,
      'e': null,
      'G': null,
      'g': null,

      // String
      'A': false,
      'a': false,
      'Z': false,
      'B': false,
      'b': false,
      'H': false,
      'h': false,
      'u': false,
      'M': false,
      'm': false,

      'P': null,
      'p': null
    }

    var optimized = {
      'C*': handlers['C'],
      'c*': handlers['c'],
      'A*': handlers['A'],
      'a*': handlers['a'],
      'M*': wrapIntoArray(handlers['M']),
      'm*': wrapIntoArray(handlers['m']),
      'S*': handlers['S'],
      's*': handlers['s'],
      'L*': handlers['L'],
      'l*': handlers['l'],
      'Q*': handlers['Q'],
      'q*': handlers['q'],
      'S>*': handlers['S>'],
      's>*': handlers['s>'],
      'L>*': handlers['L>'],
      'l>*': handlers['l>'],
      'Q>*': handlers['Q>'],
      'q>*': handlers['q>']
    }

    function alias(existingDirective, newDirective) {
      readChunk[newDirective] = readChunk[existingDirective];
      handlers[newDirective] = handlers[existingDirective];
      autocompletion[newDirective] = autocompletion[existingDirective];
    }

    alias('S>', 'n');
    alias('L>', 'N');

    alias('S', 'v');
    alias('L', 'V');
  ;
    
    Opal.def(self, '$unpack', $String_unpack$1 = function $$unpack(format) {
      var self = this;

      
      format = $$($nesting, 'Opal')['$coerce_to!'](format, $$($nesting, 'String'), "to_str").$gsub(/\s/, "").$delete("\u0000");
      
      var output = [];

      var buffer = utf16LEToBytes(self);

      // optimization
      var optimizedHandler = optimized[format];
      if (optimizedHandler) {
        return optimizedHandler(buffer);
      }

      function autocomplete(array, size) {
        while (array.length < size) {
          array.push(nil);
        }

        return array;
      }

      function processChunk(directive, count) {
        var chunk,
            chunkReader = readChunk[directive];

        if (chunkReader == null) {
          self.$raise("" + "Unsupported unpack directive " + ((directive).$inspect()) + " (no chunk reader defined)")
        }

        var chunkData = chunkReader(buffer, count);
        chunk = chunkData.chunk;
        buffer = chunkData.rest;

        var handler = handlers[directive];

        if (handler == null) {
          self.$raise("" + "Unsupported unpack directive " + ((directive).$inspect()) + " (no handler defined)")
        }

        return handler(chunk);
      }

      eachDirectiveAndCount(format, function(directive, count) {
        var part = processChunk(directive, count);

        if (count !== Infinity) {
          var shouldAutocomplete = autocompletion[directive];

          if (shouldAutocomplete == null) {
            self.$raise("" + "Unsupported unpack directive " + ((directive).$inspect()) + " (no autocompletion rule defined)")
          }

          if (shouldAutocomplete) {
            autocomplete(part, count);
          }
        }

        output = output.concat(part);
      });

      return output;
    ;
    }, $String_unpack$1.$$arity = 1);
    return (Opal.def(self, '$unpack1', $String_unpack1$2 = function $$unpack1(format) {
      var self = this;

      
      format = $$($nesting, 'Opal')['$coerce_to!'](format, $$($nesting, 'String'), "to_str").$gsub(/\s/, "").$delete("\u0000");
      return self.$unpack(format['$[]'](0))['$[]'](0);
    }, $String_unpack1$2.$$arity = 1), nil) && 'unpack1';
  })($nesting[0], null, $nesting);
};

/* Generated by Opal 1.0.0 */
Opal.modules["set"] = function(Opal) {
  function $rb_minus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs - rhs : lhs['$-'](rhs);
  }
  function $rb_lt(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs < rhs : lhs['$<'](rhs);
  }
  function $rb_le(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs <= rhs : lhs['$<='](rhs);
  }
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.$$$, $$ = Opal.$$, $klass = Opal.klass, $hash2 = Opal.hash2, $truthy = Opal.truthy, $send = Opal.send, $module = Opal.module;

  Opal.add_stubs(['$include', '$new', '$nil?', '$===', '$raise', '$each', '$add', '$merge', '$class', '$respond_to?', '$subtract', '$dup', '$join', '$to_a', '$equal?', '$instance_of?', '$==', '$instance_variable_get', '$is_a?', '$size', '$all?', '$include?', '$[]=', '$-', '$enum_for', '$[]', '$<<', '$replace', '$delete', '$select', '$reject', '$delete_if', '$to_proc', '$keep_if', '$each_key', '$empty?', '$eql?', '$instance_eval', '$clear', '$<', '$<=', '$any?', '$!', '$intersect?', '$keys']);
  
  (function($base, $super, $parent_nesting) {
    var self = $klass($base, $super, 'Set');

    var $nesting = [self].concat($parent_nesting), $Set_$$$1, $Set_initialize$2, $Set_dup$4, $Set_$minus$5, $Set_inspect$6, $Set_$eq_eq$7, $Set_add$9, $Set_classify$10, $Set_collect$excl$13, $Set_delete$15, $Set_delete$ques$16, $Set_delete_if$17, $Set_keep_if$20, $Set_reject$excl$23, $Set_select$excl$24, $Set_add$ques$25, $Set_each$26, $Set_empty$ques$27, $Set_eql$ques$28, $Set_clear$30, $Set_include$ques$31, $Set_merge$32, $Set_replace$34, $Set_size$35, $Set_subtract$36, $Set_$$38, $Set_superset$ques$39, $Set_proper_superset$ques$41, $Set_subset$ques$43, $Set_proper_subset$ques$45, $Set_intersect$ques$47, $Set_disjoint$ques$50, $Set_to_a$51;

    self.$$prototype.hash = nil;
    
    self.$include($$($nesting, 'Enumerable'));
    Opal.defs(self, '$[]', $Set_$$$1 = function($a) {
      var $post_args, ary, self = this;

      
      
      $post_args = Opal.slice.call(arguments, 0, arguments.length);
      
      ary = $post_args;;
      return self.$new(ary);
    }, $Set_$$$1.$$arity = -1);
    
    Opal.def(self, '$initialize', $Set_initialize$2 = function $$initialize(enum$) {
      var $iter = $Set_initialize$2.$$p, block = $iter || nil, $$3, self = this;

      if ($iter) $Set_initialize$2.$$p = null;
      
      
      if ($iter) $Set_initialize$2.$$p = null;;
      
      if (enum$ == null) {
        enum$ = nil;
      };
      self.hash = $hash2([], {});
      if ($truthy(enum$['$nil?']())) {
        return nil};
      if ($truthy($$($nesting, 'Enumerable')['$==='](enum$))) {
      } else {
        self.$raise($$($nesting, 'ArgumentError'), "value must be enumerable")
      };
      if ($truthy(block)) {
        return $send(enum$, 'each', [], ($$3 = function(item){var self = $$3.$$s == null ? this : $$3.$$s;

        
          
          if (item == null) {
            item = nil;
          };
          return self.$add(Opal.yield1(block, item));}, $$3.$$s = self, $$3.$$arity = 1, $$3))
      } else {
        return self.$merge(enum$)
      };
    }, $Set_initialize$2.$$arity = -1);
    
    Opal.def(self, '$dup', $Set_dup$4 = function $$dup() {
      var self = this, result = nil;

      
      result = self.$class().$new();
      return result.$merge(self);
    }, $Set_dup$4.$$arity = 0);
    
    Opal.def(self, '$-', $Set_$minus$5 = function(enum$) {
      var self = this;

      
      if ($truthy(enum$['$respond_to?']("each"))) {
      } else {
        self.$raise($$($nesting, 'ArgumentError'), "value must be enumerable")
      };
      return self.$dup().$subtract(enum$);
    }, $Set_$minus$5.$$arity = 1);
    Opal.alias(self, "difference", "-");
    
    Opal.def(self, '$inspect', $Set_inspect$6 = function $$inspect() {
      var self = this;

      return "" + "#<Set: {" + (self.$to_a().$join(",")) + "}>"
    }, $Set_inspect$6.$$arity = 0);
    
    Opal.def(self, '$==', $Set_$eq_eq$7 = function(other) {
      var $a, $$8, self = this;

      if ($truthy(self['$equal?'](other))) {
        return true
      } else if ($truthy(other['$instance_of?'](self.$class()))) {
        return self.hash['$=='](other.$instance_variable_get("@hash"))
      } else if ($truthy(($truthy($a = other['$is_a?']($$($nesting, 'Set'))) ? self.$size()['$=='](other.$size()) : $a))) {
        return $send(other, 'all?', [], ($$8 = function(o){var self = $$8.$$s == null ? this : $$8.$$s;
          if (self.hash == null) self.hash = nil;

        
          
          if (o == null) {
            o = nil;
          };
          return self.hash['$include?'](o);}, $$8.$$s = self, $$8.$$arity = 1, $$8))
      } else {
        return false
      }
    }, $Set_$eq_eq$7.$$arity = 1);
    
    Opal.def(self, '$add', $Set_add$9 = function $$add(o) {
      var self = this, $writer = nil;

      
      
      $writer = [o, true];
      $send(self.hash, '[]=', Opal.to_a($writer));
      $writer[$rb_minus($writer["length"], 1)];;
      return self;
    }, $Set_add$9.$$arity = 1);
    Opal.alias(self, "<<", "add");
    
    Opal.def(self, '$classify', $Set_classify$10 = function $$classify() {
      var $iter = $Set_classify$10.$$p, block = $iter || nil, $$11, $$12, self = this, result = nil;

      if ($iter) $Set_classify$10.$$p = null;
      
      
      if ($iter) $Set_classify$10.$$p = null;;
      if ((block !== nil)) {
      } else {
        return self.$enum_for("classify")
      };
      result = $send($$($nesting, 'Hash'), 'new', [], ($$11 = function(h, k){var self = $$11.$$s == null ? this : $$11.$$s, $writer = nil;

      
        
        if (h == null) {
          h = nil;
        };
        
        if (k == null) {
          k = nil;
        };
        $writer = [k, self.$class().$new()];
        $send(h, '[]=', Opal.to_a($writer));
        return $writer[$rb_minus($writer["length"], 1)];}, $$11.$$s = self, $$11.$$arity = 2, $$11));
      $send(self, 'each', [], ($$12 = function(item){var self = $$12.$$s == null ? this : $$12.$$s;

      
        
        if (item == null) {
          item = nil;
        };
        return result['$[]'](Opal.yield1(block, item)).$add(item);}, $$12.$$s = self, $$12.$$arity = 1, $$12));
      return result;
    }, $Set_classify$10.$$arity = 0);
    
    Opal.def(self, '$collect!', $Set_collect$excl$13 = function() {
      var $iter = $Set_collect$excl$13.$$p, block = $iter || nil, $$14, self = this, result = nil;

      if ($iter) $Set_collect$excl$13.$$p = null;
      
      
      if ($iter) $Set_collect$excl$13.$$p = null;;
      if ((block !== nil)) {
      } else {
        return self.$enum_for("collect!")
      };
      result = self.$class().$new();
      $send(self, 'each', [], ($$14 = function(item){var self = $$14.$$s == null ? this : $$14.$$s;

      
        
        if (item == null) {
          item = nil;
        };
        return result['$<<'](Opal.yield1(block, item));}, $$14.$$s = self, $$14.$$arity = 1, $$14));
      return self.$replace(result);
    }, $Set_collect$excl$13.$$arity = 0);
    Opal.alias(self, "map!", "collect!");
    
    Opal.def(self, '$delete', $Set_delete$15 = function(o) {
      var self = this;

      
      self.hash.$delete(o);
      return self;
    }, $Set_delete$15.$$arity = 1);
    
    Opal.def(self, '$delete?', $Set_delete$ques$16 = function(o) {
      var self = this;

      if ($truthy(self['$include?'](o))) {
        
        self.$delete(o);
        return self;
      } else {
        return nil
      }
    }, $Set_delete$ques$16.$$arity = 1);
    
    Opal.def(self, '$delete_if', $Set_delete_if$17 = function $$delete_if() {
      var $$18, $$19, $iter = $Set_delete_if$17.$$p, $yield = $iter || nil, self = this;

      if ($iter) $Set_delete_if$17.$$p = null;
      
      if (($yield !== nil)) {
      } else {
        return self.$enum_for("delete_if")
      };
      $send($send(self, 'select', [], ($$18 = function(o){var self = $$18.$$s == null ? this : $$18.$$s;

      
        
        if (o == null) {
          o = nil;
        };
        return Opal.yield1($yield, o);;}, $$18.$$s = self, $$18.$$arity = 1, $$18)), 'each', [], ($$19 = function(o){var self = $$19.$$s == null ? this : $$19.$$s;
        if (self.hash == null) self.hash = nil;

      
        
        if (o == null) {
          o = nil;
        };
        return self.hash.$delete(o);}, $$19.$$s = self, $$19.$$arity = 1, $$19));
      return self;
    }, $Set_delete_if$17.$$arity = 0);
    
    Opal.def(self, '$keep_if', $Set_keep_if$20 = function $$keep_if() {
      var $$21, $$22, $iter = $Set_keep_if$20.$$p, $yield = $iter || nil, self = this;

      if ($iter) $Set_keep_if$20.$$p = null;
      
      if (($yield !== nil)) {
      } else {
        return self.$enum_for("keep_if")
      };
      $send($send(self, 'reject', [], ($$21 = function(o){var self = $$21.$$s == null ? this : $$21.$$s;

      
        
        if (o == null) {
          o = nil;
        };
        return Opal.yield1($yield, o);;}, $$21.$$s = self, $$21.$$arity = 1, $$21)), 'each', [], ($$22 = function(o){var self = $$22.$$s == null ? this : $$22.$$s;
        if (self.hash == null) self.hash = nil;

      
        
        if (o == null) {
          o = nil;
        };
        return self.hash.$delete(o);}, $$22.$$s = self, $$22.$$arity = 1, $$22));
      return self;
    }, $Set_keep_if$20.$$arity = 0);
    
    Opal.def(self, '$reject!', $Set_reject$excl$23 = function() {
      var $iter = $Set_reject$excl$23.$$p, block = $iter || nil, self = this, before = nil;

      if ($iter) $Set_reject$excl$23.$$p = null;
      
      
      if ($iter) $Set_reject$excl$23.$$p = null;;
      if ((block !== nil)) {
      } else {
        return self.$enum_for("reject!")
      };
      before = self.$size();
      $send(self, 'delete_if', [], block.$to_proc());
      if (self.$size()['$=='](before)) {
        return nil
      } else {
        return self
      };
    }, $Set_reject$excl$23.$$arity = 0);
    
    Opal.def(self, '$select!', $Set_select$excl$24 = function() {
      var $iter = $Set_select$excl$24.$$p, block = $iter || nil, self = this, before = nil;

      if ($iter) $Set_select$excl$24.$$p = null;
      
      
      if ($iter) $Set_select$excl$24.$$p = null;;
      if ((block !== nil)) {
      } else {
        return self.$enum_for("select!")
      };
      before = self.$size();
      $send(self, 'keep_if', [], block.$to_proc());
      if (self.$size()['$=='](before)) {
        return nil
      } else {
        return self
      };
    }, $Set_select$excl$24.$$arity = 0);
    
    Opal.def(self, '$add?', $Set_add$ques$25 = function(o) {
      var self = this;

      if ($truthy(self['$include?'](o))) {
        return nil
      } else {
        return self.$add(o)
      }
    }, $Set_add$ques$25.$$arity = 1);
    
    Opal.def(self, '$each', $Set_each$26 = function $$each() {
      var $iter = $Set_each$26.$$p, block = $iter || nil, self = this;

      if ($iter) $Set_each$26.$$p = null;
      
      
      if ($iter) $Set_each$26.$$p = null;;
      if ((block !== nil)) {
      } else {
        return self.$enum_for("each")
      };
      $send(self.hash, 'each_key', [], block.$to_proc());
      return self;
    }, $Set_each$26.$$arity = 0);
    
    Opal.def(self, '$empty?', $Set_empty$ques$27 = function() {
      var self = this;

      return self.hash['$empty?']()
    }, $Set_empty$ques$27.$$arity = 0);
    
    Opal.def(self, '$eql?', $Set_eql$ques$28 = function(other) {
      var $$29, self = this;

      return self.hash['$eql?']($send(other, 'instance_eval', [], ($$29 = function(){var self = $$29.$$s == null ? this : $$29.$$s;
        if (self.hash == null) self.hash = nil;

      return self.hash}, $$29.$$s = self, $$29.$$arity = 0, $$29)))
    }, $Set_eql$ques$28.$$arity = 1);
    
    Opal.def(self, '$clear', $Set_clear$30 = function $$clear() {
      var self = this;

      
      self.hash.$clear();
      return self;
    }, $Set_clear$30.$$arity = 0);
    
    Opal.def(self, '$include?', $Set_include$ques$31 = function(o) {
      var self = this;

      return self.hash['$include?'](o)
    }, $Set_include$ques$31.$$arity = 1);
    Opal.alias(self, "member?", "include?");
    
    Opal.def(self, '$merge', $Set_merge$32 = function $$merge(enum$) {
      var $$33, self = this;

      
      $send(enum$, 'each', [], ($$33 = function(item){var self = $$33.$$s == null ? this : $$33.$$s;

      
        
        if (item == null) {
          item = nil;
        };
        return self.$add(item);}, $$33.$$s = self, $$33.$$arity = 1, $$33));
      return self;
    }, $Set_merge$32.$$arity = 1);
    
    Opal.def(self, '$replace', $Set_replace$34 = function $$replace(enum$) {
      var self = this;

      
      self.$clear();
      self.$merge(enum$);
      return self;
    }, $Set_replace$34.$$arity = 1);
    
    Opal.def(self, '$size', $Set_size$35 = function $$size() {
      var self = this;

      return self.hash.$size()
    }, $Set_size$35.$$arity = 0);
    Opal.alias(self, "length", "size");
    
    Opal.def(self, '$subtract', $Set_subtract$36 = function $$subtract(enum$) {
      var $$37, self = this;

      
      $send(enum$, 'each', [], ($$37 = function(item){var self = $$37.$$s == null ? this : $$37.$$s;

      
        
        if (item == null) {
          item = nil;
        };
        return self.$delete(item);}, $$37.$$s = self, $$37.$$arity = 1, $$37));
      return self;
    }, $Set_subtract$36.$$arity = 1);
    
    Opal.def(self, '$|', $Set_$$38 = function(enum$) {
      var self = this;

      
      if ($truthy(enum$['$respond_to?']("each"))) {
      } else {
        self.$raise($$($nesting, 'ArgumentError'), "value must be enumerable")
      };
      return self.$dup().$merge(enum$);
    }, $Set_$$38.$$arity = 1);
    
    Opal.def(self, '$superset?', $Set_superset$ques$39 = function(set) {
      var $a, $$40, self = this;

      
      ($truthy($a = set['$is_a?']($$($nesting, 'Set'))) ? $a : self.$raise($$($nesting, 'ArgumentError'), "value must be a set"));
      if ($truthy($rb_lt(self.$size(), set.$size()))) {
        return false};
      return $send(set, 'all?', [], ($$40 = function(o){var self = $$40.$$s == null ? this : $$40.$$s;

      
        
        if (o == null) {
          o = nil;
        };
        return self['$include?'](o);}, $$40.$$s = self, $$40.$$arity = 1, $$40));
    }, $Set_superset$ques$39.$$arity = 1);
    Opal.alias(self, ">=", "superset?");
    
    Opal.def(self, '$proper_superset?', $Set_proper_superset$ques$41 = function(set) {
      var $a, $$42, self = this;

      
      ($truthy($a = set['$is_a?']($$($nesting, 'Set'))) ? $a : self.$raise($$($nesting, 'ArgumentError'), "value must be a set"));
      if ($truthy($rb_le(self.$size(), set.$size()))) {
        return false};
      return $send(set, 'all?', [], ($$42 = function(o){var self = $$42.$$s == null ? this : $$42.$$s;

      
        
        if (o == null) {
          o = nil;
        };
        return self['$include?'](o);}, $$42.$$s = self, $$42.$$arity = 1, $$42));
    }, $Set_proper_superset$ques$41.$$arity = 1);
    Opal.alias(self, ">", "proper_superset?");
    
    Opal.def(self, '$subset?', $Set_subset$ques$43 = function(set) {
      var $a, $$44, self = this;

      
      ($truthy($a = set['$is_a?']($$($nesting, 'Set'))) ? $a : self.$raise($$($nesting, 'ArgumentError'), "value must be a set"));
      if ($truthy($rb_lt(set.$size(), self.$size()))) {
        return false};
      return $send(self, 'all?', [], ($$44 = function(o){var self = $$44.$$s == null ? this : $$44.$$s;

      
        
        if (o == null) {
          o = nil;
        };
        return set['$include?'](o);}, $$44.$$s = self, $$44.$$arity = 1, $$44));
    }, $Set_subset$ques$43.$$arity = 1);
    Opal.alias(self, "<=", "subset?");
    
    Opal.def(self, '$proper_subset?', $Set_proper_subset$ques$45 = function(set) {
      var $a, $$46, self = this;

      
      ($truthy($a = set['$is_a?']($$($nesting, 'Set'))) ? $a : self.$raise($$($nesting, 'ArgumentError'), "value must be a set"));
      if ($truthy($rb_le(set.$size(), self.$size()))) {
        return false};
      return $send(self, 'all?', [], ($$46 = function(o){var self = $$46.$$s == null ? this : $$46.$$s;

      
        
        if (o == null) {
          o = nil;
        };
        return set['$include?'](o);}, $$46.$$s = self, $$46.$$arity = 1, $$46));
    }, $Set_proper_subset$ques$45.$$arity = 1);
    Opal.alias(self, "<", "proper_subset?");
    
    Opal.def(self, '$intersect?', $Set_intersect$ques$47 = function(set) {
      var $$48, $$49, self = this;

      
      if ($truthy(set['$is_a?']($$($nesting, 'Set')))) {
      } else {
        self.$raise($$($nesting, 'ArgumentError'), "value must be a set")
      };
      if ($truthy($rb_lt(self.$size(), set.$size()))) {
        return $send(self, 'any?', [], ($$48 = function(o){var self = $$48.$$s == null ? this : $$48.$$s;

        
          
          if (o == null) {
            o = nil;
          };
          return set['$include?'](o);}, $$48.$$s = self, $$48.$$arity = 1, $$48))
      } else {
        return $send(set, 'any?', [], ($$49 = function(o){var self = $$49.$$s == null ? this : $$49.$$s;

        
          
          if (o == null) {
            o = nil;
          };
          return self['$include?'](o);}, $$49.$$s = self, $$49.$$arity = 1, $$49))
      };
    }, $Set_intersect$ques$47.$$arity = 1);
    
    Opal.def(self, '$disjoint?', $Set_disjoint$ques$50 = function(set) {
      var self = this;

      return self['$intersect?'](set)['$!']()
    }, $Set_disjoint$ques$50.$$arity = 1);
    Opal.alias(self, "+", "|");
    Opal.alias(self, "union", "|");
    return (Opal.def(self, '$to_a', $Set_to_a$51 = function $$to_a() {
      var self = this;

      return self.hash.$keys()
    }, $Set_to_a$51.$$arity = 0), nil) && 'to_a';
  })($nesting[0], null, $nesting);
  return (function($base, $parent_nesting) {
    var self = $module($base, 'Enumerable');

    var $nesting = [self].concat($parent_nesting), $Enumerable_to_set$52;

    
    Opal.def(self, '$to_set', $Enumerable_to_set$52 = function $$to_set($a, $b) {
      var $iter = $Enumerable_to_set$52.$$p, block = $iter || nil, $post_args, klass, args, self = this;

      if ($iter) $Enumerable_to_set$52.$$p = null;
      
      
      if ($iter) $Enumerable_to_set$52.$$p = null;;
      
      $post_args = Opal.slice.call(arguments, 0, arguments.length);
      
      if ($post_args.length > 0) {
        klass = $post_args[0];
        $post_args.splice(0, 1);
      }
      if (klass == null) {
        klass = $$($nesting, 'Set');
      };
      
      args = $post_args;;
      return $send(klass, 'new', [self].concat(Opal.to_a(args)), block.$to_proc());
    }, $Enumerable_to_set$52.$$arity = -1)
  })($nesting[0], $nesting);
};

/* Generated by Opal 1.0.0 */
Opal.modules["ast/node"] = function(Opal) {
  function $rb_plus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs + rhs : lhs['$+'](rhs);
  }
  function $rb_times(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs * rhs : lhs['$*'](rhs);
  }
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.$$$, $$ = Opal.$$, $module = Opal.module, $klass = Opal.klass, $hash2 = Opal.hash2, $truthy = Opal.truthy, $send = Opal.send;

  Opal.add_stubs(['$attr_reader', '$to_sym', '$freeze', '$to_a', '$assign_properties', '$hash', '$class', '$eql?', '$type', '$children', '$each', '$instance_variable_set', '$protected', '$private', '$==', '$nil?', '$original_dup', '$send', '$equal?', '$respond_to?', '$to_ast', '$updated', '$+', '$*', '$fancy_type', '$is_a?', '$to_sexp', '$inspect', '$map', '$to_sexp_array', '$gsub', '$to_s']);
  return (function($base, $parent_nesting) {
    var self = $module($base, 'AST');

    var $nesting = [self].concat($parent_nesting);

    (function($base, $super, $parent_nesting) {
      var self = $klass($base, $super, 'Node');

      var $nesting = [self].concat($parent_nesting), $Node_initialize$1, $Node_eql$ques$2, $Node_assign_properties$3, $Node_dup$5, $Node_updated$6, $Node_$eq_eq$7, $Node_concat$8, $Node_append$9, $Node_to_sexp$10, $Node_inspect$12, $Node_to_ast$14, $Node_to_sexp_array$15, $Node_fancy_type$17;

      self.$$prototype.type = self.$$prototype.children = nil;
      
      self.$attr_reader("type");
      self.$attr_reader("children");
      Opal.alias(self, "to_a", "children");
      self.$attr_reader("hash");
      
      Opal.def(self, '$initialize', $Node_initialize$1 = function $$initialize(type, children, properties) {
        var $a, self = this;

        
        
        if (children == null) {
          children = [];
        };
        
        if (properties == null) {
          properties = $hash2([], {});
        };
        $a = [type.$to_sym(), children.$to_a().$freeze()], (self.type = $a[0]), (self.children = $a[1]), $a;
        self.$assign_properties(properties);
        self.hash = [self.type, self.children, self.$class()].$hash();
        return self.$freeze();
      }, $Node_initialize$1.$$arity = -2);
      
      Opal.def(self, '$eql?', $Node_eql$ques$2 = function(other) {
        var $a, $b, self = this;

        return ($truthy($a = ($truthy($b = self.$class()['$eql?'](other.$class())) ? self.type['$eql?'](other.$type()) : $b)) ? self.children['$eql?'](other.$children()) : $a)
      }, $Node_eql$ques$2.$$arity = 1);
      
      Opal.def(self, '$assign_properties', $Node_assign_properties$3 = function $$assign_properties(properties) {
        var $$4, self = this;

        
        $send(properties, 'each', [], ($$4 = function(name, value){var self = $$4.$$s == null ? this : $$4.$$s;

        
          
          if (name == null) {
            name = nil;
          };
          
          if (value == null) {
            value = nil;
          };
          return self.$instance_variable_set("" + "@" + (name), value);}, $$4.$$s = self, $$4.$$arity = 2, $$4));
        return nil;
      }, $Node_assign_properties$3.$$arity = 1);
      self.$protected("assign_properties");
      Opal.alias(self, "original_dup", "dup");
      self.$private("original_dup");
      
      Opal.def(self, '$dup', $Node_dup$5 = function $$dup() {
        var self = this;

        return self
      }, $Node_dup$5.$$arity = 0);
      Opal.alias(self, "clone", "dup");
      
      Opal.def(self, '$updated', $Node_updated$6 = function $$updated(type, children, properties) {
        var $a, $b, self = this, new_type = nil, new_children = nil, new_properties = nil, copy = nil;

        
        
        if (type == null) {
          type = nil;
        };
        
        if (children == null) {
          children = nil;
        };
        
        if (properties == null) {
          properties = nil;
        };
        new_type = ($truthy($a = type) ? $a : self.type);
        new_children = ($truthy($a = children) ? $a : self.children);
        new_properties = ($truthy($a = properties) ? $a : $hash2([], {}));
        if ($truthy(($truthy($a = (($b = self.type['$=='](new_type)) ? self.children['$=='](new_children) : self.type['$=='](new_type))) ? properties['$nil?']() : $a))) {
          return self
        } else {
          
          copy = self.$original_dup();
          copy.$send("initialize", new_type, new_children, new_properties);
          return copy;
        };
      }, $Node_updated$6.$$arity = -1);
      
      Opal.def(self, '$==', $Node_$eq_eq$7 = function(other) {
        var $a, self = this;

        if ($truthy(self['$equal?'](other))) {
          return true
        } else if ($truthy(other['$respond_to?']("to_ast"))) {
          
          other = other.$to_ast();
          return (($a = other.$type()['$=='](self.$type())) ? other.$children()['$=='](self.$children()) : other.$type()['$=='](self.$type()));
        } else {
          return false
        }
      }, $Node_$eq_eq$7.$$arity = 1);
      
      Opal.def(self, '$concat', $Node_concat$8 = function $$concat(array) {
        var self = this;

        return self.$updated(nil, $rb_plus(self.children, array.$to_a()))
      }, $Node_concat$8.$$arity = 1);
      Opal.alias(self, "+", "concat");
      
      Opal.def(self, '$append', $Node_append$9 = function $$append(element) {
        var self = this;

        return self.$updated(nil, $rb_plus(self.children, [element]))
      }, $Node_append$9.$$arity = 1);
      Opal.alias(self, "<<", "append");
      
      Opal.def(self, '$to_sexp', $Node_to_sexp$10 = function $$to_sexp(indent) {
        var $$11, self = this, indented = nil, sexp = nil;

        
        
        if (indent == null) {
          indent = 0;
        };
        indented = $rb_times("  ", indent);
        sexp = "" + (indented) + "(" + (self.$fancy_type());
        $send(self.$children(), 'each', [], ($$11 = function(child){var self = $$11.$$s == null ? this : $$11.$$s;

        
          
          if (child == null) {
            child = nil;
          };
          if ($truthy(child['$is_a?']($$($nesting, 'Node')))) {
            return (sexp = $rb_plus(sexp, "" + "\n" + (child.$to_sexp($rb_plus(indent, 1)))))
          } else {
            return (sexp = $rb_plus(sexp, "" + " " + (child.$inspect())))
          };}, $$11.$$s = self, $$11.$$arity = 1, $$11));
        sexp = $rb_plus(sexp, ")");
        return sexp;
      }, $Node_to_sexp$10.$$arity = -1);
      Opal.alias(self, "to_s", "to_sexp");
      
      Opal.def(self, '$inspect', $Node_inspect$12 = function $$inspect(indent) {
        var $$13, self = this, indented = nil, sexp = nil;

        
        
        if (indent == null) {
          indent = 0;
        };
        indented = $rb_times("  ", indent);
        sexp = "" + (indented) + "s(:" + (self.type);
        $send(self.$children(), 'each', [], ($$13 = function(child){var self = $$13.$$s == null ? this : $$13.$$s;

        
          
          if (child == null) {
            child = nil;
          };
          if ($truthy(child['$is_a?']($$($nesting, 'Node')))) {
            return (sexp = $rb_plus(sexp, "" + ",\n" + (child.$inspect($rb_plus(indent, 1)))))
          } else {
            return (sexp = $rb_plus(sexp, "" + ", " + (child.$inspect())))
          };}, $$13.$$s = self, $$13.$$arity = 1, $$13));
        sexp = $rb_plus(sexp, ")");
        return sexp;
      }, $Node_inspect$12.$$arity = -1);
      
      Opal.def(self, '$to_ast', $Node_to_ast$14 = function $$to_ast() {
        var self = this;

        return self
      }, $Node_to_ast$14.$$arity = 0);
      
      Opal.def(self, '$to_sexp_array', $Node_to_sexp_array$15 = function $$to_sexp_array() {
        var $$16, self = this, children_sexp_arrs = nil;

        
        children_sexp_arrs = $send(self.$children(), 'map', [], ($$16 = function(child){var self = $$16.$$s == null ? this : $$16.$$s;

        
          
          if (child == null) {
            child = nil;
          };
          if ($truthy(child['$is_a?']($$($nesting, 'Node')))) {
            return child.$to_sexp_array()
          } else {
            return child
          };}, $$16.$$s = self, $$16.$$arity = 1, $$16));
        return [self.$type()].concat(Opal.to_a(children_sexp_arrs));
      }, $Node_to_sexp_array$15.$$arity = 0);
      self.$protected();
      return (Opal.def(self, '$fancy_type', $Node_fancy_type$17 = function $$fancy_type() {
        var self = this;

        return self.type.$to_s().$gsub("_", "-")
      }, $Node_fancy_type$17.$$arity = 0), nil) && 'fancy_type';
    })($nesting[0], null, $nesting)
  })($nesting[0], $nesting)
};

/* Generated by Opal 1.0.0 */
Opal.modules["ast/processor/mixin"] = function(Opal) {
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.$$$, $$ = Opal.$$, $module = Opal.module, $klass = Opal.klass, $truthy = Opal.truthy, $send = Opal.send;

  Opal.add_stubs(['$nil?', '$to_ast', '$type', '$respond_to?', '$send', '$handler_missing', '$map', '$to_a', '$process']);
  return (function($base, $parent_nesting) {
    var self = $module($base, 'AST');

    var $nesting = [self].concat($parent_nesting);

    (function($base, $super, $parent_nesting) {
      var self = $klass($base, $super, 'Processor');

      var $nesting = [self].concat($parent_nesting);

      return (function($base, $parent_nesting) {
        var self = $module($base, 'Mixin');

        var $nesting = [self].concat($parent_nesting), $Mixin_process$1, $Mixin_process_all$2, $Mixin_handler_missing$4;

        
        
        Opal.def(self, '$process', $Mixin_process$1 = function $$process(node) {
          var self = this, on_handler = nil, new_node = nil;

          
          if ($truthy(node['$nil?']())) {
            return nil};
          node = node.$to_ast();
          on_handler = "" + "on_" + (node.$type());
          if ($truthy(self['$respond_to?'](on_handler))) {
            new_node = self.$send(on_handler, node)
          } else {
            new_node = self.$handler_missing(node)
          };
          if ($truthy(new_node)) {
            node = new_node};
          return node;
        }, $Mixin_process$1.$$arity = 1);
        
        Opal.def(self, '$process_all', $Mixin_process_all$2 = function $$process_all(nodes) {
          var $$3, self = this;

          return $send(nodes.$to_a(), 'map', [], ($$3 = function(node){var self = $$3.$$s == null ? this : $$3.$$s;

          
            
            if (node == null) {
              node = nil;
            };
            return self.$process(node);}, $$3.$$s = self, $$3.$$arity = 1, $$3))
        }, $Mixin_process_all$2.$$arity = 1);
        
        Opal.def(self, '$handler_missing', $Mixin_handler_missing$4 = function $$handler_missing(node) {
          var self = this;

          return nil
        }, $Mixin_handler_missing$4.$$arity = 1);
      })($nesting[0], $nesting)
    })($nesting[0], null, $nesting)
  })($nesting[0], $nesting)
};

/* Generated by Opal 1.0.0 */
Opal.modules["ast/processor"] = function(Opal) {
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.$$$, $$ = Opal.$$, $module = Opal.module, $klass = Opal.klass;

  Opal.add_stubs(['$require', '$include']);
  return (function($base, $parent_nesting) {
    var self = $module($base, 'AST');

    var $nesting = [self].concat($parent_nesting);

    (function($base, $super, $parent_nesting) {
      var self = $klass($base, $super, 'Processor');

      var $nesting = [self].concat($parent_nesting);

      
      self.$require("ast/processor/mixin");
      return self.$include($$($nesting, 'Mixin'));
    })($nesting[0], null, $nesting)
  })($nesting[0], $nesting)
};

/* Generated by Opal 1.0.0 */
Opal.modules["ast/sexp"] = function(Opal) {
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.$$$, $$ = Opal.$$, $module = Opal.module;

  Opal.add_stubs(['$new']);
  return (function($base, $parent_nesting) {
    var self = $module($base, 'AST');

    var $nesting = [self].concat($parent_nesting);

    (function($base, $parent_nesting) {
      var self = $module($base, 'Sexp');

      var $nesting = [self].concat($parent_nesting), $Sexp_s$1;

      
      Opal.def(self, '$s', $Sexp_s$1 = function $$s(type, $a) {
        var $post_args, children, self = this;

        
        
        $post_args = Opal.slice.call(arguments, 1, arguments.length);
        
        children = $post_args;;
        return $$($nesting, 'Node').$new(type, children);
      }, $Sexp_s$1.$$arity = -2)
    })($nesting[0], $nesting)
  })($nesting[0], $nesting)
};

/* Generated by Opal 1.0.0 */
Opal.modules["ast"] = function(Opal) {
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.$$$, $$ = Opal.$$, $module = Opal.module;

  Opal.add_stubs(['$require']);
  return (function($base, $parent_nesting) {
    var self = $module($base, 'AST');

    var $nesting = [self].concat($parent_nesting);

    
    self.$require("ast/node");
    self.$require("ast/processor");
    self.$require("ast/sexp");
  })($nesting[0], $nesting)
};

/* Generated by Opal 1.0.0 */
Opal.modules["parser/ast/node"] = function(Opal) {
  function $rb_minus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs - rhs : lhs['$-'](rhs);
  }
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.$$$, $$ = Opal.$$, $module = Opal.module, $klass = Opal.klass, $truthy = Opal.truthy, $send = Opal.send;

  Opal.add_stubs(['$attr_reader', '$[]', '$frozen?', '$dup', '$node=', '$-']);
  return (function($base, $parent_nesting) {
    var self = $module($base, 'Parser');

    var $nesting = [self].concat($parent_nesting);

    (function($base, $parent_nesting) {
      var self = $module($base, 'AST');

      var $nesting = [self].concat($parent_nesting);

      (function($base, $super, $parent_nesting) {
        var self = $klass($base, $super, 'Node');

        var $nesting = [self].concat($parent_nesting), $Node_assign_properties$1;

        
        self.$attr_reader("location");
        Opal.alias(self, "loc", "location");
        return (Opal.def(self, '$assign_properties', $Node_assign_properties$1 = function $$assign_properties(properties) {
          var self = this, location = nil, $writer = nil;

          if ($truthy((location = properties['$[]']("location")))) {
            
            if ($truthy(location['$frozen?']())) {
              location = location.$dup()};
            
            $writer = [self];
            $send(location, 'node=', Opal.to_a($writer));
            $writer[$rb_minus($writer["length"], 1)];;
            return (self.location = location);
          } else {
            return nil
          }
        }, $Node_assign_properties$1.$$arity = 1), nil) && 'assign_properties';
      })($nesting[0], $$$($$$('::', 'AST'), 'Node'), $nesting)
    })($nesting[0], $nesting)
  })($nesting[0], $nesting)
};

/* Generated by Opal 1.0.0 */
Opal.modules["opal/ast/node"] = function(Opal) {
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.$$$, $$ = Opal.$$, $module = Opal.module, $klass = Opal.klass, $truthy = Opal.truthy, $hash2 = Opal.hash2, $send2 = Opal.send2;

  Opal.add_stubs(['$require', '$attr_reader', '$[]', '$frozen?', '$dup', '$merge!', '$loc', '$line', '$column']);
  
  self.$require("ast");
  self.$require("parser/ast/node");
  return (function($base, $parent_nesting) {
    var self = $module($base, 'Opal');

    var $nesting = [self].concat($parent_nesting);

    (function($base, $parent_nesting) {
      var self = $module($base, 'AST');

      var $nesting = [self].concat($parent_nesting);

      (function($base, $super, $parent_nesting) {
        var self = $klass($base, $super, 'Node');

        var $nesting = [self].concat($parent_nesting), $Node_assign_properties$1, $Node_line$2, $Node_column$3;

        self.$$prototype.meta = nil;
        
        self.$attr_reader("meta");
        
        Opal.def(self, '$assign_properties', $Node_assign_properties$1 = function $$assign_properties(properties) {
          var $a, $iter = $Node_assign_properties$1.$$p, $yield = $iter || nil, self = this, meta = nil, $zuper = nil, $zuper_i = nil, $zuper_ii = nil;

          if ($iter) $Node_assign_properties$1.$$p = null;
          // Prepare super implicit arguments
          for($zuper_i = 0, $zuper_ii = arguments.length, $zuper = new Array($zuper_ii); $zuper_i < $zuper_ii; $zuper_i++) {
            $zuper[$zuper_i] = arguments[$zuper_i];
          }
          
          if ($truthy((meta = properties['$[]']("meta")))) {
            
            if ($truthy(meta['$frozen?']())) {
              meta = meta.$dup()};
            self.meta['$merge!'](meta);
          } else {
            self.meta = ($truthy($a = self.meta) ? $a : $hash2([], {}))
          };
          return $send2(self, Opal.find_super_dispatcher(self, 'assign_properties', $Node_assign_properties$1, false, true), 'assign_properties', $zuper, $iter);
        }, $Node_assign_properties$1.$$arity = 1);
        
        Opal.def(self, '$line', $Node_line$2 = function $$line() {
          var self = this;

          if ($truthy(self.$loc())) {
            return self.$loc().$line()
          } else {
            return nil
          }
        }, $Node_line$2.$$arity = 0);
        return (Opal.def(self, '$column', $Node_column$3 = function $$column() {
          var self = this;

          if ($truthy(self.$loc())) {
            return self.$loc().$column()
          } else {
            return nil
          }
        }, $Node_column$3.$$arity = 0), nil) && 'column';
      })($nesting[0], $$$($$$($$$('::', 'Parser'), 'AST'), 'Node'), $nesting)
    })($nesting[0], $nesting)
  })($nesting[0], $nesting);
};

/* Generated by Opal 1.0.0 */
Opal.modules["racc/parser"] = function(Opal) {
  function $rb_lt(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs < rhs : lhs['$<'](rhs);
  }
  function $rb_minus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs - rhs : lhs['$-'](rhs);
  }
  function $rb_plus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs + rhs : lhs['$+'](rhs);
  }
  function $rb_ge(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs >= rhs : lhs['$>='](rhs);
  }
  function $rb_gt(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs > rhs : lhs['$>'](rhs);
  }
  function $rb_le(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs <= rhs : lhs['$<='](rhs);
  }
  function $rb_times(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs * rhs : lhs['$*'](rhs);
  }
  var $a, self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.$$$, $$ = Opal.$$, $module = Opal.module, $klass = Opal.klass, $truthy = Opal.truthy, $gvars = Opal.gvars, $send = Opal.send;

  Opal.add_stubs(['$[]', '$class', '$<', '$size', '$[]=', '$-', '$__send__', '$_racc_setup', '$raise', '$_racc_init_sysvars', '$catch', '$!=', '$next_token', '$racc_read_token', '$+', '$>=', '$==', '$_racc_evalact', '$!', '$>', '$push', '$racc_shift', '$-@', '$_racc_do_reduce', '$===', '$racc_accept', '$throw', '$on_error', '$<=', '$pop', '$racc_e_pop', '$inspect', '$racc_next_state', '$*', '$racc_reduce', '$sprintf', '$token_to_str', '$print', '$racc_token2str', '$puts', '$racc_print_stacks', '$empty?', '$each', '$racc_print_states', '$each_index']);
  
  (function($base, $parent_nesting) {
    var self = $module($base, 'Racc');

    var $nesting = [self].concat($parent_nesting);

    (function($base, $super, $parent_nesting) {
      var self = $klass($base, $super, 'ParseError');

      var $nesting = [self].concat($parent_nesting);

      return nil
    })($nesting[0], $$($nesting, 'StandardError'), $nesting)
  })($nesting[0], $nesting);
  if ($truthy((($a = $$$('::', 'ParseError', 'skip_raise')) ? 'constant' : nil))) {
  } else {
    Opal.const_set($nesting[0], 'ParseError', $$$($$($nesting, 'Racc'), 'ParseError'))
  };
  return (function($base, $parent_nesting) {
    var self = $module($base, 'Racc');

    var $nesting = [self].concat($parent_nesting), $a;

    
    if ($truthy((($a = $$($nesting, 'Racc_No_Extensions', 'skip_raise')) ? 'constant' : nil))) {
    } else {
      Opal.const_set($nesting[0], 'Racc_No_Extensions', false)
    };
    (function($base, $super, $parent_nesting) {
      var self = $klass($base, $super, 'Parser');

      var $nesting = [self].concat($parent_nesting), $Parser_racc_runtime_type$1, $Parser__racc_setup$2, $Parser__racc_init_sysvars$3, $Parser_do_parse$4, $Parser_next_token$5, $Parser__racc_do_parse_rb$6, $Parser_yyparse$8, $Parser__racc_yyparse_rb$9, $Parser__racc_evalact$12, $Parser__racc_do_reduce$14, $Parser_on_error$15, $Parser_yyerror$16, $Parser_yyaccept$17, $Parser_yyerrok$18, $Parser_racc_read_token$19, $Parser_racc_shift$20, $Parser_racc_reduce$21, $Parser_racc_accept$23, $Parser_racc_e_pop$24, $Parser_racc_next_state$25, $Parser_racc_print_stacks$26, $Parser_racc_print_states$28, $Parser_racc_token2str$30, $Parser_token_to_str$31;

      self.$$prototype.yydebug = self.$$prototype.racc_debug_out = self.$$prototype.racc_error_status = self.$$prototype.racc_t = self.$$prototype.racc_vstack = self.$$prototype.racc_val = self.$$prototype.racc_state = self.$$prototype.racc_tstack = nil;
      
      Opal.const_set($nesting[0], 'Racc_Runtime_Version', "1.4.6");
      Opal.const_set($nesting[0], 'Racc_Runtime_Revision', ["originalRevision:", "1.8"]['$[]'](1));
      Opal.const_set($nesting[0], 'Racc_Runtime_Core_Version_R', "1.4.6");
      Opal.const_set($nesting[0], 'Racc_Runtime_Core_Revision_R', ["originalRevision:", "1.8"]['$[]'](1));
      Opal.const_set($nesting[0], 'Racc_Main_Parsing_Routine', "_racc_do_parse_rb");
      Opal.const_set($nesting[0], 'Racc_YY_Parse_Method', "_racc_yyparse_rb");
      Opal.const_set($nesting[0], 'Racc_Runtime_Core_Version', $$($nesting, 'Racc_Runtime_Core_Version_R'));
      Opal.const_set($nesting[0], 'Racc_Runtime_Core_Revision', $$($nesting, 'Racc_Runtime_Core_Revision_R'));
      Opal.const_set($nesting[0], 'Racc_Runtime_Type', "ruby");
      Opal.defs($$($nesting, 'Parser'), '$racc_runtime_type', $Parser_racc_runtime_type$1 = function $$racc_runtime_type() {
        var self = this;

        return $$($nesting, 'Racc_Runtime_Type')
      }, $Parser_racc_runtime_type$1.$$arity = 0);
      
      Opal.def(self, '$_racc_setup', $Parser__racc_setup$2 = function $$_racc_setup() {
        var $a, $b, $c, self = this, arg = nil, $writer = nil;
        if ($gvars.stderr == null) $gvars.stderr = nil;

        
        if ($truthy($$$(self.$class(), 'Racc_debug_parser'))) {
        } else {
          self.yydebug = false
        };
        if ($truthy((($a = self['yydebug'], $a != null && $a !== nil) ? 'instance-variable' : nil))) {
        } else {
          self.yydebug = false
        };
        if ($truthy(self.yydebug)) {
          
          if ($truthy((($b = self['racc_debug_out'], $b != null && $b !== nil) ? 'instance-variable' : nil))) {
          } else {
            self.racc_debug_out = $gvars.stderr
          };
          self.racc_debug_out = ($truthy($c = self.racc_debug_out) ? $c : $gvars.stderr);};
        arg = $$$(self.$class(), 'Racc_arg');
        if ($truthy($rb_lt(arg.$size(), 14))) {
          
          $writer = [13, true];
          $send(arg, '[]=', Opal.to_a($writer));
          $writer[$rb_minus($writer["length"], 1)];};
        return arg;
      }, $Parser__racc_setup$2.$$arity = 0);
      
      Opal.def(self, '$_racc_init_sysvars', $Parser__racc_init_sysvars$3 = function $$_racc_init_sysvars() {
        var self = this;

        
        self.racc_state = [0];
        self.racc_tstack = [];
        self.racc_vstack = [];
        self.racc_t = nil;
        self.racc_val = nil;
        self.racc_read_next = true;
        self.racc_user_yyerror = false;
        return (self.racc_error_status = 0);
      }, $Parser__racc_init_sysvars$3.$$arity = 0);
      
      Opal.def(self, '$do_parse', $Parser_do_parse$4 = function $$do_parse() {
        var self = this;

        return self.$__send__($$($nesting, 'Racc_Main_Parsing_Routine'), self.$_racc_setup(), false)
      }, $Parser_do_parse$4.$$arity = 0);
      
      Opal.def(self, '$next_token', $Parser_next_token$5 = function $$next_token() {
        var self = this;

        return self.$raise($$($nesting, 'NotImplementedError'), "" + (self.$class()) + "#next_token is not defined")
      }, $Parser_next_token$5.$$arity = 0);
      
      Opal.def(self, '$_racc_do_parse_rb', $Parser__racc_do_parse_rb$6 = function $$_racc_do_parse_rb(arg, in_debug) {
        var $a, $b, $$7, self = this, action_table = nil, action_check = nil, action_default = nil, action_pointer = nil, _ = nil, token_table = nil, tok = nil, act = nil, i = nil;

        
        $b = arg, $a = Opal.to_ary($b), (action_table = ($a[0] == null ? nil : $a[0])), (action_check = ($a[1] == null ? nil : $a[1])), (action_default = ($a[2] == null ? nil : $a[2])), (action_pointer = ($a[3] == null ? nil : $a[3])), (_ = ($a[4] == null ? nil : $a[4])), (_ = ($a[5] == null ? nil : $a[5])), (_ = ($a[6] == null ? nil : $a[6])), (_ = ($a[7] == null ? nil : $a[7])), (_ = ($a[8] == null ? nil : $a[8])), (_ = ($a[9] == null ? nil : $a[9])), (token_table = ($a[10] == null ? nil : $a[10])), (_ = ($a[11] == null ? nil : $a[11])), (_ = ($a[12] == null ? nil : $a[12])), (_ = ($a[13] == null ? nil : $a[13])), $b;
        self.$_racc_init_sysvars();
        tok = (act = (i = nil));
        return $send(self, 'catch', ["racc_end_parse"], ($$7 = function(){var self = $$7.$$s == null ? this : $$7.$$s, $c, $d, $e;
          if (self.racc_state == null) self.racc_state = nil;
          if (self.racc_read_next == null) self.racc_read_next = nil;
          if (self.racc_t == null) self.racc_t = nil;
          if (self.yydebug == null) self.yydebug = nil;
          if (self.racc_val == null) self.racc_val = nil;

        while ($truthy(true)) {
            
            if ($truthy((i = action_pointer['$[]'](self.racc_state['$[]'](-1))))) {
              
              if ($truthy(self.racc_read_next)) {
                if ($truthy(self.racc_t['$!='](0))) {
                  
                  $e = self.$next_token(), $d = Opal.to_ary($e), (tok = ($d[0] == null ? nil : $d[0])), (self.racc_val = ($d[1] == null ? nil : $d[1])), $e;
                  if ($truthy(tok)) {
                    self.racc_t = ($truthy($d = token_table['$[]'](tok)) ? $d : 1)
                  } else {
                    self.racc_t = 0
                  };
                  if ($truthy(self.yydebug)) {
                    self.$racc_read_token(self.racc_t, tok, self.racc_val)};
                  self.racc_read_next = false;}};
              i = $rb_plus(i, self.racc_t);
              if ($truthy(($truthy($d = ($truthy($e = $rb_ge(i, 0)) ? (act = action_table['$[]'](i)) : $e)) ? action_check['$[]'](i)['$=='](self.racc_state['$[]'](-1)) : $d))) {
              } else {
                act = action_default['$[]'](self.racc_state['$[]'](-1))
              };
            } else {
              act = action_default['$[]'](self.racc_state['$[]'](-1))
            };
            while ($truthy((act = self.$_racc_evalact(act, arg)))) {
              
            };
          }}, $$7.$$s = self, $$7.$$arity = 0, $$7));
      }, $Parser__racc_do_parse_rb$6.$$arity = 2);
      
      Opal.def(self, '$yyparse', $Parser_yyparse$8 = function $$yyparse(recv, mid) {
        var self = this;

        return self.$__send__($$($nesting, 'Racc_YY_Parse_Method'), recv, mid, self.$_racc_setup(), true)
      }, $Parser_yyparse$8.$$arity = 2);
      
      Opal.def(self, '$_racc_yyparse_rb', $Parser__racc_yyparse_rb$9 = function $$_racc_yyparse_rb(recv, mid, arg, c_debug) {
        var $a, $b, $$10, self = this, action_table = nil, action_check = nil, action_default = nil, action_pointer = nil, _ = nil, token_table = nil, act = nil, i = nil;

        
        $b = arg, $a = Opal.to_ary($b), (action_table = ($a[0] == null ? nil : $a[0])), (action_check = ($a[1] == null ? nil : $a[1])), (action_default = ($a[2] == null ? nil : $a[2])), (action_pointer = ($a[3] == null ? nil : $a[3])), (_ = ($a[4] == null ? nil : $a[4])), (_ = ($a[5] == null ? nil : $a[5])), (_ = ($a[6] == null ? nil : $a[6])), (_ = ($a[7] == null ? nil : $a[7])), (_ = ($a[8] == null ? nil : $a[8])), (_ = ($a[9] == null ? nil : $a[9])), (token_table = ($a[10] == null ? nil : $a[10])), (_ = ($a[11] == null ? nil : $a[11])), (_ = ($a[12] == null ? nil : $a[12])), (_ = ($a[13] == null ? nil : $a[13])), $b;
        self.$_racc_init_sysvars();
        act = nil;
        i = nil;
        return $send(self, 'catch', ["racc_end_parse"], ($$10 = function(){var self = $$10.$$s == null ? this : $$10.$$s, $c, $d, $$11;
          if (self.racc_state == null) self.racc_state = nil;

        
          while (!($truthy((i = action_pointer['$[]'](self.racc_state['$[]'](-1)))))) {
            while ($truthy((act = self.$_racc_evalact(action_default['$[]'](self.racc_state['$[]'](-1)), arg)))) {
              
            }
          };
          return $send(recv, '__send__', [mid], ($$11 = function(tok, val){var self = $$11.$$s == null ? this : $$11.$$s, $e, $f, $g, $h, $i;
            if (self.racc_t == null) self.racc_t = nil;
            if (self.racc_state == null) self.racc_state = nil;
            if (self.racc_read_next == null) self.racc_read_next = nil;

          
            
            if (tok == null) {
              tok = nil;
            };
            
            if (val == null) {
              val = nil;
            };
            if ($truthy(tok)) {
              self.racc_t = ($truthy($e = token_table['$[]'](tok)) ? $e : 1)
            } else {
              self.racc_t = 0
            };
            self.racc_val = val;
            self.racc_read_next = false;
            i = $rb_plus(i, self.racc_t);
            if ($truthy(($truthy($e = ($truthy($f = $rb_ge(i, 0)) ? (act = action_table['$[]'](i)) : $f)) ? action_check['$[]'](i)['$=='](self.racc_state['$[]'](-1)) : $e))) {
            } else {
              act = action_default['$[]'](self.racc_state['$[]'](-1))
            };
            while ($truthy((act = self.$_racc_evalact(act, arg)))) {
              
            };
            while ($truthy(($truthy($f = ($truthy($g = (i = action_pointer['$[]'](self.racc_state['$[]'](-1)))['$!']()) ? $g : self.racc_read_next['$!']())) ? $f : self.racc_t['$=='](0)))) {
              
              if ($truthy(($truthy($f = ($truthy($g = ($truthy($h = ($truthy($i = i) ? (i = $rb_plus(i, self.racc_t)) : $i)) ? $rb_ge(i, 0) : $h)) ? (act = action_table['$[]'](i)) : $g)) ? action_check['$[]'](i)['$=='](self.racc_state['$[]'](-1)) : $f))) {
              } else {
                act = action_default['$[]'](self.racc_state['$[]'](-1))
              };
              while ($truthy((act = self.$_racc_evalact(act, arg)))) {
                
              };
            };}, $$11.$$s = self, $$11.$$arity = 2, $$11));}, $$10.$$s = self, $$10.$$arity = 0, $$10));
      }, $Parser__racc_yyparse_rb$9.$$arity = 4);
      
      Opal.def(self, '$_racc_evalact', $Parser__racc_evalact$12 = function $$_racc_evalact(act, arg) {
        var $a, $b, $$13, $c, self = this, action_table = nil, action_check = nil, _ = nil, action_pointer = nil, shift_n = nil, reduce_n = nil, code = nil, $case = nil, i = nil;

        
        $b = arg, $a = Opal.to_ary($b), (action_table = ($a[0] == null ? nil : $a[0])), (action_check = ($a[1] == null ? nil : $a[1])), (_ = ($a[2] == null ? nil : $a[2])), (action_pointer = ($a[3] == null ? nil : $a[3])), (_ = ($a[4] == null ? nil : $a[4])), (_ = ($a[5] == null ? nil : $a[5])), (_ = ($a[6] == null ? nil : $a[6])), (_ = ($a[7] == null ? nil : $a[7])), (_ = ($a[8] == null ? nil : $a[8])), (_ = ($a[9] == null ? nil : $a[9])), (_ = ($a[10] == null ? nil : $a[10])), (shift_n = ($a[11] == null ? nil : $a[11])), (reduce_n = ($a[12] == null ? nil : $a[12])), (_ = ($a[13] == null ? nil : $a[13])), (_ = ($a[14] == null ? nil : $a[14])), $b;
        if ($truthy(($truthy($a = $rb_gt(act, 0)) ? $rb_lt(act, shift_n) : $a))) {
          
          if ($truthy($rb_gt(self.racc_error_status, 0))) {
            if (self.racc_t['$=='](1)) {
            } else {
              self.racc_error_status = $rb_minus(self.racc_error_status, 1)
            }};
          self.racc_vstack.$push(self.racc_val);
          self.racc_state.$push(act);
          self.racc_read_next = true;
          if ($truthy(self.yydebug)) {
            
            self.racc_tstack.$push(self.racc_t);
            self.$racc_shift(self.racc_t, self.racc_tstack, self.racc_vstack);};
        } else if ($truthy(($truthy($a = $rb_lt(act, 0)) ? $rb_gt(act, reduce_n['$-@']()) : $a))) {
          
          code = $send(self, 'catch', ["racc_jump"], ($$13 = function(){var self = $$13.$$s == null ? this : $$13.$$s;
            if (self.racc_state == null) self.racc_state = nil;

          
            self.racc_state.$push(self.$_racc_do_reduce(arg, act));
            return false;}, $$13.$$s = self, $$13.$$arity = 0, $$13));
          if ($truthy(code)) {
            $case = code;
            if ((1)['$===']($case)) {
            self.racc_user_yyerror = true;
            return reduce_n['$-@']();}
            else if ((2)['$===']($case)) {return shift_n}
            else {self.$raise("[Racc Bug] unknown jump code")}};
        } else if (act['$=='](shift_n)) {
          
          if ($truthy(self.yydebug)) {
            self.$racc_accept()};
          self.$throw("racc_end_parse", self.racc_vstack['$[]'](0));
        } else if (act['$=='](reduce_n['$-@']())) {
          
          $case = self.racc_error_status;
          if ((0)['$===']($case)) {if ($truthy(arg['$[]'](21))) {
          } else {
            self.$on_error(self.racc_t, self.racc_val, self.racc_vstack)
          }}
          else if ((3)['$===']($case)) {
          if (self.racc_t['$=='](0)) {
            self.$throw("racc_end_parse", nil)};
          self.racc_read_next = true;};
          self.racc_user_yyerror = false;
          self.racc_error_status = 3;
          while ($truthy(true)) {
            
            if ($truthy((i = action_pointer['$[]'](self.racc_state['$[]'](-1))))) {
              
              i = $rb_plus(i, 1);
              if ($truthy(($truthy($b = ($truthy($c = $rb_ge(i, 0)) ? (act = action_table['$[]'](i)) : $c)) ? action_check['$[]'](i)['$=='](self.racc_state['$[]'](-1)) : $b))) {
                break;};};
            if ($truthy($rb_le(self.racc_state.$size(), 1))) {
              self.$throw("racc_end_parse", nil)};
            self.racc_state.$pop();
            self.racc_vstack.$pop();
            if ($truthy(self.yydebug)) {
              
              self.racc_tstack.$pop();
              self.$racc_e_pop(self.racc_state, self.racc_tstack, self.racc_vstack);};
          };
          return act;
        } else {
          self.$raise("" + "[Racc Bug] unknown action " + (act.$inspect()))
        };
        if ($truthy(self.yydebug)) {
          self.$racc_next_state(self.racc_state['$[]'](-1), self.racc_state)};
        return nil;
      }, $Parser__racc_evalact$12.$$arity = 2);
      
      Opal.def(self, '$_racc_do_reduce', $Parser__racc_do_reduce$14 = function $$_racc_do_reduce(arg, act) {
        var $a, $b, self = this, _ = nil, goto_table = nil, goto_check = nil, goto_default = nil, goto_pointer = nil, nt_base = nil, reduce_table = nil, use_result = nil, state = nil, vstack = nil, tstack = nil, i = nil, len = nil, reduce_to = nil, method_id = nil, void_array = nil, tmp_t = nil, tmp_v = nil, $writer = nil, k1 = nil, curstate = nil;

        
        $b = arg, $a = Opal.to_ary($b), (_ = ($a[0] == null ? nil : $a[0])), (_ = ($a[1] == null ? nil : $a[1])), (_ = ($a[2] == null ? nil : $a[2])), (_ = ($a[3] == null ? nil : $a[3])), (goto_table = ($a[4] == null ? nil : $a[4])), (goto_check = ($a[5] == null ? nil : $a[5])), (goto_default = ($a[6] == null ? nil : $a[6])), (goto_pointer = ($a[7] == null ? nil : $a[7])), (nt_base = ($a[8] == null ? nil : $a[8])), (reduce_table = ($a[9] == null ? nil : $a[9])), (_ = ($a[10] == null ? nil : $a[10])), (_ = ($a[11] == null ? nil : $a[11])), (_ = ($a[12] == null ? nil : $a[12])), (use_result = ($a[13] == null ? nil : $a[13])), $b;
        state = self.racc_state;
        vstack = self.racc_vstack;
        tstack = self.racc_tstack;
        i = $rb_times(act, -3);
        len = reduce_table['$[]'](i);
        reduce_to = reduce_table['$[]']($rb_plus(i, 1));
        method_id = reduce_table['$[]']($rb_plus(i, 2));
        void_array = [];
        if ($truthy(self.yydebug)) {
          tmp_t = tstack['$[]'](len['$-@'](), len)};
        tmp_v = vstack['$[]'](len['$-@'](), len);
        if ($truthy(self.yydebug)) {
          
          $writer = [len['$-@'](), len, void_array];
          $send(tstack, '[]=', Opal.to_a($writer));
          $writer[$rb_minus($writer["length"], 1)];};
        
        $writer = [len['$-@'](), len, void_array];
        $send(vstack, '[]=', Opal.to_a($writer));
        $writer[$rb_minus($writer["length"], 1)];;
        
        $writer = [len['$-@'](), len, void_array];
        $send(state, '[]=', Opal.to_a($writer));
        $writer[$rb_minus($writer["length"], 1)];;
        if ($truthy(use_result)) {
          vstack.$push(self.$__send__(method_id, tmp_v, vstack, tmp_v['$[]'](0)))
        } else {
          vstack.$push(self.$__send__(method_id, tmp_v, vstack))
        };
        tstack.$push(reduce_to);
        if ($truthy(self.yydebug)) {
          self.$racc_reduce(tmp_t, reduce_to, tstack, vstack)};
        k1 = $rb_minus(reduce_to, nt_base);
        if ($truthy((i = goto_pointer['$[]'](k1)))) {
          
          i = $rb_plus(i, state['$[]'](-1));
          if ($truthy(($truthy($a = ($truthy($b = $rb_ge(i, 0)) ? (curstate = goto_table['$[]'](i)) : $b)) ? goto_check['$[]'](i)['$=='](k1) : $a))) {
            return curstate};};
        return goto_default['$[]'](k1);
      }, $Parser__racc_do_reduce$14.$$arity = 2);
      
      Opal.def(self, '$on_error', $Parser_on_error$15 = function $$on_error(t, val, vstack) {
        var $a, self = this;

        return self.$raise($$($nesting, 'ParseError'), self.$sprintf("\nparse error on value %s (%s)", val.$inspect(), ($truthy($a = self.$token_to_str(t)) ? $a : "?")))
      }, $Parser_on_error$15.$$arity = 3);
      
      Opal.def(self, '$yyerror', $Parser_yyerror$16 = function $$yyerror() {
        var self = this;

        return self.$throw("racc_jump", 1)
      }, $Parser_yyerror$16.$$arity = 0);
      
      Opal.def(self, '$yyaccept', $Parser_yyaccept$17 = function $$yyaccept() {
        var self = this;

        return self.$throw("racc_jump", 2)
      }, $Parser_yyaccept$17.$$arity = 0);
      
      Opal.def(self, '$yyerrok', $Parser_yyerrok$18 = function $$yyerrok() {
        var self = this;

        return (self.racc_error_status = 0)
      }, $Parser_yyerrok$18.$$arity = 0);
      
      Opal.def(self, '$racc_read_token', $Parser_racc_read_token$19 = function $$racc_read_token(t, tok, val) {
        var self = this;

        
        self.racc_debug_out.$print("read    ");
        self.racc_debug_out.$print(tok.$inspect(), "(", self.$racc_token2str(t), ") ");
        self.racc_debug_out.$puts(val.$inspect());
        return self.racc_debug_out.$puts();
      }, $Parser_racc_read_token$19.$$arity = 3);
      
      Opal.def(self, '$racc_shift', $Parser_racc_shift$20 = function $$racc_shift(tok, tstack, vstack) {
        var self = this;

        
        self.racc_debug_out.$puts("" + "shift   " + (self.$racc_token2str(tok)));
        self.$racc_print_stacks(tstack, vstack);
        return self.racc_debug_out.$puts();
      }, $Parser_racc_shift$20.$$arity = 3);
      
      Opal.def(self, '$racc_reduce', $Parser_racc_reduce$21 = function $$racc_reduce(toks, sim, tstack, vstack) {
        var $$22, self = this, out = nil;

        
        out = self.racc_debug_out;
        out.$print("reduce ");
        if ($truthy(toks['$empty?']())) {
          out.$print(" <none>")
        } else {
          $send(toks, 'each', [], ($$22 = function(t){var self = $$22.$$s == null ? this : $$22.$$s;

          
            
            if (t == null) {
              t = nil;
            };
            return out.$print(" ", self.$racc_token2str(t));}, $$22.$$s = self, $$22.$$arity = 1, $$22))
        };
        out.$puts("" + " --> " + (self.$racc_token2str(sim)));
        self.$racc_print_stacks(tstack, vstack);
        return self.racc_debug_out.$puts();
      }, $Parser_racc_reduce$21.$$arity = 4);
      
      Opal.def(self, '$racc_accept', $Parser_racc_accept$23 = function $$racc_accept() {
        var self = this;

        
        self.racc_debug_out.$puts("accept");
        return self.racc_debug_out.$puts();
      }, $Parser_racc_accept$23.$$arity = 0);
      
      Opal.def(self, '$racc_e_pop', $Parser_racc_e_pop$24 = function $$racc_e_pop(state, tstack, vstack) {
        var self = this;

        
        self.racc_debug_out.$puts("error recovering mode: pop token");
        self.$racc_print_states(state);
        self.$racc_print_stacks(tstack, vstack);
        return self.racc_debug_out.$puts();
      }, $Parser_racc_e_pop$24.$$arity = 3);
      
      Opal.def(self, '$racc_next_state', $Parser_racc_next_state$25 = function $$racc_next_state(curstate, state) {
        var self = this;

        
        self.racc_debug_out.$puts("" + "goto    " + (curstate));
        self.$racc_print_states(state);
        return self.racc_debug_out.$puts();
      }, $Parser_racc_next_state$25.$$arity = 2);
      
      Opal.def(self, '$racc_print_stacks', $Parser_racc_print_stacks$26 = function $$racc_print_stacks(t, v) {
        var $$27, self = this, out = nil;

        
        out = self.racc_debug_out;
        out.$print("        [");
        $send(t, 'each_index', [], ($$27 = function(i){var self = $$27.$$s == null ? this : $$27.$$s;

        
          
          if (i == null) {
            i = nil;
          };
          return out.$print(" (", self.$racc_token2str(t['$[]'](i)), " ", v['$[]'](i).$inspect(), ")");}, $$27.$$s = self, $$27.$$arity = 1, $$27));
        return out.$puts(" ]");
      }, $Parser_racc_print_stacks$26.$$arity = 2);
      
      Opal.def(self, '$racc_print_states', $Parser_racc_print_states$28 = function $$racc_print_states(s) {
        var $$29, self = this, out = nil;

        
        out = self.racc_debug_out;
        out.$print("        [");
        $send(s, 'each', [], ($$29 = function(st){var self = $$29.$$s == null ? this : $$29.$$s;

        
          
          if (st == null) {
            st = nil;
          };
          return out.$print(" ", st);}, $$29.$$s = self, $$29.$$arity = 1, $$29));
        return out.$puts(" ]");
      }, $Parser_racc_print_states$28.$$arity = 1);
      
      Opal.def(self, '$racc_token2str', $Parser_racc_token2str$30 = function $$racc_token2str(tok) {
        var $a, self = this;

        return ($truthy($a = $$$(self.$class(), 'Racc_token_to_s_table')['$[]'](tok)) ? $a : self.$raise("" + "[Racc Bug] can't convert token " + (tok) + " to string"))
      }, $Parser_racc_token2str$30.$$arity = 1);
      return (Opal.def(self, '$token_to_str', $Parser_token_to_str$31 = function $$token_to_str(t) {
        var self = this;

        return $$$(self.$class(), 'Racc_token_to_s_table')['$[]'](t)
      }, $Parser_token_to_str$31.$$arity = 1), nil) && 'token_to_str';
    })($nesting[0], null, $nesting);
  })($nesting[0], $nesting);
};

/* Generated by Opal 1.0.0 */
Opal.modules["parser/version"] = function(Opal) {
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.$$$, $$ = Opal.$$, $module = Opal.module;

  return (function($base, $parent_nesting) {
    var self = $module($base, 'Parser');

    var $nesting = [self].concat($parent_nesting);

    Opal.const_set($nesting[0], 'VERSION', "2.7.1.4")
  })($nesting[0], $nesting)
};

/* Generated by Opal 1.0.0 */
Opal.modules["racc/parser"] = function(Opal) {
  function $rb_lt(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs < rhs : lhs['$<'](rhs);
  }
  function $rb_minus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs - rhs : lhs['$-'](rhs);
  }
  function $rb_plus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs + rhs : lhs['$+'](rhs);
  }
  function $rb_ge(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs >= rhs : lhs['$>='](rhs);
  }
  function $rb_gt(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs > rhs : lhs['$>'](rhs);
  }
  function $rb_le(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs <= rhs : lhs['$<='](rhs);
  }
  function $rb_times(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs * rhs : lhs['$*'](rhs);
  }
  var $a, self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.$$$, $$ = Opal.$$, $module = Opal.module, $klass = Opal.klass, $truthy = Opal.truthy, $gvars = Opal.gvars, $send = Opal.send;

  Opal.add_stubs(['$[]', '$class', '$<', '$size', '$[]=', '$-', '$__send__', '$_racc_setup', '$raise', '$_racc_init_sysvars', '$catch', '$!=', '$next_token', '$racc_read_token', '$+', '$>=', '$==', '$_racc_evalact', '$!', '$>', '$push', '$racc_shift', '$-@', '$_racc_do_reduce', '$===', '$racc_accept', '$throw', '$on_error', '$<=', '$pop', '$racc_e_pop', '$inspect', '$racc_next_state', '$*', '$racc_reduce', '$sprintf', '$token_to_str', '$print', '$racc_token2str', '$puts', '$racc_print_stacks', '$empty?', '$each', '$racc_print_states', '$each_index']);
  
  (function($base, $parent_nesting) {
    var self = $module($base, 'Racc');

    var $nesting = [self].concat($parent_nesting);

    (function($base, $super, $parent_nesting) {
      var self = $klass($base, $super, 'ParseError');

      var $nesting = [self].concat($parent_nesting);

      return nil
    })($nesting[0], $$($nesting, 'StandardError'), $nesting)
  })($nesting[0], $nesting);
  if ($truthy((($a = $$$('::', 'ParseError', 'skip_raise')) ? 'constant' : nil))) {
  } else {
    Opal.const_set($nesting[0], 'ParseError', $$$($$($nesting, 'Racc'), 'ParseError'))
  };
  return (function($base, $parent_nesting) {
    var self = $module($base, 'Racc');

    var $nesting = [self].concat($parent_nesting), $a;

    
    if ($truthy((($a = $$($nesting, 'Racc_No_Extensions', 'skip_raise')) ? 'constant' : nil))) {
    } else {
      Opal.const_set($nesting[0], 'Racc_No_Extensions', false)
    };
    (function($base, $super, $parent_nesting) {
      var self = $klass($base, $super, 'Parser');

      var $nesting = [self].concat($parent_nesting), $Parser_racc_runtime_type$1, $Parser__racc_setup$2, $Parser__racc_init_sysvars$3, $Parser_do_parse$4, $Parser_next_token$5, $Parser__racc_do_parse_rb$6, $Parser_yyparse$8, $Parser__racc_yyparse_rb$9, $Parser__racc_evalact$12, $Parser__racc_do_reduce$14, $Parser_on_error$15, $Parser_yyerror$16, $Parser_yyaccept$17, $Parser_yyerrok$18, $Parser_racc_read_token$19, $Parser_racc_shift$20, $Parser_racc_reduce$21, $Parser_racc_accept$23, $Parser_racc_e_pop$24, $Parser_racc_next_state$25, $Parser_racc_print_stacks$26, $Parser_racc_print_states$28, $Parser_racc_token2str$30, $Parser_token_to_str$31;

      self.$$prototype.yydebug = self.$$prototype.racc_debug_out = self.$$prototype.racc_error_status = self.$$prototype.racc_t = self.$$prototype.racc_vstack = self.$$prototype.racc_val = self.$$prototype.racc_state = self.$$prototype.racc_tstack = nil;
      
      Opal.const_set($nesting[0], 'Racc_Runtime_Version', "1.4.6");
      Opal.const_set($nesting[0], 'Racc_Runtime_Revision', ["originalRevision:", "1.8"]['$[]'](1));
      Opal.const_set($nesting[0], 'Racc_Runtime_Core_Version_R', "1.4.6");
      Opal.const_set($nesting[0], 'Racc_Runtime_Core_Revision_R', ["originalRevision:", "1.8"]['$[]'](1));
      Opal.const_set($nesting[0], 'Racc_Main_Parsing_Routine', "_racc_do_parse_rb");
      Opal.const_set($nesting[0], 'Racc_YY_Parse_Method', "_racc_yyparse_rb");
      Opal.const_set($nesting[0], 'Racc_Runtime_Core_Version', $$($nesting, 'Racc_Runtime_Core_Version_R'));
      Opal.const_set($nesting[0], 'Racc_Runtime_Core_Revision', $$($nesting, 'Racc_Runtime_Core_Revision_R'));
      Opal.const_set($nesting[0], 'Racc_Runtime_Type', "ruby");
      Opal.defs($$($nesting, 'Parser'), '$racc_runtime_type', $Parser_racc_runtime_type$1 = function $$racc_runtime_type() {
        var self = this;

        return $$($nesting, 'Racc_Runtime_Type')
      }, $Parser_racc_runtime_type$1.$$arity = 0);
      
      Opal.def(self, '$_racc_setup', $Parser__racc_setup$2 = function $$_racc_setup() {
        var $a, $b, $c, self = this, arg = nil, $writer = nil;
        if ($gvars.stderr == null) $gvars.stderr = nil;

        
        if ($truthy($$$(self.$class(), 'Racc_debug_parser'))) {
        } else {
          self.yydebug = false
        };
        if ($truthy((($a = self['yydebug'], $a != null && $a !== nil) ? 'instance-variable' : nil))) {
        } else {
          self.yydebug = false
        };
        if ($truthy(self.yydebug)) {
          
          if ($truthy((($b = self['racc_debug_out'], $b != null && $b !== nil) ? 'instance-variable' : nil))) {
          } else {
            self.racc_debug_out = $gvars.stderr
          };
          self.racc_debug_out = ($truthy($c = self.racc_debug_out) ? $c : $gvars.stderr);};
        arg = $$$(self.$class(), 'Racc_arg');
        if ($truthy($rb_lt(arg.$size(), 14))) {
          
          $writer = [13, true];
          $send(arg, '[]=', Opal.to_a($writer));
          $writer[$rb_minus($writer["length"], 1)];};
        return arg;
      }, $Parser__racc_setup$2.$$arity = 0);
      
      Opal.def(self, '$_racc_init_sysvars', $Parser__racc_init_sysvars$3 = function $$_racc_init_sysvars() {
        var self = this;

        
        self.racc_state = [0];
        self.racc_tstack = [];
        self.racc_vstack = [];
        self.racc_t = nil;
        self.racc_val = nil;
        self.racc_read_next = true;
        self.racc_user_yyerror = false;
        return (self.racc_error_status = 0);
      }, $Parser__racc_init_sysvars$3.$$arity = 0);
      
      Opal.def(self, '$do_parse', $Parser_do_parse$4 = function $$do_parse() {
        var self = this;

        return self.$__send__($$($nesting, 'Racc_Main_Parsing_Routine'), self.$_racc_setup(), false)
      }, $Parser_do_parse$4.$$arity = 0);
      
      Opal.def(self, '$next_token', $Parser_next_token$5 = function $$next_token() {
        var self = this;

        return self.$raise($$($nesting, 'NotImplementedError'), "" + (self.$class()) + "#next_token is not defined")
      }, $Parser_next_token$5.$$arity = 0);
      
      Opal.def(self, '$_racc_do_parse_rb', $Parser__racc_do_parse_rb$6 = function $$_racc_do_parse_rb(arg, in_debug) {
        var $a, $b, $$7, self = this, action_table = nil, action_check = nil, action_default = nil, action_pointer = nil, _ = nil, token_table = nil, tok = nil, act = nil, i = nil;

        
        $b = arg, $a = Opal.to_ary($b), (action_table = ($a[0] == null ? nil : $a[0])), (action_check = ($a[1] == null ? nil : $a[1])), (action_default = ($a[2] == null ? nil : $a[2])), (action_pointer = ($a[3] == null ? nil : $a[3])), (_ = ($a[4] == null ? nil : $a[4])), (_ = ($a[5] == null ? nil : $a[5])), (_ = ($a[6] == null ? nil : $a[6])), (_ = ($a[7] == null ? nil : $a[7])), (_ = ($a[8] == null ? nil : $a[8])), (_ = ($a[9] == null ? nil : $a[9])), (token_table = ($a[10] == null ? nil : $a[10])), (_ = ($a[11] == null ? nil : $a[11])), (_ = ($a[12] == null ? nil : $a[12])), (_ = ($a[13] == null ? nil : $a[13])), $b;
        self.$_racc_init_sysvars();
        tok = (act = (i = nil));
        return $send(self, 'catch', ["racc_end_parse"], ($$7 = function(){var self = $$7.$$s == null ? this : $$7.$$s, $c, $d, $e;
          if (self.racc_state == null) self.racc_state = nil;
          if (self.racc_read_next == null) self.racc_read_next = nil;
          if (self.racc_t == null) self.racc_t = nil;
          if (self.yydebug == null) self.yydebug = nil;
          if (self.racc_val == null) self.racc_val = nil;

        while ($truthy(true)) {
            
            if ($truthy((i = action_pointer['$[]'](self.racc_state['$[]'](-1))))) {
              
              if ($truthy(self.racc_read_next)) {
                if ($truthy(self.racc_t['$!='](0))) {
                  
                  $e = self.$next_token(), $d = Opal.to_ary($e), (tok = ($d[0] == null ? nil : $d[0])), (self.racc_val = ($d[1] == null ? nil : $d[1])), $e;
                  if ($truthy(tok)) {
                    self.racc_t = ($truthy($d = token_table['$[]'](tok)) ? $d : 1)
                  } else {
                    self.racc_t = 0
                  };
                  if ($truthy(self.yydebug)) {
                    self.$racc_read_token(self.racc_t, tok, self.racc_val)};
                  self.racc_read_next = false;}};
              i = $rb_plus(i, self.racc_t);
              if ($truthy(($truthy($d = ($truthy($e = $rb_ge(i, 0)) ? (act = action_table['$[]'](i)) : $e)) ? action_check['$[]'](i)['$=='](self.racc_state['$[]'](-1)) : $d))) {
              } else {
                act = action_default['$[]'](self.racc_state['$[]'](-1))
              };
            } else {
              act = action_default['$[]'](self.racc_state['$[]'](-1))
            };
            while ($truthy((act = self.$_racc_evalact(act, arg)))) {
              
            };
          }}, $$7.$$s = self, $$7.$$arity = 0, $$7));
      }, $Parser__racc_do_parse_rb$6.$$arity = 2);
      
      Opal.def(self, '$yyparse', $Parser_yyparse$8 = function $$yyparse(recv, mid) {
        var self = this;

        return self.$__send__($$($nesting, 'Racc_YY_Parse_Method'), recv, mid, self.$_racc_setup(), true)
      }, $Parser_yyparse$8.$$arity = 2);
      
      Opal.def(self, '$_racc_yyparse_rb', $Parser__racc_yyparse_rb$9 = function $$_racc_yyparse_rb(recv, mid, arg, c_debug) {
        var $a, $b, $$10, self = this, action_table = nil, action_check = nil, action_default = nil, action_pointer = nil, _ = nil, token_table = nil, act = nil, i = nil;

        
        $b = arg, $a = Opal.to_ary($b), (action_table = ($a[0] == null ? nil : $a[0])), (action_check = ($a[1] == null ? nil : $a[1])), (action_default = ($a[2] == null ? nil : $a[2])), (action_pointer = ($a[3] == null ? nil : $a[3])), (_ = ($a[4] == null ? nil : $a[4])), (_ = ($a[5] == null ? nil : $a[5])), (_ = ($a[6] == null ? nil : $a[6])), (_ = ($a[7] == null ? nil : $a[7])), (_ = ($a[8] == null ? nil : $a[8])), (_ = ($a[9] == null ? nil : $a[9])), (token_table = ($a[10] == null ? nil : $a[10])), (_ = ($a[11] == null ? nil : $a[11])), (_ = ($a[12] == null ? nil : $a[12])), (_ = ($a[13] == null ? nil : $a[13])), $b;
        self.$_racc_init_sysvars();
        act = nil;
        i = nil;
        return $send(self, 'catch', ["racc_end_parse"], ($$10 = function(){var self = $$10.$$s == null ? this : $$10.$$s, $c, $d, $$11;
          if (self.racc_state == null) self.racc_state = nil;

        
          while (!($truthy((i = action_pointer['$[]'](self.racc_state['$[]'](-1)))))) {
            while ($truthy((act = self.$_racc_evalact(action_default['$[]'](self.racc_state['$[]'](-1)), arg)))) {
              
            }
          };
          return $send(recv, '__send__', [mid], ($$11 = function(tok, val){var self = $$11.$$s == null ? this : $$11.$$s, $e, $f, $g, $h, $i;
            if (self.racc_t == null) self.racc_t = nil;
            if (self.racc_state == null) self.racc_state = nil;
            if (self.racc_read_next == null) self.racc_read_next = nil;

          
            
            if (tok == null) {
              tok = nil;
            };
            
            if (val == null) {
              val = nil;
            };
            if ($truthy(tok)) {
              self.racc_t = ($truthy($e = token_table['$[]'](tok)) ? $e : 1)
            } else {
              self.racc_t = 0
            };
            self.racc_val = val;
            self.racc_read_next = false;
            i = $rb_plus(i, self.racc_t);
            if ($truthy(($truthy($e = ($truthy($f = $rb_ge(i, 0)) ? (act = action_table['$[]'](i)) : $f)) ? action_check['$[]'](i)['$=='](self.racc_state['$[]'](-1)) : $e))) {
            } else {
              act = action_default['$[]'](self.racc_state['$[]'](-1))
            };
            while ($truthy((act = self.$_racc_evalact(act, arg)))) {
              
            };
            while ($truthy(($truthy($f = ($truthy($g = (i = action_pointer['$[]'](self.racc_state['$[]'](-1)))['$!']()) ? $g : self.racc_read_next['$!']())) ? $f : self.racc_t['$=='](0)))) {
              
              if ($truthy(($truthy($f = ($truthy($g = ($truthy($h = ($truthy($i = i) ? (i = $rb_plus(i, self.racc_t)) : $i)) ? $rb_ge(i, 0) : $h)) ? (act = action_table['$[]'](i)) : $g)) ? action_check['$[]'](i)['$=='](self.racc_state['$[]'](-1)) : $f))) {
              } else {
                act = action_default['$[]'](self.racc_state['$[]'](-1))
              };
              while ($truthy((act = self.$_racc_evalact(act, arg)))) {
                
              };
            };}, $$11.$$s = self, $$11.$$arity = 2, $$11));}, $$10.$$s = self, $$10.$$arity = 0, $$10));
      }, $Parser__racc_yyparse_rb$9.$$arity = 4);
      
      Opal.def(self, '$_racc_evalact', $Parser__racc_evalact$12 = function $$_racc_evalact(act, arg) {
        var $a, $b, $$13, $c, self = this, action_table = nil, action_check = nil, _ = nil, action_pointer = nil, shift_n = nil, reduce_n = nil, code = nil, $case = nil, i = nil;

        
        $b = arg, $a = Opal.to_ary($b), (action_table = ($a[0] == null ? nil : $a[0])), (action_check = ($a[1] == null ? nil : $a[1])), (_ = ($a[2] == null ? nil : $a[2])), (action_pointer = ($a[3] == null ? nil : $a[3])), (_ = ($a[4] == null ? nil : $a[4])), (_ = ($a[5] == null ? nil : $a[5])), (_ = ($a[6] == null ? nil : $a[6])), (_ = ($a[7] == null ? nil : $a[7])), (_ = ($a[8] == null ? nil : $a[8])), (_ = ($a[9] == null ? nil : $a[9])), (_ = ($a[10] == null ? nil : $a[10])), (shift_n = ($a[11] == null ? nil : $a[11])), (reduce_n = ($a[12] == null ? nil : $a[12])), (_ = ($a[13] == null ? nil : $a[13])), (_ = ($a[14] == null ? nil : $a[14])), $b;
        if ($truthy(($truthy($a = $rb_gt(act, 0)) ? $rb_lt(act, shift_n) : $a))) {
          
          if ($truthy($rb_gt(self.racc_error_status, 0))) {
            if (self.racc_t['$=='](1)) {
            } else {
              self.racc_error_status = $rb_minus(self.racc_error_status, 1)
            }};
          self.racc_vstack.$push(self.racc_val);
          self.racc_state.$push(act);
          self.racc_read_next = true;
          if ($truthy(self.yydebug)) {
            
            self.racc_tstack.$push(self.racc_t);
            self.$racc_shift(self.racc_t, self.racc_tstack, self.racc_vstack);};
        } else if ($truthy(($truthy($a = $rb_lt(act, 0)) ? $rb_gt(act, reduce_n['$-@']()) : $a))) {
          
          code = $send(self, 'catch', ["racc_jump"], ($$13 = function(){var self = $$13.$$s == null ? this : $$13.$$s;
            if (self.racc_state == null) self.racc_state = nil;

          
            self.racc_state.$push(self.$_racc_do_reduce(arg, act));
            return false;}, $$13.$$s = self, $$13.$$arity = 0, $$13));
          if ($truthy(code)) {
            $case = code;
            if ((1)['$===']($case)) {
            self.racc_user_yyerror = true;
            return reduce_n['$-@']();}
            else if ((2)['$===']($case)) {return shift_n}
            else {self.$raise("[Racc Bug] unknown jump code")}};
        } else if (act['$=='](shift_n)) {
          
          if ($truthy(self.yydebug)) {
            self.$racc_accept()};
          self.$throw("racc_end_parse", self.racc_vstack['$[]'](0));
        } else if (act['$=='](reduce_n['$-@']())) {
          
          $case = self.racc_error_status;
          if ((0)['$===']($case)) {if ($truthy(arg['$[]'](21))) {
          } else {
            self.$on_error(self.racc_t, self.racc_val, self.racc_vstack)
          }}
          else if ((3)['$===']($case)) {
          if (self.racc_t['$=='](0)) {
            self.$throw("racc_end_parse", nil)};
          self.racc_read_next = true;};
          self.racc_user_yyerror = false;
          self.racc_error_status = 3;
          while ($truthy(true)) {
            
            if ($truthy((i = action_pointer['$[]'](self.racc_state['$[]'](-1))))) {
              
              i = $rb_plus(i, 1);
              if ($truthy(($truthy($b = ($truthy($c = $rb_ge(i, 0)) ? (act = action_table['$[]'](i)) : $c)) ? action_check['$[]'](i)['$=='](self.racc_state['$[]'](-1)) : $b))) {
                break;};};
            if ($truthy($rb_le(self.racc_state.$size(), 1))) {
              self.$throw("racc_end_parse", nil)};
            self.racc_state.$pop();
            self.racc_vstack.$pop();
            if ($truthy(self.yydebug)) {
              
              self.racc_tstack.$pop();
              self.$racc_e_pop(self.racc_state, self.racc_tstack, self.racc_vstack);};
          };
          return act;
        } else {
          self.$raise("" + "[Racc Bug] unknown action " + (act.$inspect()))
        };
        if ($truthy(self.yydebug)) {
          self.$racc_next_state(self.racc_state['$[]'](-1), self.racc_state)};
        return nil;
      }, $Parser__racc_evalact$12.$$arity = 2);
      
      Opal.def(self, '$_racc_do_reduce', $Parser__racc_do_reduce$14 = function $$_racc_do_reduce(arg, act) {
        var $a, $b, self = this, _ = nil, goto_table = nil, goto_check = nil, goto_default = nil, goto_pointer = nil, nt_base = nil, reduce_table = nil, use_result = nil, state = nil, vstack = nil, tstack = nil, i = nil, len = nil, reduce_to = nil, method_id = nil, void_array = nil, tmp_t = nil, tmp_v = nil, $writer = nil, k1 = nil, curstate = nil;

        
        $b = arg, $a = Opal.to_ary($b), (_ = ($a[0] == null ? nil : $a[0])), (_ = ($a[1] == null ? nil : $a[1])), (_ = ($a[2] == null ? nil : $a[2])), (_ = ($a[3] == null ? nil : $a[3])), (goto_table = ($a[4] == null ? nil : $a[4])), (goto_check = ($a[5] == null ? nil : $a[5])), (goto_default = ($a[6] == null ? nil : $a[6])), (goto_pointer = ($a[7] == null ? nil : $a[7])), (nt_base = ($a[8] == null ? nil : $a[8])), (reduce_table = ($a[9] == null ? nil : $a[9])), (_ = ($a[10] == null ? nil : $a[10])), (_ = ($a[11] == null ? nil : $a[11])), (_ = ($a[12] == null ? nil : $a[12])), (use_result = ($a[13] == null ? nil : $a[13])), $b;
        state = self.racc_state;
        vstack = self.racc_vstack;
        tstack = self.racc_tstack;
        i = $rb_times(act, -3);
        len = reduce_table['$[]'](i);
        reduce_to = reduce_table['$[]']($rb_plus(i, 1));
        method_id = reduce_table['$[]']($rb_plus(i, 2));
        void_array = [];
        if ($truthy(self.yydebug)) {
          tmp_t = tstack['$[]'](len['$-@'](), len)};
        tmp_v = vstack['$[]'](len['$-@'](), len);
        if ($truthy(self.yydebug)) {
          
          $writer = [len['$-@'](), len, void_array];
          $send(tstack, '[]=', Opal.to_a($writer));
          $writer[$rb_minus($writer["length"], 1)];};
        
        $writer = [len['$-@'](), len, void_array];
        $send(vstack, '[]=', Opal.to_a($writer));
        $writer[$rb_minus($writer["length"], 1)];;
        
        $writer = [len['$-@'](), len, void_array];
        $send(state, '[]=', Opal.to_a($writer));
        $writer[$rb_minus($writer["length"], 1)];;
        if ($truthy(use_result)) {
          vstack.$push(self.$__send__(method_id, tmp_v, vstack, tmp_v['$[]'](0)))
        } else {
          vstack.$push(self.$__send__(method_id, tmp_v, vstack))
        };
        tstack.$push(reduce_to);
        if ($truthy(self.yydebug)) {
          self.$racc_reduce(tmp_t, reduce_to, tstack, vstack)};
        k1 = $rb_minus(reduce_to, nt_base);
        if ($truthy((i = goto_pointer['$[]'](k1)))) {
          
          i = $rb_plus(i, state['$[]'](-1));
          if ($truthy(($truthy($a = ($truthy($b = $rb_ge(i, 0)) ? (curstate = goto_table['$[]'](i)) : $b)) ? goto_check['$[]'](i)['$=='](k1) : $a))) {
            return curstate};};
        return goto_default['$[]'](k1);
      }, $Parser__racc_do_reduce$14.$$arity = 2);
      
      Opal.def(self, '$on_error', $Parser_on_error$15 = function $$on_error(t, val, vstack) {
        var $a, self = this;

        return self.$raise($$($nesting, 'ParseError'), self.$sprintf("\nparse error on value %s (%s)", val.$inspect(), ($truthy($a = self.$token_to_str(t)) ? $a : "?")))
      }, $Parser_on_error$15.$$arity = 3);
      
      Opal.def(self, '$yyerror', $Parser_yyerror$16 = function $$yyerror() {
        var self = this;

        return self.$throw("racc_jump", 1)
      }, $Parser_yyerror$16.$$arity = 0);
      
      Opal.def(self, '$yyaccept', $Parser_yyaccept$17 = function $$yyaccept() {
        var self = this;

        return self.$throw("racc_jump", 2)
      }, $Parser_yyaccept$17.$$arity = 0);
      
      Opal.def(self, '$yyerrok', $Parser_yyerrok$18 = function $$yyerrok() {
        var self = this;

        return (self.racc_error_status = 0)
      }, $Parser_yyerrok$18.$$arity = 0);
      
      Opal.def(self, '$racc_read_token', $Parser_racc_read_token$19 = function $$racc_read_token(t, tok, val) {
        var self = this;

        
        self.racc_debug_out.$print("read    ");
        self.racc_debug_out.$print(tok.$inspect(), "(", self.$racc_token2str(t), ") ");
        self.racc_debug_out.$puts(val.$inspect());
        return self.racc_debug_out.$puts();
      }, $Parser_racc_read_token$19.$$arity = 3);
      
      Opal.def(self, '$racc_shift', $Parser_racc_shift$20 = function $$racc_shift(tok, tstack, vstack) {
        var self = this;

        
        self.racc_debug_out.$puts("" + "shift   " + (self.$racc_token2str(tok)));
        self.$racc_print_stacks(tstack, vstack);
        return self.racc_debug_out.$puts();
      }, $Parser_racc_shift$20.$$arity = 3);
      
      Opal.def(self, '$racc_reduce', $Parser_racc_reduce$21 = function $$racc_reduce(toks, sim, tstack, vstack) {
        var $$22, self = this, out = nil;

        
        out = self.racc_debug_out;
        out.$print("reduce ");
        if ($truthy(toks['$empty?']())) {
          out.$print(" <none>")
        } else {
          $send(toks, 'each', [], ($$22 = function(t){var self = $$22.$$s == null ? this : $$22.$$s;

          
            
            if (t == null) {
              t = nil;
            };
            return out.$print(" ", self.$racc_token2str(t));}, $$22.$$s = self, $$22.$$arity = 1, $$22))
        };
        out.$puts("" + " --> " + (self.$racc_token2str(sim)));
        self.$racc_print_stacks(tstack, vstack);
        return self.racc_debug_out.$puts();
      }, $Parser_racc_reduce$21.$$arity = 4);
      
      Opal.def(self, '$racc_accept', $Parser_racc_accept$23 = function $$racc_accept() {
        var self = this;

        
        self.racc_debug_out.$puts("accept");
        return self.racc_debug_out.$puts();
      }, $Parser_racc_accept$23.$$arity = 0);
      
      Opal.def(self, '$racc_e_pop', $Parser_racc_e_pop$24 = function $$racc_e_pop(state, tstack, vstack) {
        var self = this;

        
        self.racc_debug_out.$puts("error recovering mode: pop token");
        self.$racc_print_states(state);
        self.$racc_print_stacks(tstack, vstack);
        return self.racc_debug_out.$puts();
      }, $Parser_racc_e_pop$24.$$arity = 3);
      
      Opal.def(self, '$racc_next_state', $Parser_racc_next_state$25 = function $$racc_next_state(curstate, state) {
        var self = this;

        
        self.racc_debug_out.$puts("" + "goto    " + (curstate));
        self.$racc_print_states(state);
        return self.racc_debug_out.$puts();
      }, $Parser_racc_next_state$25.$$arity = 2);
      
      Opal.def(self, '$racc_print_stacks', $Parser_racc_print_stacks$26 = function $$racc_print_stacks(t, v) {
        var $$27, self = this, out = nil;

        
        out = self.racc_debug_out;
        out.$print("        [");
        $send(t, 'each_index', [], ($$27 = function(i){var self = $$27.$$s == null ? this : $$27.$$s;

        
          
          if (i == null) {
            i = nil;
          };
          return out.$print(" (", self.$racc_token2str(t['$[]'](i)), " ", v['$[]'](i).$inspect(), ")");}, $$27.$$s = self, $$27.$$arity = 1, $$27));
        return out.$puts(" ]");
      }, $Parser_racc_print_stacks$26.$$arity = 2);
      
      Opal.def(self, '$racc_print_states', $Parser_racc_print_states$28 = function $$racc_print_states(s) {
        var $$29, self = this, out = nil;

        
        out = self.racc_debug_out;
        out.$print("        [");
        $send(s, 'each', [], ($$29 = function(st){var self = $$29.$$s == null ? this : $$29.$$s;

        
          
          if (st == null) {
            st = nil;
          };
          return out.$print(" ", st);}, $$29.$$s = self, $$29.$$arity = 1, $$29));
        return out.$puts(" ]");
      }, $Parser_racc_print_states$28.$$arity = 1);
      
      Opal.def(self, '$racc_token2str', $Parser_racc_token2str$30 = function $$racc_token2str(tok) {
        var $a, self = this;

        return ($truthy($a = $$$(self.$class(), 'Racc_token_to_s_table')['$[]'](tok)) ? $a : self.$raise("" + "[Racc Bug] can't convert token " + (tok) + " to string"))
      }, $Parser_racc_token2str$30.$$arity = 1);
      return (Opal.def(self, '$token_to_str', $Parser_token_to_str$31 = function $$token_to_str(t) {
        var self = this;

        return $$$(self.$class(), 'Racc_token_to_s_table')['$[]'](t)
      }, $Parser_token_to_str$31.$$arity = 1), nil) && 'token_to_str';
    })($nesting[0], null, $nesting);
  })($nesting[0], $nesting);
};

/* Generated by Opal 1.0.0 */
Opal.modules["parser/messages"] = function(Opal) {
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.$$$, $$ = Opal.$$, $module = Opal.module, $hash2 = Opal.hash2, $truthy = Opal.truthy;

  Opal.add_stubs(['$freeze', '$[]', '$===', '$empty?', '$format']);
  return (function($base, $parent_nesting) {
    var self = $module($base, 'Parser');

    var $nesting = [self].concat($parent_nesting);

    
    Opal.const_set($nesting[0], 'MESSAGES', $hash2(["unicode_point_too_large", "invalid_escape", "incomplete_escape", "invalid_hex_escape", "invalid_unicode_escape", "unterminated_unicode", "escape_eof", "string_eof", "regexp_options", "cvar_name", "ivar_name", "trailing_in_number", "empty_numeric", "invalid_octal", "no_dot_digit_literal", "bare_backslash", "unexpected", "embedded_document", "heredoc_id_has_newline", "heredoc_id_ends_with_nl", "unterminated_heredoc_id", "invalid_escape_use", "ambiguous_literal", "ambiguous_prefix", "triple_dot_at_eol", "nth_ref_alias", "begin_in_method", "backref_assignment", "invalid_assignment", "module_name_const", "unexpected_token", "argument_const", "argument_ivar", "argument_gvar", "argument_cvar", "duplicate_argument", "empty_symbol", "odd_hash", "singleton_literal", "dynamic_const", "const_reassignment", "module_in_def", "class_in_def", "unexpected_percent_str", "block_and_blockarg", "masgn_as_condition", "block_given_to_yield", "invalid_regexp", "invalid_return", "csend_in_lhs_of_masgn", "cant_assign_to_numparam", "ordinary_param_defined", "numparam_used_in_outer_scope", "circular_argument_reference", "pm_interp_in_var_name", "lvar_name", "undefined_lvar", "duplicate_variable_name", "duplicate_pattern_key", "useless_else", "invalid_encoding", "invalid_action", "clobbered", "different_replacements", "swallowed_insertions", "swallowed_insertions_conflict", "crossing_deletions", "crossing_deletions_conflict", "crossing_insertions", "crossing_insertions_conflict"], {"unicode_point_too_large": "invalid Unicode codepoint (too large)", "invalid_escape": "invalid escape character syntax", "incomplete_escape": "incomplete character syntax", "invalid_hex_escape": "invalid hex escape", "invalid_unicode_escape": "invalid Unicode escape", "unterminated_unicode": "unterminated Unicode escape", "escape_eof": "escape sequence meets end of file", "string_eof": "unterminated string meets end of file", "regexp_options": "unknown regexp options: %{options}", "cvar_name": "`%{name}' is not allowed as a class variable name", "ivar_name": "`%{name}' is not allowed as an instance variable name", "trailing_in_number": "trailing `%{character}' in number", "empty_numeric": "numeric literal without digits", "invalid_octal": "invalid octal digit", "no_dot_digit_literal": "no .<digit> floating literal anymore; put 0 before dot", "bare_backslash": "bare backslash only allowed before newline", "unexpected": "unexpected `%{character}'", "embedded_document": "embedded document meets end of file (and they embark on a romantic journey)", "heredoc_id_has_newline": "here document identifier across newlines, never match", "heredoc_id_ends_with_nl": "here document identifier ends with a newline", "unterminated_heredoc_id": "unterminated heredoc id", "invalid_escape_use": "invalid character syntax; use ?%{escape}", "ambiguous_literal": "ambiguous first argument; put parentheses or a space even after the operator", "ambiguous_prefix": "`%{prefix}' interpreted as argument prefix", "triple_dot_at_eol": "... at EOL, should be parenthesized", "nth_ref_alias": "cannot define an alias for a back-reference variable", "begin_in_method": "BEGIN in method", "backref_assignment": "cannot assign to a back-reference variable", "invalid_assignment": "cannot assign to a keyword", "module_name_const": "class or module name must be a constant literal", "unexpected_token": "unexpected token %{token}", "argument_const": "formal argument cannot be a constant", "argument_ivar": "formal argument cannot be an instance variable", "argument_gvar": "formal argument cannot be a global variable", "argument_cvar": "formal argument cannot be a class variable", "duplicate_argument": "duplicate argument name", "empty_symbol": "empty symbol literal", "odd_hash": "odd number of entries for a hash", "singleton_literal": "cannot define a singleton method for a literal", "dynamic_const": "dynamic constant assignment", "const_reassignment": "constant re-assignment", "module_in_def": "module definition in method body", "class_in_def": "class definition in method body", "unexpected_percent_str": "%{type}: unknown type of percent-literal", "block_and_blockarg": "both block argument and literal block are passed", "masgn_as_condition": "multiple assignment in conditional context", "block_given_to_yield": "block given to yield", "invalid_regexp": "%{message}", "invalid_return": "Invalid return in class/module body", "csend_in_lhs_of_masgn": "&. inside multiple assignment destination", "cant_assign_to_numparam": "cannot assign to numbered parameter %{name}", "ordinary_param_defined": "ordinary parameter is defined", "numparam_used_in_outer_scope": "numbered parameter is already used in an outer scope", "circular_argument_reference": "circular argument reference %{var_name}", "pm_interp_in_var_name": "symbol literal with interpolation is not allowed", "lvar_name": "`%{name}' is not allowed as a local variable name", "undefined_lvar": "no such local variable: `%{name}'", "duplicate_variable_name": "duplicate variable name %{name}", "duplicate_pattern_key": "duplicate hash pattern key %{name}", "useless_else": "else without rescue is useless", "invalid_encoding": "literal contains escape sequences incompatible with UTF-8", "invalid_action": "cannot %{action}", "clobbered": "clobbered by: %{action}", "different_replacements": "different replacements: %{replacement} vs %{other_replacement}", "swallowed_insertions": "this replacement:", "swallowed_insertions_conflict": "swallows some inner rewriting actions:", "crossing_deletions": "the deletion of:", "crossing_deletions_conflict": "is crossing:", "crossing_insertions": "the rewriting action on:", "crossing_insertions_conflict": "is crossing that on:"}).$freeze());
    (function($base, $parent_nesting) {
      var self = $module($base, 'Messages');

      var $nesting = [self].concat($parent_nesting), $Messages_compile$1;

      Opal.defs(self, '$compile', $Messages_compile$1 = function $$compile(reason, arguments$) {
        var $a, self = this, template = nil;

        
        template = $$($nesting, 'MESSAGES')['$[]'](reason);
        if ($truthy(($truthy($a = $$($nesting, 'Hash')['$==='](arguments$)) ? arguments$['$empty?']() : $a))) {
          return template};
        return self.$format(template, arguments$);
      }, $Messages_compile$1.$$arity = 2)
    })($nesting[0], $nesting);
  })($nesting[0], $nesting)
};

/* Generated by Opal 1.0.0 */
Opal.modules["parser/deprecation"] = function(Opal) {
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.$$$, $$ = Opal.$$, $module = Opal.module, $truthy = Opal.truthy;

  Opal.add_stubs(['$attr_writer', '$warn']);
  return (function($base, $parent_nesting) {
    var self = $module($base, 'Parser');

    var $nesting = [self].concat($parent_nesting);

    (function($base, $parent_nesting) {
      var self = $module($base, 'Deprecation');

      var $nesting = [self].concat($parent_nesting), $Deprecation_warn_of_deprecation$1;

      
      self.$attr_writer("warned_of_deprecation");
      
      Opal.def(self, '$warn_of_deprecation', $Deprecation_warn_of_deprecation$1 = function $$warn_of_deprecation() {
        var $a, $b, self = this;
        if (self.warned_of_deprecation == null) self.warned_of_deprecation = nil;

        return (self.warned_of_deprecation = ($truthy($a = self.warned_of_deprecation) ? $a : ($truthy($b = self.$warn($$$(self, 'DEPRECATION_WARNING'))) ? $b : true)))
      }, $Deprecation_warn_of_deprecation$1.$$arity = 0);
    })($nesting[0], $nesting)
  })($nesting[0], $nesting)
};

/* Generated by Opal 1.0.0 */
Opal.modules["parser/ast/processor"] = function(Opal) {
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.$$$, $$ = Opal.$$, $module = Opal.module, $klass = Opal.klass, $truthy = Opal.truthy, $slice = Opal.slice;

  Opal.add_stubs(['$updated', '$process_all', '$on_var', '$!', '$nil?', '$process', '$on_vasgn', '$on_argument', '$is_a?', '$[]', '$children', '$process_regular_node', '$warn']);
  return (function($base, $parent_nesting) {
    var self = $module($base, 'Parser');

    var $nesting = [self].concat($parent_nesting);

    (function($base, $parent_nesting) {
      var self = $module($base, 'AST');

      var $nesting = [self].concat($parent_nesting);

      (function($base, $super, $parent_nesting) {
        var self = $klass($base, $super, 'Processor');

        var $nesting = [self].concat($parent_nesting), $Processor_process_regular_node$1, $Processor_on_var$2, $Processor_process_variable_node$3, $Processor_on_vasgn$4, $Processor_process_var_asgn_node$5, $Processor_on_op_asgn$6, $Processor_on_const$7, $Processor_on_casgn$8, $Processor_on_argument$9, $Processor_process_argument_node$10, $Processor_on_procarg0$11, $Processor_on_def$12, $Processor_on_defs$13, $Processor_on_send$14, $Processor_on_numblock$15, $Processor_process_variable_node$16, $Processor_process_var_asgn_node$17, $Processor_process_argument_node$18, $Processor_on_empty_else$19;

        
        
        Opal.def(self, '$process_regular_node', $Processor_process_regular_node$1 = function $$process_regular_node(node) {
          var self = this;

          return node.$updated(nil, self.$process_all(node))
        }, $Processor_process_regular_node$1.$$arity = 1);
        Opal.alias(self, "on_dstr", "process_regular_node");
        Opal.alias(self, "on_dsym", "process_regular_node");
        Opal.alias(self, "on_regexp", "process_regular_node");
        Opal.alias(self, "on_xstr", "process_regular_node");
        Opal.alias(self, "on_splat", "process_regular_node");
        Opal.alias(self, "on_kwsplat", "process_regular_node");
        Opal.alias(self, "on_array", "process_regular_node");
        Opal.alias(self, "on_pair", "process_regular_node");
        Opal.alias(self, "on_hash", "process_regular_node");
        Opal.alias(self, "on_irange", "process_regular_node");
        Opal.alias(self, "on_erange", "process_regular_node");
        
        Opal.def(self, '$on_var', $Processor_on_var$2 = function $$on_var(node) {
          var self = this;

          return node
        }, $Processor_on_var$2.$$arity = 1);
        
        Opal.def(self, '$process_variable_node', $Processor_process_variable_node$3 = function $$process_variable_node(node) {
          var self = this;

          return self.$on_var(node)
        }, $Processor_process_variable_node$3.$$arity = 1);
        Opal.alias(self, "on_lvar", "process_variable_node");
        Opal.alias(self, "on_ivar", "process_variable_node");
        Opal.alias(self, "on_gvar", "process_variable_node");
        Opal.alias(self, "on_cvar", "process_variable_node");
        Opal.alias(self, "on_back_ref", "process_variable_node");
        Opal.alias(self, "on_nth_ref", "process_variable_node");
        
        Opal.def(self, '$on_vasgn', $Processor_on_vasgn$4 = function $$on_vasgn(node) {
          var $a, self = this, name = nil, value_node = nil;

          
          $a = [].concat(Opal.to_a(node)), (name = ($a[0] == null ? nil : $a[0])), (value_node = ($a[1] == null ? nil : $a[1])), $a;
          if ($truthy(value_node['$nil?']()['$!']())) {
            return node.$updated(nil, [name, self.$process(value_node)])
          } else {
            return node
          };
        }, $Processor_on_vasgn$4.$$arity = 1);
        
        Opal.def(self, '$process_var_asgn_node', $Processor_process_var_asgn_node$5 = function $$process_var_asgn_node(node) {
          var self = this;

          return self.$on_vasgn(node)
        }, $Processor_process_var_asgn_node$5.$$arity = 1);
        Opal.alias(self, "on_lvasgn", "process_var_asgn_node");
        Opal.alias(self, "on_ivasgn", "process_var_asgn_node");
        Opal.alias(self, "on_gvasgn", "process_var_asgn_node");
        Opal.alias(self, "on_cvasgn", "process_var_asgn_node");
        Opal.alias(self, "on_and_asgn", "process_regular_node");
        Opal.alias(self, "on_or_asgn", "process_regular_node");
        
        Opal.def(self, '$on_op_asgn', $Processor_on_op_asgn$6 = function $$on_op_asgn(node) {
          var $a, self = this, var_node = nil, method_name = nil, value_node = nil;

          
          $a = [].concat(Opal.to_a(node)), (var_node = ($a[0] == null ? nil : $a[0])), (method_name = ($a[1] == null ? nil : $a[1])), (value_node = ($a[2] == null ? nil : $a[2])), $a;
          return node.$updated(nil, [self.$process(var_node), method_name, self.$process(value_node)]);
        }, $Processor_on_op_asgn$6.$$arity = 1);
        Opal.alias(self, "on_mlhs", "process_regular_node");
        Opal.alias(self, "on_masgn", "process_regular_node");
        Opal.alias(self, "on_rasgn", "process_regular_node");
        Opal.alias(self, "on_mrasgn", "process_regular_node");
        
        Opal.def(self, '$on_const', $Processor_on_const$7 = function $$on_const(node) {
          var $a, self = this, scope_node = nil, name = nil;

          
          $a = [].concat(Opal.to_a(node)), (scope_node = ($a[0] == null ? nil : $a[0])), (name = ($a[1] == null ? nil : $a[1])), $a;
          return node.$updated(nil, [self.$process(scope_node), name]);
        }, $Processor_on_const$7.$$arity = 1);
        
        Opal.def(self, '$on_casgn', $Processor_on_casgn$8 = function $$on_casgn(node) {
          var $a, self = this, scope_node = nil, name = nil, value_node = nil;

          
          $a = [].concat(Opal.to_a(node)), (scope_node = ($a[0] == null ? nil : $a[0])), (name = ($a[1] == null ? nil : $a[1])), (value_node = ($a[2] == null ? nil : $a[2])), $a;
          if ($truthy(value_node['$nil?']()['$!']())) {
            return node.$updated(nil, [self.$process(scope_node), name, self.$process(value_node)])
          } else {
            return node.$updated(nil, [self.$process(scope_node), name])
          };
        }, $Processor_on_casgn$8.$$arity = 1);
        Opal.alias(self, "on_args", "process_regular_node");
        
        Opal.def(self, '$on_argument', $Processor_on_argument$9 = function $$on_argument(node) {
          var $a, self = this, arg_name = nil, value_node = nil;

          
          $a = [].concat(Opal.to_a(node)), (arg_name = ($a[0] == null ? nil : $a[0])), (value_node = ($a[1] == null ? nil : $a[1])), $a;
          if ($truthy(value_node['$nil?']()['$!']())) {
            return node.$updated(nil, [arg_name, self.$process(value_node)])
          } else {
            return node
          };
        }, $Processor_on_argument$9.$$arity = 1);
        
        Opal.def(self, '$process_argument_node', $Processor_process_argument_node$10 = function $$process_argument_node(node) {
          var self = this;

          return self.$on_argument(node)
        }, $Processor_process_argument_node$10.$$arity = 1);
        Opal.alias(self, "on_arg", "process_argument_node");
        Opal.alias(self, "on_optarg", "process_argument_node");
        Opal.alias(self, "on_restarg", "process_argument_node");
        Opal.alias(self, "on_blockarg", "process_argument_node");
        Opal.alias(self, "on_shadowarg", "process_argument_node");
        Opal.alias(self, "on_kwarg", "process_argument_node");
        Opal.alias(self, "on_kwoptarg", "process_argument_node");
        Opal.alias(self, "on_kwrestarg", "process_argument_node");
        Opal.alias(self, "on_forward_arg", "process_argument_node");
        
        Opal.def(self, '$on_procarg0', $Processor_on_procarg0$11 = function $$on_procarg0(node) {
          var self = this;

          if ($truthy(node.$children()['$[]'](0)['$is_a?']($$($nesting, 'Symbol')))) {
            return self.$on_argument(node)
          } else {
            return self.$process_regular_node(node)
          }
        }, $Processor_on_procarg0$11.$$arity = 1);
        Opal.alias(self, "on_arg_expr", "process_regular_node");
        Opal.alias(self, "on_restarg_expr", "process_regular_node");
        Opal.alias(self, "on_blockarg_expr", "process_regular_node");
        Opal.alias(self, "on_block_pass", "process_regular_node");
        Opal.alias(self, "on_module", "process_regular_node");
        Opal.alias(self, "on_class", "process_regular_node");
        Opal.alias(self, "on_sclass", "process_regular_node");
        
        Opal.def(self, '$on_def', $Processor_on_def$12 = function $$on_def(node) {
          var $a, self = this, name = nil, args_node = nil, body_node = nil;

          
          $a = [].concat(Opal.to_a(node)), (name = ($a[0] == null ? nil : $a[0])), (args_node = ($a[1] == null ? nil : $a[1])), (body_node = ($a[2] == null ? nil : $a[2])), $a;
          return node.$updated(nil, [name, self.$process(args_node), self.$process(body_node)]);
        }, $Processor_on_def$12.$$arity = 1);
        Opal.alias(self, "on_def_e", "on_def");
        
        Opal.def(self, '$on_defs', $Processor_on_defs$13 = function $$on_defs(node) {
          var $a, self = this, definee_node = nil, name = nil, args_node = nil, body_node = nil;

          
          $a = [].concat(Opal.to_a(node)), (definee_node = ($a[0] == null ? nil : $a[0])), (name = ($a[1] == null ? nil : $a[1])), (args_node = ($a[2] == null ? nil : $a[2])), (body_node = ($a[3] == null ? nil : $a[3])), $a;
          return node.$updated(nil, [self.$process(definee_node), name, self.$process(args_node), self.$process(body_node)]);
        }, $Processor_on_defs$13.$$arity = 1);
        Opal.alias(self, "on_defs_e", "on_defs");
        Opal.alias(self, "on_undef", "process_regular_node");
        Opal.alias(self, "on_alias", "process_regular_node");
        
        Opal.def(self, '$on_send', $Processor_on_send$14 = function $$on_send(node) {
          var $a, self = this, receiver_node = nil, method_name = nil, arg_nodes = nil;

          
          $a = [].concat(Opal.to_a(node)), (receiver_node = ($a[0] == null ? nil : $a[0])), (method_name = ($a[1] == null ? nil : $a[1])), (arg_nodes = $slice.call($a, 2)), $a;
          if ($truthy(receiver_node)) {
            receiver_node = self.$process(receiver_node)};
          return node.$updated(nil, [receiver_node, method_name].concat(Opal.to_a(self.$process_all(arg_nodes))));
        }, $Processor_on_send$14.$$arity = 1);
        Opal.alias(self, "on_csend", "on_send");
        Opal.alias(self, "on_index", "process_regular_node");
        Opal.alias(self, "on_indexasgn", "process_regular_node");
        Opal.alias(self, "on_block", "process_regular_node");
        Opal.alias(self, "on_lambda", "process_regular_node");
        
        Opal.def(self, '$on_numblock', $Processor_on_numblock$15 = function $$on_numblock(node) {
          var $a, self = this, method_call = nil, max_numparam = nil, body = nil;

          
          $a = [].concat(Opal.to_a(node)), (method_call = ($a[0] == null ? nil : $a[0])), (max_numparam = ($a[1] == null ? nil : $a[1])), (body = ($a[2] == null ? nil : $a[2])), $a;
          return node.$updated(nil, [self.$process(method_call), max_numparam, self.$process(body)]);
        }, $Processor_on_numblock$15.$$arity = 1);
        Opal.alias(self, "on_while", "process_regular_node");
        Opal.alias(self, "on_while_post", "process_regular_node");
        Opal.alias(self, "on_until", "process_regular_node");
        Opal.alias(self, "on_until_post", "process_regular_node");
        Opal.alias(self, "on_for", "process_regular_node");
        Opal.alias(self, "on_return", "process_regular_node");
        Opal.alias(self, "on_break", "process_regular_node");
        Opal.alias(self, "on_next", "process_regular_node");
        Opal.alias(self, "on_redo", "process_regular_node");
        Opal.alias(self, "on_retry", "process_regular_node");
        Opal.alias(self, "on_super", "process_regular_node");
        Opal.alias(self, "on_yield", "process_regular_node");
        Opal.alias(self, "on_defined?", "process_regular_node");
        Opal.alias(self, "on_not", "process_regular_node");
        Opal.alias(self, "on_and", "process_regular_node");
        Opal.alias(self, "on_or", "process_regular_node");
        Opal.alias(self, "on_if", "process_regular_node");
        Opal.alias(self, "on_when", "process_regular_node");
        Opal.alias(self, "on_case", "process_regular_node");
        Opal.alias(self, "on_iflipflop", "process_regular_node");
        Opal.alias(self, "on_eflipflop", "process_regular_node");
        Opal.alias(self, "on_match_current_line", "process_regular_node");
        Opal.alias(self, "on_match_with_lvasgn", "process_regular_node");
        Opal.alias(self, "on_resbody", "process_regular_node");
        Opal.alias(self, "on_rescue", "process_regular_node");
        Opal.alias(self, "on_ensure", "process_regular_node");
        Opal.alias(self, "on_begin", "process_regular_node");
        Opal.alias(self, "on_kwbegin", "process_regular_node");
        Opal.alias(self, "on_preexe", "process_regular_node");
        Opal.alias(self, "on_postexe", "process_regular_node");
        Opal.alias(self, "on_case_match", "process_regular_node");
        Opal.alias(self, "on_in_match", "process_regular_node");
        Opal.alias(self, "on_in_pattern", "process_regular_node");
        Opal.alias(self, "on_if_guard", "process_regular_node");
        Opal.alias(self, "on_unless_guard", "process_regular_node");
        Opal.alias(self, "on_match_var", "process_variable_node");
        Opal.alias(self, "on_match_rest", "process_regular_node");
        Opal.alias(self, "on_pin", "process_regular_node");
        Opal.alias(self, "on_match_alt", "process_regular_node");
        Opal.alias(self, "on_match_as", "process_regular_node");
        Opal.alias(self, "on_array_pattern", "process_regular_node");
        Opal.alias(self, "on_array_pattern_with_tail", "process_regular_node");
        Opal.alias(self, "on_hash_pattern", "process_regular_node");
        Opal.alias(self, "on_const_pattern", "process_regular_node");
        Opal.alias(self, "on_find_pattern", "process_regular_node");
        
        Opal.def(self, '$process_variable_node', $Processor_process_variable_node$16 = function $$process_variable_node(node) {
          var self = this;

          
          self.$warn("" + "Parser::AST::Processor#process_variable_node is deprecated as a" + " public API and will be removed. Please use " + "Parser::AST::Processor#on_var instead.");
          return self.$on_var(node);
        }, $Processor_process_variable_node$16.$$arity = 1);
        
        Opal.def(self, '$process_var_asgn_node', $Processor_process_var_asgn_node$17 = function $$process_var_asgn_node(node) {
          var self = this;

          
          self.$warn("" + "Parser::AST::Processor#process_var_asgn_node is deprecated as a" + " public API and will be removed. Please use " + "Parser::AST::Processor#on_vasgn instead.");
          return self.$on_vasgn(node);
        }, $Processor_process_var_asgn_node$17.$$arity = 1);
        
        Opal.def(self, '$process_argument_node', $Processor_process_argument_node$18 = function $$process_argument_node(node) {
          var self = this;

          
          self.$warn("" + "Parser::AST::Processor#process_argument_node is deprecated as a" + " public API and will be removed. Please use " + "Parser::AST::Processor#on_argument instead.");
          return self.$on_argument(node);
        }, $Processor_process_argument_node$18.$$arity = 1);
        return (Opal.def(self, '$on_empty_else', $Processor_on_empty_else$19 = function $$on_empty_else(node) {
          var self = this;

          return node
        }, $Processor_on_empty_else$19.$$arity = 1), nil) && 'on_empty_else';
      })($nesting[0], $$$($$$('::', 'AST'), 'Processor'), $nesting)
    })($nesting[0], $nesting)
  })($nesting[0], $nesting)
};

/* Generated by Opal 1.0.0 */
Opal.modules["parser/meta"] = function(Opal) {
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.$$$, $$ = Opal.$$, $module = Opal.module, $send = Opal.send;

  Opal.add_stubs(['$freeze', '$to_set', '$map', '$to_proc']);
  return (function($base, $parent_nesting) {
    var self = $module($base, 'Parser');

    var $nesting = [self].concat($parent_nesting);

    (function($base, $parent_nesting) {
      var self = $module($base, 'Meta');

      var $nesting = [self].concat($parent_nesting);

      Opal.const_set($nesting[0], 'NODE_TYPES', $send(["true", "false", "nil", "int", "float", "str", "dstr", "sym", "dsym", "xstr", "regopt", "regexp", "array", "splat", "pair", "kwsplat", "hash", "irange", "erange", "self", "lvar", "ivar", "cvar", "gvar", "const", "defined?", "lvasgn", "ivasgn", "cvasgn", "gvasgn", "casgn", "mlhs", "masgn", "rasgn", "mrasgn", "op_asgn", "and_asgn", "ensure", "rescue", "arg_expr", "or_asgn", "back_ref", "nth_ref", "match_with_lvasgn", "match_current_line", "module", "class", "sclass", "def", "defs", "def_e", "defs_e", "undef", "alias", "args", "cbase", "arg", "optarg", "restarg", "blockarg", "block_pass", "kwarg", "kwoptarg", "kwrestarg", "kwnilarg", "send", "csend", "super", "zsuper", "yield", "block", "and", "not", "or", "if", "when", "case", "while", "until", "while_post", "until_post", "for", "break", "next", "redo", "return", "resbody", "kwbegin", "begin", "retry", "preexe", "postexe", "iflipflop", "eflipflop", "shadowarg", "complex", "rational", "__FILE__", "__LINE__", "__ENCODING__", "ident", "root", "lambda", "indexasgn", "index", "procarg0", "restarg_expr", "blockarg_expr", "objc_kwarg", "objc_restarg", "objc_varargs", "numargs", "numblock", "forward_args", "forwarded_args", "forward_arg", "case_match", "in_match", "in_pattern", "match_var", "pin", "match_alt", "match_as", "match_rest", "array_pattern", "match_with_trailing_comma", "array_pattern_with_tail", "hash_pattern", "const_pattern", "if_guard", "unless_guard", "match_nil_pattern", "empty_else", "find_pattern"], 'map', [], "to_sym".$to_proc()).$to_set().$freeze())
    })($nesting[0], $nesting)
  })($nesting[0], $nesting)
};

/* Generated by Opal 1.0.0 */
Opal.modules["parser/source/buffer"] = function(Opal) {
  function $rb_minus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs - rhs : lhs['$-'](rhs);
  }
  function $rb_plus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs + rhs : lhs['$+'](rhs);
  }
  function $rb_le(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs <= rhs : lhs['$<='](rhs);
  }
  function $rb_gt(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs > rhs : lhs['$>'](rhs);
  }
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.$$$, $$ = Opal.$$, $module = Opal.module, $klass = Opal.klass, $enc = Opal.enc, $truthy = Opal.truthy, $gvars = Opal.gvars, $hash2 = Opal.hash2, $send = Opal.send;

  Opal.add_stubs(['$attr_reader', '$empty?', '$=~', '$start_with?', '$freeze', '$==', '$[]', '$nil?', '$!=', '$match', '$find', '$encoding', '$recognize_encoding', '$force_encoding', '$encode', '$to_s', '$source=', '$-', '$open', '$read', '$raise', '$frozen?', '$dup', '$reencode_string', '$class', '$valid_encoding?', '$name', '$raw_source=', '$gsub', '$!', '$ascii_only?', '$line_for', '$+', '$[]=', '$to_a', '$lines', '$end_with?', '$<<', '$each', '$chomp!', '$fetch', '$source_lines', '$<=', '$>', '$size', '$line_begins', '$new', '$-@', '$source', '$private', '$index', '$unshift', '$length', '$bsearch']);
  return (function($base, $parent_nesting) {
    var self = $module($base, 'Parser');

    var $nesting = [self].concat($parent_nesting);

    (function($base, $parent_nesting) {
      var self = $module($base, 'Source');

      var $nesting = [self].concat($parent_nesting);

      (function($base, $super, $parent_nesting) {
        var self = $klass($base, $super, 'Buffer');

        var $nesting = [self].concat($parent_nesting), $Buffer_recognize_encoding$1, $Buffer_reencode_string$2, $Buffer_initialize$3, $Buffer_read$4, $Buffer_source$6, $Buffer_source$eq$7, $Buffer_raw_source$eq$8, $Buffer_slice$9, $Buffer_decompose_position$10, $Buffer_line_for_position$11, $Buffer_column_for_position$12, $Buffer_source_lines$13, $Buffer_source_line$15, $Buffer_line_range$16, $Buffer_source_range$17, $Buffer_last_line$18, $Buffer_line_begins$19, $Buffer_line_for$20;

        self.$$prototype.name = self.$$prototype.source = self.$$prototype.slice_source = self.$$prototype.first_line = self.$$prototype.line_for_position = self.$$prototype.column_for_position = self.$$prototype.lines = self.$$prototype.source_range = self.$$prototype.line_begins = nil;
        
        self.$attr_reader("name", "first_line");
        Opal.const_set($nesting[0], 'ENCODING_RE', Opal.regexp([$enc("[\\s#](en)?coding\\s*[:=]\\s*", "ASCII-8BIT"), $enc("(", "ASCII-8BIT"), $enc("", "ASCII-8BIT"), $enc("(utf8-mac)", "ASCII-8BIT"), $enc("|", "ASCII-8BIT"), $enc("", "ASCII-8BIT"), $enc("([A-Za-z0-9_-]+?)(-unix|-dos|-mac)", "ASCII-8BIT"), $enc("|", "ASCII-8BIT"), $enc("([A-Za-z0-9_-]+)", "ASCII-8BIT"), $enc(")", "ASCII-8BIT"), $enc("", "ASCII-8BIT")]));
        Opal.defs(self, '$recognize_encoding', $Buffer_recognize_encoding$1 = function $$recognize_encoding(string) {
          var $a, $b, self = this, first_line = nil, second_line = nil, encoding_line = nil, result = nil;

          
          if ($truthy(string['$empty?']())) {
            return nil};
          string['$=~'](/^(.*)\n?(.*\n)?/);
          $a = [(($b = $gvars['~']) === nil ? nil : $b['$[]'](1)), (($b = $gvars['~']) === nil ? nil : $b['$[]'](2))], (first_line = $a[0]), (second_line = $a[1]), $a;
          if ($truthy(first_line['$start_with?']($enc("\xEF\xBB\xBF", "ASCII-8BIT").$freeze()))) {
            return $$$($$($nesting, 'Encoding'), 'UTF_8')
          } else if (first_line['$[]'](0, 2)['$==']($enc("#!", "ASCII-8BIT").$freeze())) {
            encoding_line = second_line
          } else {
            encoding_line = first_line
          };
          if ($truthy(($truthy($a = encoding_line['$nil?']()) ? $a : encoding_line['$[]'](0)['$!=']($enc("#", "ASCII-8BIT"))))) {
            return nil};
          if ($truthy((result = $$($nesting, 'ENCODING_RE').$match(encoding_line)))) {
            return $$($nesting, 'Encoding').$find(($truthy($a = ($truthy($b = result['$[]'](3)) ? $b : result['$[]'](4))) ? $a : result['$[]'](6)))
          } else {
            return nil
          };
        }, $Buffer_recognize_encoding$1.$$arity = 1);
        Opal.defs(self, '$reencode_string', $Buffer_reencode_string$2 = function $$reencode_string(input) {
          var self = this, original_encoding = nil, detected_encoding = nil;

          
          original_encoding = input.$encoding();
          detected_encoding = self.$recognize_encoding(input.$force_encoding($$$($$($nesting, 'Encoding'), 'BINARY')));
          if ($truthy(detected_encoding['$nil?']())) {
            return input.$force_encoding(original_encoding)
          } else if (detected_encoding['$==']($$$($$($nesting, 'Encoding'), 'BINARY'))) {
            return input
          } else {
            return input.$force_encoding(detected_encoding).$encode($$$($$($nesting, 'Encoding'), 'UTF_8'))
          };
        }, $Buffer_reencode_string$2.$$arity = 1);
        
        Opal.def(self, '$initialize', $Buffer_initialize$3 = function $$initialize(name, $a, $b) {
          var $post_args, $kwargs, first_line, source, self = this, $writer = nil;

          
          
          $post_args = Opal.slice.call(arguments, 1, arguments.length);
          
          $kwargs = Opal.extract_kwargs($post_args);
          
          if ($kwargs == null) {
            $kwargs = $hash2([], {});
          } else if (!$kwargs.$$is_hash) {
            throw Opal.ArgumentError.$new('expected kwargs');
          };
          
          if ($post_args.length > 0) {
            first_line = $post_args[0];
            $post_args.splice(0, 1);
          }
          if (first_line == null) {
            first_line = 1;
          };
          
          source = $kwargs.$$smap["source"];
          if (source == null) {
            source = nil
          };
          self.name = name.$to_s();
          self.source = nil;
          self.first_line = first_line;
          self.lines = nil;
          self.line_begins = nil;
          self.slice_source = nil;
          self.line_for_position = $hash2([], {});
          self.column_for_position = $hash2([], {});
          if ($truthy(source)) {
            
            $writer = [source];
            $send(self, 'source=', Opal.to_a($writer));
            return $writer[$rb_minus($writer["length"], 1)];
          } else {
            return nil
          };
        }, $Buffer_initialize$3.$$arity = -2);
        
        Opal.def(self, '$read', $Buffer_read$4 = function $$read() {
          var $$5, self = this;

          
          $send($$($nesting, 'File'), 'open', [self.name, $enc("rb", "ASCII-8BIT")], ($$5 = function(io){var self = $$5.$$s == null ? this : $$5.$$s, $writer = nil;

          
            
            if (io == null) {
              io = nil;
            };
            $writer = [io.$read()];
            $send(self, 'source=', Opal.to_a($writer));
            return $writer[$rb_minus($writer["length"], 1)];}, $$5.$$s = self, $$5.$$arity = 1, $$5));
          return self;
        }, $Buffer_read$4.$$arity = 0);
        
        Opal.def(self, '$source', $Buffer_source$6 = function $$source() {
          var self = this;

          
          if ($truthy(self.source['$nil?']())) {
            self.$raise($$($nesting, 'RuntimeError'), $enc("Cannot extract source from uninitialized Source::Buffer", "ASCII-8BIT"))};
          return self.source;
        }, $Buffer_source$6.$$arity = 0);
        
        Opal.def(self, '$source=', $Buffer_source$eq$7 = function(input) {
          var self = this, $writer = nil;

          
          if ($truthy(input['$frozen?']())) {
            input = input.$dup()};
          input = self.$class().$reencode_string(input);
          if ($truthy(input['$valid_encoding?']())) {
          } else {
            self.$raise($$($nesting, 'EncodingError'), "" + "invalid byte sequence in " + (input.$encoding().$name()))
          };
          
          $writer = [input];
          $send(self, 'raw_source=', Opal.to_a($writer));
          return $writer[$rb_minus($writer["length"], 1)];;
        }, $Buffer_source$eq$7.$$arity = 1);
        
        Opal.def(self, '$raw_source=', $Buffer_raw_source$eq$8 = function(input) {
          var $a, $b, self = this;

          
          if ($truthy(self.source)) {
            self.$raise($$($nesting, 'ArgumentError'), $enc("Source::Buffer is immutable", "ASCII-8BIT"))};
          self.source = input.$gsub($enc("\r\n", "ASCII-8BIT").$freeze(), $enc("\n", "ASCII-8BIT").$freeze()).$freeze();
          if ($truthy(($truthy($a = ($truthy($b = self.source['$ascii_only?']()['$!']()) ? self.source.$encoding()['$!=']($$$($$($nesting, 'Encoding'), 'UTF_32LE')) : $b)) ? self.source.$encoding()['$!=']($$$($$($nesting, 'Encoding'), 'BINARY')) : $a))) {
            return (self.slice_source = self.source.$encode($$$($$($nesting, 'Encoding'), 'UTF_32LE')))
          } else {
            return nil
          };
        }, $Buffer_raw_source$eq$8.$$arity = 1);
        
        Opal.def(self, '$slice', $Buffer_slice$9 = function $$slice(range) {
          var self = this;

          if ($truthy(self.slice_source['$nil?']())) {
            return self.source['$[]'](range)
          } else {
            return self.slice_source['$[]'](range).$encode(self.source.$encoding())
          }
        }, $Buffer_slice$9.$$arity = 1);
        
        Opal.def(self, '$decompose_position', $Buffer_decompose_position$10 = function $$decompose_position(position) {
          var $a, $b, self = this, line_no = nil, line_begin = nil;

          
          $b = self.$line_for(position), $a = Opal.to_ary($b), (line_no = ($a[0] == null ? nil : $a[0])), (line_begin = ($a[1] == null ? nil : $a[1])), $b;
          return [$rb_plus(self.first_line, line_no), $rb_minus(position, line_begin)];
        }, $Buffer_decompose_position$10.$$arity = 1);
        
        Opal.def(self, '$line_for_position', $Buffer_line_for_position$11 = function $$line_for_position(position) {
          var $a, $b, $c, self = this, $writer = nil, line_no = nil, _ = nil;

          return ($truthy($a = self.line_for_position['$[]'](position)) ? $a : (($writer = [position, ($c = self.$line_for(position), $b = Opal.to_ary($c), (line_no = ($b[0] == null ? nil : $b[0])), (_ = ($b[1] == null ? nil : $b[1])), $c, $rb_plus(self.first_line, line_no))]), $send(self.line_for_position, '[]=', Opal.to_a($writer)), $writer[$rb_minus($writer["length"], 1)]))
        }, $Buffer_line_for_position$11.$$arity = 1);
        
        Opal.def(self, '$column_for_position', $Buffer_column_for_position$12 = function $$column_for_position(position) {
          var $a, $b, $c, self = this, $writer = nil, _ = nil, line_begin = nil;

          return ($truthy($a = self.column_for_position['$[]'](position)) ? $a : (($writer = [position, ($c = self.$line_for(position), $b = Opal.to_ary($c), (_ = ($b[0] == null ? nil : $b[0])), (line_begin = ($b[1] == null ? nil : $b[1])), $c, $rb_minus(position, line_begin))]), $send(self.column_for_position, '[]=', Opal.to_a($writer)), $writer[$rb_minus($writer["length"], 1)]))
        }, $Buffer_column_for_position$12.$$arity = 1);
        
        Opal.def(self, '$source_lines', $Buffer_source_lines$13 = function $$source_lines() {
          var $a, $$14, self = this, lines = nil;

          return (self.lines = ($truthy($a = self.lines) ? $a : ((lines = self.source.$lines().$to_a()), (function() {if ($truthy(self.source['$end_with?']($enc("\n", "ASCII-8BIT").$freeze()))) {
            return lines['$<<']($enc("", "ASCII-8BIT").$dup())
          } else {
            return nil
          }; return nil; })(), $send(lines, 'each', [], ($$14 = function(line){var self = $$14.$$s == null ? this : $$14.$$s;

          
            
            if (line == null) {
              line = nil;
            };
            line['$chomp!']($enc("\n", "ASCII-8BIT").$freeze());
            return line.$freeze();}, $$14.$$s = self, $$14.$$arity = 1, $$14)), lines.$freeze())))
        }, $Buffer_source_lines$13.$$arity = 0);
        
        Opal.def(self, '$source_line', $Buffer_source_line$15 = function $$source_line(lineno) {
          var self = this;

          return self.$source_lines().$fetch($rb_minus(lineno, self.first_line)).$dup()
        }, $Buffer_source_line$15.$$arity = 1);
        
        Opal.def(self, '$line_range', $Buffer_line_range$16 = function $$line_range(lineno) {
          var $a, self = this, index = nil;

          
          index = $rb_plus($rb_minus(lineno, self.first_line), 1);
          if ($truthy(($truthy($a = $rb_le(index, 0)) ? $a : $rb_gt(index, self.$line_begins().$size())))) {
            return self.$raise($$($nesting, 'IndexError'), "" + "Parser::Source::Buffer: range for line " + ("" + (lineno) + " requested, valid line numbers are " + (self.first_line) + "..") + ("" + ($rb_minus($rb_plus(self.first_line, self.$line_begins().$size()), 1))))
          } else if (index['$=='](self.$line_begins().$size())) {
            return $$($nesting, 'Range').$new(self, self.$line_begins()['$[]'](index['$-@']())['$[]'](1), self.source.$size())
          } else {
            return $$($nesting, 'Range').$new(self, self.$line_begins()['$[]'](index['$-@']())['$[]'](1), $rb_minus(self.$line_begins()['$[]']($rb_minus(index['$-@'](), 1))['$[]'](1), 1))
          };
        }, $Buffer_line_range$16.$$arity = 1);
        
        Opal.def(self, '$source_range', $Buffer_source_range$17 = function $$source_range() {
          var $a, self = this;

          return (self.source_range = ($truthy($a = self.source_range) ? $a : $$($nesting, 'Range').$new(self, 0, self.$source().$size())))
        }, $Buffer_source_range$17.$$arity = 0);
        
        Opal.def(self, '$last_line', $Buffer_last_line$18 = function $$last_line() {
          var self = this;

          return $rb_minus($rb_plus(self.$line_begins().$size(), self.first_line), 1)
        }, $Buffer_last_line$18.$$arity = 0);
        self.$private();
        
        Opal.def(self, '$line_begins', $Buffer_line_begins$19 = function $$line_begins() {
          var $a, self = this, index = nil;

          
          if ($truthy(self.line_begins)) {
          } else {
            
            $a = [[[0, 0]], 0], (self.line_begins = $a[0]), (index = $a[1]), $a;
            while ($truthy((index = self.source.$index($enc("\n", "ASCII-8BIT").$freeze(), index)))) {
              
              index = $rb_plus(index, 1);
              self.line_begins.$unshift([self.line_begins.$length(), index]);
            };
          };
          return self.line_begins;
        }, $Buffer_line_begins$19.$$arity = 0);
        return (Opal.def(self, '$line_for', $Buffer_line_for$20 = function $$line_for(position) {
          var $$21, self = this;

          return $send(self.$line_begins(), 'bsearch', [], ($$21 = function(line, line_begin){var self = $$21.$$s == null ? this : $$21.$$s;

          
            
            if (line == null) {
              line = nil;
            };
            
            if (line_begin == null) {
              line_begin = nil;
            };
            return $rb_le(line_begin, position);}, $$21.$$s = self, $$21.$$arity = 2, $$21))
        }, $Buffer_line_for$20.$$arity = 1), nil) && 'line_for';
      })($nesting[0], null, $nesting)
    })($nesting[0], $nesting)
  })($nesting[0], $nesting)
};

/* Generated by Opal 1.0.0 */
Opal.modules["parser/source/range"] = function(Opal) {
  function $rb_lt(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs < rhs : lhs['$<'](rhs);
  }
  function $rb_minus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs - rhs : lhs['$-'](rhs);
  }
  function $rb_plus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs + rhs : lhs['$+'](rhs);
  }
  function $rb_ge(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs >= rhs : lhs['$>='](rhs);
  }
  function $rb_times(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs * rhs : lhs['$*'](rhs);
  }
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.$$$, $$ = Opal.$$, $module = Opal.module, $klass = Opal.klass, $truthy = Opal.truthy, $hash2 = Opal.hash2;

  Opal.add_stubs(['$include', '$attr_reader', '$<', '$raise', '$nil?', '$freeze', '$with', '$-', '$line_for_position', '$alias_method', '$column_for_position', '$!=', '$line', '$begin', '$end', '$inspect', '$column', '$source_line', '$slice', '$begin_pos', '$end_pos', '$include?', '$source', '$to_a', '$decompose_position', '$join', '$name', '$+', '$new', '$min', '$max', '$disjoint?', '$empty?', '$>=', '$!', '$<=>', '$contains?', '$overlaps?', '$==', '$*', '$is_a?', '$source_buffer', '$nonzero?', '$hash']);
  return (function($base, $parent_nesting) {
    var self = $module($base, 'Parser');

    var $nesting = [self].concat($parent_nesting);

    (function($base, $parent_nesting) {
      var self = $module($base, 'Source');

      var $nesting = [self].concat($parent_nesting);

      (function($base, $super, $parent_nesting) {
        var self = $klass($base, $super, 'Range');

        var $nesting = [self].concat($parent_nesting), $Range_initialize$1, $Range_begin$2, $Range_end$3, $Range_size$4, $Range_line$5, $Range_column$6, $Range_last_line$7, $Range_last_column$8, $Range_column_range$9, $Range_source_line$10, $Range_source$11, $Range_is$ques$12, $Range_to_a$13, $Range_to_range$14, $Range_to_s$15, $Range_with$16, $Range_adjust$17, $Range_resize$18, $Range_join$19, $Range_intersect$20, $Range_disjoint$ques$21, $Range_overlaps$ques$22, $Range_contains$ques$23, $Range_contained$ques$24, $Range_crossing$ques$25, $Range_empty$ques$26, $Range_$lt_eq_gt$27, $Range_hash$28, $Range_inspect$29;

        self.$$prototype.begin_pos = self.$$prototype.end_pos = self.$$prototype.source_buffer = nil;
        
        self.$include($$($nesting, 'Comparable'));
        self.$attr_reader("source_buffer");
        self.$attr_reader("begin_pos", "end_pos");
        
        Opal.def(self, '$initialize', $Range_initialize$1 = function $$initialize(source_buffer, begin_pos, end_pos) {
          var $a, self = this;

          
          if ($truthy($rb_lt(end_pos, begin_pos))) {
            self.$raise($$($nesting, 'ArgumentError'), "Parser::Source::Range: end_pos must not be less than begin_pos")};
          if ($truthy(source_buffer['$nil?']())) {
            self.$raise($$($nesting, 'ArgumentError'), "Parser::Source::Range: source_buffer must not be nil")};
          self.source_buffer = source_buffer;
          $a = [begin_pos, end_pos], (self.begin_pos = $a[0]), (self.end_pos = $a[1]), $a;
          return self.$freeze();
        }, $Range_initialize$1.$$arity = 3);
        
        Opal.def(self, '$begin', $Range_begin$2 = function $$begin() {
          var self = this;

          return self.$with($hash2(["end_pos"], {"end_pos": self.begin_pos}))
        }, $Range_begin$2.$$arity = 0);
        
        Opal.def(self, '$end', $Range_end$3 = function $$end() {
          var self = this;

          return self.$with($hash2(["begin_pos"], {"begin_pos": self.end_pos}))
        }, $Range_end$3.$$arity = 0);
        
        Opal.def(self, '$size', $Range_size$4 = function $$size() {
          var self = this;

          return $rb_minus(self.end_pos, self.begin_pos)
        }, $Range_size$4.$$arity = 0);
        Opal.alias(self, "length", "size");
        
        Opal.def(self, '$line', $Range_line$5 = function $$line() {
          var self = this;

          return self.source_buffer.$line_for_position(self.begin_pos)
        }, $Range_line$5.$$arity = 0);
        self.$alias_method("first_line", "line");
        
        Opal.def(self, '$column', $Range_column$6 = function $$column() {
          var self = this;

          return self.source_buffer.$column_for_position(self.begin_pos)
        }, $Range_column$6.$$arity = 0);
        
        Opal.def(self, '$last_line', $Range_last_line$7 = function $$last_line() {
          var self = this;

          return self.source_buffer.$line_for_position(self.end_pos)
        }, $Range_last_line$7.$$arity = 0);
        
        Opal.def(self, '$last_column', $Range_last_column$8 = function $$last_column() {
          var self = this;

          return self.source_buffer.$column_for_position(self.end_pos)
        }, $Range_last_column$8.$$arity = 0);
        
        Opal.def(self, '$column_range', $Range_column_range$9 = function $$column_range() {
          var self = this;

          
          if ($truthy(self.$begin().$line()['$!='](self.$end().$line()))) {
            self.$raise($$($nesting, 'RangeError'), "" + (self.$inspect()) + " spans more than one line")};
          return Opal.Range.$new(self.$begin().$column(),self.$end().$column(), true);
        }, $Range_column_range$9.$$arity = 0);
        
        Opal.def(self, '$source_line', $Range_source_line$10 = function $$source_line() {
          var self = this;

          return self.source_buffer.$source_line(self.$line())
        }, $Range_source_line$10.$$arity = 0);
        
        Opal.def(self, '$source', $Range_source$11 = function $$source() {
          var self = this;

          return self.source_buffer.$slice(Opal.Range.$new(self.$begin_pos(),self.$end_pos(), true))
        }, $Range_source$11.$$arity = 0);
        
        Opal.def(self, '$is?', $Range_is$ques$12 = function($a) {
          var $post_args, what, self = this;

          
          
          $post_args = Opal.slice.call(arguments, 0, arguments.length);
          
          what = $post_args;;
          return what['$include?'](self.$source());
        }, $Range_is$ques$12.$$arity = -1);
        
        Opal.def(self, '$to_a', $Range_to_a$13 = function $$to_a() {
          var self = this;

          return Opal.Range.$new(self.begin_pos,self.end_pos, true).$to_a()
        }, $Range_to_a$13.$$arity = 0);
        
        Opal.def(self, '$to_range', $Range_to_range$14 = function $$to_range() {
          var self = this;

          return Opal.Range.$new(self.$begin_pos(),self.$end_pos(), true)
        }, $Range_to_range$14.$$arity = 0);
        
        Opal.def(self, '$to_s', $Range_to_s$15 = function $$to_s() {
          var $a, $b, self = this, line = nil, column = nil;

          
          $b = self.source_buffer.$decompose_position(self.begin_pos), $a = Opal.to_ary($b), (line = ($a[0] == null ? nil : $a[0])), (column = ($a[1] == null ? nil : $a[1])), $b;
          return [self.source_buffer.$name(), line, $rb_plus(column, 1)].$join(":");
        }, $Range_to_s$15.$$arity = 0);
        
        Opal.def(self, '$with', $Range_with$16 = function($kwargs) {
          var begin_pos, end_pos, self = this;

          
          
          if ($kwargs == null) {
            $kwargs = $hash2([], {});
          } else if (!$kwargs.$$is_hash) {
            throw Opal.ArgumentError.$new('expected kwargs');
          };
          
          begin_pos = $kwargs.$$smap["begin_pos"];
          if (begin_pos == null) {
            begin_pos = self.begin_pos
          };
          
          end_pos = $kwargs.$$smap["end_pos"];
          if (end_pos == null) {
            end_pos = self.end_pos
          };
          return $$($nesting, 'Range').$new(self.source_buffer, begin_pos, end_pos);
        }, $Range_with$16.$$arity = -1);
        
        Opal.def(self, '$adjust', $Range_adjust$17 = function $$adjust($kwargs) {
          var begin_pos, end_pos, self = this;

          
          
          if ($kwargs == null) {
            $kwargs = $hash2([], {});
          } else if (!$kwargs.$$is_hash) {
            throw Opal.ArgumentError.$new('expected kwargs');
          };
          
          begin_pos = $kwargs.$$smap["begin_pos"];
          if (begin_pos == null) {
            begin_pos = 0
          };
          
          end_pos = $kwargs.$$smap["end_pos"];
          if (end_pos == null) {
            end_pos = 0
          };
          return $$($nesting, 'Range').$new(self.source_buffer, $rb_plus(self.begin_pos, begin_pos), $rb_plus(self.end_pos, end_pos));
        }, $Range_adjust$17.$$arity = -1);
        
        Opal.def(self, '$resize', $Range_resize$18 = function $$resize(new_size) {
          var self = this;

          return self.$with($hash2(["end_pos"], {"end_pos": $rb_plus(self.begin_pos, new_size)}))
        }, $Range_resize$18.$$arity = 1);
        
        Opal.def(self, '$join', $Range_join$19 = function $$join(other) {
          var self = this;

          return $$($nesting, 'Range').$new(self.source_buffer, [self.begin_pos, other.$begin_pos()].$min(), [self.end_pos, other.$end_pos()].$max())
        }, $Range_join$19.$$arity = 1);
        
        Opal.def(self, '$intersect', $Range_intersect$20 = function $$intersect(other) {
          var self = this;

          if ($truthy(self['$disjoint?'](other))) {
            return nil
          } else {
            return $$($nesting, 'Range').$new(self.source_buffer, [self.begin_pos, other.$begin_pos()].$max(), [self.end_pos, other.$end_pos()].$min())
          }
        }, $Range_intersect$20.$$arity = 1);
        
        Opal.def(self, '$disjoint?', $Range_disjoint$ques$21 = function(other) {
          var $a, self = this;

          if ($truthy(($truthy($a = self['$empty?']()) ? other['$empty?']() : $a))) {
            return self.begin_pos['$!='](other.$begin_pos())
          } else {
            return ($truthy($a = $rb_ge(self.begin_pos, other.$end_pos())) ? $a : $rb_ge(other.$begin_pos(), self.end_pos))
          }
        }, $Range_disjoint$ques$21.$$arity = 1);
        
        Opal.def(self, '$overlaps?', $Range_overlaps$ques$22 = function(other) {
          var self = this;

          return self['$disjoint?'](other)['$!']()
        }, $Range_overlaps$ques$22.$$arity = 1);
        
        Opal.def(self, '$contains?', $Range_contains$ques$23 = function(other) {
          var self = this;

          return $rb_ge($rb_plus(other.$begin_pos()['$<=>'](self.begin_pos), self.end_pos['$<=>'](other.$end_pos())), (function() {if ($truthy(other['$empty?']())) {
            return 2
          } else {
            return 1
          }; return nil; })())
        }, $Range_contains$ques$23.$$arity = 1);
        
        Opal.def(self, '$contained?', $Range_contained$ques$24 = function(other) {
          var self = this;

          return other['$contains?'](self)
        }, $Range_contained$ques$24.$$arity = 1);
        
        Opal.def(self, '$crossing?', $Range_crossing$ques$25 = function(other) {
          var self = this;

          
          if ($truthy(self['$overlaps?'](other))) {
          } else {
            return false
          };
          return $rb_times(self.begin_pos['$<=>'](other.$begin_pos()), self.end_pos['$<=>'](other.$end_pos()))['$=='](1);
        }, $Range_crossing$ques$25.$$arity = 1);
        
        Opal.def(self, '$empty?', $Range_empty$ques$26 = function() {
          var self = this;

          return self.begin_pos['$=='](self.end_pos)
        }, $Range_empty$ques$26.$$arity = 0);
        
        Opal.def(self, '$<=>', $Range_$lt_eq_gt$27 = function(other) {
          var $a, self = this;

          
          if ($truthy(($truthy($a = other['$is_a?']($$$($$$($$$('::', 'Parser'), 'Source'), 'Range'))) ? self.source_buffer['$=='](other.$source_buffer()) : $a))) {
          } else {
            return nil
          };
          return ($truthy($a = self.begin_pos['$<=>'](other.$begin_pos())['$nonzero?']()) ? $a : self.end_pos['$<=>'](other.$end_pos()));
        }, $Range_$lt_eq_gt$27.$$arity = 1);
        self.$alias_method("eql?", "==");
        
        Opal.def(self, '$hash', $Range_hash$28 = function $$hash() {
          var self = this;

          return [self.source_buffer, self.begin_pos, self.end_pos].$hash()
        }, $Range_hash$28.$$arity = 0);
        return (Opal.def(self, '$inspect', $Range_inspect$29 = function $$inspect() {
          var self = this;

          return "" + "#<Parser::Source::Range " + (self.source_buffer.$name()) + " " + (self.begin_pos) + "..." + (self.end_pos) + ">"
        }, $Range_inspect$29.$$arity = 0), nil) && 'inspect';
      })($nesting[0], null, $nesting)
    })($nesting[0], $nesting)
  })($nesting[0], $nesting)
};

/* Generated by Opal 1.0.0 */
Opal.modules["parser/source/comment"] = function(Opal) {
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.$$$, $$ = Opal.$$, $module = Opal.module, $klass = Opal.klass, $truthy = Opal.truthy;

  Opal.add_stubs(['$attr_reader', '$alias_method', '$new', '$associate', '$associate_locations', '$freeze', '$source', '$start_with?', '$text', '$==', '$type', '$is_a?', '$location', '$to_s', '$expression', '$inspect']);
  return (function($base, $parent_nesting) {
    var self = $module($base, 'Parser');

    var $nesting = [self].concat($parent_nesting);

    (function($base, $parent_nesting) {
      var self = $module($base, 'Source');

      var $nesting = [self].concat($parent_nesting);

      (function($base, $super, $parent_nesting) {
        var self = $klass($base, $super, 'Comment');

        var $nesting = [self].concat($parent_nesting), $Comment_associate$1, $Comment_associate_locations$2, $Comment_initialize$3, $Comment_type$4, $Comment_inline$ques$5, $Comment_document$ques$6, $Comment_$eq_eq$7, $Comment_inspect$8;

        self.$$prototype.location = nil;
        
        self.$attr_reader("text");
        self.$attr_reader("location");
        self.$alias_method("loc", "location");
        Opal.defs(self, '$associate', $Comment_associate$1 = function $$associate(ast, comments) {
          var self = this, associator = nil;

          
          associator = $$($nesting, 'Associator').$new(ast, comments);
          return associator.$associate();
        }, $Comment_associate$1.$$arity = 2);
        Opal.defs(self, '$associate_locations', $Comment_associate_locations$2 = function $$associate_locations(ast, comments) {
          var self = this, associator = nil;

          
          associator = $$($nesting, 'Associator').$new(ast, comments);
          return associator.$associate_locations();
        }, $Comment_associate_locations$2.$$arity = 2);
        
        Opal.def(self, '$initialize', $Comment_initialize$3 = function $$initialize(range) {
          var self = this;

          
          self.location = $$$($$$($$($nesting, 'Parser'), 'Source'), 'Map').$new(range);
          self.text = range.$source().$freeze();
          return self.$freeze();
        }, $Comment_initialize$3.$$arity = 1);
        
        Opal.def(self, '$type', $Comment_type$4 = function $$type() {
          var self = this;

          if ($truthy(self.$text()['$start_with?']("#".$freeze()))) {
            return "inline"
          } else if ($truthy(self.$text()['$start_with?']("=begin".$freeze()))) {
            return "document"
          } else {
            return nil
          }
        }, $Comment_type$4.$$arity = 0);
        
        Opal.def(self, '$inline?', $Comment_inline$ques$5 = function() {
          var self = this;

          return self.$type()['$==']("inline")
        }, $Comment_inline$ques$5.$$arity = 0);
        
        Opal.def(self, '$document?', $Comment_document$ques$6 = function() {
          var self = this;

          return self.$type()['$==']("document")
        }, $Comment_document$ques$6.$$arity = 0);
        
        Opal.def(self, '$==', $Comment_$eq_eq$7 = function(other) {
          var $a, self = this;

          return ($truthy($a = other['$is_a?']($$$($$($nesting, 'Source'), 'Comment'))) ? self.location['$=='](other.$location()) : $a)
        }, $Comment_$eq_eq$7.$$arity = 1);
        return (Opal.def(self, '$inspect', $Comment_inspect$8 = function $$inspect() {
          var self = this;

          return "" + "#<Parser::Source::Comment " + (self.location.$expression().$to_s()) + " " + (self.$text().$inspect()) + ">"
        }, $Comment_inspect$8.$$arity = 0), nil) && 'inspect';
      })($nesting[0], null, $nesting)
    })($nesting[0], $nesting)
  })($nesting[0], $nesting)
};

/* Generated by Opal 1.0.0 */
Opal.modules["parser/source/comment/associator"] = function(Opal) {
  function $rb_minus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs - rhs : lhs['$-'](rhs);
  }
  function $rb_le(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs <= rhs : lhs['$<='](rhs);
  }
  function $rb_plus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs + rhs : lhs['$+'](rhs);
  }
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.$$$, $$ = Opal.$$, $module = Opal.module, $klass = Opal.klass, $truthy = Opal.truthy, $send = Opal.send;

  Opal.add_stubs(['$attr_accessor', '$do_associate', '$private', '$freeze', '$[]', '$include?', '$type', '$sort_by', '$compact', '$children', '$begin_pos', '$expression', '$loc', '$select', '$is_a?', '$new', '$[]=', '$-', '$advance_comment', '$advance_through_directives', '$visit', '$process_leading_comments', '$location', '$<=', '$line', '$last_line', '$each', '$children_in_source_order', '$process_trailing_comments', '$==', '$current_comment_before?', '$associate_and_advance_comment', '$current_comment_before_end?', '$current_comment_decorates?', '$+', '$!', '$end_pos', '$<<', '$start_with?', '$text', '$=~']);
  return (function($base, $parent_nesting) {
    var self = $module($base, 'Parser');

    var $nesting = [self].concat($parent_nesting);

    (function($base, $parent_nesting) {
      var self = $module($base, 'Source');

      var $nesting = [self].concat($parent_nesting);

      (function($base, $super, $parent_nesting) {
        var self = $klass($base, $super, 'Associator');

        var $nesting = [self].concat($parent_nesting), $Associator_initialize$1, $Associator_associate$2, $Associator_associate_locations$3, $Associator_children_in_source_order$4, $Associator_do_associate$7, $Associator_visit$9, $Associator_process_leading_comments$11, $Associator_process_trailing_comments$12, $Associator_advance_comment$13, $Associator_current_comment_before$ques$14, $Associator_current_comment_before_end$ques$15, $Associator_current_comment_decorates$ques$16, $Associator_associate_and_advance_comment$17, $Associator_advance_through_directives$18;

        self.$$prototype.skip_directives = self.$$prototype.ast = self.$$prototype.mapping = self.$$prototype.current_comment = self.$$prototype.comment_num = self.$$prototype.comments = self.$$prototype.map_using_locations = nil;
        
        self.$attr_accessor("skip_directives");
        
        Opal.def(self, '$initialize', $Associator_initialize$1 = function $$initialize(ast, comments) {
          var self = this;

          
          self.ast = ast;
          self.comments = comments;
          return (self.skip_directives = true);
        }, $Associator_initialize$1.$$arity = 2);
        
        Opal.def(self, '$associate', $Associator_associate$2 = function $$associate() {
          var self = this;

          
          self.map_using_locations = false;
          return self.$do_associate();
        }, $Associator_associate$2.$$arity = 0);
        
        Opal.def(self, '$associate_locations', $Associator_associate_locations$3 = function $$associate_locations() {
          var self = this;

          
          self.map_using_locations = true;
          return self.$do_associate();
        }, $Associator_associate_locations$3.$$arity = 0);
        self.$private();
        Opal.const_set($nesting[0], 'POSTFIX_TYPES', $$($nesting, 'Set')['$[]']("if", "while", "while_post", "until", "until_post").$freeze());
        
        Opal.def(self, '$children_in_source_order', $Associator_children_in_source_order$4 = function $$children_in_source_order(node) {
          var $$5, $$6, self = this;

          if ($truthy($$($nesting, 'POSTFIX_TYPES')['$include?'](node.$type()))) {
            return $send(node.$children().$compact(), 'sort_by', [], ($$5 = function(child){var self = $$5.$$s == null ? this : $$5.$$s;

            
              
              if (child == null) {
                child = nil;
              };
              return child.$loc().$expression().$begin_pos();}, $$5.$$s = self, $$5.$$arity = 1, $$5))
          } else {
            return $send(node.$children(), 'select', [], ($$6 = function(child){var self = $$6.$$s == null ? this : $$6.$$s, $a, $b;

            
              
              if (child == null) {
                child = nil;
              };
              return ($truthy($a = ($truthy($b = child['$is_a?']($$$($$($nesting, 'AST'), 'Node'))) ? child.$loc() : $b)) ? child.$loc().$expression() : $a);}, $$6.$$s = self, $$6.$$arity = 1, $$6))
          }
        }, $Associator_children_in_source_order$4.$$arity = 1);
        
        Opal.def(self, '$do_associate', $Associator_do_associate$7 = function $$do_associate() {
          var $$8, self = this;

          
          self.mapping = $send($$($nesting, 'Hash'), 'new', [], ($$8 = function(h, k){var self = $$8.$$s == null ? this : $$8.$$s, $writer = nil;

          
            
            if (h == null) {
              h = nil;
            };
            
            if (k == null) {
              k = nil;
            };
            $writer = [k, []];
            $send(h, '[]=', Opal.to_a($writer));
            return $writer[$rb_minus($writer["length"], 1)];}, $$8.$$s = self, $$8.$$arity = 2, $$8));
          self.comment_num = -1;
          self.$advance_comment();
          if ($truthy(self.skip_directives)) {
            self.$advance_through_directives()};
          if ($truthy(self.ast)) {
            self.$visit(self.ast)};
          return self.mapping;
        }, $Associator_do_associate$7.$$arity = 0);
        
        Opal.def(self, '$visit', $Associator_visit$9 = function $$visit(node) {
          var $a, $$10, self = this, node_loc = nil;

          
          self.$process_leading_comments(node);
          if ($truthy(self.current_comment)) {
          } else {
            return nil
          };
          node_loc = node.$location();
          if ($truthy(($truthy($a = $rb_le(self.current_comment.$location().$line(), node_loc.$last_line())) ? $a : node_loc['$is_a?']($$$($$($nesting, 'Map'), 'Heredoc'))))) {
            
            $send(self.$children_in_source_order(node), 'each', [], ($$10 = function(child){var self = $$10.$$s == null ? this : $$10.$$s;

            
              
              if (child == null) {
                child = nil;
              };
              return self.$visit(child);}, $$10.$$s = self, $$10.$$arity = 1, $$10));
            return self.$process_trailing_comments(node);
          } else {
            return nil
          };
        }, $Associator_visit$9.$$arity = 1);
        
        Opal.def(self, '$process_leading_comments', $Associator_process_leading_comments$11 = function $$process_leading_comments(node) {
          var $a, self = this;

          
          if (node.$type()['$==']("begin")) {
            return nil};
          while ($truthy(self['$current_comment_before?'](node))) {
            self.$associate_and_advance_comment(node)
          };
        }, $Associator_process_leading_comments$11.$$arity = 1);
        
        Opal.def(self, '$process_trailing_comments', $Associator_process_trailing_comments$12 = function $$process_trailing_comments(node) {
          var $a, self = this;

          
          while ($truthy(self['$current_comment_before_end?'](node))) {
            self.$associate_and_advance_comment(node)
          };
          while ($truthy(self['$current_comment_decorates?'](node))) {
            self.$associate_and_advance_comment(node)
          };
        }, $Associator_process_trailing_comments$12.$$arity = 1);
        
        Opal.def(self, '$advance_comment', $Associator_advance_comment$13 = function $$advance_comment() {
          var self = this;

          
          self.comment_num = $rb_plus(self.comment_num, 1);
          return (self.current_comment = self.comments['$[]'](self.comment_num));
        }, $Associator_advance_comment$13.$$arity = 0);
        
        Opal.def(self, '$current_comment_before?', $Associator_current_comment_before$ques$14 = function(node) {
          var self = this, comment_loc = nil, node_loc = nil;

          
          if ($truthy(self.current_comment['$!']())) {
            return false};
          comment_loc = self.current_comment.$location().$expression();
          node_loc = node.$location().$expression();
          return $rb_le(comment_loc.$end_pos(), node_loc.$begin_pos());
        }, $Associator_current_comment_before$ques$14.$$arity = 1);
        
        Opal.def(self, '$current_comment_before_end?', $Associator_current_comment_before_end$ques$15 = function(node) {
          var self = this, comment_loc = nil, node_loc = nil;

          
          if ($truthy(self.current_comment['$!']())) {
            return false};
          comment_loc = self.current_comment.$location().$expression();
          node_loc = node.$location().$expression();
          return $rb_le(comment_loc.$end_pos(), node_loc.$end_pos());
        }, $Associator_current_comment_before_end$ques$15.$$arity = 1);
        
        Opal.def(self, '$current_comment_decorates?', $Associator_current_comment_decorates$ques$16 = function(node) {
          var self = this;

          
          if ($truthy(self.current_comment['$!']())) {
            return false};
          return self.current_comment.$location().$line()['$=='](node.$location().$last_line());
        }, $Associator_current_comment_decorates$ques$16.$$arity = 1);
        
        Opal.def(self, '$associate_and_advance_comment', $Associator_associate_and_advance_comment$17 = function $$associate_and_advance_comment(node) {
          var self = this, key = nil;

          
          key = (function() {if ($truthy(self.map_using_locations)) {
            return node.$location()
          } else {
            return node
          }; return nil; })();
          self.mapping['$[]'](key)['$<<'](self.current_comment);
          return self.$advance_comment();
        }, $Associator_associate_and_advance_comment$17.$$arity = 1);
        Opal.const_set($nesting[0], 'MAGIC_COMMENT_RE', /^#\s*(-\*-|)\s*(frozen_string_literal|warn_indent|warn_past_scope):.*\1$/);
        return (Opal.def(self, '$advance_through_directives', $Associator_advance_through_directives$18 = function $$advance_through_directives() {
          var $a, self = this;

          
          if ($truthy(($truthy($a = self.current_comment) ? self.current_comment.$text()['$start_with?']("#!".$freeze()) : $a))) {
            self.$advance_comment()};
          if ($truthy(($truthy($a = self.current_comment) ? self.current_comment.$text()['$=~']($$($nesting, 'MAGIC_COMMENT_RE')) : $a))) {
            self.$advance_comment()};
          if ($truthy(($truthy($a = self.current_comment) ? self.current_comment.$text()['$=~']($$$($$($nesting, 'Buffer'), 'ENCODING_RE')) : $a))) {
            return self.$advance_comment()
          } else {
            return nil
          };
        }, $Associator_advance_through_directives$18.$$arity = 0), nil) && 'advance_through_directives';
      })($$($nesting, 'Comment'), null, $nesting)
    })($nesting[0], $nesting)
  })($nesting[0], $nesting)
};

/* Generated by Opal 1.0.0 */
Opal.modules["parser/source/rewriter"] = function(Opal) {
  function $rb_minus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs - rhs : lhs['$-'](rhs);
  }
  function $rb_plus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs + rhs : lhs['$+'](rhs);
  }
  function $rb_le(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs <= rhs : lhs['$<='](rhs);
  }
  function $rb_ge(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs >= rhs : lhs['$>='](rhs);
  }
  function $rb_lt(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs < rhs : lhs['$<'](rhs);
  }
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.$$$, $$ = Opal.$$, $module = Opal.module, $klass = Opal.klass, $send = Opal.send, $gvars = Opal.gvars, $truthy = Opal.truthy, $hash2 = Opal.hash2;

  Opal.add_stubs(['$attr_reader', '$warn_of_deprecation', '$class', '$new', '$lambda', '$puts', '$render', '$consumer=', '$-', '$append', '$freeze', '$begin', '$end', '$+', '$in_transaction?', '$raise', '$dup', '$source', '$each', '$sort', '$begin_pos', '$range', '$length', '$replacement', '$[]=', '$private', '$empty?', '$!', '$allow_multiple_insertions?', '$clobbered_insertion?', '$raise_clobber_error', '$record_insertion', '$adjacent_updates?', '$find', '$overlaps?', '$replace_compatible_with_insertion?', '$merge_actions!', '$<<', '$active_queue', '$adjacent_insertions?', '$merge_actions', '$delete', '$can_merge?', '$record_replace', '$|', '$active_insertions', '$active_insertions=', '$active_clobber', '$clobbered_position_mask', '$active_clobber=', '$size', '$!=', '$&', '$<=', '$end_pos', '$adjacent_insertion_mask', '$select', '$adjacent?', '$adjacent_position_mask', '$>=', '$==', '$[]', '$all?', '$intersect', '$nil?', '$max', '$sort_by', '$push', '$join', '$first', '$max_by', '$merge_replacements', '$replace_actions', '$disjoint?', '$<', '$process', '$extend']);
  return (function($base, $parent_nesting) {
    var self = $module($base, 'Parser');

    var $nesting = [self].concat($parent_nesting);

    (function($base, $parent_nesting) {
      var self = $module($base, 'Source');

      var $nesting = [self].concat($parent_nesting);

      (function($base, $super, $parent_nesting) {
        var self = $klass($base, $super, 'Rewriter');

        var $nesting = [self].concat($parent_nesting), $Rewriter_initialize$1, $Rewriter_remove$3, $Rewriter_insert_before$4, $Rewriter_wrap$5, $Rewriter_insert_before_multi$6, $Rewriter_insert_after$7, $Rewriter_insert_after_multi$8, $Rewriter_replace$9, $Rewriter_process$10, $Rewriter_transaction$12, $Rewriter_append$13, $Rewriter_record_insertion$16, $Rewriter_record_replace$17, $Rewriter_clobbered_position_mask$18, $Rewriter_adjacent_position_mask$19, $Rewriter_adjacent_insertion_mask$20, $Rewriter_clobbered_insertion$ques$21, $Rewriter_adjacent_insertions$ques$23, $Rewriter_adjacent_updates$ques$25, $Rewriter_replace_compatible_with_insertion$ques$27, $Rewriter_can_merge$ques$28, $Rewriter_merge_actions$30, $Rewriter_merge_actions$excl$33, $Rewriter_merge_replacements$34, $Rewriter_replace_actions$36, $Rewriter_raise_clobber_error$38, $Rewriter_in_transaction$ques$39, $Rewriter_active_queue$40, $Rewriter_active_clobber$41, $Rewriter_active_insertions$42, $Rewriter_active_clobber$eq$43, $Rewriter_active_insertions$eq$44, $Rewriter_adjacent$ques$45;

        self.$$prototype.diagnostics = self.$$prototype.insert_before_multi_order = self.$$prototype.insert_after_multi_order = self.$$prototype.source_buffer = self.$$prototype.queue = self.$$prototype.clobber = self.$$prototype.insertions = self.$$prototype.pending_queue = self.$$prototype.pending_clobber = self.$$prototype.pending_insertions = nil;
        
        self.$attr_reader("source_buffer");
        self.$attr_reader("diagnostics");
        
        Opal.def(self, '$initialize', $Rewriter_initialize$1 = function $$initialize(source_buffer) {
          var $$2, self = this, $writer = nil;

          
          self.$class().$warn_of_deprecation();
          self.diagnostics = $$$($$($nesting, 'Diagnostic'), 'Engine').$new();
          
          $writer = [$send(self, 'lambda', [], ($$2 = function(diag){var self = $$2.$$s == null ? this : $$2.$$s;
            if ($gvars.stderr == null) $gvars.stderr = nil;

          
            
            if (diag == null) {
              diag = nil;
            };
            return $gvars.stderr.$puts(diag.$render());}, $$2.$$s = self, $$2.$$arity = 1, $$2))];
          $send(self.diagnostics, 'consumer=', Opal.to_a($writer));
          $writer[$rb_minus($writer["length"], 1)];;
          self.source_buffer = source_buffer;
          self.queue = [];
          self.clobber = 0;
          self.insertions = 0;
          self.insert_before_multi_order = 0;
          self.insert_after_multi_order = 0;
          self.pending_queue = nil;
          self.pending_clobber = nil;
          return (self.pending_insertions = nil);
        }, $Rewriter_initialize$1.$$arity = 1);
        
        Opal.def(self, '$remove', $Rewriter_remove$3 = function $$remove(range) {
          var self = this;

          return self.$append($$$($$($nesting, 'Rewriter'), 'Action').$new(range, "".$freeze()))
        }, $Rewriter_remove$3.$$arity = 1);
        
        Opal.def(self, '$insert_before', $Rewriter_insert_before$4 = function $$insert_before(range, content) {
          var self = this;

          return self.$append($$$($$($nesting, 'Rewriter'), 'Action').$new(range.$begin(), content))
        }, $Rewriter_insert_before$4.$$arity = 2);
        
        Opal.def(self, '$wrap', $Rewriter_wrap$5 = function $$wrap(range, before, after) {
          var self = this;

          
          self.$append($$$($$($nesting, 'Rewriter'), 'Action').$new(range.$begin(), before));
          return self.$append($$$($$($nesting, 'Rewriter'), 'Action').$new(range.$end(), after));
        }, $Rewriter_wrap$5.$$arity = 3);
        
        Opal.def(self, '$insert_before_multi', $Rewriter_insert_before_multi$6 = function $$insert_before_multi(range, content) {
          var self = this;

          
          self.insert_before_multi_order = $rb_minus(self.insert_before_multi_order, 1);
          return self.$append($$$($$($nesting, 'Rewriter'), 'Action').$new(range.$begin(), content, true, self.insert_before_multi_order));
        }, $Rewriter_insert_before_multi$6.$$arity = 2);
        
        Opal.def(self, '$insert_after', $Rewriter_insert_after$7 = function $$insert_after(range, content) {
          var self = this;

          return self.$append($$$($$($nesting, 'Rewriter'), 'Action').$new(range.$end(), content))
        }, $Rewriter_insert_after$7.$$arity = 2);
        
        Opal.def(self, '$insert_after_multi', $Rewriter_insert_after_multi$8 = function $$insert_after_multi(range, content) {
          var self = this;

          
          self.insert_after_multi_order = $rb_plus(self.insert_after_multi_order, 1);
          return self.$append($$$($$($nesting, 'Rewriter'), 'Action').$new(range.$end(), content, true, self.insert_after_multi_order));
        }, $Rewriter_insert_after_multi$8.$$arity = 2);
        
        Opal.def(self, '$replace', $Rewriter_replace$9 = function $$replace(range, content) {
          var self = this;

          return self.$append($$$($$($nesting, 'Rewriter'), 'Action').$new(range, content))
        }, $Rewriter_replace$9.$$arity = 2);
        
        Opal.def(self, '$process', $Rewriter_process$10 = function $$process() {
          var $$11, self = this, adjustment = nil, source = nil;

          
          if ($truthy(self['$in_transaction?']())) {
            self.$raise("" + "Do not call " + (self.$class()) + "#" + ("process") + " inside a transaction")};
          adjustment = 0;
          source = self.source_buffer.$source().$dup();
          $send(self.queue.$sort(), 'each', [], ($$11 = function(action){var self = $$11.$$s == null ? this : $$11.$$s, begin_pos = nil, end_pos = nil, $writer = nil;

          
            
            if (action == null) {
              action = nil;
            };
            begin_pos = $rb_plus(action.$range().$begin_pos(), adjustment);
            end_pos = $rb_plus(begin_pos, action.$range().$length());
            
            $writer = [Opal.Range.$new(begin_pos,end_pos, true), action.$replacement()];
            $send(source, '[]=', Opal.to_a($writer));
            $writer[$rb_minus($writer["length"], 1)];;
            return (adjustment = $rb_plus(adjustment, $rb_minus(action.$replacement().$length(), action.$range().$length())));}, $$11.$$s = self, $$11.$$arity = 1, $$11));
          return source;
        }, $Rewriter_process$10.$$arity = 0);
        
        Opal.def(self, '$transaction', $Rewriter_transaction$12 = function $$transaction() {
          var $iter = $Rewriter_transaction$12.$$p, $yield = $iter || nil, self = this;

          if ($iter) $Rewriter_transaction$12.$$p = null;
          return (function() { try {
          
          if (($yield !== nil)) {
          } else {
            self.$raise("" + (self.$class()) + "#" + ("transaction") + " requires block")
          };
          if ($truthy(self['$in_transaction?']())) {
            self.$raise("Nested transaction is not supported")};
          self.pending_queue = self.queue.$dup();
          self.pending_clobber = self.clobber;
          self.pending_insertions = self.insertions;
          Opal.yieldX($yield, []);
          self.queue = self.pending_queue;
          self.clobber = self.pending_clobber;
          self.insertions = self.pending_insertions;
          return self;
          } finally {
            ((self.pending_queue = nil), (self.pending_clobber = nil), (self.pending_insertions = nil))
          }; })()
        }, $Rewriter_transaction$12.$$arity = 0);
        self.$private();
        
        Opal.def(self, '$append', $Rewriter_append$13 = function $$append(action) {
          var $a, $$14, $$15, self = this, range = nil, conflicting = nil, adjacent = nil, insertions = nil;

          
          range = action.$range();
          if ($truthy(range['$empty?']())) {
            
            if ($truthy(action.$replacement()['$empty?']())) {
              return self};
            if ($truthy(($truthy($a = action['$allow_multiple_insertions?']()['$!']()) ? (conflicting = self['$clobbered_insertion?'](range)) : $a))) {
              self.$raise_clobber_error(action, [conflicting])};
            self.$record_insertion(range);
            if ($truthy((adjacent = self['$adjacent_updates?'](range)))) {
              
              conflicting = $send(adjacent, 'find', [], ($$14 = function(a){var self = $$14.$$s == null ? this : $$14.$$s, $b;

              
                
                if (a == null) {
                  a = nil;
                };
                return ($truthy($b = a.$range()['$overlaps?'](range)) ? self['$replace_compatible_with_insertion?'](a, action)['$!']() : $b);}, $$14.$$s = self, $$14.$$arity = 1, $$14));
              if ($truthy(conflicting)) {
                self.$raise_clobber_error(action, [conflicting])};
              self['$merge_actions!'](action, adjacent);
            } else {
              self.$active_queue()['$<<'](action)
            };
          } else {
            
            if ($truthy((insertions = self['$adjacent_insertions?'](range)))) {
              $send(insertions, 'each', [], ($$15 = function(insertion){var self = $$15.$$s == null ? this : $$15.$$s, $b;

              
                
                if (insertion == null) {
                  insertion = nil;
                };
                if ($truthy(($truthy($b = range['$overlaps?'](insertion.$range())) ? self['$replace_compatible_with_insertion?'](action, insertion)['$!']() : $b))) {
                  return self.$raise_clobber_error(action, [insertion])
                } else {
                  
                  action = self.$merge_actions(action, [insertion]);
                  return self.$active_queue().$delete(insertion);
                };}, $$15.$$s = self, $$15.$$arity = 1, $$15))};
            if ($truthy((adjacent = self['$adjacent_updates?'](range)))) {
              if ($truthy(self['$can_merge?'](action, adjacent))) {
                
                self.$record_replace(range);
                self['$merge_actions!'](action, adjacent);
              } else {
                self.$raise_clobber_error(action, adjacent)
              }
            } else {
              
              self.$record_replace(range);
              self.$active_queue()['$<<'](action);
            };
          };
          return self;
        }, $Rewriter_append$13.$$arity = 1);
        
        Opal.def(self, '$record_insertion', $Rewriter_record_insertion$16 = function $$record_insertion(range) {
          var self = this, $writer = nil;

          
          $writer = [self.$active_insertions()['$|']((1)['$<<'](range.$begin_pos()))];
          $send(self, 'active_insertions=', Opal.to_a($writer));
          return $writer[$rb_minus($writer["length"], 1)];
        }, $Rewriter_record_insertion$16.$$arity = 1);
        
        Opal.def(self, '$record_replace', $Rewriter_record_replace$17 = function $$record_replace(range) {
          var self = this, $writer = nil;

          
          $writer = [self.$active_clobber()['$|'](self.$clobbered_position_mask(range))];
          $send(self, 'active_clobber=', Opal.to_a($writer));
          return $writer[$rb_minus($writer["length"], 1)];
        }, $Rewriter_record_replace$17.$$arity = 1);
        
        Opal.def(self, '$clobbered_position_mask', $Rewriter_clobbered_position_mask$18 = function $$clobbered_position_mask(range) {
          var self = this;

          return $rb_minus((1)['$<<'](range.$size()), 1)['$<<'](range.$begin_pos())
        }, $Rewriter_clobbered_position_mask$18.$$arity = 1);
        
        Opal.def(self, '$adjacent_position_mask', $Rewriter_adjacent_position_mask$19 = function $$adjacent_position_mask(range) {
          var self = this;

          return $rb_minus((1)['$<<']($rb_plus(range.$size(), 2)), 1)['$<<']($rb_minus(range.$begin_pos(), 1))
        }, $Rewriter_adjacent_position_mask$19.$$arity = 1);
        
        Opal.def(self, '$adjacent_insertion_mask', $Rewriter_adjacent_insertion_mask$20 = function $$adjacent_insertion_mask(range) {
          var self = this;

          return $rb_minus((1)['$<<']($rb_plus(range.$size(), 1)), 1)['$<<'](range.$begin_pos())
        }, $Rewriter_adjacent_insertion_mask$20.$$arity = 1);
        
        Opal.def(self, '$clobbered_insertion?', $Rewriter_clobbered_insertion$ques$21 = function(insertion) {
          var $$22, self = this, insertion_pos = nil;

          
          insertion_pos = insertion.$begin_pos();
          if ($truthy(self.$active_insertions()['$&']((1)['$<<'](insertion_pos))['$!='](0))) {
            return $send(self.$active_queue(), 'find', [], ($$22 = function(a){var self = $$22.$$s == null ? this : $$22.$$s, $a;

            
              
              if (a == null) {
                a = nil;
              };
              return ($truthy($a = $rb_le(a.$range().$begin_pos(), insertion_pos)) ? $rb_le(insertion_pos, a.$range().$end_pos()) : $a);}, $$22.$$s = self, $$22.$$arity = 1, $$22))
          } else {
            return nil
          };
        }, $Rewriter_clobbered_insertion$ques$21.$$arity = 1);
        
        Opal.def(self, '$adjacent_insertions?', $Rewriter_adjacent_insertions$ques$23 = function(range) {
          var $$24, self = this, result = nil;

          if ($truthy(self.$active_insertions()['$&'](self.$adjacent_insertion_mask(range))['$!='](0))) {
            
            result = $send(self.$active_queue(), 'select', [], ($$24 = function(a){var self = $$24.$$s == null ? this : $$24.$$s, $a;

            
              
              if (a == null) {
                a = nil;
              };
              return ($truthy($a = a.$range()['$empty?']()) ? self['$adjacent?'](range, a.$range()) : $a);}, $$24.$$s = self, $$24.$$arity = 1, $$24));
            if ($truthy(result['$empty?']())) {
              return nil
            } else {
              return result
            };
          } else {
            return nil
          }
        }, $Rewriter_adjacent_insertions$ques$23.$$arity = 1);
        
        Opal.def(self, '$adjacent_updates?', $Rewriter_adjacent_updates$ques$25 = function(range) {
          var $$26, self = this;

          if ($truthy(self.$active_clobber()['$&'](self.$adjacent_position_mask(range))['$!='](0))) {
            return $send(self.$active_queue(), 'select', [], ($$26 = function(a){var self = $$26.$$s == null ? this : $$26.$$s;

            
              
              if (a == null) {
                a = nil;
              };
              return self['$adjacent?'](range, a.$range());}, $$26.$$s = self, $$26.$$arity = 1, $$26))
          } else {
            return nil
          }
        }, $Rewriter_adjacent_updates$ques$25.$$arity = 1);
        
        Opal.def(self, '$replace_compatible_with_insertion?', $Rewriter_replace_compatible_with_insertion$ques$27 = function(replace, insertion) {
          var $a, $b, self = this, offset = nil;

          return ($truthy($a = ($truthy($b = $rb_ge($rb_minus(replace.$replacement().$length(), replace.$range().$size()), insertion.$range().$size())) ? (offset = $rb_minus(insertion.$range().$begin_pos(), replace.$range().$begin_pos())) : $b)) ? replace.$replacement()['$[]'](offset, insertion.$replacement().$length())['$=='](insertion.$replacement()) : $a)
        }, $Rewriter_replace_compatible_with_insertion$ques$27.$$arity = 2);
        
        Opal.def(self, '$can_merge?', $Rewriter_can_merge$ques$28 = function(action, existing) {
          var $$29, self = this, range = nil;

          
          range = action.$range();
          return $send(existing, 'all?', [], ($$29 = function(other){var self = $$29.$$s == null ? this : $$29.$$s, $a, overlap = nil, repl1_offset = nil, repl2_offset = nil, repl1_length = nil, repl2_length = nil, replacement1 = nil, replacement2 = nil;

          
            
            if (other == null) {
              other = nil;
            };
            overlap = range.$intersect(other.$range());
            if ($truthy(overlap['$nil?']())) {
              return true;};
            repl1_offset = $rb_minus(overlap.$begin_pos(), range.$begin_pos());
            repl2_offset = $rb_minus(overlap.$begin_pos(), other.$range().$begin_pos());
            repl1_length = [$rb_minus(other.$range().$length(), repl2_offset), $rb_minus(other.$replacement().$length(), repl2_offset)].$max();
            repl2_length = [$rb_minus(range.$length(), repl1_offset), $rb_minus(action.$replacement().$length(), repl1_offset)].$max();
            replacement1 = ($truthy($a = action.$replacement()['$[]'](repl1_offset, repl1_length)) ? $a : "".$freeze());
            replacement2 = ($truthy($a = other.$replacement()['$[]'](repl2_offset, repl2_length)) ? $a : "".$freeze());
            return replacement1['$=='](replacement2);}, $$29.$$s = self, $$29.$$arity = 1, $$29));
        }, $Rewriter_can_merge$ques$28.$$arity = 2);
        
        Opal.def(self, '$merge_actions', $Rewriter_merge_actions$30 = function $$merge_actions(action, existing) {
          var $$31, $$32, self = this, actions = nil, range = nil;

          
          actions = $send(existing.$push(action), 'sort_by', [], ($$31 = function(a){var self = $$31.$$s == null ? this : $$31.$$s;

          
            
            if (a == null) {
              a = nil;
            };
            return [a.$range().$begin_pos(), a.$range().$end_pos()];}, $$31.$$s = self, $$31.$$arity = 1, $$31));
          range = actions.$first().$range().$join($send(actions, 'max_by', [], ($$32 = function(a){var self = $$32.$$s == null ? this : $$32.$$s;

          
            
            if (a == null) {
              a = nil;
            };
            return a.$range().$end_pos();}, $$32.$$s = self, $$32.$$arity = 1, $$32)).$range());
          return $$$($$($nesting, 'Rewriter'), 'Action').$new(range, self.$merge_replacements(actions));
        }, $Rewriter_merge_actions$30.$$arity = 2);
        
        Opal.def(self, '$merge_actions!', $Rewriter_merge_actions$excl$33 = function(action, existing) {
          var self = this, new_action = nil;

          
          new_action = self.$merge_actions(action, existing);
          self.$active_queue().$delete(action);
          return self.$replace_actions(existing, new_action);
        }, $Rewriter_merge_actions$excl$33.$$arity = 2);
        
        Opal.def(self, '$merge_replacements', $Rewriter_merge_replacements$34 = function $$merge_replacements(actions) {
          var $$35, self = this, result = nil, prev_act = nil;

          
          result = "".$dup();
          prev_act = nil;
          $send(actions, 'each', [], ($$35 = function(act){var self = $$35.$$s == null ? this : $$35.$$s, $a, prev_end = nil, offset = nil;

          
            
            if (act == null) {
              act = nil;
            };
            if ($truthy(($truthy($a = prev_act['$!']()) ? $a : act.$range()['$disjoint?'](prev_act.$range())))) {
              result['$<<'](act.$replacement())
            } else {
              
              prev_end = [$rb_plus(prev_act.$range().$begin_pos(), prev_act.$replacement().$length()), prev_act.$range().$end_pos()].$max();
              offset = $rb_minus(prev_end, act.$range().$begin_pos());
              if ($truthy($rb_lt(offset, act.$replacement().$size()))) {
                result['$<<'](act.$replacement()['$[]'](Opal.Range.$new(offset, -1, false)))};
            };
            return (prev_act = act);}, $$35.$$s = self, $$35.$$arity = 1, $$35));
          return result;
        }, $Rewriter_merge_replacements$34.$$arity = 1);
        
        Opal.def(self, '$replace_actions', $Rewriter_replace_actions$36 = function $$replace_actions(old, updated) {
          var $$37, self = this;

          
          $send(old, 'each', [], ($$37 = function(act){var self = $$37.$$s == null ? this : $$37.$$s;

          
            
            if (act == null) {
              act = nil;
            };
            return self.$active_queue().$delete(act);}, $$37.$$s = self, $$37.$$arity = 1, $$37));
          return self.$active_queue()['$<<'](updated);
        }, $Rewriter_replace_actions$36.$$arity = 2);
        
        Opal.def(self, '$raise_clobber_error', $Rewriter_raise_clobber_error$38 = function $$raise_clobber_error(action, existing) {
          var self = this, diagnostic = nil;

          
          diagnostic = $$($nesting, 'Diagnostic').$new("error", "invalid_action", $hash2(["action"], {"action": action}), action.$range());
          self.diagnostics.$process(diagnostic);
          diagnostic = $$($nesting, 'Diagnostic').$new("note", "clobbered", $hash2(["action"], {"action": existing['$[]'](0)}), existing['$[]'](0).$range());
          self.diagnostics.$process(diagnostic);
          return self.$raise($$($nesting, 'ClobberingError'), "Parser::Source::Rewriter detected clobbering");
        }, $Rewriter_raise_clobber_error$38.$$arity = 2);
        
        Opal.def(self, '$in_transaction?', $Rewriter_in_transaction$ques$39 = function() {
          var self = this;

          return self.pending_queue['$nil?']()['$!']()
        }, $Rewriter_in_transaction$ques$39.$$arity = 0);
        
        Opal.def(self, '$active_queue', $Rewriter_active_queue$40 = function $$active_queue() {
          var $a, self = this;

          return ($truthy($a = self.pending_queue) ? $a : self.queue)
        }, $Rewriter_active_queue$40.$$arity = 0);
        
        Opal.def(self, '$active_clobber', $Rewriter_active_clobber$41 = function $$active_clobber() {
          var $a, self = this;

          return ($truthy($a = self.pending_clobber) ? $a : self.clobber)
        }, $Rewriter_active_clobber$41.$$arity = 0);
        
        Opal.def(self, '$active_insertions', $Rewriter_active_insertions$42 = function $$active_insertions() {
          var $a, self = this;

          return ($truthy($a = self.pending_insertions) ? $a : self.insertions)
        }, $Rewriter_active_insertions$42.$$arity = 0);
        
        Opal.def(self, '$active_clobber=', $Rewriter_active_clobber$eq$43 = function(value) {
          var self = this;

          if ($truthy(self.pending_clobber)) {
            return (self.pending_clobber = value)
          } else {
            return (self.clobber = value)
          }
        }, $Rewriter_active_clobber$eq$43.$$arity = 1);
        
        Opal.def(self, '$active_insertions=', $Rewriter_active_insertions$eq$44 = function(value) {
          var self = this;

          if ($truthy(self.pending_insertions)) {
            return (self.pending_insertions = value)
          } else {
            return (self.insertions = value)
          }
        }, $Rewriter_active_insertions$eq$44.$$arity = 1);
        
        Opal.def(self, '$adjacent?', $Rewriter_adjacent$ques$45 = function(range1, range2) {
          var $a, self = this;

          return ($truthy($a = $rb_le(range1.$begin_pos(), range2.$end_pos())) ? $rb_le(range2.$begin_pos(), range1.$end_pos()) : $a)
        }, $Rewriter_adjacent$ques$45.$$arity = 2);
        Opal.const_set($nesting[0], 'DEPRECATION_WARNING', ["Parser::Source::Rewriter is deprecated.", "Please update your code to use Parser::Source::TreeRewriter instead"].$join("\n").$freeze());
        return self.$extend($$($nesting, 'Deprecation'));
      })($nesting[0], null, $nesting)
    })($nesting[0], $nesting)
  })($nesting[0], $nesting)
};

/* Generated by Opal 1.0.0 */
Opal.modules["parser/source/rewriter/action"] = function(Opal) {
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.$$$, $$ = Opal.$$, $module = Opal.module, $klass = Opal.klass, $truthy = Opal.truthy;

  Opal.add_stubs(['$include', '$attr_reader', '$alias_method', '$freeze', '$<=>', '$begin_pos', '$range', '$zero?', '$order', '$==', '$length', '$empty?', '$inspect']);
  return (function($base, $parent_nesting) {
    var self = $module($base, 'Parser');

    var $nesting = [self].concat($parent_nesting);

    (function($base, $parent_nesting) {
      var self = $module($base, 'Source');

      var $nesting = [self].concat($parent_nesting);

      (function($base, $super, $parent_nesting) {
        var self = $klass($base, $super, 'Action');

        var $nesting = [self].concat($parent_nesting), $Action_initialize$1, $Action_$lt_eq_gt$2, $Action_to_s$3;

        self.$$prototype.range = self.$$prototype.replacement = nil;
        
        self.$include($$($nesting, 'Comparable'));
        self.$attr_reader("range", "replacement", "allow_multiple_insertions", "order");
        self.$alias_method("allow_multiple_insertions?", "allow_multiple_insertions");
        
        Opal.def(self, '$initialize', $Action_initialize$1 = function $$initialize(range, replacement, allow_multiple_insertions, order) {
          var self = this;

          
          
          if (replacement == null) {
            replacement = "";
          };
          
          if (allow_multiple_insertions == null) {
            allow_multiple_insertions = false;
          };
          
          if (order == null) {
            order = 0;
          };
          self.range = range;
          self.replacement = replacement;
          self.allow_multiple_insertions = allow_multiple_insertions;
          self.order = order;
          return self.$freeze();
        }, $Action_initialize$1.$$arity = -2);
        
        Opal.def(self, '$<=>', $Action_$lt_eq_gt$2 = function(other) {
          var self = this, result = nil;

          
          result = self.$range().$begin_pos()['$<=>'](other.$range().$begin_pos());
          if ($truthy(result['$zero?']())) {
          } else {
            return result
          };
          return self.$order()['$<=>'](other.$order());
        }, $Action_$lt_eq_gt$2.$$arity = 1);
        return (Opal.def(self, '$to_s', $Action_to_s$3 = function $$to_s() {
          var $a, self = this;

          if ($truthy((($a = self.range.$length()['$=='](0)) ? self.replacement['$empty?']() : self.range.$length()['$=='](0)))) {
            return "do nothing"
          } else if (self.range.$length()['$=='](0)) {
            return "" + "insert " + (self.replacement.$inspect())
          } else if ($truthy(self.replacement['$empty?']())) {
            return "" + "remove " + (self.range.$length()) + " character(s)"
          } else {
            return "" + "replace " + (self.range.$length()) + " character(s) with " + (self.replacement.$inspect())
          }
        }, $Action_to_s$3.$$arity = 0), nil) && 'to_s';
      })($$($nesting, 'Rewriter'), null, $nesting)
    })($nesting[0], $nesting)
  })($nesting[0], $nesting)
};

/* Generated by Opal 1.0.0 */
Opal.modules["parser/source/tree_rewriter"] = function(Opal) {
  function $rb_minus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs - rhs : lhs['$-'](rhs);
  }
  function $rb_plus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs + rhs : lhs['$+'](rhs);
  }
  function $rb_lt(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs < rhs : lhs['$<'](rhs);
  }
  function $rb_gt(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs > rhs : lhs['$>'](rhs);
  }
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.$$$, $$ = Opal.$$, $module = Opal.module, $klass = Opal.klass, $hash2 = Opal.hash2, $lambda = Opal.lambda, $gvars = Opal.gvars, $send = Opal.send, $truthy = Opal.truthy, $hash = Opal.hash, $slice = Opal.slice;

  Opal.add_stubs(['$attr_reader', '$new', '$puts', '$render', '$consumer=', '$-', '$freeze', '$check_policy_validity', '$method', '$adjust', '$source_range', '$empty?', '$==', '$source_buffer', '$raise', '$combine', '$action_root', '$merge!', '$dup', '$contract', '$+', '$begin_pos', '$range', '$end_pos', '$check_range_validity', '$moved', '$to_s', '$replace', '$wrap', '$source', '$each', '$ordered_replacements', '$<<', '$[]', '$length', '$join', '$nested_actions', '$class', '$warn_of_deprecation', '$insert_before', '$insert_after', '$extend', '$protected', '$private', '$values', '$<', '$>', '$size', '$to_range', '$trigger_policy', '$process']);
  return (function($base, $parent_nesting) {
    var self = $module($base, 'Parser');

    var $nesting = [self].concat($parent_nesting);

    (function($base, $parent_nesting) {
      var self = $module($base, 'Source');

      var $nesting = [self].concat($parent_nesting);

      (function($base, $super, $parent_nesting) {
        var self = $klass($base, $super, 'TreeRewriter');

        var $nesting = [self].concat($parent_nesting), $TreeRewriter_initialize$1, $TreeRewriter_empty$ques$3, $TreeRewriter_merge$excl$4, $TreeRewriter_merge$5, $TreeRewriter_import$excl$6, $TreeRewriter_replace$7, $TreeRewriter_wrap$8, $TreeRewriter_remove$9, $TreeRewriter_insert_before$10, $TreeRewriter_insert_after$11, $TreeRewriter_process$12, $TreeRewriter_as_replacements$14, $TreeRewriter_as_nested_actions$15, $TreeRewriter_transaction$16, $TreeRewriter_in_transaction$ques$17, $TreeRewriter_insert_before_multi$18, $TreeRewriter_insert_after_multi$19, $TreeRewriter_check_policy_validity$20, $TreeRewriter_combine$21, $TreeRewriter_check_range_validity$22, $TreeRewriter_enforce_policy$23, $TreeRewriter_trigger_policy$24;

        self.$$prototype.diagnostics = self.$$prototype.source_buffer = self.$$prototype.enforcer = self.$$prototype.action_root = self.$$prototype.in_transaction = self.$$prototype.policy = nil;
        
        self.$attr_reader("source_buffer");
        self.$attr_reader("diagnostics");
        
        Opal.def(self, '$initialize', $TreeRewriter_initialize$1 = function $$initialize(source_buffer, $kwargs) {
          var crossing_deletions, different_replacements, swallowed_insertions, $$2, self = this, $writer = nil, all_encompassing_range = nil;

          
          
          if ($kwargs == null) {
            $kwargs = $hash2([], {});
          } else if (!$kwargs.$$is_hash) {
            throw Opal.ArgumentError.$new('expected kwargs');
          };
          
          crossing_deletions = $kwargs.$$smap["crossing_deletions"];
          if (crossing_deletions == null) {
            crossing_deletions = "accept"
          };
          
          different_replacements = $kwargs.$$smap["different_replacements"];
          if (different_replacements == null) {
            different_replacements = "accept"
          };
          
          swallowed_insertions = $kwargs.$$smap["swallowed_insertions"];
          if (swallowed_insertions == null) {
            swallowed_insertions = "accept"
          };
          self.diagnostics = $$$($$($nesting, 'Diagnostic'), 'Engine').$new();
          
          $writer = [$lambda(($$2 = function(diag){var self = $$2.$$s == null ? this : $$2.$$s;
            if ($gvars.stderr == null) $gvars.stderr = nil;

          
            
            if (diag == null) {
              diag = nil;
            };
            return $gvars.stderr.$puts(diag.$render());}, $$2.$$s = self, $$2.$$arity = 1, $$2))];
          $send(self.diagnostics, 'consumer=', Opal.to_a($writer));
          $writer[$rb_minus($writer["length"], 1)];;
          self.source_buffer = source_buffer;
          self.in_transaction = false;
          self.policy = $hash2(["crossing_deletions", "different_replacements", "swallowed_insertions"], {"crossing_deletions": crossing_deletions, "different_replacements": different_replacements, "swallowed_insertions": swallowed_insertions}).$freeze();
          self.$check_policy_validity();
          self.enforcer = self.$method("enforce_policy");
          all_encompassing_range = self.source_buffer.$source_range().$adjust($hash2(["begin_pos", "end_pos"], {"begin_pos": -1, "end_pos": 1}));
          return (self.action_root = $$$($$($nesting, 'TreeRewriter'), 'Action').$new(all_encompassing_range, self.enforcer));
        }, $TreeRewriter_initialize$1.$$arity = -2);
        
        Opal.def(self, '$empty?', $TreeRewriter_empty$ques$3 = function() {
          var self = this;

          return self.action_root['$empty?']()
        }, $TreeRewriter_empty$ques$3.$$arity = 0);
        
        Opal.def(self, '$merge!', $TreeRewriter_merge$excl$4 = function(with$) {
          var self = this;

          
          if (self.$source_buffer()['$=='](with$.$source_buffer())) {
          } else {
            self.$raise("TreeRewriter are not for the same source_buffer")
          };
          self.action_root = self.action_root.$combine(with$.$action_root());
          return self;
        }, $TreeRewriter_merge$excl$4.$$arity = 1);
        
        Opal.def(self, '$merge', $TreeRewriter_merge$5 = function $$merge(with$) {
          var self = this;

          return self.$dup()['$merge!'](with$)
        }, $TreeRewriter_merge$5.$$arity = 1);
        
        Opal.def(self, '$import!', $TreeRewriter_import$excl$6 = function(foreign_rewriter, $kwargs) {
          var offset, self = this, contracted = nil, merge_effective_range = nil, merge_with = nil;

          
          
          if ($kwargs == null) {
            $kwargs = $hash2([], {});
          } else if (!$kwargs.$$is_hash) {
            throw Opal.ArgumentError.$new('expected kwargs');
          };
          
          offset = $kwargs.$$smap["offset"];
          if (offset == null) {
            offset = 0
          };
          if ($truthy(foreign_rewriter['$empty?']())) {
            return self};
          contracted = foreign_rewriter.$action_root().$contract();
          merge_effective_range = $$$($$$($$$('::', 'Parser'), 'Source'), 'Range').$new(self.source_buffer, $rb_plus(contracted.$range().$begin_pos(), offset), $rb_plus(contracted.$range().$end_pos(), offset));
          self.$check_range_validity(merge_effective_range);
          merge_with = contracted.$moved(self.source_buffer, offset);
          self.action_root = self.action_root.$combine(merge_with);
          return self;
        }, $TreeRewriter_import$excl$6.$$arity = -2);
        
        Opal.def(self, '$replace', $TreeRewriter_replace$7 = function $$replace(range, content) {
          var self = this;

          return self.$combine(range, $hash2(["replacement"], {"replacement": content}))
        }, $TreeRewriter_replace$7.$$arity = 2);
        
        Opal.def(self, '$wrap', $TreeRewriter_wrap$8 = function $$wrap(range, insert_before, insert_after) {
          var self = this;

          return self.$combine(range, $hash2(["insert_before", "insert_after"], {"insert_before": insert_before.$to_s(), "insert_after": insert_after.$to_s()}))
        }, $TreeRewriter_wrap$8.$$arity = 3);
        
        Opal.def(self, '$remove', $TreeRewriter_remove$9 = function $$remove(range) {
          var self = this;

          return self.$replace(range, "".$freeze())
        }, $TreeRewriter_remove$9.$$arity = 1);
        
        Opal.def(self, '$insert_before', $TreeRewriter_insert_before$10 = function $$insert_before(range, content) {
          var self = this;

          return self.$wrap(range, content, nil)
        }, $TreeRewriter_insert_before$10.$$arity = 2);
        
        Opal.def(self, '$insert_after', $TreeRewriter_insert_after$11 = function $$insert_after(range, content) {
          var self = this;

          return self.$wrap(range, nil, content)
        }, $TreeRewriter_insert_after$11.$$arity = 2);
        
        Opal.def(self, '$process', $TreeRewriter_process$12 = function $$process() {
          var $$13, self = this, source = nil, chunks = nil, last_end = nil;

          
          source = self.source_buffer.$source();
          chunks = [];
          last_end = 0;
          $send(self.action_root.$ordered_replacements(), 'each', [], ($$13 = function(range, replacement){var self = $$13.$$s == null ? this : $$13.$$s;

          
            
            if (range == null) {
              range = nil;
            };
            
            if (replacement == null) {
              replacement = nil;
            };
            chunks['$<<'](source['$[]'](Opal.Range.$new(last_end,range.$begin_pos(), true)))['$<<'](replacement);
            return (last_end = range.$end_pos());}, $$13.$$s = self, $$13.$$arity = 2, $$13));
          chunks['$<<'](source['$[]'](Opal.Range.$new(last_end,source.$length(), true)));
          return chunks.$join();
        }, $TreeRewriter_process$12.$$arity = 0);
        
        Opal.def(self, '$as_replacements', $TreeRewriter_as_replacements$14 = function $$as_replacements() {
          var self = this;

          return self.action_root.$ordered_replacements()
        }, $TreeRewriter_as_replacements$14.$$arity = 0);
        
        Opal.def(self, '$as_nested_actions', $TreeRewriter_as_nested_actions$15 = function $$as_nested_actions() {
          var self = this;

          return self.action_root.$nested_actions()
        }, $TreeRewriter_as_nested_actions$15.$$arity = 0);
        
        Opal.def(self, '$transaction', $TreeRewriter_transaction$16 = function $$transaction() {
          var $iter = $TreeRewriter_transaction$16.$$p, $yield = $iter || nil, self = this, previous = nil, restore_root = nil;

          if ($iter) $TreeRewriter_transaction$16.$$p = null;
          return (function() { try {
          
          if (($yield !== nil)) {
          } else {
            self.$raise("" + (self.$class()) + "#" + ("transaction") + " requires block")
          };
          previous = self.in_transaction;
          self.in_transaction = true;
          restore_root = self.action_root;
          Opal.yieldX($yield, []);
          restore_root = nil;
          return self;
          } finally {
            ((function() {if ($truthy(restore_root)) {
              return (self.action_root = restore_root)
            } else {
              return nil
            }; return nil; })(), (self.in_transaction = previous))
          }; })()
        }, $TreeRewriter_transaction$16.$$arity = 0);
        
        Opal.def(self, '$in_transaction?', $TreeRewriter_in_transaction$ques$17 = function() {
          var self = this;

          return self.in_transaction
        }, $TreeRewriter_in_transaction$ques$17.$$arity = 0);
        
        Opal.def(self, '$insert_before_multi', $TreeRewriter_insert_before_multi$18 = function $$insert_before_multi(range, text) {
          var self = this;

          
          self.$class().$warn_of_deprecation();
          return self.$insert_before(range, text);
        }, $TreeRewriter_insert_before_multi$18.$$arity = 2);
        
        Opal.def(self, '$insert_after_multi', $TreeRewriter_insert_after_multi$19 = function $$insert_after_multi(range, text) {
          var self = this;

          
          self.$class().$warn_of_deprecation();
          return self.$insert_after(range, text);
        }, $TreeRewriter_insert_after_multi$19.$$arity = 2);
        Opal.const_set($nesting[0], 'DEPRECATION_WARNING', ["TreeRewriter#insert_before_multi and insert_before_multi exist only for legacy compatibility.", "Please update your code to use `wrap`, `insert_before` or `insert_after` instead."].$join("\n").$freeze());
        self.$extend($$($nesting, 'Deprecation'));
        self.$protected();
        self.$attr_reader("action_root");
        self.$private();
        Opal.const_set($nesting[0], 'ACTIONS', ["accept", "warn", "raise"].$freeze());
        
        Opal.def(self, '$check_policy_validity', $TreeRewriter_check_policy_validity$20 = function $$check_policy_validity() {
          var self = this, invalid = nil;

          
          invalid = $rb_minus(self.policy.$values(), $$($nesting, 'ACTIONS'));
          if ($truthy(invalid['$empty?']())) {
            return nil
          } else {
            return self.$raise($$($nesting, 'ArgumentError'), "" + "Invalid policy: " + (invalid.$join(", ")))
          };
        }, $TreeRewriter_check_policy_validity$20.$$arity = 0);
        
        Opal.def(self, '$combine', $TreeRewriter_combine$21 = function $$combine(range, attributes) {
          var self = this, action = nil;

          
          range = self.$check_range_validity(range);
          action = $$$($$($nesting, 'TreeRewriter'), 'Action').$new(range, self.enforcer, Opal.to_hash(attributes));
          self.action_root = self.action_root.$combine(action);
          return self;
        }, $TreeRewriter_combine$21.$$arity = 2);
        
        Opal.def(self, '$check_range_validity', $TreeRewriter_check_range_validity$22 = function $$check_range_validity(range) {
          var $a, self = this;

          
          if ($truthy(($truthy($a = $rb_lt(range.$begin_pos(), 0)) ? $a : $rb_gt(range.$end_pos(), self.source_buffer.$source().$size())))) {
            self.$raise($$($nesting, 'IndexError'), "" + "The range " + (range.$to_range()) + " is outside the bounds of the source")};
          return range;
        }, $TreeRewriter_check_range_validity$22.$$arity = 1);
        
        Opal.def(self, '$enforce_policy', $TreeRewriter_enforce_policy$23 = function $$enforce_policy(event) {
          var $iter = $TreeRewriter_enforce_policy$23.$$p, $yield = $iter || nil, self = this, values = nil;

          if ($iter) $TreeRewriter_enforce_policy$23.$$p = null;
          
          if (self.policy['$[]'](event)['$==']("accept")) {
            return nil};
          if ($truthy((values = Opal.yieldX($yield, [])))) {
          } else {
            return nil
          };
          return self.$trigger_policy(event, Opal.to_hash(values));
        }, $TreeRewriter_enforce_policy$23.$$arity = 1);
        Opal.const_set($nesting[0], 'POLICY_TO_LEVEL', $hash2(["warn", "raise"], {"warn": "warning", "raise": "error"}).$freeze());
        return (Opal.def(self, '$trigger_policy', $TreeRewriter_trigger_policy$24 = function $$trigger_policy(event, $kwargs) {
          var range, conflict, arguments$, $a, $b, self = this, action = nil, diag = nil, highlights = nil;

          
          
          if ($kwargs == null) {
            $kwargs = $hash2([], {});
          } else if (!$kwargs.$$is_hash) {
            throw Opal.ArgumentError.$new('expected kwargs');
          };
          
          range = $kwargs.$$smap["range"];
          if (range == null) {
            range = self.$raise()
          };
          
          conflict = $kwargs.$$smap["conflict"];
          if (conflict == null) {
            conflict = nil
          };
          
          arguments$ = Opal.kwrestargs($kwargs, {'range': true,'conflict': true});;
          action = ($truthy($a = self.policy['$[]'](event)) ? $a : "raise");
          diag = $$$($$($nesting, 'Parser'), 'Diagnostic').$new($$($nesting, 'POLICY_TO_LEVEL')['$[]'](action), event, arguments$, range);
          self.diagnostics.$process(diag);
          if ($truthy(conflict)) {
            
            $b = conflict, $a = Opal.to_ary($b), (range = ($a[0] == null ? nil : $a[0])), (highlights = $slice.call($a, 1)), $b;
            diag = $$$($$($nesting, 'Parser'), 'Diagnostic').$new($$($nesting, 'POLICY_TO_LEVEL')['$[]'](action), "" + (event) + "_conflict", arguments$, range, highlights);
            self.diagnostics.$process(diag);};
          if (action['$==']("raise")) {
            return self.$raise($$$($$($nesting, 'Parser'), 'ClobberingError'), "Parser::Source::TreeRewriter detected clobbering")
          } else {
            return nil
          };
        }, $TreeRewriter_trigger_policy$24.$$arity = -2), nil) && 'trigger_policy';
      })($nesting[0], null, $nesting)
    })($nesting[0], $nesting)
  })($nesting[0], $nesting)
};

/* Generated by Opal 1.0.0 */
Opal.modules["parser/source/tree_rewriter/action"] = function(Opal) {
  function $rb_plus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs + rhs : lhs['$+'](rhs);
  }
  function $rb_gt(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs > rhs : lhs['$>'](rhs);
  }
  function $rb_minus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs - rhs : lhs['$-'](rhs);
  }
  function $rb_ge(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs >= rhs : lhs['$>='](rhs);
  }
  function $rb_le(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs <= rhs : lhs['$<='](rhs);
  }
  function $rb_lt(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs < rhs : lhs['$<'](rhs);
  }
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.$$$, $$ = Opal.$$, $module = Opal.module, $klass = Opal.klass, $hash2 = Opal.hash2, $truthy = Opal.truthy, $send = Opal.send;

  Opal.add_stubs(['$attr_reader', '$freeze', '$empty?', '$do_combine', '$==', '$<<', '$begin', '$concat', '$flat_map', '$to_proc', '$end', '$!', '$insert_before', '$insert_after', '$replacement', '$raise', '$insertion?', '$with', '$begin_pos', '$range', '$first', '$children', '$end_pos', '$last', '$new', '$+', '$map', '$moved', '$protected', '$swallow', '$class', '$merge', '$place_in_hierarchy', '$analyse_hierarchy', '$[]', '$fuse_deletions', '$combine_children', '$inject', '$size', '$bsearch', '$bsearch_child_index', '$>', '$-', '$>=', '$===', '$<=>', '$<=', '$check_fusible', '$<', '$shift', '$pop', '$compact!', '$each', '$call', '$call_enforcer_for_merge', '$!=', '$select']);
  return (function($base, $parent_nesting) {
    var self = $module($base, 'Parser');

    var $nesting = [self].concat($parent_nesting);

    (function($base, $parent_nesting) {
      var self = $module($base, 'Source');

      var $nesting = [self].concat($parent_nesting);

      (function($base, $super, $parent_nesting) {
        var self = $klass($base, $super, 'Action');

        var $nesting = [self].concat($parent_nesting), $Action_initialize$1, $Action_combine$2, $Action_empty$ques$3, $Action_ordered_replacements$4, $Action_nested_actions$5, $Action_insertion$ques$6, $Action_contract$7, $Action_moved$8, $Action_with$10, $Action_do_combine$11, $Action_place_in_hierarchy$12, $Action_combine_children$13, $Action_fuse_deletions$15, $Action_bsearch_child_index$16, $Action_analyse_hierarchy$18, $Action_check_fusible$21, $Action_merge$24, $Action_call_enforcer_for_merge$25, $Action_swallow$27;

        self.$$prototype.insert_before = self.$$prototype.insert_after = self.$$prototype.children = self.$$prototype.replacement = self.$$prototype.range = self.$$prototype.enforcer = nil;
        
        self.$attr_reader("range", "replacement", "insert_before", "insert_after");
        
        Opal.def(self, '$initialize', $Action_initialize$1 = function $$initialize(range, enforcer, $kwargs) {
          var insert_before, replacement, insert_after, children, $a, self = this;

          
          
          if ($kwargs == null) {
            $kwargs = $hash2([], {});
          } else if (!$kwargs.$$is_hash) {
            throw Opal.ArgumentError.$new('expected kwargs');
          };
          
          insert_before = $kwargs.$$smap["insert_before"];
          if (insert_before == null) {
            insert_before = ""
          };
          
          replacement = $kwargs.$$smap["replacement"];
          if (replacement == null) {
            replacement = nil
          };
          
          insert_after = $kwargs.$$smap["insert_after"];
          if (insert_after == null) {
            insert_after = ""
          };
          
          children = $kwargs.$$smap["children"];
          if (children == null) {
            children = []
          };
          $a = [range, enforcer, children.$freeze(), insert_before.$freeze(), replacement, insert_after.$freeze()], (self.range = $a[0]), (self.enforcer = $a[1]), (self.children = $a[2]), (self.insert_before = $a[3]), (self.replacement = $a[4]), (self.insert_after = $a[5]), $a;
          return self.$freeze();
        }, $Action_initialize$1.$$arity = -3);
        
        Opal.def(self, '$combine', $Action_combine$2 = function $$combine(action) {
          var self = this;

          
          if ($truthy(action['$empty?']())) {
            return self};
          return self.$do_combine(action);
        }, $Action_combine$2.$$arity = 1);
        
        Opal.def(self, '$empty?', $Action_empty$ques$3 = function() {
          var $a, $b, $c, self = this;

          return ($truthy($a = ($truthy($b = ($truthy($c = self.insert_before['$empty?']()) ? self.insert_after['$empty?']() : $c)) ? self.children['$empty?']() : $b)) ? ($truthy($b = self.replacement['$=='](nil)) ? $b : ($truthy($c = self.replacement['$empty?']()) ? self.range['$empty?']() : $c)) : $a)
        }, $Action_empty$ques$3.$$arity = 0);
        
        Opal.def(self, '$ordered_replacements', $Action_ordered_replacements$4 = function $$ordered_replacements() {
          var self = this, reps = nil;

          
          reps = [];
          if ($truthy(self.insert_before['$empty?']())) {
          } else {
            reps['$<<']([self.range.$begin(), self.insert_before])
          };
          if ($truthy(self.replacement)) {
            reps['$<<']([self.range, self.replacement])};
          reps.$concat($send(self.children, 'flat_map', [], "ordered_replacements".$to_proc()));
          if ($truthy(self.insert_after['$empty?']())) {
          } else {
            reps['$<<']([self.range.$end(), self.insert_after])
          };
          return reps;
        }, $Action_ordered_replacements$4.$$arity = 0);
        
        Opal.def(self, '$nested_actions', $Action_nested_actions$5 = function $$nested_actions() {
          var $a, self = this, actions = nil;

          
          actions = [];
          if ($truthy(($truthy($a = self.insert_before['$empty?']()['$!']()) ? $a : self.insert_after['$empty?']()['$!']()))) {
            actions['$<<'](["wrap", self.range, self.insert_before, self.insert_after])};
          if ($truthy(self.replacement)) {
            actions['$<<'](["replace", self.range, self.replacement])};
          return actions.$concat($send(self.children, 'flat_map', [], "nested_actions".$to_proc()));
        }, $Action_nested_actions$5.$$arity = 0);
        
        Opal.def(self, '$insertion?', $Action_insertion$ques$6 = function() {
          var $a, $b, self = this;

          return ($truthy($a = ($truthy($b = self.$insert_before()['$empty?']()['$!']()) ? $b : self.$insert_after()['$empty?']()['$!']())) ? $a : ($truthy($b = self.$replacement()) ? self.$replacement()['$empty?']()['$!']() : $b))
        }, $Action_insertion$ques$6.$$arity = 0);
        
        Opal.def(self, '$contract', $Action_contract$7 = function $$contract() {
          var self = this, range = nil;

          
          if ($truthy(self['$empty?']())) {
            self.$raise("Empty actions can not be contracted")};
          if ($truthy(self['$insertion?']())) {
            return self};
          range = self.range.$with($hash2(["begin_pos", "end_pos"], {"begin_pos": self.$children().$first().$range().$begin_pos(), "end_pos": self.$children().$last().$range().$end_pos()}));
          return self.$with($hash2(["range"], {"range": range}));
        }, $Action_contract$7.$$arity = 0);
        
        Opal.def(self, '$moved', $Action_moved$8 = function $$moved(source_buffer, offset) {
          var $$9, self = this, moved_range = nil;

          
          moved_range = $$$($$$($$$('::', 'Parser'), 'Source'), 'Range').$new(source_buffer, $rb_plus(self.range.$begin_pos(), offset), $rb_plus(self.range.$end_pos(), offset));
          return self.$with($hash2(["range", "children"], {"range": moved_range, "children": $send(self.$children(), 'map', [], ($$9 = function(child){var self = $$9.$$s == null ? this : $$9.$$s;

          
            
            if (child == null) {
              child = nil;
            };
            return child.$moved(source_buffer, offset);}, $$9.$$s = self, $$9.$$arity = 1, $$9))}));
        }, $Action_moved$8.$$arity = 2);
        self.$protected();
        self.$attr_reader("children");
        
        Opal.def(self, '$with', $Action_with$10 = function($kwargs) {
          var range, enforcer, children, insert_before, replacement, insert_after, self = this;

          
          
          if ($kwargs == null) {
            $kwargs = $hash2([], {});
          } else if (!$kwargs.$$is_hash) {
            throw Opal.ArgumentError.$new('expected kwargs');
          };
          
          range = $kwargs.$$smap["range"];
          if (range == null) {
            range = self.range
          };
          
          enforcer = $kwargs.$$smap["enforcer"];
          if (enforcer == null) {
            enforcer = self.enforcer
          };
          
          children = $kwargs.$$smap["children"];
          if (children == null) {
            children = self.children
          };
          
          insert_before = $kwargs.$$smap["insert_before"];
          if (insert_before == null) {
            insert_before = self.insert_before
          };
          
          replacement = $kwargs.$$smap["replacement"];
          if (replacement == null) {
            replacement = self.replacement
          };
          
          insert_after = $kwargs.$$smap["insert_after"];
          if (insert_after == null) {
            insert_after = self.insert_after
          };
          if ($truthy(replacement)) {
            children = self.$swallow(children)};
          return self.$class().$new(range, enforcer, $hash2(["children", "insert_before", "replacement", "insert_after"], {"children": children, "insert_before": insert_before, "replacement": replacement, "insert_after": insert_after}));
        }, $Action_with$10.$$arity = -1);
        
        Opal.def(self, '$do_combine', $Action_do_combine$11 = function $$do_combine(action) {
          var self = this;

          if (action.$range()['$=='](self.range)) {
            return self.$merge(action)
          } else {
            return self.$place_in_hierarchy(action)
          }
        }, $Action_do_combine$11.$$arity = 1);
        
        Opal.def(self, '$place_in_hierarchy', $Action_place_in_hierarchy$12 = function $$place_in_hierarchy(action) {
          var self = this, family = nil, extra_sibbling = nil;

          
          family = self.$analyse_hierarchy(action);
          if ($truthy(family['$[]']("fusible"))) {
            return self.$fuse_deletions(action, family['$[]']("fusible"), [].concat(Opal.to_a(family['$[]']("sibbling_left"))).concat(Opal.to_a(family['$[]']("child"))).concat(Opal.to_a(family['$[]']("sibbling_right"))))
          } else {
            
            extra_sibbling = (function() {if ($truthy(family['$[]']("parent"))) {
              return family['$[]']("parent").$do_combine(action)
            } else if ($truthy(family['$[]']("child"))) {
              return action.$with($hash2(["children", "enforcer"], {"children": family['$[]']("child"), "enforcer": self.enforcer})).$combine_children(action.$children())
            } else {
              return action
            }; return nil; })();
            return self.$with($hash2(["children"], {"children": [].concat(Opal.to_a(family['$[]']("sibbling_left"))).concat([extra_sibbling]).concat(Opal.to_a(family['$[]']("sibbling_right")))}));
          };
        }, $Action_place_in_hierarchy$12.$$arity = 1);
        
        Opal.def(self, '$combine_children', $Action_combine_children$13 = function $$combine_children(more_children) {
          var $$14, self = this;

          return $send(more_children, 'inject', [self], ($$14 = function(parent, new_child){var self = $$14.$$s == null ? this : $$14.$$s;

          
            
            if (parent == null) {
              parent = nil;
            };
            
            if (new_child == null) {
              new_child = nil;
            };
            return parent.$place_in_hierarchy(new_child);}, $$14.$$s = self, $$14.$$arity = 2, $$14))
        }, $Action_combine_children$13.$$arity = 1);
        
        Opal.def(self, '$fuse_deletions', $Action_fuse_deletions$15 = function $$fuse_deletions(action, fusible, other_sibblings) {
          var self = this, without_fusible = nil, fused_range = nil, fused_deletion = nil;

          
          without_fusible = self.$with($hash2(["children"], {"children": other_sibblings}));
          fused_range = $send([action].concat(Opal.to_a(fusible)), 'map', [], "range".$to_proc()).$inject("join");
          fused_deletion = action.$with($hash2(["range"], {"range": fused_range}));
          return without_fusible.$do_combine(fused_deletion);
        }, $Action_fuse_deletions$15.$$arity = 3);
        
        Opal.def(self, '$bsearch_child_index', $Action_bsearch_child_index$16 = function $$bsearch_child_index(from) {
          var $a, $$17, $iter = $Action_bsearch_child_index$16.$$p, $yield = $iter || nil, self = this, size = nil;

          if ($iter) $Action_bsearch_child_index$16.$$p = null;
          
          
          if (from == null) {
            from = 0;
          };
          size = self.children.$size();
          return ($truthy($a = $send(Opal.Range.$new(from,size, true), 'bsearch', [], ($$17 = function(i){var self = $$17.$$s == null ? this : $$17.$$s;
            if (self.children == null) self.children = nil;

          
            
            if (i == null) {
              i = nil;
            };
            return Opal.yield1($yield, self.children['$[]'](i));;}, $$17.$$s = self, $$17.$$arity = 1, $$17))) ? $a : size);
        }, $Action_bsearch_child_index$16.$$arity = -1);
        
        Opal.def(self, '$analyse_hierarchy', $Action_analyse_hierarchy$18 = function $$analyse_hierarchy(action) {
          var $$19, $$20, $a, $b, self = this, r = nil, left_index = nil, start = nil, right_index = nil, center = nil, $case = nil, parent = nil, overlap_left = nil, overlap_right = nil, contained = nil, fusible = nil;

          
          r = action.$range();
          left_index = $send(self, 'bsearch_child_index', [], ($$19 = function(child){var self = $$19.$$s == null ? this : $$19.$$s;

          
            
            if (child == null) {
              child = nil;
            };
            return $rb_gt(child.$range().$end_pos(), r.$begin_pos());}, $$19.$$s = self, $$19.$$arity = 1, $$19));
          start = (function() {if (left_index['$=='](0)) {
            return 0
          } else {
            return $rb_minus(left_index, 1)
          }; return nil; })();
          right_index = $send(self, 'bsearch_child_index', [start], ($$20 = function(child){var self = $$20.$$s == null ? this : $$20.$$s;

          
            
            if (child == null) {
              child = nil;
            };
            return $rb_ge(child.$range().$begin_pos(), r.$end_pos());}, $$20.$$s = self, $$20.$$arity = 1, $$20));
          center = $rb_minus(right_index, left_index);
          $case = center;
          if ((0)['$===']($case)) {nil}
          else if ((-1)['$===']($case)) {
          left_index = $rb_minus(left_index, 1);
          right_index = $rb_plus(right_index, 1);
          parent = self.children['$[]'](left_index);}
          else {
          overlap_left = self.children['$[]'](left_index).$range().$begin_pos()['$<=>'](r.$begin_pos());
          overlap_right = self.children['$[]']($rb_minus(right_index, 1)).$range().$end_pos()['$<=>'](r.$end_pos());
          if ($truthy(($truthy($a = (($b = center['$=='](1)) ? $rb_le(overlap_left, 0) : center['$=='](1))) ? $rb_ge(overlap_right, 0) : $a))) {
            parent = self.children['$[]'](left_index)
          } else {
            
            contained = self.children['$[]'](Opal.Range.$new(left_index,right_index, true));
            fusible = self.$check_fusible(action, (function() {if ($truthy($rb_lt(overlap_left, 0))) {
              return contained.$shift()
            } else {
              return nil
            }; return nil; })(), (function() {if ($truthy($rb_gt(overlap_right, 0))) {
              return contained.$pop()
            } else {
              return nil
            }; return nil; })());
          };};
          return $hash2(["parent", "sibbling_left", "sibbling_right", "fusible", "child"], {"parent": parent, "sibbling_left": self.children['$[]'](Opal.Range.$new(0,left_index, true)), "sibbling_right": self.children['$[]'](Opal.Range.$new(right_index,self.children.$size(), true)), "fusible": fusible, "child": contained});
        }, $Action_analyse_hierarchy$18.$$arity = 1);
        
        Opal.def(self, '$check_fusible', $Action_check_fusible$21 = function $$check_fusible(action, $a) {
          var $post_args, fusible, $$22, self = this;

          
          
          $post_args = Opal.slice.call(arguments, 1, arguments.length);
          
          fusible = $post_args;;
          fusible['$compact!']();
          if ($truthy(fusible['$empty?']())) {
            return nil};
          $send(fusible, 'each', [], ($$22 = function(child){var self = $$22.$$s == null ? this : $$22.$$s, $b, $$23, kind = nil;
            if (self.enforcer == null) self.enforcer = nil;

          
            
            if (child == null) {
              child = nil;
            };
            kind = (function() {if ($truthy(($truthy($b = action['$insertion?']()) ? $b : child['$insertion?']()))) {
              return "crossing_insertions"
            } else {
              return "crossing_deletions"
            }; return nil; })();
            return $send(self.enforcer, 'call', [kind], ($$23 = function(){var self = $$23.$$s == null ? this : $$23.$$s;

            return $hash2(["range", "conflict"], {"range": action.$range(), "conflict": child.$range()})}, $$23.$$s = self, $$23.$$arity = 0, $$23));}, $$22.$$s = self, $$22.$$arity = 1, $$22));
          return fusible;
        }, $Action_check_fusible$21.$$arity = -2);
        
        Opal.def(self, '$merge', $Action_merge$24 = function $$merge(action) {
          var $a, self = this;

          
          self.$call_enforcer_for_merge(action);
          return self.$with($hash2(["insert_before", "replacement", "insert_after"], {"insert_before": "" + (action.$insert_before()) + (self.$insert_before()), "replacement": ($truthy($a = action.$replacement()) ? $a : self.replacement), "insert_after": "" + (self.$insert_after()) + (action.$insert_after())})).$combine_children(action.$children());
        }, $Action_merge$24.$$arity = 1);
        
        Opal.def(self, '$call_enforcer_for_merge', $Action_call_enforcer_for_merge$25 = function $$call_enforcer_for_merge(action) {
          var $$26, self = this;

          return $send(self.enforcer, 'call', ["different_replacements"], ($$26 = function(){var self = $$26.$$s == null ? this : $$26.$$s, $a, $b;
            if (self.replacement == null) self.replacement = nil;
            if (self.range == null) self.range = nil;

          if ($truthy(($truthy($a = ($truthy($b = self.replacement) ? action.$replacement() : $b)) ? self.replacement['$!='](action.$replacement()) : $a))) {
              return $hash2(["range", "replacement", "other_replacement"], {"range": self.range, "replacement": action.$replacement(), "other_replacement": self.replacement})
            } else {
              return nil
            }}, $$26.$$s = self, $$26.$$arity = 0, $$26))
        }, $Action_call_enforcer_for_merge$25.$$arity = 1);
        return (Opal.def(self, '$swallow', $Action_swallow$27 = function $$swallow(children) {
          var $$28, self = this;

          
          $send(self.enforcer, 'call', ["swallowed_insertions"], ($$28 = function(){var self = $$28.$$s == null ? this : $$28.$$s, insertions = nil;
            if (self.range == null) self.range = nil;

          
            insertions = $send(children, 'select', [], "insertion?".$to_proc());
            if ($truthy(insertions['$empty?']())) {
              return nil
            } else {
              return $hash2(["range", "conflict"], {"range": self.range, "conflict": $send(insertions, 'map', [], "range".$to_proc())})
            };}, $$28.$$s = self, $$28.$$arity = 0, $$28));
          return [];
        }, $Action_swallow$27.$$arity = 1), nil) && 'swallow';
      })($$($nesting, 'TreeRewriter'), null, $nesting)
    })($nesting[0], $nesting)
  })($nesting[0], $nesting)
};

/* Generated by Opal 1.0.0 */
Opal.modules["parser/source/map"] = function(Opal) {
  function $rb_minus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs - rhs : lhs['$-'](rhs);
  }
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.$$$, $$ = Opal.$$, $module = Opal.module, $klass = Opal.klass, $send2 = Opal.send2, $send = Opal.send, $hash2 = Opal.hash2, $range = Opal.range;

  Opal.add_stubs(['$attr_reader', '$freeze', '$line', '$alias_method', '$column', '$last_line', '$last_column', '$with', '$update_expression', '$==', '$class', '$reduce', '$map', '$instance_variables', '$instance_variable_get', '$send', '$inject', '$to_sym', '$[]', '$[]=', '$-', '$protected', '$tap', '$dup', '$to_proc']);
  return (function($base, $parent_nesting) {
    var self = $module($base, 'Parser');

    var $nesting = [self].concat($parent_nesting);

    (function($base, $parent_nesting) {
      var self = $module($base, 'Source');

      var $nesting = [self].concat($parent_nesting);

      (function($base, $super, $parent_nesting) {
        var self = $klass($base, $super, 'Map');

        var $nesting = [self].concat($parent_nesting), $Map_initialize$1, $Map_initialize_copy$2, $Map_node$eq$3, $Map_line$4, $Map_column$5, $Map_last_line$6, $Map_last_column$7, $Map_with_expression$8, $Map_$eq_eq$10, $Map_to_hash$12, $Map_with$14, $Map_update_expression$15;

        self.$$prototype.node = self.$$prototype.expression = nil;
        
        self.$attr_reader("node");
        self.$attr_reader("expression");
        
        Opal.def(self, '$initialize', $Map_initialize$1 = function $$initialize(expression) {
          var self = this;

          return (self.expression = expression)
        }, $Map_initialize$1.$$arity = 1);
        
        Opal.def(self, '$initialize_copy', $Map_initialize_copy$2 = function $$initialize_copy(other) {
          var $iter = $Map_initialize_copy$2.$$p, $yield = $iter || nil, self = this, $zuper = nil, $zuper_i = nil, $zuper_ii = nil;

          if ($iter) $Map_initialize_copy$2.$$p = null;
          // Prepare super implicit arguments
          for($zuper_i = 0, $zuper_ii = arguments.length, $zuper = new Array($zuper_ii); $zuper_i < $zuper_ii; $zuper_i++) {
            $zuper[$zuper_i] = arguments[$zuper_i];
          }
          
          $send2(self, Opal.find_super_dispatcher(self, 'initialize_copy', $Map_initialize_copy$2, false, true), 'initialize_copy', $zuper, $iter);
          return (self.node = nil);
        }, $Map_initialize_copy$2.$$arity = 1);
        
        Opal.def(self, '$node=', $Map_node$eq$3 = function(node) {
          var self = this;

          
          self.node = node;
          self.$freeze();
          return self.node;
        }, $Map_node$eq$3.$$arity = 1);
        
        Opal.def(self, '$line', $Map_line$4 = function $$line() {
          var self = this;

          return self.expression.$line()
        }, $Map_line$4.$$arity = 0);
        self.$alias_method("first_line", "line");
        
        Opal.def(self, '$column', $Map_column$5 = function $$column() {
          var self = this;

          return self.expression.$column()
        }, $Map_column$5.$$arity = 0);
        
        Opal.def(self, '$last_line', $Map_last_line$6 = function $$last_line() {
          var self = this;

          return self.expression.$last_line()
        }, $Map_last_line$6.$$arity = 0);
        
        Opal.def(self, '$last_column', $Map_last_column$7 = function $$last_column() {
          var self = this;

          return self.expression.$last_column()
        }, $Map_last_column$7.$$arity = 0);
        
        Opal.def(self, '$with_expression', $Map_with_expression$8 = function $$with_expression(expression_l) {
          var $$9, self = this;

          return $send(self, 'with', [], ($$9 = function(map){var self = $$9.$$s == null ? this : $$9.$$s;

          
            
            if (map == null) {
              map = nil;
            };
            return map.$update_expression(expression_l);}, $$9.$$s = self, $$9.$$arity = 1, $$9))
        }, $Map_with_expression$8.$$arity = 1);
        
        Opal.def(self, '$==', $Map_$eq_eq$10 = function(other) {
          var $a, $$11, self = this;

          return (($a = other.$class()['$=='](self.$class())) ? $send(self.$instance_variables(), 'map', [], ($$11 = function(ivar){var self = $$11.$$s == null ? this : $$11.$$s;

          
            
            if (ivar == null) {
              ivar = nil;
            };
            return self.$instance_variable_get(ivar)['$=='](other.$send("instance_variable_get", ivar));}, $$11.$$s = self, $$11.$$arity = 1, $$11)).$reduce("&") : other.$class()['$=='](self.$class()))
        }, $Map_$eq_eq$10.$$arity = 1);
        
        Opal.def(self, '$to_hash', $Map_to_hash$12 = function $$to_hash() {
          var $$13, self = this;

          return $send(self.$instance_variables(), 'inject', [$hash2([], {})], ($$13 = function(hash, ivar){var self = $$13.$$s == null ? this : $$13.$$s, $writer = nil;

          
            
            if (hash == null) {
              hash = nil;
            };
            
            if (ivar == null) {
              ivar = nil;
            };
            if (ivar.$to_sym()['$==']("@node")) {
              return hash;};
            
            $writer = [ivar['$[]']($range(1, -1, false)).$to_sym(), self.$instance_variable_get(ivar)];
            $send(hash, '[]=', Opal.to_a($writer));
            $writer[$rb_minus($writer["length"], 1)];;
            return hash;}, $$13.$$s = self, $$13.$$arity = 2, $$13))
        }, $Map_to_hash$12.$$arity = 0);
        self.$protected();
        
        Opal.def(self, '$with', $Map_with$14 = function() {
          var $iter = $Map_with$14.$$p, block = $iter || nil, self = this;

          if ($iter) $Map_with$14.$$p = null;
          
          
          if ($iter) $Map_with$14.$$p = null;;
          return $send(self.$dup(), 'tap', [], block.$to_proc());
        }, $Map_with$14.$$arity = 0);
        return (Opal.def(self, '$update_expression', $Map_update_expression$15 = function $$update_expression(expression_l) {
          var self = this;

          return (self.expression = expression_l)
        }, $Map_update_expression$15.$$arity = 1), nil) && 'update_expression';
      })($nesting[0], null, $nesting)
    })($nesting[0], $nesting)
  })($nesting[0], $nesting)
};

/* Generated by Opal 1.0.0 */
Opal.modules["parser/source/map/operator"] = function(Opal) {
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.$$$, $$ = Opal.$$, $module = Opal.module, $klass = Opal.klass, $send2 = Opal.send2;

  Opal.add_stubs(['$attr_reader']);
  return (function($base, $parent_nesting) {
    var self = $module($base, 'Parser');

    var $nesting = [self].concat($parent_nesting);

    (function($base, $parent_nesting) {
      var self = $module($base, 'Source');

      var $nesting = [self].concat($parent_nesting);

      (function($base, $super, $parent_nesting) {
        var self = $klass($base, $super, 'Operator');

        var $nesting = [self].concat($parent_nesting), $Operator_initialize$1;

        
        self.$attr_reader("operator");
        return (Opal.def(self, '$initialize', $Operator_initialize$1 = function $$initialize(operator, expression) {
          var $iter = $Operator_initialize$1.$$p, $yield = $iter || nil, self = this;

          if ($iter) $Operator_initialize$1.$$p = null;
          
          self.operator = operator;
          return $send2(self, Opal.find_super_dispatcher(self, 'initialize', $Operator_initialize$1, false, true), 'initialize', [expression], null);
        }, $Operator_initialize$1.$$arity = 2), nil) && 'initialize';
      })($$($nesting, 'Map'), $$($nesting, 'Map'), $nesting)
    })($nesting[0], $nesting)
  })($nesting[0], $nesting)
};

/* Generated by Opal 1.0.0 */
Opal.modules["parser/source/map/collection"] = function(Opal) {
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.$$$, $$ = Opal.$$, $module = Opal.module, $klass = Opal.klass, $send2 = Opal.send2;

  Opal.add_stubs(['$attr_reader']);
  return (function($base, $parent_nesting) {
    var self = $module($base, 'Parser');

    var $nesting = [self].concat($parent_nesting);

    (function($base, $parent_nesting) {
      var self = $module($base, 'Source');

      var $nesting = [self].concat($parent_nesting);

      (function($base, $super, $parent_nesting) {
        var self = $klass($base, $super, 'Collection');

        var $nesting = [self].concat($parent_nesting), $Collection_initialize$1;

        
        self.$attr_reader("begin");
        self.$attr_reader("end");
        return (Opal.def(self, '$initialize', $Collection_initialize$1 = function $$initialize(begin_l, end_l, expression_l) {
          var $a, $iter = $Collection_initialize$1.$$p, $yield = $iter || nil, self = this;

          if ($iter) $Collection_initialize$1.$$p = null;
          
          $a = [begin_l, end_l], (self.begin = $a[0]), (self.end = $a[1]), $a;
          return $send2(self, Opal.find_super_dispatcher(self, 'initialize', $Collection_initialize$1, false, true), 'initialize', [expression_l], null);
        }, $Collection_initialize$1.$$arity = 3), nil) && 'initialize';
      })($$($nesting, 'Map'), $$($nesting, 'Map'), $nesting)
    })($nesting[0], $nesting)
  })($nesting[0], $nesting)
};

/* Generated by Opal 1.0.0 */
Opal.modules["parser/source/map/constant"] = function(Opal) {
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.$$$, $$ = Opal.$$, $module = Opal.module, $klass = Opal.klass, $send2 = Opal.send2, $send = Opal.send;

  Opal.add_stubs(['$attr_reader', '$with', '$update_operator', '$protected']);
  return (function($base, $parent_nesting) {
    var self = $module($base, 'Parser');

    var $nesting = [self].concat($parent_nesting);

    (function($base, $parent_nesting) {
      var self = $module($base, 'Source');

      var $nesting = [self].concat($parent_nesting);

      (function($base, $super, $parent_nesting) {
        var self = $klass($base, $super, 'Constant');

        var $nesting = [self].concat($parent_nesting), $Constant_initialize$1, $Constant_with_operator$2, $Constant_update_operator$4;

        
        self.$attr_reader("double_colon");
        self.$attr_reader("name");
        self.$attr_reader("operator");
        
        Opal.def(self, '$initialize', $Constant_initialize$1 = function $$initialize(double_colon, name, expression) {
          var $a, $iter = $Constant_initialize$1.$$p, $yield = $iter || nil, self = this;

          if ($iter) $Constant_initialize$1.$$p = null;
          
          $a = [double_colon, name], (self.double_colon = $a[0]), (self.name = $a[1]), $a;
          return $send2(self, Opal.find_super_dispatcher(self, 'initialize', $Constant_initialize$1, false, true), 'initialize', [expression], null);
        }, $Constant_initialize$1.$$arity = 3);
        
        Opal.def(self, '$with_operator', $Constant_with_operator$2 = function $$with_operator(operator_l) {
          var $$3, self = this;

          return $send(self, 'with', [], ($$3 = function(map){var self = $$3.$$s == null ? this : $$3.$$s;

          
            
            if (map == null) {
              map = nil;
            };
            return map.$update_operator(operator_l);}, $$3.$$s = self, $$3.$$arity = 1, $$3))
        }, $Constant_with_operator$2.$$arity = 1);
        self.$protected();
        return (Opal.def(self, '$update_operator', $Constant_update_operator$4 = function $$update_operator(operator_l) {
          var self = this;

          return (self.operator = operator_l)
        }, $Constant_update_operator$4.$$arity = 1), nil) && 'update_operator';
      })($$($nesting, 'Map'), $$($nesting, 'Map'), $nesting)
    })($nesting[0], $nesting)
  })($nesting[0], $nesting)
};

/* Generated by Opal 1.0.0 */
Opal.modules["parser/source/map/variable"] = function(Opal) {
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.$$$, $$ = Opal.$$, $module = Opal.module, $klass = Opal.klass, $send2 = Opal.send2, $send = Opal.send;

  Opal.add_stubs(['$attr_reader', '$with', '$update_operator', '$protected']);
  return (function($base, $parent_nesting) {
    var self = $module($base, 'Parser');

    var $nesting = [self].concat($parent_nesting);

    (function($base, $parent_nesting) {
      var self = $module($base, 'Source');

      var $nesting = [self].concat($parent_nesting);

      (function($base, $super, $parent_nesting) {
        var self = $klass($base, $super, 'Variable');

        var $nesting = [self].concat($parent_nesting), $Variable_initialize$1, $Variable_with_operator$2, $Variable_update_operator$4;

        
        self.$attr_reader("name");
        self.$attr_reader("operator");
        
        Opal.def(self, '$initialize', $Variable_initialize$1 = function $$initialize(name_l, expression_l) {
          var $iter = $Variable_initialize$1.$$p, $yield = $iter || nil, self = this;

          if ($iter) $Variable_initialize$1.$$p = null;
          
          
          if (expression_l == null) {
            expression_l = name_l;
          };
          self.name = name_l;
          return $send2(self, Opal.find_super_dispatcher(self, 'initialize', $Variable_initialize$1, false, true), 'initialize', [expression_l], null);
        }, $Variable_initialize$1.$$arity = -2);
        
        Opal.def(self, '$with_operator', $Variable_with_operator$2 = function $$with_operator(operator_l) {
          var $$3, self = this;

          return $send(self, 'with', [], ($$3 = function(map){var self = $$3.$$s == null ? this : $$3.$$s;

          
            
            if (map == null) {
              map = nil;
            };
            return map.$update_operator(operator_l);}, $$3.$$s = self, $$3.$$arity = 1, $$3))
        }, $Variable_with_operator$2.$$arity = 1);
        self.$protected();
        return (Opal.def(self, '$update_operator', $Variable_update_operator$4 = function $$update_operator(operator_l) {
          var self = this;

          return (self.operator = operator_l)
        }, $Variable_update_operator$4.$$arity = 1), nil) && 'update_operator';
      })($$($nesting, 'Map'), $$($nesting, 'Map'), $nesting)
    })($nesting[0], $nesting)
  })($nesting[0], $nesting)
};

/* Generated by Opal 1.0.0 */
Opal.modules["parser/source/map/keyword"] = function(Opal) {
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.$$$, $$ = Opal.$$, $module = Opal.module, $klass = Opal.klass, $send2 = Opal.send2;

  Opal.add_stubs(['$attr_reader']);
  return (function($base, $parent_nesting) {
    var self = $module($base, 'Parser');

    var $nesting = [self].concat($parent_nesting);

    (function($base, $parent_nesting) {
      var self = $module($base, 'Source');

      var $nesting = [self].concat($parent_nesting);

      (function($base, $super, $parent_nesting) {
        var self = $klass($base, $super, 'Keyword');

        var $nesting = [self].concat($parent_nesting), $Keyword_initialize$1;

        
        self.$attr_reader("keyword");
        self.$attr_reader("begin");
        self.$attr_reader("end");
        return (Opal.def(self, '$initialize', $Keyword_initialize$1 = function $$initialize(keyword_l, begin_l, end_l, expression_l) {
          var $a, $iter = $Keyword_initialize$1.$$p, $yield = $iter || nil, self = this;

          if ($iter) $Keyword_initialize$1.$$p = null;
          
          self.keyword = keyword_l;
          $a = [begin_l, end_l], (self.begin = $a[0]), (self.end = $a[1]), $a;
          return $send2(self, Opal.find_super_dispatcher(self, 'initialize', $Keyword_initialize$1, false, true), 'initialize', [expression_l], null);
        }, $Keyword_initialize$1.$$arity = 4), nil) && 'initialize';
      })($$($nesting, 'Map'), $$($nesting, 'Map'), $nesting)
    })($nesting[0], $nesting)
  })($nesting[0], $nesting)
};

/* Generated by Opal 1.0.0 */
Opal.modules["parser/source/map/definition"] = function(Opal) {
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.$$$, $$ = Opal.$$, $module = Opal.module, $klass = Opal.klass, $send2 = Opal.send2;

  Opal.add_stubs(['$attr_reader', '$join']);
  return (function($base, $parent_nesting) {
    var self = $module($base, 'Parser');

    var $nesting = [self].concat($parent_nesting);

    (function($base, $parent_nesting) {
      var self = $module($base, 'Source');

      var $nesting = [self].concat($parent_nesting);

      (function($base, $super, $parent_nesting) {
        var self = $klass($base, $super, 'Definition');

        var $nesting = [self].concat($parent_nesting), $Definition_initialize$1;

        self.$$prototype.keyword = self.$$prototype.end = nil;
        
        self.$attr_reader("keyword");
        self.$attr_reader("operator");
        self.$attr_reader("name");
        self.$attr_reader("end");
        return (Opal.def(self, '$initialize', $Definition_initialize$1 = function $$initialize(keyword_l, operator_l, name_l, end_l) {
          var $iter = $Definition_initialize$1.$$p, $yield = $iter || nil, self = this;

          if ($iter) $Definition_initialize$1.$$p = null;
          
          self.keyword = keyword_l;
          self.operator = operator_l;
          self.name = name_l;
          self.end = end_l;
          return $send2(self, Opal.find_super_dispatcher(self, 'initialize', $Definition_initialize$1, false, true), 'initialize', [self.keyword.$join(self.end)], null);
        }, $Definition_initialize$1.$$arity = 4), nil) && 'initialize';
      })($$($nesting, 'Map'), $$($nesting, 'Map'), $nesting)
    })($nesting[0], $nesting)
  })($nesting[0], $nesting)
};

/* Generated by Opal 1.0.0 */
Opal.modules["parser/source/map/endless_definition"] = function(Opal) {
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.$$$, $$ = Opal.$$, $module = Opal.module, $klass = Opal.klass, $send2 = Opal.send2;

  Opal.add_stubs(['$attr_reader', '$join']);
  return (function($base, $parent_nesting) {
    var self = $module($base, 'Parser');

    var $nesting = [self].concat($parent_nesting);

    (function($base, $parent_nesting) {
      var self = $module($base, 'Source');

      var $nesting = [self].concat($parent_nesting);

      (function($base, $super, $parent_nesting) {
        var self = $klass($base, $super, 'EndlessDefinition');

        var $nesting = [self].concat($parent_nesting), $EndlessDefinition_initialize$1;

        self.$$prototype.keyword = nil;
        
        self.$attr_reader("keyword");
        self.$attr_reader("operator");
        self.$attr_reader("name");
        self.$attr_reader("assignment");
        return (Opal.def(self, '$initialize', $EndlessDefinition_initialize$1 = function $$initialize(keyword_l, operator_l, name_l, assignment_l, body_l) {
          var $iter = $EndlessDefinition_initialize$1.$$p, $yield = $iter || nil, self = this;

          if ($iter) $EndlessDefinition_initialize$1.$$p = null;
          
          self.keyword = keyword_l;
          self.operator = operator_l;
          self.name = name_l;
          self.assignment = assignment_l;
          return $send2(self, Opal.find_super_dispatcher(self, 'initialize', $EndlessDefinition_initialize$1, false, true), 'initialize', [self.keyword.$join(body_l)], null);
        }, $EndlessDefinition_initialize$1.$$arity = 5), nil) && 'initialize';
      })($$($nesting, 'Map'), $$($nesting, 'Map'), $nesting)
    })($nesting[0], $nesting)
  })($nesting[0], $nesting)
};

/* Generated by Opal 1.0.0 */
Opal.modules["parser/source/map/send"] = function(Opal) {
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.$$$, $$ = Opal.$$, $module = Opal.module, $klass = Opal.klass, $send2 = Opal.send2, $send = Opal.send;

  Opal.add_stubs(['$attr_reader', '$with', '$update_operator', '$protected']);
  return (function($base, $parent_nesting) {
    var self = $module($base, 'Parser');

    var $nesting = [self].concat($parent_nesting);

    (function($base, $parent_nesting) {
      var self = $module($base, 'Source');

      var $nesting = [self].concat($parent_nesting);

      (function($base, $super, $parent_nesting) {
        var self = $klass($base, $super, 'Send');

        var $nesting = [self].concat($parent_nesting), $Send_initialize$1, $Send_with_operator$2, $Send_update_operator$4;

        
        self.$attr_reader("dot");
        self.$attr_reader("selector");
        self.$attr_reader("operator");
        self.$attr_reader("begin");
        self.$attr_reader("end");
        
        Opal.def(self, '$initialize', $Send_initialize$1 = function $$initialize(dot_l, selector_l, begin_l, end_l, expression_l) {
          var $a, $iter = $Send_initialize$1.$$p, $yield = $iter || nil, self = this;

          if ($iter) $Send_initialize$1.$$p = null;
          
          self.dot = dot_l;
          self.selector = selector_l;
          $a = [begin_l, end_l], (self.begin = $a[0]), (self.end = $a[1]), $a;
          return $send2(self, Opal.find_super_dispatcher(self, 'initialize', $Send_initialize$1, false, true), 'initialize', [expression_l], null);
        }, $Send_initialize$1.$$arity = 5);
        
        Opal.def(self, '$with_operator', $Send_with_operator$2 = function $$with_operator(operator_l) {
          var $$3, self = this;

          return $send(self, 'with', [], ($$3 = function(map){var self = $$3.$$s == null ? this : $$3.$$s;

          
            
            if (map == null) {
              map = nil;
            };
            return map.$update_operator(operator_l);}, $$3.$$s = self, $$3.$$arity = 1, $$3))
        }, $Send_with_operator$2.$$arity = 1);
        self.$protected();
        return (Opal.def(self, '$update_operator', $Send_update_operator$4 = function $$update_operator(operator_l) {
          var self = this;

          return (self.operator = operator_l)
        }, $Send_update_operator$4.$$arity = 1), nil) && 'update_operator';
      })($$($nesting, 'Map'), $$($nesting, 'Map'), $nesting)
    })($nesting[0], $nesting)
  })($nesting[0], $nesting)
};

/* Generated by Opal 1.0.0 */
Opal.modules["parser/source/map/index"] = function(Opal) {
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.$$$, $$ = Opal.$$, $module = Opal.module, $klass = Opal.klass, $send2 = Opal.send2, $send = Opal.send;

  Opal.add_stubs(['$attr_reader', '$with', '$update_operator', '$protected']);
  return (function($base, $parent_nesting) {
    var self = $module($base, 'Parser');

    var $nesting = [self].concat($parent_nesting);

    (function($base, $parent_nesting) {
      var self = $module($base, 'Source');

      var $nesting = [self].concat($parent_nesting);

      (function($base, $super, $parent_nesting) {
        var self = $klass($base, $super, 'Index');

        var $nesting = [self].concat($parent_nesting), $Index_initialize$1, $Index_with_operator$2, $Index_update_operator$4;

        
        self.$attr_reader("begin");
        self.$attr_reader("end");
        self.$attr_reader("operator");
        
        Opal.def(self, '$initialize', $Index_initialize$1 = function $$initialize(begin_l, end_l, expression_l) {
          var $a, $iter = $Index_initialize$1.$$p, $yield = $iter || nil, self = this;

          if ($iter) $Index_initialize$1.$$p = null;
          
          $a = [begin_l, end_l], (self.begin = $a[0]), (self.end = $a[1]), $a;
          self.operator = nil;
          return $send2(self, Opal.find_super_dispatcher(self, 'initialize', $Index_initialize$1, false, true), 'initialize', [expression_l], null);
        }, $Index_initialize$1.$$arity = 3);
        
        Opal.def(self, '$with_operator', $Index_with_operator$2 = function $$with_operator(operator_l) {
          var $$3, self = this;

          return $send(self, 'with', [], ($$3 = function(map){var self = $$3.$$s == null ? this : $$3.$$s;

          
            
            if (map == null) {
              map = nil;
            };
            return map.$update_operator(operator_l);}, $$3.$$s = self, $$3.$$arity = 1, $$3))
        }, $Index_with_operator$2.$$arity = 1);
        self.$protected();
        return (Opal.def(self, '$update_operator', $Index_update_operator$4 = function $$update_operator(operator_l) {
          var self = this;

          return (self.operator = operator_l)
        }, $Index_update_operator$4.$$arity = 1), nil) && 'update_operator';
      })($$($nesting, 'Map'), $$($nesting, 'Map'), $nesting)
    })($nesting[0], $nesting)
  })($nesting[0], $nesting)
};

/* Generated by Opal 1.0.0 */
Opal.modules["parser/source/map/condition"] = function(Opal) {
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.$$$, $$ = Opal.$$, $module = Opal.module, $klass = Opal.klass, $send2 = Opal.send2;

  Opal.add_stubs(['$attr_reader']);
  return (function($base, $parent_nesting) {
    var self = $module($base, 'Parser');

    var $nesting = [self].concat($parent_nesting);

    (function($base, $parent_nesting) {
      var self = $module($base, 'Source');

      var $nesting = [self].concat($parent_nesting);

      (function($base, $super, $parent_nesting) {
        var self = $klass($base, $super, 'Condition');

        var $nesting = [self].concat($parent_nesting), $Condition_initialize$1;

        
        self.$attr_reader("keyword");
        self.$attr_reader("begin");
        self.$attr_reader("else");
        self.$attr_reader("end");
        return (Opal.def(self, '$initialize', $Condition_initialize$1 = function $$initialize(keyword_l, begin_l, else_l, end_l, expression_l) {
          var $a, $iter = $Condition_initialize$1.$$p, $yield = $iter || nil, self = this;

          if ($iter) $Condition_initialize$1.$$p = null;
          
          self.keyword = keyword_l;
          $a = [begin_l, else_l, end_l], (self.begin = $a[0]), (self["else"] = $a[1]), (self.end = $a[2]), $a;
          return $send2(self, Opal.find_super_dispatcher(self, 'initialize', $Condition_initialize$1, false, true), 'initialize', [expression_l], null);
        }, $Condition_initialize$1.$$arity = 5), nil) && 'initialize';
      })($$($nesting, 'Map'), $$($nesting, 'Map'), $nesting)
    })($nesting[0], $nesting)
  })($nesting[0], $nesting)
};

/* Generated by Opal 1.0.0 */
Opal.modules["parser/source/map/ternary"] = function(Opal) {
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.$$$, $$ = Opal.$$, $module = Opal.module, $klass = Opal.klass, $send2 = Opal.send2;

  Opal.add_stubs(['$attr_reader']);
  return (function($base, $parent_nesting) {
    var self = $module($base, 'Parser');

    var $nesting = [self].concat($parent_nesting);

    (function($base, $parent_nesting) {
      var self = $module($base, 'Source');

      var $nesting = [self].concat($parent_nesting);

      (function($base, $super, $parent_nesting) {
        var self = $klass($base, $super, 'Ternary');

        var $nesting = [self].concat($parent_nesting), $Ternary_initialize$1;

        
        self.$attr_reader("question");
        self.$attr_reader("colon");
        return (Opal.def(self, '$initialize', $Ternary_initialize$1 = function $$initialize(question_l, colon_l, expression_l) {
          var $a, $iter = $Ternary_initialize$1.$$p, $yield = $iter || nil, self = this;

          if ($iter) $Ternary_initialize$1.$$p = null;
          
          $a = [question_l, colon_l], (self.question = $a[0]), (self.colon = $a[1]), $a;
          return $send2(self, Opal.find_super_dispatcher(self, 'initialize', $Ternary_initialize$1, false, true), 'initialize', [expression_l], null);
        }, $Ternary_initialize$1.$$arity = 3), nil) && 'initialize';
      })($$($nesting, 'Map'), $$($nesting, 'Map'), $nesting)
    })($nesting[0], $nesting)
  })($nesting[0], $nesting)
};

/* Generated by Opal 1.0.0 */
Opal.modules["parser/source/map/for"] = function(Opal) {
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.$$$, $$ = Opal.$$, $module = Opal.module, $klass = Opal.klass, $send2 = Opal.send2;

  Opal.add_stubs(['$attr_reader']);
  return (function($base, $parent_nesting) {
    var self = $module($base, 'Parser');

    var $nesting = [self].concat($parent_nesting);

    (function($base, $parent_nesting) {
      var self = $module($base, 'Source');

      var $nesting = [self].concat($parent_nesting);

      (function($base, $super, $parent_nesting) {
        var self = $klass($base, $super, 'For');

        var $nesting = [self].concat($parent_nesting), $For_initialize$1;

        
        self.$attr_reader("keyword", "in");
        self.$attr_reader("begin", "end");
        return (Opal.def(self, '$initialize', $For_initialize$1 = function $$initialize(keyword_l, in_l, begin_l, end_l, expression_l) {
          var $a, $iter = $For_initialize$1.$$p, $yield = $iter || nil, self = this;

          if ($iter) $For_initialize$1.$$p = null;
          
          $a = [keyword_l, in_l], (self.keyword = $a[0]), (self["in"] = $a[1]), $a;
          $a = [begin_l, end_l], (self.begin = $a[0]), (self.end = $a[1]), $a;
          return $send2(self, Opal.find_super_dispatcher(self, 'initialize', $For_initialize$1, false, true), 'initialize', [expression_l], null);
        }, $For_initialize$1.$$arity = 5), nil) && 'initialize';
      })($$($nesting, 'Map'), $$($nesting, 'Map'), $nesting)
    })($nesting[0], $nesting)
  })($nesting[0], $nesting)
};

/* Generated by Opal 1.0.0 */
Opal.modules["parser/source/map/rescue_body"] = function(Opal) {
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.$$$, $$ = Opal.$$, $module = Opal.module, $klass = Opal.klass, $send2 = Opal.send2;

  Opal.add_stubs(['$attr_reader']);
  return (function($base, $parent_nesting) {
    var self = $module($base, 'Parser');

    var $nesting = [self].concat($parent_nesting);

    (function($base, $parent_nesting) {
      var self = $module($base, 'Source');

      var $nesting = [self].concat($parent_nesting);

      (function($base, $super, $parent_nesting) {
        var self = $klass($base, $super, 'RescueBody');

        var $nesting = [self].concat($parent_nesting), $RescueBody_initialize$1;

        
        self.$attr_reader("keyword");
        self.$attr_reader("assoc");
        self.$attr_reader("begin");
        return (Opal.def(self, '$initialize', $RescueBody_initialize$1 = function $$initialize(keyword_l, assoc_l, begin_l, expression_l) {
          var $iter = $RescueBody_initialize$1.$$p, $yield = $iter || nil, self = this;

          if ($iter) $RescueBody_initialize$1.$$p = null;
          
          self.keyword = keyword_l;
          self.assoc = assoc_l;
          self.begin = begin_l;
          return $send2(self, Opal.find_super_dispatcher(self, 'initialize', $RescueBody_initialize$1, false, true), 'initialize', [expression_l], null);
        }, $RescueBody_initialize$1.$$arity = 4), nil) && 'initialize';
      })($$($nesting, 'Map'), $$($nesting, 'Map'), $nesting)
    })($nesting[0], $nesting)
  })($nesting[0], $nesting)
};

/* Generated by Opal 1.0.0 */
Opal.modules["parser/source/map/heredoc"] = function(Opal) {
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.$$$, $$ = Opal.$$, $module = Opal.module, $klass = Opal.klass, $send2 = Opal.send2;

  Opal.add_stubs(['$attr_reader']);
  return (function($base, $parent_nesting) {
    var self = $module($base, 'Parser');

    var $nesting = [self].concat($parent_nesting);

    (function($base, $parent_nesting) {
      var self = $module($base, 'Source');

      var $nesting = [self].concat($parent_nesting);

      (function($base, $super, $parent_nesting) {
        var self = $klass($base, $super, 'Heredoc');

        var $nesting = [self].concat($parent_nesting), $Heredoc_initialize$1;

        
        self.$attr_reader("heredoc_body");
        self.$attr_reader("heredoc_end");
        return (Opal.def(self, '$initialize', $Heredoc_initialize$1 = function $$initialize(begin_l, body_l, end_l) {
          var $iter = $Heredoc_initialize$1.$$p, $yield = $iter || nil, self = this;

          if ($iter) $Heredoc_initialize$1.$$p = null;
          
          self.heredoc_body = body_l;
          self.heredoc_end = end_l;
          return $send2(self, Opal.find_super_dispatcher(self, 'initialize', $Heredoc_initialize$1, false, true), 'initialize', [begin_l], null);
        }, $Heredoc_initialize$1.$$arity = 3), nil) && 'initialize';
      })($$($nesting, 'Map'), $$($nesting, 'Map'), $nesting)
    })($nesting[0], $nesting)
  })($nesting[0], $nesting)
};

/* Generated by Opal 1.0.0 */
Opal.modules["parser/source/map/objc_kwarg"] = function(Opal) {
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.$$$, $$ = Opal.$$, $module = Opal.module, $klass = Opal.klass, $send2 = Opal.send2;

  Opal.add_stubs(['$attr_reader']);
  return (function($base, $parent_nesting) {
    var self = $module($base, 'Parser');

    var $nesting = [self].concat($parent_nesting);

    (function($base, $parent_nesting) {
      var self = $module($base, 'Source');

      var $nesting = [self].concat($parent_nesting);

      (function($base, $super, $parent_nesting) {
        var self = $klass($base, $super, 'ObjcKwarg');

        var $nesting = [self].concat($parent_nesting), $ObjcKwarg_initialize$1;

        
        self.$attr_reader("keyword");
        self.$attr_reader("operator");
        self.$attr_reader("argument");
        return (Opal.def(self, '$initialize', $ObjcKwarg_initialize$1 = function $$initialize(keyword_l, operator_l, argument_l, expression_l) {
          var $a, $iter = $ObjcKwarg_initialize$1.$$p, $yield = $iter || nil, self = this;

          if ($iter) $ObjcKwarg_initialize$1.$$p = null;
          
          $a = [keyword_l, operator_l, argument_l], (self.keyword = $a[0]), (self.operator = $a[1]), (self.argument = $a[2]), $a;
          return $send2(self, Opal.find_super_dispatcher(self, 'initialize', $ObjcKwarg_initialize$1, false, true), 'initialize', [expression_l], null);
        }, $ObjcKwarg_initialize$1.$$arity = 4), nil) && 'initialize';
      })($$($nesting, 'Map'), $$($nesting, 'Map'), $nesting)
    })($nesting[0], $nesting)
  })($nesting[0], $nesting)
};

/* Generated by Opal 1.0.0 */
Opal.modules["parser/syntax_error"] = function(Opal) {
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.$$$, $$ = Opal.$$, $module = Opal.module, $klass = Opal.klass, $send2 = Opal.send2;

  Opal.add_stubs(['$attr_reader', '$message']);
  return (function($base, $parent_nesting) {
    var self = $module($base, 'Parser');

    var $nesting = [self].concat($parent_nesting);

    (function($base, $super, $parent_nesting) {
      var self = $klass($base, $super, 'SyntaxError');

      var $nesting = [self].concat($parent_nesting), $SyntaxError_initialize$1;

      
      self.$attr_reader("diagnostic");
      return (Opal.def(self, '$initialize', $SyntaxError_initialize$1 = function $$initialize(diagnostic) {
        var $iter = $SyntaxError_initialize$1.$$p, $yield = $iter || nil, self = this;

        if ($iter) $SyntaxError_initialize$1.$$p = null;
        
        self.diagnostic = diagnostic;
        return $send2(self, Opal.find_super_dispatcher(self, 'initialize', $SyntaxError_initialize$1, false, true), 'initialize', [diagnostic.$message()], null);
      }, $SyntaxError_initialize$1.$$arity = 1), nil) && 'initialize';
    })($nesting[0], $$($nesting, 'StandardError'), $nesting)
  })($nesting[0], $nesting)
};

/* Generated by Opal 1.0.0 */
Opal.modules["parser/clobbering_error"] = function(Opal) {
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.$$$, $$ = Opal.$$, $module = Opal.module, $klass = Opal.klass;

  return (function($base, $parent_nesting) {
    var self = $module($base, 'Parser');

    var $nesting = [self].concat($parent_nesting);

    (function($base, $super, $parent_nesting) {
      var self = $klass($base, $super, 'ClobberingError');

      var $nesting = [self].concat($parent_nesting);

      return nil
    })($nesting[0], $$($nesting, 'RuntimeError'), $nesting)
  })($nesting[0], $nesting)
};

/* Generated by Opal 1.0.0 */
Opal.modules["parser/diagnostic"] = function(Opal) {
  function $rb_plus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs + rhs : lhs['$+'](rhs);
  }
  function $rb_minus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs - rhs : lhs['$-'](rhs);
  }
  function $rb_gt(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs > rhs : lhs['$>'](rhs);
  }
  function $rb_times(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs * rhs : lhs['$*'](rhs);
  }
  function $rb_ge(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs >= rhs : lhs['$>='](rhs);
  }
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.$$$, $$ = Opal.$$, $module = Opal.module, $klass = Opal.klass, $truthy = Opal.truthy, $hash2 = Opal.hash2, $send = Opal.send;

  Opal.add_stubs(['$freeze', '$attr_reader', '$include?', '$raise', '$join', '$inspect', '$dup', '$compile', '$==', '$line', '$last_line', '$is?', '$+', '$message', '$render_line', '$first_line_only', '$last_line_only', '$-', '$source_buffer', '$decompose_position', '$end_pos', '$>', '$private', '$source_line', '$*', '$length', '$each', '$line_range', '$intersect', '$column_range', '$size', '$[]=', '$!', '$>=', '$map', '$name', '$!=', '$resize', '$=~', '$source', '$adjust']);
  return (function($base, $parent_nesting) {
    var self = $module($base, 'Parser');

    var $nesting = [self].concat($parent_nesting);

    (function($base, $super, $parent_nesting) {
      var self = $klass($base, $super, 'Diagnostic');

      var $nesting = [self].concat($parent_nesting), $Diagnostic_initialize$1, $Diagnostic_message$2, $Diagnostic_render$3, $Diagnostic_render_line$4, $Diagnostic_first_line_only$7, $Diagnostic_last_line_only$8;

      self.$$prototype.reason = self.$$prototype["arguments"] = self.$$prototype.location = self.$$prototype.level = self.$$prototype.highlights = nil;
      
      Opal.const_set($nesting[0], 'LEVELS', ["note", "warning", "error", "fatal"].$freeze());
      self.$attr_reader("level", "reason", "arguments");
      self.$attr_reader("location", "highlights");
      
      Opal.def(self, '$initialize', $Diagnostic_initialize$1 = function $$initialize(level, reason, arguments$, location, highlights) {
        var $a, self = this;

        
        
        if (highlights == null) {
          highlights = [];
        };
        if ($truthy($$($nesting, 'LEVELS')['$include?'](level))) {
        } else {
          self.$raise($$($nesting, 'ArgumentError'), "" + ("" + "Diagnostic#level must be one of " + ($$($nesting, 'LEVELS').$join(", ")) + "; ") + ("" + (level.$inspect()) + " provided."))
        };
        if ($truthy(location)) {
        } else {
          self.$raise("Expected a location")
        };
        self.level = level;
        self.reason = reason;
        self["arguments"] = ($truthy($a = arguments$) ? $a : $hash2([], {})).$dup().$freeze();
        self.location = location;
        self.highlights = highlights.$dup().$freeze();
        return self.$freeze();
      }, $Diagnostic_initialize$1.$$arity = -5);
      
      Opal.def(self, '$message', $Diagnostic_message$2 = function $$message() {
        var self = this;

        return $$($nesting, 'Messages').$compile(self.reason, self["arguments"])
      }, $Diagnostic_message$2.$$arity = 0);
      
      Opal.def(self, '$render', $Diagnostic_render$3 = function $$render() {
        var $a, $b, self = this, first_line = nil, last_line = nil, num_lines = nil, buffer = nil, last_lineno = nil, last_column = nil;

        if ($truthy(($truthy($a = self.location.$line()['$=='](self.location.$last_line())) ? $a : self.location['$is?']("\n")))) {
          return $rb_plus(["" + (self.location) + ": " + (self.level) + ": " + (self.$message())], self.$render_line(self.location))
        } else {
          
          first_line = self.$first_line_only(self.location);
          last_line = self.$last_line_only(self.location);
          num_lines = $rb_plus($rb_minus(self.location.$last_line(), self.location.$line()), 1);
          buffer = self.location.$source_buffer();
          $b = buffer.$decompose_position(self.location.$end_pos()), $a = Opal.to_ary($b), (last_lineno = ($a[0] == null ? nil : $a[0])), (last_column = ($a[1] == null ? nil : $a[1])), $b;
          return $rb_plus($rb_plus(["" + (self.location) + "-" + (last_lineno) + ":" + (last_column) + ": " + (self.level) + ": " + (self.$message())], self.$render_line(first_line, $rb_gt(num_lines, 2), false)), self.$render_line(last_line, false, true));
        }
      }, $Diagnostic_render$3.$$arity = 0);
      self.$private();
      
      Opal.def(self, '$render_line', $Diagnostic_render_line$4 = function $$render_line(range, ellipsis, range_end) {
        var $$5, $a, $$6, self = this, source_line = nil, highlight_line = nil, $writer = nil;

        
        
        if (ellipsis == null) {
          ellipsis = false;
        };
        
        if (range_end == null) {
          range_end = false;
        };
        source_line = range.$source_line();
        highlight_line = $rb_times(" ", source_line.$length());
        $send(self.highlights, 'each', [], ($$5 = function(highlight){var self = $$5.$$s == null ? this : $$5.$$s, line_range = nil, $writer = nil;

        
          
          if (highlight == null) {
            highlight = nil;
          };
          line_range = range.$source_buffer().$line_range(range.$line());
          if ($truthy((highlight = highlight.$intersect(line_range)))) {
            
            $writer = [highlight.$column_range(), $rb_times("~", highlight.$size())];
            $send(highlight_line, '[]=', Opal.to_a($writer));
            return $writer[$rb_minus($writer["length"], 1)];
          } else {
            return nil
          };}, $$5.$$s = self, $$5.$$arity = 1, $$5));
        if ($truthy(range['$is?']("\n"))) {
          highlight_line = $rb_plus(highlight_line, "^")
        } else if ($truthy(($truthy($a = range_end['$!']()) ? $rb_ge(range.$size(), 1) : $a))) {
          
          $writer = [range.$column_range(), $rb_plus("^", $rb_times("~", $rb_minus(range.$size(), 1)))];
          $send(highlight_line, '[]=', Opal.to_a($writer));
          $writer[$rb_minus($writer["length"], 1)];
        } else {
          
          $writer = [range.$column_range(), $rb_times("~", range.$size())];
          $send(highlight_line, '[]=', Opal.to_a($writer));
          $writer[$rb_minus($writer["length"], 1)];
        };
        if ($truthy(ellipsis)) {
          highlight_line = $rb_plus(highlight_line, "...")};
        return $send([source_line, highlight_line], 'map', [], ($$6 = function(line){var self = $$6.$$s == null ? this : $$6.$$s;

        
          
          if (line == null) {
            line = nil;
          };
          return "" + (range.$source_buffer().$name()) + ":" + (range.$line()) + ": " + (line);}, $$6.$$s = self, $$6.$$arity = 1, $$6));
      }, $Diagnostic_render_line$4.$$arity = -2);
      
      Opal.def(self, '$first_line_only', $Diagnostic_first_line_only$7 = function $$first_line_only(range) {
        var self = this;

        if ($truthy(range.$line()['$!='](range.$last_line()))) {
          return range.$resize(range.$source()['$=~'](/\n/))
        } else {
          return range
        }
      }, $Diagnostic_first_line_only$7.$$arity = 1);
      return (Opal.def(self, '$last_line_only', $Diagnostic_last_line_only$8 = function $$last_line_only(range) {
        var self = this;

        if ($truthy(range.$line()['$!='](range.$last_line()))) {
          return range.$adjust($hash2(["begin_pos"], {"begin_pos": range.$source()['$=~'](/[^\n]*$/)}))
        } else {
          return range
        }
      }, $Diagnostic_last_line_only$8.$$arity = 1), nil) && 'last_line_only';
    })($nesting[0], null, $nesting)
  })($nesting[0], $nesting)
};

/* Generated by Opal 1.0.0 */
Opal.modules["parser/diagnostic/engine"] = function(Opal) {
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.$$$, $$ = Opal.$$, $module = Opal.module, $klass = Opal.klass, $truthy = Opal.truthy;

  Opal.add_stubs(['$attr_accessor', '$ignore?', '$call', '$raise?', '$raise', '$protected', '$==', '$level']);
  return (function($base, $parent_nesting) {
    var self = $module($base, 'Parser');

    var $nesting = [self].concat($parent_nesting);

    (function($base, $super, $parent_nesting) {
      var self = $klass($base, $super, 'Engine');

      var $nesting = [self].concat($parent_nesting), $Engine_initialize$1, $Engine_process$2, $Engine_ignore$ques$3, $Engine_raise$ques$4;

      self.$$prototype.consumer = self.$$prototype.ignore_warnings = self.$$prototype.all_errors_are_fatal = nil;
      
      self.$attr_accessor("consumer");
      self.$attr_accessor("all_errors_are_fatal");
      self.$attr_accessor("ignore_warnings");
      
      Opal.def(self, '$initialize', $Engine_initialize$1 = function $$initialize(consumer) {
        var self = this;

        
        
        if (consumer == null) {
          consumer = nil;
        };
        self.consumer = consumer;
        self.all_errors_are_fatal = false;
        return (self.ignore_warnings = false);
      }, $Engine_initialize$1.$$arity = -1);
      
      Opal.def(self, '$process', $Engine_process$2 = function $$process(diagnostic) {
        var self = this;

        
        if ($truthy(self['$ignore?'](diagnostic))) {
        } else if ($truthy(self.consumer)) {
          self.consumer.$call(diagnostic)};
        if ($truthy(self['$raise?'](diagnostic))) {
          self.$raise($$$($$($nesting, 'Parser'), 'SyntaxError'), diagnostic)};
        return self;
      }, $Engine_process$2.$$arity = 1);
      self.$protected();
      
      Opal.def(self, '$ignore?', $Engine_ignore$ques$3 = function(diagnostic) {
        var $a, self = this;

        return ($truthy($a = self.ignore_warnings) ? diagnostic.$level()['$==']("warning") : $a)
      }, $Engine_ignore$ques$3.$$arity = 1);
      return (Opal.def(self, '$raise?', $Engine_raise$ques$4 = function(diagnostic) {
        var $a, $b, self = this;

        return ($truthy($a = ($truthy($b = self.all_errors_are_fatal) ? diagnostic.$level()['$==']("error") : $b)) ? $a : diagnostic.$level()['$==']("fatal"))
      }, $Engine_raise$ques$4.$$arity = 1), nil) && 'raise?';
    })($$($nesting, 'Diagnostic'), null, $nesting)
  })($nesting[0], $nesting)
};

/* Generated by Opal 1.0.0 */
Opal.modules["parser/static_environment"] = function(Opal) {
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.$$$, $$ = Opal.$$, $module = Opal.module, $klass = Opal.klass;

  Opal.add_stubs(['$reset', '$[]', '$push', '$dup', '$pop', '$add', '$to_sym', '$include?', '$declare', '$declared?']);
  return (function($base, $parent_nesting) {
    var self = $module($base, 'Parser');

    var $nesting = [self].concat($parent_nesting);

    (function($base, $super, $parent_nesting) {
      var self = $klass($base, $super, 'StaticEnvironment');

      var $nesting = [self].concat($parent_nesting), $StaticEnvironment_initialize$1, $StaticEnvironment_reset$2, $StaticEnvironment_extend_static$3, $StaticEnvironment_extend_dynamic$4, $StaticEnvironment_unextend$5, $StaticEnvironment_declare$6, $StaticEnvironment_declared$ques$7, $StaticEnvironment_declare_forward_args$8, $StaticEnvironment_declared_forward_args$ques$9;

      self.$$prototype.stack = self.$$prototype.variables = nil;
      
      Opal.const_set($nesting[0], 'FORWARD_ARGS', "FORWARD_ARGS");
      
      Opal.def(self, '$initialize', $StaticEnvironment_initialize$1 = function $$initialize() {
        var self = this;

        return self.$reset()
      }, $StaticEnvironment_initialize$1.$$arity = 0);
      
      Opal.def(self, '$reset', $StaticEnvironment_reset$2 = function $$reset() {
        var self = this;

        
        self.variables = $$($nesting, 'Set')['$[]']();
        return (self.stack = []);
      }, $StaticEnvironment_reset$2.$$arity = 0);
      
      Opal.def(self, '$extend_static', $StaticEnvironment_extend_static$3 = function $$extend_static() {
        var self = this;

        
        self.stack.$push(self.variables);
        self.variables = $$($nesting, 'Set')['$[]']();
        return self;
      }, $StaticEnvironment_extend_static$3.$$arity = 0);
      
      Opal.def(self, '$extend_dynamic', $StaticEnvironment_extend_dynamic$4 = function $$extend_dynamic() {
        var self = this;

        
        self.stack.$push(self.variables);
        self.variables = self.variables.$dup();
        return self;
      }, $StaticEnvironment_extend_dynamic$4.$$arity = 0);
      
      Opal.def(self, '$unextend', $StaticEnvironment_unextend$5 = function $$unextend() {
        var self = this;

        
        self.variables = self.stack.$pop();
        return self;
      }, $StaticEnvironment_unextend$5.$$arity = 0);
      
      Opal.def(self, '$declare', $StaticEnvironment_declare$6 = function $$declare(name) {
        var self = this;

        
        self.variables.$add(name.$to_sym());
        return self;
      }, $StaticEnvironment_declare$6.$$arity = 1);
      
      Opal.def(self, '$declared?', $StaticEnvironment_declared$ques$7 = function(name) {
        var self = this;

        return self.variables['$include?'](name.$to_sym())
      }, $StaticEnvironment_declared$ques$7.$$arity = 1);
      
      Opal.def(self, '$declare_forward_args', $StaticEnvironment_declare_forward_args$8 = function $$declare_forward_args() {
        var self = this;

        return self.$declare($$($nesting, 'FORWARD_ARGS'))
      }, $StaticEnvironment_declare_forward_args$8.$$arity = 0);
      return (Opal.def(self, '$declared_forward_args?', $StaticEnvironment_declared_forward_args$ques$9 = function() {
        var self = this;

        return self['$declared?']($$($nesting, 'FORWARD_ARGS'))
      }, $StaticEnvironment_declared_forward_args$ques$9.$$arity = 0), nil) && 'declared_forward_args?';
    })($nesting[0], null, $nesting)
  })($nesting[0], $nesting)
};

/* Generated by Opal 1.0.0 */
Opal.modules["parser/lexer"] = function(Opal) {
  function $rb_minus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs - rhs : lhs['$-'](rhs);
  }
  function $rb_plus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs + rhs : lhs['$+'](rhs);
  }
  function $rb_le(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs <= rhs : lhs['$<='](rhs);
  }
  function $rb_gt(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs > rhs : lhs['$>'](rhs);
  }
  function $rb_ge(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs >= rhs : lhs['$>='](rhs);
  }
  function $rb_lt(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs < rhs : lhs['$<'](rhs);
  }
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.$$$, $$ = Opal.$$, $klass = Opal.klass, $send = Opal.send, $hash = Opal.hash, $truthy = Opal.truthy, $hash2 = Opal.hash2, $range = Opal.range, $gvars = Opal.gvars;

  Opal.add_stubs(['$attr_accessor', '$private', '$_lex_trans_keys=', '$-', '$_lex_key_spans=', '$_lex_index_offsets=', '$_lex_indicies=', '$_lex_trans_targs=', '$_lex_trans_actions=', '$_lex_to_state_actions=', '$_lex_from_state_actions=', '$_lex_eof_trans=', '$lex_start=', '$lex_error=', '$lex_en_interp_words=', '$lex_en_interp_string=', '$lex_en_plain_words=', '$lex_en_plain_string=', '$lex_en_interp_backslash_delimited=', '$lex_en_plain_backslash_delimited=', '$lex_en_interp_backslash_delimited_words=', '$lex_en_plain_backslash_delimited_words=', '$lex_en_regexp_modifiers=', '$lex_en_expr_variable=', '$lex_en_expr_fname=', '$lex_en_expr_endfn=', '$lex_en_expr_dot=', '$lex_en_expr_arg=', '$lex_en_expr_cmdarg=', '$lex_en_expr_endarg=', '$lex_en_expr_mid=', '$lex_en_expr_beg=', '$lex_en_expr_labelarg=', '$lex_en_expr_value=', '$lex_en_expr_end=', '$lex_en_leading_dot=', '$lex_en_line_comment=', '$lex_en_line_begin=', '$freeze', '$ord', '$union', '$chars', '$attr_reader', '$reset', '$lex_en_line_begin', '$class', '$new', '$source', '$==', '$encoding', '$unpack', '$[]', '$lex_en_expr_dot', '$lex_en_expr_fname', '$lex_en_expr_value', '$lex_en_expr_beg', '$lex_en_expr_mid', '$lex_en_expr_arg', '$lex_en_expr_cmdarg', '$lex_en_expr_end', '$lex_en_expr_endarg', '$lex_en_expr_endfn', '$lex_en_expr_labelarg', '$lex_en_interp_string', '$lex_en_interp_words', '$lex_en_plain_string', '$fetch', '$invert', '$push', '$count', '$pop', '$any?', '$shift', '$send', '$+', '$size', '$<=', '$===', '$<<', '$>', '$!=', '$emit_comment', '$tok', '$literal', '$flush_string', '$extend_content', '$emit', '$heredoc?', '$saved_herebody_s=', '$start_interp_brace', '$[]=', '$diagnostic', '$range', '$str_s', '$gsub', '$version?', '$nest_and_try_closing', '$heredoc_e', '$pop_literal', '$infer_indent_level', '$words?', '$!', '$eof_codepoint?', '$extend_space', '$extend_string', '$>=', '$active?', '$slice', '$start_with?', '$chr', '$munge_escape?', '$regexp?', '$match', '$squiggly_heredoc?', '$supports_line_continuation_via_slash?', '$scan', '$join', '$=~', '$to_i', '$stack_pop', '$emit_table', '$push_literal', '$arg_or_cmdarg', '$emit_do', '$nil?', '$declared?', '$last', '$<', '$getbyte', '$inspect', '$end_with?', '$empty?', '$index', '$call', '$Float', '$to_f', '$length', '$lambda', '$Rational', '$Complex', '$each', '$encode_escape', '$%', '$end_interp_brace_and_try_closing', '$lexpop', '$saved_herebody_s', '$next_state_for_literal', '$rstrip', '$&', '$|', '$include?', '$lex_error', '$protected', '$force_encoding', '$process', '$backslash_delimited?', '$interpolate?', '$lex_en_interp_backslash_delimited_words', '$lex_en_plain_backslash_delimited_words', '$lex_en_plain_words', '$lex_en_interp_backslash_delimited', '$lex_en_plain_backslash_delimited', '$dedent_level', '$type', '$lex_en_regexp_modifiers', '$upcase']);
  return (function($base, $super, $parent_nesting) {
    var self = $klass($base, $super, 'Lexer');

    var $nesting = [self].concat($parent_nesting), $Lexer_initialize$1, $Lexer_reset$2, $Lexer_source_buffer$eq$3, $Lexer_encoding$4, $Lexer_state$5, $Lexer_state$eq$6, $Lexer_push_cmdarg$7, $Lexer_pop_cmdarg$8, $Lexer_push_cond$9, $Lexer_pop_cond$10, $Lexer_dedent_level$11, $Lexer_advance$12, $Lexer_eof_codepoint$ques$42, $Lexer_version$ques$43, $Lexer_stack_pop$44, $Lexer_encode_escape$45, $Lexer_tok$46, $Lexer_range$47, $Lexer_emit$48, $Lexer_emit_table$49, $Lexer_emit_do$50, $Lexer_arg_or_cmdarg$51, $Lexer_emit_comment$52, $Lexer_diagnostic$53, $Lexer_push_literal$54, $Lexer_next_state_for_literal$55, $Lexer_literal$56, $Lexer_pop_literal$57, $Lexer$58, $writer = nil;

    self.$$prototype.source_buffer = self.$$prototype.source_pts = self.$$prototype.cs = self.$$prototype.cmdarg_stack = self.$$prototype.cmdarg = self.$$prototype.cond_stack = self.$$prototype.cond = self.$$prototype.dedent_level = self.$$prototype.token_queue = self.$$prototype.p = self.$$prototype.command_start = self.$$prototype.herebody_s = self.$$prototype.sharp_s = self.$$prototype.ts = self.$$prototype.te = self.$$prototype.top = self.$$prototype.stack = self.$$prototype.version = self.$$prototype.escape_s = self.$$prototype.escape = self.$$prototype.act = self.$$prototype.static_env = self.$$prototype.lambda_stack = self.$$prototype.paren_nest = self.$$prototype.num_digits_s = self.$$prototype.num_suffix_s = self.$$prototype.num_base = self.$$prototype.num_xfrm = self.$$prototype.newline_s = self.$$prototype.eq_begin_s = self.$$prototype.cs_before_block_comment = self.$$prototype.in_kwarg = self.$$prototype.tokens = self.$$prototype.comments = self.$$prototype.diagnostics = self.$$prototype.literal_stack = nil;
    
    (function(self, $parent_nesting) {
      var $nesting = [self].concat($parent_nesting);

      
      self.$attr_accessor("_lex_trans_keys");
      return self.$private("_lex_trans_keys", "_lex_trans_keys=");
    })(Opal.get_singleton_class(self), $nesting);
    
    $writer = [[0, 0, 101, 101, 103, 103, 105, 105, 110, 110, 69, 69, 78, 78, 68, 68, 95, 95, 95, 95, 0, 26, 0, 127, 0, 127, 0, 127, 0, 127, 0, 45, 0, 77, 0, 77, 0, 92, 0, 26, 0, 26, 0, 45, 0, 99, 0, 26, 67, 99, 45, 45, 0, 92, 0, 77, 0, 102, 0, 127, 0, 127, 0, 127, 0, 127, 0, 45, 0, 77, 0, 77, 0, 92, 0, 26, 0, 26, 0, 45, 0, 99, 0, 26, 67, 99, 45, 45, 0, 92, 0, 77, 0, 102, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 26, 0, 127, 58, 58, 58, 58, 0, 127, 58, 58, 60, 60, 62, 62, 10, 10, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 115, 115, 99, 99, 117, 117, 101, 101, 108, 116, 101, 101, 115, 115, 115, 115, 105, 105, 108, 108, 105, 105, 108, 108, 58, 58, 0, 127, 10, 10, 0, 127, 9, 92, 10, 10, 9, 92, 58, 58, 98, 98, 101, 101, 103, 103, 105, 105, 110, 110, 0, 122, 61, 61, 9, 92, 9, 92, 9, 92, 9, 92, 9, 92, 10, 10, 0, 127, 0, 127, 61, 126, 93, 93, 0, 127, 0, 127, 10, 10, 34, 34, 10, 10, 39, 39, 0, 127, 10, 96, 96, 96, 0, 45, 0, 77, 0, 77, 0, 92, 0, 26, 0, 26, 0, 45, 0, 99, 0, 26, 67, 99, 45, 45, 0, 92, 0, 77, 0, 102, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 58, 58, 58, 58, 0, 127, 43, 57, 48, 57, 48, 57, 48, 57, 48, 57, 115, 115, 99, 99, 117, 117, 101, 101, 99, 99, 117, 117, 101, 101, 0, 127, 58, 58, 9, 92, 9, 92, 9, 92, 9, 92, 9, 92, 9, 92, 60, 60, 10, 10, 9, 92, 9, 92, 10, 10, 10, 10, 10, 10, 10, 10, 46, 46, 0, 95, 9, 32, 0, 0, 10, 10, 10, 10, 98, 98, 9, 32, 10, 10, 95, 95, 0, 92, 9, 32, 36, 123, 0, 127, 48, 57, 0, 127, 0, 120, 0, 0, 0, 0, 48, 55, 48, 55, 0, 0, 0, 0, 0, 92, 0, 0, 0, 0, 0, 0, 0, 92, 45, 45, 0, 0, 0, 0, 0, 0, 0, 92, 0, 45, 0, 92, 0, 92, 0, 0, 0, 0, 0, 92, 0, 45, 10, 10, 0, 92, 48, 123, 48, 102, 48, 102, 48, 102, 0, 0, 0, 125, 0, 125, 0, 0, 0, 125, 0, 0, 0, 125, 0, 125, 0, 125, 0, 125, 0, 0, 0, 125, 0, 125, 0, 125, 0, 125, 0, 125, 0, 125, 0, 0, 0, 0, 48, 102, 0, 0, 0, 92, 36, 123, 0, 127, 48, 57, 0, 127, 0, 120, 0, 0, 0, 0, 48, 55, 48, 55, 0, 0, 0, 0, 0, 92, 0, 0, 0, 0, 0, 0, 0, 92, 45, 45, 0, 0, 0, 0, 0, 0, 0, 92, 0, 45, 0, 92, 0, 92, 0, 0, 0, 0, 0, 92, 0, 45, 10, 10, 0, 92, 48, 123, 48, 102, 48, 102, 48, 102, 0, 0, 0, 125, 0, 125, 0, 0, 0, 125, 0, 0, 0, 125, 0, 125, 0, 125, 0, 125, 0, 0, 0, 125, 0, 125, 0, 125, 0, 125, 0, 125, 0, 125, 0, 0, 0, 0, 48, 102, 0, 0, 0, 92, 9, 32, 0, 26, 0, 92, 0, 26, 0, 35, 36, 123, 0, 127, 48, 57, 0, 127, 0, 26, 0, 35, 9, 32, 36, 123, 0, 127, 48, 57, 0, 127, 0, 32, 9, 32, 65, 122, 65, 122, 36, 64, 0, 127, 48, 57, 0, 127, 0, 127, 0, 127, 0, 127, 9, 32, 0, 0, 61, 126, 10, 10, 10, 10, 0, 127, 0, 127, 48, 57, 115, 115, 38, 38, 42, 42, 64, 64, 58, 58, 60, 61, 62, 62, 61, 126, 61, 61, 61, 62, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 93, 93, 10, 10, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 124, 124, 0, 127, 0, 127, 9, 32, 10, 10, 10, 10, 10, 10, 0, 0, 0, 127, 0, 127, 61, 61, 0, 0, 9, 32, 0, 0, 61, 126, 10, 10, 10, 10, 38, 38, 42, 42, 64, 64, 60, 61, 62, 62, 61, 126, 61, 61, 61, 62, 0, 127, 93, 93, 10, 10, 124, 124, 0, 126, 0, 127, 0, 61, 9, 61, 9, 61, 0, 0, 9, 61, 9, 62, 46, 46, 46, 46, 58, 58, 9, 32, 0, 0, 0, 127, 0, 0, 9, 124, 0, 0, 10, 10, 10, 10, 0, 0, 9, 61, 58, 58, 60, 60, 62, 62, 9, 32, 10, 10, 0, 127, 102, 102, 101, 101, 110, 110, 104, 104, 0, 127, 0, 127, 0, 127, 0, 0, 0, 127, 10, 10, 0, 123, 9, 32, 10, 10, 10, 10, 10, 10, 0, 0, 111, 111, 0, 0, 0, 127, 0, 127, 9, 32, 0, 0, 10, 10, 10, 10, 10, 10, 0, 0, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 58, 61, 0, 0, 61, 126, 61, 61, 0, 0, 0, 0, 0, 0, 9, 32, 61, 61, 9, 32, 61, 126, 10, 10, 10, 10, 65, 122, 0, 122, 38, 61, 0, 0, 42, 61, 61, 61, 9, 92, 9, 92, 9, 92, 46, 46, 46, 46, 0, 26, 0, 127, 0, 127, 61, 61, 0, 0, 61, 126, 61, 62, 0, 0, 0, 0, 0, 0, 0, 0, 61, 126, 0, 127, 48, 57, 38, 38, 42, 42, 64, 64, 60, 61, 62, 62, 61, 61, 61, 62, 0, 127, 48, 57, 0, 127, 124, 124, 64, 64, 60, 61, 0, 0, 10, 34, 10, 39, 96, 96, 62, 62, 61, 126, 61, 62, 0, 122, 0, 0, 0, 127, 0, 127, 0, 120, 0, 0, 0, 0, 48, 55, 48, 55, 0, 0, 0, 0, 0, 92, 0, 0, 0, 0, 0, 0, 0, 92, 45, 45, 0, 0, 0, 0, 0, 0, 0, 92, 0, 45, 0, 92, 0, 92, 0, 0, 0, 0, 0, 92, 0, 45, 10, 10, 0, 92, 48, 123, 48, 102, 48, 102, 48, 102, 0, 0, 0, 125, 0, 125, 0, 0, 0, 125, 0, 0, 0, 125, 0, 125, 0, 125, 0, 125, 0, 0, 0, 125, 0, 125, 0, 125, 0, 125, 0, 125, 0, 125, 0, 125, 0, 125, 0, 125, 0, 125, 0, 125, 0, 125, 0, 125, 0, 125, 0, 125, 0, 125, 0, 125, 0, 125, 0, 125, 0, 0, 0, 0, 48, 102, 0, 0, 0, 127, 0, 127, 0, 127, 0, 0, 10, 10, 0, 0, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 61, 126, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 0, 61, 124, 0, 92, 9, 32, 0, 0, 10, 10, 10, 10, 10, 10, 0, 0, 0, 127, 0, 127, 9, 32, 0, 0, 10, 10, 10, 10, 10, 10, 0, 0, 0, 127, 0, 127, 61, 61, 0, 0, 9, 32, 0, 0, 61, 126, 10, 10, 10, 10, 0, 127, 0, 127, 48, 57, 61, 61, 38, 61, 0, 0, 0, 0, 42, 61, 61, 62, 46, 57, 46, 46, 10, 10, 48, 101, 48, 95, 46, 120, 48, 114, 43, 57, 48, 105, 102, 102, 0, 0, 101, 105, 0, 0, 0, 0, 48, 114, 48, 114, 48, 114, 48, 114, 105, 114, 102, 102, 0, 0, 101, 105, 115, 115, 0, 0, 0, 0, 48, 114, 48, 114, 48, 114, 48, 114, 48, 114, 48, 114, 48, 114, 48, 114, 46, 114, 48, 114, 46, 114, 48, 114, 58, 58, 60, 61, 62, 62, 61, 126, 61, 61, 61, 62, 0, 127, 0, 127, 0, 0, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 0, 10, 10, 0, 0, 0, 0, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 9, 92, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 0, 61, 124, 0, 0, 9, 92, 9, 92, 9, 92, 10, 10, 46, 46, 10, 10, 10, 61, 10, 10, 10, 101, 10, 110, 10, 100, 10, 10, 0]];
    $send(self, '_lex_trans_keys=', Opal.to_a($writer));
    $writer[$rb_minus($writer["length"], 1)];;
    (function(self, $parent_nesting) {
      var $nesting = [self].concat($parent_nesting);

      
      self.$attr_accessor("_lex_key_spans");
      return self.$private("_lex_key_spans", "_lex_key_spans=");
    })(Opal.get_singleton_class(self), $nesting);
    
    $writer = [[0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 27, 128, 128, 128, 128, 46, 78, 78, 93, 27, 27, 46, 100, 27, 33, 1, 93, 78, 103, 128, 128, 128, 128, 46, 78, 78, 93, 27, 27, 46, 100, 27, 33, 1, 93, 78, 103, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 27, 128, 1, 1, 128, 1, 1, 1, 1, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 1, 1, 1, 1, 9, 1, 1, 1, 1, 1, 1, 1, 1, 128, 1, 128, 84, 1, 84, 1, 1, 1, 1, 1, 1, 123, 1, 84, 84, 84, 84, 84, 1, 128, 128, 66, 1, 128, 128, 1, 1, 1, 1, 128, 87, 1, 46, 78, 78, 93, 27, 27, 46, 100, 27, 33, 1, 93, 78, 103, 128, 128, 128, 128, 128, 128, 1, 1, 128, 15, 10, 10, 10, 10, 1, 1, 1, 1, 1, 1, 1, 128, 1, 84, 84, 84, 84, 84, 84, 1, 1, 84, 84, 1, 1, 1, 1, 1, 96, 24, 0, 1, 1, 1, 24, 1, 1, 93, 24, 88, 128, 10, 128, 121, 0, 0, 8, 8, 0, 0, 93, 0, 0, 0, 93, 1, 0, 0, 0, 93, 46, 93, 93, 0, 0, 93, 46, 1, 93, 76, 55, 55, 55, 0, 126, 126, 0, 126, 0, 126, 126, 126, 126, 0, 126, 126, 126, 126, 126, 126, 0, 0, 55, 0, 93, 88, 128, 10, 128, 121, 0, 0, 8, 8, 0, 0, 93, 0, 0, 0, 93, 1, 0, 0, 0, 93, 46, 93, 93, 0, 0, 93, 46, 1, 93, 76, 55, 55, 55, 0, 126, 126, 0, 126, 0, 126, 126, 126, 126, 0, 126, 126, 126, 126, 126, 126, 0, 0, 55, 0, 93, 24, 27, 93, 27, 36, 88, 128, 10, 128, 27, 36, 24, 88, 128, 10, 128, 33, 24, 58, 58, 29, 128, 10, 128, 128, 128, 128, 24, 0, 66, 1, 1, 128, 128, 10, 1, 1, 1, 1, 1, 2, 1, 66, 1, 2, 128, 128, 128, 128, 128, 128, 128, 1, 1, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 1, 128, 128, 24, 1, 1, 1, 0, 128, 128, 1, 0, 24, 0, 66, 1, 1, 1, 1, 1, 2, 1, 66, 1, 2, 128, 1, 1, 1, 127, 128, 62, 53, 53, 0, 53, 54, 1, 1, 1, 24, 0, 128, 0, 116, 0, 1, 1, 0, 53, 1, 1, 1, 24, 1, 128, 1, 1, 1, 1, 128, 128, 128, 0, 128, 1, 124, 24, 1, 1, 1, 0, 1, 0, 128, 128, 24, 0, 1, 1, 1, 0, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 4, 0, 66, 1, 0, 0, 0, 24, 1, 24, 66, 1, 1, 58, 123, 24, 0, 20, 1, 84, 84, 84, 1, 1, 27, 128, 128, 1, 0, 66, 2, 0, 0, 0, 0, 66, 128, 10, 1, 1, 1, 2, 1, 1, 2, 128, 10, 128, 1, 1, 2, 0, 25, 30, 1, 1, 66, 2, 123, 0, 128, 128, 121, 0, 0, 8, 8, 0, 0, 93, 0, 0, 0, 93, 1, 0, 0, 0, 93, 46, 93, 93, 0, 0, 93, 46, 1, 93, 76, 55, 55, 55, 0, 126, 126, 0, 126, 0, 126, 126, 126, 126, 0, 126, 126, 126, 126, 126, 126, 126, 126, 126, 126, 126, 126, 126, 126, 126, 126, 126, 126, 126, 0, 0, 55, 0, 128, 128, 128, 0, 1, 0, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 66, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 0, 64, 93, 24, 0, 1, 1, 1, 0, 128, 128, 24, 0, 1, 1, 1, 0, 128, 128, 1, 0, 24, 0, 66, 1, 1, 128, 128, 10, 1, 24, 0, 0, 20, 2, 12, 1, 1, 54, 48, 75, 67, 15, 58, 1, 0, 5, 0, 0, 67, 67, 67, 67, 10, 1, 0, 5, 1, 0, 0, 67, 67, 67, 67, 67, 67, 67, 67, 69, 67, 69, 67, 1, 2, 1, 66, 1, 2, 128, 128, 0, 128, 128, 128, 128, 128, 128, 0, 1, 0, 0, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 84, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 0, 64, 0, 84, 84, 84, 1, 1, 1, 52, 1, 92, 101, 91, 1]];
    $send(self, '_lex_key_spans=', Opal.to_a($writer));
    $writer[$rb_minus($writer["length"], 1)];;
    (function(self, $parent_nesting) {
      var $nesting = [self].concat($parent_nesting);

      
      self.$attr_accessor("_lex_index_offsets");
      return self.$private("_lex_index_offsets", "_lex_index_offsets=");
    })(Opal.get_singleton_class(self), $nesting);
    
    $writer = [[0, 0, 2, 4, 6, 8, 10, 12, 14, 16, 18, 46, 175, 304, 433, 562, 609, 688, 767, 861, 889, 917, 964, 1065, 1093, 1127, 1129, 1223, 1302, 1406, 1535, 1664, 1793, 1922, 1969, 2048, 2127, 2221, 2249, 2277, 2324, 2425, 2453, 2487, 2489, 2583, 2662, 2766, 2895, 3024, 3153, 3282, 3411, 3540, 3669, 3798, 3927, 4056, 4185, 4314, 4443, 4471, 4600, 4602, 4604, 4733, 4735, 4737, 4739, 4741, 4870, 4999, 5128, 5257, 5386, 5515, 5644, 5773, 5902, 6031, 6160, 6289, 6418, 6547, 6676, 6805, 6934, 7063, 7065, 7067, 7069, 7071, 7081, 7083, 7085, 7087, 7089, 7091, 7093, 7095, 7097, 7226, 7228, 7357, 7442, 7444, 7529, 7531, 7533, 7535, 7537, 7539, 7541, 7665, 7667, 7752, 7837, 7922, 8007, 8092, 8094, 8223, 8352, 8419, 8421, 8550, 8679, 8681, 8683, 8685, 8687, 8816, 8904, 8906, 8953, 9032, 9111, 9205, 9233, 9261, 9308, 9409, 9437, 9471, 9473, 9567, 9646, 9750, 9879, 10008, 10137, 10266, 10395, 10524, 10526, 10528, 10657, 10673, 10684, 10695, 10706, 10717, 10719, 10721, 10723, 10725, 10727, 10729, 10731, 10860, 10862, 10947, 11032, 11117, 11202, 11287, 11372, 11374, 11376, 11461, 11546, 11548, 11550, 11552, 11554, 11556, 11653, 11678, 11679, 11681, 11683, 11685, 11710, 11712, 11714, 11808, 11833, 11922, 12051, 12062, 12191, 12313, 12314, 12315, 12324, 12333, 12334, 12335, 12429, 12430, 12431, 12432, 12526, 12528, 12529, 12530, 12531, 12625, 12672, 12766, 12860, 12861, 12862, 12956, 13003, 13005, 13099, 13176, 13232, 13288, 13344, 13345, 13472, 13599, 13600, 13727, 13728, 13855, 13982, 14109, 14236, 14237, 14364, 14491, 14618, 14745, 14872, 14999, 15000, 15001, 15057, 15058, 15152, 15241, 15370, 15381, 15510, 15632, 15633, 15634, 15643, 15652, 15653, 15654, 15748, 15749, 15750, 15751, 15845, 15847, 15848, 15849, 15850, 15944, 15991, 16085, 16179, 16180, 16181, 16275, 16322, 16324, 16418, 16495, 16551, 16607, 16663, 16664, 16791, 16918, 16919, 17046, 17047, 17174, 17301, 17428, 17555, 17556, 17683, 17810, 17937, 18064, 18191, 18318, 18319, 18320, 18376, 18377, 18471, 18496, 18524, 18618, 18646, 18683, 18772, 18901, 18912, 19041, 19069, 19106, 19131, 19220, 19349, 19360, 19489, 19523, 19548, 19607, 19666, 19696, 19825, 19836, 19965, 20094, 20223, 20352, 20377, 20378, 20445, 20447, 20449, 20578, 20707, 20718, 20720, 20722, 20724, 20726, 20728, 20731, 20733, 20800, 20802, 20805, 20934, 21063, 21192, 21321, 21450, 21579, 21708, 21710, 21712, 21841, 21970, 22099, 22228, 22357, 22486, 22615, 22744, 22873, 23002, 23131, 23260, 23389, 23518, 23647, 23776, 23905, 24034, 24163, 24292, 24421, 24550, 24679, 24808, 24937, 25066, 25195, 25324, 25453, 25582, 25711, 25840, 25969, 26098, 26227, 26356, 26485, 26614, 26743, 26872, 27001, 27130, 27259, 27388, 27517, 27646, 27775, 27904, 28033, 28162, 28291, 28420, 28549, 28678, 28807, 28936, 29065, 29194, 29323, 29452, 29581, 29710, 29839, 29968, 30097, 30226, 30355, 30484, 30613, 30742, 30871, 31000, 31129, 31258, 31387, 31516, 31645, 31774, 31903, 32032, 32161, 32290, 32419, 32421, 32550, 32679, 32704, 32706, 32708, 32710, 32711, 32840, 32969, 32971, 32972, 32997, 32998, 33065, 33067, 33069, 33071, 33073, 33075, 33078, 33080, 33147, 33149, 33152, 33281, 33283, 33285, 33287, 33415, 33544, 33607, 33661, 33715, 33716, 33770, 33825, 33827, 33829, 33831, 33856, 33857, 33986, 33987, 34104, 34105, 34107, 34109, 34110, 34164, 34166, 34168, 34170, 34195, 34197, 34326, 34328, 34330, 34332, 34334, 34463, 34592, 34721, 34722, 34851, 34853, 34978, 35003, 35005, 35007, 35009, 35010, 35012, 35013, 35142, 35271, 35296, 35297, 35299, 35301, 35303, 35304, 35433, 35562, 35691, 35820, 35949, 36078, 36207, 36336, 36465, 36594, 36723, 36852, 36981, 37110, 37239, 37368, 37497, 37626, 37631, 37632, 37699, 37701, 37702, 37703, 37704, 37729, 37731, 37756, 37823, 37825, 37827, 37886, 38010, 38035, 38036, 38057, 38059, 38144, 38229, 38314, 38316, 38318, 38346, 38475, 38604, 38606, 38607, 38674, 38677, 38678, 38679, 38680, 38681, 38748, 38877, 38888, 38890, 38892, 38894, 38897, 38899, 38901, 38904, 39033, 39044, 39173, 39175, 39177, 39180, 39181, 39207, 39238, 39240, 39242, 39309, 39312, 39436, 39437, 39566, 39695, 39817, 39818, 39819, 39828, 39837, 39838, 39839, 39933, 39934, 39935, 39936, 40030, 40032, 40033, 40034, 40035, 40129, 40176, 40270, 40364, 40365, 40366, 40460, 40507, 40509, 40603, 40680, 40736, 40792, 40848, 40849, 40976, 41103, 41104, 41231, 41232, 41359, 41486, 41613, 41740, 41741, 41868, 41995, 42122, 42249, 42376, 42503, 42630, 42757, 42884, 43011, 43138, 43265, 43392, 43519, 43646, 43773, 43900, 44027, 44154, 44155, 44156, 44212, 44213, 44342, 44471, 44600, 44601, 44603, 44604, 44733, 44862, 44991, 45120, 45249, 45378, 45507, 45636, 45765, 45894, 46023, 46152, 46281, 46410, 46539, 46668, 46797, 46926, 47055, 47184, 47313, 47442, 47571, 47700, 47829, 47958, 48087, 48216, 48345, 48474, 48603, 48732, 48861, 48990, 49119, 49248, 49377, 49506, 49635, 49764, 49893, 50022, 50151, 50280, 50409, 50538, 50667, 50796, 50925, 51054, 51183, 51312, 51441, 51570, 51699, 51828, 51957, 52086, 52215, 52344, 52473, 52540, 52669, 52798, 52927, 53056, 53185, 53314, 53443, 53572, 53701, 53830, 53959, 54088, 54217, 54346, 54475, 54604, 54733, 54862, 54991, 55120, 55249, 55378, 55507, 55636, 55765, 55766, 55831, 55925, 55950, 55951, 55953, 55955, 55957, 55958, 56087, 56216, 56241, 56242, 56244, 56246, 56248, 56249, 56378, 56507, 56509, 56510, 56535, 56536, 56603, 56605, 56607, 56736, 56865, 56876, 56878, 56903, 56904, 56905, 56926, 56929, 56942, 56944, 56946, 57001, 57050, 57126, 57194, 57210, 57269, 57271, 57272, 57278, 57279, 57280, 57348, 57416, 57484, 57552, 57563, 57565, 57566, 57572, 57574, 57575, 57576, 57644, 57712, 57780, 57848, 57916, 57984, 58052, 58120, 58190, 58258, 58328, 58396, 58398, 58401, 58403, 58470, 58472, 58475, 58604, 58733, 58734, 58863, 58992, 59121, 59250, 59379, 59508, 59509, 59511, 59512, 59513, 59642, 59771, 59900, 60029, 60158, 60287, 60416, 60545, 60674, 60803, 60932, 61061, 61190, 61319, 61448, 61577, 61706, 61835, 61964, 62093, 62222, 62351, 62480, 62609, 62738, 62867, 62996, 63125, 63254, 63383, 63512, 63641, 63770, 63899, 64028, 64157, 64286, 64371, 64500, 64629, 64758, 64887, 65016, 65145, 65274, 65403, 65532, 65661, 65790, 65919, 66048, 66177, 66306, 66435, 66564, 66693, 66822, 66951, 67080, 67209, 67338, 67467, 67596, 67725, 67854, 67983, 68112, 68241, 68370, 68499, 68628, 68757, 68886, 69015, 69144, 69273, 69402, 69531, 69660, 69789, 69918, 70047, 70176, 70305, 70434, 70563, 70692, 70821, 70950, 71079, 71208, 71337, 71466, 71595, 71724, 71853, 71982, 72111, 72240, 72369, 72498, 72627, 72756, 72757, 72822, 72823, 72908, 72993, 73078, 73080, 73082, 73084, 73137, 73139, 73232, 73334, 73426]];
    $send(self, '_lex_index_offsets=', Opal.to_a($writer));
    $writer[$rb_minus($writer["length"], 1)];;
    (function(self, $parent_nesting) {
      var $nesting = [self].concat($parent_nesting);

      
      self.$attr_accessor("_lex_indicies");
      return self.$private("_lex_indicies", "_lex_indicies=");
    })(Opal.get_singleton_class(self), $nesting);
    
    $writer = [[1, 0, 2, 0, 3, 0, 4, 0, 5, 0, 6, 0, 7, 0, 8, 0, 9, 0, 10, 0, 0, 0, 10, 0, 0, 0, 0, 0, 11, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 10, 0, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 14, 14, 12, 14, 12, 14, 14, 12, 12, 14, 14, 14, 15, 14, 14, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 14, 14, 14, 14, 14, 14, 14, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 12, 14, 12, 12, 13, 14, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 12, 12, 12, 14, 12, 13, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 12, 12, 12, 12, 12, 12, 12, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 12, 12, 12, 12, 14, 12, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 12, 12, 12, 12, 12, 14, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 12, 12, 12, 12, 12, 12, 18, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 12, 12, 12, 12, 13, 12, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 12, 12, 12, 12, 12, 13, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 12, 12, 12, 12, 12, 12, 12, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 12, 12, 12, 12, 13, 12, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 12, 12, 12, 12, 12, 13, 19, 20, 20, 20, 19, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 19, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 21, 20, 19, 22, 22, 22, 19, 22, 22, 22, 22, 22, 23, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 19, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 24, 22, 19, 22, 22, 22, 19, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 19, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 25, 22, 19, 26, 26, 26, 19, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 19, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 27, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 28, 26, 19, 29, 29, 29, 19, 29, 29, 29, 29, 29, 30, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 19, 29, 19, 29, 29, 29, 19, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 19, 29, 19, 20, 20, 20, 19, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 19, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 31, 20, 19, 32, 32, 32, 19, 32, 32, 32, 32, 32, 33, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 19, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 34, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 35, 32, 32, 32, 32, 32, 32, 36, 32, 19, 32, 32, 32, 19, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 19, 32, 37, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 38, 19, 38, 19, 19, 39, 39, 39, 19, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 19, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 40, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 41, 39, 19, 22, 22, 22, 19, 22, 22, 22, 22, 22, 23, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 19, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 25, 22, 19, 42, 42, 42, 19, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 19, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 42, 42, 42, 42, 42, 42, 42, 43, 43, 43, 43, 43, 43, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 43, 43, 43, 43, 43, 43, 42, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 46, 46, 44, 46, 44, 46, 46, 44, 44, 46, 46, 46, 47, 46, 46, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 46, 46, 46, 46, 46, 46, 46, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 44, 46, 44, 44, 45, 46, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 44, 44, 44, 46, 44, 45, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 44, 44, 44, 44, 44, 44, 44, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 44, 44, 44, 44, 46, 44, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 44, 44, 44, 44, 44, 46, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 44, 44, 44, 44, 44, 44, 50, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 44, 44, 44, 44, 45, 44, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 44, 44, 44, 44, 44, 45, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 44, 44, 44, 44, 44, 44, 44, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 44, 44, 44, 44, 45, 44, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 44, 44, 44, 44, 44, 45, 51, 52, 52, 52, 51, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 51, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 53, 52, 51, 54, 54, 54, 51, 54, 54, 54, 54, 54, 55, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 51, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 56, 54, 51, 54, 54, 54, 51, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 51, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 57, 54, 51, 58, 58, 58, 51, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 51, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 59, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 60, 58, 51, 61, 61, 61, 51, 61, 61, 61, 61, 61, 62, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 51, 61, 51, 61, 61, 61, 51, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 51, 61, 51, 52, 52, 52, 51, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 51, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 63, 52, 51, 64, 64, 64, 51, 64, 64, 64, 64, 64, 65, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 51, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 66, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 67, 64, 64, 64, 64, 64, 64, 68, 64, 51, 64, 64, 64, 51, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 51, 64, 69, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 70, 51, 70, 51, 51, 71, 71, 71, 51, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 51, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 72, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 73, 71, 51, 54, 54, 54, 51, 54, 54, 54, 54, 54, 55, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 51, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 57, 54, 51, 74, 74, 74, 51, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 51, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 74, 74, 74, 74, 74, 74, 74, 75, 75, 75, 75, 75, 75, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 75, 75, 75, 75, 75, 75, 74, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 78, 78, 76, 78, 76, 78, 78, 76, 76, 78, 78, 78, 79, 78, 78, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 78, 78, 78, 78, 78, 78, 78, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 76, 78, 76, 76, 77, 78, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 76, 76, 76, 78, 76, 77, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 76, 76, 76, 76, 76, 76, 76, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 76, 76, 76, 76, 78, 76, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 76, 76, 76, 76, 76, 78, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 76, 76, 76, 76, 76, 76, 82, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 76, 76, 76, 76, 77, 76, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 76, 76, 76, 76, 76, 77, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 76, 76, 76, 76, 76, 76, 76, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 76, 76, 76, 76, 77, 76, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 76, 76, 76, 76, 76, 77, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 85, 85, 83, 85, 83, 85, 85, 83, 83, 85, 85, 85, 86, 85, 85, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 85, 85, 85, 85, 85, 85, 85, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 83, 85, 83, 83, 84, 85, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 83, 83, 83, 85, 83, 84, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 83, 83, 83, 83, 83, 83, 83, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 83, 83, 83, 83, 85, 83, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 83, 83, 83, 83, 83, 85, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 83, 83, 83, 83, 83, 83, 89, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 83, 83, 83, 83, 84, 83, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 83, 83, 83, 83, 83, 84, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 83, 83, 83, 83, 83, 83, 83, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 83, 83, 83, 83, 84, 83, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 83, 83, 83, 83, 83, 84, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 91, 91, 92, 91, 92, 91, 91, 92, 92, 91, 91, 91, 93, 91, 91, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 91, 91, 91, 91, 91, 91, 91, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 92, 91, 92, 92, 90, 91, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 92, 92, 92, 91, 92, 90, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 92, 92, 92, 92, 92, 92, 92, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 92, 92, 92, 92, 91, 92, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 92, 92, 92, 92, 92, 91, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 92, 92, 92, 92, 92, 92, 96, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 92, 92, 92, 92, 95, 92, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 92, 92, 92, 92, 92, 95, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 92, 92, 92, 92, 92, 92, 92, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 92, 92, 92, 92, 97, 92, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 92, 92, 92, 92, 92, 97, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 98, 98, 98, 98, 98, 98, 98, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 98, 98, 98, 98, 99, 98, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 98, 98, 98, 98, 98, 99, 100, 101, 101, 101, 100, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 100, 101, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 104, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 105, 102, 102, 102, 102, 104, 102, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 102, 102, 102, 102, 103, 102, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 102, 102, 102, 102, 102, 103, 105, 102, 102, 106, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 109, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 110, 107, 107, 107, 107, 109, 107, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 107, 107, 107, 107, 108, 107, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 107, 107, 107, 107, 107, 108, 110, 107, 112, 111, 113, 111, 114, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 116, 111, 116, 116, 116, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 116, 111, 111, 111, 111, 117, 118, 111, 119, 111, 120, 121, 122, 123, 124, 117, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 125, 111, 126, 122, 127, 128, 111, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 129, 130, 122, 131, 115, 111, 115, 115, 115, 115, 115, 115, 115, 115, 132, 115, 115, 115, 115, 115, 115, 115, 115, 133, 115, 115, 134, 115, 135, 115, 115, 115, 136, 137, 111, 131, 111, 115, 111, 111, 111, 111, 111, 111, 111, 111, 111, 138, 111, 138, 138, 138, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 138, 111, 111, 111, 111, 139, 140, 111, 141, 111, 142, 143, 144, 145, 146, 139, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 147, 111, 148, 144, 149, 150, 111, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 151, 152, 144, 113, 108, 111, 108, 108, 108, 108, 108, 108, 108, 108, 153, 108, 108, 108, 108, 108, 108, 108, 108, 154, 108, 108, 155, 108, 156, 108, 108, 108, 157, 158, 111, 113, 111, 108, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 109, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 110, 111, 111, 111, 111, 109, 111, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 111, 111, 111, 111, 108, 111, 108, 108, 108, 108, 108, 159, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 111, 111, 111, 111, 111, 108, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 109, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 110, 111, 111, 111, 111, 109, 111, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 111, 111, 111, 111, 108, 111, 108, 108, 108, 108, 160, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 111, 111, 111, 111, 111, 108, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 109, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 110, 111, 111, 111, 111, 109, 111, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 111, 111, 111, 111, 108, 111, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 161, 108, 108, 108, 108, 108, 108, 108, 111, 111, 111, 111, 111, 108, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 109, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 110, 111, 111, 111, 111, 109, 111, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 111, 111, 111, 111, 108, 111, 108, 108, 162, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 111, 111, 111, 111, 111, 108, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 109, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 110, 111, 111, 111, 111, 109, 111, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 111, 111, 111, 111, 108, 111, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 163, 108, 108, 108, 108, 108, 111, 111, 111, 111, 111, 108, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 109, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 110, 111, 111, 111, 111, 109, 111, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 111, 111, 111, 111, 108, 111, 108, 108, 108, 108, 159, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 111, 111, 111, 111, 111, 108, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 109, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 110, 111, 111, 111, 111, 109, 111, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 111, 111, 111, 111, 108, 111, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 164, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 111, 111, 111, 111, 111, 108, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 109, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 110, 111, 111, 111, 111, 109, 111, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 111, 111, 111, 111, 108, 111, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 165, 108, 108, 108, 108, 108, 108, 108, 166, 108, 108, 108, 108, 108, 108, 111, 111, 111, 111, 111, 108, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 109, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 110, 111, 111, 111, 111, 109, 111, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 111, 111, 111, 111, 108, 111, 108, 108, 108, 108, 167, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 111, 111, 111, 111, 111, 108, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 109, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 110, 111, 111, 111, 111, 109, 111, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 111, 111, 111, 111, 108, 111, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 168, 108, 108, 108, 108, 108, 108, 108, 111, 111, 111, 111, 111, 108, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 109, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 110, 111, 111, 111, 111, 109, 111, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 111, 111, 111, 111, 108, 111, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 159, 108, 108, 108, 108, 108, 108, 108, 111, 111, 111, 111, 111, 108, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 109, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 110, 111, 111, 111, 111, 109, 111, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 111, 111, 111, 111, 108, 111, 108, 108, 108, 108, 108, 108, 108, 108, 169, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 111, 111, 111, 111, 111, 108, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 109, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 110, 111, 111, 111, 111, 109, 111, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 111, 111, 111, 111, 108, 111, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 159, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 111, 111, 111, 111, 111, 108, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 109, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 110, 111, 111, 111, 111, 109, 111, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 111, 111, 111, 111, 108, 111, 108, 108, 108, 108, 108, 108, 108, 170, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 111, 111, 111, 111, 111, 108, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 109, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 110, 111, 111, 111, 111, 109, 111, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 111, 111, 111, 111, 108, 111, 108, 108, 108, 108, 108, 108, 108, 108, 171, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 111, 111, 111, 111, 111, 108, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 109, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 110, 111, 111, 111, 111, 109, 111, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 111, 111, 111, 111, 108, 111, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 163, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 111, 111, 111, 111, 111, 108, 173, 172, 174, 172, 175, 172, 144, 172, 176, 172, 172, 172, 172, 172, 172, 172, 177, 172, 178, 172, 179, 172, 144, 172, 180, 172, 144, 172, 181, 172, 175, 172, 183, 182, 184, 184, 184, 184, 184, 184, 184, 184, 184, 186, 184, 186, 186, 186, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 186, 184, 184, 184, 184, 184, 184, 184, 187, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 184, 188, 184, 184, 185, 184, 185, 185, 185, 189, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 184, 184, 184, 184, 184, 185, 190, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 192, 184, 192, 192, 192, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 192, 184, 184, 184, 184, 184, 184, 184, 193, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 191, 191, 191, 191, 191, 191, 191, 191, 191, 191, 191, 191, 191, 191, 191, 191, 191, 191, 191, 191, 191, 191, 191, 191, 191, 191, 184, 194, 184, 184, 191, 184, 191, 191, 191, 195, 191, 191, 191, 191, 191, 191, 191, 191, 191, 191, 191, 191, 191, 191, 191, 191, 191, 191, 191, 191, 191, 191, 184, 184, 184, 184, 184, 191, 197, 196, 197, 197, 197, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 197, 196, 196, 196, 196, 196, 196, 196, 198, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 199, 196, 200, 196, 201, 196, 201, 201, 201, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 201, 196, 196, 196, 196, 196, 196, 196, 202, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 203, 196, 204, 205, 207, 206, 208, 206, 209, 206, 210, 206, 211, 206, 212, 213, 213, 213, 212, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 212, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 213, 213, 213, 213, 213, 213, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 213, 215, 204, 216, 217, 216, 216, 216, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 216, 204, 204, 218, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 219, 219, 219, 219, 219, 219, 219, 219, 219, 219, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 220, 204, 221, 222, 221, 221, 221, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 221, 204, 204, 223, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 224, 224, 224, 224, 224, 224, 224, 224, 224, 224, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 225, 204, 227, 228, 227, 227, 227, 226, 226, 226, 226, 226, 226, 226, 226, 226, 226, 226, 226, 226, 226, 226, 226, 226, 226, 227, 226, 226, 229, 226, 226, 226, 226, 226, 226, 226, 226, 226, 226, 226, 226, 230, 230, 230, 230, 230, 230, 230, 230, 230, 230, 226, 226, 226, 226, 226, 226, 226, 226, 226, 226, 226, 226, 226, 226, 226, 226, 226, 226, 226, 226, 226, 226, 226, 226, 226, 226, 226, 226, 226, 226, 226, 226, 226, 226, 231, 226, 233, 234, 233, 233, 233, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 233, 232, 232, 235, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 236, 236, 236, 236, 236, 236, 236, 236, 236, 236, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 237, 232, 233, 238, 233, 233, 233, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 233, 232, 232, 235, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 236, 236, 236, 236, 236, 236, 236, 236, 236, 236, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 237, 232, 217, 204, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 241, 241, 239, 241, 239, 241, 241, 239, 239, 241, 241, 241, 242, 241, 241, 243, 243, 243, 243, 243, 243, 243, 243, 243, 243, 241, 241, 241, 241, 241, 241, 241, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 239, 241, 239, 239, 240, 241, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 239, 239, 239, 241, 239, 240, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 241, 241, 241, 241, 241, 241, 241, 241, 241, 241, 239, 239, 239, 239, 239, 239, 239, 241, 241, 241, 241, 241, 241, 241, 241, 241, 241, 241, 241, 241, 241, 241, 241, 241, 241, 241, 241, 241, 241, 241, 241, 241, 241, 239, 239, 239, 239, 241, 239, 241, 241, 241, 241, 241, 241, 241, 241, 241, 241, 241, 241, 241, 241, 241, 241, 241, 241, 241, 241, 241, 241, 241, 241, 241, 241, 239, 239, 239, 239, 239, 241, 244, 241, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 241, 239, 244, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 246, 239, 239, 239, 239, 247, 239, 239, 239, 239, 239, 248, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 215, 239, 239, 239, 245, 245, 245, 245, 245, 245, 245, 245, 245, 245, 245, 245, 245, 245, 245, 245, 245, 245, 245, 245, 245, 245, 245, 245, 245, 245, 239, 239, 239, 239, 245, 249, 245, 245, 245, 245, 245, 245, 245, 245, 245, 245, 245, 245, 245, 245, 245, 245, 245, 245, 245, 245, 245, 245, 245, 245, 245, 245, 239, 239, 239, 248, 239, 245, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 252, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 250, 250, 250, 250, 250, 250, 250, 250, 250, 250, 251, 251, 251, 251, 251, 251, 251, 250, 250, 250, 250, 250, 250, 250, 250, 250, 250, 250, 250, 250, 250, 250, 250, 250, 250, 250, 250, 250, 250, 250, 250, 250, 250, 251, 251, 251, 251, 250, 251, 250, 250, 250, 250, 250, 250, 250, 250, 250, 250, 250, 250, 250, 250, 250, 250, 250, 250, 250, 250, 250, 250, 250, 250, 250, 250, 251, 251, 251, 251, 251, 250, 254, 253, 257, 256, 252, 251, 257, 258, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 246, 239, 239, 239, 239, 247, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 245, 245, 245, 245, 245, 245, 245, 245, 245, 245, 245, 245, 245, 245, 245, 245, 245, 245, 245, 245, 245, 245, 245, 245, 245, 245, 239, 239, 239, 239, 245, 249, 245, 245, 245, 245, 245, 245, 245, 245, 245, 245, 245, 245, 245, 245, 245, 245, 245, 245, 245, 245, 245, 245, 245, 245, 245, 245, 239, 239, 239, 239, 239, 245, 260, 259, 259, 259, 259, 259, 259, 259, 259, 259, 259, 259, 259, 259, 259, 259, 259, 259, 259, 259, 259, 259, 259, 259, 259, 259, 259, 259, 259, 259, 259, 259, 259, 259, 259, 259, 259, 259, 259, 259, 259, 259, 259, 259, 259, 259, 259, 259, 259, 259, 259, 259, 259, 259, 259, 259, 259, 259, 259, 259, 259, 259, 259, 259, 259, 259, 259, 259, 259, 259, 259, 259, 259, 259, 259, 259, 259, 259, 259, 259, 259, 259, 259, 259, 259, 259, 257, 259, 257, 260, 261, 262, 262, 262, 261, 262, 262, 262, 262, 262, 262, 262, 262, 262, 262, 262, 262, 262, 262, 262, 262, 262, 262, 262, 262, 262, 261, 262, 262, 262, 262, 262, 262, 262, 262, 262, 262, 262, 262, 262, 262, 262, 262, 262, 262, 263, 262, 261, 264, 264, 264, 261, 264, 264, 264, 264, 264, 265, 264, 264, 264, 264, 264, 264, 264, 264, 264, 264, 264, 264, 264, 264, 264, 261, 264, 264, 264, 264, 264, 264, 264, 264, 264, 264, 264, 264, 264, 264, 264, 264, 264, 264, 264, 264, 264, 264, 264, 264, 264, 264, 264, 264, 264, 264, 264, 264, 264, 264, 264, 264, 264, 264, 264, 264, 264, 264, 264, 264, 264, 264, 264, 264, 264, 264, 266, 264, 261, 264, 264, 264, 261, 264, 264, 264, 264, 264, 264, 264, 264, 264, 264, 264, 264, 264, 264, 264, 264, 264, 264, 264, 264, 264, 261, 264, 264, 264, 264, 264, 264, 264, 264, 264, 264, 264, 264, 264, 264, 264, 264, 264, 264, 264, 264, 264, 264, 264, 264, 264, 264, 264, 264, 264, 264, 264, 264, 264, 264, 264, 264, 264, 264, 264, 264, 264, 264, 264, 264, 264, 264, 264, 264, 264, 264, 267, 264, 261, 268, 268, 268, 261, 268, 268, 268, 268, 268, 268, 268, 268, 268, 268, 268, 268, 268, 268, 268, 268, 268, 268, 268, 268, 268, 261, 268, 268, 268, 268, 268, 268, 268, 268, 268, 268, 268, 268, 268, 268, 268, 268, 268, 268, 268, 268, 268, 268, 268, 268, 268, 268, 268, 268, 268, 268, 268, 268, 268, 268, 268, 268, 269, 268, 268, 268, 268, 268, 268, 268, 268, 268, 268, 268, 268, 268, 268, 268, 268, 268, 268, 268, 268, 268, 268, 268, 268, 268, 268, 268, 268, 270, 268, 261, 271, 271, 271, 261, 271, 271, 271, 271, 271, 272, 271, 271, 271, 271, 271, 271, 271, 271, 271, 271, 271, 271, 271, 271, 271, 261, 271, 261, 271, 271, 271, 261, 271, 271, 271, 271, 271, 271, 271, 271, 271, 271, 271, 271, 271, 271, 271, 271, 271, 271, 271, 271, 271, 261, 271, 261, 262, 262, 262, 261, 262, 262, 262, 262, 262, 262, 262, 262, 262, 262, 262, 262, 262, 262, 262, 262, 262, 262, 262, 262, 262, 261, 262, 262, 262, 262, 262, 262, 262, 262, 262, 262, 262, 262, 262, 262, 262, 262, 262, 262, 273, 262, 261, 274, 274, 274, 261, 274, 274, 274, 274, 274, 275, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 261, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 276, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 277, 274, 274, 274, 274, 274, 274, 278, 274, 261, 274, 274, 274, 261, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 261, 274, 279, 261, 261, 261, 261, 261, 261, 261, 261, 261, 261, 261, 261, 261, 261, 261, 261, 261, 261, 261, 261, 261, 261, 261, 261, 261, 261, 261, 261, 261, 261, 261, 280, 261, 280, 261, 261, 281, 281, 281, 261, 281, 281, 281, 281, 281, 281, 281, 281, 281, 281, 281, 281, 281, 281, 281, 281, 281, 281, 281, 281, 281, 261, 281, 281, 281, 281, 281, 281, 281, 281, 281, 281, 281, 281, 281, 281, 281, 281, 281, 281, 281, 281, 281, 281, 281, 281, 281, 281, 281, 281, 281, 281, 281, 281, 281, 281, 281, 281, 282, 281, 281, 281, 281, 281, 281, 281, 281, 281, 281, 281, 281, 281, 281, 281, 281, 281, 281, 281, 281, 281, 281, 281, 281, 281, 281, 281, 281, 283, 281, 261, 264, 264, 264, 261, 264, 264, 264, 264, 264, 265, 264, 264, 264, 264, 264, 264, 264, 264, 264, 264, 264, 264, 264, 264, 264, 261, 264, 264, 264, 264, 264, 264, 264, 264, 264, 264, 264, 264, 264, 264, 264, 264, 264, 264, 264, 264, 264, 264, 264, 264, 264, 264, 264, 264, 264, 264, 264, 264, 264, 264, 264, 264, 264, 264, 264, 264, 264, 264, 264, 264, 264, 264, 264, 264, 264, 264, 267, 264, 261, 284, 284, 284, 261, 284, 284, 284, 284, 284, 284, 284, 284, 284, 284, 284, 284, 284, 284, 284, 284, 284, 284, 284, 284, 284, 261, 284, 284, 284, 284, 284, 284, 284, 284, 284, 284, 284, 284, 284, 284, 284, 284, 284, 284, 284, 284, 284, 285, 285, 285, 285, 285, 285, 285, 285, 285, 285, 284, 284, 284, 284, 284, 284, 284, 285, 285, 285, 285, 285, 285, 284, 284, 284, 284, 284, 284, 284, 284, 284, 284, 284, 284, 284, 284, 284, 284, 284, 284, 284, 284, 284, 284, 284, 284, 284, 284, 285, 285, 285, 285, 285, 285, 284, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 287, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 288, 204, 204, 289, 204, 287, 204, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 204, 204, 204, 204, 286, 204, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 204, 204, 204, 204, 204, 286, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 287, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 288, 239, 239, 289, 239, 287, 239, 286, 286, 286, 286, 286, 286, 290, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 239, 239, 239, 239, 286, 239, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 239, 239, 239, 239, 239, 286, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 287, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 288, 239, 239, 289, 239, 287, 239, 286, 286, 286, 286, 286, 286, 286, 286, 291, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 239, 239, 239, 239, 286, 239, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 239, 239, 239, 239, 239, 286, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 287, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 288, 239, 239, 289, 239, 287, 239, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 292, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 239, 239, 239, 239, 286, 239, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 239, 239, 239, 239, 239, 286, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 287, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 288, 239, 239, 289, 239, 287, 239, 286, 286, 286, 292, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 239, 239, 239, 239, 286, 239, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 239, 239, 239, 239, 239, 286, 293, 293, 293, 293, 293, 293, 293, 293, 293, 293, 293, 293, 293, 293, 293, 293, 293, 293, 293, 293, 293, 293, 293, 293, 293, 293, 293, 293, 293, 293, 293, 293, 293, 295, 293, 293, 293, 293, 293, 293, 293, 293, 293, 293, 293, 293, 293, 293, 294, 294, 294, 294, 294, 294, 294, 294, 294, 294, 296, 293, 293, 293, 293, 295, 293, 294, 294, 294, 294, 294, 294, 294, 294, 294, 294, 294, 294, 294, 294, 294, 294, 294, 294, 294, 294, 294, 294, 294, 294, 294, 294, 293, 293, 293, 293, 294, 293, 294, 294, 294, 294, 294, 294, 294, 294, 294, 294, 294, 294, 294, 294, 294, 294, 294, 294, 294, 294, 294, 294, 294, 294, 294, 294, 293, 293, 293, 293, 293, 294, 296, 293, 293, 297, 298, 298, 298, 298, 298, 298, 298, 298, 298, 298, 298, 298, 298, 298, 298, 298, 298, 298, 298, 298, 298, 298, 298, 298, 298, 298, 298, 298, 298, 298, 298, 298, 298, 298, 298, 298, 298, 298, 298, 298, 298, 298, 298, 298, 298, 298, 298, 298, 299, 299, 299, 299, 299, 299, 299, 299, 299, 299, 298, 298, 298, 298, 298, 298, 298, 299, 299, 299, 299, 299, 299, 299, 299, 299, 299, 299, 299, 299, 299, 299, 299, 299, 299, 299, 299, 299, 299, 299, 299, 299, 299, 298, 298, 298, 298, 299, 298, 299, 299, 299, 299, 299, 299, 299, 299, 299, 299, 299, 299, 299, 299, 299, 299, 299, 299, 299, 299, 299, 299, 299, 299, 299, 299, 298, 298, 298, 298, 298, 299, 301, 300, 301, 300, 300, 302, 302, 302, 302, 302, 302, 302, 302, 302, 302, 300, 302, 302, 302, 302, 302, 302, 302, 302, 302, 302, 300, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 300, 305, 305, 305, 305, 305, 305, 305, 305, 305, 305, 304, 306, 306, 306, 306, 306, 306, 306, 306, 306, 306, 304, 308, 307, 309, 307, 310, 307, 311, 307, 313, 312, 314, 312, 315, 312, 298, 298, 298, 298, 298, 298, 298, 298, 298, 298, 298, 298, 298, 298, 298, 298, 298, 298, 298, 298, 298, 298, 298, 298, 298, 298, 298, 298, 298, 298, 298, 298, 298, 298, 298, 298, 298, 298, 298, 298, 298, 298, 298, 298, 298, 298, 298, 298, 316, 316, 316, 316, 316, 316, 316, 316, 316, 316, 298, 298, 298, 298, 298, 298, 298, 316, 316, 316, 316, 316, 316, 316, 316, 316, 316, 316, 316, 316, 316, 316, 316, 316, 316, 316, 316, 316, 316, 316, 316, 316, 316, 298, 298, 298, 298, 316, 298, 316, 316, 316, 316, 316, 316, 316, 316, 316, 316, 316, 316, 316, 316, 316, 316, 316, 316, 316, 316, 316, 316, 316, 316, 316, 316, 298, 298, 298, 298, 298, 316, 317, 304, 318, 319, 318, 318, 318, 304, 304, 304, 304, 304, 304, 304, 304, 304, 304, 304, 304, 304, 304, 304, 304, 304, 304, 318, 304, 304, 320, 304, 304, 304, 304, 304, 304, 304, 304, 304, 304, 304, 304, 304, 304, 304, 304, 304, 304, 304, 304, 304, 304, 304, 304, 321, 304, 304, 304, 304, 304, 304, 304, 304, 304, 304, 304, 304, 304, 304, 304, 304, 304, 304, 304, 304, 304, 304, 304, 304, 304, 304, 304, 304, 304, 304, 304, 322, 304, 323, 324, 323, 323, 323, 304, 304, 304, 304, 304, 304, 304, 304, 304, 304, 304, 304, 304, 304, 304, 304, 304, 304, 323, 304, 304, 325, 304, 304, 304, 304, 304, 304, 304, 304, 304, 304, 304, 304, 304, 304, 304, 304, 304, 304, 304, 304, 304, 304, 304, 304, 326, 304, 304, 304, 304, 304, 304, 304, 304, 304, 304, 304, 304, 304, 304, 304, 304, 304, 304, 304, 304, 304, 304, 304, 304, 304, 304, 304, 304, 304, 304, 304, 327, 304, 329, 330, 329, 329, 329, 328, 328, 328, 328, 328, 328, 328, 328, 328, 328, 328, 328, 328, 328, 328, 328, 328, 328, 329, 328, 328, 331, 328, 328, 328, 328, 328, 328, 328, 328, 328, 328, 328, 328, 328, 328, 328, 328, 328, 328, 328, 328, 328, 328, 328, 328, 332, 328, 328, 328, 328, 328, 328, 328, 328, 328, 328, 328, 328, 328, 328, 328, 328, 328, 328, 328, 328, 328, 328, 328, 328, 328, 328, 328, 328, 328, 328, 328, 333, 328, 335, 336, 335, 335, 335, 334, 334, 334, 334, 334, 334, 334, 334, 334, 334, 334, 334, 334, 334, 334, 334, 334, 334, 335, 334, 334, 337, 334, 334, 334, 334, 334, 334, 334, 334, 334, 334, 334, 334, 334, 334, 334, 334, 334, 334, 334, 334, 334, 334, 334, 334, 338, 334, 334, 334, 334, 334, 334, 334, 334, 334, 334, 334, 334, 334, 334, 334, 334, 334, 334, 334, 334, 334, 334, 334, 334, 334, 334, 334, 334, 334, 334, 334, 339, 334, 335, 336, 335, 335, 335, 334, 334, 334, 334, 334, 334, 334, 334, 334, 334, 334, 334, 334, 334, 334, 334, 334, 334, 335, 334, 334, 337, 334, 334, 334, 334, 334, 334, 334, 334, 334, 334, 334, 334, 334, 334, 334, 334, 334, 334, 334, 334, 334, 334, 334, 334, 340, 334, 334, 334, 334, 334, 334, 334, 334, 334, 334, 334, 334, 334, 334, 334, 334, 334, 334, 334, 334, 334, 334, 334, 334, 334, 334, 334, 334, 334, 334, 334, 339, 334, 335, 341, 335, 335, 335, 334, 334, 334, 334, 334, 334, 334, 334, 334, 334, 334, 334, 334, 334, 334, 334, 334, 334, 335, 334, 334, 337, 334, 334, 334, 334, 334, 334, 334, 334, 334, 334, 334, 334, 334, 334, 334, 334, 334, 334, 334, 334, 334, 334, 334, 334, 338, 334, 334, 334, 334, 334, 334, 334, 334, 334, 334, 334, 334, 334, 334, 334, 334, 334, 334, 334, 334, 334, 334, 334, 334, 334, 334, 334, 334, 334, 334, 334, 339, 334, 342, 304, 319, 304, 344, 345, 344, 344, 344, 343, 343, 343, 343, 343, 343, 343, 343, 343, 343, 343, 343, 343, 343, 343, 343, 343, 343, 344, 343, 343, 346, 343, 343, 347, 343, 343, 343, 343, 343, 343, 343, 348, 343, 343, 343, 343, 343, 343, 343, 343, 343, 343, 343, 343, 343, 343, 343, 343, 343, 343, 343, 343, 343, 343, 343, 343, 343, 343, 343, 343, 343, 343, 343, 343, 343, 343, 343, 343, 343, 343, 343, 343, 343, 343, 343, 343, 343, 349, 343, 351, 345, 351, 351, 351, 350, 350, 350, 350, 350, 350, 350, 350, 350, 350, 350, 350, 350, 350, 350, 350, 350, 350, 351, 350, 350, 346, 350, 350, 350, 350, 350, 350, 350, 350, 350, 350, 350, 350, 350, 350, 350, 350, 350, 350, 350, 350, 350, 350, 350, 350, 350, 350, 350, 350, 350, 350, 350, 350, 350, 350, 350, 350, 350, 350, 350, 350, 350, 350, 350, 350, 350, 350, 350, 350, 350, 350, 350, 350, 350, 350, 350, 350, 349, 350, 354, 353, 356, 355, 357, 352, 358, 352, 359, 343, 361, 360, 360, 360, 361, 360, 360, 360, 360, 362, 363, 362, 362, 362, 360, 360, 360, 360, 360, 360, 360, 360, 360, 360, 360, 360, 361, 360, 360, 360, 360, 360, 362, 360, 360, 364, 360, 360, 360, 360, 360, 360, 360, 360, 360, 360, 360, 360, 360, 360, 360, 360, 360, 360, 360, 360, 360, 360, 360, 360, 360, 365, 360, 360, 360, 360, 360, 360, 360, 360, 360, 360, 360, 360, 360, 360, 360, 360, 360, 360, 360, 360, 360, 360, 360, 360, 360, 360, 360, 360, 360, 360, 366, 360, 360, 367, 360, 362, 368, 362, 362, 362, 368, 368, 368, 368, 368, 368, 368, 368, 368, 368, 368, 368, 368, 368, 368, 368, 368, 368, 362, 368, 369, 370, 371, 372, 373, 375, 374, 377, 378, 377, 377, 377, 376, 376, 376, 376, 376, 376, 376, 376, 376, 376, 376, 376, 376, 376, 376, 376, 376, 376, 377, 376, 363, 374, 379, 374, 381, 380, 380, 380, 381, 380, 380, 380, 380, 382, 383, 382, 382, 382, 380, 380, 380, 380, 380, 380, 380, 380, 380, 380, 380, 380, 381, 380, 380, 380, 380, 380, 382, 380, 380, 384, 380, 380, 380, 380, 380, 380, 380, 380, 380, 380, 380, 380, 380, 380, 380, 380, 380, 380, 380, 380, 380, 380, 380, 380, 380, 380, 380, 380, 380, 380, 380, 380, 380, 380, 380, 380, 380, 380, 380, 380, 380, 380, 380, 380, 380, 380, 380, 380, 380, 380, 380, 380, 380, 380, 380, 380, 385, 380, 382, 386, 382, 382, 382, 386, 386, 386, 386, 386, 386, 386, 386, 386, 386, 386, 386, 386, 386, 386, 386, 386, 386, 382, 386, 388, 387, 387, 387, 387, 387, 387, 387, 387, 387, 387, 387, 387, 387, 387, 387, 387, 387, 387, 387, 387, 387, 387, 387, 387, 387, 387, 387, 389, 387, 387, 387, 387, 387, 387, 387, 387, 387, 387, 387, 387, 387, 387, 387, 387, 387, 387, 387, 387, 387, 387, 387, 387, 387, 387, 387, 387, 387, 387, 387, 387, 387, 387, 387, 387, 387, 387, 387, 387, 387, 387, 387, 387, 387, 387, 387, 387, 387, 387, 387, 387, 387, 387, 387, 387, 387, 387, 390, 387, 391, 391, 391, 391, 391, 391, 391, 391, 391, 391, 391, 391, 391, 391, 391, 391, 391, 391, 391, 391, 391, 391, 391, 391, 391, 391, 391, 391, 391, 391, 391, 391, 391, 391, 391, 391, 391, 391, 391, 391, 391, 391, 391, 391, 391, 391, 391, 391, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 391, 391, 391, 391, 391, 391, 391, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 391, 391, 391, 391, 13, 391, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 391, 391, 391, 391, 391, 13, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 391, 392, 392, 392, 392, 392, 392, 392, 392, 392, 392, 392, 392, 392, 392, 392, 392, 392, 392, 392, 392, 392, 392, 392, 392, 392, 392, 392, 392, 392, 392, 392, 392, 392, 392, 392, 392, 392, 392, 392, 392, 392, 392, 392, 392, 392, 392, 392, 392, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 392, 392, 392, 392, 392, 392, 392, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 392, 392, 392, 392, 17, 392, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 392, 392, 392, 392, 392, 17, 395, 394, 394, 394, 395, 394, 394, 394, 394, 394, 394, 394, 394, 394, 394, 394, 394, 394, 394, 394, 394, 394, 394, 394, 394, 394, 395, 394, 394, 394, 394, 394, 394, 394, 394, 394, 394, 394, 394, 394, 394, 394, 394, 394, 394, 394, 394, 394, 396, 396, 396, 396, 396, 396, 396, 396, 394, 394, 394, 394, 394, 394, 394, 394, 394, 394, 394, 397, 394, 394, 394, 394, 394, 394, 394, 394, 394, 398, 394, 394, 394, 394, 394, 394, 394, 394, 394, 394, 394, 394, 394, 394, 394, 394, 394, 394, 394, 394, 394, 399, 394, 394, 394, 394, 394, 394, 394, 394, 394, 394, 394, 394, 394, 394, 394, 394, 394, 400, 394, 394, 401, 394, 402, 403, 405, 405, 405, 405, 405, 405, 405, 405, 404, 406, 406, 406, 406, 406, 406, 406, 406, 404, 404, 407, 407, 39, 39, 39, 407, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 407, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 40, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 408, 39, 409, 410, 411, 411, 39, 39, 39, 411, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 411, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 40, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 412, 39, 38, 411, 413, 414, 415, 415, 26, 26, 26, 415, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 415, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 27, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 416, 26, 411, 20, 20, 20, 411, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 411, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 417, 20, 407, 26, 26, 26, 407, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 407, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 27, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 28, 26, 407, 418, 418, 418, 407, 418, 418, 418, 418, 418, 418, 418, 418, 418, 418, 418, 418, 418, 418, 418, 418, 418, 418, 418, 418, 418, 407, 418, 418, 418, 418, 418, 418, 418, 418, 418, 418, 418, 418, 418, 418, 418, 418, 418, 418, 418, 418, 418, 418, 418, 418, 418, 418, 418, 418, 418, 418, 418, 418, 418, 418, 418, 418, 418, 418, 418, 418, 418, 418, 418, 418, 418, 418, 418, 418, 418, 418, 418, 418, 418, 418, 418, 418, 418, 418, 418, 418, 418, 418, 418, 418, 418, 419, 418, 420, 421, 421, 418, 418, 418, 421, 418, 418, 418, 418, 418, 418, 418, 418, 418, 418, 418, 418, 418, 418, 418, 418, 418, 418, 418, 418, 418, 421, 418, 418, 418, 418, 418, 418, 418, 418, 418, 418, 418, 418, 418, 418, 418, 418, 418, 418, 418, 418, 418, 418, 418, 418, 418, 418, 418, 418, 418, 418, 418, 418, 418, 418, 418, 418, 418, 418, 418, 418, 418, 418, 418, 418, 418, 418, 418, 418, 418, 418, 418, 418, 418, 418, 418, 418, 418, 418, 418, 418, 418, 418, 418, 418, 418, 422, 418, 421, 20, 20, 20, 421, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 421, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 417, 20, 423, 421, 421, 26, 26, 26, 421, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 421, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 27, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 28, 26, 425, 425, 425, 425, 425, 425, 425, 425, 425, 425, 424, 424, 424, 424, 424, 424, 424, 425, 425, 425, 425, 425, 425, 424, 424, 424, 424, 424, 424, 424, 424, 424, 424, 424, 424, 424, 424, 424, 424, 424, 424, 424, 424, 424, 424, 424, 424, 424, 424, 425, 425, 425, 425, 425, 425, 424, 424, 424, 424, 424, 424, 424, 424, 424, 424, 424, 424, 424, 424, 424, 424, 424, 424, 424, 424, 426, 424, 427, 427, 427, 427, 427, 427, 427, 427, 427, 427, 424, 424, 424, 424, 424, 424, 424, 427, 427, 427, 427, 427, 427, 424, 424, 424, 424, 424, 424, 424, 424, 424, 424, 424, 424, 424, 424, 424, 424, 424, 424, 424, 424, 424, 424, 424, 424, 424, 424, 427, 427, 427, 427, 427, 427, 424, 428, 428, 428, 428, 428, 428, 428, 428, 428, 428, 424, 424, 424, 424, 424, 424, 424, 428, 428, 428, 428, 428, 428, 424, 424, 424, 424, 424, 424, 424, 424, 424, 424, 424, 424, 424, 424, 424, 424, 424, 424, 424, 424, 424, 424, 424, 424, 424, 424, 428, 428, 428, 428, 428, 428, 424, 429, 429, 429, 429, 429, 429, 429, 429, 429, 429, 424, 424, 424, 424, 424, 424, 424, 429, 429, 429, 429, 429, 429, 424, 424, 424, 424, 424, 424, 424, 424, 424, 424, 424, 424, 424, 424, 424, 424, 424, 424, 424, 424, 424, 424, 424, 424, 424, 424, 429, 429, 429, 429, 429, 429, 424, 430, 433, 432, 432, 432, 433, 432, 432, 432, 432, 434, 432, 432, 432, 432, 432, 432, 432, 432, 432, 432, 432, 432, 432, 432, 432, 432, 433, 432, 432, 432, 432, 432, 434, 432, 432, 432, 432, 432, 432, 432, 432, 432, 432, 432, 432, 432, 432, 432, 435, 435, 435, 435, 435, 435, 435, 435, 435, 435, 432, 432, 432, 432, 432, 432, 432, 435, 435, 435, 435, 435, 435, 432, 432, 432, 432, 432, 432, 432, 432, 432, 432, 432, 432, 432, 432, 432, 432, 432, 432, 432, 432, 432, 432, 432, 432, 432, 432, 435, 435, 435, 435, 435, 435, 432, 432, 432, 432, 432, 432, 432, 432, 432, 432, 432, 432, 432, 432, 432, 432, 432, 432, 432, 432, 432, 432, 436, 432, 433, 432, 432, 432, 433, 432, 432, 432, 432, 431, 432, 432, 432, 432, 432, 432, 432, 432, 432, 432, 432, 432, 432, 432, 432, 432, 433, 432, 432, 432, 432, 432, 431, 432, 432, 432, 432, 432, 432, 432, 432, 432, 432, 432, 432, 432, 432, 432, 437, 437, 437, 437, 437, 437, 437, 437, 437, 437, 432, 432, 432, 432, 432, 432, 432, 437, 437, 437, 437, 437, 437, 432, 432, 432, 432, 432, 432, 432, 432, 432, 432, 432, 432, 432, 432, 432, 432, 432, 432, 432, 432, 432, 432, 432, 432, 432, 432, 437, 437, 437, 437, 437, 437, 432, 432, 432, 432, 432, 432, 432, 432, 432, 432, 432, 432, 432, 432, 432, 432, 432, 432, 432, 432, 432, 432, 438, 432, 431, 433, 437, 437, 437, 433, 437, 437, 437, 437, 431, 437, 437, 437, 437, 437, 437, 437, 437, 437, 437, 437, 437, 437, 437, 437, 437, 433, 437, 437, 437, 437, 437, 431, 437, 437, 437, 437, 437, 437, 437, 437, 437, 437, 437, 437, 437, 437, 437, 437, 437, 437, 437, 437, 437, 437, 437, 437, 437, 437, 437, 437, 437, 437, 437, 437, 437, 437, 437, 437, 437, 437, 437, 437, 437, 437, 437, 437, 437, 437, 437, 437, 437, 437, 437, 437, 437, 437, 437, 437, 437, 437, 437, 437, 437, 437, 437, 437, 437, 437, 437, 437, 437, 437, 437, 437, 437, 437, 437, 437, 437, 437, 437, 437, 437, 437, 437, 437, 437, 437, 437, 437, 437, 437, 437, 437, 431, 437, 439, 433, 440, 440, 440, 433, 440, 440, 440, 440, 434, 440, 440, 440, 440, 440, 440, 440, 440, 440, 440, 440, 440, 440, 440, 440, 440, 433, 440, 440, 440, 440, 440, 434, 440, 440, 440, 440, 440, 440, 440, 440, 440, 440, 440, 440, 440, 440, 440, 435, 435, 435, 435, 435, 435, 435, 435, 435, 435, 440, 440, 440, 440, 440, 440, 440, 435, 435, 435, 435, 435, 435, 440, 440, 440, 440, 440, 440, 440, 440, 440, 440, 440, 440, 440, 440, 440, 440, 440, 440, 440, 440, 440, 440, 440, 440, 440, 440, 435, 435, 435, 435, 435, 435, 440, 440, 440, 440, 440, 440, 440, 440, 440, 440, 440, 440, 440, 440, 440, 440, 440, 440, 440, 440, 440, 440, 431, 440, 433, 440, 440, 440, 433, 440, 440, 440, 440, 431, 440, 440, 440, 440, 440, 440, 440, 440, 440, 440, 440, 440, 440, 440, 440, 440, 433, 440, 440, 440, 440, 440, 431, 440, 440, 440, 440, 440, 440, 440, 440, 440, 440, 440, 440, 440, 440, 440, 437, 437, 437, 437, 437, 437, 437, 437, 437, 437, 440, 440, 440, 440, 440, 440, 440, 437, 437, 437, 437, 437, 437, 440, 440, 440, 440, 440, 440, 440, 440, 440, 440, 440, 440, 440, 440, 440, 440, 440, 440, 440, 440, 440, 440, 440, 440, 440, 440, 437, 437, 437, 437, 437, 437, 440, 440, 440, 440, 440, 440, 440, 440, 440, 440, 440, 440, 440, 440, 440, 440, 440, 440, 440, 440, 440, 440, 433, 440, 433, 440, 440, 440, 433, 440, 440, 440, 440, 441, 440, 440, 440, 440, 440, 440, 440, 440, 440, 440, 440, 440, 440, 440, 440, 440, 433, 440, 440, 440, 440, 440, 441, 440, 440, 440, 440, 440, 440, 440, 440, 440, 440, 440, 440, 440, 440, 440, 442, 442, 442, 442, 442, 442, 442, 442, 442, 442, 440, 440, 440, 440, 440, 440, 440, 442, 442, 442, 442, 442, 442, 440, 440, 440, 440, 440, 440, 440, 440, 440, 440, 440, 440, 440, 440, 440, 440, 440, 440, 440, 440, 440, 440, 440, 440, 440, 440, 442, 442, 442, 442, 442, 442, 440, 440, 440, 440, 440, 440, 440, 440, 440, 440, 440, 440, 440, 440, 440, 440, 440, 440, 440, 440, 440, 440, 443, 440, 433, 440, 440, 440, 433, 440, 440, 440, 440, 441, 440, 440, 440, 440, 440, 440, 440, 440, 440, 440, 440, 440, 440, 440, 440, 440, 433, 440, 440, 440, 440, 440, 441, 440, 440, 440, 440, 440, 440, 440, 440, 440, 440, 440, 440, 440, 440, 440, 435, 435, 435, 435, 435, 435, 435, 435, 435, 435, 440, 440, 440, 440, 440, 440, 440, 435, 435, 435, 435, 435, 435, 440, 440, 440, 440, 440, 440, 440, 440, 440, 440, 440, 440, 440, 440, 440, 440, 440, 440, 440, 440, 440, 440, 440, 440, 440, 440, 435, 435, 435, 435, 435, 435, 440, 440, 440, 440, 440, 440, 440, 440, 440, 440, 440, 440, 440, 440, 440, 440, 440, 440, 440, 440, 440, 440, 443, 440, 444, 433, 440, 440, 440, 433, 440, 440, 440, 440, 441, 440, 440, 440, 440, 440, 440, 440, 440, 440, 440, 440, 440, 440, 440, 440, 440, 433, 440, 440, 440, 440, 440, 441, 440, 440, 440, 440, 440, 440, 440, 440, 440, 440, 440, 440, 440, 440, 440, 445, 445, 445, 445, 445, 445, 445, 445, 445, 445, 440, 440, 440, 440, 440, 440, 440, 445, 445, 445, 445, 445, 445, 440, 440, 440, 440, 440, 440, 440, 440, 440, 440, 440, 440, 440, 440, 440, 440, 440, 440, 440, 440, 440, 440, 440, 440, 440, 440, 445, 445, 445, 445, 445, 445, 440, 440, 440, 440, 440, 440, 440, 440, 440, 440, 440, 440, 440, 440, 440, 440, 440, 440, 440, 440, 440, 440, 443, 440, 433, 440, 440, 440, 433, 440, 440, 440, 440, 441, 440, 440, 440, 440, 440, 440, 440, 440, 440, 440, 440, 440, 440, 440, 440, 440, 433, 440, 440, 440, 440, 440, 441, 440, 440, 440, 440, 440, 440, 440, 440, 440, 440, 440, 440, 440, 440, 440, 446, 446, 446, 446, 446, 446, 446, 446, 446, 446, 440, 440, 440, 440, 440, 440, 440, 446, 446, 446, 446, 446, 446, 440, 440, 440, 440, 440, 440, 440, 440, 440, 440, 440, 440, 440, 440, 440, 440, 440, 440, 440, 440, 440, 440, 440, 440, 440, 440, 446, 446, 446, 446, 446, 446, 440, 440, 440, 440, 440, 440, 440, 440, 440, 440, 440, 440, 440, 440, 440, 440, 440, 440, 440, 440, 440, 440, 443, 440, 433, 440, 440, 440, 433, 440, 440, 440, 440, 441, 440, 440, 440, 440, 440, 440, 440, 440, 440, 440, 440, 440, 440, 440, 440, 440, 433, 440, 440, 440, 440, 440, 441, 440, 440, 440, 440, 440, 440, 440, 440, 440, 440, 440, 440, 440, 440, 440, 447, 447, 447, 447, 447, 447, 447, 447, 447, 447, 440, 440, 440, 440, 440, 440, 440, 447, 447, 447, 447, 447, 447, 440, 440, 440, 440, 440, 440, 440, 440, 440, 440, 440, 440, 440, 440, 440, 440, 440, 440, 440, 440, 440, 440, 440, 440, 440, 440, 447, 447, 447, 447, 447, 447, 440, 440, 440, 440, 440, 440, 440, 440, 440, 440, 440, 440, 440, 440, 440, 440, 440, 440, 440, 440, 440, 440, 443, 440, 433, 440, 440, 440, 433, 440, 440, 440, 440, 441, 440, 440, 440, 440, 440, 440, 440, 440, 440, 440, 440, 440, 440, 440, 440, 440, 433, 440, 440, 440, 440, 440, 441, 440, 440, 440, 440, 440, 440, 440, 440, 440, 440, 440, 440, 440, 440, 440, 448, 448, 448, 448, 448, 448, 448, 448, 448, 448, 440, 440, 440, 440, 440, 440, 440, 448, 448, 448, 448, 448, 448, 440, 440, 440, 440, 440, 440, 440, 440, 440, 440, 440, 440, 440, 440, 440, 440, 440, 440, 440, 440, 440, 440, 440, 440, 440, 440, 448, 448, 448, 448, 448, 448, 440, 440, 440, 440, 440, 440, 440, 440, 440, 440, 440, 440, 440, 440, 440, 440, 440, 440, 440, 440, 440, 440, 443, 440, 433, 440, 440, 440, 433, 440, 440, 440, 440, 441, 440, 440, 440, 440, 440, 440, 440, 440, 440, 440, 440, 440, 440, 440, 440, 440, 433, 440, 440, 440, 440, 440, 441, 440, 440, 440, 440, 440, 440, 440, 440, 440, 440, 440, 440, 440, 440, 440, 449, 449, 449, 449, 449, 449, 449, 449, 449, 449, 440, 440, 440, 440, 440, 440, 440, 449, 449, 449, 449, 449, 449, 440, 440, 440, 440, 440, 440, 440, 440, 440, 440, 440, 440, 440, 440, 440, 440, 440, 440, 440, 440, 440, 440, 440, 440, 440, 440, 449, 449, 449, 449, 449, 449, 440, 440, 440, 440, 440, 440, 440, 440, 440, 440, 440, 440, 440, 440, 440, 440, 440, 440, 440, 440, 440, 440, 443, 440, 433, 440, 440, 440, 433, 440, 440, 440, 440, 431, 440, 440, 440, 440, 440, 440, 440, 440, 440, 440, 440, 440, 440, 440, 440, 440, 433, 440, 440, 440, 440, 440, 431, 440, 440, 440, 440, 440, 440, 440, 440, 440, 440, 440, 440, 440, 440, 440, 449, 449, 449, 449, 449, 449, 449, 449, 449, 449, 440, 440, 440, 440, 440, 440, 440, 449, 449, 449, 449, 449, 449, 440, 440, 440, 440, 440, 440, 440, 440, 440, 440, 440, 440, 440, 440, 440, 440, 440, 440, 440, 440, 440, 440, 440, 440, 440, 440, 449, 449, 449, 449, 449, 449, 440, 440, 440, 440, 440, 440, 440, 440, 440, 440, 440, 440, 440, 440, 440, 440, 440, 440, 440, 440, 440, 440, 431, 440, 450, 451, 453, 453, 453, 453, 453, 453, 453, 453, 453, 453, 452, 452, 452, 452, 452, 452, 452, 453, 453, 453, 453, 453, 453, 452, 452, 452, 452, 452, 452, 452, 452, 452, 452, 452, 452, 452, 452, 452, 452, 452, 452, 452, 452, 452, 452, 452, 452, 452, 452, 453, 453, 453, 453, 453, 453, 452, 452, 455, 454, 454, 454, 455, 454, 454, 454, 454, 454, 456, 454, 454, 454, 454, 454, 454, 454, 454, 454, 454, 454, 454, 454, 454, 454, 455, 454, 454, 454, 454, 454, 454, 454, 454, 457, 454, 454, 454, 454, 454, 454, 454, 454, 454, 454, 454, 454, 454, 454, 454, 454, 454, 454, 454, 454, 454, 454, 454, 454, 454, 454, 454, 454, 454, 454, 454, 454, 454, 454, 454, 454, 454, 454, 454, 454, 454, 454, 454, 454, 454, 454, 454, 454, 454, 454, 454, 454, 454, 454, 454, 454, 458, 454, 460, 459, 459, 459, 459, 459, 459, 459, 459, 459, 459, 459, 459, 459, 459, 459, 459, 459, 459, 459, 459, 459, 459, 459, 459, 459, 459, 459, 461, 459, 459, 459, 459, 459, 459, 459, 459, 459, 459, 459, 459, 459, 459, 459, 459, 459, 459, 459, 459, 459, 459, 459, 459, 459, 459, 459, 459, 459, 459, 459, 459, 459, 459, 459, 459, 459, 459, 459, 459, 459, 459, 459, 459, 459, 459, 459, 459, 459, 459, 459, 459, 459, 459, 459, 459, 459, 459, 462, 459, 463, 463, 463, 463, 463, 463, 463, 463, 463, 463, 463, 463, 463, 463, 463, 463, 463, 463, 463, 463, 463, 463, 463, 463, 463, 463, 463, 463, 463, 463, 463, 463, 463, 463, 463, 463, 463, 463, 463, 463, 463, 463, 463, 463, 463, 463, 463, 463, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 463, 463, 463, 463, 463, 463, 463, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 463, 463, 463, 463, 45, 463, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 463, 463, 463, 463, 463, 45, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 463, 464, 464, 464, 464, 464, 464, 464, 464, 464, 464, 464, 464, 464, 464, 464, 464, 464, 464, 464, 464, 464, 464, 464, 464, 464, 464, 464, 464, 464, 464, 464, 464, 464, 464, 464, 464, 464, 464, 464, 464, 464, 464, 464, 464, 464, 464, 464, 464, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 464, 464, 464, 464, 464, 464, 464, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 464, 464, 464, 464, 49, 464, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 464, 464, 464, 464, 464, 49, 467, 466, 466, 466, 467, 466, 466, 466, 466, 466, 466, 466, 466, 466, 466, 466, 466, 466, 466, 466, 466, 466, 466, 466, 466, 466, 467, 466, 466, 466, 466, 466, 466, 466, 466, 466, 466, 466, 466, 466, 466, 466, 466, 466, 466, 466, 466, 466, 468, 468, 468, 468, 468, 468, 468, 468, 466, 466, 466, 466, 466, 466, 466, 466, 466, 466, 466, 469, 466, 466, 466, 466, 466, 466, 466, 466, 466, 470, 466, 466, 466, 466, 466, 466, 466, 466, 466, 466, 466, 466, 466, 466, 466, 466, 466, 466, 466, 466, 466, 471, 466, 466, 466, 466, 466, 466, 466, 466, 466, 466, 466, 466, 466, 466, 466, 466, 466, 472, 466, 466, 473, 466, 474, 475, 477, 477, 477, 477, 477, 477, 477, 477, 476, 478, 478, 478, 478, 478, 478, 478, 478, 476, 476, 479, 479, 71, 71, 71, 479, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 479, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 72, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 480, 71, 481, 482, 483, 483, 71, 71, 71, 483, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 483, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 72, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 484, 71, 70, 483, 485, 486, 487, 487, 58, 58, 58, 487, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 487, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 59, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 488, 58, 483, 52, 52, 52, 483, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 483, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 489, 52, 479, 58, 58, 58, 479, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 479, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 59, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 60, 58, 479, 490, 490, 490, 479, 490, 490, 490, 490, 490, 490, 490, 490, 490, 490, 490, 490, 490, 490, 490, 490, 490, 490, 490, 490, 490, 479, 490, 490, 490, 490, 490, 490, 490, 490, 490, 490, 490, 490, 490, 490, 490, 490, 490, 490, 490, 490, 490, 490, 490, 490, 490, 490, 490, 490, 490, 490, 490, 490, 490, 490, 490, 490, 490, 490, 490, 490, 490, 490, 490, 490, 490, 490, 490, 490, 490, 490, 490, 490, 490, 490, 490, 490, 490, 490, 490, 490, 490, 490, 490, 490, 490, 491, 490, 492, 493, 493, 490, 490, 490, 493, 490, 490, 490, 490, 490, 490, 490, 490, 490, 490, 490, 490, 490, 490, 490, 490, 490, 490, 490, 490, 490, 493, 490, 490, 490, 490, 490, 490, 490, 490, 490, 490, 490, 490, 490, 490, 490, 490, 490, 490, 490, 490, 490, 490, 490, 490, 490, 490, 490, 490, 490, 490, 490, 490, 490, 490, 490, 490, 490, 490, 490, 490, 490, 490, 490, 490, 490, 490, 490, 490, 490, 490, 490, 490, 490, 490, 490, 490, 490, 490, 490, 490, 490, 490, 490, 490, 490, 494, 490, 493, 52, 52, 52, 493, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 493, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 489, 52, 495, 493, 493, 58, 58, 58, 493, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 493, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 59, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 60, 58, 497, 497, 497, 497, 497, 497, 497, 497, 497, 497, 496, 496, 496, 496, 496, 496, 496, 497, 497, 497, 497, 497, 497, 496, 496, 496, 496, 496, 496, 496, 496, 496, 496, 496, 496, 496, 496, 496, 496, 496, 496, 496, 496, 496, 496, 496, 496, 496, 496, 497, 497, 497, 497, 497, 497, 496, 496, 496, 496, 496, 496, 496, 496, 496, 496, 496, 496, 496, 496, 496, 496, 496, 496, 496, 496, 498, 496, 499, 499, 499, 499, 499, 499, 499, 499, 499, 499, 496, 496, 496, 496, 496, 496, 496, 499, 499, 499, 499, 499, 499, 496, 496, 496, 496, 496, 496, 496, 496, 496, 496, 496, 496, 496, 496, 496, 496, 496, 496, 496, 496, 496, 496, 496, 496, 496, 496, 499, 499, 499, 499, 499, 499, 496, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 496, 496, 496, 496, 496, 496, 496, 500, 500, 500, 500, 500, 500, 496, 496, 496, 496, 496, 496, 496, 496, 496, 496, 496, 496, 496, 496, 496, 496, 496, 496, 496, 496, 496, 496, 496, 496, 496, 496, 500, 500, 500, 500, 500, 500, 496, 501, 501, 501, 501, 501, 501, 501, 501, 501, 501, 496, 496, 496, 496, 496, 496, 496, 501, 501, 501, 501, 501, 501, 496, 496, 496, 496, 496, 496, 496, 496, 496, 496, 496, 496, 496, 496, 496, 496, 496, 496, 496, 496, 496, 496, 496, 496, 496, 496, 501, 501, 501, 501, 501, 501, 496, 502, 505, 504, 504, 504, 505, 504, 504, 504, 504, 506, 504, 504, 504, 504, 504, 504, 504, 504, 504, 504, 504, 504, 504, 504, 504, 504, 505, 504, 504, 504, 504, 504, 506, 504, 504, 504, 504, 504, 504, 504, 504, 504, 504, 504, 504, 504, 504, 504, 507, 507, 507, 507, 507, 507, 507, 507, 507, 507, 504, 504, 504, 504, 504, 504, 504, 507, 507, 507, 507, 507, 507, 504, 504, 504, 504, 504, 504, 504, 504, 504, 504, 504, 504, 504, 504, 504, 504, 504, 504, 504, 504, 504, 504, 504, 504, 504, 504, 507, 507, 507, 507, 507, 507, 504, 504, 504, 504, 504, 504, 504, 504, 504, 504, 504, 504, 504, 504, 504, 504, 504, 504, 504, 504, 504, 504, 508, 504, 505, 504, 504, 504, 505, 504, 504, 504, 504, 503, 504, 504, 504, 504, 504, 504, 504, 504, 504, 504, 504, 504, 504, 504, 504, 504, 505, 504, 504, 504, 504, 504, 503, 504, 504, 504, 504, 504, 504, 504, 504, 504, 504, 504, 504, 504, 504, 504, 509, 509, 509, 509, 509, 509, 509, 509, 509, 509, 504, 504, 504, 504, 504, 504, 504, 509, 509, 509, 509, 509, 509, 504, 504, 504, 504, 504, 504, 504, 504, 504, 504, 504, 504, 504, 504, 504, 504, 504, 504, 504, 504, 504, 504, 504, 504, 504, 504, 509, 509, 509, 509, 509, 509, 504, 504, 504, 504, 504, 504, 504, 504, 504, 504, 504, 504, 504, 504, 504, 504, 504, 504, 504, 504, 504, 504, 510, 504, 503, 505, 509, 509, 509, 505, 509, 509, 509, 509, 503, 509, 509, 509, 509, 509, 509, 509, 509, 509, 509, 509, 509, 509, 509, 509, 509, 505, 509, 509, 509, 509, 509, 503, 509, 509, 509, 509, 509, 509, 509, 509, 509, 509, 509, 509, 509, 509, 509, 509, 509, 509, 509, 509, 509, 509, 509, 509, 509, 509, 509, 509, 509, 509, 509, 509, 509, 509, 509, 509, 509, 509, 509, 509, 509, 509, 509, 509, 509, 509, 509, 509, 509, 509, 509, 509, 509, 509, 509, 509, 509, 509, 509, 509, 509, 509, 509, 509, 509, 509, 509, 509, 509, 509, 509, 509, 509, 509, 509, 509, 509, 509, 509, 509, 509, 509, 509, 509, 509, 509, 509, 509, 509, 509, 509, 509, 503, 509, 511, 505, 512, 512, 512, 505, 512, 512, 512, 512, 506, 512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 505, 512, 512, 512, 512, 512, 506, 512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 507, 507, 507, 507, 507, 507, 507, 507, 507, 507, 512, 512, 512, 512, 512, 512, 512, 507, 507, 507, 507, 507, 507, 512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 507, 507, 507, 507, 507, 507, 512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 503, 512, 505, 512, 512, 512, 505, 512, 512, 512, 512, 503, 512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 505, 512, 512, 512, 512, 512, 503, 512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 509, 509, 509, 509, 509, 509, 509, 509, 509, 509, 512, 512, 512, 512, 512, 512, 512, 509, 509, 509, 509, 509, 509, 512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 509, 509, 509, 509, 509, 509, 512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 505, 512, 505, 512, 512, 512, 505, 512, 512, 512, 512, 513, 512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 505, 512, 512, 512, 512, 512, 513, 512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 514, 514, 514, 514, 514, 514, 514, 514, 514, 514, 512, 512, 512, 512, 512, 512, 512, 514, 514, 514, 514, 514, 514, 512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 514, 514, 514, 514, 514, 514, 512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 515, 512, 505, 512, 512, 512, 505, 512, 512, 512, 512, 513, 512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 505, 512, 512, 512, 512, 512, 513, 512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 507, 507, 507, 507, 507, 507, 507, 507, 507, 507, 512, 512, 512, 512, 512, 512, 512, 507, 507, 507, 507, 507, 507, 512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 507, 507, 507, 507, 507, 507, 512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 515, 512, 516, 505, 512, 512, 512, 505, 512, 512, 512, 512, 513, 512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 505, 512, 512, 512, 512, 512, 513, 512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 517, 517, 517, 517, 517, 517, 517, 517, 517, 517, 512, 512, 512, 512, 512, 512, 512, 517, 517, 517, 517, 517, 517, 512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 517, 517, 517, 517, 517, 517, 512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 515, 512, 505, 512, 512, 512, 505, 512, 512, 512, 512, 513, 512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 505, 512, 512, 512, 512, 512, 513, 512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 518, 518, 518, 518, 518, 518, 518, 518, 518, 518, 512, 512, 512, 512, 512, 512, 512, 518, 518, 518, 518, 518, 518, 512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 518, 518, 518, 518, 518, 518, 512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 515, 512, 505, 512, 512, 512, 505, 512, 512, 512, 512, 513, 512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 505, 512, 512, 512, 512, 512, 513, 512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 519, 519, 519, 519, 519, 519, 519, 519, 519, 519, 512, 512, 512, 512, 512, 512, 512, 519, 519, 519, 519, 519, 519, 512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 519, 519, 519, 519, 519, 519, 512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 515, 512, 505, 512, 512, 512, 505, 512, 512, 512, 512, 513, 512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 505, 512, 512, 512, 512, 512, 513, 512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 520, 520, 520, 520, 520, 520, 520, 520, 520, 520, 512, 512, 512, 512, 512, 512, 512, 520, 520, 520, 520, 520, 520, 512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 520, 520, 520, 520, 520, 520, 512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 515, 512, 505, 512, 512, 512, 505, 512, 512, 512, 512, 513, 512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 505, 512, 512, 512, 512, 512, 513, 512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 521, 521, 521, 521, 521, 521, 521, 521, 521, 521, 512, 512, 512, 512, 512, 512, 512, 521, 521, 521, 521, 521, 521, 512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 521, 521, 521, 521, 521, 521, 512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 515, 512, 505, 512, 512, 512, 505, 512, 512, 512, 512, 503, 512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 505, 512, 512, 512, 512, 512, 503, 512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 521, 521, 521, 521, 521, 521, 521, 521, 521, 521, 512, 512, 512, 512, 512, 512, 512, 521, 521, 521, 521, 521, 521, 512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 521, 521, 521, 521, 521, 521, 512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 503, 512, 522, 523, 525, 525, 525, 525, 525, 525, 525, 525, 525, 525, 524, 524, 524, 524, 524, 524, 524, 525, 525, 525, 525, 525, 525, 524, 524, 524, 524, 524, 524, 524, 524, 524, 524, 524, 524, 524, 524, 524, 524, 524, 524, 524, 524, 524, 524, 524, 524, 524, 524, 525, 525, 525, 525, 525, 525, 524, 524, 527, 526, 526, 526, 527, 526, 526, 526, 526, 528, 529, 528, 528, 528, 526, 526, 526, 526, 526, 526, 526, 526, 526, 526, 526, 526, 527, 526, 526, 526, 526, 526, 528, 526, 526, 526, 526, 526, 526, 526, 526, 526, 526, 526, 526, 526, 526, 526, 526, 526, 526, 526, 526, 526, 526, 526, 526, 526, 526, 526, 526, 526, 526, 526, 526, 526, 526, 526, 526, 526, 526, 526, 526, 526, 526, 526, 526, 526, 526, 526, 526, 526, 526, 526, 526, 526, 526, 526, 526, 526, 526, 526, 530, 526, 528, 531, 528, 528, 528, 531, 531, 531, 531, 531, 531, 531, 531, 531, 531, 531, 531, 531, 531, 531, 531, 531, 531, 528, 531, 532, 533, 533, 533, 532, 533, 533, 533, 533, 533, 533, 533, 533, 533, 533, 533, 533, 533, 533, 533, 533, 533, 533, 533, 533, 533, 532, 533, 535, 534, 534, 534, 535, 534, 534, 534, 534, 534, 536, 534, 534, 534, 534, 534, 534, 534, 534, 534, 534, 534, 534, 534, 534, 534, 535, 534, 534, 534, 534, 534, 534, 534, 534, 534, 534, 534, 534, 534, 534, 534, 534, 534, 534, 534, 534, 534, 534, 534, 534, 534, 534, 534, 534, 534, 534, 534, 534, 534, 534, 534, 534, 534, 534, 534, 534, 534, 534, 534, 534, 534, 534, 534, 534, 534, 534, 534, 534, 534, 534, 534, 534, 534, 534, 534, 534, 534, 534, 534, 534, 534, 537, 534, 538, 539, 539, 539, 538, 539, 539, 539, 539, 539, 540, 539, 539, 539, 539, 539, 539, 539, 539, 539, 539, 539, 539, 539, 539, 539, 538, 539, 542, 541, 541, 541, 542, 541, 541, 541, 541, 541, 543, 541, 541, 541, 541, 541, 541, 541, 541, 541, 541, 541, 541, 541, 541, 541, 542, 541, 541, 541, 541, 541, 541, 541, 541, 544, 541, 546, 545, 545, 545, 545, 545, 545, 545, 545, 545, 545, 545, 545, 545, 545, 545, 545, 545, 545, 545, 545, 545, 545, 545, 545, 545, 545, 545, 547, 545, 545, 545, 545, 545, 545, 545, 545, 545, 545, 545, 545, 545, 545, 545, 545, 545, 545, 545, 545, 545, 545, 545, 545, 545, 545, 545, 545, 545, 545, 545, 545, 545, 545, 545, 545, 545, 545, 545, 545, 545, 545, 545, 545, 545, 545, 545, 545, 545, 545, 545, 545, 545, 545, 545, 545, 545, 545, 548, 545, 549, 549, 549, 549, 549, 549, 549, 549, 549, 549, 549, 549, 549, 549, 549, 549, 549, 549, 549, 549, 549, 549, 549, 549, 549, 549, 549, 549, 549, 549, 549, 549, 549, 549, 549, 549, 549, 549, 549, 549, 549, 549, 549, 549, 549, 549, 549, 549, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 549, 549, 549, 549, 549, 549, 549, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 549, 549, 549, 549, 77, 549, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 549, 549, 549, 549, 549, 77, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 549, 550, 550, 550, 550, 550, 550, 550, 550, 550, 550, 550, 550, 550, 550, 550, 550, 550, 550, 550, 550, 550, 550, 550, 550, 550, 550, 550, 550, 550, 550, 550, 550, 550, 550, 550, 550, 550, 550, 550, 550, 550, 550, 550, 550, 550, 550, 550, 550, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 550, 550, 550, 550, 550, 550, 550, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 550, 550, 550, 550, 81, 550, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 550, 550, 550, 550, 550, 81, 552, 551, 551, 551, 552, 551, 551, 551, 551, 551, 553, 551, 551, 551, 551, 551, 551, 551, 551, 551, 551, 551, 551, 551, 551, 551, 552, 551, 555, 554, 554, 554, 555, 554, 554, 554, 554, 556, 557, 556, 556, 556, 554, 554, 554, 554, 554, 554, 554, 554, 554, 554, 554, 554, 555, 554, 554, 554, 554, 554, 556, 554, 554, 558, 554, 556, 559, 556, 556, 556, 559, 559, 559, 559, 559, 559, 559, 559, 559, 559, 559, 559, 559, 559, 559, 559, 559, 559, 556, 559, 561, 560, 560, 560, 560, 560, 560, 560, 560, 560, 560, 560, 560, 560, 560, 560, 560, 560, 560, 560, 560, 560, 560, 560, 560, 560, 560, 560, 562, 560, 560, 560, 560, 560, 560, 560, 560, 560, 560, 560, 560, 560, 560, 560, 560, 560, 560, 560, 560, 560, 560, 560, 560, 560, 560, 560, 560, 560, 560, 560, 560, 560, 560, 560, 560, 560, 560, 560, 560, 560, 560, 560, 560, 560, 560, 560, 560, 560, 560, 560, 560, 560, 560, 560, 560, 560, 560, 563, 560, 564, 564, 564, 564, 564, 564, 564, 564, 564, 564, 564, 564, 564, 564, 564, 564, 564, 564, 564, 564, 564, 564, 564, 564, 564, 564, 564, 564, 564, 564, 564, 564, 564, 564, 564, 564, 564, 564, 564, 564, 564, 564, 564, 564, 564, 564, 564, 564, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 564, 564, 564, 564, 564, 564, 564, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 564, 564, 564, 564, 84, 564, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 564, 564, 564, 564, 564, 84, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 564, 565, 565, 565, 565, 565, 565, 565, 565, 565, 565, 565, 565, 565, 565, 565, 565, 565, 565, 565, 565, 565, 565, 565, 565, 565, 565, 565, 565, 565, 565, 565, 565, 565, 565, 565, 565, 565, 565, 565, 565, 565, 565, 565, 565, 565, 565, 565, 565, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 565, 565, 565, 565, 565, 565, 565, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 565, 565, 565, 565, 88, 565, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 565, 565, 565, 565, 565, 88, 567, 566, 566, 566, 567, 566, 566, 566, 566, 568, 569, 568, 568, 568, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 567, 566, 566, 566, 566, 566, 568, 566, 568, 570, 568, 568, 568, 570, 570, 570, 570, 570, 570, 570, 570, 570, 570, 570, 570, 570, 570, 570, 570, 570, 570, 568, 570, 572, 572, 572, 572, 572, 572, 572, 572, 572, 572, 572, 572, 572, 572, 572, 572, 572, 572, 572, 572, 572, 572, 572, 572, 572, 572, 571, 571, 571, 571, 571, 571, 572, 572, 572, 572, 572, 572, 572, 572, 572, 572, 572, 572, 572, 572, 572, 572, 572, 572, 572, 572, 572, 572, 572, 572, 572, 572, 571, 572, 572, 572, 572, 572, 572, 572, 572, 572, 572, 572, 572, 572, 572, 572, 572, 572, 572, 572, 572, 572, 572, 572, 572, 572, 572, 573, 573, 573, 573, 573, 573, 572, 572, 572, 572, 572, 572, 572, 572, 572, 572, 572, 572, 572, 572, 572, 572, 572, 572, 572, 572, 572, 572, 572, 572, 572, 572, 573, 574, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 575, 92, 576, 576, 576, 576, 576, 576, 576, 576, 576, 576, 576, 576, 576, 576, 576, 576, 576, 576, 576, 576, 576, 576, 576, 576, 576, 576, 576, 576, 576, 576, 576, 576, 576, 576, 576, 576, 576, 576, 576, 576, 576, 576, 576, 576, 576, 576, 576, 576, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 576, 576, 576, 576, 576, 576, 576, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 576, 576, 576, 576, 90, 576, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 576, 576, 576, 576, 576, 90, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 576, 577, 577, 577, 577, 577, 577, 577, 577, 577, 577, 577, 577, 577, 577, 577, 577, 577, 577, 577, 577, 577, 577, 577, 577, 577, 577, 577, 577, 577, 577, 577, 577, 577, 577, 577, 577, 577, 577, 577, 577, 577, 577, 577, 577, 577, 577, 577, 577, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 577, 577, 577, 577, 577, 577, 577, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 577, 577, 577, 577, 95, 577, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 577, 577, 577, 577, 577, 95, 578, 578, 578, 578, 578, 578, 578, 578, 578, 578, 578, 578, 578, 578, 578, 578, 578, 578, 578, 578, 578, 578, 578, 578, 578, 578, 578, 578, 578, 578, 578, 578, 578, 578, 578, 578, 578, 578, 578, 578, 578, 578, 578, 578, 578, 578, 578, 578, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 578, 578, 578, 578, 578, 578, 578, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 578, 578, 578, 578, 97, 578, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 578, 578, 578, 578, 578, 97, 580, 581, 581, 581, 580, 581, 581, 581, 581, 582, 583, 582, 582, 582, 581, 581, 581, 581, 581, 581, 581, 581, 581, 581, 581, 581, 580, 581, 581, 581, 581, 581, 582, 584, 581, 585, 586, 587, 588, 581, 581, 581, 589, 590, 581, 590, 581, 591, 581, 581, 581, 581, 581, 581, 581, 581, 581, 581, 592, 581, 593, 594, 595, 581, 581, 596, 597, 596, 596, 598, 596, 596, 596, 596, 596, 596, 596, 596, 596, 596, 596, 596, 596, 596, 596, 596, 596, 596, 596, 596, 596, 599, 600, 581, 591, 601, 591, 602, 603, 604, 605, 606, 607, 579, 579, 608, 579, 579, 579, 609, 610, 611, 579, 579, 612, 613, 614, 615, 579, 616, 579, 617, 579, 581, 618, 581, 590, 581, 579, 619, 619, 619, 619, 619, 619, 619, 619, 619, 619, 619, 619, 619, 619, 619, 619, 619, 619, 619, 619, 619, 619, 619, 619, 619, 619, 619, 619, 619, 619, 619, 619, 619, 620, 619, 619, 619, 619, 619, 619, 619, 619, 619, 619, 619, 619, 619, 619, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 619, 619, 619, 620, 619, 620, 619, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 619, 619, 619, 619, 579, 619, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 619, 619, 619, 619, 619, 579, 582, 621, 582, 582, 582, 621, 621, 621, 621, 621, 621, 621, 621, 621, 621, 621, 621, 621, 621, 621, 621, 621, 621, 582, 621, 622, 591, 623, 623, 591, 623, 623, 623, 623, 623, 623, 623, 623, 623, 623, 623, 623, 623, 623, 623, 623, 623, 623, 623, 623, 623, 623, 623, 623, 623, 623, 623, 623, 623, 623, 623, 623, 623, 623, 623, 623, 623, 623, 623, 623, 623, 623, 623, 623, 623, 623, 623, 623, 623, 623, 623, 623, 623, 623, 623, 623, 623, 623, 623, 623, 623, 591, 623, 624, 625, 626, 627, 628, 628, 628, 628, 628, 628, 628, 628, 628, 628, 628, 628, 628, 628, 628, 628, 628, 628, 628, 628, 628, 628, 628, 628, 628, 628, 628, 628, 628, 628, 628, 628, 628, 99, 99, 628, 99, 628, 99, 99, 628, 628, 99, 99, 99, 630, 99, 99, 631, 631, 631, 631, 631, 631, 631, 631, 631, 631, 99, 99, 99, 99, 99, 99, 99, 629, 629, 629, 629, 629, 629, 629, 629, 629, 629, 629, 629, 629, 629, 629, 629, 629, 629, 629, 629, 629, 629, 629, 629, 629, 629, 628, 99, 628, 628, 629, 99, 629, 629, 629, 629, 629, 629, 629, 629, 629, 629, 629, 629, 629, 629, 629, 629, 629, 629, 629, 629, 629, 629, 629, 629, 629, 629, 628, 628, 628, 99, 628, 629, 632, 632, 632, 632, 632, 632, 632, 632, 632, 632, 632, 632, 632, 632, 632, 632, 632, 632, 632, 632, 632, 632, 632, 632, 632, 632, 632, 632, 632, 632, 632, 632, 632, 632, 632, 632, 632, 632, 632, 632, 632, 632, 632, 632, 632, 632, 632, 632, 629, 629, 629, 629, 629, 629, 629, 629, 629, 629, 632, 632, 632, 632, 632, 632, 632, 629, 629, 629, 629, 629, 629, 629, 629, 629, 629, 629, 629, 629, 629, 629, 629, 629, 629, 629, 629, 629, 629, 629, 629, 629, 629, 632, 632, 632, 632, 629, 632, 629, 629, 629, 629, 629, 629, 629, 629, 629, 629, 629, 629, 629, 629, 629, 629, 629, 629, 629, 629, 629, 629, 629, 629, 629, 629, 632, 632, 632, 632, 632, 629, 631, 631, 631, 631, 631, 631, 631, 631, 631, 631, 632, 633, 623, 591, 623, 591, 623, 591, 623, 635, 634, 591, 636, 623, 591, 623, 637, 591, 628, 628, 628, 628, 628, 628, 628, 628, 628, 628, 628, 628, 628, 628, 628, 628, 628, 628, 628, 628, 628, 628, 628, 628, 628, 628, 628, 628, 628, 628, 628, 628, 628, 628, 628, 628, 628, 628, 628, 628, 628, 628, 628, 628, 628, 628, 628, 628, 628, 628, 628, 628, 628, 628, 628, 628, 628, 628, 628, 628, 628, 628, 628, 591, 628, 591, 623, 591, 591, 623, 619, 619, 619, 619, 619, 619, 619, 619, 619, 619, 619, 619, 619, 619, 619, 619, 619, 619, 619, 619, 619, 619, 619, 619, 619, 619, 619, 619, 619, 619, 619, 619, 619, 620, 619, 619, 619, 619, 619, 619, 619, 619, 619, 619, 619, 619, 619, 619, 596, 596, 596, 596, 596, 596, 596, 596, 596, 596, 619, 619, 619, 620, 619, 620, 619, 596, 596, 596, 596, 596, 596, 596, 596, 596, 596, 596, 596, 596, 596, 596, 596, 596, 596, 596, 596, 596, 596, 596, 596, 596, 596, 619, 619, 619, 619, 596, 619, 596, 596, 596, 596, 596, 596, 596, 596, 596, 596, 596, 596, 596, 596, 596, 596, 596, 596, 596, 596, 596, 596, 596, 596, 596, 596, 619, 619, 619, 619, 619, 596, 638, 638, 638, 638, 638, 638, 638, 638, 638, 638, 638, 638, 638, 638, 638, 638, 638, 638, 638, 638, 638, 638, 638, 638, 638, 638, 638, 638, 638, 638, 638, 638, 638, 620, 638, 638, 638, 638, 638, 638, 638, 638, 638, 638, 638, 638, 638, 638, 596, 596, 596, 596, 596, 596, 596, 596, 596, 596, 638, 638, 638, 620, 638, 620, 638, 596, 596, 596, 596, 639, 596, 596, 596, 596, 596, 596, 596, 596, 596, 596, 596, 596, 596, 596, 596, 596, 596, 596, 596, 596, 596, 638, 638, 638, 638, 596, 638, 596, 596, 596, 596, 596, 596, 596, 596, 596, 596, 596, 596, 596, 596, 596, 596, 596, 596, 596, 596, 596, 596, 596, 596, 596, 596, 638, 638, 638, 638, 638, 596, 638, 638, 638, 638, 638, 638, 638, 638, 638, 638, 638, 638, 638, 638, 638, 638, 638, 638, 638, 638, 638, 638, 638, 638, 638, 638, 638, 638, 638, 638, 638, 638, 638, 620, 638, 638, 638, 638, 638, 638, 638, 638, 638, 638, 638, 638, 638, 638, 596, 596, 596, 596, 596, 596, 596, 596, 596, 596, 638, 638, 638, 620, 638, 620, 638, 596, 596, 596, 596, 596, 596, 640, 596, 596, 596, 596, 596, 596, 596, 596, 596, 596, 596, 596, 596, 596, 596, 596, 596, 596, 596, 638, 638, 638, 638, 596, 638, 596, 596, 596, 596, 596, 596, 596, 596, 596, 596, 596, 596, 596, 596, 596, 596, 596, 596, 596, 596, 596, 596, 596, 596, 596, 596, 638, 638, 638, 638, 638, 596, 638, 638, 638, 638, 638, 638, 638, 638, 638, 638, 638, 638, 638, 638, 638, 638, 638, 638, 638, 638, 638, 638, 638, 638, 638, 638, 638, 638, 638, 638, 638, 638, 638, 620, 638, 638, 638, 638, 638, 638, 638, 638, 638, 638, 638, 638, 638, 638, 596, 596, 596, 596, 596, 596, 596, 596, 596, 596, 638, 638, 638, 620, 638, 620, 638, 596, 596, 596, 596, 596, 596, 596, 596, 641, 596, 596, 596, 596, 596, 596, 596, 596, 596, 596, 596, 596, 596, 596, 596, 596, 596, 638, 638, 638, 638, 596, 638, 596, 596, 596, 596, 596, 596, 596, 596, 596, 596, 596, 596, 596, 596, 596, 596, 596, 596, 596, 596, 596, 596, 596, 596, 596, 596, 638, 638, 638, 638, 638, 596, 638, 638, 638, 638, 638, 638, 638, 638, 638, 638, 638, 638, 638, 638, 638, 638, 638, 638, 638, 638, 638, 638, 638, 638, 638, 638, 638, 638, 638, 638, 638, 638, 638, 620, 638, 638, 638, 638, 638, 638, 638, 638, 638, 638, 638, 638, 638, 638, 596, 596, 596, 596, 596, 596, 596, 596, 596, 596, 638, 638, 638, 620, 638, 620, 638, 596, 596, 596, 596, 596, 596, 596, 596, 596, 596, 596, 596, 596, 642, 596, 596, 596, 596, 596, 596, 596, 596, 596, 596, 596, 596, 638, 638, 638, 638, 596, 638, 596, 596, 596, 596, 596, 596, 596, 596, 596, 596, 596, 596, 596, 596, 596, 596, 596, 596, 596, 596, 596, 596, 596, 596, 596, 596, 638, 638, 638, 638, 638, 596, 638, 638, 638, 638, 638, 638, 638, 638, 638, 638, 638, 638, 638, 638, 638, 638, 638, 638, 638, 638, 638, 638, 638, 638, 638, 638, 638, 638, 638, 638, 638, 638, 638, 620, 638, 638, 638, 638, 638, 638, 638, 638, 638, 638, 638, 638, 638, 638, 596, 596, 596, 596, 596, 596, 596, 596, 596, 596, 638, 638, 638, 620, 638, 620, 638, 596, 596, 596, 596, 596, 596, 596, 596, 596, 596, 596, 596, 596, 643, 596, 596, 596, 596, 596, 596, 596, 596, 596, 596, 596, 596, 638, 638, 638, 638, 596, 638, 596, 596, 596, 596, 596, 596, 596, 596, 596, 596, 596, 596, 596, 596, 596, 596, 596, 596, 596, 596, 596, 596, 596, 596, 596, 596, 638, 638, 638, 638, 638, 596, 638, 638, 638, 638, 638, 638, 638, 638, 638, 638, 638, 638, 638, 638, 638, 638, 638, 638, 638, 638, 638, 638, 638, 638, 638, 638, 638, 638, 638, 638, 638, 638, 638, 620, 638, 638, 638, 638, 638, 638, 638, 638, 638, 638, 638, 638, 638, 638, 596, 596, 596, 596, 596, 596, 596, 596, 596, 596, 638, 638, 638, 620, 638, 620, 638, 596, 596, 596, 642, 596, 596, 596, 596, 596, 596, 596, 596, 596, 596, 596, 596, 596, 596, 596, 596, 596, 596, 596, 596, 596, 596, 638, 638, 638, 638, 596, 638, 596, 596, 596, 596, 596, 596, 596, 596, 596, 596, 596, 596, 596, 596, 596, 596, 596, 596, 596, 596, 596, 596, 596, 596, 596, 596, 638, 638, 638, 638, 638, 596, 637, 628, 583, 628, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 620, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 644, 644, 644, 620, 644, 620, 644, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 644, 644, 644, 644, 645, 644, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 644, 644, 644, 644, 644, 579, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 620, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 644, 644, 644, 620, 644, 620, 644, 579, 579, 579, 579, 646, 647, 579, 579, 579, 579, 579, 648, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 644, 644, 644, 644, 579, 644, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 644, 644, 644, 644, 644, 579, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 620, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 644, 644, 644, 620, 644, 620, 644, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 649, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 644, 644, 644, 644, 579, 644, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 644, 644, 644, 644, 644, 579, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 620, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 644, 644, 644, 620, 644, 620, 644, 579, 579, 650, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 644, 644, 644, 644, 579, 644, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 644, 644, 644, 644, 644, 579, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 620, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 644, 644, 644, 620, 644, 620, 644, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 651, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 644, 644, 644, 644, 579, 644, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 644, 644, 644, 644, 644, 579, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 620, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 644, 644, 644, 620, 644, 620, 644, 579, 579, 579, 652, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 644, 644, 644, 644, 579, 644, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 644, 644, 644, 644, 644, 579, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 620, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 644, 644, 644, 620, 644, 620, 644, 579, 579, 579, 579, 579, 579, 579, 579, 653, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 644, 644, 644, 644, 579, 644, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 644, 644, 644, 644, 644, 579, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 620, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 644, 644, 644, 620, 644, 620, 644, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 654, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 644, 644, 644, 644, 579, 644, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 644, 644, 644, 644, 644, 579, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 620, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 644, 644, 644, 620, 644, 620, 644, 579, 579, 579, 579, 579, 579, 655, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 644, 644, 644, 644, 579, 644, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 644, 644, 644, 644, 644, 579, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 620, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 644, 644, 644, 620, 644, 620, 644, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 644, 644, 644, 644, 656, 644, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 644, 644, 644, 644, 644, 579, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 620, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 644, 644, 644, 620, 644, 620, 644, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 644, 644, 644, 644, 657, 644, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 644, 644, 644, 644, 644, 579, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 620, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 644, 644, 644, 620, 644, 620, 644, 579, 579, 579, 579, 579, 579, 579, 579, 658, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 644, 644, 644, 644, 579, 644, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 644, 644, 644, 644, 644, 579, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 620, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 644, 644, 644, 620, 644, 620, 644, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 659, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 644, 644, 644, 644, 579, 644, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 644, 644, 644, 644, 644, 579, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 620, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 644, 644, 644, 620, 644, 620, 644, 579, 579, 579, 579, 655, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 644, 644, 644, 644, 579, 644, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 644, 644, 644, 644, 644, 579, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 620, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 644, 644, 644, 620, 644, 620, 644, 579, 579, 579, 579, 579, 579, 579, 579, 660, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 644, 644, 644, 644, 579, 644, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 644, 644, 644, 644, 644, 579, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 620, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 644, 644, 644, 620, 644, 620, 644, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 659, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 644, 644, 644, 644, 579, 644, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 644, 644, 644, 644, 644, 579, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 620, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 644, 644, 644, 620, 644, 620, 644, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 644, 644, 644, 644, 579, 644, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 661, 579, 662, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 644, 644, 644, 644, 644, 579, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 620, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 644, 644, 644, 620, 644, 620, 644, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 644, 644, 644, 644, 579, 644, 579, 579, 579, 579, 579, 579, 579, 579, 663, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 644, 644, 644, 644, 644, 579, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 620, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 644, 644, 644, 620, 644, 620, 644, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 644, 644, 644, 644, 579, 644, 664, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 644, 644, 644, 644, 644, 579, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 620, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 644, 644, 644, 620, 644, 620, 644, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 644, 644, 644, 644, 579, 644, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 657, 579, 579, 579, 579, 579, 579, 579, 644, 644, 644, 644, 644, 579, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 620, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 644, 644, 644, 620, 644, 620, 644, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 644, 644, 644, 644, 579, 644, 579, 579, 579, 657, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 644, 644, 644, 644, 644, 579, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 620, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 644, 644, 644, 620, 644, 620, 644, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 644, 644, 644, 644, 579, 644, 579, 579, 579, 579, 665, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 666, 579, 579, 579, 579, 579, 579, 579, 579, 644, 644, 644, 644, 644, 579, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 620, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 644, 644, 644, 620, 644, 620, 644, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 644, 644, 644, 644, 579, 644, 579, 579, 579, 579, 579, 579, 667, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 644, 644, 644, 644, 644, 579, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 620, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 644, 644, 644, 620, 644, 620, 644, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 644, 644, 644, 644, 579, 644, 579, 579, 579, 579, 579, 579, 579, 579, 668, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 644, 644, 644, 644, 644, 579, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 620, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 644, 644, 644, 620, 644, 620, 644, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 644, 644, 644, 644, 579, 644, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 657, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 644, 644, 644, 644, 644, 579, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 620, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 644, 644, 644, 620, 644, 620, 644, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 644, 644, 644, 644, 579, 644, 579, 579, 579, 579, 669, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 644, 644, 644, 644, 644, 579, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 620, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 644, 644, 644, 620, 644, 620, 644, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 644, 644, 644, 644, 579, 644, 670, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 644, 644, 644, 644, 644, 579, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 620, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 644, 644, 644, 620, 644, 620, 644, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 644, 644, 644, 644, 579, 644, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 657, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 644, 644, 644, 644, 644, 579, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 620, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 644, 644, 644, 620, 644, 620, 644, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 644, 644, 644, 644, 579, 644, 671, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 672, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 644, 644, 644, 644, 644, 579, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 620, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 644, 644, 644, 620, 644, 620, 644, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 644, 644, 644, 644, 579, 644, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 673, 579, 579, 579, 579, 579, 579, 579, 644, 644, 644, 644, 644, 579, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 620, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 644, 644, 644, 620, 644, 620, 644, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 644, 644, 644, 644, 579, 644, 579, 579, 579, 579, 657, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 644, 644, 644, 644, 644, 579, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 620, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 644, 644, 644, 620, 644, 620, 644, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 644, 644, 644, 644, 579, 644, 674, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 644, 644, 644, 644, 644, 579, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 620, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 644, 644, 644, 620, 644, 620, 644, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 644, 644, 644, 644, 579, 644, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 664, 579, 579, 579, 579, 579, 579, 579, 644, 644, 644, 644, 644, 579, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 620, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 644, 644, 644, 620, 644, 620, 644, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 644, 644, 644, 644, 579, 644, 579, 579, 579, 579, 675, 579, 579, 579, 579, 579, 579, 579, 579, 579, 657, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 644, 644, 644, 644, 644, 579, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 620, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 644, 644, 644, 620, 644, 620, 644, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 644, 644, 644, 644, 579, 644, 579, 579, 579, 579, 579, 676, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 644, 644, 644, 644, 644, 579, 677, 677, 677, 677, 677, 677, 677, 677, 677, 677, 677, 677, 677, 677, 677, 677, 677, 677, 677, 677, 677, 677, 677, 677, 677, 677, 677, 677, 677, 677, 677, 677, 677, 620, 677, 677, 677, 677, 677, 677, 677, 677, 677, 677, 677, 677, 677, 677, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 677, 677, 677, 620, 677, 620, 677, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 677, 677, 677, 677, 579, 677, 579, 579, 579, 579, 579, 579, 579, 579, 678, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 677, 677, 677, 677, 677, 579, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 620, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 644, 644, 644, 620, 644, 620, 644, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 644, 644, 644, 644, 579, 644, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 679, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 644, 644, 644, 644, 644, 579, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 620, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 644, 644, 644, 620, 644, 620, 644, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 644, 644, 644, 644, 579, 644, 579, 579, 579, 579, 680, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 644, 644, 644, 644, 644, 579, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 620, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 644, 644, 644, 620, 644, 620, 644, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 644, 644, 644, 644, 579, 644, 579, 579, 579, 681, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 644, 644, 644, 644, 644, 579, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 620, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 644, 644, 644, 620, 644, 682, 644, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 644, 644, 644, 644, 579, 644, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 644, 644, 644, 644, 644, 579, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 620, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 644, 644, 644, 620, 644, 620, 644, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 644, 644, 644, 644, 579, 644, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 683, 579, 684, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 644, 644, 644, 644, 644, 579, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 620, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 644, 644, 644, 620, 644, 620, 644, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 644, 644, 644, 644, 579, 644, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 685, 579, 579, 579, 579, 579, 579, 579, 644, 644, 644, 644, 644, 579, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 620, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 644, 644, 644, 620, 644, 620, 644, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 644, 644, 644, 644, 579, 644, 579, 579, 579, 579, 657, 579, 579, 579, 686, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 644, 644, 644, 644, 644, 579, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 620, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 644, 644, 644, 620, 644, 620, 644, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 644, 644, 644, 644, 579, 644, 579, 579, 579, 579, 579, 657, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 644, 644, 644, 644, 644, 579, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 620, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 644, 644, 644, 620, 644, 620, 644, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 644, 644, 644, 644, 579, 644, 579, 579, 579, 657, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 687, 579, 579, 579, 579, 579, 579, 579, 644, 644, 644, 644, 644, 579, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 620, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 644, 644, 644, 620, 644, 620, 644, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 644, 644, 644, 644, 579, 644, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 688, 579, 579, 579, 579, 579, 644, 644, 644, 644, 644, 579, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 620, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 644, 644, 644, 620, 644, 620, 644, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 644, 644, 644, 644, 579, 644, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 673, 579, 579, 579, 579, 579, 579, 579, 579, 644, 644, 644, 644, 644, 579, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 620, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 644, 644, 644, 620, 644, 620, 644, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 644, 644, 644, 644, 579, 644, 689, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 611, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 644, 644, 644, 644, 644, 579, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 620, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 644, 644, 644, 620, 644, 620, 644, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 644, 644, 644, 644, 579, 644, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 671, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 644, 644, 644, 644, 644, 579, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 620, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 644, 644, 644, 620, 644, 620, 644, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 644, 644, 644, 644, 579, 644, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 657, 579, 579, 579, 579, 579, 579, 579, 579, 644, 644, 644, 644, 644, 579, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 620, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 644, 644, 644, 620, 644, 620, 644, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 644, 644, 644, 644, 579, 644, 579, 579, 579, 579, 579, 657, 579, 579, 579, 579, 579, 579, 579, 657, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 644, 644, 644, 644, 644, 579, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 620, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 644, 644, 644, 620, 644, 620, 644, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 644, 644, 644, 644, 579, 644, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 690, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 644, 644, 644, 644, 644, 579, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 620, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 644, 644, 644, 620, 644, 620, 644, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 644, 644, 644, 644, 579, 644, 579, 579, 579, 691, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 644, 644, 644, 644, 644, 579, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 620, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 644, 644, 644, 620, 644, 620, 644, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 644, 644, 644, 644, 579, 644, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 692, 579, 579, 579, 579, 579, 644, 644, 644, 644, 644, 579, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 620, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 644, 644, 644, 620, 644, 620, 644, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 644, 644, 644, 644, 579, 644, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 673, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 644, 644, 644, 644, 644, 579, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 620, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 644, 644, 644, 620, 644, 620, 644, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 644, 644, 644, 644, 579, 644, 579, 579, 579, 579, 693, 579, 579, 579, 694, 579, 579, 579, 579, 579, 695, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 644, 644, 644, 644, 644, 579, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 620, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 644, 644, 644, 620, 644, 620, 644, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 644, 644, 644, 644, 579, 644, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 695, 579, 579, 644, 644, 644, 644, 644, 579, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 620, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 644, 644, 644, 620, 644, 620, 644, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 644, 644, 644, 644, 579, 644, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 657, 579, 579, 579, 579, 579, 579, 644, 644, 644, 644, 644, 579, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 620, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 644, 644, 644, 620, 644, 620, 644, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 644, 644, 644, 644, 579, 644, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 657, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 644, 644, 644, 644, 644, 579, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 620, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 644, 644, 644, 620, 644, 620, 644, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 644, 644, 644, 644, 579, 644, 579, 579, 579, 579, 696, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 644, 644, 644, 644, 644, 579, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 620, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 644, 644, 644, 620, 644, 620, 644, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 644, 644, 644, 644, 579, 644, 579, 579, 579, 697, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 698, 699, 579, 579, 579, 579, 579, 579, 644, 644, 644, 644, 644, 579, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 620, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 644, 644, 644, 620, 644, 620, 644, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 644, 644, 644, 644, 579, 644, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 657, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 644, 644, 644, 644, 644, 579, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 620, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 644, 644, 644, 620, 644, 620, 644, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 644, 644, 644, 644, 579, 644, 579, 579, 700, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 644, 644, 644, 644, 644, 579, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 620, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 644, 644, 644, 620, 644, 620, 644, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 644, 644, 644, 644, 579, 644, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 673, 579, 579, 579, 579, 579, 644, 644, 644, 644, 644, 579, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 620, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 644, 644, 644, 620, 644, 620, 644, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 644, 644, 644, 644, 579, 644, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 701, 579, 579, 702, 579, 579, 579, 579, 579, 644, 644, 644, 644, 644, 579, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 620, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 644, 644, 644, 620, 644, 620, 644, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 644, 644, 644, 644, 579, 644, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 657, 579, 644, 644, 644, 644, 644, 579, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 620, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 644, 644, 644, 620, 644, 620, 644, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 644, 644, 644, 644, 579, 644, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 668, 579, 579, 579, 579, 579, 579, 579, 579, 644, 644, 644, 644, 644, 579, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 620, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 644, 644, 644, 620, 644, 620, 644, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 644, 644, 644, 644, 579, 644, 579, 579, 579, 579, 703, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 704, 579, 579, 579, 579, 579, 644, 644, 644, 644, 644, 579, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 620, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 644, 644, 644, 620, 644, 620, 644, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 644, 644, 644, 644, 579, 644, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 686, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 644, 644, 644, 644, 644, 579, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 620, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 644, 644, 644, 620, 644, 620, 644, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 644, 644, 644, 644, 579, 644, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 705, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 644, 644, 644, 644, 644, 579, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 620, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 644, 644, 644, 620, 644, 620, 644, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 644, 644, 644, 644, 579, 644, 579, 579, 579, 579, 611, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 644, 644, 644, 644, 644, 579, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 620, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 644, 644, 644, 620, 644, 620, 644, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 644, 644, 644, 644, 579, 644, 579, 579, 579, 579, 579, 579, 579, 706, 579, 579, 579, 579, 579, 579, 579, 579, 579, 700, 579, 579, 579, 579, 579, 579, 579, 579, 644, 644, 644, 644, 644, 579, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 620, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 644, 644, 644, 620, 644, 620, 644, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 644, 644, 644, 644, 579, 644, 579, 579, 579, 579, 668, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 644, 644, 644, 644, 644, 579, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 620, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 644, 644, 644, 620, 644, 620, 644, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 644, 644, 644, 644, 579, 644, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 707, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 644, 644, 644, 644, 644, 579, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 620, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 644, 644, 644, 620, 644, 620, 644, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 644, 644, 644, 644, 579, 644, 579, 579, 579, 708, 579, 579, 579, 579, 579, 579, 579, 709, 579, 579, 579, 579, 579, 579, 579, 710, 579, 579, 579, 579, 579, 579, 644, 644, 644, 644, 644, 579, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 620, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 644, 644, 644, 620, 644, 620, 644, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 644, 644, 644, 644, 579, 644, 579, 579, 579, 579, 686, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 644, 644, 644, 644, 644, 579, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 620, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 644, 644, 644, 620, 644, 620, 644, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 644, 644, 644, 644, 579, 644, 579, 579, 579, 579, 674, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 644, 644, 644, 644, 644, 579, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 620, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 644, 644, 644, 620, 644, 620, 644, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 644, 644, 644, 644, 579, 644, 579, 579, 579, 579, 579, 579, 579, 579, 694, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 644, 644, 644, 644, 644, 579, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 620, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 644, 644, 644, 620, 644, 620, 644, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 644, 644, 644, 644, 579, 644, 579, 579, 579, 579, 579, 579, 579, 711, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 644, 644, 644, 644, 644, 579, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 620, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 644, 644, 644, 620, 644, 620, 644, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 644, 644, 644, 644, 579, 644, 579, 579, 579, 579, 668, 579, 579, 579, 692, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 644, 644, 644, 644, 644, 579, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 620, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 644, 644, 644, 620, 644, 620, 644, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 644, 644, 644, 644, 579, 644, 579, 579, 579, 579, 579, 579, 579, 579, 712, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 644, 644, 644, 644, 644, 579, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 620, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 644, 644, 644, 620, 644, 620, 644, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 644, 644, 644, 644, 579, 644, 579, 579, 579, 579, 713, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 644, 644, 644, 644, 644, 579, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 620, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 644, 644, 644, 620, 644, 620, 644, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 644, 644, 644, 644, 579, 644, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 662, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 644, 644, 644, 644, 644, 579, 591, 623, 715, 716, 716, 716, 715, 716, 716, 716, 716, 717, 716, 717, 717, 717, 716, 716, 716, 716, 716, 716, 716, 716, 716, 716, 716, 716, 715, 716, 716, 716, 716, 716, 717, 716, 716, 718, 716, 716, 716, 716, 716, 716, 716, 716, 716, 716, 716, 716, 716, 716, 716, 716, 716, 716, 716, 716, 716, 716, 716, 716, 716, 716, 716, 716, 716, 714, 714, 714, 714, 714, 714, 714, 714, 714, 714, 714, 714, 714, 714, 714, 714, 714, 714, 714, 714, 714, 714, 714, 714, 714, 714, 716, 719, 716, 716, 714, 716, 714, 714, 714, 714, 714, 714, 714, 714, 714, 714, 714, 714, 714, 714, 714, 714, 714, 714, 714, 714, 714, 714, 714, 714, 714, 714, 716, 716, 716, 716, 716, 714, 720, 720, 720, 720, 720, 720, 720, 720, 720, 720, 720, 720, 720, 720, 720, 720, 720, 720, 720, 720, 720, 720, 720, 720, 720, 720, 720, 720, 720, 720, 720, 720, 720, 104, 720, 720, 720, 720, 720, 720, 720, 720, 720, 720, 720, 720, 720, 720, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 105, 720, 720, 720, 720, 104, 720, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 720, 720, 720, 720, 103, 720, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 720, 720, 720, 720, 720, 103, 717, 721, 717, 717, 717, 721, 721, 721, 721, 721, 721, 721, 721, 721, 721, 721, 721, 721, 721, 721, 721, 721, 721, 717, 721, 722, 723, 724, 725, 726, 720, 727, 729, 730, 730, 730, 729, 730, 730, 730, 730, 731, 732, 731, 731, 731, 730, 730, 730, 730, 730, 730, 730, 730, 730, 730, 730, 730, 729, 730, 730, 730, 730, 730, 731, 733, 730, 734, 730, 735, 736, 730, 730, 730, 737, 738, 730, 738, 730, 735, 730, 730, 730, 730, 730, 730, 730, 730, 730, 730, 730, 730, 739, 740, 741, 730, 730, 742, 742, 742, 742, 742, 742, 742, 742, 742, 742, 742, 742, 742, 742, 742, 742, 742, 742, 742, 742, 742, 742, 742, 742, 742, 742, 743, 744, 730, 735, 728, 735, 728, 728, 728, 728, 728, 728, 728, 728, 728, 728, 728, 728, 728, 728, 728, 728, 728, 728, 728, 728, 728, 728, 728, 728, 728, 728, 730, 745, 730, 738, 730, 728, 746, 746, 746, 746, 746, 746, 746, 746, 746, 746, 746, 746, 746, 746, 746, 746, 746, 746, 746, 746, 746, 746, 746, 746, 746, 746, 746, 746, 746, 746, 746, 746, 746, 747, 746, 746, 746, 746, 746, 746, 746, 746, 746, 746, 746, 746, 746, 746, 728, 728, 728, 728, 728, 728, 728, 728, 728, 728, 746, 746, 746, 746, 746, 747, 746, 728, 728, 728, 728, 728, 728, 728, 728, 728, 728, 728, 728, 728, 728, 728, 728, 728, 728, 728, 728, 728, 728, 728, 728, 728, 728, 746, 746, 746, 746, 728, 746, 728, 728, 728, 728, 728, 728, 728, 728, 728, 728, 728, 728, 728, 728, 728, 728, 728, 728, 728, 728, 728, 728, 728, 728, 728, 728, 746, 746, 746, 746, 746, 728, 749, 748, 750, 731, 751, 731, 731, 731, 751, 751, 751, 751, 751, 751, 751, 751, 751, 751, 751, 751, 751, 751, 751, 751, 751, 751, 731, 751, 752, 735, 753, 753, 735, 753, 753, 753, 753, 753, 753, 753, 753, 753, 753, 753, 753, 753, 753, 753, 753, 753, 753, 753, 753, 753, 753, 753, 753, 753, 753, 753, 753, 753, 753, 753, 753, 753, 753, 753, 753, 753, 753, 753, 753, 753, 753, 753, 753, 753, 753, 753, 753, 753, 753, 753, 753, 753, 753, 753, 753, 753, 753, 753, 753, 753, 735, 753, 754, 755, 756, 757, 735, 753, 735, 753, 735, 753, 735, 758, 753, 735, 753, 760, 735, 759, 759, 759, 759, 759, 759, 759, 759, 759, 759, 759, 759, 759, 759, 759, 759, 759, 759, 759, 759, 759, 759, 759, 759, 759, 759, 759, 759, 759, 759, 759, 759, 759, 759, 759, 759, 759, 759, 759, 759, 759, 759, 759, 759, 759, 759, 759, 759, 759, 759, 759, 759, 759, 759, 759, 759, 759, 759, 759, 759, 759, 759, 759, 735, 759, 735, 753, 735, 735, 753, 761, 761, 761, 761, 761, 761, 761, 761, 761, 761, 761, 761, 761, 761, 761, 761, 761, 761, 761, 761, 761, 761, 761, 761, 761, 761, 761, 761, 761, 761, 761, 761, 761, 747, 761, 761, 761, 761, 761, 761, 761, 761, 761, 761, 761, 761, 761, 761, 742, 742, 742, 742, 742, 742, 742, 742, 742, 742, 761, 761, 761, 761, 761, 747, 761, 742, 742, 742, 742, 742, 742, 742, 742, 742, 742, 742, 742, 742, 742, 742, 742, 742, 742, 742, 742, 742, 742, 742, 742, 742, 742, 761, 761, 761, 761, 742, 761, 742, 742, 742, 742, 742, 742, 742, 742, 742, 742, 742, 742, 742, 742, 742, 742, 742, 742, 742, 742, 742, 742, 742, 742, 742, 742, 761, 761, 761, 761, 761, 742, 760, 759, 732, 759, 735, 753, 763, 762, 762, 762, 763, 762, 762, 762, 762, 764, 765, 764, 764, 764, 762, 762, 762, 762, 762, 762, 762, 762, 762, 762, 762, 762, 763, 762, 762, 762, 762, 762, 764, 762, 762, 766, 762, 113, 767, 762, 768, 762, 769, 113, 144, 770, 146, 113, 762, 762, 762, 762, 762, 762, 762, 762, 762, 762, 771, 762, 772, 144, 773, 774, 762, 762, 762, 762, 762, 762, 762, 762, 762, 762, 762, 762, 762, 762, 762, 762, 762, 762, 762, 762, 762, 762, 762, 762, 762, 762, 762, 144, 775, 144, 113, 762, 762, 762, 762, 762, 762, 762, 762, 762, 762, 776, 762, 762, 762, 762, 762, 762, 762, 762, 777, 762, 762, 778, 762, 779, 762, 762, 762, 157, 158, 762, 113, 762, 780, 780, 780, 780, 780, 780, 780, 780, 780, 764, 780, 764, 764, 764, 780, 780, 780, 780, 780, 780, 780, 780, 780, 780, 780, 780, 780, 780, 780, 780, 780, 780, 764, 780, 780, 780, 780, 139, 140, 780, 141, 780, 142, 143, 144, 145, 146, 139, 780, 780, 780, 780, 780, 780, 780, 780, 780, 780, 147, 780, 148, 144, 149, 150, 780, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 151, 152, 144, 113, 108, 780, 108, 108, 108, 108, 108, 108, 108, 108, 153, 108, 108, 108, 108, 108, 108, 108, 108, 154, 108, 108, 155, 108, 156, 108, 108, 108, 157, 158, 780, 113, 780, 108, 781, 782, 782, 782, 781, 782, 782, 782, 782, 144, 783, 144, 144, 144, 782, 782, 782, 782, 782, 782, 782, 782, 782, 782, 782, 782, 781, 782, 782, 782, 782, 782, 144, 782, 782, 782, 782, 782, 782, 782, 782, 782, 782, 782, 782, 782, 782, 782, 782, 782, 782, 782, 782, 782, 782, 782, 782, 782, 782, 782, 782, 144, 782, 144, 783, 144, 144, 144, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 144, 107, 107, 107, 107, 107, 113, 107, 107, 107, 107, 107, 107, 107, 144, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 144, 107, 144, 783, 144, 144, 144, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 144, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 144, 107, 784, 144, 783, 144, 144, 144, 785, 785, 785, 785, 785, 785, 785, 785, 785, 785, 785, 785, 785, 785, 785, 785, 785, 785, 144, 785, 785, 785, 785, 785, 785, 785, 785, 785, 786, 785, 785, 785, 785, 785, 785, 785, 785, 785, 785, 785, 785, 785, 785, 785, 785, 785, 785, 144, 785, 144, 783, 144, 144, 144, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 144, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 144, 144, 107, 787, 781, 144, 781, 789, 788, 791, 792, 791, 791, 791, 790, 790, 790, 790, 790, 790, 790, 790, 790, 790, 790, 790, 790, 790, 790, 790, 790, 790, 791, 790, 793, 781, 781, 781, 781, 781, 781, 781, 781, 781, 781, 781, 781, 781, 781, 781, 781, 781, 781, 781, 781, 781, 781, 781, 781, 781, 781, 781, 781, 781, 781, 781, 781, 781, 109, 781, 781, 781, 781, 781, 781, 781, 781, 781, 781, 781, 781, 781, 781, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 110, 781, 781, 781, 781, 109, 781, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 781, 781, 781, 781, 108, 781, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 781, 781, 781, 781, 781, 108, 794, 144, 783, 144, 144, 144, 781, 781, 781, 781, 781, 781, 781, 781, 781, 781, 781, 781, 781, 781, 781, 781, 781, 781, 144, 781, 781, 781, 781, 781, 781, 781, 781, 781, 781, 781, 781, 781, 781, 781, 781, 781, 781, 781, 781, 781, 781, 781, 781, 781, 781, 781, 781, 144, 781, 781, 781, 781, 781, 781, 781, 781, 781, 781, 781, 781, 781, 781, 781, 781, 781, 781, 781, 781, 781, 781, 781, 781, 781, 781, 781, 781, 781, 781, 781, 781, 781, 781, 781, 781, 781, 781, 781, 781, 781, 781, 781, 781, 781, 781, 781, 781, 781, 781, 781, 781, 781, 781, 781, 781, 781, 781, 781, 781, 781, 781, 113, 781, 795, 796, 797, 798, 799, 800, 144, 783, 144, 144, 144, 781, 781, 781, 781, 781, 781, 781, 781, 781, 781, 781, 781, 781, 781, 781, 781, 781, 781, 144, 781, 781, 781, 781, 781, 781, 781, 781, 781, 113, 781, 781, 781, 781, 781, 781, 781, 781, 781, 781, 781, 781, 781, 781, 781, 781, 781, 781, 144, 781, 144, 788, 113, 801, 113, 801, 802, 803, 802, 802, 802, 790, 790, 790, 790, 790, 790, 790, 790, 790, 790, 790, 790, 790, 790, 790, 790, 790, 790, 802, 790, 804, 801, 805, 805, 805, 805, 805, 805, 805, 805, 805, 116, 805, 116, 116, 116, 805, 805, 805, 805, 805, 805, 805, 805, 805, 805, 805, 805, 805, 805, 805, 805, 805, 805, 116, 805, 805, 805, 805, 117, 118, 805, 119, 805, 120, 121, 122, 123, 124, 117, 805, 805, 805, 805, 805, 805, 805, 805, 805, 805, 125, 805, 126, 122, 127, 128, 805, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 129, 130, 122, 131, 115, 805, 115, 115, 115, 115, 115, 115, 115, 115, 132, 115, 115, 115, 115, 115, 115, 115, 115, 133, 115, 115, 134, 115, 135, 115, 115, 115, 136, 137, 805, 131, 805, 115, 144, 801, 806, 801, 807, 801, 808, 801, 809, 183, 183, 183, 809, 183, 183, 183, 183, 810, 183, 810, 810, 810, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 809, 183, 183, 183, 183, 183, 810, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 183, 811, 183, 183, 185, 183, 185, 185, 185, 189, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 183, 183, 183, 183, 183, 185, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 812, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 183, 182, 182, 182, 182, 812, 182, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 182, 182, 182, 182, 185, 182, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 182, 182, 182, 182, 182, 185, 813, 813, 813, 813, 813, 813, 813, 813, 813, 186, 813, 186, 186, 186, 813, 813, 813, 813, 813, 813, 813, 813, 813, 813, 813, 813, 813, 813, 813, 813, 813, 813, 186, 813, 813, 813, 813, 813, 813, 813, 187, 813, 813, 813, 813, 813, 813, 813, 813, 813, 813, 813, 813, 813, 813, 813, 813, 813, 813, 813, 813, 813, 813, 813, 813, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 813, 188, 813, 813, 185, 813, 185, 185, 185, 189, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 813, 813, 813, 813, 813, 185, 814, 813, 813, 813, 813, 813, 813, 813, 813, 813, 813, 813, 813, 813, 813, 813, 813, 813, 813, 813, 813, 813, 813, 813, 813, 813, 813, 813, 813, 813, 813, 813, 813, 813, 812, 813, 813, 813, 813, 813, 813, 813, 813, 813, 813, 813, 813, 813, 813, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 183, 813, 813, 813, 813, 812, 813, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 813, 813, 813, 813, 185, 813, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 815, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 813, 813, 813, 813, 813, 185, 190, 813, 817, 816, 816, 816, 817, 816, 816, 816, 816, 818, 816, 818, 818, 818, 816, 816, 816, 816, 816, 816, 816, 816, 816, 816, 816, 816, 817, 816, 816, 816, 816, 816, 818, 816, 816, 819, 816, 816, 816, 816, 816, 816, 816, 816, 816, 816, 816, 816, 816, 816, 816, 816, 816, 816, 816, 816, 816, 816, 816, 816, 816, 816, 816, 816, 816, 816, 816, 816, 816, 816, 816, 816, 816, 816, 816, 816, 816, 816, 816, 816, 816, 816, 816, 816, 816, 816, 816, 816, 816, 816, 816, 816, 820, 816, 816, 816, 816, 816, 816, 816, 821, 816, 816, 816, 816, 816, 816, 816, 816, 816, 816, 816, 816, 816, 816, 816, 816, 816, 816, 816, 816, 816, 816, 822, 816, 818, 823, 818, 818, 818, 823, 823, 823, 823, 823, 823, 823, 823, 823, 823, 823, 823, 823, 823, 823, 823, 823, 823, 818, 823, 824, 825, 826, 827, 829, 828, 830, 831, 828, 832, 834, 835, 835, 835, 834, 835, 835, 835, 835, 836, 837, 836, 836, 836, 835, 835, 835, 835, 835, 835, 835, 835, 835, 835, 835, 835, 834, 835, 835, 835, 835, 835, 836, 835, 835, 838, 835, 835, 835, 835, 835, 835, 835, 835, 835, 835, 835, 835, 835, 835, 835, 835, 835, 835, 835, 835, 835, 835, 835, 835, 835, 835, 835, 835, 835, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 835, 839, 835, 835, 833, 835, 833, 833, 833, 833, 833, 833, 833, 833, 840, 833, 833, 833, 833, 833, 833, 833, 833, 841, 833, 833, 842, 833, 843, 833, 833, 833, 835, 835, 835, 835, 835, 833, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 844, 844, 844, 844, 844, 844, 844, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 844, 844, 844, 844, 833, 844, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 844, 844, 844, 844, 844, 833, 836, 845, 836, 836, 836, 845, 845, 845, 845, 845, 845, 845, 845, 845, 845, 845, 845, 845, 845, 845, 845, 845, 845, 836, 845, 846, 847, 848, 849, 850, 852, 851, 853, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 854, 854, 854, 854, 854, 854, 854, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 854, 854, 854, 854, 833, 854, 833, 833, 833, 833, 833, 855, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 854, 854, 854, 854, 854, 833, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 854, 854, 854, 854, 854, 854, 854, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 854, 854, 854, 854, 833, 854, 833, 833, 833, 833, 856, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 854, 854, 854, 854, 854, 833, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 854, 854, 854, 854, 854, 854, 854, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 854, 854, 854, 854, 833, 854, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 857, 833, 833, 833, 833, 833, 833, 833, 854, 854, 854, 854, 854, 833, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 854, 854, 854, 854, 854, 854, 854, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 854, 854, 854, 854, 833, 854, 833, 833, 858, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 854, 854, 854, 854, 854, 833, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 854, 854, 854, 854, 854, 854, 854, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 854, 854, 854, 854, 833, 854, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 859, 833, 833, 833, 833, 833, 854, 854, 854, 854, 854, 833, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 854, 854, 854, 854, 854, 854, 854, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 854, 854, 854, 854, 833, 854, 833, 833, 833, 833, 855, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 854, 854, 854, 854, 854, 833, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 854, 854, 854, 854, 854, 854, 854, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 854, 854, 854, 854, 833, 854, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 860, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 854, 854, 854, 854, 854, 833, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 854, 854, 854, 854, 854, 854, 854, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 854, 854, 854, 854, 833, 854, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 861, 833, 833, 833, 833, 833, 833, 833, 862, 833, 833, 833, 833, 833, 833, 854, 854, 854, 854, 854, 833, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 854, 854, 854, 854, 854, 854, 854, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 854, 854, 854, 854, 833, 854, 833, 833, 833, 833, 863, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 854, 854, 854, 854, 854, 833, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 854, 854, 854, 854, 854, 854, 854, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 854, 854, 854, 854, 833, 854, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 864, 833, 833, 833, 833, 833, 833, 833, 854, 854, 854, 854, 854, 833, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 854, 854, 854, 854, 854, 854, 854, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 854, 854, 854, 854, 833, 854, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 855, 833, 833, 833, 833, 833, 833, 833, 854, 854, 854, 854, 854, 833, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 854, 854, 854, 854, 854, 854, 854, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 854, 854, 854, 854, 833, 854, 833, 833, 833, 833, 833, 833, 833, 833, 865, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 854, 854, 854, 854, 854, 833, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 854, 854, 854, 854, 854, 854, 854, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 854, 854, 854, 854, 833, 854, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 855, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 854, 854, 854, 854, 854, 833, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 854, 854, 854, 854, 854, 854, 854, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 854, 854, 854, 854, 833, 854, 833, 833, 833, 833, 833, 833, 833, 866, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 854, 854, 854, 854, 854, 833, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 854, 854, 854, 854, 854, 854, 854, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 854, 854, 854, 854, 833, 854, 833, 833, 833, 833, 833, 833, 833, 833, 867, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 854, 854, 854, 854, 854, 833, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 854, 854, 854, 854, 854, 854, 854, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 854, 854, 854, 854, 833, 854, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 859, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 854, 854, 854, 854, 854, 833, 869, 215, 215, 215, 869, 215, 215, 215, 215, 870, 871, 870, 870, 870, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 869, 215, 215, 215, 215, 215, 870, 872, 215, 873, 215, 874, 875, 215, 876, 215, 877, 878, 215, 879, 880, 881, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 882, 215, 883, 884, 885, 886, 215, 887, 888, 887, 887, 889, 887, 887, 887, 887, 887, 887, 887, 887, 887, 887, 887, 887, 887, 887, 887, 887, 887, 887, 887, 887, 887, 890, 891, 215, 892, 893, 215, 894, 895, 896, 897, 898, 899, 868, 868, 900, 868, 868, 868, 901, 902, 903, 868, 868, 904, 905, 906, 907, 868, 908, 868, 909, 868, 910, 911, 215, 892, 215, 868, 912, 912, 912, 912, 912, 912, 912, 912, 912, 913, 912, 913, 913, 913, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 913, 287, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 288, 912, 912, 289, 912, 287, 912, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 912, 914, 912, 912, 868, 912, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 912, 912, 912, 912, 912, 868, 916, 915, 915, 917, 915, 918, 920, 921, 919, 919, 919, 919, 919, 919, 919, 919, 919, 919, 919, 919, 919, 919, 919, 919, 919, 919, 919, 919, 919, 919, 919, 919, 919, 919, 919, 919, 919, 919, 919, 919, 919, 919, 919, 919, 919, 919, 919, 919, 919, 919, 919, 919, 919, 919, 919, 919, 919, 919, 919, 919, 919, 919, 919, 919, 919, 919, 919, 919, 919, 919, 919, 922, 919, 924, 923, 925, 926, 927, 870, 928, 870, 870, 870, 928, 928, 928, 928, 928, 928, 928, 928, 928, 928, 928, 928, 928, 928, 928, 928, 928, 928, 870, 928, 930, 929, 932, 933, 932, 932, 932, 931, 931, 931, 931, 931, 931, 931, 931, 931, 931, 931, 931, 931, 931, 931, 931, 931, 931, 932, 931, 215, 934, 934, 934, 934, 934, 934, 934, 934, 934, 934, 934, 934, 934, 934, 934, 934, 934, 934, 934, 934, 934, 934, 934, 934, 934, 934, 934, 934, 934, 934, 934, 934, 934, 934, 934, 934, 934, 934, 934, 934, 934, 934, 934, 934, 934, 934, 934, 934, 934, 934, 934, 934, 934, 934, 934, 934, 934, 934, 934, 934, 934, 934, 934, 934, 215, 934, 935, 936, 937, 938, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 940, 940, 940, 940, 940, 940, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 940, 942, 213, 213, 213, 942, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 942, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 213, 213, 213, 213, 213, 213, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 213, 944, 943, 943, 943, 943, 943, 943, 943, 943, 943, 943, 943, 943, 943, 943, 943, 943, 943, 943, 943, 943, 943, 943, 215, 943, 945, 947, 946, 946, 946, 946, 946, 946, 946, 946, 946, 946, 946, 946, 946, 946, 946, 946, 946, 946, 215, 946, 215, 204, 216, 217, 216, 216, 216, 943, 943, 943, 943, 943, 943, 943, 943, 943, 943, 943, 943, 943, 943, 943, 943, 943, 943, 216, 943, 943, 218, 943, 943, 943, 943, 943, 943, 943, 943, 943, 943, 943, 943, 219, 219, 219, 219, 219, 219, 219, 219, 219, 219, 943, 943, 943, 215, 943, 943, 943, 943, 943, 943, 943, 943, 943, 943, 943, 943, 943, 943, 943, 943, 943, 943, 943, 943, 943, 943, 943, 943, 943, 943, 943, 943, 943, 943, 220, 943, 233, 234, 233, 233, 233, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 233, 232, 232, 235, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 236, 236, 236, 236, 236, 236, 236, 236, 236, 236, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 237, 232, 216, 217, 216, 216, 216, 943, 943, 943, 943, 943, 943, 943, 943, 943, 943, 943, 943, 943, 943, 943, 943, 943, 943, 216, 943, 943, 218, 943, 943, 943, 943, 943, 943, 943, 943, 943, 943, 943, 943, 219, 219, 219, 219, 219, 219, 219, 219, 219, 219, 943, 943, 943, 215, 215, 943, 943, 943, 943, 943, 943, 943, 943, 943, 943, 943, 943, 943, 943, 943, 943, 943, 943, 943, 943, 943, 943, 943, 943, 943, 943, 943, 943, 943, 220, 943, 949, 934, 951, 950, 934, 952, 952, 952, 934, 952, 952, 952, 952, 952, 952, 952, 952, 952, 952, 952, 952, 952, 952, 952, 952, 952, 952, 952, 952, 952, 934, 952, 934, 934, 934, 934, 934, 934, 934, 934, 934, 934, 934, 934, 934, 934, 934, 934, 934, 934, 934, 934, 934, 934, 934, 934, 934, 934, 934, 934, 934, 934, 934, 934, 934, 954, 955, 934, 956, 241, 957, 955, 934, 934, 958, 959, 934, 959, 934, 241, 934, 934, 934, 934, 934, 934, 934, 934, 934, 934, 960, 934, 961, 962, 963, 934, 964, 953, 953, 953, 953, 953, 953, 953, 953, 953, 953, 953, 953, 953, 953, 953, 953, 953, 953, 953, 953, 953, 953, 953, 953, 953, 953, 965, 934, 934, 241, 953, 241, 953, 953, 953, 953, 953, 953, 953, 953, 953, 953, 953, 953, 953, 953, 953, 953, 953, 953, 953, 953, 953, 953, 953, 953, 953, 953, 934, 966, 934, 967, 934, 953, 968, 968, 968, 968, 968, 968, 968, 968, 968, 968, 968, 968, 968, 968, 968, 968, 968, 968, 968, 968, 968, 968, 968, 968, 968, 968, 968, 968, 968, 968, 968, 968, 968, 969, 968, 968, 968, 968, 968, 968, 968, 968, 968, 968, 968, 968, 968, 968, 953, 953, 953, 953, 953, 953, 953, 953, 953, 953, 968, 968, 968, 970, 968, 969, 968, 953, 953, 953, 953, 953, 953, 953, 953, 953, 953, 953, 953, 953, 953, 953, 953, 953, 953, 953, 953, 953, 953, 953, 953, 953, 953, 968, 968, 968, 968, 953, 968, 953, 953, 953, 953, 953, 953, 953, 953, 953, 953, 953, 953, 953, 953, 953, 953, 953, 953, 953, 953, 953, 953, 953, 953, 953, 953, 968, 968, 968, 968, 968, 953, 972, 971, 973, 975, 976, 974, 974, 974, 974, 974, 974, 974, 974, 974, 974, 974, 974, 974, 974, 974, 974, 974, 974, 974, 974, 974, 974, 974, 974, 974, 974, 974, 974, 974, 974, 974, 974, 974, 974, 974, 974, 974, 974, 974, 974, 974, 974, 974, 974, 974, 974, 974, 974, 974, 974, 974, 974, 974, 974, 974, 974, 974, 974, 974, 974, 974, 974, 974, 977, 974, 979, 980, 978, 981, 982, 983, 984, 241, 968, 968, 985, 968, 968, 968, 968, 968, 968, 968, 968, 968, 968, 968, 968, 968, 968, 968, 968, 968, 968, 968, 968, 968, 968, 968, 968, 968, 968, 968, 968, 968, 968, 968, 968, 968, 968, 968, 968, 968, 968, 968, 968, 968, 968, 968, 968, 968, 968, 968, 968, 968, 968, 968, 968, 968, 968, 968, 968, 968, 968, 968, 968, 968, 241, 968, 968, 968, 968, 968, 968, 968, 968, 968, 968, 968, 968, 968, 968, 968, 968, 968, 968, 968, 968, 968, 968, 968, 968, 968, 968, 968, 968, 968, 968, 968, 968, 968, 968, 968, 968, 968, 968, 968, 968, 968, 968, 968, 968, 968, 968, 968, 968, 968, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 968, 968, 968, 968, 968, 968, 968, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 968, 968, 968, 968, 240, 968, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 968, 968, 968, 968, 968, 240, 243, 243, 243, 243, 243, 243, 243, 243, 243, 243, 968, 986, 968, 241, 968, 241, 968, 241, 987, 968, 241, 968, 241, 968, 241, 241, 968, 988, 988, 988, 988, 988, 988, 988, 988, 988, 988, 988, 988, 988, 988, 988, 988, 988, 988, 988, 988, 988, 988, 988, 988, 988, 988, 988, 988, 988, 988, 988, 988, 988, 988, 988, 988, 988, 988, 988, 988, 988, 988, 988, 988, 988, 988, 988, 988, 990, 990, 990, 990, 990, 990, 990, 990, 990, 990, 988, 988, 988, 988, 988, 988, 991, 989, 989, 989, 989, 989, 989, 989, 989, 989, 989, 989, 989, 989, 989, 989, 989, 989, 989, 989, 989, 989, 989, 989, 989, 989, 989, 988, 988, 988, 988, 989, 988, 989, 989, 989, 989, 989, 989, 989, 989, 989, 989, 989, 989, 989, 989, 989, 989, 989, 989, 989, 989, 989, 989, 989, 989, 989, 989, 988, 988, 988, 988, 988, 989, 993, 993, 993, 993, 993, 993, 993, 993, 993, 993, 992, 994, 994, 994, 994, 994, 994, 994, 994, 994, 994, 994, 994, 994, 994, 994, 994, 994, 994, 994, 994, 994, 994, 994, 994, 994, 994, 994, 994, 994, 994, 994, 994, 994, 994, 994, 994, 994, 994, 994, 994, 994, 994, 994, 994, 994, 994, 994, 994, 996, 996, 996, 996, 996, 996, 996, 996, 996, 996, 994, 994, 994, 994, 994, 994, 994, 995, 995, 995, 995, 995, 995, 995, 995, 995, 995, 995, 995, 995, 995, 995, 995, 995, 995, 995, 995, 995, 995, 995, 995, 995, 995, 994, 994, 994, 994, 995, 994, 995, 995, 995, 995, 995, 995, 995, 995, 995, 995, 995, 995, 995, 995, 995, 995, 995, 995, 995, 995, 995, 995, 995, 995, 995, 995, 994, 994, 994, 994, 994, 995, 986, 968, 985, 968, 997, 998, 934, 999, 256, 246, 246, 246, 246, 246, 246, 246, 246, 246, 246, 246, 246, 246, 246, 246, 246, 246, 246, 246, 246, 246, 246, 246, 257, 246, 258, 247, 247, 247, 247, 247, 247, 247, 247, 247, 247, 247, 247, 247, 247, 247, 247, 247, 247, 247, 247, 247, 247, 247, 247, 247, 247, 247, 247, 257, 247, 257, 260, 215, 934, 892, 215, 934, 934, 934, 934, 934, 934, 934, 934, 934, 934, 934, 934, 934, 934, 934, 934, 934, 934, 934, 934, 934, 934, 934, 934, 934, 934, 934, 934, 934, 934, 934, 934, 934, 934, 934, 934, 934, 934, 934, 934, 934, 934, 934, 934, 934, 934, 934, 934, 934, 934, 934, 934, 934, 934, 934, 934, 934, 934, 934, 934, 934, 934, 934, 215, 934, 215, 944, 934, 1003, 1002, 1002, 1002, 1003, 1002, 1002, 1002, 1002, 1004, 1005, 1004, 1004, 1004, 1002, 1002, 1002, 1002, 1002, 1002, 1002, 1002, 1002, 1002, 1002, 1002, 1003, 1002, 1002, 1002, 1002, 1002, 1004, 1002, 1002, 1002, 1002, 1002, 1002, 1002, 1002, 1002, 1002, 1002, 1002, 1002, 1002, 1002, 1002, 1002, 1002, 1002, 1002, 1002, 1002, 1002, 1002, 1002, 1002, 1002, 1002, 1002, 1002, 1002, 1002, 1006, 1006, 1006, 1006, 1006, 1006, 1006, 1006, 1006, 1006, 1006, 1006, 1006, 1006, 1006, 1006, 1006, 1006, 1006, 1006, 1006, 1006, 1006, 1006, 1006, 1006, 1002, 1007, 1002, 1002, 1006, 1002, 1006, 1006, 1006, 1006, 1006, 1006, 1006, 1006, 1006, 1006, 1006, 1006, 1006, 1006, 1006, 1006, 1006, 1006, 1006, 1006, 1006, 1006, 1006, 1006, 1006, 1006, 1002, 1008, 1008, 1008, 1008, 1008, 1008, 1008, 1008, 1008, 1008, 1008, 1008, 1008, 1008, 1008, 1008, 1008, 1008, 1008, 1008, 1008, 1008, 1008, 1008, 1008, 1008, 1008, 1008, 1008, 1008, 1008, 1008, 1008, 1008, 1008, 1008, 1008, 1008, 1008, 1008, 1008, 1008, 1008, 1008, 1008, 1008, 1008, 1008, 1008, 1008, 1008, 1008, 1008, 1008, 1008, 1008, 1008, 1008, 1008, 1008, 1008, 1008, 1008, 1008, 1008, 1008, 1009, 1009, 1009, 1009, 1009, 1009, 1009, 1009, 1009, 1009, 1009, 1009, 1009, 1009, 1009, 1009, 1009, 1009, 1009, 1009, 1009, 1009, 1009, 1009, 1009, 1009, 1008, 1008, 1008, 1008, 1009, 1008, 1009, 1009, 1009, 1009, 1009, 1009, 1009, 1009, 1009, 1009, 1009, 1009, 1009, 1009, 1009, 1009, 1009, 1009, 1009, 1009, 1009, 1009, 1009, 1009, 1009, 1009, 1008, 1008, 1008, 1008, 1008, 1009, 1010, 1010, 1010, 1010, 1010, 1010, 1010, 1010, 1010, 1010, 1010, 1010, 1010, 1010, 1010, 1010, 1010, 1010, 1010, 1010, 1010, 1010, 1010, 1010, 1010, 1010, 1010, 1010, 1010, 1010, 1010, 1010, 1010, 1010, 1010, 1010, 1010, 1010, 1010, 1010, 1010, 1010, 1010, 1010, 1010, 1010, 1010, 1010, 1011, 1011, 1011, 1011, 1011, 1011, 1011, 1011, 1011, 1011, 1010, 1010, 1010, 1010, 1010, 1010, 1010, 1011, 1011, 1011, 1011, 1011, 1011, 1011, 1011, 1011, 1011, 1011, 1011, 1011, 1011, 1011, 1011, 1011, 1011, 1011, 1011, 1011, 1011, 1011, 1011, 1011, 1011, 1010, 1010, 1010, 1010, 1011, 1010, 1011, 1011, 1011, 1011, 1011, 1011, 1011, 1011, 1011, 1011, 1011, 1011, 1011, 1011, 1011, 1011, 1011, 1011, 1011, 1011, 1011, 1011, 1011, 1011, 1011, 1011, 1010, 1010, 1010, 1010, 1010, 1011, 1014, 1013, 1013, 1013, 1014, 1013, 1013, 1013, 1013, 1013, 1013, 1013, 1013, 1013, 1013, 1013, 1013, 1013, 1013, 1013, 1013, 1013, 1013, 1013, 1013, 1013, 1014, 1013, 1013, 1013, 1013, 1013, 1013, 1013, 1013, 1013, 1013, 1013, 1013, 1013, 1013, 1013, 1013, 1013, 1013, 1013, 1013, 1013, 1015, 1015, 1015, 1015, 1015, 1015, 1015, 1015, 1013, 1013, 1013, 1013, 1013, 1013, 1013, 1013, 1013, 1013, 1013, 1016, 1013, 1013, 1013, 1013, 1013, 1013, 1013, 1013, 1013, 1017, 1013, 1013, 1013, 1013, 1013, 1013, 1013, 1013, 1013, 1013, 1013, 1013, 1013, 1013, 1013, 1013, 1013, 1013, 1013, 1013, 1013, 1018, 1013, 1013, 1013, 1013, 1013, 1013, 1013, 1013, 1013, 1013, 1013, 1013, 1013, 1013, 1013, 1013, 1013, 1019, 1013, 1013, 1020, 1013, 1021, 1022, 1024, 1024, 1024, 1024, 1024, 1024, 1024, 1024, 1023, 1025, 1025, 1025, 1025, 1025, 1025, 1025, 1025, 1023, 1023, 1026, 1026, 281, 281, 281, 1026, 281, 281, 281, 281, 281, 281, 281, 281, 281, 281, 281, 281, 281, 281, 281, 281, 281, 281, 281, 281, 281, 1026, 281, 281, 281, 281, 281, 281, 281, 281, 281, 281, 281, 281, 281, 281, 281, 281, 281, 281, 281, 281, 281, 281, 281, 281, 281, 281, 281, 281, 281, 281, 281, 281, 281, 281, 281, 281, 282, 281, 281, 281, 281, 281, 281, 281, 281, 281, 281, 281, 281, 281, 281, 281, 281, 281, 281, 281, 281, 281, 281, 281, 281, 281, 281, 281, 281, 1027, 281, 1028, 1029, 1030, 1030, 281, 281, 281, 1030, 281, 281, 281, 281, 281, 281, 281, 281, 281, 281, 281, 281, 281, 281, 281, 281, 281, 281, 281, 281, 281, 1030, 281, 281, 281, 281, 281, 281, 281, 281, 281, 281, 281, 281, 281, 281, 281, 281, 281, 281, 281, 281, 281, 281, 281, 281, 281, 281, 281, 281, 281, 281, 281, 281, 281, 281, 281, 281, 282, 281, 281, 281, 281, 281, 281, 281, 281, 281, 281, 281, 281, 281, 281, 281, 281, 281, 281, 281, 281, 281, 281, 281, 281, 281, 281, 281, 281, 1031, 281, 280, 1030, 1032, 1033, 1034, 1034, 268, 268, 268, 1034, 268, 268, 268, 268, 268, 268, 268, 268, 268, 268, 268, 268, 268, 268, 268, 268, 268, 268, 268, 268, 268, 1034, 268, 268, 268, 268, 268, 268, 268, 268, 268, 268, 268, 268, 268, 268, 268, 268, 268, 268, 268, 268, 268, 268, 268, 268, 268, 268, 268, 268, 268, 268, 268, 268, 268, 268, 268, 268, 269, 268, 268, 268, 268, 268, 268, 268, 268, 268, 268, 268, 268, 268, 268, 268, 268, 268, 268, 268, 268, 268, 268, 268, 268, 268, 268, 268, 268, 1035, 268, 1030, 262, 262, 262, 1030, 262, 262, 262, 262, 262, 262, 262, 262, 262, 262, 262, 262, 262, 262, 262, 262, 262, 262, 262, 262, 262, 1030, 262, 262, 262, 262, 262, 262, 262, 262, 262, 262, 262, 262, 262, 262, 262, 262, 262, 262, 1036, 262, 1026, 268, 268, 268, 1026, 268, 268, 268, 268, 268, 268, 268, 268, 268, 268, 268, 268, 268, 268, 268, 268, 268, 268, 268, 268, 268, 1026, 268, 268, 268, 268, 268, 268, 268, 268, 268, 268, 268, 268, 268, 268, 268, 268, 268, 268, 268, 268, 268, 268, 268, 268, 268, 268, 268, 268, 268, 268, 268, 268, 268, 268, 268, 268, 269, 268, 268, 268, 268, 268, 268, 268, 268, 268, 268, 268, 268, 268, 268, 268, 268, 268, 268, 268, 268, 268, 268, 268, 268, 268, 268, 268, 268, 270, 268, 1026, 1037, 1037, 1037, 1026, 1037, 1037, 1037, 1037, 1037, 1037, 1037, 1037, 1037, 1037, 1037, 1037, 1037, 1037, 1037, 1037, 1037, 1037, 1037, 1037, 1037, 1026, 1037, 1037, 1037, 1037, 1037, 1037, 1037, 1037, 1037, 1037, 1037, 1037, 1037, 1037, 1037, 1037, 1037, 1037, 1037, 1037, 1037, 1037, 1037, 1037, 1037, 1037, 1037, 1037, 1037, 1037, 1037, 1037, 1037, 1037, 1037, 1037, 1037, 1037, 1037, 1037, 1037, 1037, 1037, 1037, 1037, 1037, 1037, 1037, 1037, 1037, 1037, 1037, 1037, 1037, 1037, 1037, 1037, 1037, 1037, 1037, 1037, 1037, 1037, 1037, 1037, 1038, 1037, 1039, 1040, 1040, 1037, 1037, 1037, 1040, 1037, 1037, 1037, 1037, 1037, 1037, 1037, 1037, 1037, 1037, 1037, 1037, 1037, 1037, 1037, 1037, 1037, 1037, 1037, 1037, 1037, 1040, 1037, 1037, 1037, 1037, 1037, 1037, 1037, 1037, 1037, 1037, 1037, 1037, 1037, 1037, 1037, 1037, 1037, 1037, 1037, 1037, 1037, 1037, 1037, 1037, 1037, 1037, 1037, 1037, 1037, 1037, 1037, 1037, 1037, 1037, 1037, 1037, 1037, 1037, 1037, 1037, 1037, 1037, 1037, 1037, 1037, 1037, 1037, 1037, 1037, 1037, 1037, 1037, 1037, 1037, 1037, 1037, 1037, 1037, 1037, 1037, 1037, 1037, 1037, 1037, 1037, 1041, 1037, 1040, 262, 262, 262, 1040, 262, 262, 262, 262, 262, 262, 262, 262, 262, 262, 262, 262, 262, 262, 262, 262, 262, 262, 262, 262, 262, 1040, 262, 262, 262, 262, 262, 262, 262, 262, 262, 262, 262, 262, 262, 262, 262, 262, 262, 262, 1036, 262, 1042, 1040, 1040, 268, 268, 268, 1040, 268, 268, 268, 268, 268, 268, 268, 268, 268, 268, 268, 268, 268, 268, 268, 268, 268, 268, 268, 268, 268, 1040, 268, 268, 268, 268, 268, 268, 268, 268, 268, 268, 268, 268, 268, 268, 268, 268, 268, 268, 268, 268, 268, 268, 268, 268, 268, 268, 268, 268, 268, 268, 268, 268, 268, 268, 268, 268, 269, 268, 268, 268, 268, 268, 268, 268, 268, 268, 268, 268, 268, 268, 268, 268, 268, 268, 268, 268, 268, 268, 268, 268, 268, 268, 268, 268, 268, 270, 268, 1044, 1044, 1044, 1044, 1044, 1044, 1044, 1044, 1044, 1044, 1043, 1043, 1043, 1043, 1043, 1043, 1043, 1044, 1044, 1044, 1044, 1044, 1044, 1043, 1043, 1043, 1043, 1043, 1043, 1043, 1043, 1043, 1043, 1043, 1043, 1043, 1043, 1043, 1043, 1043, 1043, 1043, 1043, 1043, 1043, 1043, 1043, 1043, 1043, 1044, 1044, 1044, 1044, 1044, 1044, 1043, 1043, 1043, 1043, 1043, 1043, 1043, 1043, 1043, 1043, 1043, 1043, 1043, 1043, 1043, 1043, 1043, 1043, 1043, 1043, 1045, 1043, 1046, 1046, 1046, 1046, 1046, 1046, 1046, 1046, 1046, 1046, 1043, 1043, 1043, 1043, 1043, 1043, 1043, 1046, 1046, 1046, 1046, 1046, 1046, 1043, 1043, 1043, 1043, 1043, 1043, 1043, 1043, 1043, 1043, 1043, 1043, 1043, 1043, 1043, 1043, 1043, 1043, 1043, 1043, 1043, 1043, 1043, 1043, 1043, 1043, 1046, 1046, 1046, 1046, 1046, 1046, 1043, 1047, 1047, 1047, 1047, 1047, 1047, 1047, 1047, 1047, 1047, 1043, 1043, 1043, 1043, 1043, 1043, 1043, 1047, 1047, 1047, 1047, 1047, 1047, 1043, 1043, 1043, 1043, 1043, 1043, 1043, 1043, 1043, 1043, 1043, 1043, 1043, 1043, 1043, 1043, 1043, 1043, 1043, 1043, 1043, 1043, 1043, 1043, 1043, 1043, 1047, 1047, 1047, 1047, 1047, 1047, 1043, 1048, 1048, 1048, 1048, 1048, 1048, 1048, 1048, 1048, 1048, 1043, 1043, 1043, 1043, 1043, 1043, 1043, 1048, 1048, 1048, 1048, 1048, 1048, 1043, 1043, 1043, 1043, 1043, 1043, 1043, 1043, 1043, 1043, 1043, 1043, 1043, 1043, 1043, 1043, 1043, 1043, 1043, 1043, 1043, 1043, 1043, 1043, 1043, 1043, 1048, 1048, 1048, 1048, 1048, 1048, 1043, 1049, 1052, 1051, 1051, 1051, 1052, 1051, 1051, 1051, 1051, 1053, 1051, 1051, 1051, 1051, 1051, 1051, 1051, 1051, 1051, 1051, 1051, 1051, 1051, 1051, 1051, 1051, 1052, 1051, 1051, 1051, 1051, 1051, 1053, 1051, 1051, 1051, 1051, 1051, 1051, 1051, 1051, 1051, 1051, 1051, 1051, 1051, 1051, 1051, 1054, 1054, 1054, 1054, 1054, 1054, 1054, 1054, 1054, 1054, 1051, 1051, 1051, 1051, 1051, 1051, 1051, 1054, 1054, 1054, 1054, 1054, 1054, 1051, 1051, 1051, 1051, 1051, 1051, 1051, 1051, 1051, 1051, 1051, 1051, 1051, 1051, 1051, 1051, 1051, 1051, 1051, 1051, 1051, 1051, 1051, 1051, 1051, 1051, 1054, 1054, 1054, 1054, 1054, 1054, 1051, 1051, 1051, 1051, 1051, 1051, 1051, 1051, 1051, 1051, 1051, 1051, 1051, 1051, 1051, 1051, 1051, 1051, 1051, 1051, 1051, 1051, 1055, 1051, 1052, 1051, 1051, 1051, 1052, 1051, 1051, 1051, 1051, 1050, 1051, 1051, 1051, 1051, 1051, 1051, 1051, 1051, 1051, 1051, 1051, 1051, 1051, 1051, 1051, 1051, 1052, 1051, 1051, 1051, 1051, 1051, 1050, 1051, 1051, 1051, 1051, 1051, 1051, 1051, 1051, 1051, 1051, 1051, 1051, 1051, 1051, 1051, 1056, 1056, 1056, 1056, 1056, 1056, 1056, 1056, 1056, 1056, 1051, 1051, 1051, 1051, 1051, 1051, 1051, 1056, 1056, 1056, 1056, 1056, 1056, 1051, 1051, 1051, 1051, 1051, 1051, 1051, 1051, 1051, 1051, 1051, 1051, 1051, 1051, 1051, 1051, 1051, 1051, 1051, 1051, 1051, 1051, 1051, 1051, 1051, 1051, 1056, 1056, 1056, 1056, 1056, 1056, 1051, 1051, 1051, 1051, 1051, 1051, 1051, 1051, 1051, 1051, 1051, 1051, 1051, 1051, 1051, 1051, 1051, 1051, 1051, 1051, 1051, 1051, 1057, 1051, 1050, 1052, 1056, 1056, 1056, 1052, 1056, 1056, 1056, 1056, 1050, 1056, 1056, 1056, 1056, 1056, 1056, 1056, 1056, 1056, 1056, 1056, 1056, 1056, 1056, 1056, 1056, 1052, 1056, 1056, 1056, 1056, 1056, 1050, 1056, 1056, 1056, 1056, 1056, 1056, 1056, 1056, 1056, 1056, 1056, 1056, 1056, 1056, 1056, 1056, 1056, 1056, 1056, 1056, 1056, 1056, 1056, 1056, 1056, 1056, 1056, 1056, 1056, 1056, 1056, 1056, 1056, 1056, 1056, 1056, 1056, 1056, 1056, 1056, 1056, 1056, 1056, 1056, 1056, 1056, 1056, 1056, 1056, 1056, 1056, 1056, 1056, 1056, 1056, 1056, 1056, 1056, 1056, 1056, 1056, 1056, 1056, 1056, 1056, 1056, 1056, 1056, 1056, 1056, 1056, 1056, 1056, 1056, 1056, 1056, 1056, 1056, 1056, 1056, 1056, 1056, 1056, 1056, 1056, 1056, 1056, 1056, 1056, 1056, 1056, 1056, 1050, 1056, 1058, 1052, 1059, 1059, 1059, 1052, 1059, 1059, 1059, 1059, 1053, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1052, 1059, 1059, 1059, 1059, 1059, 1053, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1060, 1060, 1060, 1060, 1060, 1060, 1060, 1060, 1060, 1060, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1060, 1060, 1060, 1060, 1060, 1060, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1060, 1060, 1060, 1060, 1060, 1060, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1050, 1059, 1052, 1059, 1059, 1059, 1052, 1059, 1059, 1059, 1059, 1050, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1052, 1059, 1059, 1059, 1059, 1059, 1050, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1056, 1056, 1056, 1056, 1056, 1056, 1056, 1056, 1056, 1056, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1056, 1056, 1056, 1056, 1056, 1056, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1056, 1056, 1056, 1056, 1056, 1056, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1052, 1059, 1052, 1059, 1059, 1059, 1052, 1059, 1059, 1059, 1059, 1061, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1052, 1059, 1059, 1059, 1059, 1059, 1061, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1062, 1062, 1062, 1062, 1062, 1062, 1062, 1062, 1062, 1062, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1062, 1062, 1062, 1062, 1062, 1062, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1062, 1062, 1062, 1062, 1062, 1062, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1063, 1059, 1052, 1059, 1059, 1059, 1052, 1059, 1059, 1059, 1059, 1061, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1052, 1059, 1059, 1059, 1059, 1059, 1061, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1060, 1060, 1060, 1060, 1060, 1060, 1060, 1060, 1060, 1060, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1060, 1060, 1060, 1060, 1060, 1060, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1060, 1060, 1060, 1060, 1060, 1060, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1063, 1059, 1064, 1052, 1059, 1059, 1059, 1052, 1059, 1059, 1059, 1059, 1061, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1052, 1059, 1059, 1059, 1059, 1059, 1061, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1065, 1065, 1065, 1065, 1065, 1065, 1065, 1065, 1065, 1065, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1065, 1065, 1065, 1065, 1065, 1065, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1065, 1065, 1065, 1065, 1065, 1065, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1063, 1059, 1052, 1059, 1059, 1059, 1052, 1059, 1059, 1059, 1059, 1061, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1052, 1059, 1059, 1059, 1059, 1059, 1061, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1066, 1066, 1066, 1066, 1066, 1066, 1066, 1066, 1066, 1066, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1066, 1066, 1066, 1066, 1066, 1066, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1066, 1066, 1066, 1066, 1066, 1066, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1063, 1059, 1052, 1059, 1059, 1059, 1052, 1059, 1059, 1059, 1059, 1061, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1052, 1059, 1059, 1059, 1059, 1059, 1061, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1067, 1067, 1067, 1067, 1067, 1067, 1067, 1067, 1067, 1067, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1067, 1067, 1067, 1067, 1067, 1067, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1067, 1067, 1067, 1067, 1067, 1067, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1063, 1059, 1052, 1059, 1059, 1059, 1052, 1059, 1059, 1059, 1059, 1061, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1052, 1059, 1059, 1059, 1059, 1059, 1061, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1068, 1068, 1068, 1068, 1068, 1068, 1068, 1068, 1068, 1068, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1068, 1068, 1068, 1068, 1068, 1068, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1068, 1068, 1068, 1068, 1068, 1068, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1063, 1059, 1052, 1059, 1059, 1059, 1052, 1059, 1059, 1059, 1059, 1061, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1052, 1059, 1059, 1059, 1059, 1059, 1061, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1069, 1069, 1069, 1069, 1069, 1069, 1069, 1069, 1069, 1069, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1069, 1069, 1069, 1069, 1069, 1069, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1069, 1069, 1069, 1069, 1069, 1069, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1063, 1059, 1052, 1059, 1059, 1059, 1052, 1059, 1059, 1059, 1059, 1050, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1052, 1059, 1059, 1059, 1059, 1059, 1050, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1069, 1069, 1069, 1069, 1069, 1069, 1069, 1069, 1069, 1069, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1069, 1069, 1069, 1069, 1069, 1069, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1069, 1069, 1069, 1069, 1069, 1069, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1050, 1059, 1052, 1059, 1059, 1059, 1052, 1059, 1059, 1059, 1059, 1070, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1052, 1059, 1059, 1059, 1059, 1059, 1070, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1071, 1071, 1071, 1071, 1071, 1071, 1071, 1071, 1071, 1071, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1071, 1071, 1071, 1071, 1071, 1071, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1071, 1071, 1071, 1071, 1071, 1071, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1063, 1059, 1052, 1059, 1059, 1059, 1052, 1059, 1059, 1059, 1059, 1070, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1052, 1059, 1059, 1059, 1059, 1059, 1070, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1072, 1072, 1072, 1072, 1072, 1072, 1072, 1072, 1072, 1072, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1072, 1072, 1072, 1072, 1072, 1072, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1072, 1072, 1072, 1072, 1072, 1072, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1063, 1059, 1052, 1059, 1059, 1059, 1052, 1059, 1059, 1059, 1059, 1070, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1052, 1059, 1059, 1059, 1059, 1059, 1070, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1073, 1073, 1073, 1073, 1073, 1073, 1073, 1073, 1073, 1073, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1073, 1073, 1073, 1073, 1073, 1073, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1073, 1073, 1073, 1073, 1073, 1073, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1050, 1059, 1052, 1059, 1059, 1059, 1052, 1059, 1059, 1059, 1059, 1070, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1052, 1059, 1059, 1059, 1059, 1059, 1070, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1074, 1074, 1074, 1074, 1074, 1074, 1074, 1074, 1074, 1074, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1074, 1074, 1074, 1074, 1074, 1074, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1074, 1074, 1074, 1074, 1074, 1074, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1050, 1059, 1052, 1059, 1059, 1059, 1052, 1059, 1059, 1059, 1059, 1070, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1052, 1059, 1059, 1059, 1059, 1059, 1070, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1075, 1075, 1075, 1075, 1075, 1075, 1075, 1075, 1075, 1075, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1075, 1075, 1075, 1075, 1075, 1075, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1075, 1075, 1075, 1075, 1075, 1075, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1050, 1059, 1052, 1059, 1059, 1059, 1052, 1059, 1059, 1059, 1059, 1070, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1052, 1059, 1059, 1059, 1059, 1059, 1070, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1076, 1076, 1076, 1076, 1076, 1076, 1076, 1076, 1076, 1076, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1076, 1076, 1076, 1076, 1076, 1076, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1076, 1076, 1076, 1076, 1076, 1076, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1050, 1059, 1052, 1059, 1059, 1059, 1052, 1059, 1059, 1059, 1059, 1070, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1052, 1059, 1059, 1059, 1059, 1059, 1070, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1077, 1077, 1077, 1077, 1077, 1077, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1077, 1077, 1077, 1077, 1077, 1077, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1050, 1059, 1052, 1059, 1059, 1059, 1052, 1059, 1059, 1059, 1059, 1070, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1052, 1059, 1059, 1059, 1059, 1059, 1070, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1069, 1069, 1069, 1069, 1069, 1069, 1069, 1069, 1069, 1069, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1069, 1069, 1069, 1069, 1069, 1069, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1069, 1069, 1069, 1069, 1069, 1069, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1050, 1059, 1052, 1059, 1059, 1059, 1052, 1059, 1059, 1059, 1059, 1070, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1052, 1059, 1059, 1059, 1059, 1059, 1070, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1078, 1078, 1078, 1078, 1078, 1078, 1078, 1078, 1078, 1078, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1078, 1078, 1078, 1078, 1078, 1078, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1078, 1078, 1078, 1078, 1078, 1078, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1063, 1059, 1052, 1059, 1059, 1059, 1052, 1059, 1059, 1059, 1059, 1070, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1052, 1059, 1059, 1059, 1059, 1059, 1070, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1079, 1079, 1079, 1079, 1079, 1079, 1079, 1079, 1079, 1079, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1079, 1079, 1079, 1079, 1079, 1079, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1079, 1079, 1079, 1079, 1079, 1079, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1063, 1059, 1052, 1059, 1059, 1059, 1052, 1059, 1059, 1059, 1059, 1070, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1052, 1059, 1059, 1059, 1059, 1059, 1070, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1080, 1080, 1080, 1080, 1080, 1080, 1080, 1080, 1080, 1080, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1080, 1080, 1080, 1080, 1080, 1080, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1080, 1080, 1080, 1080, 1080, 1080, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1063, 1059, 1052, 1059, 1059, 1059, 1052, 1059, 1059, 1059, 1059, 1070, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1052, 1059, 1059, 1059, 1059, 1059, 1070, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1081, 1081, 1081, 1081, 1081, 1081, 1081, 1081, 1081, 1081, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1081, 1081, 1081, 1081, 1081, 1081, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1081, 1081, 1081, 1081, 1081, 1081, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1063, 1059, 1052, 1059, 1059, 1059, 1052, 1059, 1059, 1059, 1059, 1070, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1052, 1059, 1059, 1059, 1059, 1059, 1070, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1069, 1069, 1069, 1069, 1069, 1069, 1069, 1069, 1069, 1069, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1069, 1069, 1069, 1069, 1069, 1069, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1069, 1069, 1069, 1069, 1069, 1069, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1063, 1059, 1082, 1083, 1085, 1085, 1085, 1085, 1085, 1085, 1085, 1085, 1085, 1085, 1084, 1084, 1084, 1084, 1084, 1084, 1084, 1085, 1085, 1085, 1085, 1085, 1085, 1084, 1084, 1084, 1084, 1084, 1084, 1084, 1084, 1084, 1084, 1084, 1084, 1084, 1084, 1084, 1084, 1084, 1084, 1084, 1084, 1084, 1084, 1084, 1084, 1084, 1084, 1085, 1085, 1085, 1085, 1085, 1085, 1084, 1084, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 287, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 288, 204, 204, 289, 204, 287, 204, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 204, 204, 204, 204, 286, 204, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 204, 204, 204, 204, 204, 286, 934, 934, 934, 934, 934, 934, 934, 934, 934, 934, 934, 934, 934, 934, 934, 934, 934, 934, 934, 934, 934, 934, 934, 934, 934, 934, 934, 934, 934, 934, 934, 934, 934, 287, 934, 934, 934, 934, 934, 934, 934, 934, 934, 934, 934, 934, 934, 934, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 288, 934, 934, 289, 934, 287, 934, 286, 286, 286, 286, 1086, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 934, 934, 934, 934, 286, 934, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 934, 934, 934, 934, 934, 286, 934, 934, 934, 934, 934, 934, 934, 934, 934, 934, 934, 934, 934, 934, 934, 934, 934, 934, 934, 934, 934, 934, 934, 934, 934, 934, 934, 934, 934, 934, 934, 934, 934, 287, 934, 934, 934, 934, 934, 934, 934, 934, 934, 934, 934, 934, 934, 934, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 288, 934, 934, 289, 934, 287, 934, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 1087, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 934, 934, 934, 934, 286, 934, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 934, 934, 934, 934, 934, 286, 1088, 1089, 934, 929, 912, 912, 912, 912, 912, 912, 912, 912, 912, 913, 912, 913, 913, 913, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 913, 287, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 288, 912, 912, 289, 912, 287, 912, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 912, 914, 912, 912, 1090, 912, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 912, 912, 912, 912, 912, 868, 912, 912, 912, 912, 912, 912, 912, 912, 912, 913, 912, 913, 913, 913, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 913, 287, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 288, 912, 912, 289, 912, 287, 912, 868, 868, 868, 868, 1091, 1092, 868, 868, 868, 868, 868, 1093, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 912, 914, 912, 912, 868, 912, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 912, 912, 912, 912, 912, 868, 912, 912, 912, 912, 912, 912, 912, 912, 912, 913, 912, 913, 913, 913, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 913, 287, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 288, 912, 912, 289, 912, 287, 912, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 1094, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 912, 914, 912, 912, 868, 912, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 912, 912, 912, 912, 912, 868, 912, 912, 912, 912, 912, 912, 912, 912, 912, 913, 912, 913, 913, 913, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 913, 287, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 288, 912, 912, 289, 912, 287, 912, 868, 868, 1095, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 912, 914, 912, 912, 868, 912, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 912, 912, 912, 912, 912, 868, 912, 912, 912, 912, 912, 912, 912, 912, 912, 913, 912, 913, 913, 913, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 913, 287, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 288, 912, 912, 289, 912, 287, 912, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 1096, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 912, 914, 912, 912, 868, 912, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 912, 912, 912, 912, 912, 868, 912, 912, 912, 912, 912, 912, 912, 912, 912, 913, 912, 913, 913, 913, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 913, 287, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 288, 912, 912, 289, 912, 287, 912, 868, 868, 868, 1097, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 912, 914, 912, 912, 868, 912, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 912, 912, 912, 912, 912, 868, 912, 912, 912, 912, 912, 912, 912, 912, 912, 913, 912, 913, 913, 913, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 913, 287, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 288, 912, 912, 289, 912, 287, 912, 868, 868, 868, 868, 868, 868, 868, 868, 1098, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 912, 914, 912, 912, 868, 912, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 912, 912, 912, 912, 912, 868, 912, 912, 912, 912, 912, 912, 912, 912, 912, 913, 912, 913, 913, 913, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 913, 287, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 288, 912, 912, 289, 912, 287, 912, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 1099, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 912, 914, 912, 912, 868, 912, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 912, 912, 912, 912, 912, 868, 912, 912, 912, 912, 912, 912, 912, 912, 912, 913, 912, 913, 913, 913, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 913, 287, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 288, 912, 912, 289, 912, 287, 912, 868, 868, 868, 868, 868, 868, 1100, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 912, 914, 912, 912, 868, 912, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 912, 912, 912, 912, 912, 868, 912, 912, 912, 912, 912, 912, 912, 912, 912, 913, 912, 913, 913, 913, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 913, 287, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 288, 912, 912, 289, 912, 287, 912, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 912, 914, 912, 912, 1101, 912, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 912, 912, 912, 912, 912, 868, 912, 912, 912, 912, 912, 912, 912, 912, 912, 913, 912, 913, 913, 913, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 913, 287, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 288, 912, 912, 289, 912, 287, 912, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 912, 914, 912, 912, 1102, 912, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 912, 912, 912, 912, 912, 868, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 287, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 288, 204, 204, 289, 204, 287, 204, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 204, 204, 204, 204, 868, 204, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 204, 204, 204, 204, 204, 868, 912, 912, 912, 912, 912, 912, 912, 912, 912, 913, 912, 913, 913, 913, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 913, 287, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 288, 912, 912, 289, 912, 287, 912, 868, 868, 868, 868, 868, 868, 868, 868, 1103, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 912, 914, 912, 912, 868, 912, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 912, 912, 912, 912, 912, 868, 912, 912, 912, 912, 912, 912, 912, 912, 912, 913, 912, 913, 913, 913, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 913, 287, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 288, 912, 912, 289, 912, 287, 912, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 1104, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 912, 914, 912, 912, 868, 912, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 912, 912, 912, 912, 912, 868, 912, 912, 912, 912, 912, 912, 912, 912, 912, 913, 912, 913, 913, 913, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 913, 287, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 288, 912, 912, 289, 912, 287, 912, 868, 868, 868, 868, 1100, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 912, 914, 912, 912, 868, 912, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 912, 912, 912, 912, 912, 868, 912, 912, 912, 912, 912, 912, 912, 912, 912, 913, 912, 913, 913, 913, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 913, 287, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 288, 912, 912, 289, 912, 287, 912, 868, 868, 868, 868, 868, 868, 868, 868, 1105, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 912, 914, 912, 912, 868, 912, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 912, 912, 912, 912, 912, 868, 912, 912, 912, 912, 912, 912, 912, 912, 912, 913, 912, 913, 913, 913, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 913, 287, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 288, 912, 912, 289, 912, 287, 912, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 1104, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 912, 914, 912, 912, 868, 912, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 912, 912, 912, 912, 912, 868, 912, 912, 912, 912, 912, 912, 912, 912, 912, 913, 912, 913, 913, 913, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 913, 287, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 288, 912, 912, 289, 912, 287, 912, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 912, 914, 912, 912, 868, 912, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 1106, 868, 1107, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 912, 912, 912, 912, 912, 868, 912, 912, 912, 912, 912, 912, 912, 912, 912, 913, 912, 913, 913, 913, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 913, 287, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 288, 912, 912, 289, 912, 287, 912, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 912, 914, 912, 912, 868, 912, 868, 868, 868, 868, 868, 868, 868, 868, 1108, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 912, 912, 912, 912, 912, 868, 912, 912, 912, 912, 912, 912, 912, 912, 912, 913, 912, 913, 913, 913, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 913, 287, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 288, 912, 912, 289, 912, 287, 912, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 912, 914, 912, 912, 868, 912, 1109, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 912, 912, 912, 912, 912, 868, 912, 912, 912, 912, 912, 912, 912, 912, 912, 913, 912, 913, 913, 913, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 913, 287, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 288, 912, 912, 289, 912, 287, 912, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 912, 914, 912, 912, 868, 912, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 1102, 868, 868, 868, 868, 868, 868, 868, 912, 912, 912, 912, 912, 868, 912, 912, 912, 912, 912, 912, 912, 912, 912, 913, 912, 913, 913, 913, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 913, 287, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 288, 912, 912, 289, 912, 287, 912, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 912, 914, 912, 912, 868, 912, 868, 868, 868, 1102, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 912, 912, 912, 912, 912, 868, 912, 912, 912, 912, 912, 912, 912, 912, 912, 913, 912, 913, 913, 913, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 913, 287, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 288, 912, 912, 289, 912, 287, 912, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 912, 914, 912, 912, 868, 912, 868, 868, 868, 868, 1110, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 1111, 868, 868, 868, 868, 868, 868, 868, 868, 912, 912, 912, 912, 912, 868, 912, 912, 912, 912, 912, 912, 912, 912, 912, 913, 912, 913, 913, 913, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 913, 287, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 288, 912, 912, 289, 912, 287, 912, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 912, 914, 912, 912, 868, 912, 868, 868, 868, 868, 868, 868, 1112, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 912, 912, 912, 912, 912, 868, 912, 912, 912, 912, 912, 912, 912, 912, 912, 913, 912, 913, 913, 913, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 913, 287, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 288, 912, 912, 289, 912, 287, 912, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 912, 914, 912, 912, 868, 912, 868, 868, 868, 868, 868, 868, 868, 868, 1113, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 912, 912, 912, 912, 912, 868, 912, 912, 912, 912, 912, 912, 912, 912, 912, 913, 912, 913, 913, 913, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 913, 287, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 288, 912, 912, 289, 912, 287, 912, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 912, 914, 912, 912, 868, 912, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 1102, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 912, 912, 912, 912, 912, 868, 912, 912, 912, 912, 912, 912, 912, 912, 912, 913, 912, 913, 913, 913, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 913, 287, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 288, 912, 912, 289, 912, 287, 912, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 912, 914, 912, 912, 868, 912, 868, 868, 868, 868, 1114, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 912, 912, 912, 912, 912, 868, 912, 912, 912, 912, 912, 912, 912, 912, 912, 913, 912, 913, 913, 913, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 913, 287, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 288, 912, 912, 289, 912, 287, 912, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 912, 914, 912, 912, 868, 912, 1115, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 912, 912, 912, 912, 912, 868, 912, 912, 912, 912, 912, 912, 912, 912, 912, 913, 912, 913, 913, 913, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 913, 287, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 288, 912, 912, 289, 912, 287, 912, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 912, 914, 912, 912, 868, 912, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 1102, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 912, 912, 912, 912, 912, 868, 912, 912, 912, 912, 912, 912, 912, 912, 912, 913, 912, 913, 913, 913, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 913, 287, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 288, 912, 912, 289, 912, 287, 912, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 912, 914, 912, 912, 868, 912, 1116, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 1117, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 912, 912, 912, 912, 912, 868, 912, 912, 912, 912, 912, 912, 912, 912, 912, 913, 912, 913, 913, 913, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 913, 287, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 288, 912, 912, 289, 912, 287, 912, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 912, 914, 912, 912, 868, 912, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 1118, 868, 868, 868, 868, 868, 868, 868, 912, 912, 912, 912, 912, 868, 912, 912, 912, 912, 912, 912, 912, 912, 912, 913, 912, 913, 913, 913, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 913, 287, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 288, 912, 912, 289, 912, 287, 912, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 912, 914, 912, 912, 868, 912, 868, 868, 868, 868, 1102, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 912, 912, 912, 912, 912, 868, 912, 912, 912, 912, 912, 912, 912, 912, 912, 913, 912, 913, 913, 913, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 913, 287, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 288, 912, 912, 289, 912, 287, 912, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 912, 914, 912, 912, 868, 912, 1119, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 912, 912, 912, 912, 912, 868, 912, 912, 912, 912, 912, 912, 912, 912, 912, 913, 912, 913, 913, 913, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 913, 287, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 288, 912, 912, 289, 912, 287, 912, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 912, 914, 912, 912, 868, 912, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 1109, 868, 868, 868, 868, 868, 868, 868, 912, 912, 912, 912, 912, 868, 912, 912, 912, 912, 912, 912, 912, 912, 912, 913, 912, 913, 913, 913, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 913, 287, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 288, 912, 912, 289, 912, 287, 912, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 912, 914, 912, 912, 868, 912, 868, 868, 868, 868, 1120, 868, 868, 868, 868, 868, 868, 868, 868, 868, 1102, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 912, 912, 912, 912, 912, 868, 912, 912, 912, 912, 912, 912, 912, 912, 912, 913, 912, 913, 913, 913, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 913, 287, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 288, 912, 912, 289, 912, 287, 912, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 912, 914, 912, 912, 868, 912, 868, 868, 868, 868, 868, 1102, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 912, 912, 912, 912, 912, 868, 912, 912, 912, 912, 912, 912, 912, 912, 912, 913, 912, 913, 913, 913, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 913, 287, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 288, 912, 912, 289, 912, 287, 912, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 912, 914, 912, 912, 868, 912, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 1121, 868, 1122, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 912, 912, 912, 912, 912, 868, 912, 912, 912, 912, 912, 912, 912, 912, 912, 913, 912, 913, 913, 913, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 913, 287, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 288, 912, 912, 289, 912, 287, 912, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 912, 914, 912, 912, 868, 912, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 1123, 868, 868, 868, 868, 868, 868, 868, 912, 912, 912, 912, 912, 868, 912, 912, 912, 912, 912, 912, 912, 912, 912, 913, 912, 913, 913, 913, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 913, 287, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 288, 912, 912, 289, 912, 287, 912, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 912, 914, 912, 912, 868, 912, 868, 868, 868, 868, 1102, 868, 868, 868, 1120, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 912, 912, 912, 912, 912, 868, 912, 912, 912, 912, 912, 912, 912, 912, 912, 913, 912, 913, 913, 913, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 913, 287, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 288, 912, 912, 289, 912, 287, 912, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 912, 914, 912, 912, 868, 912, 868, 868, 868, 1102, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 1124, 868, 868, 868, 868, 868, 868, 868, 912, 912, 912, 912, 912, 868, 912, 912, 912, 912, 912, 912, 912, 912, 912, 913, 912, 913, 913, 913, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 913, 287, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 288, 912, 912, 289, 912, 287, 912, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 912, 914, 912, 912, 868, 912, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 1125, 868, 868, 868, 868, 868, 912, 912, 912, 912, 912, 868, 912, 912, 912, 912, 912, 912, 912, 912, 912, 913, 912, 913, 913, 913, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 913, 287, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 288, 912, 912, 289, 912, 287, 912, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 912, 914, 912, 912, 868, 912, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 1118, 868, 868, 868, 868, 868, 868, 868, 868, 912, 912, 912, 912, 912, 868, 912, 912, 912, 912, 912, 912, 912, 912, 912, 913, 912, 913, 913, 913, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 913, 287, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 288, 912, 912, 289, 912, 287, 912, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 912, 914, 912, 912, 868, 912, 1126, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 903, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 912, 912, 912, 912, 912, 868, 912, 912, 912, 912, 912, 912, 912, 912, 912, 913, 912, 913, 913, 913, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 913, 287, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 288, 912, 912, 289, 912, 287, 912, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 912, 914, 912, 912, 868, 912, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 1116, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 912, 912, 912, 912, 912, 868, 912, 912, 912, 912, 912, 912, 912, 912, 912, 913, 912, 913, 913, 913, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 913, 287, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 288, 912, 912, 289, 912, 287, 912, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 912, 914, 912, 912, 868, 912, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 1102, 868, 868, 868, 868, 868, 868, 868, 868, 912, 912, 912, 912, 912, 868, 912, 912, 912, 912, 912, 912, 912, 912, 912, 913, 912, 913, 913, 913, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 913, 287, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 288, 912, 912, 289, 912, 287, 912, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 912, 914, 912, 912, 868, 912, 868, 868, 868, 868, 868, 1127, 868, 868, 868, 868, 868, 868, 868, 1102, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 912, 912, 912, 912, 912, 868, 912, 912, 912, 912, 912, 912, 912, 912, 912, 913, 912, 913, 913, 913, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 913, 287, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 288, 912, 912, 289, 912, 287, 912, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 912, 914, 912, 912, 868, 912, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 1128, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 912, 912, 912, 912, 912, 868, 912, 912, 912, 912, 912, 912, 912, 912, 912, 913, 912, 913, 913, 913, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 913, 287, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 288, 912, 912, 289, 912, 287, 912, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 912, 914, 912, 912, 868, 912, 868, 868, 868, 1129, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 912, 912, 912, 912, 912, 868, 912, 912, 912, 912, 912, 912, 912, 912, 912, 913, 912, 913, 913, 913, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 913, 287, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 288, 912, 912, 289, 912, 287, 912, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 912, 914, 912, 912, 868, 912, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 1130, 868, 868, 868, 868, 868, 912, 912, 912, 912, 912, 868, 912, 912, 912, 912, 912, 912, 912, 912, 912, 913, 912, 913, 913, 913, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 913, 287, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 288, 912, 912, 289, 912, 287, 912, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 912, 914, 912, 912, 868, 912, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 1118, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 912, 912, 912, 912, 912, 868, 912, 912, 912, 912, 912, 912, 912, 912, 912, 913, 912, 913, 913, 913, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 913, 287, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 288, 912, 912, 289, 912, 287, 912, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 912, 914, 912, 912, 868, 912, 868, 868, 868, 868, 1131, 868, 868, 868, 1132, 868, 868, 868, 868, 868, 1133, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 912, 912, 912, 912, 912, 868, 912, 912, 912, 912, 912, 912, 912, 912, 912, 913, 912, 913, 913, 913, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 913, 287, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 288, 912, 912, 289, 912, 287, 912, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 912, 914, 912, 912, 868, 912, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 1133, 868, 868, 912, 912, 912, 912, 912, 868, 912, 912, 912, 912, 912, 912, 912, 912, 912, 913, 912, 913, 913, 913, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 913, 287, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 288, 912, 912, 289, 912, 287, 912, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 912, 914, 912, 912, 868, 912, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 1102, 868, 868, 868, 868, 868, 868, 912, 912, 912, 912, 912, 868, 912, 912, 912, 912, 912, 912, 912, 912, 912, 913, 912, 913, 913, 913, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 913, 287, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 288, 912, 912, 289, 912, 287, 912, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 912, 914, 912, 912, 868, 912, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 1102, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 912, 912, 912, 912, 912, 868, 912, 912, 912, 912, 912, 912, 912, 912, 912, 913, 912, 913, 913, 913, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 913, 287, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 288, 912, 912, 289, 912, 287, 912, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 912, 914, 912, 912, 868, 912, 868, 868, 868, 868, 1134, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 912, 912, 912, 912, 912, 868, 912, 912, 912, 912, 912, 912, 912, 912, 912, 913, 912, 913, 913, 913, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 913, 287, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 288, 912, 912, 289, 912, 287, 912, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 912, 914, 912, 912, 868, 912, 868, 868, 868, 1135, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 1136, 1137, 868, 868, 868, 868, 868, 868, 912, 912, 912, 912, 912, 868, 912, 912, 912, 912, 912, 912, 912, 912, 912, 913, 912, 913, 913, 913, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 913, 287, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 288, 912, 912, 289, 912, 287, 912, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 912, 914, 912, 912, 868, 912, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 1102, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 912, 912, 912, 912, 912, 868, 912, 912, 912, 912, 912, 912, 912, 912, 912, 913, 912, 913, 913, 913, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 913, 287, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 288, 912, 912, 289, 912, 287, 912, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 912, 914, 912, 912, 868, 912, 868, 868, 1138, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 912, 912, 912, 912, 912, 868, 912, 912, 912, 912, 912, 912, 912, 912, 912, 913, 912, 913, 913, 913, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 913, 287, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 288, 912, 912, 289, 912, 287, 912, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 912, 914, 912, 912, 868, 912, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 1139, 868, 868, 868, 868, 868, 912, 912, 912, 912, 912, 868, 912, 912, 912, 912, 912, 912, 912, 912, 912, 913, 912, 913, 913, 913, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 913, 287, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 288, 912, 912, 289, 912, 287, 912, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 912, 914, 912, 912, 868, 912, 868, 868, 868, 868, 1140, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 912, 912, 912, 912, 912, 868, 1141, 1141, 1141, 1141, 1141, 1141, 1141, 1141, 1141, 1141, 1141, 1141, 1141, 1141, 1141, 1141, 1141, 1141, 1141, 1141, 1141, 1141, 1141, 1141, 1141, 1141, 1141, 1141, 1141, 1141, 1141, 1141, 1141, 1143, 1141, 1141, 1141, 1141, 1141, 1141, 1141, 1141, 1141, 1141, 1141, 1141, 1141, 1141, 1142, 1142, 1142, 1142, 1142, 1142, 1142, 1142, 1142, 1142, 1144, 1141, 1141, 1145, 1141, 1143, 1141, 1142, 1142, 1142, 1142, 1142, 1142, 1142, 1142, 1142, 1142, 1142, 1142, 1142, 1142, 1142, 1142, 1142, 1142, 1142, 1142, 1142, 1142, 1142, 1142, 1142, 1142, 1141, 1141, 1141, 1141, 1142, 1141, 1142, 1142, 1142, 1142, 1142, 1142, 1142, 1142, 1142, 1142, 1142, 1142, 1142, 1142, 1142, 1142, 1142, 1142, 1142, 1142, 1142, 1142, 1142, 1142, 1142, 1142, 1141, 1141, 1141, 1141, 1141, 1142, 920, 1146, 919, 919, 919, 919, 919, 919, 919, 919, 919, 919, 919, 919, 919, 919, 919, 919, 919, 919, 919, 919, 919, 919, 919, 919, 919, 919, 919, 919, 919, 919, 919, 919, 919, 919, 919, 919, 919, 919, 919, 919, 919, 919, 919, 919, 919, 919, 919, 919, 919, 919, 919, 919, 919, 919, 919, 919, 919, 919, 919, 919, 919, 919, 919, 922, 919, 912, 912, 912, 912, 912, 912, 912, 912, 912, 913, 912, 913, 913, 913, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 913, 287, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 288, 912, 912, 289, 912, 287, 912, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 912, 914, 912, 912, 868, 912, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 1147, 868, 868, 1148, 868, 868, 868, 868, 868, 912, 912, 912, 912, 912, 868, 912, 912, 912, 912, 912, 912, 912, 912, 912, 913, 912, 913, 913, 913, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 913, 287, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 288, 912, 912, 289, 912, 287, 912, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 912, 914, 912, 912, 868, 912, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 1102, 868, 912, 912, 912, 912, 912, 868, 912, 912, 912, 912, 912, 912, 912, 912, 912, 913, 912, 913, 913, 913, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 913, 287, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 288, 912, 912, 289, 912, 287, 912, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 912, 914, 912, 912, 868, 912, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 1113, 868, 868, 868, 868, 868, 868, 868, 868, 912, 912, 912, 912, 912, 868, 912, 912, 912, 912, 912, 912, 912, 912, 912, 913, 912, 913, 913, 913, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 913, 287, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 288, 912, 912, 289, 912, 287, 912, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 912, 914, 912, 912, 868, 912, 868, 868, 868, 868, 1149, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 1150, 868, 868, 868, 868, 868, 912, 912, 912, 912, 912, 868, 912, 912, 912, 912, 912, 912, 912, 912, 912, 913, 912, 913, 913, 913, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 913, 287, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 288, 912, 912, 289, 912, 287, 912, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 912, 914, 912, 912, 868, 912, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 1120, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 912, 912, 912, 912, 912, 868, 912, 912, 912, 912, 912, 912, 912, 912, 912, 913, 912, 913, 913, 913, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 913, 287, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 288, 912, 912, 289, 912, 287, 912, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 912, 914, 912, 912, 868, 912, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 1151, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 912, 912, 912, 912, 912, 868, 912, 912, 912, 912, 912, 912, 912, 912, 912, 913, 912, 913, 913, 913, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 913, 287, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 288, 912, 912, 289, 912, 287, 912, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 912, 914, 912, 912, 868, 912, 868, 868, 868, 868, 903, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 912, 912, 912, 912, 912, 868, 912, 912, 912, 912, 912, 912, 912, 912, 912, 913, 912, 913, 913, 913, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 913, 287, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 288, 912, 912, 289, 912, 287, 912, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 912, 914, 912, 912, 868, 912, 868, 868, 868, 868, 868, 868, 868, 1152, 868, 868, 868, 868, 868, 868, 868, 868, 868, 1153, 868, 868, 868, 868, 868, 868, 868, 868, 912, 912, 912, 912, 912, 868, 912, 912, 912, 912, 912, 912, 912, 912, 912, 913, 912, 913, 913, 913, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 913, 287, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 288, 912, 912, 289, 912, 287, 912, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 912, 914, 912, 912, 868, 912, 868, 868, 868, 868, 1113, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 912, 912, 912, 912, 912, 868, 912, 912, 912, 912, 912, 912, 912, 912, 912, 913, 912, 913, 913, 913, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 913, 287, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 288, 912, 912, 289, 912, 287, 912, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 912, 914, 912, 912, 868, 912, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 1118, 868, 868, 868, 868, 868, 912, 912, 912, 912, 912, 868, 912, 912, 912, 912, 912, 912, 912, 912, 912, 913, 912, 913, 913, 913, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 913, 287, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 288, 912, 912, 289, 912, 287, 912, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 912, 914, 912, 912, 868, 912, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 1154, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 912, 912, 912, 912, 912, 868, 912, 912, 912, 912, 912, 912, 912, 912, 912, 913, 912, 913, 913, 913, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 913, 287, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 288, 912, 912, 289, 912, 287, 912, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 912, 914, 912, 912, 868, 912, 868, 868, 868, 1155, 868, 868, 868, 868, 868, 868, 868, 1156, 868, 868, 868, 868, 868, 868, 868, 1157, 868, 868, 868, 868, 868, 868, 912, 912, 912, 912, 912, 868, 912, 912, 912, 912, 912, 912, 912, 912, 912, 913, 912, 913, 913, 913, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 913, 287, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 288, 912, 912, 289, 912, 287, 912, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 912, 914, 912, 912, 868, 912, 868, 868, 868, 868, 1120, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 912, 912, 912, 912, 912, 868, 912, 912, 912, 912, 912, 912, 912, 912, 912, 913, 912, 913, 913, 913, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 913, 287, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 288, 912, 912, 289, 912, 287, 912, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 912, 914, 912, 912, 868, 912, 868, 868, 868, 868, 1158, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 912, 912, 912, 912, 912, 868, 912, 912, 912, 912, 912, 912, 912, 912, 912, 913, 912, 913, 913, 913, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 913, 287, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 288, 912, 912, 289, 912, 287, 912, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 912, 914, 912, 912, 868, 912, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 1159, 868, 868, 868, 868, 868, 868, 868, 912, 912, 912, 912, 912, 868, 912, 912, 912, 912, 912, 912, 912, 912, 912, 913, 912, 913, 913, 913, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 913, 287, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 288, 912, 912, 289, 912, 287, 912, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 912, 914, 912, 912, 868, 912, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 1127, 868, 868, 868, 868, 868, 868, 868, 912, 912, 912, 912, 912, 868, 912, 912, 912, 912, 912, 912, 912, 912, 912, 913, 912, 913, 913, 913, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 913, 287, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 288, 912, 912, 289, 912, 287, 912, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 912, 914, 912, 912, 868, 912, 868, 868, 868, 868, 868, 868, 868, 868, 1160, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 912, 912, 912, 912, 912, 868, 912, 912, 912, 912, 912, 912, 912, 912, 912, 913, 912, 913, 913, 913, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 913, 287, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 288, 912, 912, 289, 912, 287, 912, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 912, 914, 912, 912, 868, 912, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 1127, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 912, 912, 912, 912, 912, 868, 912, 912, 912, 912, 912, 912, 912, 912, 912, 913, 912, 913, 913, 913, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 913, 287, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 288, 912, 912, 289, 912, 287, 912, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 912, 914, 912, 912, 868, 912, 868, 868, 868, 868, 868, 868, 868, 1161, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 912, 912, 912, 912, 912, 868, 912, 912, 912, 912, 912, 912, 912, 912, 912, 913, 912, 913, 913, 913, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 913, 287, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 288, 912, 912, 289, 912, 287, 912, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 912, 914, 912, 912, 868, 912, 868, 868, 868, 868, 1113, 868, 868, 868, 1162, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 912, 912, 912, 912, 912, 868, 912, 912, 912, 912, 912, 912, 912, 912, 912, 913, 912, 913, 913, 913, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 913, 287, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 288, 912, 912, 289, 912, 287, 912, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 912, 914, 912, 912, 868, 912, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 1163, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 912, 912, 912, 912, 912, 868, 912, 912, 912, 912, 912, 912, 912, 912, 912, 913, 912, 913, 913, 913, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 913, 287, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 288, 912, 912, 289, 912, 287, 912, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 912, 914, 912, 912, 868, 912, 868, 868, 868, 868, 1127, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 912, 912, 912, 912, 912, 868, 912, 912, 912, 912, 912, 912, 912, 912, 912, 913, 912, 913, 913, 913, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 913, 287, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 288, 912, 912, 289, 912, 287, 912, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 912, 914, 912, 912, 868, 912, 868, 868, 868, 868, 868, 868, 868, 868, 1164, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 912, 912, 912, 912, 912, 868, 912, 912, 912, 912, 912, 912, 912, 912, 912, 913, 912, 913, 913, 913, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 913, 287, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 288, 912, 912, 289, 912, 287, 912, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 912, 914, 912, 912, 868, 912, 868, 868, 868, 868, 1165, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 912, 912, 912, 912, 912, 868, 912, 912, 912, 912, 912, 912, 912, 912, 912, 913, 912, 913, 913, 913, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 913, 287, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 288, 912, 912, 289, 912, 287, 912, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 912, 914, 912, 912, 868, 912, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 1107, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 912, 912, 912, 912, 912, 868, 1166, 215, 934, 934, 934, 934, 934, 934, 934, 934, 934, 934, 934, 934, 934, 934, 934, 934, 934, 934, 934, 934, 934, 934, 934, 934, 934, 934, 934, 934, 934, 934, 934, 934, 934, 934, 934, 934, 934, 934, 934, 934, 934, 934, 934, 934, 934, 934, 934, 934, 934, 934, 934, 934, 934, 934, 934, 934, 934, 934, 934, 934, 934, 934, 1167, 934, 1169, 1168, 1168, 1168, 1169, 1168, 1168, 1168, 1168, 1170, 1171, 1170, 1170, 1170, 1168, 1168, 1168, 1168, 1168, 1168, 1168, 1168, 1168, 1168, 1168, 1168, 1169, 1168, 1168, 1168, 1168, 1168, 1170, 1168, 1168, 1172, 1168, 1168, 1168, 1168, 1168, 1168, 1168, 1168, 1168, 1168, 1168, 1168, 1168, 1168, 1168, 1168, 1168, 1168, 1168, 1168, 1168, 1168, 1168, 1168, 1168, 1168, 1168, 1168, 1168, 1168, 1168, 1168, 1168, 1168, 1168, 1168, 1168, 1168, 1168, 1168, 1168, 1168, 1168, 1168, 1168, 1168, 1168, 1168, 1168, 1168, 1168, 1168, 1168, 1168, 1168, 1168, 1173, 1168, 1170, 1174, 1170, 1170, 1170, 1174, 1174, 1174, 1174, 1174, 1174, 1174, 1174, 1174, 1174, 1174, 1174, 1174, 1174, 1174, 1174, 1174, 1174, 1170, 1174, 1175, 1176, 1177, 1178, 1179, 1181, 1180, 1182, 1184, 1185, 1185, 1185, 1184, 1185, 1185, 1185, 1185, 1186, 1187, 1186, 1186, 1186, 1185, 1185, 1185, 1185, 1185, 1185, 1185, 1185, 1185, 1185, 1185, 1185, 1184, 1185, 1185, 1185, 1185, 1185, 1186, 1185, 1188, 1189, 1185, 1185, 1185, 1188, 1185, 1185, 1185, 1185, 1185, 1185, 1185, 1185, 1185, 1185, 1185, 1185, 1185, 1185, 1185, 1185, 1185, 1185, 1185, 1185, 1185, 1185, 1185, 1185, 1185, 1183, 1183, 1183, 1183, 1183, 1183, 1183, 1183, 1183, 1183, 1183, 1183, 1183, 1183, 1183, 1183, 1183, 1183, 1183, 1183, 1183, 1183, 1183, 1183, 1183, 1183, 1185, 1190, 1185, 1185, 1183, 1185, 1183, 1183, 1183, 1183, 1183, 1183, 1183, 1183, 1183, 1183, 1183, 1183, 1183, 1183, 1183, 1183, 1183, 1183, 1183, 1183, 1183, 1183, 1183, 1183, 1183, 1183, 1185, 1185, 1185, 1185, 1185, 1183, 1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191, 295, 1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191, 294, 294, 294, 294, 294, 294, 294, 294, 294, 294, 296, 1191, 1191, 1191, 1191, 295, 1191, 294, 294, 294, 294, 294, 294, 294, 294, 294, 294, 294, 294, 294, 294, 294, 294, 294, 294, 294, 294, 294, 294, 294, 294, 294, 294, 1191, 1191, 1191, 1191, 294, 1191, 294, 294, 294, 294, 294, 294, 294, 294, 294, 294, 294, 294, 294, 294, 294, 294, 294, 294, 294, 294, 294, 294, 294, 294, 294, 294, 1191, 1191, 1191, 1191, 1191, 294, 1186, 1192, 1186, 1186, 1186, 1192, 1192, 1192, 1192, 1192, 1192, 1192, 1192, 1192, 1192, 1192, 1192, 1192, 1192, 1192, 1192, 1192, 1192, 1186, 1192, 1193, 1194, 1195, 1196, 1197, 1198, 1191, 1199, 1201, 1202, 1202, 1202, 1201, 1202, 1202, 1202, 1202, 1203, 1204, 1203, 1203, 1203, 1202, 1202, 1202, 1202, 1202, 1202, 1202, 1202, 1202, 1202, 1202, 1202, 1201, 1202, 1202, 1202, 1202, 1202, 1203, 1205, 1206, 1207, 1208, 1209, 1210, 1206, 1211, 1212, 1213, 1209, 1214, 1215, 1216, 1209, 1217, 1218, 1218, 1218, 1218, 1218, 1218, 1218, 1218, 1218, 1219, 1220, 1221, 1222, 1223, 1224, 1225, 1226, 1227, 1226, 1226, 1228, 1226, 1226, 1226, 1226, 1226, 1226, 1226, 1226, 1226, 1226, 1226, 1226, 1226, 1226, 1226, 1226, 1226, 1226, 1226, 1226, 1226, 1229, 1230, 1231, 1209, 1232, 1206, 1233, 1234, 1235, 1236, 1237, 1238, 1200, 1200, 1239, 1200, 1200, 1200, 1240, 1241, 1242, 1200, 1200, 1243, 1244, 1245, 1246, 1200, 1247, 1200, 1248, 1200, 1249, 1250, 1251, 1252, 1202, 1200, 304, 304, 304, 304, 304, 304, 304, 304, 304, 304, 304, 304, 304, 304, 304, 304, 304, 304, 304, 304, 304, 304, 304, 304, 304, 304, 304, 304, 304, 304, 304, 304, 304, 1253, 304, 304, 304, 304, 304, 304, 304, 304, 304, 304, 304, 304, 304, 304, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 304, 304, 304, 304, 304, 1253, 304, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 304, 304, 304, 304, 1200, 304, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 304, 304, 304, 304, 304, 1200, 1255, 1254, 1256, 1203, 1257, 1203, 1203, 1203, 1257, 1257, 1257, 1257, 1257, 1257, 1257, 1257, 1257, 1257, 1257, 1257, 1257, 1257, 1257, 1257, 1257, 1257, 1203, 1257, 1258, 1260, 1259, 1259, 1259, 1259, 1259, 1259, 1259, 1259, 1259, 1259, 1259, 1259, 1259, 1259, 1259, 1259, 1259, 1259, 1259, 1259, 1259, 1259, 1259, 1259, 1259, 1259, 1259, 1259, 1259, 1259, 1259, 1259, 1259, 1259, 1259, 1259, 1259, 1259, 1259, 1259, 1259, 1259, 1259, 1259, 1259, 1259, 1259, 1259, 1259, 1259, 1259, 1259, 1259, 1259, 1259, 1259, 1259, 1259, 1259, 1259, 1259, 1259, 1259, 1259, 1260, 1259, 1261, 1262, 1263, 1264, 1265, 1265, 1265, 1265, 1265, 1265, 1265, 1265, 1265, 1265, 1265, 1265, 1265, 1265, 1265, 1265, 1265, 1265, 1265, 1265, 1265, 1265, 1265, 1265, 1265, 1265, 1265, 1265, 1265, 1265, 1265, 1265, 1265, 299, 299, 1265, 299, 1265, 299, 299, 1265, 1265, 299, 299, 299, 1266, 299, 299, 1267, 1267, 1267, 1267, 1267, 1267, 1267, 1267, 1267, 1267, 299, 299, 299, 299, 299, 299, 299, 316, 316, 316, 316, 316, 316, 316, 316, 316, 316, 316, 316, 316, 316, 316, 316, 316, 316, 316, 316, 316, 316, 316, 316, 316, 316, 1265, 299, 1265, 1265, 316, 299, 316, 316, 316, 316, 316, 316, 316, 316, 316, 316, 316, 316, 316, 316, 316, 316, 316, 316, 316, 316, 316, 316, 316, 316, 316, 316, 1265, 1265, 1265, 299, 1265, 316, 1268, 1268, 1268, 1268, 1268, 1268, 1268, 1268, 1268, 1268, 1268, 1268, 1268, 1268, 1268, 1268, 1268, 1268, 1268, 1268, 1268, 1268, 1268, 1268, 1268, 1268, 1268, 1268, 1268, 1268, 1268, 1268, 1268, 1268, 1268, 1268, 1268, 1268, 1268, 1268, 1268, 1268, 1268, 1268, 1268, 1268, 1268, 1268, 316, 316, 316, 316, 316, 316, 316, 316, 316, 316, 1268, 1268, 1268, 1268, 1268, 1268, 1268, 316, 316, 316, 316, 316, 316, 316, 316, 316, 316, 316, 316, 316, 316, 316, 316, 316, 316, 316, 316, 316, 316, 316, 316, 316, 316, 1268, 1268, 1268, 1268, 316, 1268, 316, 316, 316, 316, 316, 316, 316, 316, 316, 316, 316, 316, 316, 316, 316, 316, 316, 316, 316, 316, 316, 316, 316, 316, 316, 316, 1268, 1268, 1268, 1268, 1268, 316, 1267, 1267, 1267, 1267, 1267, 1267, 1267, 1267, 1267, 1267, 1268, 1269, 304, 1209, 1270, 1270, 1270, 1270, 1270, 1270, 1270, 1271, 1270, 1270, 1270, 1270, 1270, 1270, 1270, 1270, 1270, 1270, 1270, 1270, 1270, 1270, 1269, 1270, 1272, 1273, 1209, 1274, 1274, 1274, 1274, 1274, 1274, 1274, 1274, 1274, 1274, 1274, 1274, 1274, 1274, 1274, 1274, 1274, 1274, 1269, 1274, 1269, 1275, 1270, 1277, 1276, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 1276, 1279, 1278, 1280, 1278, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 1281, 1281, 1281, 1281, 1281, 1281, 1281, 1281, 1281, 1281, 1281, 1282, 1281, 1281, 1281, 1281, 1281, 1281, 1281, 1281, 1281, 1281, 1281, 1281, 1281, 1281, 1281, 1281, 1281, 1281, 1281, 1281, 1281, 1281, 1281, 1281, 1281, 1283, 1281, 1281, 1281, 1281, 1281, 1282, 1281, 302, 302, 302, 302, 302, 302, 302, 302, 302, 302, 1281, 1281, 1281, 1281, 1281, 1281, 1281, 1281, 1281, 1281, 1281, 1281, 1281, 1281, 1281, 1281, 1281, 1281, 1281, 1281, 1281, 1281, 1281, 1281, 1281, 1281, 1281, 1281, 1281, 1281, 1281, 1281, 1281, 1281, 1281, 1281, 1281, 301, 1281, 1285, 1284, 1286, 1286, 1286, 1286, 1286, 1286, 1286, 1286, 1286, 1286, 1284, 1284, 1284, 1284, 1284, 1284, 1284, 1284, 1287, 1284, 1288, 1289, 1284, 1284, 1284, 1284, 1284, 1284, 1284, 1284, 1284, 1290, 1284, 1284, 1284, 1284, 1284, 1284, 1284, 1284, 1291, 1284, 1284, 1284, 1284, 1284, 1284, 1292, 1284, 1284, 1287, 1284, 1288, 1289, 1284, 1284, 1284, 1293, 1284, 1284, 1284, 1284, 1284, 1290, 1284, 1284, 1294, 1284, 1284, 1284, 1284, 1284, 1291, 1284, 305, 305, 305, 305, 305, 305, 305, 305, 305, 305, 1295, 1295, 1295, 1295, 1295, 1295, 1295, 1295, 1295, 1295, 1295, 1296, 1295, 1295, 1295, 1295, 1295, 1295, 1295, 1295, 1295, 1295, 1295, 1295, 1295, 1295, 1295, 1295, 1295, 1295, 1295, 1295, 1295, 1295, 1295, 1295, 1295, 1297, 1295, 1295, 1295, 1295, 1295, 1296, 1295, 1295, 1295, 1298, 1295, 1295, 1295, 1295, 1295, 1295, 1295, 1295, 1299, 1295, 1300, 304, 1300, 304, 304, 306, 306, 306, 306, 306, 306, 306, 306, 306, 306, 304, 306, 306, 306, 306, 306, 306, 306, 306, 306, 306, 1301, 1301, 1301, 1301, 1301, 1301, 1301, 1301, 1301, 1301, 1301, 1301, 1301, 1301, 1301, 1301, 1301, 1301, 1301, 1301, 1301, 1301, 1301, 1301, 1301, 1301, 1301, 1301, 1301, 1301, 1301, 1301, 1301, 1301, 1301, 1301, 1301, 1300, 1301, 1301, 1301, 1301, 1301, 1301, 1301, 1301, 1301, 1302, 1301, 1304, 1303, 1305, 1307, 1306, 1306, 1306, 1308, 1306, 1309, 1310, 1286, 1286, 1286, 1286, 1286, 1286, 1286, 1286, 1286, 1286, 1284, 1284, 1284, 1284, 1284, 1284, 1284, 1284, 1284, 1284, 1284, 1284, 1284, 1284, 1284, 1284, 1284, 1284, 1284, 1284, 1284, 1284, 1284, 1284, 1284, 1284, 1284, 1284, 1284, 1284, 1284, 1284, 1284, 1284, 1284, 1284, 1284, 1292, 1284, 1284, 1284, 1284, 1284, 1284, 1284, 1284, 1284, 1293, 1284, 1284, 1284, 1284, 1284, 1284, 1284, 1284, 1294, 1284, 1311, 1311, 1311, 1311, 1311, 1311, 1311, 1311, 1311, 1311, 1284, 1284, 1284, 1284, 1284, 1284, 1284, 1284, 1284, 1284, 1284, 1284, 1284, 1284, 1284, 1284, 1284, 1284, 1284, 1284, 1284, 1284, 1284, 1284, 1284, 1284, 1284, 1284, 1284, 1284, 1284, 1284, 1284, 1284, 1284, 1284, 1284, 1312, 1284, 1284, 1284, 1284, 1284, 1284, 1284, 1284, 1284, 1293, 1284, 1284, 1284, 1284, 1284, 1284, 1284, 1284, 1294, 1284, 1314, 1314, 1314, 1314, 1314, 1314, 1314, 1314, 1314, 1314, 1313, 1313, 1313, 1313, 1313, 1313, 1313, 1313, 1313, 1313, 1313, 1313, 1313, 1313, 1313, 1313, 1313, 1313, 1313, 1313, 1313, 1313, 1313, 1313, 1313, 1313, 1313, 1313, 1313, 1313, 1313, 1313, 1313, 1313, 1313, 1313, 1313, 1315, 1313, 1313, 1313, 1313, 1313, 1313, 1313, 1313, 1313, 1316, 1313, 1313, 1313, 1313, 1313, 1313, 1313, 1313, 1317, 1313, 1314, 1314, 1314, 1314, 1314, 1314, 1314, 1314, 1314, 1314, 1313, 1313, 1313, 1313, 1313, 1313, 1313, 1313, 1313, 1313, 1313, 1313, 1313, 1313, 1313, 1313, 1313, 1313, 1313, 1313, 1313, 1313, 1313, 1313, 1313, 1313, 1313, 1313, 1313, 1313, 1313, 1313, 1313, 1313, 1313, 1313, 1313, 1318, 1313, 1313, 1313, 1313, 1313, 1313, 1313, 1313, 1313, 1316, 1313, 1313, 1313, 1313, 1313, 1313, 1313, 1313, 1317, 1313, 1316, 1313, 1313, 1313, 1313, 1313, 1313, 1313, 1313, 1317, 1313, 1320, 1319, 1321, 1323, 1322, 1322, 1322, 1324, 1322, 1326, 1325, 1327, 1328, 1330, 1330, 1329, 1329, 1329, 1329, 1329, 1329, 1329, 1329, 1329, 1329, 1329, 1329, 1329, 1329, 1329, 1329, 1329, 1329, 1329, 1329, 1329, 1329, 1329, 1329, 1329, 1329, 1329, 1329, 1329, 1329, 1329, 1329, 1329, 1329, 1329, 1329, 1329, 1329, 1329, 1329, 1329, 1329, 1329, 1329, 1329, 1331, 1329, 1329, 1329, 1329, 1329, 1329, 1329, 1329, 1329, 1332, 1329, 1329, 1329, 1329, 1329, 1329, 1329, 1329, 1333, 1329, 1334, 1334, 1313, 1313, 1313, 1313, 1313, 1313, 1313, 1313, 1313, 1313, 1313, 1313, 1313, 1313, 1313, 1313, 1313, 1313, 1313, 1313, 1313, 1313, 1313, 1313, 1313, 1313, 1313, 1313, 1313, 1313, 1313, 1313, 1313, 1313, 1313, 1313, 1313, 1313, 1313, 1313, 1313, 1313, 1313, 1313, 1313, 1335, 1313, 1313, 1313, 1313, 1313, 1313, 1313, 1313, 1313, 1316, 1313, 1313, 1313, 1313, 1313, 1313, 1313, 1313, 1317, 1313, 1334, 1334, 1313, 1313, 1313, 1313, 1313, 1313, 1313, 1313, 1313, 1313, 1313, 1313, 1313, 1313, 1313, 1313, 1313, 1313, 1313, 1313, 1313, 1313, 1313, 1313, 1313, 1313, 1313, 1313, 1313, 1313, 1313, 1313, 1313, 1313, 1313, 1313, 1313, 1313, 1313, 1313, 1313, 1313, 1313, 1313, 1313, 1318, 1313, 1313, 1313, 1313, 1313, 1313, 1313, 1313, 1313, 1316, 1313, 1313, 1313, 1313, 1313, 1313, 1313, 1313, 1317, 1313, 1337, 1337, 1337, 1337, 1337, 1337, 1337, 1337, 1337, 1337, 1336, 1336, 1336, 1336, 1336, 1336, 1336, 1336, 1336, 1336, 1336, 1336, 1336, 1336, 1336, 1336, 1336, 1336, 1336, 1336, 1336, 1336, 1336, 1336, 1336, 1336, 1336, 1336, 1336, 1336, 1336, 1336, 1336, 1336, 1336, 1336, 1336, 1338, 1336, 1336, 1336, 1336, 1336, 1336, 1336, 1336, 1336, 1339, 1336, 1336, 1336, 1336, 1336, 1336, 1336, 1336, 1340, 1336, 1342, 1342, 1342, 1342, 1342, 1342, 1342, 1342, 1342, 1342, 1341, 1341, 1341, 1341, 1341, 1341, 1341, 1341, 1341, 1341, 1341, 1341, 1341, 1341, 1341, 1341, 1341, 1341, 1341, 1341, 1341, 1341, 1341, 1341, 1341, 1341, 1341, 1341, 1341, 1341, 1341, 1341, 1341, 1341, 1341, 1341, 1341, 1343, 1341, 1341, 1341, 1341, 1341, 1341, 1341, 1341, 1341, 1344, 1341, 1341, 1341, 1341, 1341, 1341, 1341, 1341, 1345, 1341, 1347, 1347, 1347, 1347, 1347, 1347, 1347, 1347, 1347, 1347, 1346, 1346, 1346, 1346, 1346, 1346, 1346, 1347, 1347, 1347, 1347, 1347, 1347, 1346, 1346, 1346, 1346, 1346, 1346, 1346, 1346, 1346, 1346, 1346, 1346, 1346, 1346, 1346, 1346, 1346, 1346, 1346, 1346, 1346, 1346, 1346, 1346, 1348, 1346, 1347, 1347, 1347, 1347, 1347, 1347, 1346, 1346, 1349, 1346, 1346, 1346, 1346, 1346, 1346, 1346, 1346, 1350, 1346, 1351, 1351, 1351, 1351, 1351, 1351, 1351, 1351, 1351, 1351, 1313, 1313, 1313, 1313, 1313, 1313, 1313, 1351, 1351, 1351, 1351, 1351, 1351, 1313, 1313, 1313, 1313, 1313, 1313, 1313, 1313, 1313, 1313, 1313, 1313, 1313, 1313, 1313, 1313, 1313, 1313, 1313, 1313, 1313, 1313, 1313, 1313, 1352, 1313, 1351, 1351, 1351, 1351, 1351, 1351, 1313, 1313, 1316, 1313, 1313, 1313, 1313, 1313, 1313, 1313, 1313, 1317, 1313, 1351, 1351, 1351, 1351, 1351, 1351, 1351, 1351, 1351, 1351, 1313, 1313, 1313, 1313, 1313, 1313, 1313, 1351, 1351, 1351, 1351, 1351, 1351, 1313, 1313, 1313, 1313, 1313, 1313, 1313, 1313, 1313, 1313, 1313, 1313, 1313, 1313, 1313, 1313, 1313, 1313, 1313, 1313, 1313, 1313, 1313, 1313, 1318, 1313, 1351, 1351, 1351, 1351, 1351, 1351, 1313, 1313, 1316, 1313, 1313, 1313, 1313, 1313, 1313, 1313, 1313, 1317, 1313, 1354, 1353, 1355, 1355, 1355, 1355, 1355, 1355, 1355, 1355, 1355, 1355, 1353, 1353, 1353, 1353, 1353, 1353, 1353, 1353, 1353, 1353, 1353, 1356, 1353, 1353, 1353, 1353, 1353, 1353, 1353, 1353, 1353, 1353, 1353, 1353, 1353, 1353, 1353, 1353, 1353, 1353, 1353, 1353, 1353, 1353, 1353, 1353, 1353, 1357, 1353, 1353, 1353, 1353, 1353, 1356, 1353, 1353, 1353, 1358, 1353, 1353, 1353, 1353, 1353, 1353, 1353, 1353, 1359, 1353, 1360, 1360, 1360, 1360, 1360, 1360, 1360, 1360, 1360, 1360, 1353, 1353, 1353, 1353, 1353, 1353, 1353, 1353, 1353, 1353, 1353, 1353, 1353, 1353, 1353, 1353, 1353, 1353, 1353, 1353, 1353, 1353, 1353, 1353, 1353, 1353, 1353, 1353, 1353, 1353, 1353, 1353, 1353, 1353, 1353, 1353, 1353, 1361, 1353, 1353, 1353, 1353, 1353, 1353, 1353, 1353, 1353, 1358, 1353, 1353, 1353, 1353, 1353, 1353, 1353, 1353, 1359, 1353, 1362, 1313, 1363, 1363, 1363, 1363, 1363, 1363, 1363, 1363, 1363, 1363, 1313, 1313, 1313, 1313, 1313, 1313, 1313, 1313, 1313, 1313, 1313, 1364, 1313, 1313, 1313, 1313, 1313, 1313, 1313, 1313, 1313, 1313, 1313, 1313, 1313, 1313, 1313, 1313, 1313, 1313, 1313, 1313, 1313, 1313, 1313, 1313, 1313, 1365, 1313, 1313, 1313, 1313, 1313, 1364, 1313, 1313, 1313, 1316, 1313, 1313, 1313, 1313, 1313, 1313, 1313, 1313, 1317, 1313, 1363, 1363, 1363, 1363, 1363, 1363, 1363, 1363, 1363, 1363, 1313, 1313, 1313, 1313, 1313, 1313, 1313, 1313, 1313, 1313, 1313, 1313, 1313, 1313, 1313, 1313, 1313, 1313, 1313, 1313, 1313, 1313, 1313, 1313, 1313, 1313, 1313, 1313, 1313, 1313, 1313, 1313, 1313, 1313, 1313, 1313, 1313, 1318, 1313, 1313, 1313, 1313, 1313, 1313, 1313, 1313, 1313, 1316, 1313, 1313, 1313, 1313, 1313, 1313, 1313, 1313, 1317, 1313, 1271, 1278, 1209, 1366, 1270, 1260, 1270, 1367, 1368, 1278, 1278, 1278, 1278, 1278, 1278, 1278, 1278, 1278, 1278, 1278, 1278, 1278, 1278, 1278, 1278, 1278, 1278, 1278, 1278, 1278, 1278, 1278, 1278, 1278, 1278, 1278, 1278, 1278, 1278, 1278, 1278, 1278, 1278, 1278, 1278, 1278, 1278, 1278, 1278, 1278, 1278, 1278, 1278, 1278, 1278, 1278, 1278, 1278, 1278, 1278, 1278, 1278, 1278, 1278, 1278, 1278, 1278, 1278, 1278, 1278, 1278, 1278, 1260, 1278, 1260, 1270, 1260, 1209, 1270, 1265, 1265, 1265, 1265, 1265, 1265, 1265, 1265, 1265, 1265, 1265, 1265, 1265, 1265, 1265, 1265, 1265, 1265, 1265, 1265, 1265, 1265, 1265, 1265, 1265, 1265, 1265, 1265, 1265, 1265, 1265, 1265, 1265, 1265, 1265, 1265, 1265, 1265, 1265, 1265, 1265, 1265, 1265, 1265, 1265, 1265, 1265, 1265, 316, 316, 316, 316, 316, 316, 316, 316, 316, 316, 1265, 1265, 1265, 1265, 1265, 1265, 1369, 316, 316, 316, 316, 316, 316, 316, 316, 316, 316, 316, 316, 316, 316, 316, 316, 316, 316, 316, 316, 316, 316, 316, 316, 316, 316, 1265, 1265, 1265, 1265, 316, 1265, 316, 316, 316, 316, 316, 316, 316, 316, 316, 316, 316, 316, 316, 316, 316, 316, 316, 316, 316, 316, 316, 316, 316, 316, 316, 316, 1265, 1265, 1265, 1265, 1265, 316, 304, 304, 304, 304, 304, 304, 304, 304, 304, 304, 304, 304, 304, 304, 304, 304, 304, 304, 304, 304, 304, 304, 304, 304, 304, 304, 304, 304, 304, 304, 304, 304, 304, 1253, 304, 304, 304, 304, 304, 304, 304, 304, 304, 304, 304, 304, 304, 304, 1226, 1226, 1226, 1226, 1226, 1226, 1226, 1226, 1226, 1226, 1370, 304, 304, 304, 304, 1253, 304, 1226, 1226, 1226, 1226, 1226, 1226, 1226, 1226, 1226, 1226, 1226, 1226, 1226, 1226, 1226, 1226, 1226, 1226, 1226, 1226, 1226, 1226, 1226, 1226, 1226, 1226, 304, 304, 304, 304, 1226, 304, 1226, 1226, 1226, 1226, 1226, 1226, 1226, 1226, 1226, 1226, 1226, 1226, 1226, 1226, 1226, 1226, 1226, 1226, 1226, 1226, 1226, 1226, 1226, 1226, 1226, 1226, 304, 304, 304, 304, 304, 1226, 1371, 1372, 1372, 1372, 1372, 1372, 1372, 1372, 1372, 1372, 1372, 1372, 1372, 1372, 1372, 1372, 1372, 1372, 1372, 1372, 1372, 1372, 1372, 1372, 1372, 1372, 1372, 1372, 1372, 1372, 1372, 1372, 1372, 1372, 1253, 1372, 1372, 1372, 1372, 1372, 1372, 1372, 1372, 1372, 1372, 1372, 1372, 1372, 1372, 1226, 1226, 1226, 1226, 1226, 1226, 1226, 1226, 1226, 1226, 1370, 1372, 1372, 1372, 1372, 1253, 1372, 1226, 1226, 1226, 1226, 1373, 1226, 1226, 1226, 1226, 1226, 1226, 1226, 1226, 1226, 1226, 1226, 1226, 1226, 1226, 1226, 1226, 1226, 1226, 1226, 1226, 1226, 1372, 1372, 1372, 1372, 1226, 1372, 1226, 1226, 1226, 1226, 1226, 1226, 1226, 1226, 1226, 1226, 1226, 1226, 1226, 1226, 1226, 1226, 1226, 1226, 1226, 1226, 1226, 1226, 1226, 1226, 1226, 1226, 1372, 1372, 1372, 1372, 1372, 1226, 1372, 1372, 1372, 1372, 1372, 1372, 1372, 1372, 1372, 1372, 1372, 1372, 1372, 1372, 1372, 1372, 1372, 1372, 1372, 1372, 1372, 1372, 1372, 1372, 1372, 1372, 1372, 1372, 1372, 1372, 1372, 1372, 1372, 1253, 1372, 1372, 1372, 1372, 1372, 1372, 1372, 1372, 1372, 1372, 1372, 1372, 1372, 1372, 1226, 1226, 1226, 1226, 1226, 1226, 1226, 1226, 1226, 1226, 1370, 1372, 1372, 1372, 1372, 1253, 1372, 1226, 1226, 1226, 1226, 1226, 1226, 1374, 1226, 1226, 1226, 1226, 1226, 1226, 1226, 1226, 1226, 1226, 1226, 1226, 1226, 1226, 1226, 1226, 1226, 1226, 1226, 1372, 1372, 1372, 1372, 1226, 1372, 1226, 1226, 1226, 1226, 1226, 1226, 1226, 1226, 1226, 1226, 1226, 1226, 1226, 1226, 1226, 1226, 1226, 1226, 1226, 1226, 1226, 1226, 1226, 1226, 1226, 1226, 1372, 1372, 1372, 1372, 1372, 1226, 1372, 1372, 1372, 1372, 1372, 1372, 1372, 1372, 1372, 1372, 1372, 1372, 1372, 1372, 1372, 1372, 1372, 1372, 1372, 1372, 1372, 1372, 1372, 1372, 1372, 1372, 1372, 1372, 1372, 1372, 1372, 1372, 1372, 1253, 1372, 1372, 1372, 1372, 1372, 1372, 1372, 1372, 1372, 1372, 1372, 1372, 1372, 1372, 1226, 1226, 1226, 1226, 1226, 1226, 1226, 1226, 1226, 1226, 1370, 1372, 1372, 1372, 1372, 1253, 1372, 1226, 1226, 1226, 1226, 1226, 1226, 1226, 1226, 1375, 1226, 1226, 1226, 1226, 1226, 1226, 1226, 1226, 1226, 1226, 1226, 1226, 1226, 1226, 1226, 1226, 1226, 1372, 1372, 1372, 1372, 1226, 1372, 1226, 1226, 1226, 1226, 1226, 1226, 1226, 1226, 1226, 1226, 1226, 1226, 1226, 1226, 1226, 1226, 1226, 1226, 1226, 1226, 1226, 1226, 1226, 1226, 1226, 1226, 1372, 1372, 1372, 1372, 1372, 1226, 1372, 1372, 1372, 1372, 1372, 1372, 1372, 1372, 1372, 1372, 1372, 1372, 1372, 1372, 1372, 1372, 1372, 1372, 1372, 1372, 1372, 1372, 1372, 1372, 1372, 1372, 1372, 1372, 1372, 1372, 1372, 1372, 1372, 1253, 1372, 1372, 1372, 1372, 1372, 1372, 1372, 1372, 1372, 1372, 1372, 1372, 1372, 1372, 1226, 1226, 1226, 1226, 1226, 1226, 1226, 1226, 1226, 1226, 1370, 1372, 1372, 1372, 1372, 1253, 1372, 1226, 1226, 1226, 1226, 1226, 1226, 1226, 1226, 1226, 1226, 1226, 1226, 1226, 1376, 1226, 1226, 1226, 1226, 1226, 1226, 1226, 1226, 1226, 1226, 1226, 1226, 1372, 1372, 1372, 1372, 1226, 1372, 1226, 1226, 1226, 1226, 1226, 1226, 1226, 1226, 1226, 1226, 1226, 1226, 1226, 1226, 1226, 1226, 1226, 1226, 1226, 1226, 1226, 1226, 1226, 1226, 1226, 1226, 1372, 1372, 1372, 1372, 1372, 1226, 1372, 1372, 1372, 1372, 1372, 1372, 1372, 1372, 1372, 1372, 1372, 1372, 1372, 1372, 1372, 1372, 1372, 1372, 1372, 1372, 1372, 1372, 1372, 1372, 1372, 1372, 1372, 1372, 1372, 1372, 1372, 1372, 1372, 1253, 1372, 1372, 1372, 1372, 1372, 1372, 1372, 1372, 1372, 1372, 1372, 1372, 1372, 1372, 1226, 1226, 1226, 1226, 1226, 1226, 1226, 1226, 1226, 1226, 1370, 1372, 1372, 1372, 1372, 1253, 1372, 1226, 1226, 1226, 1226, 1226, 1226, 1226, 1226, 1226, 1226, 1226, 1226, 1226, 1377, 1226, 1226, 1226, 1226, 1226, 1226, 1226, 1226, 1226, 1226, 1226, 1226, 1372, 1372, 1372, 1372, 1226, 1372, 1226, 1226, 1226, 1226, 1226, 1226, 1226, 1226, 1226, 1226, 1226, 1226, 1226, 1226, 1226, 1226, 1226, 1226, 1226, 1226, 1226, 1226, 1226, 1226, 1226, 1226, 1372, 1372, 1372, 1372, 1372, 1226, 1372, 1372, 1372, 1372, 1372, 1372, 1372, 1372, 1372, 1372, 1372, 1372, 1372, 1372, 1372, 1372, 1372, 1372, 1372, 1372, 1372, 1372, 1372, 1372, 1372, 1372, 1372, 1372, 1372, 1372, 1372, 1372, 1372, 1253, 1372, 1372, 1372, 1372, 1372, 1372, 1372, 1372, 1372, 1372, 1372, 1372, 1372, 1372, 1226, 1226, 1226, 1226, 1226, 1226, 1226, 1226, 1226, 1226, 1370, 1372, 1372, 1372, 1372, 1253, 1372, 1226, 1226, 1226, 1376, 1226, 1226, 1226, 1226, 1226, 1226, 1226, 1226, 1226, 1226, 1226, 1226, 1226, 1226, 1226, 1226, 1226, 1226, 1226, 1226, 1226, 1226, 1372, 1372, 1372, 1372, 1226, 1372, 1226, 1226, 1226, 1226, 1226, 1226, 1226, 1226, 1226, 1226, 1226, 1226, 1226, 1226, 1226, 1226, 1226, 1226, 1226, 1226, 1226, 1226, 1226, 1226, 1226, 1226, 1372, 1372, 1372, 1372, 1372, 1226, 1378, 1380, 1379, 1381, 1382, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1253, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1383, 1383, 1383, 1383, 1383, 1253, 1383, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1383, 1383, 1383, 1383, 1384, 1383, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1383, 1383, 1383, 1383, 1383, 1200, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1253, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1383, 1383, 1383, 1383, 1383, 1253, 1383, 1200, 1200, 1200, 1200, 1385, 1386, 1200, 1200, 1200, 1200, 1200, 1387, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1383, 1383, 1383, 1383, 1200, 1383, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1383, 1383, 1383, 1383, 1383, 1200, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1253, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1383, 1383, 1383, 1383, 1383, 1253, 1383, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1388, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1383, 1383, 1383, 1383, 1200, 1383, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1383, 1383, 1383, 1383, 1383, 1200, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1253, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1383, 1383, 1383, 1383, 1383, 1253, 1383, 1200, 1200, 1389, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1383, 1383, 1383, 1383, 1200, 1383, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1383, 1383, 1383, 1383, 1383, 1200, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1253, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1383, 1383, 1383, 1383, 1383, 1253, 1383, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1390, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1383, 1383, 1383, 1383, 1200, 1383, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1383, 1383, 1383, 1383, 1383, 1200, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1253, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1383, 1383, 1383, 1383, 1383, 1253, 1383, 1200, 1200, 1200, 1391, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1383, 1383, 1383, 1383, 1200, 1383, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1383, 1383, 1383, 1383, 1383, 1200, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1253, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1383, 1383, 1383, 1383, 1383, 1253, 1383, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1392, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1383, 1383, 1383, 1383, 1200, 1383, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1383, 1383, 1383, 1383, 1383, 1200, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1253, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1383, 1383, 1383, 1383, 1383, 1253, 1383, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1393, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1383, 1383, 1383, 1383, 1200, 1383, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1383, 1383, 1383, 1383, 1383, 1200, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1253, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1383, 1383, 1383, 1383, 1383, 1253, 1383, 1200, 1200, 1200, 1200, 1200, 1200, 1394, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1383, 1383, 1383, 1383, 1200, 1383, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1383, 1383, 1383, 1383, 1383, 1200, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1253, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1383, 1383, 1383, 1383, 1383, 1253, 1383, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1383, 1383, 1383, 1383, 1395, 1383, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1383, 1383, 1383, 1383, 1383, 1200, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1253, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1383, 1383, 1383, 1383, 1383, 1253, 1383, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1383, 1383, 1383, 1383, 1396, 1383, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1383, 1383, 1383, 1383, 1383, 1200, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1253, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1383, 1383, 1383, 1383, 1383, 1253, 1383, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1397, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1383, 1383, 1383, 1383, 1200, 1383, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1383, 1383, 1383, 1383, 1383, 1200, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1253, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1383, 1383, 1383, 1383, 1383, 1253, 1383, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1398, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1383, 1383, 1383, 1383, 1200, 1383, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1383, 1383, 1383, 1383, 1383, 1200, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1253, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1383, 1383, 1383, 1383, 1383, 1253, 1383, 1200, 1200, 1200, 1200, 1399, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1383, 1383, 1383, 1383, 1200, 1383, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1383, 1383, 1383, 1383, 1383, 1200, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1253, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1383, 1383, 1383, 1383, 1383, 1253, 1383, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1383, 1383, 1383, 1383, 1400, 1383, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1383, 1383, 1383, 1383, 1383, 1200, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1253, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1383, 1383, 1383, 1383, 1383, 1253, 1383, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1383, 1383, 1383, 1383, 1401, 1383, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1383, 1383, 1383, 1383, 1383, 1200, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1253, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1383, 1383, 1383, 1383, 1383, 1253, 1383, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1402, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1383, 1383, 1383, 1383, 1200, 1383, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1383, 1383, 1383, 1383, 1383, 1200, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1253, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1383, 1383, 1383, 1383, 1383, 1253, 1383, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1398, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1383, 1383, 1383, 1383, 1200, 1383, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1383, 1383, 1383, 1383, 1383, 1200, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1253, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1383, 1383, 1383, 1383, 1383, 1253, 1383, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1383, 1383, 1383, 1383, 1200, 1383, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1403, 1200, 1404, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1383, 1383, 1383, 1383, 1383, 1200, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1253, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1383, 1383, 1383, 1383, 1383, 1253, 1383, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1383, 1383, 1383, 1383, 1200, 1383, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1405, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1383, 1383, 1383, 1383, 1383, 1200, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1253, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1383, 1383, 1383, 1383, 1383, 1253, 1383, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1383, 1383, 1383, 1383, 1200, 1383, 1406, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1383, 1383, 1383, 1383, 1383, 1200, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1253, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1383, 1383, 1383, 1383, 1383, 1253, 1383, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1383, 1383, 1383, 1383, 1200, 1383, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1407, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1383, 1383, 1383, 1383, 1383, 1200, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1253, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1383, 1383, 1383, 1383, 1383, 1253, 1383, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1383, 1383, 1383, 1383, 1200, 1383, 1200, 1200, 1200, 1408, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1383, 1383, 1383, 1383, 1383, 1200, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1253, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1383, 1383, 1383, 1383, 1383, 1253, 1383, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1383, 1383, 1383, 1383, 1200, 1383, 1200, 1200, 1200, 1200, 1409, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1410, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1383, 1383, 1383, 1383, 1383, 1200, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1253, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1383, 1383, 1383, 1383, 1383, 1253, 1383, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1383, 1383, 1383, 1383, 1200, 1383, 1200, 1200, 1200, 1200, 1200, 1200, 1411, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1383, 1383, 1383, 1383, 1383, 1200, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1253, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1383, 1383, 1383, 1383, 1383, 1253, 1383, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1383, 1383, 1383, 1383, 1200, 1383, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1412, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1383, 1383, 1383, 1383, 1383, 1200, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1253, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1383, 1383, 1383, 1383, 1383, 1253, 1383, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1383, 1383, 1383, 1383, 1200, 1383, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1408, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1383, 1383, 1383, 1383, 1383, 1200, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1253, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1383, 1383, 1383, 1383, 1383, 1253, 1383, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1383, 1383, 1383, 1383, 1200, 1383, 1200, 1200, 1200, 1200, 1413, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1383, 1383, 1383, 1383, 1383, 1200, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1253, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1383, 1383, 1383, 1383, 1383, 1253, 1383, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1383, 1383, 1383, 1383, 1200, 1383, 1414, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1383, 1383, 1383, 1383, 1383, 1200, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1253, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1383, 1383, 1383, 1383, 1383, 1253, 1383, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1383, 1383, 1383, 1383, 1200, 1383, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1415, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1383, 1383, 1383, 1383, 1383, 1200, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1253, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1383, 1383, 1383, 1383, 1383, 1253, 1383, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1383, 1383, 1383, 1383, 1200, 1383, 1416, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1417, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1383, 1383, 1383, 1383, 1383, 1200, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1253, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1383, 1383, 1383, 1383, 1383, 1253, 1383, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1383, 1383, 1383, 1383, 1200, 1383, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1418, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1383, 1383, 1383, 1383, 1383, 1200, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1253, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1383, 1383, 1383, 1383, 1383, 1253, 1383, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1383, 1383, 1383, 1383, 1200, 1383, 1200, 1200, 1200, 1200, 1408, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1383, 1383, 1383, 1383, 1383, 1200, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1253, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1383, 1383, 1383, 1383, 1383, 1253, 1383, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1383, 1383, 1383, 1383, 1200, 1383, 1419, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1383, 1383, 1383, 1383, 1383, 1200, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1253, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1383, 1383, 1383, 1383, 1383, 1253, 1383, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1383, 1383, 1383, 1383, 1200, 1383, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1420, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1383, 1383, 1383, 1383, 1383, 1200, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1253, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1383, 1383, 1383, 1383, 1383, 1253, 1383, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1383, 1383, 1383, 1383, 1200, 1383, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1421, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1383, 1383, 1383, 1383, 1383, 1200, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 318, 319, 318, 318, 318, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 318, 1253, 1422, 320, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1422, 1422, 321, 1422, 1422, 1253, 1422, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1422, 322, 1422, 1422, 1200, 1422, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1422, 1422, 1422, 1422, 1422, 1200, 335, 336, 335, 335, 335, 334, 334, 334, 334, 334, 334, 334, 334, 334, 334, 334, 334, 334, 334, 334, 334, 334, 334, 335, 334, 334, 337, 334, 334, 334, 334, 334, 334, 334, 334, 334, 334, 334, 334, 334, 334, 334, 334, 334, 334, 334, 334, 334, 334, 334, 334, 340, 334, 334, 334, 334, 334, 334, 334, 334, 334, 334, 334, 334, 334, 334, 334, 334, 334, 334, 334, 334, 334, 334, 334, 334, 334, 334, 334, 334, 334, 334, 334, 339, 334, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1253, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1383, 1383, 1383, 1383, 1383, 1253, 1383, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1383, 1383, 1383, 1383, 1200, 1383, 1200, 1200, 1200, 1200, 1424, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1425, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1383, 1383, 1383, 1383, 1383, 1200, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1253, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1383, 1383, 1383, 1383, 1383, 1253, 1383, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1383, 1383, 1383, 1383, 1200, 1383, 1200, 1200, 1200, 1200, 1200, 1426, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1383, 1383, 1383, 1383, 1383, 1200, 1427, 1427, 1427, 1427, 1427, 1427, 1427, 1427, 1427, 1427, 1427, 1427, 1427, 1427, 1427, 1427, 1427, 1427, 1427, 1427, 1427, 1427, 1427, 1427, 1427, 1427, 1427, 1427, 1427, 1427, 1427, 1427, 1427, 1253, 1427, 1427, 1427, 1427, 1427, 1427, 1427, 1427, 1427, 1427, 1427, 1427, 1427, 1427, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1427, 1427, 1427, 1427, 1427, 1253, 1427, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1427, 1427, 1427, 1427, 1200, 1427, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1428, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1427, 1427, 1427, 1427, 1427, 1200, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1253, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1383, 1383, 1383, 1383, 1383, 1253, 1383, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1383, 1383, 1383, 1383, 1200, 1383, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1429, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1383, 1383, 1383, 1383, 1383, 1200, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1253, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1383, 1383, 1383, 1383, 1383, 1253, 1383, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1383, 1383, 1383, 1383, 1200, 1383, 1200, 1200, 1200, 1200, 1430, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1383, 1383, 1383, 1383, 1383, 1200, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1253, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1383, 1383, 1383, 1383, 1383, 1253, 1383, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1383, 1383, 1383, 1383, 1200, 1383, 1200, 1200, 1200, 1431, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1383, 1383, 1383, 1383, 1383, 1200, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1253, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1383, 1383, 1383, 1383, 1383, 1432, 1383, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1383, 1383, 1383, 1383, 1200, 1383, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1383, 1383, 1383, 1383, 1383, 1200, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1253, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1383, 1383, 1383, 1383, 1383, 1253, 1383, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1383, 1383, 1383, 1383, 1200, 1383, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1433, 1200, 1434, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1383, 1383, 1383, 1383, 1383, 1200, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1253, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1383, 1383, 1383, 1383, 1383, 1253, 1383, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1383, 1383, 1383, 1383, 1200, 1383, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1435, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1383, 1383, 1383, 1383, 1383, 1200, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1253, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1383, 1383, 1383, 1383, 1383, 1253, 1383, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1383, 1383, 1383, 1383, 1200, 1383, 1200, 1200, 1200, 1200, 1408, 1200, 1200, 1200, 1436, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1383, 1383, 1383, 1383, 1383, 1200, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1253, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1383, 1383, 1383, 1383, 1383, 1253, 1383, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1383, 1383, 1383, 1383, 1200, 1383, 1200, 1200, 1200, 1200, 1200, 1408, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1383, 1383, 1383, 1383, 1383, 1200, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1253, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1383, 1383, 1383, 1383, 1383, 1253, 1383, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1383, 1383, 1383, 1383, 1200, 1383, 1200, 1200, 1200, 1401, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1437, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1383, 1383, 1383, 1383, 1383, 1200, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1253, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1383, 1383, 1383, 1383, 1383, 1253, 1383, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1383, 1383, 1383, 1383, 1200, 1383, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1438, 1200, 1200, 1200, 1200, 1200, 1383, 1383, 1383, 1383, 1383, 1200, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1253, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1383, 1383, 1383, 1383, 1383, 1253, 1383, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1383, 1383, 1383, 1383, 1200, 1383, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1418, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1383, 1383, 1383, 1383, 1383, 1200, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1253, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1383, 1383, 1383, 1383, 1383, 1253, 1383, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1383, 1383, 1383, 1383, 1200, 1383, 1439, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1242, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1383, 1383, 1383, 1383, 1383, 1200, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1253, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1383, 1383, 1383, 1383, 1383, 1253, 1383, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1383, 1383, 1383, 1383, 1200, 1383, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1440, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1383, 1383, 1383, 1383, 1383, 1200, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1253, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1383, 1383, 1383, 1383, 1383, 1253, 1383, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1383, 1383, 1383, 1383, 1200, 1383, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1441, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1383, 1383, 1383, 1383, 1383, 1200, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1253, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1383, 1383, 1383, 1383, 1383, 1253, 1383, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1383, 1383, 1383, 1383, 1200, 1383, 1200, 1200, 1200, 1200, 1401, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1383, 1383, 1383, 1383, 1383, 1200, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1253, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1383, 1383, 1383, 1383, 1383, 1253, 1383, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1383, 1383, 1383, 1383, 1200, 1383, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1408, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1383, 1383, 1383, 1383, 1383, 1200, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1253, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1383, 1383, 1383, 1383, 1383, 1253, 1383, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1383, 1383, 1383, 1383, 1200, 1383, 1200, 1200, 1200, 1200, 1200, 1442, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1408, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1383, 1383, 1383, 1383, 1383, 1200, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1253, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1383, 1383, 1383, 1383, 1383, 1253, 1383, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1383, 1383, 1383, 1383, 1200, 1383, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1443, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1383, 1383, 1383, 1383, 1383, 1200, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1253, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1383, 1383, 1383, 1383, 1383, 1253, 1383, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1383, 1383, 1383, 1383, 1200, 1383, 1200, 1200, 1200, 1444, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1383, 1383, 1383, 1383, 1383, 1200, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1253, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1383, 1383, 1383, 1383, 1383, 1253, 1383, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1383, 1383, 1383, 1383, 1200, 1383, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1445, 1200, 1200, 1200, 1200, 1200, 1383, 1383, 1383, 1383, 1383, 1200, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1253, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1383, 1383, 1383, 1383, 1383, 1253, 1383, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1383, 1383, 1383, 1383, 1200, 1383, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1418, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1383, 1383, 1383, 1383, 1383, 1200, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1253, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1383, 1383, 1383, 1383, 1383, 1253, 1383, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1383, 1383, 1383, 1383, 1200, 1383, 1200, 1200, 1200, 1200, 1446, 1200, 1200, 1200, 1447, 1200, 1200, 1200, 1200, 1200, 1448, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1383, 1383, 1383, 1383, 1383, 1200, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1253, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1383, 1383, 1383, 1383, 1383, 1253, 1383, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1383, 1383, 1383, 1383, 1200, 1383, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1449, 1200, 1200, 1383, 1383, 1383, 1383, 1383, 1200, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1253, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1383, 1383, 1383, 1383, 1383, 1253, 1383, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1383, 1383, 1383, 1383, 1200, 1383, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1415, 1200, 1200, 1200, 1200, 1200, 1200, 1383, 1383, 1383, 1383, 1383, 1200, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1253, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1383, 1383, 1383, 1383, 1383, 1253, 1383, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1383, 1383, 1383, 1383, 1200, 1383, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1401, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1383, 1383, 1383, 1383, 1383, 1200, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1253, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1383, 1383, 1383, 1383, 1383, 1253, 1383, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1383, 1383, 1383, 1383, 1200, 1383, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1450, 1200, 1200, 1200, 1200, 1200, 1200, 1383, 1383, 1383, 1383, 1383, 1200, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1253, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1383, 1383, 1383, 1383, 1383, 1253, 1383, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1383, 1383, 1383, 1383, 1200, 1383, 1200, 1200, 1200, 1200, 1451, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1383, 1383, 1383, 1383, 1383, 1200, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1253, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1383, 1383, 1383, 1383, 1383, 1253, 1383, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1383, 1383, 1383, 1383, 1200, 1383, 1200, 1200, 1200, 1452, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1453, 1454, 1200, 1200, 1200, 1200, 1200, 1200, 1383, 1383, 1383, 1383, 1383, 1200, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1253, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1383, 1383, 1383, 1383, 1383, 1253, 1383, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1383, 1383, 1383, 1383, 1200, 1383, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1401, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1383, 1383, 1383, 1383, 1383, 1200, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1253, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1383, 1383, 1383, 1383, 1383, 1253, 1383, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1383, 1383, 1383, 1383, 1200, 1383, 1200, 1200, 1455, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1383, 1383, 1383, 1383, 1383, 1200, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1253, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1383, 1383, 1383, 1383, 1383, 1253, 1383, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1383, 1383, 1383, 1383, 1200, 1383, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1456, 1200, 1200, 1200, 1200, 1200, 1383, 1383, 1383, 1383, 1383, 1200, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1253, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1383, 1383, 1383, 1383, 1383, 1253, 1383, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1383, 1383, 1383, 1383, 1200, 1383, 1200, 1200, 1200, 1200, 1442, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1383, 1383, 1383, 1383, 1383, 1200, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1253, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1383, 1383, 1383, 1383, 1383, 1253, 1383, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1383, 1383, 1383, 1383, 1200, 1383, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1457, 1200, 1200, 1458, 1200, 1200, 1200, 1200, 1200, 1383, 1383, 1383, 1383, 1383, 1200, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1253, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1383, 1383, 1383, 1383, 1383, 1253, 1383, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1383, 1383, 1383, 1383, 1200, 1383, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1401, 1200, 1383, 1383, 1383, 1383, 1383, 1200, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1253, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1383, 1383, 1383, 1383, 1383, 1253, 1383, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1383, 1383, 1383, 1383, 1200, 1383, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1459, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1383, 1383, 1383, 1383, 1383, 1200, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1253, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1383, 1383, 1383, 1383, 1383, 1253, 1383, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1383, 1383, 1383, 1383, 1200, 1383, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1415, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1383, 1383, 1383, 1383, 1383, 1200, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1253, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1383, 1383, 1383, 1383, 1383, 1253, 1383, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1383, 1383, 1383, 1383, 1200, 1383, 1200, 1200, 1200, 1200, 1460, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1461, 1200, 1200, 1200, 1200, 1200, 1383, 1383, 1383, 1383, 1383, 1200, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1253, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1383, 1383, 1383, 1383, 1383, 1253, 1383, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1383, 1383, 1383, 1383, 1200, 1383, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1462, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1383, 1383, 1383, 1383, 1383, 1200, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1253, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1383, 1383, 1383, 1383, 1383, 1253, 1383, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1383, 1383, 1383, 1383, 1200, 1383, 1200, 1200, 1200, 1200, 1200, 1401, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1383, 1383, 1383, 1383, 1383, 1200, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1253, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1383, 1383, 1383, 1383, 1383, 1253, 1383, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1383, 1383, 1383, 1383, 1200, 1383, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1463, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1383, 1383, 1383, 1383, 1383, 1200, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1253, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1383, 1383, 1383, 1383, 1383, 1253, 1383, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1383, 1383, 1383, 1383, 1200, 1383, 1200, 1200, 1200, 1200, 1464, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1383, 1383, 1383, 1383, 1383, 1200, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1253, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1383, 1383, 1383, 1383, 1383, 1253, 1383, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1383, 1383, 1383, 1383, 1200, 1383, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1450, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1383, 1383, 1383, 1383, 1383, 1200, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1253, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1383, 1383, 1383, 1383, 1383, 1253, 1383, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1383, 1383, 1383, 1383, 1200, 1383, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1465, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1466, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1383, 1383, 1383, 1383, 1383, 1200, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1253, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1383, 1383, 1383, 1383, 1383, 1253, 1383, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1383, 1383, 1383, 1383, 1200, 1383, 1200, 1200, 1200, 1200, 1412, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1383, 1383, 1383, 1383, 1383, 1200, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1253, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1383, 1383, 1383, 1383, 1383, 1253, 1383, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1383, 1383, 1383, 1383, 1200, 1383, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1441, 1200, 1200, 1200, 1200, 1200, 1383, 1383, 1383, 1383, 1383, 1200, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1253, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1383, 1383, 1383, 1383, 1383, 1253, 1383, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1383, 1383, 1383, 1383, 1200, 1383, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1467, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1383, 1383, 1383, 1383, 1383, 1200, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1253, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1383, 1383, 1383, 1383, 1383, 1253, 1383, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1383, 1383, 1383, 1383, 1200, 1383, 1200, 1200, 1200, 1468, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1469, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1470, 1200, 1200, 1200, 1200, 1200, 1200, 1383, 1383, 1383, 1383, 1383, 1200, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1253, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1383, 1383, 1383, 1383, 1383, 1253, 1383, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1383, 1383, 1383, 1383, 1200, 1383, 1200, 1200, 1200, 1200, 1471, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1383, 1383, 1383, 1383, 1383, 1200, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1253, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1383, 1383, 1383, 1383, 1383, 1253, 1383, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1383, 1383, 1383, 1383, 1200, 1383, 1200, 1200, 1200, 1200, 1200, 1407, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1383, 1383, 1383, 1383, 1383, 1200, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1253, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1383, 1383, 1383, 1383, 1383, 1253, 1383, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1383, 1383, 1383, 1383, 1200, 1383, 1200, 1200, 1200, 1200, 1472, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1383, 1383, 1383, 1383, 1383, 1200, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1253, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1383, 1383, 1383, 1383, 1383, 1253, 1383, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1383, 1383, 1383, 1383, 1200, 1383, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1473, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1383, 1383, 1383, 1383, 1383, 1200, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1253, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1383, 1383, 1383, 1383, 1383, 1253, 1383, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1383, 1383, 1383, 1383, 1200, 1383, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1442, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1383, 1383, 1383, 1383, 1383, 1200, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1253, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1383, 1383, 1383, 1383, 1383, 1253, 1383, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1383, 1383, 1383, 1383, 1200, 1383, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1474, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1383, 1383, 1383, 1383, 1383, 1200, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1253, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1383, 1383, 1383, 1383, 1383, 1253, 1383, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1383, 1383, 1383, 1383, 1200, 1383, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1442, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1383, 1383, 1383, 1383, 1383, 1200, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1253, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1383, 1383, 1383, 1383, 1383, 1253, 1383, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1383, 1383, 1383, 1383, 1200, 1383, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1475, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1383, 1383, 1383, 1383, 1383, 1200, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1253, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1383, 1383, 1383, 1383, 1383, 1253, 1383, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1383, 1383, 1383, 1383, 1200, 1383, 1200, 1200, 1200, 1200, 1412, 1200, 1200, 1200, 1476, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1383, 1383, 1383, 1383, 1383, 1200, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1253, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1383, 1383, 1383, 1383, 1383, 1253, 1383, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1383, 1383, 1383, 1383, 1200, 1383, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1477, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1383, 1383, 1383, 1383, 1383, 1200, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1253, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1383, 1383, 1383, 1383, 1383, 1253, 1383, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1383, 1383, 1383, 1383, 1200, 1383, 1200, 1200, 1200, 1200, 1442, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1383, 1383, 1383, 1383, 1383, 1200, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1253, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1383, 1383, 1383, 1383, 1383, 1253, 1383, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1383, 1383, 1383, 1383, 1200, 1383, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1478, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1383, 1383, 1383, 1383, 1383, 1200, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1253, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1383, 1383, 1383, 1383, 1383, 1253, 1383, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1383, 1383, 1383, 1383, 1200, 1383, 1200, 1200, 1200, 1200, 1479, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1383, 1383, 1383, 1383, 1383, 1200, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1253, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1383, 1383, 1383, 1383, 1383, 1253, 1383, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1383, 1383, 1383, 1383, 1200, 1383, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1480, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1383, 1383, 1383, 1383, 1383, 1200, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1253, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1383, 1383, 1383, 1383, 1383, 1253, 1383, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1383, 1383, 1383, 1383, 1200, 1383, 1200, 1200, 1200, 1450, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1383, 1383, 1383, 1383, 1383, 1200, 1481, 1269, 1259, 1259, 1259, 1259, 1259, 1259, 1259, 1259, 1259, 1259, 1259, 1259, 1259, 1259, 1259, 1259, 1259, 1259, 1259, 1259, 1259, 1259, 1259, 1259, 1259, 1259, 1259, 1259, 1259, 1259, 1259, 1259, 1259, 1259, 1259, 1259, 1259, 1259, 1259, 1259, 1259, 1259, 1259, 1259, 1259, 1259, 1259, 1259, 1259, 1259, 1259, 1259, 1259, 1259, 1259, 1259, 1259, 1259, 1259, 1259, 1259, 1259, 1209, 1259, 1482, 1484, 1483, 1484, 1484, 1484, 1483, 1483, 1483, 1483, 1483, 1483, 1483, 1483, 1483, 1483, 1483, 1483, 1483, 1483, 1483, 1483, 1483, 1483, 1484, 1483, 1483, 1485, 1483, 1483, 1486, 1483, 1483, 1483, 1483, 1483, 1483, 1483, 348, 1483, 1483, 1483, 1483, 1483, 1483, 1483, 1483, 1483, 1483, 1483, 1483, 1483, 1483, 1483, 1483, 1483, 1483, 1483, 1483, 1483, 1483, 1483, 1483, 1483, 1483, 1483, 1483, 1483, 1483, 1483, 1483, 1483, 1483, 1483, 1483, 1483, 1483, 1483, 1483, 1483, 1483, 1483, 1483, 1483, 1487, 1483, 344, 345, 344, 344, 344, 1488, 1488, 1488, 1488, 1488, 1488, 1488, 1488, 1488, 1488, 1488, 1488, 1488, 1488, 1488, 1488, 1488, 1488, 344, 1488, 1488, 346, 1488, 1488, 347, 1488, 1488, 1488, 1488, 1488, 1488, 1488, 348, 1488, 1488, 1488, 1488, 1488, 1488, 1488, 1488, 1488, 1488, 1488, 1488, 1488, 1488, 1488, 1488, 1488, 1488, 1488, 1488, 1488, 1488, 1488, 1488, 1488, 1488, 1488, 1488, 1488, 1488, 1488, 1488, 1488, 1488, 1488, 1488, 1488, 1488, 1488, 1488, 1488, 1488, 1488, 1488, 1488, 349, 1488, 351, 1489, 351, 351, 351, 1489, 1489, 1489, 1489, 1489, 1489, 1489, 1489, 1489, 1489, 1489, 1489, 1489, 1489, 1489, 1489, 1489, 1489, 351, 1489, 1489, 346, 1489, 1489, 1489, 1489, 1489, 1489, 1489, 1489, 1489, 1489, 1489, 1489, 1489, 1489, 1489, 1489, 1489, 1489, 1489, 1489, 1489, 1489, 1489, 1489, 1489, 1489, 1489, 1489, 1489, 1489, 1489, 1489, 1489, 1489, 1489, 1489, 1489, 1489, 1489, 1489, 1489, 1489, 1489, 1489, 1489, 1489, 1489, 1489, 1489, 1489, 1489, 1489, 1489, 1489, 1489, 1489, 349, 1489, 354, 353, 359, 1488, 357, 1488, 1491, 1490, 1490, 1490, 1490, 1490, 1490, 1490, 1490, 1490, 1490, 1490, 1490, 1490, 1490, 1490, 1490, 1490, 1490, 1490, 1490, 1490, 1490, 1490, 1490, 1490, 1490, 1490, 1490, 1490, 1490, 1490, 1490, 1490, 1490, 1490, 1490, 1490, 1490, 1490, 1490, 1490, 1490, 1490, 1490, 1490, 1490, 1490, 1490, 1490, 1490, 1492, 1490, 1491, 1490, 1491, 1490, 1490, 1490, 1490, 1490, 1490, 1490, 1490, 1490, 1490, 1490, 1490, 1490, 1490, 1490, 1490, 1490, 1490, 1490, 1490, 1490, 1490, 1490, 1490, 1490, 1490, 1490, 1490, 1490, 1490, 1490, 1490, 1490, 1490, 1490, 1490, 1490, 1490, 1490, 1490, 1490, 1490, 1490, 1490, 1490, 1490, 1490, 1490, 1490, 1490, 1490, 1490, 1490, 1490, 1490, 1490, 1490, 1490, 1490, 1490, 1490, 1490, 1490, 1490, 1490, 1490, 1490, 1490, 1490, 1490, 1490, 1490, 1490, 1490, 1490, 1490, 1490, 1490, 1490, 1490, 1490, 1490, 1490, 1490, 1490, 1490, 1490, 1490, 1490, 1490, 1494, 1490, 1491, 1490, 1490, 1490, 1490, 1490, 1490, 1490, 1490, 1490, 1490, 1490, 1490, 1490, 1490, 1490, 1490, 1490, 1490, 1490, 1490, 1490, 1490, 1490, 1490, 1490, 1490, 1490, 1490, 1490, 1490, 1490, 1490, 1490, 1490, 1490, 1490, 1490, 1490, 1490, 1490, 1490, 1490, 1490, 1490, 1490, 1490, 1490, 1490, 1490, 1490, 1490, 1490, 1490, 1490, 1490, 1490, 1490, 1490, 1490, 1490, 1490, 1490, 1490, 1490, 1490, 1490, 1490, 1490, 1490, 1490, 1490, 1490, 1490, 1490, 1490, 1490, 1490, 1490, 1490, 1490, 1490, 1490, 1490, 1490, 1490, 1490, 1490, 1490, 1490, 1490, 1490, 1490, 1490, 1490, 1490, 1490, 1490, 1490, 1490, 1495, 1490, 1491, 1490, 1490, 1490, 1490, 1490, 1490, 1490, 1490, 1490, 1490, 1490, 1490, 1490, 1490, 1490, 1490, 1490, 1490, 1490, 1490, 1490, 1490, 1490, 1490, 1490, 1490, 1490, 1490, 1490, 1490, 1490, 1490, 1490, 1490, 1490, 1490, 1490, 1490, 1490, 1490, 1490, 1490, 1490, 1490, 1490, 1490, 1490, 1490, 1490, 1490, 1490, 1490, 1490, 1490, 1490, 1490, 1490, 1490, 1490, 1490, 1490, 1490, 1490, 1490, 1490, 1490, 1490, 1490, 1490, 1490, 1490, 1490, 1490, 1490, 1490, 1490, 1490, 1490, 1490, 1490, 1490, 1490, 1490, 1490, 1490, 1490, 1490, 1490, 1490, 1496, 1490, 1498, 1496, 0]];
    $send(self, '_lex_indicies=', Opal.to_a($writer));
    $writer[$rb_minus($writer["length"], 1)];;
    (function(self, $parent_nesting) {
      var $nesting = [self].concat($parent_nesting);

      
      self.$attr_accessor("_lex_trans_targs");
      return self.$private("_lex_trans_targs", "_lex_trans_targs=");
    })(Opal.get_singleton_class(self), $nesting);
    
    $writer = [[185, 2, 3, 4, 191, 6, 7, 8, 9, 10, 185, 185, 194, 197, 194, 12, 198, 199, 14, 194, 206, 207, 210, 211, 217, 212, 213, 214, 19, 215, 216, 219, 221, 222, 223, 224, 225, 25, 18, 208, 209, 27, 248, 249, 251, 253, 251, 30, 254, 255, 32, 251, 262, 263, 266, 267, 273, 268, 269, 270, 37, 271, 272, 275, 277, 278, 279, 280, 281, 43, 36, 264, 265, 45, 304, 305, 312, 314, 312, 48, 315, 316, 50, 318, 321, 318, 52, 322, 323, 54, 329, 328, 0, 56, 330, 331, 58, 332, 333, 333, 333, 333, 446, 61, 62, 63, 446, 474, 64, 65, 474, 474, 478, 478, 69, 64, 70, 476, 477, 479, 480, 478, 474, 481, 482, 484, 66, 67, 485, 486, 68, 478, 71, 72, 77, 84, 488, 489, 70, 476, 477, 479, 480, 478, 474, 481, 482, 484, 66, 67, 485, 486, 68, 71, 72, 77, 84, 488, 489, 487, 73, 74, 75, 76, 78, 79, 82, 80, 81, 83, 85, 86, 474, 88, 89, 90, 92, 95, 93, 94, 96, 98, 505, 505, 505, 506, 100, 508, 101, 509, 102, 506, 100, 508, 101, 509, 543, 103, 543, 104, 105, 103, 543, 104, 543, 543, 543, 108, 109, 110, 111, 554, 543, 543, 559, 543, 114, 115, 116, 543, 119, 114, 115, 116, 543, 119, 117, 117, 115, 116, 565, 118, 117, 117, 115, 116, 565, 118, 115, 543, 581, 543, 121, 582, 588, 125, 597, 598, 130, 131, 125, 126, 596, 126, 596, 543, 127, 128, 129, 599, 132, 543, 613, 614, 617, 618, 624, 619, 620, 621, 137, 622, 623, 626, 628, 629, 630, 631, 632, 143, 136, 615, 616, 145, 668, 669, 147, 545, 106, 547, 149, 150, 671, 773, 152, 153, 154, 773, 781, 781, 781, 157, 803, 802, 781, 805, 807, 781, 162, 163, 164, 811, 781, 166, 167, 822, 791, 844, 170, 171, 172, 176, 177, 170, 171, 172, 176, 177, 173, 173, 171, 172, 174, 175, 173, 173, 171, 172, 174, 175, 892, 171, 781, 961, 178, 963, 180, 184, 961, 182, 961, 179, 961, 181, 963, 181, 963, 183, 963, 961, 185, 185, 186, 187, 188, 190, 192, 193, 185, 185, 185, 189, 185, 189, 185, 1, 185, 185, 185, 5, 194, 194, 195, 194, 196, 200, 194, 194, 11, 13, 194, 194, 194, 194, 201, 202, 203, 15, 21, 26, 226, 28, 194, 194, 194, 204, 205, 194, 16, 194, 194, 194, 17, 194, 194, 194, 20, 218, 220, 22, 194, 194, 23, 24, 194, 227, 231, 228, 229, 230, 194, 194, 232, 233, 236, 238, 247, 234, 235, 194, 237, 239, 241, 240, 194, 242, 243, 244, 245, 246, 194, 194, 194, 250, 251, 251, 251, 252, 256, 251, 29, 31, 251, 251, 251, 251, 257, 258, 259, 33, 39, 44, 282, 46, 251, 251, 251, 260, 261, 251, 34, 251, 251, 251, 35, 251, 251, 251, 38, 274, 276, 40, 251, 251, 41, 42, 251, 283, 287, 284, 285, 286, 251, 251, 288, 289, 292, 294, 303, 290, 291, 251, 293, 295, 297, 296, 251, 298, 299, 300, 301, 302, 251, 251, 251, 306, 307, 307, 308, 307, 309, 307, 307, 307, 310, 310, 310, 311, 310, 310, 310, 312, 312, 312, 313, 312, 47, 49, 312, 312, 312, 317, 317, 317, 318, 318, 319, 318, 320, 318, 318, 51, 53, 318, 318, 318, 324, 324, 325, 324, 324, 326, 327, 326, 55, 57, 328, 328, 328, 334, 333, 333, 335, 336, 337, 338, 340, 343, 344, 345, 346, 333, 347, 348, 350, 352, 353, 354, 358, 360, 361, 362, 378, 383, 390, 395, 402, 409, 412, 413, 417, 411, 421, 429, 433, 435, 440, 442, 445, 333, 333, 333, 333, 333, 333, 339, 333, 339, 333, 341, 59, 342, 333, 60, 333, 333, 349, 351, 333, 355, 356, 357, 353, 359, 333, 363, 364, 373, 376, 365, 366, 367, 368, 369, 370, 371, 372, 334, 374, 375, 377, 379, 382, 380, 381, 384, 387, 385, 386, 388, 389, 391, 393, 392, 394, 396, 397, 333, 398, 399, 400, 401, 333, 403, 406, 404, 405, 407, 408, 410, 414, 415, 416, 418, 420, 419, 422, 423, 424, 426, 425, 427, 428, 430, 431, 432, 434, 436, 437, 438, 439, 441, 443, 444, 447, 446, 446, 448, 449, 451, 446, 446, 446, 450, 446, 450, 452, 446, 454, 453, 453, 457, 458, 459, 460, 453, 462, 463, 464, 465, 467, 469, 470, 471, 472, 473, 453, 455, 453, 456, 453, 453, 453, 453, 453, 461, 453, 461, 466, 453, 468, 453, 474, 474, 475, 490, 491, 477, 493, 494, 481, 495, 496, 497, 498, 499, 501, 502, 503, 504, 474, 474, 474, 474, 474, 474, 478, 483, 474, 474, 474, 474, 474, 474, 474, 474, 474, 492, 474, 492, 474, 474, 474, 474, 500, 474, 87, 91, 97, 505, 507, 510, 99, 505, 505, 506, 511, 511, 512, 513, 515, 517, 518, 511, 511, 514, 511, 514, 511, 516, 511, 511, 511, 520, 519, 519, 521, 522, 523, 525, 527, 528, 533, 540, 519, 519, 519, 519, 524, 519, 524, 519, 526, 519, 519, 520, 529, 530, 531, 532, 534, 535, 538, 536, 537, 539, 541, 542, 544, 543, 552, 553, 555, 556, 558, 560, 561, 562, 564, 566, 567, 569, 570, 595, 601, 602, 603, 671, 672, 673, 674, 675, 563, 677, 694, 699, 706, 711, 713, 719, 722, 723, 727, 721, 731, 742, 746, 749, 757, 761, 764, 765, 543, 103, 104, 543, 106, 546, 543, 543, 548, 550, 551, 543, 549, 543, 543, 543, 543, 543, 107, 543, 543, 543, 543, 543, 557, 543, 557, 543, 543, 112, 543, 543, 113, 543, 543, 563, 543, 568, 543, 543, 543, 571, 580, 543, 120, 583, 584, 585, 543, 586, 122, 589, 590, 123, 593, 594, 543, 572, 574, 543, 573, 543, 543, 575, 578, 579, 543, 576, 577, 543, 543, 543, 543, 543, 543, 587, 543, 581, 591, 592, 543, 591, 543, 581, 591, 124, 600, 543, 543, 543, 604, 543, 543, 543, 605, 607, 543, 606, 543, 606, 543, 608, 609, 610, 133, 139, 144, 633, 146, 543, 543, 543, 611, 612, 543, 134, 543, 543, 543, 135, 543, 543, 543, 138, 625, 627, 140, 543, 543, 141, 142, 543, 634, 638, 635, 636, 637, 543, 543, 639, 640, 643, 654, 667, 641, 642, 543, 644, 645, 646, 648, 647, 543, 649, 650, 651, 652, 653, 655, 662, 656, 657, 658, 659, 660, 661, 663, 664, 665, 666, 543, 543, 543, 670, 148, 151, 543, 676, 678, 679, 689, 692, 680, 681, 682, 683, 684, 685, 686, 687, 688, 690, 691, 693, 695, 698, 696, 697, 700, 703, 701, 702, 704, 705, 707, 709, 708, 710, 712, 714, 716, 715, 717, 718, 720, 688, 724, 725, 726, 728, 730, 729, 732, 733, 734, 739, 735, 736, 737, 543, 544, 545, 106, 738, 550, 740, 741, 743, 744, 745, 747, 748, 750, 751, 752, 755, 753, 754, 756, 758, 759, 760, 762, 763, 543, 563, 766, 766, 767, 768, 769, 771, 766, 766, 766, 770, 766, 770, 766, 772, 766, 774, 773, 773, 775, 776, 773, 777, 779, 773, 773, 773, 773, 778, 773, 778, 780, 773, 782, 781, 781, 785, 786, 787, 781, 788, 790, 793, 794, 795, 796, 797, 781, 798, 799, 804, 832, 836, 781, 837, 839, 841, 781, 842, 843, 845, 849, 851, 852, 854, 855, 873, 878, 885, 893, 900, 907, 912, 913, 917, 911, 922, 932, 938, 941, 950, 954, 958, 959, 960, 793, 783, 781, 784, 781, 781, 781, 781, 781, 781, 789, 781, 789, 781, 155, 792, 781, 781, 781, 781, 781, 781, 781, 781, 781, 800, 781, 801, 781, 781, 156, 158, 781, 159, 813, 824, 827, 806, 828, 829, 814, 818, 820, 781, 806, 159, 808, 810, 160, 781, 808, 781, 809, 781, 781, 161, 812, 781, 781, 815, 817, 781, 815, 816, 818, 820, 817, 781, 819, 781, 781, 821, 823, 781, 165, 781, 781, 781, 825, 817, 818, 820, 825, 826, 781, 815, 817, 818, 820, 781, 815, 817, 818, 820, 781, 830, 817, 818, 820, 830, 831, 781, 159, 832, 806, 833, 818, 820, 834, 817, 159, 834, 806, 835, 838, 840, 781, 168, 169, 781, 781, 846, 847, 848, 843, 850, 781, 781, 853, 781, 781, 781, 856, 857, 866, 871, 858, 859, 860, 861, 862, 863, 864, 865, 782, 867, 868, 869, 870, 782, 872, 874, 877, 875, 876, 782, 782, 879, 882, 880, 881, 883, 884, 782, 886, 888, 887, 889, 890, 891, 781, 781, 894, 782, 895, 781, 896, 897, 898, 899, 783, 901, 904, 902, 903, 905, 906, 908, 909, 910, 782, 914, 915, 916, 918, 920, 921, 919, 782, 923, 924, 925, 928, 926, 927, 929, 930, 931, 933, 935, 934, 936, 937, 939, 940, 942, 943, 945, 948, 944, 946, 947, 949, 951, 952, 953, 955, 956, 957, 781, 781, 961, 962, 964, 965, 966, 961, 961, 968, 967, 969, 967, 970, 971, 972, 967, 967]];
    $send(self, '_lex_trans_targs=', Opal.to_a($writer));
    $writer[$rb_minus($writer["length"], 1)];;
    (function(self, $parent_nesting) {
      var $nesting = [self].concat($parent_nesting);

      
      self.$attr_accessor("_lex_trans_actions");
      return self.$private("_lex_trans_actions", "_lex_trans_actions=");
    })(Opal.get_singleton_class(self), $nesting);
    
    $writer = [[1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 3, 4, 0, 5, 0, 0, 0, 0, 6, 0, 7, 0, 8, 0, 7, 0, 0, 0, 0, 8, 7, 0, 8, 0, 7, 7, 0, 0, 0, 0, 0, 0, 0, 9, 0, 10, 0, 0, 0, 0, 11, 0, 7, 0, 8, 0, 7, 0, 0, 0, 0, 8, 7, 0, 8, 0, 7, 7, 0, 0, 0, 0, 0, 0, 0, 12, 0, 13, 0, 0, 0, 0, 14, 0, 15, 0, 0, 0, 0, 0, 16, 0, 0, 0, 0, 0, 0, 17, 18, 19, 20, 21, 0, 0, 0, 22, 23, 0, 0, 24, 25, 26, 27, 28, 29, 29, 30, 31, 29, 32, 31, 33, 31, 29, 29, 30, 29, 34, 29, 29, 35, 29, 29, 29, 29, 29, 29, 0, 36, 37, 0, 38, 37, 39, 37, 0, 0, 36, 0, 40, 0, 0, 0, 0, 0, 0, 0, 0, 27, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 41, 0, 0, 0, 0, 0, 0, 0, 0, 0, 42, 43, 44, 45, 0, 0, 0, 45, 28, 46, 29, 29, 29, 46, 47, 0, 48, 0, 28, 29, 49, 29, 50, 51, 52, 0, 0, 0, 0, 0, 53, 54, 0, 55, 0, 28, 0, 56, 0, 29, 57, 29, 58, 29, 59, 60, 61, 60, 62, 60, 0, 63, 64, 63, 65, 63, 66, 67, 0, 68, 0, 0, 0, 0, 69, 69, 0, 0, 70, 70, 71, 0, 28, 72, 0, 0, 0, 69, 0, 73, 0, 7, 0, 8, 0, 7, 0, 0, 0, 0, 8, 7, 0, 8, 0, 7, 7, 0, 0, 0, 0, 0, 0, 0, 0, 74, 0, 0, 0, 0, 74, 75, 0, 0, 0, 76, 77, 78, 79, 0, 7, 7, 80, 81, 81, 82, 0, 0, 0, 0, 83, 0, 0, 0, 0, 0, 0, 28, 0, 0, 0, 29, 57, 29, 29, 29, 59, 60, 61, 60, 60, 60, 0, 63, 64, 63, 63, 63, 84, 66, 85, 86, 0, 87, 0, 88, 89, 0, 90, 0, 91, 59, 92, 0, 93, 28, 94, 95, 98, 99, 0, 28, 0, 7, 0, 7, 100, 101, 102, 59, 103, 0, 104, 0, 105, 106, 107, 0, 108, 109, 0, 110, 7, 7, 111, 112, 0, 0, 113, 114, 115, 116, 117, 117, 117, 117, 117, 117, 117, 117, 118, 119, 120, 0, 0, 121, 0, 122, 123, 124, 0, 125, 126, 127, 0, 7, 0, 0, 128, 129, 0, 28, 130, 0, 0, 0, 0, 0, 131, 132, 0, 0, 0, 0, 0, 0, 0, 133, 0, 0, 0, 0, 134, 0, 0, 0, 0, 0, 135, 136, 137, 0, 138, 139, 140, 7, 7, 141, 0, 0, 142, 143, 144, 145, 117, 117, 117, 117, 117, 117, 117, 117, 146, 147, 148, 0, 0, 149, 0, 150, 151, 152, 0, 153, 154, 155, 0, 7, 0, 0, 156, 157, 0, 28, 158, 0, 0, 0, 0, 0, 159, 160, 0, 0, 0, 0, 0, 0, 0, 161, 0, 0, 0, 0, 162, 0, 0, 0, 0, 0, 163, 164, 165, 0, 166, 167, 0, 168, 0, 169, 170, 171, 172, 173, 174, 0, 175, 176, 177, 178, 179, 180, 7, 181, 0, 0, 182, 183, 184, 185, 186, 187, 188, 189, 0, 190, 7, 191, 192, 0, 0, 193, 194, 195, 196, 197, 0, 198, 199, 200, 0, 201, 0, 0, 202, 203, 204, 205, 206, 207, 0, 28, 0, 0, 7, 7, 0, 0, 0, 208, 0, 0, 0, 0, 209, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 210, 211, 212, 213, 214, 215, 59, 216, 0, 217, 0, 0, 0, 218, 0, 219, 220, 0, 0, 221, 0, 0, 0, 222, 0, 223, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 222, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 224, 0, 0, 0, 0, 225, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 226, 227, 0, 0, 0, 228, 229, 230, 59, 231, 0, 28, 232, 0, 233, 234, 0, 28, 0, 0, 235, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 236, 0, 237, 0, 238, 239, 240, 241, 242, 59, 243, 0, 0, 244, 0, 245, 246, 247, 248, 28, 0, 27, 0, 0, 27, 0, 0, 0, 0, 0, 0, 7, 7, 7, 249, 250, 251, 252, 253, 254, 255, 0, 256, 257, 258, 259, 260, 261, 262, 263, 264, 59, 265, 0, 266, 267, 268, 269, 270, 271, 0, 0, 0, 272, 7, 7, 0, 273, 274, 275, 276, 277, 0, 0, 0, 0, 0, 278, 279, 59, 280, 0, 281, 28, 282, 283, 284, 285, 286, 287, 0, 28, 0, 0, 0, 0, 0, 0, 288, 289, 290, 291, 59, 292, 0, 293, 28, 294, 295, 296, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 297, 298, 0, 8, 0, 0, 7, 299, 0, 0, 299, 299, 0, 0, 7, 300, 0, 300, 0, 300, 300, 300, 0, 0, 300, 297, 297, 297, 297, 297, 297, 297, 297, 297, 297, 297, 297, 297, 297, 297, 297, 297, 0, 0, 301, 302, 302, 303, 304, 0, 305, 306, 0, 74, 0, 307, 0, 308, 309, 310, 311, 312, 29, 313, 314, 315, 316, 317, 59, 318, 0, 319, 320, 0, 321, 322, 0, 323, 324, 299, 325, 0, 326, 327, 328, 0, 0, 329, 0, 0, 0, 0, 330, 0, 0, 0, 0, 0, 0, 0, 331, 0, 0, 332, 0, 333, 334, 0, 0, 0, 335, 0, 0, 336, 337, 338, 339, 340, 341, 0, 342, 343, 343, 0, 344, 0, 345, 346, 346, 0, 0, 347, 348, 349, 0, 350, 351, 352, 0, 7, 353, 354, 355, 0, 356, 117, 117, 117, 117, 117, 117, 117, 117, 357, 358, 359, 0, 0, 360, 0, 361, 362, 363, 0, 364, 365, 366, 0, 7, 0, 0, 367, 368, 0, 28, 369, 0, 0, 0, 0, 0, 370, 371, 0, 0, 0, 0, 0, 0, 0, 372, 0, 0, 0, 0, 0, 373, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 374, 375, 376, 0, 0, 0, 377, 28, 297, 297, 297, 297, 297, 297, 297, 297, 297, 297, 297, 297, 74, 297, 297, 297, 297, 297, 297, 297, 297, 297, 297, 297, 297, 297, 297, 297, 297, 297, 297, 297, 297, 297, 297, 297, 297, 378, 297, 297, 297, 297, 297, 297, 297, 297, 297, 297, 297, 297, 379, 380, 381, 382, 383, 383, 379, 297, 297, 297, 297, 297, 297, 297, 297, 297, 297, 297, 297, 297, 297, 297, 297, 297, 297, 297, 384, 385, 386, 387, 0, 28, 0, 0, 388, 389, 390, 59, 391, 0, 392, 28, 393, 7, 394, 395, 0, 28, 396, 0, 0, 397, 398, 399, 400, 59, 401, 0, 28, 402, 403, 404, 405, 0, 28, 0, 406, 0, 7, 407, 0, 0, 0, 0, 408, 0, 0, 409, 409, 0, 410, 0, 0, 0, 411, 7, 412, 412, 412, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 413, 414, 415, 0, 416, 417, 418, 419, 420, 421, 59, 422, 0, 423, 0, 0, 424, 425, 426, 427, 428, 429, 430, 431, 432, 0, 433, 0, 434, 435, 0, 0, 436, 437, 438, 0, 0, 439, 0, 0, 438, 440, 440, 441, 442, 0, 443, 444, 0, 445, 446, 447, 0, 448, 449, 0, 0, 450, 451, 438, 438, 452, 0, 0, 453, 453, 0, 454, 0, 455, 456, 7, 0, 457, 0, 458, 459, 460, 461, 461, 462, 462, 0, 0, 463, 464, 464, 465, 465, 466, 467, 467, 468, 468, 469, 470, 470, 471, 471, 0, 0, 472, 473, 474, 475, 476, 477, 477, 474, 476, 478, 409, 479, 0, 0, 0, 480, 0, 0, 481, 482, 412, 412, 412, 483, 412, 484, 485, 28, 486, 487, 488, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 489, 0, 0, 0, 0, 483, 0, 0, 0, 0, 0, 490, 491, 0, 0, 0, 0, 0, 0, 492, 0, 0, 0, 0, 0, 491, 493, 494, 0, 495, 0, 496, 0, 0, 0, 0, 497, 0, 0, 0, 0, 0, 0, 0, 0, 0, 498, 0, 0, 0, 0, 0, 0, 0, 497, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 499, 500, 501, 502, 502, 88, 502, 503, 504, 0, 505, 0, 506, 0, 0, 0, 507, 508]];
    $send(self, '_lex_trans_actions=', Opal.to_a($writer));
    $writer[$rb_minus($writer["length"], 1)];;
    (function(self, $parent_nesting) {
      var $nesting = [self].concat($parent_nesting);

      
      self.$attr_accessor("_lex_to_state_actions");
      return self.$private("_lex_to_state_actions", "_lex_to_state_actions=");
    })(Opal.get_singleton_class(self), $nesting);
    
    $writer = [[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 96, 0, 0, 0, 0, 0, 0, 0, 0, 96, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 96, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 96, 0, 0, 96, 0, 96, 0, 0, 0, 0, 96, 96, 0, 0, 0, 0, 0, 96, 0, 96, 0, 96, 0, 0, 0, 0, 96, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 96, 0, 0, 0, 0, 0, 0, 96, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 96, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 96, 0, 0, 0, 0, 0, 96, 0, 0, 0, 0, 0, 0, 0, 96, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 96, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 96, 0, 0, 0, 0, 0, 0, 96, 0, 0, 0, 0, 0, 0, 0, 96, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 96, 0, 0, 0, 0, 0, 96, 0, 0, 0, 0, 0]];
    $send(self, '_lex_to_state_actions=', Opal.to_a($writer));
    $writer[$rb_minus($writer["length"], 1)];;
    (function(self, $parent_nesting) {
      var $nesting = [self].concat($parent_nesting);

      
      self.$attr_accessor("_lex_from_state_actions");
      return self.$private("_lex_from_state_actions", "_lex_from_state_actions=");
    })(Opal.get_singleton_class(self), $nesting);
    
    $writer
    $send(self, '_lex_from_state_actions=', Opal.to_a($writer));
    $writer[$rb_minus($writer["length"], 1)];;
    (function(self, $parent_nesting) {
      var $nesting = [self].concat($parent_nesting);

      
      self.$attr_accessor("_lex_eof_trans");
      return self.$private("_lex_eof_trans", "_lex_eof_trans=");
    })(Opal.get_singleton_class(self), $nesting);
    
    $writer = [[0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 13, 13, 13, 13, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 45, 45, 45, 45, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 77, 77, 77, 77, 84, 84, 84, 84, 0, 0, 0, 0, 99, 101, 103, 103, 103, 108, 108, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 183, 185, 185, 185, 197, 197, 197, 205, 207, 207, 207, 207, 207, 213, 205, 205, 205, 205, 205, 205, 205, 240, 240, 240, 240, 240, 240, 205, 256, 205, 256, 240, 240, 205, 262, 262, 262, 262, 262, 262, 262, 262, 262, 262, 262, 262, 262, 262, 205, 240, 240, 240, 240, 294, 294, 294, 299, 301, 301, 301, 305, 305, 308, 308, 308, 308, 313, 313, 313, 299, 305, 305, 305, 305, 305, 305, 305, 305, 305, 344, 351, 353, 353, 353, 353, 344, 0, 369, 370, 371, 373, 375, 377, 375, 375, 0, 387, 388, 392, 392, 393, 394, 403, 404, 405, 405, 405, 408, 408, 410, 411, 412, 412, 412, 414, 415, 416, 416, 412, 408, 408, 421, 422, 422, 422, 422, 422, 425, 425, 425, 425, 431, 432, 432, 432, 432, 440, 432, 432, 432, 432, 445, 432, 432, 432, 432, 432, 432, 451, 452, 453, 453, 0, 460, 464, 464, 465, 466, 475, 476, 477, 477, 477, 480, 480, 482, 483, 484, 484, 484, 486, 487, 488, 488, 484, 480, 480, 493, 494, 494, 494, 494, 494, 497, 497, 497, 497, 503, 504, 504, 504, 504, 512, 504, 504, 504, 504, 517, 504, 504, 504, 504, 504, 504, 523, 524, 525, 525, 0, 532, 533, 0, 539, 0, 546, 550, 550, 551, 0, 0, 560, 561, 565, 565, 566, 0, 571, 0, 574, 0, 577, 577, 578, 579, 0, 620, 622, 623, 624, 625, 627, 629, 633, 633, 624, 624, 624, 624, 635, 624, 624, 629, 624, 624, 620, 639, 639, 639, 639, 639, 639, 629, 629, 645, 645, 645, 645, 645, 645, 645, 645, 645, 645, 645, 645, 645, 645, 645, 645, 645, 645, 645, 645, 645, 645, 645, 645, 645, 645, 645, 645, 645, 645, 645, 645, 645, 645, 645, 678, 645, 645, 645, 645, 645, 645, 645, 645, 645, 645, 645, 645, 645, 645, 645, 645, 645, 645, 645, 645, 645, 645, 645, 645, 645, 645, 645, 645, 645, 645, 645, 645, 645, 645, 645, 645, 645, 645, 645, 645, 645, 645, 645, 645, 645, 645, 645, 624, 0, 721, 722, 723, 725, 721, 728, 0, 747, 749, 751, 752, 753, 754, 755, 757, 754, 754, 754, 754, 754, 760, 754, 754, 762, 760, 760, 754, 0, 781, 782, 108, 108, 785, 786, 108, 782, 782, 789, 791, 794, 782, 795, 782, 796, 797, 799, 801, 782, 789, 802, 802, 791, 802, 806, 802, 802, 802, 802, 0, 183, 814, 815, 814, 814, 0, 824, 825, 827, 829, 831, 829, 833, 0, 845, 846, 847, 848, 850, 852, 854, 855, 855, 855, 855, 855, 855, 855, 855, 855, 855, 855, 855, 855, 855, 855, 855, 0, 913, 916, 919, 920, 924, 926, 927, 928, 929, 930, 932, 935, 936, 938, 940, 943, 944, 946, 947, 205, 944, 949, 944, 935, 951, 935, 935, 969, 972, 974, 975, 979, 982, 983, 984, 985, 969, 969, 969, 969, 969, 969, 969, 969, 969, 969, 989, 993, 995, 969, 969, 935, 1000, 1001, 1001, 1001, 935, 935, 935, 1002, 1009, 1009, 1011, 1013, 1022, 1023, 1024, 1024, 1024, 1027, 1027, 1029, 1030, 1031, 1031, 1031, 1033, 1034, 1035, 1035, 1031, 1027, 1027, 1040, 1041, 1041, 1041, 1041, 1041, 1044, 1044, 1044, 1044, 1050, 1051, 1051, 1051, 1051, 1059, 1051, 1051, 1051, 1051, 1065, 1051, 1051, 1051, 1051, 1051, 1051, 1051, 1051, 1051, 1051, 1051, 1051, 1051, 1051, 1051, 1051, 1051, 1051, 1051, 1083, 1084, 1085, 1085, 205, 935, 935, 1089, 935, 930, 913, 913, 913, 913, 913, 913, 913, 913, 913, 913, 913, 205, 913, 913, 913, 913, 913, 913, 913, 913, 913, 913, 913, 913, 913, 913, 913, 913, 913, 913, 913, 913, 913, 913, 913, 913, 913, 913, 913, 913, 913, 913, 913, 913, 913, 913, 913, 913, 913, 913, 913, 913, 913, 913, 913, 913, 913, 913, 913, 913, 1142, 920, 913, 913, 913, 913, 913, 913, 913, 913, 913, 913, 913, 913, 913, 913, 913, 913, 913, 913, 913, 913, 913, 913, 913, 913, 913, 1167, 935, 0, 1175, 1176, 1177, 1179, 1181, 1183, 0, 1192, 1193, 1194, 1195, 1197, 1192, 1200, 0, 305, 1255, 1257, 1258, 1259, 1260, 1262, 1264, 1266, 1269, 1269, 305, 1271, 1273, 1274, 1275, 1271, 1277, 1279, 1279, 1282, 1282, 1285, 1296, 305, 1302, 1304, 1306, 1307, 1310, 1311, 1285, 1285, 1314, 1314, 1314, 1320, 1322, 1323, 1326, 1328, 1329, 1330, 1314, 1314, 1337, 1342, 1347, 1314, 1314, 1354, 1354, 1314, 1314, 1279, 1271, 1271, 1279, 1271, 1271, 1266, 305, 1372, 1373, 1373, 1373, 1373, 1373, 1373, 1379, 1266, 1382, 1383, 1384, 1384, 1384, 1384, 1384, 1384, 1384, 1384, 1384, 1384, 1384, 1384, 1384, 1384, 1384, 1384, 1384, 1384, 1384, 1384, 1384, 1384, 1384, 1384, 1384, 1384, 1384, 1384, 1384, 1384, 1384, 1384, 1384, 1384, 1384, 1384, 1423, 1424, 1384, 1384, 1428, 1384, 1384, 1384, 1384, 1384, 1384, 1384, 1384, 1384, 1384, 1384, 1384, 1384, 1384, 1384, 1384, 1384, 1384, 1384, 1384, 1384, 1384, 1384, 1384, 1384, 1384, 1384, 1384, 1384, 1384, 1384, 1384, 1384, 1384, 1384, 1384, 1384, 1384, 1384, 1384, 1384, 1384, 1384, 1384, 1384, 1384, 1384, 1384, 1384, 1384, 1384, 1384, 1384, 1384, 1384, 1384, 1384, 1384, 1384, 1384, 1384, 1384, 1482, 1260, 1483, 0, 1489, 1490, 1489, 1489, 1489, 0, 1494, 1494, 1494, 1494, 1498]];
    $send(self, '_lex_eof_trans=', Opal.to_a($writer));
    $writer[$rb_minus($writer["length"], 1)];;
    (function(self, $parent_nesting) {
      var $nesting = [self].concat($parent_nesting);

      return self.$attr_accessor("lex_start")
    })(Opal.get_singleton_class(self), $nesting);
    
    $writer = [185];
    $send(self, 'lex_start=', Opal.to_a($writer));
    $writer[$rb_minus($writer["length"], 1)];;
    (function(self, $parent_nesting) {
      var $nesting = [self].concat($parent_nesting);

      return self.$attr_accessor("lex_error")
    })(Opal.get_singleton_class(self), $nesting);
    
    $writer = [0];
    $send(self, 'lex_error=', Opal.to_a($writer));
    $writer[$rb_minus($writer["length"], 1)];;
    (function(self, $parent_nesting) {
      var $nesting = [self].concat($parent_nesting);

      return self.$attr_accessor("lex_en_interp_words")
    })(Opal.get_singleton_class(self), $nesting);
    
    $writer = [194];
    $send(self, 'lex_en_interp_words=', Opal.to_a($writer));
    $writer[$rb_minus($writer["length"], 1)];;
    (function(self, $parent_nesting) {
      var $nesting = [self].concat($parent_nesting);

      return self.$attr_accessor("lex_en_interp_string")
    })(Opal.get_singleton_class(self), $nesting);
    
    $writer = [251];
    $send(self, 'lex_en_interp_string=', Opal.to_a($writer));
    $writer[$rb_minus($writer["length"], 1)];;
    (function(self, $parent_nesting) {
      var $nesting = [self].concat($parent_nesting);

      return self.$attr_accessor("lex_en_plain_words")
    })(Opal.get_singleton_class(self), $nesting);
    
    $writer = [307];
    $send(self, 'lex_en_plain_words=', Opal.to_a($writer));
    $writer[$rb_minus($writer["length"], 1)];;
    (function(self, $parent_nesting) {
      var $nesting = [self].concat($parent_nesting);

      return self.$attr_accessor("lex_en_plain_string")
    })(Opal.get_singleton_class(self), $nesting);
    
    $writer = [310];
    $send(self, 'lex_en_plain_string=', Opal.to_a($writer));
    $writer[$rb_minus($writer["length"], 1)];;
    (function(self, $parent_nesting) {
      var $nesting = [self].concat($parent_nesting);

      return self.$attr_accessor("lex_en_interp_backslash_delimited")
    })(Opal.get_singleton_class(self), $nesting);
    
    $writer = [312];
    $send(self, 'lex_en_interp_backslash_delimited=', Opal.to_a($writer));
    $writer[$rb_minus($writer["length"], 1)];;
    (function(self, $parent_nesting) {
      var $nesting = [self].concat($parent_nesting);

      return self.$attr_accessor("lex_en_plain_backslash_delimited")
    })(Opal.get_singleton_class(self), $nesting);
    
    $writer = [317];
    $send(self, 'lex_en_plain_backslash_delimited=', Opal.to_a($writer));
    $writer[$rb_minus($writer["length"], 1)];;
    (function(self, $parent_nesting) {
      var $nesting = [self].concat($parent_nesting);

      return self.$attr_accessor("lex_en_interp_backslash_delimited_words")
    })(Opal.get_singleton_class(self), $nesting);
    
    $writer = [318];
    $send(self, 'lex_en_interp_backslash_delimited_words=', Opal.to_a($writer));
    $writer[$rb_minus($writer["length"], 1)];;
    (function(self, $parent_nesting) {
      var $nesting = [self].concat($parent_nesting);

      return self.$attr_accessor("lex_en_plain_backslash_delimited_words")
    })(Opal.get_singleton_class(self), $nesting);
    
    $writer = [324];
    $send(self, 'lex_en_plain_backslash_delimited_words=', Opal.to_a($writer));
    $writer[$rb_minus($writer["length"], 1)];;
    (function(self, $parent_nesting) {
      var $nesting = [self].concat($parent_nesting);

      return self.$attr_accessor("lex_en_regexp_modifiers")
    })(Opal.get_singleton_class(self), $nesting);
    
    $writer = [326];
    $send(self, 'lex_en_regexp_modifiers=', Opal.to_a($writer));
    $writer[$rb_minus($writer["length"], 1)];;
    (function(self, $parent_nesting) {
      var $nesting = [self].concat($parent_nesting);

      return self.$attr_accessor("lex_en_expr_variable")
    })(Opal.get_singleton_class(self), $nesting);
    
    $writer = [328];
    $send(self, 'lex_en_expr_variable=', Opal.to_a($writer));
    $writer[$rb_minus($writer["length"], 1)];;
    (function(self, $parent_nesting) {
      var $nesting = [self].concat($parent_nesting);

      return self.$attr_accessor("lex_en_expr_fname")
    })(Opal.get_singleton_class(self), $nesting);
    
    $writer = [333];
    $send(self, 'lex_en_expr_fname=', Opal.to_a($writer));
    $writer[$rb_minus($writer["length"], 1)];;
    (function(self, $parent_nesting) {
      var $nesting = [self].concat($parent_nesting);

      return self.$attr_accessor("lex_en_expr_endfn")
    })(Opal.get_singleton_class(self), $nesting);
    
    $writer = [446];
    $send(self, 'lex_en_expr_endfn=', Opal.to_a($writer));
    $writer[$rb_minus($writer["length"], 1)];;
    (function(self, $parent_nesting) {
      var $nesting = [self].concat($parent_nesting);

      return self.$attr_accessor("lex_en_expr_dot")
    })(Opal.get_singleton_class(self), $nesting);
    
    $writer = [453];
    $send(self, 'lex_en_expr_dot=', Opal.to_a($writer));
    $writer[$rb_minus($writer["length"], 1)];;
    (function(self, $parent_nesting) {
      var $nesting = [self].concat($parent_nesting);

      return self.$attr_accessor("lex_en_expr_arg")
    })(Opal.get_singleton_class(self), $nesting);
    
    $writer = [474];
    $send(self, 'lex_en_expr_arg=', Opal.to_a($writer));
    $writer[$rb_minus($writer["length"], 1)];;
    (function(self, $parent_nesting) {
      var $nesting = [self].concat($parent_nesting);

      return self.$attr_accessor("lex_en_expr_cmdarg")
    })(Opal.get_singleton_class(self), $nesting);
    
    $writer = [505];
    $send(self, 'lex_en_expr_cmdarg=', Opal.to_a($writer));
    $writer[$rb_minus($writer["length"], 1)];;
    (function(self, $parent_nesting) {
      var $nesting = [self].concat($parent_nesting);

      return self.$attr_accessor("lex_en_expr_endarg")
    })(Opal.get_singleton_class(self), $nesting);
    
    $writer = [511];
    $send(self, 'lex_en_expr_endarg=', Opal.to_a($writer));
    $writer[$rb_minus($writer["length"], 1)];;
    (function(self, $parent_nesting) {
      var $nesting = [self].concat($parent_nesting);

      return self.$attr_accessor("lex_en_expr_mid")
    })(Opal.get_singleton_class(self), $nesting);
    
    $writer = [519];
    $send(self, 'lex_en_expr_mid=', Opal.to_a($writer));
    $writer[$rb_minus($writer["length"], 1)];;
    (function(self, $parent_nesting) {
      var $nesting = [self].concat($parent_nesting);

      return self.$attr_accessor("lex_en_expr_beg")
    })(Opal.get_singleton_class(self), $nesting);
    
    $writer = [543];
    $send(self, 'lex_en_expr_beg=', Opal.to_a($writer));
    $writer[$rb_minus($writer["length"], 1)];;
    (function(self, $parent_nesting) {
      var $nesting = [self].concat($parent_nesting);

      return self.$attr_accessor("lex_en_expr_labelarg")
    })(Opal.get_singleton_class(self), $nesting);
    
    $writer = [766];
    $send(self, 'lex_en_expr_labelarg=', Opal.to_a($writer));
    $writer[$rb_minus($writer["length"], 1)];;
    (function(self, $parent_nesting) {
      var $nesting = [self].concat($parent_nesting);

      return self.$attr_accessor("lex_en_expr_value")
    })(Opal.get_singleton_class(self), $nesting);
    
    $writer = [773];
    $send(self, 'lex_en_expr_value=', Opal.to_a($writer));
    $writer[$rb_minus($writer["length"], 1)];;
    (function(self, $parent_nesting) {
      var $nesting = [self].concat($parent_nesting);

      return self.$attr_accessor("lex_en_expr_end")
    })(Opal.get_singleton_class(self), $nesting);
    
    $writer = [781];
    $send(self, 'lex_en_expr_end=', Opal.to_a($writer));
    $writer[$rb_minus($writer["length"], 1)];;
    (function(self, $parent_nesting) {
      var $nesting = [self].concat($parent_nesting);

      return self.$attr_accessor("lex_en_leading_dot")
    })(Opal.get_singleton_class(self), $nesting);
    
    $writer = [961];
    $send(self, 'lex_en_leading_dot=', Opal.to_a($writer));
    $writer[$rb_minus($writer["length"], 1)];;
    (function(self, $parent_nesting) {
      var $nesting = [self].concat($parent_nesting);

      return self.$attr_accessor("lex_en_line_comment")
    })(Opal.get_singleton_class(self), $nesting);
    
    $writer = [967];
    $send(self, 'lex_en_line_comment=', Opal.to_a($writer));
    $writer[$rb_minus($writer["length"], 1)];;
    (function(self, $parent_nesting) {
      var $nesting = [self].concat($parent_nesting);

      return self.$attr_accessor("lex_en_line_begin")
    })(Opal.get_singleton_class(self), $nesting);
    
    $writer = [185];
    $send(self, 'lex_en_line_begin=', Opal.to_a($writer));
    $writer[$rb_minus($writer["length"], 1)];;
    Opal.const_set($nesting[0], 'ESCAPES', $hash("a".$ord(), "\u0007", "b".$ord(), "\b", "e".$ord(), "\u001b", "f".$ord(), "\f", "n".$ord(), "\n", "r".$ord(), "\r", "s".$ord(), " ", "t".$ord(), "\t", "v".$ord(), "\v", "\\".$ord(), "\\").$freeze());
    Opal.const_set($nesting[0], 'REGEXP_META_CHARACTERS', $send($$($nesting, 'Regexp'), 'union', Opal.to_a("\\$()*+.<>?[]^{|}".$chars())).$freeze());
    self.$attr_reader("source_buffer");
    self.$attr_accessor("diagnostics");
    self.$attr_accessor("static_env");
    self.$attr_accessor("force_utf32");
    self.$attr_accessor("cond", "cmdarg", "in_kwarg", "context", "command_start");
    self.$attr_accessor("tokens", "comments");
    
    Opal.def(self, '$initialize', $Lexer_initialize$1 = function $$initialize(version) {
      var self = this;

      
      self.version = version;
      self.static_env = nil;
      self.context = nil;
      self.tokens = nil;
      self.comments = nil;
      return self.$reset();
    }, $Lexer_initialize$1.$$arity = 1);
    
    Opal.def(self, '$reset', $Lexer_reset$2 = function $$reset(reset_state) {
      var self = this;

      
      
      if (reset_state == null) {
        reset_state = true;
      };
      if ($truthy(reset_state)) {
        
        self.cs = self.$class().$lex_en_line_begin();
        self.cond = $$($nesting, 'StackState').$new("cond");
        self.cmdarg = $$($nesting, 'StackState').$new("cmdarg");
        self.cond_stack = [];
        self.cmdarg_stack = [];};
      self.force_utf32 = false;
      self.source_pts = nil;
      self.p = 0;
      self.ts = nil;
      self.te = nil;
      self.act = 0;
      self.stack = [];
      self.top = 0;
      self.token_queue = [];
      self.literal_stack = [];
      self.eq_begin_s = nil;
      self.sharp_s = nil;
      self.newline_s = nil;
      self.num_base = nil;
      self.num_digits_s = nil;
      self.num_suffix_s = nil;
      self.num_xfrm = nil;
      self.escape_s = nil;
      self.escape = nil;
      self.herebody_s = nil;
      self.paren_nest = 0;
      self.lambda_stack = [];
      self.dedent_level = nil;
      self.command_start = true;
      self.in_kwarg = false;
      return (self.cs_before_block_comment = self.$class().$lex_en_line_begin());
    }, $Lexer_reset$2.$$arity = -1);
    
    Opal.def(self, '$source_buffer=', $Lexer_source_buffer$eq$3 = function(source_buffer) {
      var self = this, source = nil;

      
      self.source_buffer = source_buffer;
      if ($truthy(self.source_buffer)) {
        
        source = self.source_buffer.$source();
        if (source.$encoding()['$==']($$$($$($nesting, 'Encoding'), 'UTF_8'))) {
          self.source_pts = source.$unpack("U*")
        } else {
          self.source_pts = source.$unpack("C*")
        };
        if (self.source_pts['$[]'](0)['$=='](65279)) {
          return (self.p = 1)
        } else {
          return nil
        };
      } else {
        return (self.source_pts = nil)
      };
    }, $Lexer_source_buffer$eq$3.$$arity = 1);
    
    Opal.def(self, '$encoding', $Lexer_encoding$4 = function $$encoding() {
      var self = this;

      return self.source_buffer.$source().$encoding()
    }, $Lexer_encoding$4.$$arity = 0);
    Opal.const_set($nesting[0], 'LEX_STATES', $hash2(["line_begin", "expr_dot", "expr_fname", "expr_value", "expr_beg", "expr_mid", "expr_arg", "expr_cmdarg", "expr_end", "expr_endarg", "expr_endfn", "expr_labelarg", "interp_string", "interp_words", "plain_string", "plain_words"], {"line_begin": self.$lex_en_line_begin(), "expr_dot": self.$lex_en_expr_dot(), "expr_fname": self.$lex_en_expr_fname(), "expr_value": self.$lex_en_expr_value(), "expr_beg": self.$lex_en_expr_beg(), "expr_mid": self.$lex_en_expr_mid(), "expr_arg": self.$lex_en_expr_arg(), "expr_cmdarg": self.$lex_en_expr_cmdarg(), "expr_end": self.$lex_en_expr_end(), "expr_endarg": self.$lex_en_expr_endarg(), "expr_endfn": self.$lex_en_expr_endfn(), "expr_labelarg": self.$lex_en_expr_labelarg(), "interp_string": self.$lex_en_interp_string(), "interp_words": self.$lex_en_interp_words(), "plain_string": self.$lex_en_plain_string(), "plain_words": self.$lex_en_plain_string()}));
    
    Opal.def(self, '$state', $Lexer_state$5 = function $$state() {
      var self = this;

      return $$($nesting, 'LEX_STATES').$invert().$fetch(self.cs, self.cs)
    }, $Lexer_state$5.$$arity = 0);
    
    Opal.def(self, '$state=', $Lexer_state$eq$6 = function(state) {
      var self = this;

      return (self.cs = $$($nesting, 'LEX_STATES').$fetch(state))
    }, $Lexer_state$eq$6.$$arity = 1);
    
    Opal.def(self, '$push_cmdarg', $Lexer_push_cmdarg$7 = function $$push_cmdarg() {
      var self = this;

      
      self.cmdarg_stack.$push(self.cmdarg);
      return (self.cmdarg = $$($nesting, 'StackState').$new("" + "cmdarg." + (self.cmdarg_stack.$count())));
    }, $Lexer_push_cmdarg$7.$$arity = 0);
    
    Opal.def(self, '$pop_cmdarg', $Lexer_pop_cmdarg$8 = function $$pop_cmdarg() {
      var self = this;

      return (self.cmdarg = self.cmdarg_stack.$pop())
    }, $Lexer_pop_cmdarg$8.$$arity = 0);
    
    Opal.def(self, '$push_cond', $Lexer_push_cond$9 = function $$push_cond() {
      var self = this;

      
      self.cond_stack.$push(self.cond);
      return (self.cond = $$($nesting, 'StackState').$new("" + "cond." + (self.cond_stack.$count())));
    }, $Lexer_push_cond$9.$$arity = 0);
    
    Opal.def(self, '$pop_cond', $Lexer_pop_cond$10 = function $$pop_cond() {
      var self = this;

      return (self.cond = self.cond_stack.$pop())
    }, $Lexer_pop_cond$10.$$arity = 0);
    
    Opal.def(self, '$dedent_level', $Lexer_dedent_level$11 = function $$dedent_level() {
      var $a, self = this, dedent_level = nil;

      
      $a = [self.dedent_level, nil], (dedent_level = $a[0]), (self.dedent_level = $a[1]), $a;
      return dedent_level;
    }, $Lexer_dedent_level$11.$$arity = 0);
    
    Opal.def(self, '$advance', $Lexer_advance$12 = function $$advance() {
      var $a, $b, $c, $$13, $$14, $$15, $$16, $$17, $$18, $$19, $$20, $$21, $$22, $$23, $$24, $$25, $$26, $$27, $$28, $$29, $$30, $$31, $$32, $$33, $$34, $$35, $$36, $$37, $$38, $$39, $$40, $$41, self = this, klass = nil, _lex_trans_keys = nil, _lex_key_spans = nil, _lex_index_offsets = nil, _lex_indicies = nil, _lex_trans_targs = nil, _lex_trans_actions = nil, _lex_to_state_actions = nil, _lex_from_state_actions = nil, _lex_eof_trans = nil, pe = nil, p = nil, eof = nil, cmd_state = nil, testEof = nil, _slen = nil, _trans = nil, _keys = nil, _inds = nil, _acts = nil, _nacts = nil, _goto_level = nil, _resume = nil, _eof_trans = nil, _again = nil, _test_eof = nil, _out = nil, $case = nil, _wide = nil, tm = nil, heredoc_e = nil, diag_msg = nil, ident_tok = nil, ident_ts = nil, ident_te = nil, current_literal = nil, $writer = nil, line = nil, string = nil, lookahead = nil, token = nil, message = nil, escaped_char = nil, unknown_options = nil, type = nil, delimiter = nil, escape = nil, ident = nil, value = nil, digits = nil, invalid_idx = nil, invalid_s = nil, codepoints = nil, codepoint_s = nil, spaces_p = nil, codepoint = nil, new_herebody_s = nil, indent = nil, dedent_body = nil;

      
      if ($truthy(self.token_queue['$any?']())) {
        return self.token_queue.$shift()};
      klass = self.$class();
      _lex_trans_keys = klass.$send("_lex_trans_keys");
      _lex_key_spans = klass.$send("_lex_key_spans");
      _lex_index_offsets = klass.$send("_lex_index_offsets");
      _lex_indicies = klass.$send("_lex_indicies");
      _lex_trans_targs = klass.$send("_lex_trans_targs");
      _lex_trans_actions = klass.$send("_lex_trans_actions");
      _lex_to_state_actions = klass.$send("_lex_to_state_actions");
      _lex_from_state_actions = klass.$send("_lex_from_state_actions");
      _lex_eof_trans = klass.$send("_lex_eof_trans");
      pe = $rb_plus(self.source_pts.$size(), 2);
      $a = [self.p, pe], (p = $a[0]), (eof = $a[1]), $a;
      cmd_state = self.command_start;
      self.command_start = false;
      
      testEof = false;
      $b = nil, $a = Opal.to_ary($b), (_slen = ($a[0] == null ? nil : $a[0])), (_trans = ($a[1] == null ? nil : $a[1])), (_keys = ($a[2] == null ? nil : $a[2])), (_inds = ($a[3] == null ? nil : $a[3])), (_acts = ($a[4] == null ? nil : $a[4])), (_nacts = ($a[5] == null ? nil : $a[5])), $b;
      _goto_level = 0;
      _resume = 10;
      _eof_trans = 15;
      _again = 20;
      _test_eof = 30;
      _out = 40;
      while ($truthy(true)) {
        
        if ($truthy($rb_le(_goto_level, 0))) {
          
          if (p['$=='](pe)) {
            
            _goto_level = _test_eof;
            continue;;};
          if (self.cs['$=='](0)) {
            
            _goto_level = _out;
            continue;;};};
        if ($truthy($rb_le(_goto_level, _resume))) {
          
          $case = _lex_from_state_actions['$[]'](self.cs);
          if ((97)['$===']($case)) {
          self.ts = p;};
          _keys = self.cs['$<<'](1);
          _inds = _lex_index_offsets['$[]'](self.cs);
          _slen = _lex_key_spans['$[]'](self.cs);
          _wide = ($truthy($b = self.source_pts['$[]'](p)) ? $b : 0);
          _trans = (function() {if ($truthy(($truthy($b = ($truthy($c = $rb_gt(_slen, 0)) ? $rb_le(_lex_trans_keys['$[]'](_keys), _wide) : $c)) ? $rb_le(_wide, _lex_trans_keys['$[]']($rb_plus(_keys, 1))) : $b))) {
            return _lex_indicies['$[]']($rb_minus($rb_plus(_inds, _wide), _lex_trans_keys['$[]'](_keys)))
          } else {
            return _lex_indicies['$[]']($rb_plus(_inds, _slen))
          }; return nil; })();};
        if ($truthy($rb_le(_goto_level, _eof_trans))) {
          
          self.cs = _lex_trans_targs['$[]'](_trans);
          if ($truthy(_lex_trans_actions['$[]'](_trans)['$!='](0))) {
            $case = _lex_trans_actions['$[]'](_trans);
            if ((28)['$===']($case)) {
            self.newline_s = p;}
            else if ((117)['$===']($case)) {
            self.escape_s = p;
            self.escape = nil;}
            else if ((29)['$===']($case)) {
            if ($truthy(self.herebody_s)) {
              
              p = self.herebody_s;
              self.herebody_s = nil;};}
            else if ((59)['$===']($case)) {
            self.sharp_s = $rb_minus(p, 1);}
            else if ((63)['$===']($case)) {
            self.$emit_comment(self.sharp_s, (function() {if (p['$=='](pe)) {
              return $rb_minus(p, 2)
            } else {
              return p
            }; return nil; })());}
            else if ((304)['$===']($case)) {
            tm = p;}
            else if ((36)['$===']($case)) {
            tm = p;}
            else if ((38)['$===']($case)) {
            tm = p;}
            else if ((40)['$===']($case)) {
            tm = p;}
            else if ((70)['$===']($case)) {
            heredoc_e = p;}
            else if ((343)['$===']($case)) {
            tm = $rb_minus(p, 1);
            diag_msg = "ivar_name";}
            else if ((346)['$===']($case)) {
            tm = $rb_minus(p, 2);
            diag_msg = "cvar_name";}
            else if ((354)['$===']($case)) {
            self.escape = nil;}
            else if ((383)['$===']($case)) {
            tm = p;}
            else if ((302)['$===']($case)) {
            ident_tok = self.$tok();
            ident_ts = self.ts;
            ident_te = self.te;}
            else if ((470)['$===']($case)) {
            self.num_base = 16;
            self.num_digits_s = p;}
            else if ((464)['$===']($case)) {
            self.num_base = 10;
            self.num_digits_s = p;}
            else if ((467)['$===']($case)) {
            self.num_base = 8;
            self.num_digits_s = p;}
            else if ((461)['$===']($case)) {
            self.num_base = 2;
            self.num_digits_s = p;}
            else if ((476)['$===']($case)) {
            self.num_base = 10;
            self.num_digits_s = self.ts;}
            else if ((438)['$===']($case)) {
            self.num_base = 8;
            self.num_digits_s = self.ts;}
            else if ((453)['$===']($case)) {
            self.num_suffix_s = p;}
            else if ((446)['$===']($case)) {
            self.num_suffix_s = p;}
            else if ((443)['$===']($case)) {
            self.num_suffix_s = p;}
            else if ((88)['$===']($case)) {
            tm = p;}
            else if ((7)['$===']($case)) {
            self.te = $rb_plus(p, 1);}
            else if ((113)['$===']($case)) {
            self.te = $rb_plus(p, 1);
            
            current_literal = self.$literal();
            current_literal.$flush_string();
            current_literal.$extend_content();
            self.$emit("tSTRING_DBEG", "\#{".$freeze());
            if ($truthy(current_literal['$heredoc?']())) {
              
              
              $writer = [self.herebody_s];
              $send(current_literal, 'saved_herebody_s=', Opal.to_a($writer));
              $writer[$rb_minus($writer["length"], 1)];;
              self.herebody_s = nil;};
            current_literal.$start_interp_brace();
            self.command_start = true;
            self.cs = 773;
            
            p = $rb_plus(p, 1);
            _goto_level = _out;
            continue;;;;}
            else if ((5)['$===']($case)) {
            self.te = $rb_plus(p, 1);
            
            current_literal = self.$literal();
            current_literal.$flush_string();
            current_literal.$extend_content();
            self.$emit("tSTRING_DVAR", nil, self.ts, $rb_plus(self.ts, 1));
            p = self.ts;
            
            
            $writer = [self.top, self.cs];
            $send(self.stack, '[]=', Opal.to_a($writer));
            $writer[$rb_minus($writer["length"], 1)];;
            self.top = $rb_plus(self.top, 1);
            self.cs = 328;
            _goto_level = _again;
            continue;;;;}
            else if ((109)['$===']($case)) {
            self.te = $rb_plus(p, 1);
            
            current_literal = self.$literal();
            if (self.te['$=='](pe)) {
              self.$diagnostic("fatal", "string_eof", nil, self.$range(current_literal.$str_s(), $rb_plus(current_literal.$str_s(), 1)))};
            if ($truthy(current_literal['$heredoc?']())) {
              
              line = self.$tok(self.herebody_s, self.ts).$gsub(/\r+$/, "".$freeze());
              if ($truthy(self['$version?'](18, 19, 20))) {
                line = line.$gsub(/\r.*$/, "".$freeze())};
              if ($truthy(current_literal.$nest_and_try_closing(line, self.herebody_s, self.ts))) {
                
                self.herebody_s = self.te;
                p = $rb_minus(current_literal.$heredoc_e(), 1);
                self.cs = self.$pop_literal();
                
                p = $rb_plus(p, 1);
                _goto_level = _out;
                continue;;;
              } else {
                
                current_literal.$infer_indent_level(line);
                self.herebody_s = self.te;
              };
            } else {
              
              if ($truthy(current_literal.$nest_and_try_closing(self.$tok(), self.ts, self.te))) {
                
                self.cs = self.$pop_literal();
                
                p = $rb_plus(p, 1);
                _goto_level = _out;
                continue;;;};
              if ($truthy(self.herebody_s)) {
                
                p = $rb_minus(self.herebody_s, 1);
                self.herebody_s = nil;};
            };
            if ($truthy(($truthy($b = current_literal['$words?']()) ? self['$eof_codepoint?'](self.source_pts['$[]'](p))['$!']() : $b))) {
              current_literal.$extend_space(self.ts, self.te)
            } else {
              
              current_literal.$extend_string(self.$tok(), self.ts, self.te);
              current_literal.$flush_string();
            };;}
            else if ((108)['$===']($case)) {
            self.te = $rb_plus(p, 1);
            
            string = self.$tok();
            if ($truthy(($truthy($b = $rb_ge(self.version, 22)) ? self.cond['$active?']()['$!']() : $b))) {
              lookahead = self.source_buffer.$slice(Opal.Range.$new(self.te,$rb_plus(self.te, 2), true))};
            current_literal = self.$literal();
            if ($truthy(($truthy($b = current_literal['$heredoc?']()['$!']()) ? (token = current_literal.$nest_and_try_closing(string, self.ts, self.te, lookahead)) : $b))) {
              
              if (token['$[]'](0)['$==']("tLABEL_END")) {
                
                p = $rb_plus(p, 1);
                self.$pop_literal();
                self.cs = 766;
              } else {
                self.cs = self.$pop_literal()
              };
              
              p = $rb_plus(p, 1);
              _goto_level = _out;
              continue;;;
            } else {
              current_literal.$extend_string(string, self.ts, self.te)
            };;}
            else if ((115)['$===']($case)) {
            self.te = p;
            p = $rb_minus(p, 1);
            
            if ($truthy($rb_ge(self.version, 27))) {
              self.$literal().$extend_string(self.$tok(), self.ts, self.te)
            } else {
              
              message = (function() {if ($truthy(self.$tok()['$start_with?']("\#@@"))) {
                return "cvar_name"
              } else {
                return "ivar_name"
              }; return nil; })();
              self.$diagnostic("error", message, $hash2(["name"], {"name": self.$tok($rb_plus(self.ts, 1), self.te)}), self.$range($rb_plus(self.ts, 1), self.te));
            };;}
            else if ((114)['$===']($case)) {
            self.te = p;
            p = $rb_minus(p, 1);
            
            current_literal = self.$literal();
            current_literal.$flush_string();
            current_literal.$extend_content();
            self.$emit("tSTRING_DVAR", nil, self.ts, $rb_plus(self.ts, 1));
            p = self.ts;
            
            
            $writer = [self.top, self.cs];
            $send(self.stack, '[]=', Opal.to_a($writer));
            $writer[$rb_minus($writer["length"], 1)];;
            self.top = $rb_plus(self.top, 1);
            self.cs = 328;
            _goto_level = _again;
            continue;;;;}
            else if ((111)['$===']($case)) {
            self.te = p;
            p = $rb_minus(p, 1);
            
            self.$literal().$extend_space(self.ts, self.te);;}
            else if ((112)['$===']($case)) {
            self.te = p;
            p = $rb_minus(p, 1);
            
            string = self.$tok();
            if ($truthy(($truthy($b = $rb_ge(self.version, 22)) ? self.cond['$active?']()['$!']() : $b))) {
              lookahead = self.source_buffer.$slice(Opal.Range.$new(self.te,$rb_plus(self.te, 2), true))};
            current_literal = self.$literal();
            if ($truthy(($truthy($b = current_literal['$heredoc?']()['$!']()) ? (token = current_literal.$nest_and_try_closing(string, self.ts, self.te, lookahead)) : $b))) {
              
              if (token['$[]'](0)['$==']("tLABEL_END")) {
                
                p = $rb_plus(p, 1);
                self.$pop_literal();
                self.cs = 766;
              } else {
                self.cs = self.$pop_literal()
              };
              
              p = $rb_plus(p, 1);
              _goto_level = _out;
              continue;;;
            } else {
              current_literal.$extend_string(string, self.ts, self.te)
            };;}
            else if ((6)['$===']($case)) {
            
            p = $rb_minus(self.te, 1);;
            
            current_literal = self.$literal();
            escaped_char = self.source_buffer.$slice(self.escape_s).$chr();
            if ($truthy(current_literal['$munge_escape?'](escaped_char))) {
              if ($truthy(($truthy($b = current_literal['$regexp?']()) ? $$($nesting, 'REGEXP_META_CHARACTERS').$match(escaped_char) : $b))) {
                current_literal.$extend_string(self.$tok(), self.ts, self.te)
              } else {
                current_literal.$extend_string(escaped_char, self.ts, self.te)
              }
            } else if ($truthy(($truthy($b = current_literal['$squiggly_heredoc?']()) ? escaped_char['$==']("\n".$freeze()) : $b))) {
              current_literal.$extend_string(self.$tok(), self.ts, self.te)
            } else if ($truthy(($truthy($b = current_literal['$supports_line_continuation_via_slash?']()) ? escaped_char['$==']("\n".$freeze()) : $b))) {
              current_literal.$extend_string(self.$tok().$gsub("\\\n".$freeze(), "".$freeze()), self.ts, self.te)
            } else if ($truthy(current_literal['$regexp?']())) {
              current_literal.$extend_string(self.$tok().$gsub("\\\n".$freeze(), "".$freeze()), self.ts, self.te)
            } else {
              current_literal.$extend_string(($truthy($b = self.escape) ? $b : self.$tok()), self.ts, self.te)
            };;}
            else if ((4)['$===']($case)) {
            
            p = $rb_minus(self.te, 1);;
            
            string = self.$tok();
            if ($truthy(($truthy($b = $rb_ge(self.version, 22)) ? self.cond['$active?']()['$!']() : $b))) {
              lookahead = self.source_buffer.$slice(Opal.Range.$new(self.te,$rb_plus(self.te, 2), true))};
            current_literal = self.$literal();
            if ($truthy(($truthy($b = current_literal['$heredoc?']()['$!']()) ? (token = current_literal.$nest_and_try_closing(string, self.ts, self.te, lookahead)) : $b))) {
              
              if (token['$[]'](0)['$==']("tLABEL_END")) {
                
                p = $rb_plus(p, 1);
                self.$pop_literal();
                self.cs = 766;
              } else {
                self.cs = self.$pop_literal()
              };
              
              p = $rb_plus(p, 1);
              _goto_level = _out;
              continue;;;
            } else {
              current_literal.$extend_string(string, self.ts, self.te)
            };;}
            else if ((142)['$===']($case)) {
            self.te = $rb_plus(p, 1);
            
            current_literal = self.$literal();
            current_literal.$flush_string();
            current_literal.$extend_content();
            self.$emit("tSTRING_DBEG", "\#{".$freeze());
            if ($truthy(current_literal['$heredoc?']())) {
              
              
              $writer = [self.herebody_s];
              $send(current_literal, 'saved_herebody_s=', Opal.to_a($writer));
              $writer[$rb_minus($writer["length"], 1)];;
              self.herebody_s = nil;};
            current_literal.$start_interp_brace();
            self.command_start = true;
            self.cs = 773;
            
            p = $rb_plus(p, 1);
            _goto_level = _out;
            continue;;;;}
            else if ((10)['$===']($case)) {
            self.te = $rb_plus(p, 1);
            
            current_literal = self.$literal();
            current_literal.$flush_string();
            current_literal.$extend_content();
            self.$emit("tSTRING_DVAR", nil, self.ts, $rb_plus(self.ts, 1));
            p = self.ts;
            
            
            $writer = [self.top, self.cs];
            $send(self.stack, '[]=', Opal.to_a($writer));
            $writer[$rb_minus($writer["length"], 1)];;
            self.top = $rb_plus(self.top, 1);
            self.cs = 328;
            _goto_level = _again;
            continue;;;;}
            else if ((139)['$===']($case)) {
            self.te = $rb_plus(p, 1);
            
            current_literal = self.$literal();
            if (self.te['$=='](pe)) {
              self.$diagnostic("fatal", "string_eof", nil, self.$range(current_literal.$str_s(), $rb_plus(current_literal.$str_s(), 1)))};
            if ($truthy(current_literal['$heredoc?']())) {
              
              line = self.$tok(self.herebody_s, self.ts).$gsub(/\r+$/, "".$freeze());
              if ($truthy(self['$version?'](18, 19, 20))) {
                line = line.$gsub(/\r.*$/, "".$freeze())};
              if ($truthy(current_literal.$nest_and_try_closing(line, self.herebody_s, self.ts))) {
                
                self.herebody_s = self.te;
                p = $rb_minus(current_literal.$heredoc_e(), 1);
                self.cs = self.$pop_literal();
                
                p = $rb_plus(p, 1);
                _goto_level = _out;
                continue;;;
              } else {
                
                current_literal.$infer_indent_level(line);
                self.herebody_s = self.te;
              };
            } else {
              
              if ($truthy(current_literal.$nest_and_try_closing(self.$tok(), self.ts, self.te))) {
                
                self.cs = self.$pop_literal();
                
                p = $rb_plus(p, 1);
                _goto_level = _out;
                continue;;;};
              if ($truthy(self.herebody_s)) {
                
                p = $rb_minus(self.herebody_s, 1);
                self.herebody_s = nil;};
            };
            if ($truthy(($truthy($b = current_literal['$words?']()) ? self['$eof_codepoint?'](self.source_pts['$[]'](p))['$!']() : $b))) {
              current_literal.$extend_space(self.ts, self.te)
            } else {
              
              current_literal.$extend_string(self.$tok(), self.ts, self.te);
              current_literal.$flush_string();
            };;}
            else if ((138)['$===']($case)) {
            self.te = $rb_plus(p, 1);
            
            string = self.$tok();
            if ($truthy(($truthy($b = $rb_ge(self.version, 22)) ? self.cond['$active?']()['$!']() : $b))) {
              lookahead = self.source_buffer.$slice(Opal.Range.$new(self.te,$rb_plus(self.te, 2), true))};
            current_literal = self.$literal();
            if ($truthy(($truthy($b = current_literal['$heredoc?']()['$!']()) ? (token = current_literal.$nest_and_try_closing(string, self.ts, self.te, lookahead)) : $b))) {
              
              if (token['$[]'](0)['$==']("tLABEL_END")) {
                
                p = $rb_plus(p, 1);
                self.$pop_literal();
                self.cs = 766;
              } else {
                self.cs = self.$pop_literal()
              };
              
              p = $rb_plus(p, 1);
              _goto_level = _out;
              continue;;;
            } else {
              current_literal.$extend_string(string, self.ts, self.te)
            };;}
            else if ((144)['$===']($case)) {
            self.te = p;
            p = $rb_minus(p, 1);
            
            if ($truthy($rb_ge(self.version, 27))) {
              self.$literal().$extend_string(self.$tok(), self.ts, self.te)
            } else {
              
              message = (function() {if ($truthy(self.$tok()['$start_with?']("\#@@"))) {
                return "cvar_name"
              } else {
                return "ivar_name"
              }; return nil; })();
              self.$diagnostic("error", message, $hash2(["name"], {"name": self.$tok($rb_plus(self.ts, 1), self.te)}), self.$range($rb_plus(self.ts, 1), self.te));
            };;}
            else if ((143)['$===']($case)) {
            self.te = p;
            p = $rb_minus(p, 1);
            
            current_literal = self.$literal();
            current_literal.$flush_string();
            current_literal.$extend_content();
            self.$emit("tSTRING_DVAR", nil, self.ts, $rb_plus(self.ts, 1));
            p = self.ts;
            
            
            $writer = [self.top, self.cs];
            $send(self.stack, '[]=', Opal.to_a($writer));
            $writer[$rb_minus($writer["length"], 1)];;
            self.top = $rb_plus(self.top, 1);
            self.cs = 328;
            _goto_level = _again;
            continue;;;;}
            else if ((141)['$===']($case)) {
            self.te = p;
            p = $rb_minus(p, 1);
            
            string = self.$tok();
            if ($truthy(($truthy($b = $rb_ge(self.version, 22)) ? self.cond['$active?']()['$!']() : $b))) {
              lookahead = self.source_buffer.$slice(Opal.Range.$new(self.te,$rb_plus(self.te, 2), true))};
            current_literal = self.$literal();
            if ($truthy(($truthy($b = current_literal['$heredoc?']()['$!']()) ? (token = current_literal.$nest_and_try_closing(string, self.ts, self.te, lookahead)) : $b))) {
              
              if (token['$[]'](0)['$==']("tLABEL_END")) {
                
                p = $rb_plus(p, 1);
                self.$pop_literal();
                self.cs = 766;
              } else {
                self.cs = self.$pop_literal()
              };
              
              p = $rb_plus(p, 1);
              _goto_level = _out;
              continue;;;
            } else {
              current_literal.$extend_string(string, self.ts, self.te)
            };;}
            else if ((11)['$===']($case)) {
            
            p = $rb_minus(self.te, 1);;
            
            current_literal = self.$literal();
            escaped_char = self.source_buffer.$slice(self.escape_s).$chr();
            if ($truthy(current_literal['$munge_escape?'](escaped_char))) {
              if ($truthy(($truthy($b = current_literal['$regexp?']()) ? $$($nesting, 'REGEXP_META_CHARACTERS').$match(escaped_char) : $b))) {
                current_literal.$extend_string(self.$tok(), self.ts, self.te)
              } else {
                current_literal.$extend_string(escaped_char, self.ts, self.te)
              }
            } else if ($truthy(($truthy($b = current_literal['$squiggly_heredoc?']()) ? escaped_char['$==']("\n".$freeze()) : $b))) {
              current_literal.$extend_string(self.$tok(), self.ts, self.te)
            } else if ($truthy(($truthy($b = current_literal['$supports_line_continuation_via_slash?']()) ? escaped_char['$==']("\n".$freeze()) : $b))) {
              current_literal.$extend_string(self.$tok().$gsub("\\\n".$freeze(), "".$freeze()), self.ts, self.te)
            } else if ($truthy(current_literal['$regexp?']())) {
              current_literal.$extend_string(self.$tok().$gsub("\\\n".$freeze(), "".$freeze()), self.ts, self.te)
            } else {
              current_literal.$extend_string(($truthy($b = self.escape) ? $b : self.$tok()), self.ts, self.te)
            };;}
            else if ((9)['$===']($case)) {
            
            p = $rb_minus(self.te, 1);;
            
            string = self.$tok();
            if ($truthy(($truthy($b = $rb_ge(self.version, 22)) ? self.cond['$active?']()['$!']() : $b))) {
              lookahead = self.source_buffer.$slice(Opal.Range.$new(self.te,$rb_plus(self.te, 2), true))};
            current_literal = self.$literal();
            if ($truthy(($truthy($b = current_literal['$heredoc?']()['$!']()) ? (token = current_literal.$nest_and_try_closing(string, self.ts, self.te, lookahead)) : $b))) {
              
              if (token['$[]'](0)['$==']("tLABEL_END")) {
                
                p = $rb_plus(p, 1);
                self.$pop_literal();
                self.cs = 766;
              } else {
                self.cs = self.$pop_literal()
              };
              
              p = $rb_plus(p, 1);
              _goto_level = _out;
              continue;;;
            } else {
              current_literal.$extend_string(string, self.ts, self.te)
            };;}
            else if ((167)['$===']($case)) {
            self.te = $rb_plus(p, 1);
            
            current_literal = self.$literal();
            if (self.te['$=='](pe)) {
              self.$diagnostic("fatal", "string_eof", nil, self.$range(current_literal.$str_s(), $rb_plus(current_literal.$str_s(), 1)))};
            if ($truthy(current_literal['$heredoc?']())) {
              
              line = self.$tok(self.herebody_s, self.ts).$gsub(/\r+$/, "".$freeze());
              if ($truthy(self['$version?'](18, 19, 20))) {
                line = line.$gsub(/\r.*$/, "".$freeze())};
              if ($truthy(current_literal.$nest_and_try_closing(line, self.herebody_s, self.ts))) {
                
                self.herebody_s = self.te;
                p = $rb_minus(current_literal.$heredoc_e(), 1);
                self.cs = self.$pop_literal();
                
                p = $rb_plus(p, 1);
                _goto_level = _out;
                continue;;;
              } else {
                
                current_literal.$infer_indent_level(line);
                self.herebody_s = self.te;
              };
            } else {
              
              if ($truthy(current_literal.$nest_and_try_closing(self.$tok(), self.ts, self.te))) {
                
                self.cs = self.$pop_literal();
                
                p = $rb_plus(p, 1);
                _goto_level = _out;
                continue;;;};
              if ($truthy(self.herebody_s)) {
                
                p = $rb_minus(self.herebody_s, 1);
                self.herebody_s = nil;};
            };
            if ($truthy(($truthy($b = current_literal['$words?']()) ? self['$eof_codepoint?'](self.source_pts['$[]'](p))['$!']() : $b))) {
              current_literal.$extend_space(self.ts, self.te)
            } else {
              
              current_literal.$extend_string(self.$tok(), self.ts, self.te);
              current_literal.$flush_string();
            };;}
            else if ((166)['$===']($case)) {
            self.te = $rb_plus(p, 1);
            
            string = self.$tok();
            if ($truthy(($truthy($b = $rb_ge(self.version, 22)) ? self.cond['$active?']()['$!']() : $b))) {
              lookahead = self.source_buffer.$slice(Opal.Range.$new(self.te,$rb_plus(self.te, 2), true))};
            current_literal = self.$literal();
            if ($truthy(($truthy($b = current_literal['$heredoc?']()['$!']()) ? (token = current_literal.$nest_and_try_closing(string, self.ts, self.te, lookahead)) : $b))) {
              
              if (token['$[]'](0)['$==']("tLABEL_END")) {
                
                p = $rb_plus(p, 1);
                self.$pop_literal();
                self.cs = 766;
              } else {
                self.cs = self.$pop_literal()
              };
              
              p = $rb_plus(p, 1);
              _goto_level = _out;
              continue;;;
            } else {
              current_literal.$extend_string(string, self.ts, self.te)
            };;}
            else if ((169)['$===']($case)) {
            self.te = p;
            p = $rb_minus(p, 1);
            
            self.$literal().$extend_space(self.ts, self.te);;}
            else if ((170)['$===']($case)) {
            self.te = p;
            p = $rb_minus(p, 1);
            
            string = self.$tok();
            if ($truthy(($truthy($b = $rb_ge(self.version, 22)) ? self.cond['$active?']()['$!']() : $b))) {
              lookahead = self.source_buffer.$slice(Opal.Range.$new(self.te,$rb_plus(self.te, 2), true))};
            current_literal = self.$literal();
            if ($truthy(($truthy($b = current_literal['$heredoc?']()['$!']()) ? (token = current_literal.$nest_and_try_closing(string, self.ts, self.te, lookahead)) : $b))) {
              
              if (token['$[]'](0)['$==']("tLABEL_END")) {
                
                p = $rb_plus(p, 1);
                self.$pop_literal();
                self.cs = 766;
              } else {
                self.cs = self.$pop_literal()
              };
              
              p = $rb_plus(p, 1);
              _goto_level = _out;
              continue;;;
            } else {
              current_literal.$extend_string(string, self.ts, self.te)
            };;}
            else if ((173)['$===']($case)) {
            self.te = $rb_plus(p, 1);
            
            current_literal = self.$literal();
            if (self.te['$=='](pe)) {
              self.$diagnostic("fatal", "string_eof", nil, self.$range(current_literal.$str_s(), $rb_plus(current_literal.$str_s(), 1)))};
            if ($truthy(current_literal['$heredoc?']())) {
              
              line = self.$tok(self.herebody_s, self.ts).$gsub(/\r+$/, "".$freeze());
              if ($truthy(self['$version?'](18, 19, 20))) {
                line = line.$gsub(/\r.*$/, "".$freeze())};
              if ($truthy(current_literal.$nest_and_try_closing(line, self.herebody_s, self.ts))) {
                
                self.herebody_s = self.te;
                p = $rb_minus(current_literal.$heredoc_e(), 1);
                self.cs = self.$pop_literal();
                
                p = $rb_plus(p, 1);
                _goto_level = _out;
                continue;;;
              } else {
                
                current_literal.$infer_indent_level(line);
                self.herebody_s = self.te;
              };
            } else {
              
              if ($truthy(current_literal.$nest_and_try_closing(self.$tok(), self.ts, self.te))) {
                
                self.cs = self.$pop_literal();
                
                p = $rb_plus(p, 1);
                _goto_level = _out;
                continue;;;};
              if ($truthy(self.herebody_s)) {
                
                p = $rb_minus(self.herebody_s, 1);
                self.herebody_s = nil;};
            };
            if ($truthy(($truthy($b = current_literal['$words?']()) ? self['$eof_codepoint?'](self.source_pts['$[]'](p))['$!']() : $b))) {
              current_literal.$extend_space(self.ts, self.te)
            } else {
              
              current_literal.$extend_string(self.$tok(), self.ts, self.te);
              current_literal.$flush_string();
            };;}
            else if ((172)['$===']($case)) {
            self.te = $rb_plus(p, 1);
            
            string = self.$tok();
            if ($truthy(($truthy($b = $rb_ge(self.version, 22)) ? self.cond['$active?']()['$!']() : $b))) {
              lookahead = self.source_buffer.$slice(Opal.Range.$new(self.te,$rb_plus(self.te, 2), true))};
            current_literal = self.$literal();
            if ($truthy(($truthy($b = current_literal['$heredoc?']()['$!']()) ? (token = current_literal.$nest_and_try_closing(string, self.ts, self.te, lookahead)) : $b))) {
              
              if (token['$[]'](0)['$==']("tLABEL_END")) {
                
                p = $rb_plus(p, 1);
                self.$pop_literal();
                self.cs = 766;
              } else {
                self.cs = self.$pop_literal()
              };
              
              p = $rb_plus(p, 1);
              _goto_level = _out;
              continue;;;
            } else {
              current_literal.$extend_string(string, self.ts, self.te)
            };;}
            else if ((175)['$===']($case)) {
            self.te = p;
            p = $rb_minus(p, 1);
            
            string = self.$tok();
            if ($truthy(($truthy($b = $rb_ge(self.version, 22)) ? self.cond['$active?']()['$!']() : $b))) {
              lookahead = self.source_buffer.$slice(Opal.Range.$new(self.te,$rb_plus(self.te, 2), true))};
            current_literal = self.$literal();
            if ($truthy(($truthy($b = current_literal['$heredoc?']()['$!']()) ? (token = current_literal.$nest_and_try_closing(string, self.ts, self.te, lookahead)) : $b))) {
              
              if (token['$[]'](0)['$==']("tLABEL_END")) {
                
                p = $rb_plus(p, 1);
                self.$pop_literal();
                self.cs = 766;
              } else {
                self.cs = self.$pop_literal()
              };
              
              p = $rb_plus(p, 1);
              _goto_level = _out;
              continue;;;
            } else {
              current_literal.$extend_string(string, self.ts, self.te)
            };;}
            else if ((182)['$===']($case)) {
            self.te = $rb_plus(p, 1);
            
            current_literal = self.$literal();
            current_literal.$flush_string();
            current_literal.$extend_content();
            self.$emit("tSTRING_DBEG", "\#{".$freeze());
            if ($truthy(current_literal['$heredoc?']())) {
              
              
              $writer = [self.herebody_s];
              $send(current_literal, 'saved_herebody_s=', Opal.to_a($writer));
              $writer[$rb_minus($writer["length"], 1)];;
              self.herebody_s = nil;};
            current_literal.$start_interp_brace();
            self.command_start = true;
            self.cs = 773;
            
            p = $rb_plus(p, 1);
            _goto_level = _out;
            continue;;;;}
            else if ((13)['$===']($case)) {
            self.te = $rb_plus(p, 1);
            
            current_literal = self.$literal();
            current_literal.$flush_string();
            current_literal.$extend_content();
            self.$emit("tSTRING_DVAR", nil, self.ts, $rb_plus(self.ts, 1));
            p = self.ts;
            
            
            $writer = [self.top, self.cs];
            $send(self.stack, '[]=', Opal.to_a($writer));
            $writer[$rb_minus($writer["length"], 1)];;
            self.top = $rb_plus(self.top, 1);
            self.cs = 328;
            _goto_level = _again;
            continue;;;;}
            else if ((179)['$===']($case)) {
            self.te = $rb_plus(p, 1);
            
            current_literal = self.$literal();
            if (self.te['$=='](pe)) {
              self.$diagnostic("fatal", "string_eof", nil, self.$range(current_literal.$str_s(), $rb_plus(current_literal.$str_s(), 1)))};
            if ($truthy(current_literal['$heredoc?']())) {
              
              line = self.$tok(self.herebody_s, self.ts).$gsub(/\r+$/, "".$freeze());
              if ($truthy(self['$version?'](18, 19, 20))) {
                line = line.$gsub(/\r.*$/, "".$freeze())};
              if ($truthy(current_literal.$nest_and_try_closing(line, self.herebody_s, self.ts))) {
                
                self.herebody_s = self.te;
                p = $rb_minus(current_literal.$heredoc_e(), 1);
                self.cs = self.$pop_literal();
                
                p = $rb_plus(p, 1);
                _goto_level = _out;
                continue;;;
              } else {
                
                current_literal.$infer_indent_level(line);
                self.herebody_s = self.te;
              };
            } else {
              
              if ($truthy(current_literal.$nest_and_try_closing(self.$tok(), self.ts, self.te))) {
                
                self.cs = self.$pop_literal();
                
                p = $rb_plus(p, 1);
                _goto_level = _out;
                continue;;;};
              if ($truthy(self.herebody_s)) {
                
                p = $rb_minus(self.herebody_s, 1);
                self.herebody_s = nil;};
            };
            if ($truthy(($truthy($b = current_literal['$words?']()) ? self['$eof_codepoint?'](self.source_pts['$[]'](p))['$!']() : $b))) {
              current_literal.$extend_space(self.ts, self.te)
            } else {
              
              current_literal.$extend_string(self.$tok(), self.ts, self.te);
              current_literal.$flush_string();
            };;}
            else if ((178)['$===']($case)) {
            self.te = $rb_plus(p, 1);
            
            string = self.$tok();
            if ($truthy(($truthy($b = $rb_ge(self.version, 22)) ? self.cond['$active?']()['$!']() : $b))) {
              lookahead = self.source_buffer.$slice(Opal.Range.$new(self.te,$rb_plus(self.te, 2), true))};
            current_literal = self.$literal();
            if ($truthy(($truthy($b = current_literal['$heredoc?']()['$!']()) ? (token = current_literal.$nest_and_try_closing(string, self.ts, self.te, lookahead)) : $b))) {
              
              if (token['$[]'](0)['$==']("tLABEL_END")) {
                
                p = $rb_plus(p, 1);
                self.$pop_literal();
                self.cs = 766;
              } else {
                self.cs = self.$pop_literal()
              };
              
              p = $rb_plus(p, 1);
              _goto_level = _out;
              continue;;;
            } else {
              current_literal.$extend_string(string, self.ts, self.te)
            };;}
            else if ((184)['$===']($case)) {
            self.te = p;
            p = $rb_minus(p, 1);
            
            if ($truthy($rb_ge(self.version, 27))) {
              self.$literal().$extend_string(self.$tok(), self.ts, self.te)
            } else {
              
              message = (function() {if ($truthy(self.$tok()['$start_with?']("\#@@"))) {
                return "cvar_name"
              } else {
                return "ivar_name"
              }; return nil; })();
              self.$diagnostic("error", message, $hash2(["name"], {"name": self.$tok($rb_plus(self.ts, 1), self.te)}), self.$range($rb_plus(self.ts, 1), self.te));
            };;}
            else if ((183)['$===']($case)) {
            self.te = p;
            p = $rb_minus(p, 1);
            
            current_literal = self.$literal();
            current_literal.$flush_string();
            current_literal.$extend_content();
            self.$emit("tSTRING_DVAR", nil, self.ts, $rb_plus(self.ts, 1));
            p = self.ts;
            
            
            $writer = [self.top, self.cs];
            $send(self.stack, '[]=', Opal.to_a($writer));
            $writer[$rb_minus($writer["length"], 1)];;
            self.top = $rb_plus(self.top, 1);
            self.cs = 328;
            _goto_level = _again;
            continue;;;;}
            else if ((181)['$===']($case)) {
            self.te = p;
            p = $rb_minus(p, 1);
            
            string = self.$tok();
            if ($truthy(($truthy($b = $rb_ge(self.version, 22)) ? self.cond['$active?']()['$!']() : $b))) {
              lookahead = self.source_buffer.$slice(Opal.Range.$new(self.te,$rb_plus(self.te, 2), true))};
            current_literal = self.$literal();
            if ($truthy(($truthy($b = current_literal['$heredoc?']()['$!']()) ? (token = current_literal.$nest_and_try_closing(string, self.ts, self.te, lookahead)) : $b))) {
              
              if (token['$[]'](0)['$==']("tLABEL_END")) {
                
                p = $rb_plus(p, 1);
                self.$pop_literal();
                self.cs = 766;
              } else {
                self.cs = self.$pop_literal()
              };
              
              p = $rb_plus(p, 1);
              _goto_level = _out;
              continue;;;
            } else {
              current_literal.$extend_string(string, self.ts, self.te)
            };;}
            else if ((12)['$===']($case)) {
            
            p = $rb_minus(self.te, 1);;
            
            string = self.$tok();
            if ($truthy(($truthy($b = $rb_ge(self.version, 22)) ? self.cond['$active?']()['$!']() : $b))) {
              lookahead = self.source_buffer.$slice(Opal.Range.$new(self.te,$rb_plus(self.te, 2), true))};
            current_literal = self.$literal();
            if ($truthy(($truthy($b = current_literal['$heredoc?']()['$!']()) ? (token = current_literal.$nest_and_try_closing(string, self.ts, self.te, lookahead)) : $b))) {
              
              if (token['$[]'](0)['$==']("tLABEL_END")) {
                
                p = $rb_plus(p, 1);
                self.$pop_literal();
                self.cs = 766;
              } else {
                self.cs = self.$pop_literal()
              };
              
              p = $rb_plus(p, 1);
              _goto_level = _out;
              continue;;;
            } else {
              current_literal.$extend_string(string, self.ts, self.te)
            };;}
            else if ((186)['$===']($case)) {
            self.te = $rb_plus(p, 1);
            
            current_literal = self.$literal();
            if (self.te['$=='](pe)) {
              self.$diagnostic("fatal", "string_eof", nil, self.$range(current_literal.$str_s(), $rb_plus(current_literal.$str_s(), 1)))};
            if ($truthy(current_literal['$heredoc?']())) {
              
              line = self.$tok(self.herebody_s, self.ts).$gsub(/\r+$/, "".$freeze());
              if ($truthy(self['$version?'](18, 19, 20))) {
                line = line.$gsub(/\r.*$/, "".$freeze())};
              if ($truthy(current_literal.$nest_and_try_closing(line, self.herebody_s, self.ts))) {
                
                self.herebody_s = self.te;
                p = $rb_minus(current_literal.$heredoc_e(), 1);
                self.cs = self.$pop_literal();
                
                p = $rb_plus(p, 1);
                _goto_level = _out;
                continue;;;
              } else {
                
                current_literal.$infer_indent_level(line);
                self.herebody_s = self.te;
              };
            } else {
              
              if ($truthy(current_literal.$nest_and_try_closing(self.$tok(), self.ts, self.te))) {
                
                self.cs = self.$pop_literal();
                
                p = $rb_plus(p, 1);
                _goto_level = _out;
                continue;;;};
              if ($truthy(self.herebody_s)) {
                
                p = $rb_minus(self.herebody_s, 1);
                self.herebody_s = nil;};
            };
            if ($truthy(($truthy($b = current_literal['$words?']()) ? self['$eof_codepoint?'](self.source_pts['$[]'](p))['$!']() : $b))) {
              current_literal.$extend_space(self.ts, self.te)
            } else {
              
              current_literal.$extend_string(self.$tok(), self.ts, self.te);
              current_literal.$flush_string();
            };;}
            else if ((185)['$===']($case)) {
            self.te = $rb_plus(p, 1);
            
            string = self.$tok();
            if ($truthy(($truthy($b = $rb_ge(self.version, 22)) ? self.cond['$active?']()['$!']() : $b))) {
              lookahead = self.source_buffer.$slice(Opal.Range.$new(self.te,$rb_plus(self.te, 2), true))};
            current_literal = self.$literal();
            if ($truthy(($truthy($b = current_literal['$heredoc?']()['$!']()) ? (token = current_literal.$nest_and_try_closing(string, self.ts, self.te, lookahead)) : $b))) {
              
              if (token['$[]'](0)['$==']("tLABEL_END")) {
                
                p = $rb_plus(p, 1);
                self.$pop_literal();
                self.cs = 766;
              } else {
                self.cs = self.$pop_literal()
              };
              
              p = $rb_plus(p, 1);
              _goto_level = _out;
              continue;;;
            } else {
              current_literal.$extend_string(string, self.ts, self.te)
            };;}
            else if ((193)['$===']($case)) {
            self.te = $rb_plus(p, 1);
            
            current_literal = self.$literal();
            current_literal.$flush_string();
            current_literal.$extend_content();
            self.$emit("tSTRING_DBEG", "\#{".$freeze());
            if ($truthy(current_literal['$heredoc?']())) {
              
              
              $writer = [self.herebody_s];
              $send(current_literal, 'saved_herebody_s=', Opal.to_a($writer));
              $writer[$rb_minus($writer["length"], 1)];;
              self.herebody_s = nil;};
            current_literal.$start_interp_brace();
            self.command_start = true;
            self.cs = 773;
            
            p = $rb_plus(p, 1);
            _goto_level = _out;
            continue;;;;}
            else if ((15)['$===']($case)) {
            self.te = $rb_plus(p, 1);
            
            current_literal = self.$literal();
            current_literal.$flush_string();
            current_literal.$extend_content();
            self.$emit("tSTRING_DVAR", nil, self.ts, $rb_plus(self.ts, 1));
            p = self.ts;
            
            
            $writer = [self.top, self.cs];
            $send(self.stack, '[]=', Opal.to_a($writer));
            $writer[$rb_minus($writer["length"], 1)];;
            self.top = $rb_plus(self.top, 1);
            self.cs = 328;
            _goto_level = _again;
            continue;;;;}
            else if ((189)['$===']($case)) {
            self.te = $rb_plus(p, 1);
            
            current_literal = self.$literal();
            if (self.te['$=='](pe)) {
              self.$diagnostic("fatal", "string_eof", nil, self.$range(current_literal.$str_s(), $rb_plus(current_literal.$str_s(), 1)))};
            if ($truthy(current_literal['$heredoc?']())) {
              
              line = self.$tok(self.herebody_s, self.ts).$gsub(/\r+$/, "".$freeze());
              if ($truthy(self['$version?'](18, 19, 20))) {
                line = line.$gsub(/\r.*$/, "".$freeze())};
              if ($truthy(current_literal.$nest_and_try_closing(line, self.herebody_s, self.ts))) {
                
                self.herebody_s = self.te;
                p = $rb_minus(current_literal.$heredoc_e(), 1);
                self.cs = self.$pop_literal();
                
                p = $rb_plus(p, 1);
                _goto_level = _out;
                continue;;;
              } else {
                
                current_literal.$infer_indent_level(line);
                self.herebody_s = self.te;
              };
            } else {
              
              if ($truthy(current_literal.$nest_and_try_closing(self.$tok(), self.ts, self.te))) {
                
                self.cs = self.$pop_literal();
                
                p = $rb_plus(p, 1);
                _goto_level = _out;
                continue;;;};
              if ($truthy(self.herebody_s)) {
                
                p = $rb_minus(self.herebody_s, 1);
                self.herebody_s = nil;};
            };
            if ($truthy(($truthy($b = current_literal['$words?']()) ? self['$eof_codepoint?'](self.source_pts['$[]'](p))['$!']() : $b))) {
              current_literal.$extend_space(self.ts, self.te)
            } else {
              
              current_literal.$extend_string(self.$tok(), self.ts, self.te);
              current_literal.$flush_string();
            };;}
            else if ((188)['$===']($case)) {
            self.te = $rb_plus(p, 1);
            
            string = self.$tok();
            if ($truthy(($truthy($b = $rb_ge(self.version, 22)) ? self.cond['$active?']()['$!']() : $b))) {
              lookahead = self.source_buffer.$slice(Opal.Range.$new(self.te,$rb_plus(self.te, 2), true))};
            current_literal = self.$literal();
            if ($truthy(($truthy($b = current_literal['$heredoc?']()['$!']()) ? (token = current_literal.$nest_and_try_closing(string, self.ts, self.te, lookahead)) : $b))) {
              
              if (token['$[]'](0)['$==']("tLABEL_END")) {
                
                p = $rb_plus(p, 1);
                self.$pop_literal();
                self.cs = 766;
              } else {
                self.cs = self.$pop_literal()
              };
              
              p = $rb_plus(p, 1);
              _goto_level = _out;
              continue;;;
            } else {
              current_literal.$extend_string(string, self.ts, self.te)
            };;}
            else if ((195)['$===']($case)) {
            self.te = p;
            p = $rb_minus(p, 1);
            
            if ($truthy($rb_ge(self.version, 27))) {
              self.$literal().$extend_string(self.$tok(), self.ts, self.te)
            } else {
              
              message = (function() {if ($truthy(self.$tok()['$start_with?']("\#@@"))) {
                return "cvar_name"
              } else {
                return "ivar_name"
              }; return nil; })();
              self.$diagnostic("error", message, $hash2(["name"], {"name": self.$tok($rb_plus(self.ts, 1), self.te)}), self.$range($rb_plus(self.ts, 1), self.te));
            };;}
            else if ((194)['$===']($case)) {
            self.te = p;
            p = $rb_minus(p, 1);
            
            current_literal = self.$literal();
            current_literal.$flush_string();
            current_literal.$extend_content();
            self.$emit("tSTRING_DVAR", nil, self.ts, $rb_plus(self.ts, 1));
            p = self.ts;
            
            
            $writer = [self.top, self.cs];
            $send(self.stack, '[]=', Opal.to_a($writer));
            $writer[$rb_minus($writer["length"], 1)];;
            self.top = $rb_plus(self.top, 1);
            self.cs = 328;
            _goto_level = _again;
            continue;;;;}
            else if ((191)['$===']($case)) {
            self.te = p;
            p = $rb_minus(p, 1);
            
            self.$literal().$extend_space(self.ts, self.te);;}
            else if ((192)['$===']($case)) {
            self.te = p;
            p = $rb_minus(p, 1);
            
            string = self.$tok();
            if ($truthy(($truthy($b = $rb_ge(self.version, 22)) ? self.cond['$active?']()['$!']() : $b))) {
              lookahead = self.source_buffer.$slice(Opal.Range.$new(self.te,$rb_plus(self.te, 2), true))};
            current_literal = self.$literal();
            if ($truthy(($truthy($b = current_literal['$heredoc?']()['$!']()) ? (token = current_literal.$nest_and_try_closing(string, self.ts, self.te, lookahead)) : $b))) {
              
              if (token['$[]'](0)['$==']("tLABEL_END")) {
                
                p = $rb_plus(p, 1);
                self.$pop_literal();
                self.cs = 766;
              } else {
                self.cs = self.$pop_literal()
              };
              
              p = $rb_plus(p, 1);
              _goto_level = _out;
              continue;;;
            } else {
              current_literal.$extend_string(string, self.ts, self.te)
            };;}
            else if ((14)['$===']($case)) {
            
            p = $rb_minus(self.te, 1);;
            
            string = self.$tok();
            if ($truthy(($truthy($b = $rb_ge(self.version, 22)) ? self.cond['$active?']()['$!']() : $b))) {
              lookahead = self.source_buffer.$slice(Opal.Range.$new(self.te,$rb_plus(self.te, 2), true))};
            current_literal = self.$literal();
            if ($truthy(($truthy($b = current_literal['$heredoc?']()['$!']()) ? (token = current_literal.$nest_and_try_closing(string, self.ts, self.te, lookahead)) : $b))) {
              
              if (token['$[]'](0)['$==']("tLABEL_END")) {
                
                p = $rb_plus(p, 1);
                self.$pop_literal();
                self.cs = 766;
              } else {
                self.cs = self.$pop_literal()
              };
              
              p = $rb_plus(p, 1);
              _goto_level = _out;
              continue;;;
            } else {
              current_literal.$extend_string(string, self.ts, self.te)
            };;}
            else if ((197)['$===']($case)) {
            self.te = $rb_plus(p, 1);
            
            current_literal = self.$literal();
            if (self.te['$=='](pe)) {
              self.$diagnostic("fatal", "string_eof", nil, self.$range(current_literal.$str_s(), $rb_plus(current_literal.$str_s(), 1)))};
            if ($truthy(current_literal['$heredoc?']())) {
              
              line = self.$tok(self.herebody_s, self.ts).$gsub(/\r+$/, "".$freeze());
              if ($truthy(self['$version?'](18, 19, 20))) {
                line = line.$gsub(/\r.*$/, "".$freeze())};
              if ($truthy(current_literal.$nest_and_try_closing(line, self.herebody_s, self.ts))) {
                
                self.herebody_s = self.te;
                p = $rb_minus(current_literal.$heredoc_e(), 1);
                self.cs = self.$pop_literal();
                
                p = $rb_plus(p, 1);
                _goto_level = _out;
                continue;;;
              } else {
                
                current_literal.$infer_indent_level(line);
                self.herebody_s = self.te;
              };
            } else {
              
              if ($truthy(current_literal.$nest_and_try_closing(self.$tok(), self.ts, self.te))) {
                
                self.cs = self.$pop_literal();
                
                p = $rb_plus(p, 1);
                _goto_level = _out;
                continue;;;};
              if ($truthy(self.herebody_s)) {
                
                p = $rb_minus(self.herebody_s, 1);
                self.herebody_s = nil;};
            };
            if ($truthy(($truthy($b = current_literal['$words?']()) ? self['$eof_codepoint?'](self.source_pts['$[]'](p))['$!']() : $b))) {
              current_literal.$extend_space(self.ts, self.te)
            } else {
              
              current_literal.$extend_string(self.$tok(), self.ts, self.te);
              current_literal.$flush_string();
            };;}
            else if ((196)['$===']($case)) {
            self.te = $rb_plus(p, 1);
            
            string = self.$tok();
            if ($truthy(($truthy($b = $rb_ge(self.version, 22)) ? self.cond['$active?']()['$!']() : $b))) {
              lookahead = self.source_buffer.$slice(Opal.Range.$new(self.te,$rb_plus(self.te, 2), true))};
            current_literal = self.$literal();
            if ($truthy(($truthy($b = current_literal['$heredoc?']()['$!']()) ? (token = current_literal.$nest_and_try_closing(string, self.ts, self.te, lookahead)) : $b))) {
              
              if (token['$[]'](0)['$==']("tLABEL_END")) {
                
                p = $rb_plus(p, 1);
                self.$pop_literal();
                self.cs = 766;
              } else {
                self.cs = self.$pop_literal()
              };
              
              p = $rb_plus(p, 1);
              _goto_level = _out;
              continue;;;
            } else {
              current_literal.$extend_string(string, self.ts, self.te)
            };;}
            else if ((199)['$===']($case)) {
            self.te = p;
            p = $rb_minus(p, 1);
            
            self.$literal().$extend_space(self.ts, self.te);;}
            else if ((200)['$===']($case)) {
            self.te = $rb_plus(p, 1);
            
            self.$emit("tREGEXP_OPT", self.$tok(self.ts, $rb_minus(self.te, 1)), self.ts, $rb_minus(self.te, 1));
            p = $rb_minus(p, 1);
            
            self.cs = 781;
            _goto_level = _again;
            continue;;;;}
            else if ((201)['$===']($case)) {
            self.te = p;
            p = $rb_minus(p, 1);
            
            unknown_options = self.$tok().$scan(/[^imxouesn]/);
            if ($truthy(unknown_options['$any?']())) {
              self.$diagnostic("error", "regexp_options", $hash2(["options"], {"options": unknown_options.$join()}))};
            self.$emit("tREGEXP_OPT");
            self.cs = 781;
            
            p = $rb_plus(p, 1);
            _goto_level = _out;
            continue;;;;}
            else if ((16)['$===']($case)) {
            self.te = $rb_plus(p, 1);
            
            if ($truthy(self.$tok()['$=~'](/^\$([1-9][0-9]*)$/))) {
              self.$emit("tNTH_REF", self.$tok($rb_plus(self.ts, 1)).$to_i())
            } else if ($truthy(self.$tok()['$=~'](/^\$([&`'+])$/))) {
              self.$emit("tBACK_REF")
            } else {
              self.$emit("tGVAR")
            };
            self.cs = self.$stack_pop();
            
            p = $rb_plus(p, 1);
            _goto_level = _out;
            continue;;;;}
            else if ((202)['$===']($case)) {
            self.te = p;
            p = $rb_minus(p, 1);
            
            if ($truthy(self.$tok()['$=~'](/^\$([1-9][0-9]*)$/))) {
              self.$emit("tNTH_REF", self.$tok($rb_plus(self.ts, 1)).$to_i())
            } else if ($truthy(self.$tok()['$=~'](/^\$([&`'+])$/))) {
              self.$emit("tBACK_REF")
            } else {
              self.$emit("tGVAR")
            };
            self.cs = self.$stack_pop();
            
            p = $rb_plus(p, 1);
            _goto_level = _out;
            continue;;;;}
            else if ((204)['$===']($case)) {
            self.te = p;
            p = $rb_minus(p, 1);
            
            if ($truthy(self.$tok()['$=~'](/^@@[0-9]/))) {
              self.$diagnostic("error", "cvar_name", $hash2(["name"], {"name": self.$tok()}))};
            self.$emit("tCVAR");
            self.cs = self.$stack_pop();
            
            p = $rb_plus(p, 1);
            _goto_level = _out;
            continue;;;;}
            else if ((203)['$===']($case)) {
            self.te = p;
            p = $rb_minus(p, 1);
            
            if ($truthy(self.$tok()['$=~'](/^@[0-9]/))) {
              self.$diagnostic("error", "ivar_name", $hash2(["name"], {"name": self.$tok()}))};
            self.$emit("tIVAR");
            self.cs = self.$stack_pop();
            
            p = $rb_plus(p, 1);
            _goto_level = _out;
            continue;;;;}
            else if ((225)['$===']($case)) {
            self.te = $rb_plus(p, 1);
            
            self.$emit_table($$($nesting, 'KEYWORDS_BEGIN'));
            self.cs = 446;
            
            p = $rb_plus(p, 1);
            _goto_level = _out;
            continue;;;;}
            else if ((211)['$===']($case)) {
            self.te = $rb_plus(p, 1);
            
            self.$emit("tIDENTIFIER");
            self.cs = 446;
            
            p = $rb_plus(p, 1);
            _goto_level = _out;
            continue;;;;}
            else if ((18)['$===']($case)) {
            self.te = $rb_plus(p, 1);
            
            p = $rb_minus(self.ts, 1);
            self.cs = 781;
            
            
            $writer = [self.top, self.cs];
            $send(self.stack, '[]=', Opal.to_a($writer));
            $writer[$rb_minus($writer["length"], 1)];;
            self.top = $rb_plus(self.top, 1);
            self.cs = 328;
            _goto_level = _again;
            continue;;;;}
            else if ((208)['$===']($case)) {
            self.te = $rb_plus(p, 1);
            
            self.$emit_table($$($nesting, 'PUNCTUATION'));
            self.cs = 446;
            
            p = $rb_plus(p, 1);
            _goto_level = _out;
            continue;;;;}
            else if ((220)['$===']($case)) {
            self.te = $rb_plus(p, 1);
            
            p = $rb_minus(p, 1);
            p = $rb_minus(p, 1);
            
            self.cs = 781;
            _goto_level = _again;
            continue;;;;}
            else if ((20)['$===']($case)) {
            self.te = $rb_plus(p, 1);
            
            if ($truthy(self['$version?'](23))) {
              
              $b = [self.$tok()['$[]']($range(0, -2, false)), self.$tok()['$[]'](-1).$chr()], (type = $b[0]), (delimiter = $b[1]), $b;
              
              self.cs = self.$push_literal(type, delimiter, self.ts);
              _goto_level = _again;
              continue;;;
            } else {
              
              p = $rb_minus(self.ts, 1);
              
              self.cs = 781;
              _goto_level = _again;
              continue;;;
            };;}
            else if ((207)['$===']($case)) {
            self.te = $rb_plus(p, 1);
            
            p = $rb_minus(p, 1);
            
            self.cs = 781;
            _goto_level = _again;
            continue;;;;}
            else if ((206)['$===']($case)) {
            self.te = $rb_plus(p, 1);
            
            p = $rb_minus(p, 1);
            
            p = $rb_plus(p, 1);
            _goto_level = _out;
            continue;;;;}
            else if ((224)['$===']($case)) {
            self.te = p;
            p = $rb_minus(p, 1);
            
            self.$emit_table($$($nesting, 'KEYWORDS_BEGIN'));
            self.cs = 446;
            
            p = $rb_plus(p, 1);
            _goto_level = _out;
            continue;;;;}
            else if ((221)['$===']($case)) {
            self.te = p;
            p = $rb_minus(p, 1);
            
            self.$emit("tCONSTANT");
            self.cs = 446;
            
            p = $rb_plus(p, 1);
            _goto_level = _out;
            continue;;;;}
            else if ((223)['$===']($case)) {
            self.te = p;
            p = $rb_minus(p, 1);
            
            self.$emit("tIDENTIFIER");
            self.cs = 446;
            
            p = $rb_plus(p, 1);
            _goto_level = _out;
            continue;;;;}
            else if ((218)['$===']($case)) {
            self.te = p;
            p = $rb_minus(p, 1);
            
            p = $rb_minus(self.ts, 1);
            self.cs = 781;
            
            
            $writer = [self.top, self.cs];
            $send(self.stack, '[]=', Opal.to_a($writer));
            $writer[$rb_minus($writer["length"], 1)];;
            self.top = $rb_plus(self.top, 1);
            self.cs = 328;
            _goto_level = _again;
            continue;;;;}
            else if ((214)['$===']($case)) {
            self.te = p;
            p = $rb_minus(p, 1);
            
            self.$emit_table($$($nesting, 'PUNCTUATION'));
            self.cs = 446;
            
            p = $rb_plus(p, 1);
            _goto_level = _out;
            continue;;;;}
            else if ((219)['$===']($case)) {
            self.te = p;
            p = $rb_minus(p, 1);
            
            p = $rb_minus(p, 1);
            
            self.cs = 543;
            _goto_level = _again;
            continue;;;;}
            else if ((212)['$===']($case)) {
            self.te = p;
            p = $rb_minus(p, 1);}
            else if ((217)['$===']($case)) {
            self.te = p;
            p = $rb_minus(p, 1);
            
            p = $rb_minus(p, 1);
            
            self.cs = 781;
            _goto_level = _again;
            continue;;;;}
            else if ((19)['$===']($case)) {
            
            p = $rb_minus(self.te, 1);;
            
            self.$emit_table($$($nesting, 'PUNCTUATION'));
            self.cs = 446;
            
            p = $rb_plus(p, 1);
            _goto_level = _out;
            continue;;;;}
            else if ((17)['$===']($case)) {
            
            p = $rb_minus(self.te, 1);;
            
            p = $rb_minus(p, 1);
            
            self.cs = 781;
            _goto_level = _again;
            continue;;;;}
            else if ((210)['$===']($case)) {
            $case = self.act;
            if ((43)['$===']($case)) {
            
            p = $rb_minus(self.te, 1);;
            self.$emit_table($$($nesting, 'KEYWORDS_BEGIN'));
            self.cs = 446;
            
            p = $rb_plus(p, 1);
            _goto_level = _out;
            continue;;;}
            else if ((44)['$===']($case)) {
            
            p = $rb_minus(self.te, 1);;
            self.$emit("tCONSTANT");
            self.cs = 446;
            
            p = $rb_plus(p, 1);
            _goto_level = _out;
            continue;;;}
            else if ((45)['$===']($case)) {
            
            p = $rb_minus(self.te, 1);;
            self.$emit("tIDENTIFIER");
            self.cs = 446;
            
            p = $rb_plus(p, 1);
            _goto_level = _out;
            continue;;;};}
            else if ((22)['$===']($case)) {
            self.te = $rb_plus(p, 1);
            
            self.$emit("tLABEL", self.$tok(self.ts, $rb_minus(self.te, 2)), self.ts, $rb_minus(self.te, 1));
            p = $rb_minus(p, 1);
            self.cs = 766;
            
            p = $rb_plus(p, 1);
            _goto_level = _out;
            continue;;;;}
            else if ((227)['$===']($case)) {
            self.te = $rb_plus(p, 1);
            
            p = $rb_minus(p, 1);
            
            self.cs = 781;
            _goto_level = _again;
            continue;;;;}
            else if ((226)['$===']($case)) {
            self.te = $rb_plus(p, 1);
            
            p = $rb_minus(p, 1);
            
            p = $rb_plus(p, 1);
            _goto_level = _out;
            continue;;;;}
            else if ((229)['$===']($case)) {
            self.te = p;
            p = $rb_minus(p, 1);}
            else if ((228)['$===']($case)) {
            self.te = p;
            p = $rb_minus(p, 1);
            
            p = $rb_minus(p, 1);
            
            self.cs = 781;
            _goto_level = _again;
            continue;;;;}
            else if ((21)['$===']($case)) {
            
            p = $rb_minus(self.te, 1);;
            
            p = $rb_minus(p, 1);
            
            self.cs = 781;
            _goto_level = _again;
            continue;;;;}
            else if ((235)['$===']($case)) {
            self.te = $rb_plus(p, 1);
            
            self.$emit_table($$($nesting, 'PUNCTUATION'));
            self.cs = 474;
            
            p = $rb_plus(p, 1);
            _goto_level = _out;
            continue;;;;}
            else if ((234)['$===']($case)) {
            self.te = $rb_plus(p, 1);
            
            p = $rb_minus(p, 1);
            
            self.cs = 781;
            _goto_level = _again;
            continue;;;;}
            else if ((233)['$===']($case)) {
            self.te = $rb_plus(p, 1);
            
            p = $rb_minus(p, 1);
            
            p = $rb_plus(p, 1);
            _goto_level = _out;
            continue;;;;}
            else if ((245)['$===']($case)) {
            self.te = p;
            p = $rb_minus(p, 1);
            
            self.$emit("tCONSTANT");
            self.cs = self.$arg_or_cmdarg(cmd_state);
            
            p = $rb_plus(p, 1);
            _goto_level = _out;
            continue;;;;}
            else if ((236)['$===']($case)) {
            self.te = p;
            p = $rb_minus(p, 1);
            
            self.$emit("tIDENTIFIER");
            self.cs = self.$arg_or_cmdarg(cmd_state);
            
            p = $rb_plus(p, 1);
            _goto_level = _out;
            continue;;;;}
            else if ((241)['$===']($case)) {
            self.te = p;
            p = $rb_minus(p, 1);
            
            self.$emit_table($$($nesting, 'PUNCTUATION'));
            self.cs = 474;
            
            p = $rb_plus(p, 1);
            _goto_level = _out;
            continue;;;;}
            else if ((239)['$===']($case)) {
            self.te = p;
            p = $rb_minus(p, 1);}
            else if ((244)['$===']($case)) {
            self.te = p;
            p = $rb_minus(p, 1);
            
            p = $rb_minus(p, 1);
            
            self.cs = 781;
            _goto_level = _again;
            continue;;;;}
            else if ((268)['$===']($case)) {
            self.te = $rb_plus(p, 1);
            
            p = $rb_minus(self.ts, 1);
            
            self.cs = 781;
            _goto_level = _again;
            continue;;;;}
            else if ((251)['$===']($case)) {
            self.te = $rb_plus(p, 1);
            
            if (self.$tok(tm, $rb_plus(tm, 1))['$==']("/".$freeze())) {
              self.$diagnostic("warning", "ambiguous_literal", nil, self.$range(tm, $rb_plus(tm, 1)))};
            p = $rb_minus(tm, 1);
            
            self.cs = 543;
            _goto_level = _again;
            continue;;;;}
            else if ((257)['$===']($case)) {
            self.te = $rb_plus(p, 1);
            
            p = $rb_minus(p, 1);
            p = $rb_minus(p, 1);
            
            self.cs = 543;
            _goto_level = _again;
            continue;;;;}
            else if ((24)['$===']($case)) {
            self.te = $rb_plus(p, 1);
            
            p = $rb_minus(self.ts, 1);
            
            self.cs = 543;
            _goto_level = _again;
            continue;;;;}
            else if ((259)['$===']($case)) {
            self.te = $rb_plus(p, 1);
            
            p = $rb_minus(tm, 1);
            
            self.cs = 781;
            _goto_level = _again;
            continue;;;;}
            else if ((39)['$===']($case)) {
            self.te = $rb_plus(p, 1);
            
            p = $rb_minus(self.ts, 1);
            
            self.cs = 781;
            _goto_level = _again;
            continue;;;;}
            else if ((246)['$===']($case)) {
            self.te = $rb_plus(p, 1);
            
            p = $rb_minus(p, 1);
            
            self.cs = 543;
            _goto_level = _again;
            continue;;;;}
            else if ((247)['$===']($case)) {
            self.te = $rb_plus(p, 1);
            
            p = $rb_minus(p, 1);
            
            p = $rb_plus(p, 1);
            _goto_level = _out;
            continue;;;;}
            else if ((258)['$===']($case)) {
            self.te = p;
            p = $rb_minus(p, 1);
            
            p = $rb_minus(p, 1);
            
            self.cs = 543;
            _goto_level = _again;
            continue;;;;}
            else if ((254)['$===']($case)) {
            self.te = p;
            p = $rb_minus(p, 1);
            
            self.$diagnostic("warning", "ambiguous_prefix", $hash2(["prefix"], {"prefix": self.$tok(tm, self.te)}), self.$range(tm, self.te));
            p = $rb_minus(tm, 1);
            
            self.cs = 543;
            _goto_level = _again;
            continue;;;;}
            else if ((256)['$===']($case)) {
            self.te = p;
            p = $rb_minus(p, 1);
            
            p = $rb_minus(p, 1);
            
            self.cs = 543;
            _goto_level = _again;
            continue;;;;}
            else if ((250)['$===']($case)) {
            self.te = p;
            p = $rb_minus(p, 1);
            
            p = $rb_minus(self.ts, 1);
            
            self.cs = 781;
            _goto_level = _again;
            continue;;;;}
            else if ((249)['$===']($case)) {
            self.te = p;
            p = $rb_minus(p, 1);}
            else if ((267)['$===']($case)) {
            self.te = p;
            p = $rb_minus(p, 1);
            
            p = $rb_minus(p, 1);
            
            self.cs = 543;
            _goto_level = _again;
            continue;;;;}
            else if ((25)['$===']($case)) {
            
            p = $rb_minus(self.te, 1);;}
            else if ((41)['$===']($case)) {
            
            p = $rb_minus(self.te, 1);;
            
            p = $rb_minus(p, 1);
            
            self.cs = 543;
            _goto_level = _again;
            continue;;;;}
            else if ((23)['$===']($case)) {
            $case = self.act;
            if ((71)['$===']($case)) {
            
            p = $rb_minus(self.te, 1);;
            if (self.$tok(tm, $rb_plus(tm, 1))['$==']("/".$freeze())) {
              self.$diagnostic("warning", "ambiguous_literal", nil, self.$range(tm, $rb_plus(tm, 1)))};
            p = $rb_minus(tm, 1);
            
            self.cs = 543;
            _goto_level = _again;
            continue;;;}
            else if ((72)['$===']($case)) {
            
            p = $rb_minus(self.te, 1);;
            self.$diagnostic("warning", "ambiguous_prefix", $hash2(["prefix"], {"prefix": self.$tok(tm, self.te)}), self.$range(tm, self.te));
            p = $rb_minus(tm, 1);
            
            self.cs = 543;
            _goto_level = _again;
            continue;;;}
            else if ((77)['$===']($case)) {
            
            p = $rb_minus(self.te, 1);;
            p = $rb_minus(self.ts, 1);
            
            self.cs = 781;
            _goto_level = _again;
            continue;;;}
            else {
            
            p = $rb_minus(self.te, 1);;};}
            else if ((43)['$===']($case)) {
            self.te = $rb_plus(p, 1);
            
            p = $rb_minus(self.ts, 1);
            
            self.cs = 474;
            _goto_level = _again;
            continue;;;;}
            else if ((272)['$===']($case)) {
            self.te = $rb_plus(p, 1);
            
            p = $rb_minus(p, 1);
            
            p = $rb_plus(p, 1);
            _goto_level = _out;
            continue;;;;}
            else if ((273)['$===']($case)) {
            self.te = p;
            p = $rb_minus(p, 1);
            
            p = $rb_minus(self.ts, 1);
            
            self.cs = 474;
            _goto_level = _again;
            continue;;;;}
            else if ((44)['$===']($case)) {
            
            p = $rb_minus(self.te, 1);;
            
            p = $rb_minus(self.ts, 1);
            
            self.cs = 474;
            _goto_level = _again;
            continue;;;;}
            else if ((42)['$===']($case)) {
            $case = self.act;
            if ((84)['$===']($case)) {
            
            p = $rb_minus(self.te, 1);;
            if ($truthy(self.cond['$active?']())) {
              self.$emit("kDO_COND", "do".$freeze(), $rb_minus(self.te, 2), self.te)
            } else {
              self.$emit("kDO", "do".$freeze(), $rb_minus(self.te, 2), self.te)
            };
            self.cs = 773;
            
            p = $rb_plus(p, 1);
            _goto_level = _out;
            continue;;;}
            else if ((85)['$===']($case)) {
            
            p = $rb_minus(self.te, 1);;
            p = $rb_minus(self.ts, 1);
            
            self.cs = 474;
            _goto_level = _again;
            continue;;;};}
            else if ((283)['$===']($case)) {
            self.te = $rb_plus(p, 1);
            
            self.$emit_do(true);
            self.cs = 773;
            
            p = $rb_plus(p, 1);
            _goto_level = _out;
            continue;;;;}
            else if ((276)['$===']($case)) {
            self.te = $rb_plus(p, 1);
            
            p = $rb_minus(p, 1);
            
            self.cs = 781;
            _goto_level = _again;
            continue;;;;}
            else if ((277)['$===']($case)) {
            self.te = $rb_plus(p, 1);
            
            p = $rb_minus(p, 1);
            
            p = $rb_plus(p, 1);
            _goto_level = _out;
            continue;;;;}
            else if ((278)['$===']($case)) {
            self.te = p;
            p = $rb_minus(p, 1);}
            else if ((281)['$===']($case)) {
            self.te = p;
            p = $rb_minus(p, 1);
            
            p = $rb_minus(p, 1);
            
            self.cs = 781;
            _goto_level = _again;
            continue;;;;}
            else if ((287)['$===']($case)) {
            self.te = $rb_plus(p, 1);
            
            p = $rb_minus(p, 1);
            
            self.cs = 543;
            _goto_level = _again;
            continue;;;;}
            else if ((286)['$===']($case)) {
            self.te = $rb_plus(p, 1);
            
            p = $rb_minus(p, 1);
            
            p = $rb_plus(p, 1);
            _goto_level = _out;
            continue;;;;}
            else if ((295)['$===']($case)) {
            self.te = p;
            p = $rb_minus(p, 1);
            
            p = $rb_minus(self.ts, 1);
            
            self.cs = 543;
            _goto_level = _again;
            continue;;;;}
            else if ((289)['$===']($case)) {
            self.te = p;
            p = $rb_minus(p, 1);}
            else if ((293)['$===']($case)) {
            self.te = p;
            p = $rb_minus(p, 1);
            
            p = $rb_minus(p, 1);
            
            self.cs = 543;
            _goto_level = _again;
            continue;;;;}
            else if ((288)['$===']($case)) {
            $case = self.act;
            if ((92)['$===']($case)) {
            
            p = $rb_minus(self.te, 1);;
            self.$emit_table($$($nesting, 'KEYWORDS'));
            self.cs = 543;
            
            p = $rb_plus(p, 1);
            _goto_level = _out;
            continue;;;}
            else if ((93)['$===']($case)) {
            
            p = $rb_minus(self.te, 1);;
            p = $rb_minus(self.ts, 1);
            
            self.cs = 543;
            _goto_level = _again;
            continue;;;};}
            else if ((56)['$===']($case)) {
            self.te = $rb_plus(p, 1);
            
            self.$emit("tUNARY_NUM", self.$tok(self.ts, $rb_plus(self.ts, 1)), self.ts, $rb_plus(self.ts, 1));
            p = $rb_minus(p, 1);
            self.cs = 781;
            
            p = $rb_plus(p, 1);
            _goto_level = _out;
            continue;;;;}
            else if ((328)['$===']($case)) {
            self.te = $rb_plus(p, 1);
            
            type = (delimiter = self.$tok()['$[]'](0).$chr());
            p = $rb_minus(p, 1);
            
            self.cs = self.$push_literal(type, delimiter, self.ts);
            _goto_level = _again;
            continue;;;;}
            else if ((320)['$===']($case)) {
            self.te = $rb_plus(p, 1);
            
            $b = [self.source_buffer.$slice(self.ts).$chr(), self.$tok()['$[]'](-1).$chr()], (type = $b[0]), (delimiter = $b[1]), $b;
            
            self.cs = self.$push_literal(type, delimiter, self.ts);
            _goto_level = _again;
            continue;;;;}
            else if ((54)['$===']($case)) {
            self.te = $rb_plus(p, 1);
            
            $b = [self.$tok()['$[]']($range(0, -2, false)), self.$tok()['$[]'](-1).$chr()], (type = $b[0]), (delimiter = $b[1]), $b;
            
            self.cs = self.$push_literal(type, delimiter, self.ts);
            _goto_level = _again;
            continue;;;;}
            else if ((341)['$===']($case)) {
            self.te = $rb_plus(p, 1);
            
            p = $rb_minus(p, 1);
            p = $rb_minus(p, 1);
            self.$emit("tSYMBEG", self.$tok(self.ts, $rb_plus(self.ts, 1)), self.ts, $rb_plus(self.ts, 1));
            
            self.cs = 333;
            _goto_level = _again;
            continue;;;;}
            else if ((329)['$===']($case)) {
            self.te = $rb_plus(p, 1);
            
            $b = [self.$tok(), self.$tok()['$[]'](-1).$chr()], (type = $b[0]), (delimiter = $b[1]), $b;
            
            self.cs = self.$push_literal(type, delimiter, self.ts);
            _goto_level = _again;
            continue;;;;}
            else if ((340)['$===']($case)) {
            self.te = $rb_plus(p, 1);
            
            self.$emit("tSYMBOL", self.$tok($rb_plus(self.ts, 1), $rb_plus(self.ts, 2)));
            self.cs = 781;
            
            p = $rb_plus(p, 1);
            _goto_level = _out;
            continue;;;;}
            else if ((68)['$===']($case)) {
            self.te = $rb_plus(p, 1);
            
            self.$emit("tSYMBOL", self.$tok($rb_plus(self.ts, 1)), self.ts);
            self.cs = 781;
            
            p = $rb_plus(p, 1);
            _goto_level = _out;
            continue;;;;}
            else if ((351)['$===']($case)) {
            self.te = $rb_plus(p, 1);
            
            escape = $hash2([" ", "\r", "\n", "\t", "\v", "\f"], {" ": "\\s", "\r": "\\r", "\n": "\\n", "\t": "\\t", "\v": "\\v", "\f": "\\f"})['$[]'](self.source_buffer.$slice($rb_plus(self.ts, 1)));
            self.$diagnostic("warning", "invalid_escape_use", $hash2(["escape"], {"escape": escape}), self.$range());
            p = $rb_minus(self.ts, 1);
            
            self.cs = 781;
            _goto_level = _again;
            continue;;;;}
            else if ((350)['$===']($case)) {
            self.te = $rb_plus(p, 1);
            
            self.$diagnostic("fatal", "incomplete_escape", nil, self.$range(self.ts, $rb_plus(self.ts, 1)));;}
            else if ((330)['$===']($case)) {
            self.te = $rb_plus(p, 1);
            
            self.$emit_table($$($nesting, 'PUNCTUATION_BEGIN'));
            
            p = $rb_plus(p, 1);
            _goto_level = _out;
            continue;;;;}
            else if ((51)['$===']($case)) {
            self.te = $rb_plus(p, 1);
            
            p = $rb_minus(p, 1);
            if ($truthy(self['$version?'](18))) {
              
              ident = self.$tok(self.ts, $rb_minus(self.te, 2));
              self.$emit((function() {if ($truthy(self.source_buffer.$slice(self.ts)['$=~'](/[A-Z]/))) {
                return "tCONSTANT"
              } else {
                return "tIDENTIFIER"
              }; return nil; })(), ident, self.ts, $rb_minus(self.te, 2));
              p = $rb_minus(p, 1);
              if ($truthy(($truthy($b = self.static_env['$nil?']()['$!']()) ? self.static_env['$declared?'](ident) : $b))) {
                self.cs = 781
              } else {
                self.cs = self.$arg_or_cmdarg(cmd_state)
              };
            } else {
              
              self.$emit("tLABEL", self.$tok(self.ts, $rb_minus(self.te, 2)), self.ts, $rb_minus(self.te, 1));
              self.cs = 766;
            };
            
            p = $rb_plus(p, 1);
            _goto_level = _out;
            continue;;;;}
            else if ((327)['$===']($case)) {
            self.te = $rb_plus(p, 1);
            
            if ($truthy($rb_ge(self.version, 28))) {
              if ($truthy(($truthy($b = self.lambda_stack['$any?']()) ? $rb_plus(self.lambda_stack.$last(), 1)['$=='](self.paren_nest) : $b))) {
                self.$emit("tDOT3")
              } else {
                self.$emit("tBDOT3")
              }
            } else if ($truthy($rb_ge(self.version, 27))) {
              self.$emit("tBDOT3")
            } else {
              self.$emit("tDOT3")
            };
            self.cs = 543;
            
            p = $rb_plus(p, 1);
            _goto_level = _out;
            continue;;;;}
            else if ((48)['$===']($case)) {
            self.te = $rb_plus(p, 1);
            
            self.$emit("tIDENTIFIER", ident_tok, ident_ts, ident_te);
            p = $rb_minus(ident_te, 1);
            if ($truthy(($truthy($b = ($truthy($c = self.static_env['$nil?']()['$!']()) ? self.static_env['$declared?'](ident_tok) : $c)) ? $rb_lt(self.version, 25) : $b))) {
              self.cs = 446
            } else {
              self.cs = 505
            };
            
            p = $rb_plus(p, 1);
            _goto_level = _out;
            continue;;;;}
            else if ((314)['$===']($case)) {
            self.te = $rb_plus(p, 1);
            
            p = $rb_minus(self.ts, 1);
            self.cs_before_block_comment = self.cs;
            
            self.cs = 185;
            _goto_level = _again;
            continue;;;;}
            else if ((55)['$===']($case)) {
            self.te = $rb_plus(p, 1);
            
            p = $rb_minus(self.ts, 1);
            
            self.cs = 781;
            _goto_level = _again;
            continue;;;;}
            else if ((298)['$===']($case)) {
            self.te = $rb_plus(p, 1);
            
            p = $rb_minus(p, 1);
            
            p = $rb_plus(p, 1);
            _goto_level = _out;
            continue;;;;}
            else if ((325)['$===']($case)) {
            self.te = p;
            p = $rb_minus(p, 1);
            
            self.$emit("tUNARY_NUM", self.$tok(self.ts, $rb_plus(self.ts, 1)), self.ts, $rb_plus(self.ts, 1));
            p = $rb_minus(p, 1);
            self.cs = 781;
            
            p = $rb_plus(p, 1);
            _goto_level = _out;
            continue;;;;}
            else if ((324)['$===']($case)) {
            self.te = p;
            p = $rb_minus(p, 1);
            
            self.$emit("tSTAR", "*".$freeze());
            
            p = $rb_plus(p, 1);
            _goto_level = _out;
            continue;;;;}
            else if ((321)['$===']($case)) {
            self.te = p;
            p = $rb_minus(p, 1);
            
            $b = [self.$tok()['$[]']($range(0, -2, false)), self.$tok()['$[]'](-1).$chr()], (type = $b[0]), (delimiter = $b[1]), $b;
            
            self.cs = self.$push_literal(type, delimiter, self.ts);
            _goto_level = _again;
            continue;;;;}
            else if ((319)['$===']($case)) {
            self.te = p;
            p = $rb_minus(p, 1);
            
            self.$diagnostic("fatal", "string_eof", nil, self.$range(self.ts, $rb_plus(self.ts, 1)));;}
            else if ((348)['$===']($case)) {
            self.te = p;
            p = $rb_minus(p, 1);
            
            self.$diagnostic("error", "unterminated_heredoc_id", nil, self.$range(self.ts, $rb_plus(self.ts, 1)));;}
            else if ((331)['$===']($case)) {
            self.te = p;
            p = $rb_minus(p, 1);
            
            self.$emit("tSYMBOL", self.$tok($rb_plus(self.ts, 1)), self.ts);
            self.cs = 781;
            
            p = $rb_plus(p, 1);
            _goto_level = _out;
            continue;;;;}
            else if ((344)['$===']($case)) {
            self.te = p;
            p = $rb_minus(p, 1);
            
            if ($truthy($rb_ge(self.version, 27))) {
              self.$diagnostic("error", diag_msg, $hash2(["name"], {"name": self.$tok(tm, self.te)}), self.$range(tm, self.te))
            } else {
              
              self.$emit("tCOLON", self.$tok(self.ts, $rb_plus(self.ts, 1)), self.ts, $rb_plus(self.ts, 1));
              p = self.ts;
            };
            self.cs = 781;
            
            p = $rb_plus(p, 1);
            _goto_level = _out;
            continue;;;;}
            else if ((349)['$===']($case)) {
            self.te = p;
            p = $rb_minus(p, 1);
            
            self.$diagnostic("fatal", "incomplete_escape", nil, self.$range(self.ts, $rb_plus(self.ts, 1)));;}
            else if ((355)['$===']($case)) {
            self.te = p;
            p = $rb_minus(p, 1);
            
            p = $rb_minus(self.ts, 1);
            
            self.cs = 781;
            _goto_level = _again;
            continue;;;;}
            else if ((322)['$===']($case)) {
            self.te = p;
            p = $rb_minus(p, 1);
            
            self.$emit_table($$($nesting, 'PUNCTUATION_BEGIN'));
            
            p = $rb_plus(p, 1);
            _goto_level = _out;
            continue;;;;}
            else if ((326)['$===']($case)) {
            self.te = p;
            p = $rb_minus(p, 1);
            
            if ($truthy($rb_ge(self.version, 27))) {
              self.$emit("tBDOT2")
            } else {
              self.$emit("tDOT2")
            };
            self.cs = 543;
            
            p = $rb_plus(p, 1);
            _goto_level = _out;
            continue;;;;}
            else if ((301)['$===']($case)) {
            self.te = p;
            p = $rb_minus(p, 1);
            
            self.$emit("tIDENTIFIER");
            if ($truthy(($truthy($b = self.static_env['$nil?']()['$!']()) ? self.static_env['$declared?'](self.$tok()) : $b))) {
              
              self.cs = 446;
              
              p = $rb_plus(p, 1);
              _goto_level = _out;
              continue;;;
            } else {
              
              self.cs = self.$arg_or_cmdarg(cmd_state);
              
              p = $rb_plus(p, 1);
              _goto_level = _out;
              continue;;;
            };;}
            else if ((311)['$===']($case)) {
            self.te = p;
            p = $rb_minus(p, 1);}
            else if ((313)['$===']($case)) {
            self.te = p;
            p = $rb_minus(p, 1);
            
            p = $rb_minus(self.ts, 1);
            self.cs_before_block_comment = self.cs;
            
            self.cs = 185;
            _goto_level = _again;
            continue;;;;}
            else if ((316)['$===']($case)) {
            self.te = p;
            p = $rb_minus(p, 1);
            
            p = $rb_minus(self.ts, 1);
            
            self.cs = 781;
            _goto_level = _again;
            continue;;;;}
            else if ((53)['$===']($case)) {
            
            p = $rb_minus(self.te, 1);;
            
            self.$diagnostic("fatal", "string_eof", nil, self.$range(self.ts, $rb_plus(self.ts, 1)));;}
            else if ((72)['$===']($case)) {
            
            p = $rb_minus(self.te, 1);;
            
            self.$diagnostic("error", "unterminated_heredoc_id", nil, self.$range(self.ts, $rb_plus(self.ts, 1)));;}
            else if ((73)['$===']($case)) {
            
            p = $rb_minus(self.te, 1);;
            
            value = ($truthy($b = self.escape) ? $b : self.$tok($rb_plus(self.ts, 1)));
            if ($truthy(self['$version?'](18))) {
              self.$emit("tINTEGER", value.$getbyte(0))
            } else {
              self.$emit("tCHARACTER", value)
            };
            self.cs = 781;
            
            p = $rb_plus(p, 1);
            _goto_level = _out;
            continue;;;;}
            else if ((47)['$===']($case)) {
            
            p = $rb_minus(self.te, 1);;
            
            self.$emit("tIDENTIFIER");
            if ($truthy(($truthy($b = self.static_env['$nil?']()['$!']()) ? self.static_env['$declared?'](self.$tok()) : $b))) {
              
              self.cs = 446;
              
              p = $rb_plus(p, 1);
              _goto_level = _out;
              continue;;;
            } else {
              
              self.cs = self.$arg_or_cmdarg(cmd_state);
              
              p = $rb_plus(p, 1);
              _goto_level = _out;
              continue;;;
            };;}
            else if ((52)['$===']($case)) {
            
            p = $rb_minus(self.te, 1);;}
            else if ((67)['$===']($case)) {
            
            p = $rb_minus(self.te, 1);;
            
            p = $rb_minus(self.ts, 1);
            
            self.cs = 781;
            _goto_level = _again;
            continue;;;;}
            else if ((50)['$===']($case)) {
            $case = self.act;
            if ((98)['$===']($case)) {
            
            p = $rb_minus(self.te, 1);;
            self.$emit("tUNARY_NUM", self.$tok(self.ts, $rb_plus(self.ts, 1)), self.ts, $rb_plus(self.ts, 1));
            p = $rb_minus(p, 1);
            self.cs = 781;
            
            p = $rb_plus(p, 1);
            _goto_level = _out;
            continue;;;}
            else if ((105)['$===']($case)) {
            
            p = $rb_minus(self.te, 1);;
            self.$diagnostic("error", "unterminated_heredoc_id", nil, self.$range(self.ts, $rb_plus(self.ts, 1)));}
            else if ((116)['$===']($case)) {
            
            p = $rb_minus(self.te, 1);;
            if ($truthy($rb_ge(self.version, 27))) {
              
              self.$emit("tPIPE", self.$tok(self.ts, $rb_plus(self.ts, 1)), self.ts, $rb_plus(self.ts, 1));
              p = $rb_minus(p, 1);
              self.cs = 543;
              
              p = $rb_plus(p, 1);
              _goto_level = _out;
              continue;;;
            } else {
              
              p = $rb_minus(p, 2);
              
              self.cs = 781;
              _goto_level = _again;
              continue;;;
            };}
            else if ((120)['$===']($case)) {
            
            p = $rb_minus(self.te, 1);;
            self.$emit_table($$($nesting, 'PUNCTUATION_BEGIN'));
            
            p = $rb_plus(p, 1);
            _goto_level = _out;
            continue;;;}
            else if ((121)['$===']($case)) {
            
            p = $rb_minus(self.te, 1);;
            self.$emit("kRESCUE", "rescue".$freeze(), self.ts, tm);
            p = $rb_minus(tm, 1);
            self.cs = 519;
            
            p = $rb_plus(p, 1);
            _goto_level = _out;
            continue;;;}
            else if ((122)['$===']($case)) {
            
            p = $rb_minus(self.te, 1);;
            self.$emit_table($$($nesting, 'KEYWORDS_BEGIN'));
            self.command_start = true;
            self.cs = 773;
            
            p = $rb_plus(p, 1);
            _goto_level = _out;
            continue;;;}
            else if ((126)['$===']($case)) {
            
            p = $rb_minus(self.te, 1);;
            p = $rb_minus(self.ts, 1);
            
            self.cs = 781;
            _goto_level = _again;
            continue;;;}
            else if ((127)['$===']($case)) {
            
            p = $rb_minus(self.te, 1);;
            self.$emit("tIDENTIFIER");
            if ($truthy(($truthy($b = self.static_env['$nil?']()['$!']()) ? self.static_env['$declared?'](self.$tok()) : $b))) {
              
              self.cs = 446;
              
              p = $rb_plus(p, 1);
              _goto_level = _out;
              continue;;;
            } else {
              
              self.cs = self.$arg_or_cmdarg(cmd_state);
              
              p = $rb_plus(p, 1);
              _goto_level = _out;
              continue;;;
            };}
            else if ((131)['$===']($case)) {
            
            p = $rb_minus(self.te, 1);;
            p = $rb_minus(self.ts, 1);
            
            self.cs = 781;
            _goto_level = _again;
            continue;;;};}
            else if ((386)['$===']($case)) {
            self.te = $rb_plus(p, 1);
            
            p = $rb_minus(p, 1);
            
            self.cs = 543;
            _goto_level = _again;
            continue;;;;}
            else if ((387)['$===']($case)) {
            self.te = $rb_plus(p, 1);
            
            p = $rb_minus(p, 1);
            
            p = $rb_plus(p, 1);
            _goto_level = _out;
            continue;;;;}
            else if ((388)['$===']($case)) {
            self.te = p;
            p = $rb_minus(p, 1);}
            else if ((392)['$===']($case)) {
            self.te = p;
            p = $rb_minus(p, 1);
            
            p = $rb_minus(p, 1);
            
            self.cs = 543;
            _goto_level = _again;
            continue;;;;}
            else if ((76)['$===']($case)) {
            self.te = $rb_plus(p, 1);
            
            p = $rb_minus(self.ts, 1);
            
            self.cs = 781;
            _goto_level = _again;
            continue;;;;}
            else if ((396)['$===']($case)) {
            self.te = $rb_plus(p, 1);
            
            
            self.cs = self.$push_literal(self.$tok(), self.$tok(), self.ts);
            _goto_level = _again;
            continue;;;;}
            else if ((395)['$===']($case)) {
            self.te = $rb_plus(p, 1);
            
            p = $rb_minus(p, 1);
            
            self.cs = 543;
            _goto_level = _again;
            continue;;;;}
            else if ((394)['$===']($case)) {
            self.te = $rb_plus(p, 1);
            
            p = $rb_minus(p, 1);
            
            p = $rb_plus(p, 1);
            _goto_level = _out;
            continue;;;;}
            else if ((398)['$===']($case)) {
            self.te = p;
            p = $rb_minus(p, 1);}
            else if ((397)['$===']($case)) {
            self.te = p;
            p = $rb_minus(p, 1);
            
            p = $rb_minus(p, 1);
            
            self.cs = 543;
            _goto_level = _again;
            continue;;;;}
            else if ((75)['$===']($case)) {
            
            p = $rb_minus(self.te, 1);;
            
            p = $rb_minus(p, 1);
            
            self.cs = 543;
            _goto_level = _again;
            continue;;;;}
            else if ((431)['$===']($case)) {
            self.te = $rb_plus(p, 1);
            
            self.$emit("tLAMBDA", "->".$freeze(), self.ts, $rb_plus(self.ts, 2));
            self.lambda_stack.$push(self.paren_nest);
            self.cs = 446;
            
            p = $rb_plus(p, 1);
            _goto_level = _out;
            continue;;;;}
            else if ((85)['$===']($case)) {
            self.te = $rb_plus(p, 1);
            
            self.$emit("kCLASS", "class".$freeze(), self.ts, $rb_plus(self.ts, 5));
            self.$emit("tLSHFT", "<<".$freeze(), $rb_minus(self.te, 2), self.te);
            self.cs = 773;
            
            p = $rb_plus(p, 1);
            _goto_level = _out;
            continue;;;;}
            else if ((406)['$===']($case)) {
            self.te = $rb_plus(p, 1);
            
            $b = [self.$tok(), self.$tok()['$[]'](-1).$chr()], (type = $b[0]), (delimiter = $b[1]), $b;
            
            self.cs = self.$push_literal(type, delimiter, self.ts, nil, false, false, true);
            _goto_level = _again;
            continue;;;;}
            else if ((78)['$===']($case)) {
            self.te = $rb_plus(p, 1);
            
            p = $rb_minus(self.ts, 1);
            
            
            $writer = [self.top, self.cs];
            $send(self.stack, '[]=', Opal.to_a($writer));
            $writer[$rb_minus($writer["length"], 1)];;
            self.top = $rb_plus(self.top, 1);
            self.cs = 328;
            _goto_level = _again;
            continue;;;;}
            else if ((427)['$===']($case)) {
            self.te = $rb_plus(p, 1);
            
            self.$emit_table($$($nesting, 'PUNCTUATION'));
            self.cs = 453;
            
            p = $rb_plus(p, 1);
            _goto_level = _out;
            continue;;;;}
            else if ((480)['$===']($case)) {
            self.te = $rb_plus(p, 1);
            
            self.$emit_table($$($nesting, 'PUNCTUATION'));
            
            self.cs = 773;
            _goto_level = _again;
            continue;;;;}
            else if ((420)['$===']($case)) {
            self.te = $rb_plus(p, 1);
            
            self.$emit_table($$($nesting, 'PUNCTUATION'));
            self.cs = 773;
            
            p = $rb_plus(p, 1);
            _goto_level = _out;
            continue;;;;}
            else if ((425)['$===']($case)) {
            self.te = $rb_plus(p, 1);
            
            self.$emit("tOP_ASGN", self.$tok(self.ts, $rb_minus(self.te, 1)));
            self.cs = 543;
            
            p = $rb_plus(p, 1);
            _goto_level = _out;
            continue;;;;}
            else if ((411)['$===']($case)) {
            self.te = $rb_plus(p, 1);
            
            self.$emit("tEH", "?".$freeze());
            self.cs = 773;
            
            p = $rb_plus(p, 1);
            _goto_level = _out;
            continue;;;;}
            else if ((408)['$===']($case)) {
            self.te = $rb_plus(p, 1);
            
            self.$emit_table($$($nesting, 'PUNCTUATION'));
            self.cs = 543;
            
            p = $rb_plus(p, 1);
            _goto_level = _out;
            continue;;;;}
            else if ((410)['$===']($case)) {
            self.te = $rb_plus(p, 1);
            
            self.$emit("tSEMI", ";".$freeze());
            self.command_start = true;
            self.cs = 773;
            
            p = $rb_plus(p, 1);
            _goto_level = _out;
            continue;;;;}
            else if ((485)['$===']($case)) {
            self.te = $rb_plus(p, 1);
            
            self.$diagnostic("error", "bare_backslash", nil, self.$range(self.ts, $rb_plus(self.ts, 1)));
            p = $rb_minus(p, 1);;}
            else if ((405)['$===']($case)) {
            self.te = $rb_plus(p, 1);
            
            self.$diagnostic("fatal", "unexpected", $hash2(["character"], {"character": self.$tok().$inspect()['$[]']($range(1, -2, false))}));;}
            else if ((404)['$===']($case)) {
            self.te = $rb_plus(p, 1);
            
            p = $rb_minus(p, 1);
            
            p = $rb_plus(p, 1);
            _goto_level = _out;
            continue;;;;}
            else if ((496)['$===']($case)) {
            self.te = p;
            p = $rb_minus(p, 1);
            
            self.$emit_table($$($nesting, 'KEYWORDS'));
            self.cs = 333;
            
            p = $rb_plus(p, 1);
            _goto_level = _out;
            continue;;;;}
            else if ((494)['$===']($case)) {
            self.te = p;
            p = $rb_minus(p, 1);
            
            self.$emit("kCLASS", "class".$freeze(), self.ts, $rb_plus(self.ts, 5));
            self.$emit("tLSHFT", "<<".$freeze(), $rb_minus(self.te, 2), self.te);
            self.cs = 773;
            
            p = $rb_plus(p, 1);
            _goto_level = _out;
            continue;;;;}
            else if ((493)['$===']($case)) {
            self.te = p;
            p = $rb_minus(p, 1);
            
            self.$emit_table($$($nesting, 'KEYWORDS'));
            self.command_start = true;
            self.cs = 773;
            
            p = $rb_plus(p, 1);
            _goto_level = _out;
            continue;;;;}
            else if ((435)['$===']($case)) {
            self.te = p;
            p = $rb_minus(p, 1);
            
            self.$diagnostic("error", "no_dot_digit_literal");;}
            else if ((482)['$===']($case)) {
            self.te = p;
            p = $rb_minus(p, 1);
            
            self.$emit("tCONSTANT");
            self.cs = self.$arg_or_cmdarg(cmd_state);
            
            p = $rb_plus(p, 1);
            _goto_level = _out;
            continue;;;;}
            else if ((424)['$===']($case)) {
            self.te = p;
            p = $rb_minus(p, 1);
            
            p = $rb_minus(self.ts, 1);
            
            
            $writer = [self.top, self.cs];
            $send(self.stack, '[]=', Opal.to_a($writer));
            $writer[$rb_minus($writer["length"], 1)];;
            self.top = $rb_plus(self.top, 1);
            self.cs = 328;
            _goto_level = _again;
            continue;;;;}
            else if ((432)['$===']($case)) {
            self.te = p;
            p = $rb_minus(p, 1);
            
            self.$emit_table($$($nesting, 'PUNCTUATION'));
            self.cs = 453;
            
            p = $rb_plus(p, 1);
            _goto_level = _out;
            continue;;;;}
            else if ((488)['$===']($case)) {
            self.te = p;
            p = $rb_minus(p, 1);
            
            self.$emit("tIDENTIFIER");
            if ($truthy(($truthy($b = self.static_env['$nil?']()['$!']()) ? self.static_env['$declared?'](self.$tok()) : $b))) {
              
              self.cs = 446;
              
              p = $rb_plus(p, 1);
              _goto_level = _out;
              continue;;;
            } else {
              
              self.cs = self.$arg_or_cmdarg(cmd_state);
              
              p = $rb_plus(p, 1);
              _goto_level = _out;
              continue;;;
            };;}
            else if ((430)['$===']($case)) {
            self.te = p;
            p = $rb_minus(p, 1);
            
            self.$emit_table($$($nesting, 'PUNCTUATION'));
            
            self.cs = 773;
            _goto_level = _again;
            continue;;;;}
            else if ((426)['$===']($case)) {
            self.te = p;
            p = $rb_minus(p, 1);
            
            self.$emit_table($$($nesting, 'PUNCTUATION'));
            self.cs = 773;
            
            p = $rb_plus(p, 1);
            _goto_level = _out;
            continue;;;;}
            else if ((419)['$===']($case)) {
            self.te = p;
            p = $rb_minus(p, 1);
            
            self.$emit_table($$($nesting, 'PUNCTUATION'));
            self.cs = 543;
            
            p = $rb_plus(p, 1);
            _goto_level = _out;
            continue;;;;}
            else if ((433)['$===']($case)) {
            self.te = p;
            p = $rb_minus(p, 1);
            
            self.$emit_table($$($nesting, 'PUNCTUATION'));
            self.cs = 543;
            
            p = $rb_plus(p, 1);
            _goto_level = _out;
            continue;;;;}
            else if ((417)['$===']($case)) {
            self.te = p;
            p = $rb_minus(p, 1);}
            else if ((423)['$===']($case)) {
            self.te = p;
            p = $rb_minus(p, 1);
            
            self.$diagnostic("fatal", "unexpected", $hash2(["character"], {"character": self.$tok().$inspect()['$[]']($range(1, -2, false))}));;}
            else if ((83)['$===']($case)) {
            
            p = $rb_minus(self.te, 1);;
            
            digits = self.$tok(self.num_digits_s, self.num_suffix_s);
            if ($truthy(digits['$end_with?']("_".$freeze()))) {
              self.$diagnostic("error", "trailing_in_number", $hash2(["character"], {"character": "_".$freeze()}), self.$range($rb_minus(self.te, 1), self.te))
            } else if ($truthy(($truthy($b = ($truthy($c = digits['$empty?']()) ? self.num_base['$=='](8) : $c)) ? self['$version?'](18) : $b))) {
              digits = "0".$freeze()
            } else if ($truthy(digits['$empty?']())) {
              self.$diagnostic("error", "empty_numeric")
            } else if ($truthy((($b = self.num_base['$=='](8)) ? (invalid_idx = digits.$index(/[89]/)) : self.num_base['$=='](8)))) {
              
              invalid_s = $rb_plus(self.num_digits_s, invalid_idx);
              self.$diagnostic("error", "invalid_octal", nil, self.$range(invalid_s, $rb_plus(invalid_s, 1)));};
            if ($truthy(self['$version?'](18, 19, 20))) {
              
              self.$emit("tINTEGER", digits.$to_i(self.num_base), self.ts, self.num_suffix_s);
              p = $rb_minus(self.num_suffix_s, 1);
            } else {
              self.num_xfrm.$call(digits.$to_i(self.num_base))
            };
            
            p = $rb_plus(p, 1);
            _goto_level = _out;
            continue;;;;}
            else if ((79)['$===']($case)) {
            
            p = $rb_minus(self.te, 1);;
            
            self.$diagnostic("error", "no_dot_digit_literal");;}
            else if ((82)['$===']($case)) {
            
            p = $rb_minus(self.te, 1);;
            
            digits = self.$tok(self.ts, self.num_suffix_s);
            if ($truthy(self['$version?'](18, 19, 20))) {
              
              self.$emit("tFLOAT", self.$Float(digits), self.ts, self.num_suffix_s);
              p = $rb_minus(self.num_suffix_s, 1);
            } else {
              self.num_xfrm.$call(digits)
            };
            
            p = $rb_plus(p, 1);
            _goto_level = _out;
            continue;;;;}
            else if ((77)['$===']($case)) {
            
            p = $rb_minus(self.te, 1);;
            
            self.$diagnostic("fatal", "unexpected", $hash2(["character"], {"character": self.$tok().$inspect()['$[]']($range(1, -2, false))}));;}
            else if ((80)['$===']($case)) {
            $case = self.act;
            if ((144)['$===']($case)) {
            
            p = $rb_minus(self.te, 1);;
            if (self.lambda_stack.$last()['$=='](self.paren_nest)) {
              
              self.lambda_stack.$pop();
              if (self.$tok()['$==']("{".$freeze())) {
                self.$emit("tLAMBEG", "{".$freeze())
              } else {
                self.$emit("kDO_LAMBDA", "do".$freeze())
              };
            } else if (self.$tok()['$==']("{".$freeze())) {
              self.$emit("tLCURLY", "{".$freeze())
            } else {
              self.$emit_do()
            };
            if (self.$tok()['$==']("{".$freeze())) {
              self.paren_nest = $rb_plus(self.paren_nest, 1)};
            self.command_start = true;
            self.cs = 773;
            
            p = $rb_plus(p, 1);
            _goto_level = _out;
            continue;;;}
            else if ((145)['$===']($case)) {
            
            p = $rb_minus(self.te, 1);;
            self.$emit_table($$($nesting, 'KEYWORDS'));
            self.cs = 333;
            
            p = $rb_plus(p, 1);
            _goto_level = _out;
            continue;;;}
            else if ((146)['$===']($case)) {
            
            p = $rb_minus(self.te, 1);;
            self.$emit("kCLASS", "class".$freeze(), self.ts, $rb_plus(self.ts, 5));
            self.$emit("tLSHFT", "<<".$freeze(), $rb_minus(self.te, 2), self.te);
            self.cs = 773;
            
            p = $rb_plus(p, 1);
            _goto_level = _out;
            continue;;;}
            else if ((147)['$===']($case)) {
            
            p = $rb_minus(self.te, 1);;
            self.$emit_table($$($nesting, 'KEYWORDS'));
            self.cs = 543;
            
            p = $rb_plus(p, 1);
            _goto_level = _out;
            continue;;;}
            else if ((148)['$===']($case)) {
            
            p = $rb_minus(self.te, 1);;
            self.$emit_table($$($nesting, 'KEYWORDS'));
            self.command_start = true;
            self.cs = 773;
            
            p = $rb_plus(p, 1);
            _goto_level = _out;
            continue;;;}
            else if ((149)['$===']($case)) {
            
            p = $rb_minus(self.te, 1);;
            self.$emit_table($$($nesting, 'KEYWORDS'));
            self.cs = 519;
            
            p = $rb_plus(p, 1);
            _goto_level = _out;
            continue;;;}
            else if ((150)['$===']($case)) {
            
            p = $rb_minus(self.te, 1);;
            self.$emit_table($$($nesting, 'KEYWORDS'));
            if ($truthy(($truthy($b = self['$version?'](18)) ? self.$tok()['$==']("not".$freeze()) : $b))) {
              
              self.cs = 543;
              
              p = $rb_plus(p, 1);
              _goto_level = _out;
              continue;;;
            } else {
              
              self.cs = 474;
              
              p = $rb_plus(p, 1);
              _goto_level = _out;
              continue;;;
            };}
            else if ((151)['$===']($case)) {
            
            p = $rb_minus(self.te, 1);;
            if ($truthy(self['$version?'](18))) {
              
              self.$emit("tIDENTIFIER");
              if ($truthy(($truthy($b = self.static_env['$nil?']()['$!']()) ? self.static_env['$declared?'](self.$tok()) : $b))) {
              } else {
                self.cs = self.$arg_or_cmdarg(cmd_state)
              };
            } else {
              self.$emit("k__ENCODING__", "__ENCODING__".$freeze())
            };
            
            p = $rb_plus(p, 1);
            _goto_level = _out;
            continue;;;}
            else if ((152)['$===']($case)) {
            
            p = $rb_minus(self.te, 1);;
            self.$emit_table($$($nesting, 'KEYWORDS'));
            
            p = $rb_plus(p, 1);
            _goto_level = _out;
            continue;;;}
            else if ((153)['$===']($case)) {
            
            p = $rb_minus(self.te, 1);;
            digits = self.$tok(self.num_digits_s, self.num_suffix_s);
            if ($truthy(digits['$end_with?']("_".$freeze()))) {
              self.$diagnostic("error", "trailing_in_number", $hash2(["character"], {"character": "_".$freeze()}), self.$range($rb_minus(self.te, 1), self.te))
            } else if ($truthy(($truthy($b = ($truthy($c = digits['$empty?']()) ? self.num_base['$=='](8) : $c)) ? self['$version?'](18) : $b))) {
              digits = "0".$freeze()
            } else if ($truthy(digits['$empty?']())) {
              self.$diagnostic("error", "empty_numeric")
            } else if ($truthy((($b = self.num_base['$=='](8)) ? (invalid_idx = digits.$index(/[89]/)) : self.num_base['$=='](8)))) {
              
              invalid_s = $rb_plus(self.num_digits_s, invalid_idx);
              self.$diagnostic("error", "invalid_octal", nil, self.$range(invalid_s, $rb_plus(invalid_s, 1)));};
            if ($truthy(self['$version?'](18, 19, 20))) {
              
              self.$emit("tINTEGER", digits.$to_i(self.num_base), self.ts, self.num_suffix_s);
              p = $rb_minus(self.num_suffix_s, 1);
            } else {
              self.num_xfrm.$call(digits.$to_i(self.num_base))
            };
            
            p = $rb_plus(p, 1);
            _goto_level = _out;
            continue;;;}
            else if ((155)['$===']($case)) {
            
            p = $rb_minus(self.te, 1);;
            if ($truthy(self['$version?'](18, 19, 20))) {
              self.$diagnostic("error", "trailing_in_number", $hash2(["character"], {"character": self.$tok($rb_minus(self.te, 1), self.te)}), self.$range($rb_minus(self.te, 1), self.te))
            } else {
              
              self.$emit("tINTEGER", self.$tok(self.ts, $rb_minus(self.te, 1)).$to_i(), self.ts, $rb_minus(self.te, 1));
              p = $rb_minus(p, 1);
              
              p = $rb_plus(p, 1);
              _goto_level = _out;
              continue;;;
            };}
            else if ((156)['$===']($case)) {
            
            p = $rb_minus(self.te, 1);;
            if ($truthy(self['$version?'](18, 19, 20))) {
              self.$diagnostic("error", "trailing_in_number", $hash2(["character"], {"character": self.$tok($rb_minus(self.te, 1), self.te)}), self.$range($rb_minus(self.te, 1), self.te))
            } else {
              
              self.$emit("tFLOAT", self.$tok(self.ts, $rb_minus(self.te, 1)).$to_f(), self.ts, $rb_minus(self.te, 1));
              p = $rb_minus(p, 1);
              
              p = $rb_plus(p, 1);
              _goto_level = _out;
              continue;;;
            };}
            else if ((157)['$===']($case)) {
            
            p = $rb_minus(self.te, 1);;
            digits = self.$tok(self.ts, self.num_suffix_s);
            if ($truthy(self['$version?'](18, 19, 20))) {
              
              self.$emit("tFLOAT", self.$Float(digits), self.ts, self.num_suffix_s);
              p = $rb_minus(self.num_suffix_s, 1);
            } else {
              self.num_xfrm.$call(digits)
            };
            
            p = $rb_plus(p, 1);
            _goto_level = _out;
            continue;;;}
            else if ((159)['$===']($case)) {
            
            p = $rb_minus(self.te, 1);;
            self.$emit("tCONSTANT");
            self.cs = self.$arg_or_cmdarg(cmd_state);
            
            p = $rb_plus(p, 1);
            _goto_level = _out;
            continue;;;}
            else if ((163)['$===']($case)) {
            
            p = $rb_minus(self.te, 1);;
            self.$emit("tIDENTIFIER");
            if ($truthy(($truthy($b = self.static_env['$nil?']()['$!']()) ? self.static_env['$declared?'](self.$tok()) : $b))) {
              
              self.cs = 446;
              
              p = $rb_plus(p, 1);
              _goto_level = _out;
              continue;;;
            } else {
              
              self.cs = self.$arg_or_cmdarg(cmd_state);
              
              p = $rb_plus(p, 1);
              _goto_level = _out;
              continue;;;
            };}
            else if ((164)['$===']($case)) {
            
            p = $rb_minus(self.te, 1);;
            if (tm['$=='](self.te)) {
              self.$emit("tFID")
            } else {
              
              self.$emit("tIDENTIFIER", self.$tok(self.ts, tm), self.ts, tm);
              p = $rb_minus(tm, 1);
            };
            self.cs = 474;
            
            p = $rb_plus(p, 1);
            _goto_level = _out;
            continue;;;}
            else if ((166)['$===']($case)) {
            
            p = $rb_minus(self.te, 1);;
            self.$emit_table($$($nesting, 'PUNCTUATION'));
            self.cs = 773;
            
            p = $rb_plus(p, 1);
            _goto_level = _out;
            continue;;;}
            else if ((167)['$===']($case)) {
            
            p = $rb_minus(self.te, 1);;
            self.$emit_table($$($nesting, 'PUNCTUATION'));
            self.cs = 543;
            
            p = $rb_plus(p, 1);
            _goto_level = _out;
            continue;;;};}
            else if ((95)['$===']($case)) {
            self.te = $rb_plus(p, 1);
            
            p = $rb_minus(tm, 1);
            
            self.cs = 781;
            _goto_level = _again;
            continue;;;;}
            else if ((501)['$===']($case)) {
            self.te = $rb_plus(p, 1);
            
            self.$emit("tNL", nil, self.newline_s, $rb_plus(self.newline_s, 1));
            p = $rb_minus(p, 1);
            self.cs = 185;
            
            p = $rb_plus(p, 1);
            _goto_level = _out;
            continue;;;;}
            else if ((504)['$===']($case)) {
            self.te = p;
            p = $rb_minus(p, 1);
            
            if ($truthy($rb_lt(self.version, 27))) {
              
              self.$emit("tNL", nil, self.newline_s, $rb_plus(self.newline_s, 1));
              p = $rb_minus(p, 1);
              self.cs = 185;
              
              p = $rb_plus(p, 1);
              _goto_level = _out;
              continue;;;};;}
            else if ((503)['$===']($case)) {
            self.te = p;
            p = $rb_minus(p, 1);
            
            self.$emit("tNL", nil, self.newline_s, $rb_plus(self.newline_s, 1));
            p = $rb_minus(p, 1);
            self.cs = 185;
            
            p = $rb_plus(p, 1);
            _goto_level = _out;
            continue;;;;}
            else if ((90)['$===']($case)) {
            
            p = $rb_minus(self.te, 1);;
            
            if ($truthy($rb_lt(self.version, 27))) {
              
              self.$emit("tNL", nil, self.newline_s, $rb_plus(self.newline_s, 1));
              p = $rb_minus(p, 1);
              self.cs = 185;
              
              p = $rb_plus(p, 1);
              _goto_level = _out;
              continue;;;};;}
            else if ((86)['$===']($case)) {
            
            p = $rb_minus(self.te, 1);;
            
            self.$emit("tNL", nil, self.newline_s, $rb_plus(self.newline_s, 1));
            p = $rb_minus(p, 1);
            self.cs = 185;
            
            p = $rb_plus(p, 1);
            _goto_level = _out;
            continue;;;;}
            else if ((91)['$===']($case)) {
            $case = self.act;
            if ((180)['$===']($case)) {
            
            p = $rb_minus(self.te, 1);;
            if ($truthy($rb_lt(self.version, 27))) {
              
              self.$emit("tNL", nil, self.newline_s, $rb_plus(self.newline_s, 1));
              p = $rb_minus(p, 1);
              self.cs = 185;
              
              p = $rb_plus(p, 1);
              _goto_level = _out;
              continue;;;};}
            else if ((182)['$===']($case)) {
            
            p = $rb_minus(self.te, 1);;
            self.$emit("tNL", nil, self.newline_s, $rb_plus(self.newline_s, 1));
            p = $rb_minus(p, 1);
            self.cs = 185;
            
            p = $rb_plus(p, 1);
            _goto_level = _out;
            continue;;;};}
            else if ((507)['$===']($case)) {
            self.te = p;
            p = $rb_minus(p, 1);
            
            self.$emit_comment(self.eq_begin_s, self.te);
            
            self.cs = self.cs_before_block_comment;
            _goto_level = _again;
            continue;;;;}
            else if ((506)['$===']($case)) {
            self.te = p;
            p = $rb_minus(p, 1);
            
            self.$diagnostic("fatal", "embedded_document", nil, self.$range(self.eq_begin_s, $rb_plus(self.eq_begin_s, "=begin".$length())));;}
            else if ((106)['$===']($case)) {
            self.te = $rb_plus(p, 1);
            
            self.eq_begin_s = self.ts;
            
            self.cs = 967;
            _goto_level = _again;
            continue;;;;}
            else if ((2)['$===']($case)) {
            self.te = $rb_plus(p, 1);
            
            p = $rb_minus(pe, 3);;}
            else if ((98)['$===']($case)) {
            self.te = $rb_plus(p, 1);
            
            cmd_state = true;
            p = $rb_minus(p, 1);
            
            self.cs = 773;
            _goto_level = _again;
            continue;;;;}
            else if ((99)['$===']($case)) {
            self.te = $rb_plus(p, 1);
            
            p = $rb_minus(p, 1);
            
            p = $rb_plus(p, 1);
            _goto_level = _out;
            continue;;;;}
            else if ((100)['$===']($case)) {
            self.te = p;
            p = $rb_minus(p, 1);}
            else if ((105)['$===']($case)) {
            self.te = p;
            p = $rb_minus(p, 1);
            
            self.eq_begin_s = self.ts;
            
            self.cs = 967;
            _goto_level = _again;
            continue;;;;}
            else if ((104)['$===']($case)) {
            self.te = p;
            p = $rb_minus(p, 1);
            
            cmd_state = true;
            p = $rb_minus(p, 1);
            
            self.cs = 773;
            _goto_level = _again;
            continue;;;;}
            else if ((1)['$===']($case)) {
            
            p = $rb_minus(self.te, 1);;
            
            cmd_state = true;
            p = $rb_minus(p, 1);
            
            self.cs = 773;
            _goto_level = _again;
            continue;;;;}
            else if ((66)['$===']($case)) {
            
            self.newline_s = p;;
            
            self.$emit_comment(self.sharp_s, (function() {if (p['$=='](pe)) {
              return $rb_minus(p, 2)
            } else {
              return p
            }; return nil; })());;}
            else if ((110)['$===']($case)) {
            
            self.newline_s = p;;
            
            self.te = $rb_plus(p, 1);
            
            current_literal = self.$literal();
            if (self.te['$=='](pe)) {
              self.$diagnostic("fatal", "string_eof", nil, self.$range(current_literal.$str_s(), $rb_plus(current_literal.$str_s(), 1)))};
            if ($truthy(current_literal['$heredoc?']())) {
              
              line = self.$tok(self.herebody_s, self.ts).$gsub(/\r+$/, "".$freeze());
              if ($truthy(self['$version?'](18, 19, 20))) {
                line = line.$gsub(/\r.*$/, "".$freeze())};
              if ($truthy(current_literal.$nest_and_try_closing(line, self.herebody_s, self.ts))) {
                
                self.herebody_s = self.te;
                p = $rb_minus(current_literal.$heredoc_e(), 1);
                self.cs = self.$pop_literal();
                
                p = $rb_plus(p, 1);
                _goto_level = _out;
                continue;;;
              } else {
                
                current_literal.$infer_indent_level(line);
                self.herebody_s = self.te;
              };
            } else {
              
              if ($truthy(current_literal.$nest_and_try_closing(self.$tok(), self.ts, self.te))) {
                
                self.cs = self.$pop_literal();
                
                p = $rb_plus(p, 1);
                _goto_level = _out;
                continue;;;};
              if ($truthy(self.herebody_s)) {
                
                p = $rb_minus(self.herebody_s, 1);
                self.herebody_s = nil;};
            };
            if ($truthy(($truthy($b = current_literal['$words?']()) ? self['$eof_codepoint?'](self.source_pts['$[]'](p))['$!']() : $b))) {
              current_literal.$extend_space(self.ts, self.te)
            } else {
              
              current_literal.$extend_string(self.$tok(), self.ts, self.te);
              current_literal.$flush_string();
            };;;}
            else if ((140)['$===']($case)) {
            
            self.newline_s = p;;
            
            self.te = $rb_plus(p, 1);
            
            current_literal = self.$literal();
            if (self.te['$=='](pe)) {
              self.$diagnostic("fatal", "string_eof", nil, self.$range(current_literal.$str_s(), $rb_plus(current_literal.$str_s(), 1)))};
            if ($truthy(current_literal['$heredoc?']())) {
              
              line = self.$tok(self.herebody_s, self.ts).$gsub(/\r+$/, "".$freeze());
              if ($truthy(self['$version?'](18, 19, 20))) {
                line = line.$gsub(/\r.*$/, "".$freeze())};
              if ($truthy(current_literal.$nest_and_try_closing(line, self.herebody_s, self.ts))) {
                
                self.herebody_s = self.te;
                p = $rb_minus(current_literal.$heredoc_e(), 1);
                self.cs = self.$pop_literal();
                
                p = $rb_plus(p, 1);
                _goto_level = _out;
                continue;;;
              } else {
                
                current_literal.$infer_indent_level(line);
                self.herebody_s = self.te;
              };
            } else {
              
              if ($truthy(current_literal.$nest_and_try_closing(self.$tok(), self.ts, self.te))) {
                
                self.cs = self.$pop_literal();
                
                p = $rb_plus(p, 1);
                _goto_level = _out;
                continue;;;};
              if ($truthy(self.herebody_s)) {
                
                p = $rb_minus(self.herebody_s, 1);
                self.herebody_s = nil;};
            };
            if ($truthy(($truthy($b = current_literal['$words?']()) ? self['$eof_codepoint?'](self.source_pts['$[]'](p))['$!']() : $b))) {
              current_literal.$extend_space(self.ts, self.te)
            } else {
              
              current_literal.$extend_string(self.$tok(), self.ts, self.te);
              current_literal.$flush_string();
            };;;}
            else if ((168)['$===']($case)) {
            
            self.newline_s = p;;
            
            self.te = $rb_plus(p, 1);
            
            current_literal = self.$literal();
            if (self.te['$=='](pe)) {
              self.$diagnostic("fatal", "string_eof", nil, self.$range(current_literal.$str_s(), $rb_plus(current_literal.$str_s(), 1)))};
            if ($truthy(current_literal['$heredoc?']())) {
              
              line = self.$tok(self.herebody_s, self.ts).$gsub(/\r+$/, "".$freeze());
              if ($truthy(self['$version?'](18, 19, 20))) {
                line = line.$gsub(/\r.*$/, "".$freeze())};
              if ($truthy(current_literal.$nest_and_try_closing(line, self.herebody_s, self.ts))) {
                
                self.herebody_s = self.te;
                p = $rb_minus(current_literal.$heredoc_e(), 1);
                self.cs = self.$pop_literal();
                
                p = $rb_plus(p, 1);
                _goto_level = _out;
                continue;;;
              } else {
                
                current_literal.$infer_indent_level(line);
                self.herebody_s = self.te;
              };
            } else {
              
              if ($truthy(current_literal.$nest_and_try_closing(self.$tok(), self.ts, self.te))) {
                
                self.cs = self.$pop_literal();
                
                p = $rb_plus(p, 1);
                _goto_level = _out;
                continue;;;};
              if ($truthy(self.herebody_s)) {
                
                p = $rb_minus(self.herebody_s, 1);
                self.herebody_s = nil;};
            };
            if ($truthy(($truthy($b = current_literal['$words?']()) ? self['$eof_codepoint?'](self.source_pts['$[]'](p))['$!']() : $b))) {
              current_literal.$extend_space(self.ts, self.te)
            } else {
              
              current_literal.$extend_string(self.$tok(), self.ts, self.te);
              current_literal.$flush_string();
            };;;}
            else if ((174)['$===']($case)) {
            
            self.newline_s = p;;
            
            self.te = $rb_plus(p, 1);
            
            current_literal = self.$literal();
            if (self.te['$=='](pe)) {
              self.$diagnostic("fatal", "string_eof", nil, self.$range(current_literal.$str_s(), $rb_plus(current_literal.$str_s(), 1)))};
            if ($truthy(current_literal['$heredoc?']())) {
              
              line = self.$tok(self.herebody_s, self.ts).$gsub(/\r+$/, "".$freeze());
              if ($truthy(self['$version?'](18, 19, 20))) {
                line = line.$gsub(/\r.*$/, "".$freeze())};
              if ($truthy(current_literal.$nest_and_try_closing(line, self.herebody_s, self.ts))) {
                
                self.herebody_s = self.te;
                p = $rb_minus(current_literal.$heredoc_e(), 1);
                self.cs = self.$pop_literal();
                
                p = $rb_plus(p, 1);
                _goto_level = _out;
                continue;;;
              } else {
                
                current_literal.$infer_indent_level(line);
                self.herebody_s = self.te;
              };
            } else {
              
              if ($truthy(current_literal.$nest_and_try_closing(self.$tok(), self.ts, self.te))) {
                
                self.cs = self.$pop_literal();
                
                p = $rb_plus(p, 1);
                _goto_level = _out;
                continue;;;};
              if ($truthy(self.herebody_s)) {
                
                p = $rb_minus(self.herebody_s, 1);
                self.herebody_s = nil;};
            };
            if ($truthy(($truthy($b = current_literal['$words?']()) ? self['$eof_codepoint?'](self.source_pts['$[]'](p))['$!']() : $b))) {
              current_literal.$extend_space(self.ts, self.te)
            } else {
              
              current_literal.$extend_string(self.$tok(), self.ts, self.te);
              current_literal.$flush_string();
            };;;}
            else if ((180)['$===']($case)) {
            
            self.newline_s = p;;
            
            self.te = $rb_plus(p, 1);
            
            current_literal = self.$literal();
            if (self.te['$=='](pe)) {
              self.$diagnostic("fatal", "string_eof", nil, self.$range(current_literal.$str_s(), $rb_plus(current_literal.$str_s(), 1)))};
            if ($truthy(current_literal['$heredoc?']())) {
              
              line = self.$tok(self.herebody_s, self.ts).$gsub(/\r+$/, "".$freeze());
              if ($truthy(self['$version?'](18, 19, 20))) {
                line = line.$gsub(/\r.*$/, "".$freeze())};
              if ($truthy(current_literal.$nest_and_try_closing(line, self.herebody_s, self.ts))) {
                
                self.herebody_s = self.te;
                p = $rb_minus(current_literal.$heredoc_e(), 1);
                self.cs = self.$pop_literal();
                
                p = $rb_plus(p, 1);
                _goto_level = _out;
                continue;;;
              } else {
                
                current_literal.$infer_indent_level(line);
                self.herebody_s = self.te;
              };
            } else {
              
              if ($truthy(current_literal.$nest_and_try_closing(self.$tok(), self.ts, self.te))) {
                
                self.cs = self.$pop_literal();
                
                p = $rb_plus(p, 1);
                _goto_level = _out;
                continue;;;};
              if ($truthy(self.herebody_s)) {
                
                p = $rb_minus(self.herebody_s, 1);
                self.herebody_s = nil;};
            };
            if ($truthy(($truthy($b = current_literal['$words?']()) ? self['$eof_codepoint?'](self.source_pts['$[]'](p))['$!']() : $b))) {
              current_literal.$extend_space(self.ts, self.te)
            } else {
              
              current_literal.$extend_string(self.$tok(), self.ts, self.te);
              current_literal.$flush_string();
            };;;}
            else if ((187)['$===']($case)) {
            
            self.newline_s = p;;
            
            self.te = $rb_plus(p, 1);
            
            current_literal = self.$literal();
            if (self.te['$=='](pe)) {
              self.$diagnostic("fatal", "string_eof", nil, self.$range(current_literal.$str_s(), $rb_plus(current_literal.$str_s(), 1)))};
            if ($truthy(current_literal['$heredoc?']())) {
              
              line = self.$tok(self.herebody_s, self.ts).$gsub(/\r+$/, "".$freeze());
              if ($truthy(self['$version?'](18, 19, 20))) {
                line = line.$gsub(/\r.*$/, "".$freeze())};
              if ($truthy(current_literal.$nest_and_try_closing(line, self.herebody_s, self.ts))) {
                
                self.herebody_s = self.te;
                p = $rb_minus(current_literal.$heredoc_e(), 1);
                self.cs = self.$pop_literal();
                
                p = $rb_plus(p, 1);
                _goto_level = _out;
                continue;;;
              } else {
                
                current_literal.$infer_indent_level(line);
                self.herebody_s = self.te;
              };
            } else {
              
              if ($truthy(current_literal.$nest_and_try_closing(self.$tok(), self.ts, self.te))) {
                
                self.cs = self.$pop_literal();
                
                p = $rb_plus(p, 1);
                _goto_level = _out;
                continue;;;};
              if ($truthy(self.herebody_s)) {
                
                p = $rb_minus(self.herebody_s, 1);
                self.herebody_s = nil;};
            };
            if ($truthy(($truthy($b = current_literal['$words?']()) ? self['$eof_codepoint?'](self.source_pts['$[]'](p))['$!']() : $b))) {
              current_literal.$extend_space(self.ts, self.te)
            } else {
              
              current_literal.$extend_string(self.$tok(), self.ts, self.te);
              current_literal.$flush_string();
            };;;}
            else if ((190)['$===']($case)) {
            
            self.newline_s = p;;
            
            self.te = $rb_plus(p, 1);
            
            current_literal = self.$literal();
            if (self.te['$=='](pe)) {
              self.$diagnostic("fatal", "string_eof", nil, self.$range(current_literal.$str_s(), $rb_plus(current_literal.$str_s(), 1)))};
            if ($truthy(current_literal['$heredoc?']())) {
              
              line = self.$tok(self.herebody_s, self.ts).$gsub(/\r+$/, "".$freeze());
              if ($truthy(self['$version?'](18, 19, 20))) {
                line = line.$gsub(/\r.*$/, "".$freeze())};
              if ($truthy(current_literal.$nest_and_try_closing(line, self.herebody_s, self.ts))) {
                
                self.herebody_s = self.te;
                p = $rb_minus(current_literal.$heredoc_e(), 1);
                self.cs = self.$pop_literal();
                
                p = $rb_plus(p, 1);
                _goto_level = _out;
                continue;;;
              } else {
                
                current_literal.$infer_indent_level(line);
                self.herebody_s = self.te;
              };
            } else {
              
              if ($truthy(current_literal.$nest_and_try_closing(self.$tok(), self.ts, self.te))) {
                
                self.cs = self.$pop_literal();
                
                p = $rb_plus(p, 1);
                _goto_level = _out;
                continue;;;};
              if ($truthy(self.herebody_s)) {
                
                p = $rb_minus(self.herebody_s, 1);
                self.herebody_s = nil;};
            };
            if ($truthy(($truthy($b = current_literal['$words?']()) ? self['$eof_codepoint?'](self.source_pts['$[]'](p))['$!']() : $b))) {
              current_literal.$extend_space(self.ts, self.te)
            } else {
              
              current_literal.$extend_string(self.$tok(), self.ts, self.te);
              current_literal.$flush_string();
            };;;}
            else if ((198)['$===']($case)) {
            
            self.newline_s = p;;
            
            self.te = $rb_plus(p, 1);
            
            current_literal = self.$literal();
            if (self.te['$=='](pe)) {
              self.$diagnostic("fatal", "string_eof", nil, self.$range(current_literal.$str_s(), $rb_plus(current_literal.$str_s(), 1)))};
            if ($truthy(current_literal['$heredoc?']())) {
              
              line = self.$tok(self.herebody_s, self.ts).$gsub(/\r+$/, "".$freeze());
              if ($truthy(self['$version?'](18, 19, 20))) {
                line = line.$gsub(/\r.*$/, "".$freeze())};
              if ($truthy(current_literal.$nest_and_try_closing(line, self.herebody_s, self.ts))) {
                
                self.herebody_s = self.te;
                p = $rb_minus(current_literal.$heredoc_e(), 1);
                self.cs = self.$pop_literal();
                
                p = $rb_plus(p, 1);
                _goto_level = _out;
                continue;;;
              } else {
                
                current_literal.$infer_indent_level(line);
                self.herebody_s = self.te;
              };
            } else {
              
              if ($truthy(current_literal.$nest_and_try_closing(self.$tok(), self.ts, self.te))) {
                
                self.cs = self.$pop_literal();
                
                p = $rb_plus(p, 1);
                _goto_level = _out;
                continue;;;};
              if ($truthy(self.herebody_s)) {
                
                p = $rb_minus(self.herebody_s, 1);
                self.herebody_s = nil;};
            };
            if ($truthy(($truthy($b = current_literal['$words?']()) ? self['$eof_codepoint?'](self.source_pts['$[]'](p))['$!']() : $b))) {
              current_literal.$extend_space(self.ts, self.te)
            } else {
              
              current_literal.$extend_string(self.$tok(), self.ts, self.te);
              current_literal.$flush_string();
            };;;}
            else if ((269)['$===']($case)) {
            
            self.newline_s = p;;
            
            self.te = $rb_plus(p, 1);
            
            p = $rb_minus(self.ts, 1);
            
            self.cs = 781;
            _goto_level = _again;
            continue;;;;;}
            else if ((260)['$===']($case)) {
            
            self.newline_s = p;;
            
            self.te = $rb_plus(p, 1);
            
            p = $rb_minus(tm, 1);
            
            self.cs = 781;
            _goto_level = _again;
            continue;;;;;}
            else if ((252)['$===']($case)) {
            
            self.newline_s = p;;
            
            self.te = $rb_plus(p, 1);
            
            p = $rb_minus(self.ts, 1);
            
            self.cs = 781;
            _goto_level = _again;
            continue;;;;;}
            else if ((352)['$===']($case)) {
            
            self.newline_s = p;;
            
            self.te = $rb_plus(p, 1);
            
            escape = $hash2([" ", "\r", "\n", "\t", "\v", "\f"], {" ": "\\s", "\r": "\\r", "\n": "\\n", "\t": "\\t", "\v": "\\v", "\f": "\\f"})['$[]'](self.source_buffer.$slice($rb_plus(self.ts, 1)));
            self.$diagnostic("warning", "invalid_escape_use", $hash2(["escape"], {"escape": escape}), self.$range());
            p = $rb_minus(self.ts, 1);
            
            self.cs = 781;
            _goto_level = _again;
            continue;;;;;}
            else if ((315)['$===']($case)) {
            
            self.newline_s = p;;
            
            self.te = $rb_plus(p, 1);
            
            p = $rb_minus(self.ts, 1);
            self.cs_before_block_comment = self.cs;
            
            self.cs = 185;
            _goto_level = _again;
            continue;;;;;}
            else if ((434)['$===']($case)) {
            
            self.newline_s = p;;
            
            self.te = $rb_plus(p, 1);
            
            if (self.paren_nest['$=='](0)) {
              self.$diagnostic("warning", "triple_dot_at_eol", nil, self.$range(self.ts, $rb_minus(self.te, 1)))};
            self.$emit("tDOT3", "...".$freeze(), self.ts, $rb_minus(self.te, 1));
            p = $rb_minus(p, 1);
            self.cs = 543;
            
            p = $rb_plus(p, 1);
            _goto_level = _out;
            continue;;;;;}
            else if ((508)['$===']($case)) {
            
            self.newline_s = p;;
            
            self.te = $rb_plus(p, 1);
            
            self.$emit_comment(self.eq_begin_s, self.te);
            
            self.cs = self.cs_before_block_comment;
            _goto_level = _again;
            continue;;;;;}
            else if ((505)['$===']($case)) {
            
            self.newline_s = p;;
            
            self.te = $rb_plus(p, 1);;}
            else if ((107)['$===']($case)) {
            
            self.newline_s = p;;
            
            self.te = $rb_plus(p, 1);
            
            self.eq_begin_s = self.ts;
            
            self.cs = 967;
            _goto_level = _again;
            continue;;;;;}
            else if ((3)['$===']($case)) {
            
            self.newline_s = p;;
            
            self.te = $rb_plus(p, 1);
            
            p = $rb_minus(pe, 3);;;}
            else if ((456)['$===']($case)) {
            
            self.num_xfrm = $send(self, 'lambda', [], ($$13 = function(chars){var self = $$13.$$s == null ? this : $$13.$$s;

            
              
              if (chars == null) {
                chars = nil;
              };
              return self.$emit("tRATIONAL", self.$Rational(chars));}, $$13.$$s = self, $$13.$$arity = 1, $$13));;
            
            self.te = p;
            p = $rb_minus(p, 1);
            
            digits = self.$tok(self.num_digits_s, self.num_suffix_s);
            if ($truthy(digits['$end_with?']("_".$freeze()))) {
              self.$diagnostic("error", "trailing_in_number", $hash2(["character"], {"character": "_".$freeze()}), self.$range($rb_minus(self.te, 1), self.te))
            } else if ($truthy(($truthy($b = ($truthy($c = digits['$empty?']()) ? self.num_base['$=='](8) : $c)) ? self['$version?'](18) : $b))) {
              digits = "0".$freeze()
            } else if ($truthy(digits['$empty?']())) {
              self.$diagnostic("error", "empty_numeric")
            } else if ($truthy((($b = self.num_base['$=='](8)) ? (invalid_idx = digits.$index(/[89]/)) : self.num_base['$=='](8)))) {
              
              invalid_s = $rb_plus(self.num_digits_s, invalid_idx);
              self.$diagnostic("error", "invalid_octal", nil, self.$range(invalid_s, $rb_plus(invalid_s, 1)));};
            if ($truthy(self['$version?'](18, 19, 20))) {
              
              self.$emit("tINTEGER", digits.$to_i(self.num_base), self.ts, self.num_suffix_s);
              p = $rb_minus(self.num_suffix_s, 1);
            } else {
              self.num_xfrm.$call(digits.$to_i(self.num_base))
            };
            
            p = $rb_plus(p, 1);
            _goto_level = _out;
            continue;;;;;}
            else if ((454)['$===']($case)) {
            
            self.num_xfrm = $send(self, 'lambda', [], ($$14 = function(chars){var self = $$14.$$s == null ? this : $$14.$$s;

            
              
              if (chars == null) {
                chars = nil;
              };
              return self.$emit("tIMAGINARY", self.$Complex(0, chars));}, $$14.$$s = self, $$14.$$arity = 1, $$14));;
            
            self.te = p;
            p = $rb_minus(p, 1);
            
            digits = self.$tok(self.num_digits_s, self.num_suffix_s);
            if ($truthy(digits['$end_with?']("_".$freeze()))) {
              self.$diagnostic("error", "trailing_in_number", $hash2(["character"], {"character": "_".$freeze()}), self.$range($rb_minus(self.te, 1), self.te))
            } else if ($truthy(($truthy($b = ($truthy($c = digits['$empty?']()) ? self.num_base['$=='](8) : $c)) ? self['$version?'](18) : $b))) {
              digits = "0".$freeze()
            } else if ($truthy(digits['$empty?']())) {
              self.$diagnostic("error", "empty_numeric")
            } else if ($truthy((($b = self.num_base['$=='](8)) ? (invalid_idx = digits.$index(/[89]/)) : self.num_base['$=='](8)))) {
              
              invalid_s = $rb_plus(self.num_digits_s, invalid_idx);
              self.$diagnostic("error", "invalid_octal", nil, self.$range(invalid_s, $rb_plus(invalid_s, 1)));};
            if ($truthy(self['$version?'](18, 19, 20))) {
              
              self.$emit("tINTEGER", digits.$to_i(self.num_base), self.ts, self.num_suffix_s);
              p = $rb_minus(self.num_suffix_s, 1);
            } else {
              self.num_xfrm.$call(digits.$to_i(self.num_base))
            };
            
            p = $rb_plus(p, 1);
            _goto_level = _out;
            continue;;;;;}
            else if ((459)['$===']($case)) {
            
            self.num_xfrm = $send(self, 'lambda', [], ($$15 = function(chars){var self = $$15.$$s == null ? this : $$15.$$s;

            
              
              if (chars == null) {
                chars = nil;
              };
              return self.$emit("tIMAGINARY", self.$Complex(0, self.$Rational(chars)));}, $$15.$$s = self, $$15.$$arity = 1, $$15));;
            
            self.te = p;
            p = $rb_minus(p, 1);
            
            digits = self.$tok(self.num_digits_s, self.num_suffix_s);
            if ($truthy(digits['$end_with?']("_".$freeze()))) {
              self.$diagnostic("error", "trailing_in_number", $hash2(["character"], {"character": "_".$freeze()}), self.$range($rb_minus(self.te, 1), self.te))
            } else if ($truthy(($truthy($b = ($truthy($c = digits['$empty?']()) ? self.num_base['$=='](8) : $c)) ? self['$version?'](18) : $b))) {
              digits = "0".$freeze()
            } else if ($truthy(digits['$empty?']())) {
              self.$diagnostic("error", "empty_numeric")
            } else if ($truthy((($b = self.num_base['$=='](8)) ? (invalid_idx = digits.$index(/[89]/)) : self.num_base['$=='](8)))) {
              
              invalid_s = $rb_plus(self.num_digits_s, invalid_idx);
              self.$diagnostic("error", "invalid_octal", nil, self.$range(invalid_s, $rb_plus(invalid_s, 1)));};
            if ($truthy(self['$version?'](18, 19, 20))) {
              
              self.$emit("tINTEGER", digits.$to_i(self.num_base), self.ts, self.num_suffix_s);
              p = $rb_minus(self.num_suffix_s, 1);
            } else {
              self.num_xfrm.$call(digits.$to_i(self.num_base))
            };
            
            p = $rb_plus(p, 1);
            _goto_level = _out;
            continue;;;;;}
            else if ((457)['$===']($case)) {
            
            self.num_xfrm = $send(self, 'lambda', [], ($$16 = function(chars){var self = $$16.$$s == null ? this : $$16.$$s;
              if (self.ts == null) self.ts = nil;
              if (self.te == null) self.te = nil;

            
              
              if (chars == null) {
                chars = nil;
              };
              self.$emit("tINTEGER", chars, self.ts, $rb_minus(self.te, 2));
              return (p = $rb_minus(p, 2));}, $$16.$$s = self, $$16.$$arity = 1, $$16));;
            
            self.te = p;
            p = $rb_minus(p, 1);
            
            digits = self.$tok(self.num_digits_s, self.num_suffix_s);
            if ($truthy(digits['$end_with?']("_".$freeze()))) {
              self.$diagnostic("error", "trailing_in_number", $hash2(["character"], {"character": "_".$freeze()}), self.$range($rb_minus(self.te, 1), self.te))
            } else if ($truthy(($truthy($b = ($truthy($c = digits['$empty?']()) ? self.num_base['$=='](8) : $c)) ? self['$version?'](18) : $b))) {
              digits = "0".$freeze()
            } else if ($truthy(digits['$empty?']())) {
              self.$diagnostic("error", "empty_numeric")
            } else if ($truthy((($b = self.num_base['$=='](8)) ? (invalid_idx = digits.$index(/[89]/)) : self.num_base['$=='](8)))) {
              
              invalid_s = $rb_plus(self.num_digits_s, invalid_idx);
              self.$diagnostic("error", "invalid_octal", nil, self.$range(invalid_s, $rb_plus(invalid_s, 1)));};
            if ($truthy(self['$version?'](18, 19, 20))) {
              
              self.$emit("tINTEGER", digits.$to_i(self.num_base), self.ts, self.num_suffix_s);
              p = $rb_minus(self.num_suffix_s, 1);
            } else {
              self.num_xfrm.$call(digits.$to_i(self.num_base))
            };
            
            p = $rb_plus(p, 1);
            _goto_level = _out;
            continue;;;;;}
            else if ((455)['$===']($case)) {
            
            self.num_xfrm = $send(self, 'lambda', [], ($$17 = function(chars){var self = $$17.$$s == null ? this : $$17.$$s;
              if (self.ts == null) self.ts = nil;
              if (self.te == null) self.te = nil;

            
              
              if (chars == null) {
                chars = nil;
              };
              self.$emit("tINTEGER", chars, self.ts, $rb_minus(self.te, 2));
              return (p = $rb_minus(p, 2));}, $$17.$$s = self, $$17.$$arity = 1, $$17));;
            
            self.te = p;
            p = $rb_minus(p, 1);
            
            digits = self.$tok(self.num_digits_s, self.num_suffix_s);
            if ($truthy(digits['$end_with?']("_".$freeze()))) {
              self.$diagnostic("error", "trailing_in_number", $hash2(["character"], {"character": "_".$freeze()}), self.$range($rb_minus(self.te, 1), self.te))
            } else if ($truthy(($truthy($b = ($truthy($c = digits['$empty?']()) ? self.num_base['$=='](8) : $c)) ? self['$version?'](18) : $b))) {
              digits = "0".$freeze()
            } else if ($truthy(digits['$empty?']())) {
              self.$diagnostic("error", "empty_numeric")
            } else if ($truthy((($b = self.num_base['$=='](8)) ? (invalid_idx = digits.$index(/[89]/)) : self.num_base['$=='](8)))) {
              
              invalid_s = $rb_plus(self.num_digits_s, invalid_idx);
              self.$diagnostic("error", "invalid_octal", nil, self.$range(invalid_s, $rb_plus(invalid_s, 1)));};
            if ($truthy(self['$version?'](18, 19, 20))) {
              
              self.$emit("tINTEGER", digits.$to_i(self.num_base), self.ts, self.num_suffix_s);
              p = $rb_minus(self.num_suffix_s, 1);
            } else {
              self.num_xfrm.$call(digits.$to_i(self.num_base))
            };
            
            p = $rb_plus(p, 1);
            _goto_level = _out;
            continue;;;;;}
            else if ((458)['$===']($case)) {
            
            self.num_xfrm = $send(self, 'lambda', [], ($$18 = function(chars){var self = $$18.$$s == null ? this : $$18.$$s;
              if (self.ts == null) self.ts = nil;
              if (self.te == null) self.te = nil;

            
              
              if (chars == null) {
                chars = nil;
              };
              self.$emit("tINTEGER", chars, self.ts, $rb_minus(self.te, 6));
              return (p = $rb_minus(p, 6));}, $$18.$$s = self, $$18.$$arity = 1, $$18));;
            
            self.te = p;
            p = $rb_minus(p, 1);
            
            digits = self.$tok(self.num_digits_s, self.num_suffix_s);
            if ($truthy(digits['$end_with?']("_".$freeze()))) {
              self.$diagnostic("error", "trailing_in_number", $hash2(["character"], {"character": "_".$freeze()}), self.$range($rb_minus(self.te, 1), self.te))
            } else if ($truthy(($truthy($b = ($truthy($c = digits['$empty?']()) ? self.num_base['$=='](8) : $c)) ? self['$version?'](18) : $b))) {
              digits = "0".$freeze()
            } else if ($truthy(digits['$empty?']())) {
              self.$diagnostic("error", "empty_numeric")
            } else if ($truthy((($b = self.num_base['$=='](8)) ? (invalid_idx = digits.$index(/[89]/)) : self.num_base['$=='](8)))) {
              
              invalid_s = $rb_plus(self.num_digits_s, invalid_idx);
              self.$diagnostic("error", "invalid_octal", nil, self.$range(invalid_s, $rb_plus(invalid_s, 1)));};
            if ($truthy(self['$version?'](18, 19, 20))) {
              
              self.$emit("tINTEGER", digits.$to_i(self.num_base), self.ts, self.num_suffix_s);
              p = $rb_minus(self.num_suffix_s, 1);
            } else {
              self.num_xfrm.$call(digits.$to_i(self.num_base))
            };
            
            p = $rb_plus(p, 1);
            _goto_level = _out;
            continue;;;;;}
            else if ((447)['$===']($case)) {
            
            self.num_xfrm = $send(self, 'lambda', [], ($$19 = function(chars){var self = $$19.$$s == null ? this : $$19.$$s;

            
              
              if (chars == null) {
                chars = nil;
              };
              return self.$emit("tIMAGINARY", self.$Complex(0, self.$Float(chars)));}, $$19.$$s = self, $$19.$$arity = 1, $$19));;
            
            self.te = p;
            p = $rb_minus(p, 1);
            
            digits = self.$tok(self.ts, self.num_suffix_s);
            if ($truthy(self['$version?'](18, 19, 20))) {
              
              self.$emit("tFLOAT", self.$Float(digits), self.ts, self.num_suffix_s);
              p = $rb_minus(self.num_suffix_s, 1);
            } else {
              self.num_xfrm.$call(digits)
            };
            
            p = $rb_plus(p, 1);
            _goto_level = _out;
            continue;;;;;}
            else if ((448)['$===']($case)) {
            
            self.num_xfrm = $send(self, 'lambda', [], ($$20 = function(chars){var self = $$20.$$s == null ? this : $$20.$$s;
              if (self.ts == null) self.ts = nil;
              if (self.te == null) self.te = nil;

            
              
              if (chars == null) {
                chars = nil;
              };
              self.$emit("tFLOAT", self.$Float(chars), self.ts, $rb_minus(self.te, 2));
              return (p = $rb_minus(p, 2));}, $$20.$$s = self, $$20.$$arity = 1, $$20));;
            
            self.te = p;
            p = $rb_minus(p, 1);
            
            digits = self.$tok(self.ts, self.num_suffix_s);
            if ($truthy(self['$version?'](18, 19, 20))) {
              
              self.$emit("tFLOAT", self.$Float(digits), self.ts, self.num_suffix_s);
              p = $rb_minus(self.num_suffix_s, 1);
            } else {
              self.num_xfrm.$call(digits)
            };
            
            p = $rb_plus(p, 1);
            _goto_level = _out;
            continue;;;;;}
            else if ((449)['$===']($case)) {
            
            self.num_xfrm = $send(self, 'lambda', [], ($$21 = function(chars){var self = $$21.$$s == null ? this : $$21.$$s;

            
              
              if (chars == null) {
                chars = nil;
              };
              return self.$emit("tRATIONAL", self.$Rational(chars));}, $$21.$$s = self, $$21.$$arity = 1, $$21));;
            
            self.te = p;
            p = $rb_minus(p, 1);
            
            digits = self.$tok(self.ts, self.num_suffix_s);
            if ($truthy(self['$version?'](18, 19, 20))) {
              
              self.$emit("tFLOAT", self.$Float(digits), self.ts, self.num_suffix_s);
              p = $rb_minus(self.num_suffix_s, 1);
            } else {
              self.num_xfrm.$call(digits)
            };
            
            p = $rb_plus(p, 1);
            _goto_level = _out;
            continue;;;;;}
            else if ((451)['$===']($case)) {
            
            self.num_xfrm = $send(self, 'lambda', [], ($$22 = function(chars){var self = $$22.$$s == null ? this : $$22.$$s;

            
              
              if (chars == null) {
                chars = nil;
              };
              return self.$emit("tIMAGINARY", self.$Complex(0, self.$Rational(chars)));}, $$22.$$s = self, $$22.$$arity = 1, $$22));;
            
            self.te = p;
            p = $rb_minus(p, 1);
            
            digits = self.$tok(self.ts, self.num_suffix_s);
            if ($truthy(self['$version?'](18, 19, 20))) {
              
              self.$emit("tFLOAT", self.$Float(digits), self.ts, self.num_suffix_s);
              p = $rb_minus(self.num_suffix_s, 1);
            } else {
              self.num_xfrm.$call(digits)
            };
            
            p = $rb_plus(p, 1);
            _goto_level = _out;
            continue;;;;;}
            else if ((450)['$===']($case)) {
            
            self.num_xfrm = $send(self, 'lambda', [], ($$23 = function(chars){var self = $$23.$$s == null ? this : $$23.$$s;
              if (self.ts == null) self.ts = nil;
              if (self.te == null) self.te = nil;

            
              
              if (chars == null) {
                chars = nil;
              };
              self.$emit("tFLOAT", self.$Float(chars), self.ts, $rb_minus(self.te, 6));
              return (p = $rb_minus(p, 6));}, $$23.$$s = self, $$23.$$arity = 1, $$23));;
            
            self.te = p;
            p = $rb_minus(p, 1);
            
            digits = self.$tok(self.ts, self.num_suffix_s);
            if ($truthy(self['$version?'](18, 19, 20))) {
              
              self.$emit("tFLOAT", self.$Float(digits), self.ts, self.num_suffix_s);
              p = $rb_minus(self.num_suffix_s, 1);
            } else {
              self.num_xfrm.$call(digits)
            };
            
            p = $rb_plus(p, 1);
            _goto_level = _out;
            continue;;;;;}
            else if ((134)['$===']($case)) {
            
            self.escape = "";
            codepoints = self.$tok($rb_plus(self.escape_s, 2), $rb_minus(p, 1));
            codepoint_s = $rb_plus(self.escape_s, 2);
            if ($truthy($rb_lt(self.version, 24))) {
              
              if ($truthy(($truthy($b = codepoints['$start_with?'](" ")) ? $b : codepoints['$start_with?']("\t")))) {
                self.$diagnostic("fatal", "invalid_unicode_escape", nil, self.$range($rb_plus(self.escape_s, 2), $rb_plus(self.escape_s, 3)))};
              if ($truthy((spaces_p = codepoints.$index(/[ \t]{2}/)))) {
                self.$diagnostic("fatal", "invalid_unicode_escape", nil, self.$range($rb_plus($rb_plus(codepoint_s, spaces_p), 1), $rb_plus($rb_plus(codepoint_s, spaces_p), 2)))};
              if ($truthy(($truthy($b = codepoints['$end_with?'](" ")) ? $b : codepoints['$end_with?']("\t")))) {
                self.$diagnostic("fatal", "invalid_unicode_escape", nil, self.$range($rb_minus(p, 1), p))};};
            (function(){var $brk = Opal.new_brk(); try {return $send(codepoints.$scan(/([0-9a-fA-F]+)|([ \t]+)/), 'each', [], ($$24 = function($mlhs_tmp1){var self = $$24.$$s == null ? this : $$24.$$s, $d, $e, codepoint_str = nil, spaces = nil, codepoint = nil;
              if (self.escape == null) self.escape = nil;

            
              
              if ($mlhs_tmp1 == null) {
                $mlhs_tmp1 = nil;
              };
              $e = $mlhs_tmp1, $d = Opal.to_ary($e), (codepoint_str = ($d[0] == null ? nil : $d[0])), (spaces = ($d[1] == null ? nil : $d[1])), $e;
              if ($truthy(spaces)) {
                return (codepoint_s = $rb_plus(codepoint_s, spaces.$length()))
              } else {
                
                codepoint = codepoint_str.$to_i(16);
                if ($truthy($rb_ge(codepoint, 1114112))) {
                  
                  self.$diagnostic("error", "unicode_point_too_large", nil, self.$range(codepoint_s, $rb_plus(codepoint_s, codepoint_str.$length())));
                  
                  Opal.brk(nil, $brk);};
                self.escape = $rb_plus(self.escape, codepoint.$chr($$$($$($nesting, 'Encoding'), 'UTF_8')));
                return (codepoint_s = $rb_plus(codepoint_s, codepoint_str.$length()));
              };}, $$24.$$s = self, $$24.$$brk = $brk, $$24.$$arity = 1, $$24.$$has_top_level_mlhs_arg = true, $$24))
            } catch (err) { if (err === $brk) { return err.$v } else { throw err } }})();;
            
            self.te = p;
            p = $rb_minus(p, 1);
            
            current_literal = self.$literal();
            escaped_char = self.source_buffer.$slice(self.escape_s).$chr();
            if ($truthy(current_literal['$munge_escape?'](escaped_char))) {
              if ($truthy(($truthy($b = current_literal['$regexp?']()) ? $$($nesting, 'REGEXP_META_CHARACTERS').$match(escaped_char) : $b))) {
                current_literal.$extend_string(self.$tok(), self.ts, self.te)
              } else {
                current_literal.$extend_string(escaped_char, self.ts, self.te)
              }
            } else if ($truthy(($truthy($b = current_literal['$squiggly_heredoc?']()) ? escaped_char['$==']("\n".$freeze()) : $b))) {
              current_literal.$extend_string(self.$tok(), self.ts, self.te)
            } else if ($truthy(($truthy($b = current_literal['$supports_line_continuation_via_slash?']()) ? escaped_char['$==']("\n".$freeze()) : $b))) {
              current_literal.$extend_string(self.$tok().$gsub("\\\n".$freeze(), "".$freeze()), self.ts, self.te)
            } else if ($truthy(current_literal['$regexp?']())) {
              current_literal.$extend_string(self.$tok().$gsub("\\\n".$freeze(), "".$freeze()), self.ts, self.te)
            } else {
              current_literal.$extend_string(($truthy($b = self.escape) ? $b : self.$tok()), self.ts, self.te)
            };;;}
            else if ((162)['$===']($case)) {
            
            self.escape = "";
            codepoints = self.$tok($rb_plus(self.escape_s, 2), $rb_minus(p, 1));
            codepoint_s = $rb_plus(self.escape_s, 2);
            if ($truthy($rb_lt(self.version, 24))) {
              
              if ($truthy(($truthy($b = codepoints['$start_with?'](" ")) ? $b : codepoints['$start_with?']("\t")))) {
                self.$diagnostic("fatal", "invalid_unicode_escape", nil, self.$range($rb_plus(self.escape_s, 2), $rb_plus(self.escape_s, 3)))};
              if ($truthy((spaces_p = codepoints.$index(/[ \t]{2}/)))) {
                self.$diagnostic("fatal", "invalid_unicode_escape", nil, self.$range($rb_plus($rb_plus(codepoint_s, spaces_p), 1), $rb_plus($rb_plus(codepoint_s, spaces_p), 2)))};
              if ($truthy(($truthy($b = codepoints['$end_with?'](" ")) ? $b : codepoints['$end_with?']("\t")))) {
                self.$diagnostic("fatal", "invalid_unicode_escape", nil, self.$range($rb_minus(p, 1), p))};};
            (function(){var $brk = Opal.new_brk(); try {return $send(codepoints.$scan(/([0-9a-fA-F]+)|([ \t]+)/), 'each', [], ($$25 = function($mlhs_tmp1){var self = $$25.$$s == null ? this : $$25.$$s, $d, $e, codepoint_str = nil, spaces = nil, codepoint = nil;
              if (self.escape == null) self.escape = nil;

            
              
              if ($mlhs_tmp1 == null) {
                $mlhs_tmp1 = nil;
              };
              $e = $mlhs_tmp1, $d = Opal.to_ary($e), (codepoint_str = ($d[0] == null ? nil : $d[0])), (spaces = ($d[1] == null ? nil : $d[1])), $e;
              if ($truthy(spaces)) {
                return (codepoint_s = $rb_plus(codepoint_s, spaces.$length()))
              } else {
                
                codepoint = codepoint_str.$to_i(16);
                if ($truthy($rb_ge(codepoint, 1114112))) {
                  
                  self.$diagnostic("error", "unicode_point_too_large", nil, self.$range(codepoint_s, $rb_plus(codepoint_s, codepoint_str.$length())));
                  
                  Opal.brk(nil, $brk);};
                self.escape = $rb_plus(self.escape, codepoint.$chr($$$($$($nesting, 'Encoding'), 'UTF_8')));
                return (codepoint_s = $rb_plus(codepoint_s, codepoint_str.$length()));
              };}, $$25.$$s = self, $$25.$$brk = $brk, $$25.$$arity = 1, $$25.$$has_top_level_mlhs_arg = true, $$25))
            } catch (err) { if (err === $brk) { return err.$v } else { throw err } }})();;
            
            self.te = p;
            p = $rb_minus(p, 1);
            
            current_literal = self.$literal();
            escaped_char = self.source_buffer.$slice(self.escape_s).$chr();
            if ($truthy(current_literal['$munge_escape?'](escaped_char))) {
              if ($truthy(($truthy($b = current_literal['$regexp?']()) ? $$($nesting, 'REGEXP_META_CHARACTERS').$match(escaped_char) : $b))) {
                current_literal.$extend_string(self.$tok(), self.ts, self.te)
              } else {
                current_literal.$extend_string(escaped_char, self.ts, self.te)
              }
            } else if ($truthy(($truthy($b = current_literal['$squiggly_heredoc?']()) ? escaped_char['$==']("\n".$freeze()) : $b))) {
              current_literal.$extend_string(self.$tok(), self.ts, self.te)
            } else if ($truthy(($truthy($b = current_literal['$supports_line_continuation_via_slash?']()) ? escaped_char['$==']("\n".$freeze()) : $b))) {
              current_literal.$extend_string(self.$tok().$gsub("\\\n".$freeze(), "".$freeze()), self.ts, self.te)
            } else if ($truthy(current_literal['$regexp?']())) {
              current_literal.$extend_string(self.$tok().$gsub("\\\n".$freeze(), "".$freeze()), self.ts, self.te)
            } else {
              current_literal.$extend_string(($truthy($b = self.escape) ? $b : self.$tok()), self.ts, self.te)
            };;;}
            else if ((373)['$===']($case)) {
            
            self.escape = "";
            codepoints = self.$tok($rb_plus(self.escape_s, 2), $rb_minus(p, 1));
            codepoint_s = $rb_plus(self.escape_s, 2);
            if ($truthy($rb_lt(self.version, 24))) {
              
              if ($truthy(($truthy($b = codepoints['$start_with?'](" ")) ? $b : codepoints['$start_with?']("\t")))) {
                self.$diagnostic("fatal", "invalid_unicode_escape", nil, self.$range($rb_plus(self.escape_s, 2), $rb_plus(self.escape_s, 3)))};
              if ($truthy((spaces_p = codepoints.$index(/[ \t]{2}/)))) {
                self.$diagnostic("fatal", "invalid_unicode_escape", nil, self.$range($rb_plus($rb_plus(codepoint_s, spaces_p), 1), $rb_plus($rb_plus(codepoint_s, spaces_p), 2)))};
              if ($truthy(($truthy($b = codepoints['$end_with?'](" ")) ? $b : codepoints['$end_with?']("\t")))) {
                self.$diagnostic("fatal", "invalid_unicode_escape", nil, self.$range($rb_minus(p, 1), p))};};
            (function(){var $brk = Opal.new_brk(); try {return $send(codepoints.$scan(/([0-9a-fA-F]+)|([ \t]+)/), 'each', [], ($$26 = function($mlhs_tmp1){var self = $$26.$$s == null ? this : $$26.$$s, $d, $e, codepoint_str = nil, spaces = nil, codepoint = nil;
              if (self.escape == null) self.escape = nil;

            
              
              if ($mlhs_tmp1 == null) {
                $mlhs_tmp1 = nil;
              };
              $e = $mlhs_tmp1, $d = Opal.to_ary($e), (codepoint_str = ($d[0] == null ? nil : $d[0])), (spaces = ($d[1] == null ? nil : $d[1])), $e;
              if ($truthy(spaces)) {
                return (codepoint_s = $rb_plus(codepoint_s, spaces.$length()))
              } else {
                
                codepoint = codepoint_str.$to_i(16);
                if ($truthy($rb_ge(codepoint, 1114112))) {
                  
                  self.$diagnostic("error", "unicode_point_too_large", nil, self.$range(codepoint_s, $rb_plus(codepoint_s, codepoint_str.$length())));
                  
                  Opal.brk(nil, $brk);};
                self.escape = $rb_plus(self.escape, codepoint.$chr($$$($$($nesting, 'Encoding'), 'UTF_8')));
                return (codepoint_s = $rb_plus(codepoint_s, codepoint_str.$length()));
              };}, $$26.$$s = self, $$26.$$brk = $brk, $$26.$$arity = 1, $$26.$$has_top_level_mlhs_arg = true, $$26))
            } catch (err) { if (err === $brk) { return err.$v } else { throw err } }})();;
            
            self.te = p;
            p = $rb_minus(p, 1);
            
            value = ($truthy($b = self.escape) ? $b : self.$tok($rb_plus(self.ts, 1)));
            if ($truthy(self['$version?'](18))) {
              self.$emit("tINTEGER", value.$getbyte(0))
            } else {
              self.$emit("tCHARACTER", value)
            };
            self.cs = 781;
            
            p = $rb_plus(p, 1);
            _goto_level = _out;
            continue;;;;;}
            else if ((118)['$===']($case)) {
            
            codepoint = self.source_pts['$[]']($rb_minus(p, 1));
            if ($truthy((self.escape = $$($nesting, 'ESCAPES')['$[]'](codepoint))['$nil?']())) {
              self.escape = self.$encode_escape(self.source_buffer.$slice($rb_minus(p, 1)))};;
            
            self.te = p;
            p = $rb_minus(p, 1);
            
            current_literal = self.$literal();
            escaped_char = self.source_buffer.$slice(self.escape_s).$chr();
            if ($truthy(current_literal['$munge_escape?'](escaped_char))) {
              if ($truthy(($truthy($b = current_literal['$regexp?']()) ? $$($nesting, 'REGEXP_META_CHARACTERS').$match(escaped_char) : $b))) {
                current_literal.$extend_string(self.$tok(), self.ts, self.te)
              } else {
                current_literal.$extend_string(escaped_char, self.ts, self.te)
              }
            } else if ($truthy(($truthy($b = current_literal['$squiggly_heredoc?']()) ? escaped_char['$==']("\n".$freeze()) : $b))) {
              current_literal.$extend_string(self.$tok(), self.ts, self.te)
            } else if ($truthy(($truthy($b = current_literal['$supports_line_continuation_via_slash?']()) ? escaped_char['$==']("\n".$freeze()) : $b))) {
              current_literal.$extend_string(self.$tok().$gsub("\\\n".$freeze(), "".$freeze()), self.ts, self.te)
            } else if ($truthy(current_literal['$regexp?']())) {
              current_literal.$extend_string(self.$tok().$gsub("\\\n".$freeze(), "".$freeze()), self.ts, self.te)
            } else {
              current_literal.$extend_string(($truthy($b = self.escape) ? $b : self.$tok()), self.ts, self.te)
            };;;}
            else if ((146)['$===']($case)) {
            
            codepoint = self.source_pts['$[]']($rb_minus(p, 1));
            if ($truthy((self.escape = $$($nesting, 'ESCAPES')['$[]'](codepoint))['$nil?']())) {
              self.escape = self.$encode_escape(self.source_buffer.$slice($rb_minus(p, 1)))};;
            
            self.te = p;
            p = $rb_minus(p, 1);
            
            current_literal = self.$literal();
            escaped_char = self.source_buffer.$slice(self.escape_s).$chr();
            if ($truthy(current_literal['$munge_escape?'](escaped_char))) {
              if ($truthy(($truthy($b = current_literal['$regexp?']()) ? $$($nesting, 'REGEXP_META_CHARACTERS').$match(escaped_char) : $b))) {
                current_literal.$extend_string(self.$tok(), self.ts, self.te)
              } else {
                current_literal.$extend_string(escaped_char, self.ts, self.te)
              }
            } else if ($truthy(($truthy($b = current_literal['$squiggly_heredoc?']()) ? escaped_char['$==']("\n".$freeze()) : $b))) {
              current_literal.$extend_string(self.$tok(), self.ts, self.te)
            } else if ($truthy(($truthy($b = current_literal['$supports_line_continuation_via_slash?']()) ? escaped_char['$==']("\n".$freeze()) : $b))) {
              current_literal.$extend_string(self.$tok().$gsub("\\\n".$freeze(), "".$freeze()), self.ts, self.te)
            } else if ($truthy(current_literal['$regexp?']())) {
              current_literal.$extend_string(self.$tok().$gsub("\\\n".$freeze(), "".$freeze()), self.ts, self.te)
            } else {
              current_literal.$extend_string(($truthy($b = self.escape) ? $b : self.$tok()), self.ts, self.te)
            };;;}
            else if ((357)['$===']($case)) {
            
            codepoint = self.source_pts['$[]']($rb_minus(p, 1));
            if ($truthy((self.escape = $$($nesting, 'ESCAPES')['$[]'](codepoint))['$nil?']())) {
              self.escape = self.$encode_escape(self.source_buffer.$slice($rb_minus(p, 1)))};;
            
            self.te = p;
            p = $rb_minus(p, 1);
            
            value = ($truthy($b = self.escape) ? $b : self.$tok($rb_plus(self.ts, 1)));
            if ($truthy(self['$version?'](18))) {
              self.$emit("tINTEGER", value.$getbyte(0))
            } else {
              self.$emit("tCHARACTER", value)
            };
            self.cs = 781;
            
            p = $rb_plus(p, 1);
            _goto_level = _out;
            continue;;;;;}
            else if ((121)['$===']($case)) {
            
            self.$diagnostic("fatal", "invalid_escape");;
            
            self.te = p;
            p = $rb_minus(p, 1);
            
            current_literal = self.$literal();
            escaped_char = self.source_buffer.$slice(self.escape_s).$chr();
            if ($truthy(current_literal['$munge_escape?'](escaped_char))) {
              if ($truthy(($truthy($b = current_literal['$regexp?']()) ? $$($nesting, 'REGEXP_META_CHARACTERS').$match(escaped_char) : $b))) {
                current_literal.$extend_string(self.$tok(), self.ts, self.te)
              } else {
                current_literal.$extend_string(escaped_char, self.ts, self.te)
              }
            } else if ($truthy(($truthy($b = current_literal['$squiggly_heredoc?']()) ? escaped_char['$==']("\n".$freeze()) : $b))) {
              current_literal.$extend_string(self.$tok(), self.ts, self.te)
            } else if ($truthy(($truthy($b = current_literal['$supports_line_continuation_via_slash?']()) ? escaped_char['$==']("\n".$freeze()) : $b))) {
              current_literal.$extend_string(self.$tok().$gsub("\\\n".$freeze(), "".$freeze()), self.ts, self.te)
            } else if ($truthy(current_literal['$regexp?']())) {
              current_literal.$extend_string(self.$tok().$gsub("\\\n".$freeze(), "".$freeze()), self.ts, self.te)
            } else {
              current_literal.$extend_string(($truthy($b = self.escape) ? $b : self.$tok()), self.ts, self.te)
            };;;}
            else if ((149)['$===']($case)) {
            
            self.$diagnostic("fatal", "invalid_escape");;
            
            self.te = p;
            p = $rb_minus(p, 1);
            
            current_literal = self.$literal();
            escaped_char = self.source_buffer.$slice(self.escape_s).$chr();
            if ($truthy(current_literal['$munge_escape?'](escaped_char))) {
              if ($truthy(($truthy($b = current_literal['$regexp?']()) ? $$($nesting, 'REGEXP_META_CHARACTERS').$match(escaped_char) : $b))) {
                current_literal.$extend_string(self.$tok(), self.ts, self.te)
              } else {
                current_literal.$extend_string(escaped_char, self.ts, self.te)
              }
            } else if ($truthy(($truthy($b = current_literal['$squiggly_heredoc?']()) ? escaped_char['$==']("\n".$freeze()) : $b))) {
              current_literal.$extend_string(self.$tok(), self.ts, self.te)
            } else if ($truthy(($truthy($b = current_literal['$supports_line_continuation_via_slash?']()) ? escaped_char['$==']("\n".$freeze()) : $b))) {
              current_literal.$extend_string(self.$tok().$gsub("\\\n".$freeze(), "".$freeze()), self.ts, self.te)
            } else if ($truthy(current_literal['$regexp?']())) {
              current_literal.$extend_string(self.$tok().$gsub("\\\n".$freeze(), "".$freeze()), self.ts, self.te)
            } else {
              current_literal.$extend_string(($truthy($b = self.escape) ? $b : self.$tok()), self.ts, self.te)
            };;;}
            else if ((360)['$===']($case)) {
            
            self.$diagnostic("fatal", "invalid_escape");;
            
            self.te = p;
            p = $rb_minus(p, 1);
            
            value = ($truthy($b = self.escape) ? $b : self.$tok($rb_plus(self.ts, 1)));
            if ($truthy(self['$version?'](18))) {
              self.$emit("tINTEGER", value.$getbyte(0))
            } else {
              self.$emit("tCHARACTER", value)
            };
            self.cs = 781;
            
            p = $rb_plus(p, 1);
            _goto_level = _out;
            continue;;;;;}
            else if ((123)['$===']($case)) {
            
            self.escape = "\u007F";;
            
            self.te = p;
            p = $rb_minus(p, 1);
            
            current_literal = self.$literal();
            escaped_char = self.source_buffer.$slice(self.escape_s).$chr();
            if ($truthy(current_literal['$munge_escape?'](escaped_char))) {
              if ($truthy(($truthy($b = current_literal['$regexp?']()) ? $$($nesting, 'REGEXP_META_CHARACTERS').$match(escaped_char) : $b))) {
                current_literal.$extend_string(self.$tok(), self.ts, self.te)
              } else {
                current_literal.$extend_string(escaped_char, self.ts, self.te)
              }
            } else if ($truthy(($truthy($b = current_literal['$squiggly_heredoc?']()) ? escaped_char['$==']("\n".$freeze()) : $b))) {
              current_literal.$extend_string(self.$tok(), self.ts, self.te)
            } else if ($truthy(($truthy($b = current_literal['$supports_line_continuation_via_slash?']()) ? escaped_char['$==']("\n".$freeze()) : $b))) {
              current_literal.$extend_string(self.$tok().$gsub("\\\n".$freeze(), "".$freeze()), self.ts, self.te)
            } else if ($truthy(current_literal['$regexp?']())) {
              current_literal.$extend_string(self.$tok().$gsub("\\\n".$freeze(), "".$freeze()), self.ts, self.te)
            } else {
              current_literal.$extend_string(($truthy($b = self.escape) ? $b : self.$tok()), self.ts, self.te)
            };;;}
            else if ((151)['$===']($case)) {
            
            self.escape = "\u007F";;
            
            self.te = p;
            p = $rb_minus(p, 1);
            
            current_literal = self.$literal();
            escaped_char = self.source_buffer.$slice(self.escape_s).$chr();
            if ($truthy(current_literal['$munge_escape?'](escaped_char))) {
              if ($truthy(($truthy($b = current_literal['$regexp?']()) ? $$($nesting, 'REGEXP_META_CHARACTERS').$match(escaped_char) : $b))) {
                current_literal.$extend_string(self.$tok(), self.ts, self.te)
              } else {
                current_literal.$extend_string(escaped_char, self.ts, self.te)
              }
            } else if ($truthy(($truthy($b = current_literal['$squiggly_heredoc?']()) ? escaped_char['$==']("\n".$freeze()) : $b))) {
              current_literal.$extend_string(self.$tok(), self.ts, self.te)
            } else if ($truthy(($truthy($b = current_literal['$supports_line_continuation_via_slash?']()) ? escaped_char['$==']("\n".$freeze()) : $b))) {
              current_literal.$extend_string(self.$tok().$gsub("\\\n".$freeze(), "".$freeze()), self.ts, self.te)
            } else if ($truthy(current_literal['$regexp?']())) {
              current_literal.$extend_string(self.$tok().$gsub("\\\n".$freeze(), "".$freeze()), self.ts, self.te)
            } else {
              current_literal.$extend_string(($truthy($b = self.escape) ? $b : self.$tok()), self.ts, self.te)
            };;;}
            else if ((362)['$===']($case)) {
            
            self.escape = "\u007F";;
            
            self.te = p;
            p = $rb_minus(p, 1);
            
            value = ($truthy($b = self.escape) ? $b : self.$tok($rb_plus(self.ts, 1)));
            if ($truthy(self['$version?'](18))) {
              self.$emit("tINTEGER", value.$getbyte(0))
            } else {
              self.$emit("tCHARACTER", value)
            };
            self.cs = 781;
            
            p = $rb_plus(p, 1);
            _goto_level = _out;
            continue;;;;;}
            else if ((120)['$===']($case)) {
            
            self.escape = self.$encode_escape(self.$tok(self.escape_s, p).$to_i(8)['$%'](256));;
            
            self.te = p;
            p = $rb_minus(p, 1);
            
            current_literal = self.$literal();
            escaped_char = self.source_buffer.$slice(self.escape_s).$chr();
            if ($truthy(current_literal['$munge_escape?'](escaped_char))) {
              if ($truthy(($truthy($b = current_literal['$regexp?']()) ? $$($nesting, 'REGEXP_META_CHARACTERS').$match(escaped_char) : $b))) {
                current_literal.$extend_string(self.$tok(), self.ts, self.te)
              } else {
                current_literal.$extend_string(escaped_char, self.ts, self.te)
              }
            } else if ($truthy(($truthy($b = current_literal['$squiggly_heredoc?']()) ? escaped_char['$==']("\n".$freeze()) : $b))) {
              current_literal.$extend_string(self.$tok(), self.ts, self.te)
            } else if ($truthy(($truthy($b = current_literal['$supports_line_continuation_via_slash?']()) ? escaped_char['$==']("\n".$freeze()) : $b))) {
              current_literal.$extend_string(self.$tok().$gsub("\\\n".$freeze(), "".$freeze()), self.ts, self.te)
            } else if ($truthy(current_literal['$regexp?']())) {
              current_literal.$extend_string(self.$tok().$gsub("\\\n".$freeze(), "".$freeze()), self.ts, self.te)
            } else {
              current_literal.$extend_string(($truthy($b = self.escape) ? $b : self.$tok()), self.ts, self.te)
            };;;}
            else if ((148)['$===']($case)) {
            
            self.escape = self.$encode_escape(self.$tok(self.escape_s, p).$to_i(8)['$%'](256));;
            
            self.te = p;
            p = $rb_minus(p, 1);
            
            current_literal = self.$literal();
            escaped_char = self.source_buffer.$slice(self.escape_s).$chr();
            if ($truthy(current_literal['$munge_escape?'](escaped_char))) {
              if ($truthy(($truthy($b = current_literal['$regexp?']()) ? $$($nesting, 'REGEXP_META_CHARACTERS').$match(escaped_char) : $b))) {
                current_literal.$extend_string(self.$tok(), self.ts, self.te)
              } else {
                current_literal.$extend_string(escaped_char, self.ts, self.te)
              }
            } else if ($truthy(($truthy($b = current_literal['$squiggly_heredoc?']()) ? escaped_char['$==']("\n".$freeze()) : $b))) {
              current_literal.$extend_string(self.$tok(), self.ts, self.te)
            } else if ($truthy(($truthy($b = current_literal['$supports_line_continuation_via_slash?']()) ? escaped_char['$==']("\n".$freeze()) : $b))) {
              current_literal.$extend_string(self.$tok().$gsub("\\\n".$freeze(), "".$freeze()), self.ts, self.te)
            } else if ($truthy(current_literal['$regexp?']())) {
              current_literal.$extend_string(self.$tok().$gsub("\\\n".$freeze(), "".$freeze()), self.ts, self.te)
            } else {
              current_literal.$extend_string(($truthy($b = self.escape) ? $b : self.$tok()), self.ts, self.te)
            };;;}
            else if ((359)['$===']($case)) {
            
            self.escape = self.$encode_escape(self.$tok(self.escape_s, p).$to_i(8)['$%'](256));;
            
            self.te = p;
            p = $rb_minus(p, 1);
            
            value = ($truthy($b = self.escape) ? $b : self.$tok($rb_plus(self.ts, 1)));
            if ($truthy(self['$version?'](18))) {
              self.$emit("tINTEGER", value.$getbyte(0))
            } else {
              self.$emit("tCHARACTER", value)
            };
            self.cs = 781;
            
            p = $rb_plus(p, 1);
            _goto_level = _out;
            continue;;;;;}
            else if ((137)['$===']($case)) {
            
            self.escape = self.$encode_escape(self.$tok($rb_plus(self.escape_s, 1), p).$to_i(16));;
            
            self.te = p;
            p = $rb_minus(p, 1);
            
            current_literal = self.$literal();
            escaped_char = self.source_buffer.$slice(self.escape_s).$chr();
            if ($truthy(current_literal['$munge_escape?'](escaped_char))) {
              if ($truthy(($truthy($b = current_literal['$regexp?']()) ? $$($nesting, 'REGEXP_META_CHARACTERS').$match(escaped_char) : $b))) {
                current_literal.$extend_string(self.$tok(), self.ts, self.te)
              } else {
                current_literal.$extend_string(escaped_char, self.ts, self.te)
              }
            } else if ($truthy(($truthy($b = current_literal['$squiggly_heredoc?']()) ? escaped_char['$==']("\n".$freeze()) : $b))) {
              current_literal.$extend_string(self.$tok(), self.ts, self.te)
            } else if ($truthy(($truthy($b = current_literal['$supports_line_continuation_via_slash?']()) ? escaped_char['$==']("\n".$freeze()) : $b))) {
              current_literal.$extend_string(self.$tok().$gsub("\\\n".$freeze(), "".$freeze()), self.ts, self.te)
            } else if ($truthy(current_literal['$regexp?']())) {
              current_literal.$extend_string(self.$tok().$gsub("\\\n".$freeze(), "".$freeze()), self.ts, self.te)
            } else {
              current_literal.$extend_string(($truthy($b = self.escape) ? $b : self.$tok()), self.ts, self.te)
            };;;}
            else if ((165)['$===']($case)) {
            
            self.escape = self.$encode_escape(self.$tok($rb_plus(self.escape_s, 1), p).$to_i(16));;
            
            self.te = p;
            p = $rb_minus(p, 1);
            
            current_literal = self.$literal();
            escaped_char = self.source_buffer.$slice(self.escape_s).$chr();
            if ($truthy(current_literal['$munge_escape?'](escaped_char))) {
              if ($truthy(($truthy($b = current_literal['$regexp?']()) ? $$($nesting, 'REGEXP_META_CHARACTERS').$match(escaped_char) : $b))) {
                current_literal.$extend_string(self.$tok(), self.ts, self.te)
              } else {
                current_literal.$extend_string(escaped_char, self.ts, self.te)
              }
            } else if ($truthy(($truthy($b = current_literal['$squiggly_heredoc?']()) ? escaped_char['$==']("\n".$freeze()) : $b))) {
              current_literal.$extend_string(self.$tok(), self.ts, self.te)
            } else if ($truthy(($truthy($b = current_literal['$supports_line_continuation_via_slash?']()) ? escaped_char['$==']("\n".$freeze()) : $b))) {
              current_literal.$extend_string(self.$tok().$gsub("\\\n".$freeze(), "".$freeze()), self.ts, self.te)
            } else if ($truthy(current_literal['$regexp?']())) {
              current_literal.$extend_string(self.$tok().$gsub("\\\n".$freeze(), "".$freeze()), self.ts, self.te)
            } else {
              current_literal.$extend_string(($truthy($b = self.escape) ? $b : self.$tok()), self.ts, self.te)
            };;;}
            else if ((376)['$===']($case)) {
            
            self.escape = self.$encode_escape(self.$tok($rb_plus(self.escape_s, 1), p).$to_i(16));;
            
            self.te = p;
            p = $rb_minus(p, 1);
            
            value = ($truthy($b = self.escape) ? $b : self.$tok($rb_plus(self.ts, 1)));
            if ($truthy(self['$version?'](18))) {
              self.$emit("tINTEGER", value.$getbyte(0))
            } else {
              self.$emit("tCHARACTER", value)
            };
            self.cs = 781;
            
            p = $rb_plus(p, 1);
            _goto_level = _out;
            continue;;;;;}
            else if ((136)['$===']($case)) {
            
            self.$diagnostic("fatal", "invalid_hex_escape", nil, self.$range($rb_minus(self.escape_s, 1), $rb_plus(p, 2)));;
            
            self.te = p;
            p = $rb_minus(p, 1);
            
            current_literal = self.$literal();
            escaped_char = self.source_buffer.$slice(self.escape_s).$chr();
            if ($truthy(current_literal['$munge_escape?'](escaped_char))) {
              if ($truthy(($truthy($b = current_literal['$regexp?']()) ? $$($nesting, 'REGEXP_META_CHARACTERS').$match(escaped_char) : $b))) {
                current_literal.$extend_string(self.$tok(), self.ts, self.te)
              } else {
                current_literal.$extend_string(escaped_char, self.ts, self.te)
              }
            } else if ($truthy(($truthy($b = current_literal['$squiggly_heredoc?']()) ? escaped_char['$==']("\n".$freeze()) : $b))) {
              current_literal.$extend_string(self.$tok(), self.ts, self.te)
            } else if ($truthy(($truthy($b = current_literal['$supports_line_continuation_via_slash?']()) ? escaped_char['$==']("\n".$freeze()) : $b))) {
              current_literal.$extend_string(self.$tok().$gsub("\\\n".$freeze(), "".$freeze()), self.ts, self.te)
            } else if ($truthy(current_literal['$regexp?']())) {
              current_literal.$extend_string(self.$tok().$gsub("\\\n".$freeze(), "".$freeze()), self.ts, self.te)
            } else {
              current_literal.$extend_string(($truthy($b = self.escape) ? $b : self.$tok()), self.ts, self.te)
            };;;}
            else if ((164)['$===']($case)) {
            
            self.$diagnostic("fatal", "invalid_hex_escape", nil, self.$range($rb_minus(self.escape_s, 1), $rb_plus(p, 2)));;
            
            self.te = p;
            p = $rb_minus(p, 1);
            
            current_literal = self.$literal();
            escaped_char = self.source_buffer.$slice(self.escape_s).$chr();
            if ($truthy(current_literal['$munge_escape?'](escaped_char))) {
              if ($truthy(($truthy($b = current_literal['$regexp?']()) ? $$($nesting, 'REGEXP_META_CHARACTERS').$match(escaped_char) : $b))) {
                current_literal.$extend_string(self.$tok(), self.ts, self.te)
              } else {
                current_literal.$extend_string(escaped_char, self.ts, self.te)
              }
            } else if ($truthy(($truthy($b = current_literal['$squiggly_heredoc?']()) ? escaped_char['$==']("\n".$freeze()) : $b))) {
              current_literal.$extend_string(self.$tok(), self.ts, self.te)
            } else if ($truthy(($truthy($b = current_literal['$supports_line_continuation_via_slash?']()) ? escaped_char['$==']("\n".$freeze()) : $b))) {
              current_literal.$extend_string(self.$tok().$gsub("\\\n".$freeze(), "".$freeze()), self.ts, self.te)
            } else if ($truthy(current_literal['$regexp?']())) {
              current_literal.$extend_string(self.$tok().$gsub("\\\n".$freeze(), "".$freeze()), self.ts, self.te)
            } else {
              current_literal.$extend_string(($truthy($b = self.escape) ? $b : self.$tok()), self.ts, self.te)
            };;;}
            else if ((375)['$===']($case)) {
            
            self.$diagnostic("fatal", "invalid_hex_escape", nil, self.$range($rb_minus(self.escape_s, 1), $rb_plus(p, 2)));;
            
            self.te = p;
            p = $rb_minus(p, 1);
            
            value = ($truthy($b = self.escape) ? $b : self.$tok($rb_plus(self.ts, 1)));
            if ($truthy(self['$version?'](18))) {
              self.$emit("tINTEGER", value.$getbyte(0))
            } else {
              self.$emit("tCHARACTER", value)
            };
            self.cs = 781;
            
            p = $rb_plus(p, 1);
            _goto_level = _out;
            continue;;;;;}
            else if ((131)['$===']($case)) {
            
            self.escape = self.$tok($rb_plus(self.escape_s, 1), p).$to_i(16).$chr($$$($$($nesting, 'Encoding'), 'UTF_8'));;
            
            self.te = p;
            p = $rb_minus(p, 1);
            
            current_literal = self.$literal();
            escaped_char = self.source_buffer.$slice(self.escape_s).$chr();
            if ($truthy(current_literal['$munge_escape?'](escaped_char))) {
              if ($truthy(($truthy($b = current_literal['$regexp?']()) ? $$($nesting, 'REGEXP_META_CHARACTERS').$match(escaped_char) : $b))) {
                current_literal.$extend_string(self.$tok(), self.ts, self.te)
              } else {
                current_literal.$extend_string(escaped_char, self.ts, self.te)
              }
            } else if ($truthy(($truthy($b = current_literal['$squiggly_heredoc?']()) ? escaped_char['$==']("\n".$freeze()) : $b))) {
              current_literal.$extend_string(self.$tok(), self.ts, self.te)
            } else if ($truthy(($truthy($b = current_literal['$supports_line_continuation_via_slash?']()) ? escaped_char['$==']("\n".$freeze()) : $b))) {
              current_literal.$extend_string(self.$tok().$gsub("\\\n".$freeze(), "".$freeze()), self.ts, self.te)
            } else if ($truthy(current_literal['$regexp?']())) {
              current_literal.$extend_string(self.$tok().$gsub("\\\n".$freeze(), "".$freeze()), self.ts, self.te)
            } else {
              current_literal.$extend_string(($truthy($b = self.escape) ? $b : self.$tok()), self.ts, self.te)
            };;;}
            else if ((159)['$===']($case)) {
            
            self.escape = self.$tok($rb_plus(self.escape_s, 1), p).$to_i(16).$chr($$$($$($nesting, 'Encoding'), 'UTF_8'));;
            
            self.te = p;
            p = $rb_minus(p, 1);
            
            current_literal = self.$literal();
            escaped_char = self.source_buffer.$slice(self.escape_s).$chr();
            if ($truthy(current_literal['$munge_escape?'](escaped_char))) {
              if ($truthy(($truthy($b = current_literal['$regexp?']()) ? $$($nesting, 'REGEXP_META_CHARACTERS').$match(escaped_char) : $b))) {
                current_literal.$extend_string(self.$tok(), self.ts, self.te)
              } else {
                current_literal.$extend_string(escaped_char, self.ts, self.te)
              }
            } else if ($truthy(($truthy($b = current_literal['$squiggly_heredoc?']()) ? escaped_char['$==']("\n".$freeze()) : $b))) {
              current_literal.$extend_string(self.$tok(), self.ts, self.te)
            } else if ($truthy(($truthy($b = current_literal['$supports_line_continuation_via_slash?']()) ? escaped_char['$==']("\n".$freeze()) : $b))) {
              current_literal.$extend_string(self.$tok().$gsub("\\\n".$freeze(), "".$freeze()), self.ts, self.te)
            } else if ($truthy(current_literal['$regexp?']())) {
              current_literal.$extend_string(self.$tok().$gsub("\\\n".$freeze(), "".$freeze()), self.ts, self.te)
            } else {
              current_literal.$extend_string(($truthy($b = self.escape) ? $b : self.$tok()), self.ts, self.te)
            };;;}
            else if ((370)['$===']($case)) {
            
            self.escape = self.$tok($rb_plus(self.escape_s, 1), p).$to_i(16).$chr($$$($$($nesting, 'Encoding'), 'UTF_8'));;
            
            self.te = p;
            p = $rb_minus(p, 1);
            
            value = ($truthy($b = self.escape) ? $b : self.$tok($rb_plus(self.ts, 1)));
            if ($truthy(self['$version?'](18))) {
              self.$emit("tINTEGER", value.$getbyte(0))
            } else {
              self.$emit("tCHARACTER", value)
            };
            self.cs = 781;
            
            p = $rb_plus(p, 1);
            _goto_level = _out;
            continue;;;;;}
            else if ((130)['$===']($case)) {
            
            self.$diagnostic("fatal", "invalid_unicode_escape", nil, self.$range($rb_minus(self.escape_s, 1), p));;
            
            self.te = p;
            p = $rb_minus(p, 1);
            
            current_literal = self.$literal();
            escaped_char = self.source_buffer.$slice(self.escape_s).$chr();
            if ($truthy(current_literal['$munge_escape?'](escaped_char))) {
              if ($truthy(($truthy($b = current_literal['$regexp?']()) ? $$($nesting, 'REGEXP_META_CHARACTERS').$match(escaped_char) : $b))) {
                current_literal.$extend_string(self.$tok(), self.ts, self.te)
              } else {
                current_literal.$extend_string(escaped_char, self.ts, self.te)
              }
            } else if ($truthy(($truthy($b = current_literal['$squiggly_heredoc?']()) ? escaped_char['$==']("\n".$freeze()) : $b))) {
              current_literal.$extend_string(self.$tok(), self.ts, self.te)
            } else if ($truthy(($truthy($b = current_literal['$supports_line_continuation_via_slash?']()) ? escaped_char['$==']("\n".$freeze()) : $b))) {
              current_literal.$extend_string(self.$tok().$gsub("\\\n".$freeze(), "".$freeze()), self.ts, self.te)
            } else if ($truthy(current_literal['$regexp?']())) {
              current_literal.$extend_string(self.$tok().$gsub("\\\n".$freeze(), "".$freeze()), self.ts, self.te)
            } else {
              current_literal.$extend_string(($truthy($b = self.escape) ? $b : self.$tok()), self.ts, self.te)
            };;;}
            else if ((158)['$===']($case)) {
            
            self.$diagnostic("fatal", "invalid_unicode_escape", nil, self.$range($rb_minus(self.escape_s, 1), p));;
            
            self.te = p;
            p = $rb_minus(p, 1);
            
            current_literal = self.$literal();
            escaped_char = self.source_buffer.$slice(self.escape_s).$chr();
            if ($truthy(current_literal['$munge_escape?'](escaped_char))) {
              if ($truthy(($truthy($b = current_literal['$regexp?']()) ? $$($nesting, 'REGEXP_META_CHARACTERS').$match(escaped_char) : $b))) {
                current_literal.$extend_string(self.$tok(), self.ts, self.te)
              } else {
                current_literal.$extend_string(escaped_char, self.ts, self.te)
              }
            } else if ($truthy(($truthy($b = current_literal['$squiggly_heredoc?']()) ? escaped_char['$==']("\n".$freeze()) : $b))) {
              current_literal.$extend_string(self.$tok(), self.ts, self.te)
            } else if ($truthy(($truthy($b = current_literal['$supports_line_continuation_via_slash?']()) ? escaped_char['$==']("\n".$freeze()) : $b))) {
              current_literal.$extend_string(self.$tok().$gsub("\\\n".$freeze(), "".$freeze()), self.ts, self.te)
            } else if ($truthy(current_literal['$regexp?']())) {
              current_literal.$extend_string(self.$tok().$gsub("\\\n".$freeze(), "".$freeze()), self.ts, self.te)
            } else {
              current_literal.$extend_string(($truthy($b = self.escape) ? $b : self.$tok()), self.ts, self.te)
            };;;}
            else if ((369)['$===']($case)) {
            
            self.$diagnostic("fatal", "invalid_unicode_escape", nil, self.$range($rb_minus(self.escape_s, 1), p));;
            
            self.te = p;
            p = $rb_minus(p, 1);
            
            value = ($truthy($b = self.escape) ? $b : self.$tok($rb_plus(self.ts, 1)));
            if ($truthy(self['$version?'](18))) {
              self.$emit("tINTEGER", value.$getbyte(0))
            } else {
              self.$emit("tCHARACTER", value)
            };
            self.cs = 781;
            
            p = $rb_plus(p, 1);
            _goto_level = _out;
            continue;;;;;}
            else if ((135)['$===']($case)) {
            
            self.$diagnostic("fatal", "invalid_unicode_escape", nil, self.$range($rb_minus(self.escape_s, 1), p));;
            
            self.te = p;
            p = $rb_minus(p, 1);
            
            current_literal = self.$literal();
            escaped_char = self.source_buffer.$slice(self.escape_s).$chr();
            if ($truthy(current_literal['$munge_escape?'](escaped_char))) {
              if ($truthy(($truthy($b = current_literal['$regexp?']()) ? $$($nesting, 'REGEXP_META_CHARACTERS').$match(escaped_char) : $b))) {
                current_literal.$extend_string(self.$tok(), self.ts, self.te)
              } else {
                current_literal.$extend_string(escaped_char, self.ts, self.te)
              }
            } else if ($truthy(($truthy($b = current_literal['$squiggly_heredoc?']()) ? escaped_char['$==']("\n".$freeze()) : $b))) {
              current_literal.$extend_string(self.$tok(), self.ts, self.te)
            } else if ($truthy(($truthy($b = current_literal['$supports_line_continuation_via_slash?']()) ? escaped_char['$==']("\n".$freeze()) : $b))) {
              current_literal.$extend_string(self.$tok().$gsub("\\\n".$freeze(), "".$freeze()), self.ts, self.te)
            } else if ($truthy(current_literal['$regexp?']())) {
              current_literal.$extend_string(self.$tok().$gsub("\\\n".$freeze(), "".$freeze()), self.ts, self.te)
            } else {
              current_literal.$extend_string(($truthy($b = self.escape) ? $b : self.$tok()), self.ts, self.te)
            };;;}
            else if ((163)['$===']($case)) {
            
            self.$diagnostic("fatal", "invalid_unicode_escape", nil, self.$range($rb_minus(self.escape_s, 1), p));;
            
            self.te = p;
            p = $rb_minus(p, 1);
            
            current_literal = self.$literal();
            escaped_char = self.source_buffer.$slice(self.escape_s).$chr();
            if ($truthy(current_literal['$munge_escape?'](escaped_char))) {
              if ($truthy(($truthy($b = current_literal['$regexp?']()) ? $$($nesting, 'REGEXP_META_CHARACTERS').$match(escaped_char) : $b))) {
                current_literal.$extend_string(self.$tok(), self.ts, self.te)
              } else {
                current_literal.$extend_string(escaped_char, self.ts, self.te)
              }
            } else if ($truthy(($truthy($b = current_literal['$squiggly_heredoc?']()) ? escaped_char['$==']("\n".$freeze()) : $b))) {
              current_literal.$extend_string(self.$tok(), self.ts, self.te)
            } else if ($truthy(($truthy($b = current_literal['$supports_line_continuation_via_slash?']()) ? escaped_char['$==']("\n".$freeze()) : $b))) {
              current_literal.$extend_string(self.$tok().$gsub("\\\n".$freeze(), "".$freeze()), self.ts, self.te)
            } else if ($truthy(current_literal['$regexp?']())) {
              current_literal.$extend_string(self.$tok().$gsub("\\\n".$freeze(), "".$freeze()), self.ts, self.te)
            } else {
              current_literal.$extend_string(($truthy($b = self.escape) ? $b : self.$tok()), self.ts, self.te)
            };;;}
            else if ((374)['$===']($case)) {
            
            self.$diagnostic("fatal", "invalid_unicode_escape", nil, self.$range($rb_minus(self.escape_s, 1), p));;
            
            self.te = p;
            p = $rb_minus(p, 1);
            
            value = ($truthy($b = self.escape) ? $b : self.$tok($rb_plus(self.ts, 1)));
            if ($truthy(self['$version?'](18))) {
              self.$emit("tINTEGER", value.$getbyte(0))
            } else {
              self.$emit("tCHARACTER", value)
            };
            self.cs = 781;
            
            p = $rb_plus(p, 1);
            _goto_level = _out;
            continue;;;;;}
            else if ((132)['$===']($case)) {
            
            self.$diagnostic("fatal", "unterminated_unicode", nil, self.$range($rb_minus(p, 1), p));;
            
            self.te = p;
            p = $rb_minus(p, 1);
            
            current_literal = self.$literal();
            escaped_char = self.source_buffer.$slice(self.escape_s).$chr();
            if ($truthy(current_literal['$munge_escape?'](escaped_char))) {
              if ($truthy(($truthy($b = current_literal['$regexp?']()) ? $$($nesting, 'REGEXP_META_CHARACTERS').$match(escaped_char) : $b))) {
                current_literal.$extend_string(self.$tok(), self.ts, self.te)
              } else {
                current_literal.$extend_string(escaped_char, self.ts, self.te)
              }
            } else if ($truthy(($truthy($b = current_literal['$squiggly_heredoc?']()) ? escaped_char['$==']("\n".$freeze()) : $b))) {
              current_literal.$extend_string(self.$tok(), self.ts, self.te)
            } else if ($truthy(($truthy($b = current_literal['$supports_line_continuation_via_slash?']()) ? escaped_char['$==']("\n".$freeze()) : $b))) {
              current_literal.$extend_string(self.$tok().$gsub("\\\n".$freeze(), "".$freeze()), self.ts, self.te)
            } else if ($truthy(current_literal['$regexp?']())) {
              current_literal.$extend_string(self.$tok().$gsub("\\\n".$freeze(), "".$freeze()), self.ts, self.te)
            } else {
              current_literal.$extend_string(($truthy($b = self.escape) ? $b : self.$tok()), self.ts, self.te)
            };;;}
            else if ((160)['$===']($case)) {
            
            self.$diagnostic("fatal", "unterminated_unicode", nil, self.$range($rb_minus(p, 1), p));;
            
            self.te = p;
            p = $rb_minus(p, 1);
            
            current_literal = self.$literal();
            escaped_char = self.source_buffer.$slice(self.escape_s).$chr();
            if ($truthy(current_literal['$munge_escape?'](escaped_char))) {
              if ($truthy(($truthy($b = current_literal['$regexp?']()) ? $$($nesting, 'REGEXP_META_CHARACTERS').$match(escaped_char) : $b))) {
                current_literal.$extend_string(self.$tok(), self.ts, self.te)
              } else {
                current_literal.$extend_string(escaped_char, self.ts, self.te)
              }
            } else if ($truthy(($truthy($b = current_literal['$squiggly_heredoc?']()) ? escaped_char['$==']("\n".$freeze()) : $b))) {
              current_literal.$extend_string(self.$tok(), self.ts, self.te)
            } else if ($truthy(($truthy($b = current_literal['$supports_line_continuation_via_slash?']()) ? escaped_char['$==']("\n".$freeze()) : $b))) {
              current_literal.$extend_string(self.$tok().$gsub("\\\n".$freeze(), "".$freeze()), self.ts, self.te)
            } else if ($truthy(current_literal['$regexp?']())) {
              current_literal.$extend_string(self.$tok().$gsub("\\\n".$freeze(), "".$freeze()), self.ts, self.te)
            } else {
              current_literal.$extend_string(($truthy($b = self.escape) ? $b : self.$tok()), self.ts, self.te)
            };;;}
            else if ((371)['$===']($case)) {
            
            self.$diagnostic("fatal", "unterminated_unicode", nil, self.$range($rb_minus(p, 1), p));;
            
            self.te = p;
            p = $rb_minus(p, 1);
            
            value = ($truthy($b = self.escape) ? $b : self.$tok($rb_plus(self.ts, 1)));
            if ($truthy(self['$version?'](18))) {
              self.$emit("tINTEGER", value.$getbyte(0))
            } else {
              self.$emit("tCHARACTER", value)
            };
            self.cs = 781;
            
            p = $rb_plus(p, 1);
            _goto_level = _out;
            continue;;;;;}
            else if ((119)['$===']($case)) {
            
            self.$diagnostic("fatal", "escape_eof", nil, self.$range($rb_minus(p, 1), p));;
            
            self.te = p;
            p = $rb_minus(p, 1);
            
            current_literal = self.$literal();
            escaped_char = self.source_buffer.$slice(self.escape_s).$chr();
            if ($truthy(current_literal['$munge_escape?'](escaped_char))) {
              if ($truthy(($truthy($b = current_literal['$regexp?']()) ? $$($nesting, 'REGEXP_META_CHARACTERS').$match(escaped_char) : $b))) {
                current_literal.$extend_string(self.$tok(), self.ts, self.te)
              } else {
                current_literal.$extend_string(escaped_char, self.ts, self.te)
              }
            } else if ($truthy(($truthy($b = current_literal['$squiggly_heredoc?']()) ? escaped_char['$==']("\n".$freeze()) : $b))) {
              current_literal.$extend_string(self.$tok(), self.ts, self.te)
            } else if ($truthy(($truthy($b = current_literal['$supports_line_continuation_via_slash?']()) ? escaped_char['$==']("\n".$freeze()) : $b))) {
              current_literal.$extend_string(self.$tok().$gsub("\\\n".$freeze(), "".$freeze()), self.ts, self.te)
            } else if ($truthy(current_literal['$regexp?']())) {
              current_literal.$extend_string(self.$tok().$gsub("\\\n".$freeze(), "".$freeze()), self.ts, self.te)
            } else {
              current_literal.$extend_string(($truthy($b = self.escape) ? $b : self.$tok()), self.ts, self.te)
            };;;}
            else if ((147)['$===']($case)) {
            
            self.$diagnostic("fatal", "escape_eof", nil, self.$range($rb_minus(p, 1), p));;
            
            self.te = p;
            p = $rb_minus(p, 1);
            
            current_literal = self.$literal();
            escaped_char = self.source_buffer.$slice(self.escape_s).$chr();
            if ($truthy(current_literal['$munge_escape?'](escaped_char))) {
              if ($truthy(($truthy($b = current_literal['$regexp?']()) ? $$($nesting, 'REGEXP_META_CHARACTERS').$match(escaped_char) : $b))) {
                current_literal.$extend_string(self.$tok(), self.ts, self.te)
              } else {
                current_literal.$extend_string(escaped_char, self.ts, self.te)
              }
            } else if ($truthy(($truthy($b = current_literal['$squiggly_heredoc?']()) ? escaped_char['$==']("\n".$freeze()) : $b))) {
              current_literal.$extend_string(self.$tok(), self.ts, self.te)
            } else if ($truthy(($truthy($b = current_literal['$supports_line_continuation_via_slash?']()) ? escaped_char['$==']("\n".$freeze()) : $b))) {
              current_literal.$extend_string(self.$tok().$gsub("\\\n".$freeze(), "".$freeze()), self.ts, self.te)
            } else if ($truthy(current_literal['$regexp?']())) {
              current_literal.$extend_string(self.$tok().$gsub("\\\n".$freeze(), "".$freeze()), self.ts, self.te)
            } else {
              current_literal.$extend_string(($truthy($b = self.escape) ? $b : self.$tok()), self.ts, self.te)
            };;;}
            else if ((358)['$===']($case)) {
            
            self.$diagnostic("fatal", "escape_eof", nil, self.$range($rb_minus(p, 1), p));;
            
            self.te = p;
            p = $rb_minus(p, 1);
            
            value = ($truthy($b = self.escape) ? $b : self.$tok($rb_plus(self.ts, 1)));
            if ($truthy(self['$version?'](18))) {
              self.$emit("tINTEGER", value.$getbyte(0))
            } else {
              self.$emit("tCHARACTER", value)
            };
            self.cs = 781;
            
            p = $rb_plus(p, 1);
            _goto_level = _out;
            continue;;;;;}
            else if ((171)['$===']($case)) {
            
            self.escape_s = p;
            self.escape = nil;;
            
            self.te = $rb_plus(p, 1);
            
            current_literal = self.$literal();
            escaped_char = self.source_buffer.$slice(self.escape_s).$chr();
            if ($truthy(current_literal['$munge_escape?'](escaped_char))) {
              if ($truthy(($truthy($b = current_literal['$regexp?']()) ? $$($nesting, 'REGEXP_META_CHARACTERS').$match(escaped_char) : $b))) {
                current_literal.$extend_string(self.$tok(), self.ts, self.te)
              } else {
                current_literal.$extend_string(escaped_char, self.ts, self.te)
              }
            } else if ($truthy(($truthy($b = current_literal['$squiggly_heredoc?']()) ? escaped_char['$==']("\n".$freeze()) : $b))) {
              current_literal.$extend_string(self.$tok(), self.ts, self.te)
            } else if ($truthy(($truthy($b = current_literal['$supports_line_continuation_via_slash?']()) ? escaped_char['$==']("\n".$freeze()) : $b))) {
              current_literal.$extend_string(self.$tok().$gsub("\\\n".$freeze(), "".$freeze()), self.ts, self.te)
            } else if ($truthy(current_literal['$regexp?']())) {
              current_literal.$extend_string(self.$tok().$gsub("\\\n".$freeze(), "".$freeze()), self.ts, self.te)
            } else {
              current_literal.$extend_string(($truthy($b = self.escape) ? $b : self.$tok()), self.ts, self.te)
            };;;}
            else if ((176)['$===']($case)) {
            
            self.escape_s = p;
            self.escape = nil;;
            
            self.te = $rb_plus(p, 1);
            
            current_literal = self.$literal();
            escaped_char = self.source_buffer.$slice(self.escape_s).$chr();
            if ($truthy(current_literal['$munge_escape?'](escaped_char))) {
              if ($truthy(($truthy($b = current_literal['$regexp?']()) ? $$($nesting, 'REGEXP_META_CHARACTERS').$match(escaped_char) : $b))) {
                current_literal.$extend_string(self.$tok(), self.ts, self.te)
              } else {
                current_literal.$extend_string(escaped_char, self.ts, self.te)
              }
            } else if ($truthy(($truthy($b = current_literal['$squiggly_heredoc?']()) ? escaped_char['$==']("\n".$freeze()) : $b))) {
              current_literal.$extend_string(self.$tok(), self.ts, self.te)
            } else if ($truthy(($truthy($b = current_literal['$supports_line_continuation_via_slash?']()) ? escaped_char['$==']("\n".$freeze()) : $b))) {
              current_literal.$extend_string(self.$tok().$gsub("\\\n".$freeze(), "".$freeze()), self.ts, self.te)
            } else if ($truthy(current_literal['$regexp?']())) {
              current_literal.$extend_string(self.$tok().$gsub("\\\n".$freeze(), "".$freeze()), self.ts, self.te)
            } else {
              current_literal.$extend_string(($truthy($b = self.escape) ? $b : self.$tok()), self.ts, self.te)
            };;;}
            else if ((57)['$===']($case)) {
            
            if ($truthy(self.herebody_s)) {
              
              p = self.herebody_s;
              self.herebody_s = nil;};;
            
            self.newline_s = p;;}
            else if ((30)['$===']($case)) {
            
            if ($truthy(self.herebody_s)) {
              
              p = self.herebody_s;
              self.herebody_s = nil;};;
            
            tm = p;;}
            else if ((32)['$===']($case)) {
            
            if ($truthy(self.herebody_s)) {
              
              p = self.herebody_s;
              self.herebody_s = nil;};;
            
            tm = p;;}
            else if ((34)['$===']($case)) {
            
            if ($truthy(self.herebody_s)) {
              
              p = self.herebody_s;
              self.herebody_s = nil;};;
            
            tm = p;;}
            else if ((213)['$===']($case)) {
            
            if ($truthy(self.herebody_s)) {
              
              p = self.herebody_s;
              self.herebody_s = nil;};;
            
            self.te = p;
            p = $rb_minus(p, 1);;}
            else if ((232)['$===']($case)) {
            
            if ($truthy(self.herebody_s)) {
              
              p = self.herebody_s;
              self.herebody_s = nil;};;
            
            self.te = p;
            p = $rb_minus(p, 1);;}
            else if ((240)['$===']($case)) {
            
            if ($truthy(self.herebody_s)) {
              
              p = self.herebody_s;
              self.herebody_s = nil;};;
            
            self.te = p;
            p = $rb_minus(p, 1);;}
            else if ((33)['$===']($case)) {
            
            if ($truthy(self.herebody_s)) {
              
              p = self.herebody_s;
              self.herebody_s = nil;};;
            
            self.te = $rb_plus(p, 1);
            
            p = $rb_minus(self.ts, 1);
            
            self.cs = 781;
            _goto_level = _again;
            continue;;;;;}
            else if ((271)['$===']($case)) {
            
            if ($truthy(self.herebody_s)) {
              
              p = self.herebody_s;
              self.herebody_s = nil;};;
            
            self.te = p;
            p = $rb_minus(p, 1);;}
            else if ((263)['$===']($case)) {
            
            if ($truthy(self.herebody_s)) {
              
              p = self.herebody_s;
              self.herebody_s = nil;};;
            
            self.te = p;
            p = $rb_minus(p, 1);
            
            p = $rb_minus(p, 1);
            
            self.cs = 781;
            _goto_level = _again;
            continue;;;;;}
            else if ((282)['$===']($case)) {
            
            if ($truthy(self.herebody_s)) {
              
              p = self.herebody_s;
              self.herebody_s = nil;};;
            
            self.te = p;
            p = $rb_minus(p, 1);;}
            else if ((294)['$===']($case)) {
            
            if ($truthy(self.herebody_s)) {
              
              p = self.herebody_s;
              self.herebody_s = nil;};;
            
            self.te = p;
            p = $rb_minus(p, 1);;}
            else if ((290)['$===']($case)) {
            
            if ($truthy(self.herebody_s)) {
              
              p = self.herebody_s;
              self.herebody_s = nil;};;
            
            self.te = p;
            p = $rb_minus(p, 1);
            
            p = $rb_minus(p, 1);
            
            self.cs = 781;
            _goto_level = _again;
            continue;;;;;}
            else if ((58)['$===']($case)) {
            
            if ($truthy(self.herebody_s)) {
              
              p = self.herebody_s;
              self.herebody_s = nil;};;
            
            self.te = $rb_plus(p, 1);
            
            self.$emit("tUNARY_NUM", self.$tok(self.ts, $rb_plus(self.ts, 1)), self.ts, $rb_plus(self.ts, 1));
            p = $rb_minus(p, 1);
            self.cs = 781;
            
            p = $rb_plus(p, 1);
            _goto_level = _out;
            continue;;;;;}
            else if ((49)['$===']($case)) {
            
            if ($truthy(self.herebody_s)) {
              
              p = self.herebody_s;
              self.herebody_s = nil;};;
            
            self.te = $rb_plus(p, 1);
            
            self.$emit("tIDENTIFIER", ident_tok, ident_ts, ident_te);
            p = $rb_minus(ident_te, 1);
            if ($truthy(($truthy($b = ($truthy($c = self.static_env['$nil?']()['$!']()) ? self.static_env['$declared?'](ident_tok) : $c)) ? $rb_lt(self.version, 25) : $b))) {
              self.cs = 446
            } else {
              self.cs = 505
            };
            
            p = $rb_plus(p, 1);
            _goto_level = _out;
            continue;;;;;}
            else if ((312)['$===']($case)) {
            
            if ($truthy(self.herebody_s)) {
              
              p = self.herebody_s;
              self.herebody_s = nil;};;
            
            self.te = p;
            p = $rb_minus(p, 1);;}
            else if ((393)['$===']($case)) {
            
            if ($truthy(self.herebody_s)) {
              
              p = self.herebody_s;
              self.herebody_s = nil;};;
            
            self.te = p;
            p = $rb_minus(p, 1);;}
            else if ((389)['$===']($case)) {
            
            if ($truthy(self.herebody_s)) {
              
              p = self.herebody_s;
              self.herebody_s = nil;};;
            
            self.te = p;
            p = $rb_minus(p, 1);
            
            if ($truthy(self.in_kwarg)) {
              
              p = $rb_minus(p, 1);
              
              self.cs = 781;
              _goto_level = _again;
              continue;;;
            } else {
              
              self.cs = 185;
              _goto_level = _again;
              continue;;
            };;;}
            else if ((402)['$===']($case)) {
            
            if ($truthy(self.herebody_s)) {
              
              p = self.herebody_s;
              self.herebody_s = nil;};;
            
            self.te = p;
            p = $rb_minus(p, 1);;}
            else if ((399)['$===']($case)) {
            
            if ($truthy(self.herebody_s)) {
              
              p = self.herebody_s;
              self.herebody_s = nil;};;
            
            self.te = p;
            p = $rb_minus(p, 1);
            
            
            self.cs = 185;
            _goto_level = _again;
            continue;;;;;}
            else if ((486)['$===']($case)) {
            
            if ($truthy(self.herebody_s)) {
              
              p = self.herebody_s;
              self.herebody_s = nil;};;
            
            self.te = p;
            p = $rb_minus(p, 1);;}
            else if ((418)['$===']($case)) {
            
            if ($truthy(self.herebody_s)) {
              
              p = self.herebody_s;
              self.herebody_s = nil;};;
            
            self.te = p;
            p = $rb_minus(p, 1);
            
            
            self.cs = 961;
            _goto_level = _again;
            continue;;;;;}
            else if ((101)['$===']($case)) {
            
            if ($truthy(self.herebody_s)) {
              
              p = self.herebody_s;
              self.herebody_s = nil;};;
            
            self.te = p;
            p = $rb_minus(p, 1);;}
            else if ((262)['$===']($case)) {
            
            self.cond.$push(false);
            self.cmdarg.$push(false);
            current_literal = self.$literal();
            if ($truthy(current_literal)) {
              current_literal.$start_interp_brace()};;
            
            self.te = p;
            p = $rb_minus(p, 1);
            
            if (self.lambda_stack.$last()['$=='](self.paren_nest)) {
              
              self.lambda_stack.$pop();
              self.$emit("tLAMBEG", "{".$freeze(), $rb_minus(self.te, 1), self.te);
            } else {
              self.$emit("tLCURLY", "{".$freeze(), $rb_minus(self.te, 1), self.te)
            };
            self.command_start = true;
            self.paren_nest = $rb_plus(self.paren_nest, 1);
            self.cs = 773;
            
            p = $rb_plus(p, 1);
            _goto_level = _out;
            continue;;;;;}
            else if ((284)['$===']($case)) {
            
            self.cond.$push(false);
            self.cmdarg.$push(false);
            current_literal = self.$literal();
            if ($truthy(current_literal)) {
              current_literal.$start_interp_brace()};;
            
            self.te = p;
            p = $rb_minus(p, 1);
            
            if (self.lambda_stack.$last()['$=='](self.paren_nest)) {
              
              self.lambda_stack.$pop();
              self.$emit("tLAMBEG", "{".$freeze());
            } else {
              self.$emit("tLBRACE_ARG", "{".$freeze())
            };
            self.paren_nest = $rb_plus(self.paren_nest, 1);
            self.command_start = true;
            self.cs = 773;
            
            p = $rb_plus(p, 1);
            _goto_level = _out;
            continue;;;;;}
            else if ((384)['$===']($case)) {
            
            self.cond.$push(false);
            self.cmdarg.$push(false);
            current_literal = self.$literal();
            if ($truthy(current_literal)) {
              current_literal.$start_interp_brace()};;
            
            self.te = p;
            p = $rb_minus(p, 1);
            
            if (self.lambda_stack.$last()['$=='](self.paren_nest)) {
              
              self.lambda_stack.$pop();
              self.command_start = true;
              self.$emit("tLAMBEG", "{".$freeze());
            } else {
              self.$emit("tLBRACE", "{".$freeze())
            };
            self.paren_nest = $rb_plus(self.paren_nest, 1);
            
            p = $rb_plus(p, 1);
            _goto_level = _out;
            continue;;;;;}
            else if ((499)['$===']($case)) {
            
            self.cond.$push(false);
            self.cmdarg.$push(false);
            current_literal = self.$literal();
            if ($truthy(current_literal)) {
              current_literal.$start_interp_brace()};;
            
            self.te = p;
            p = $rb_minus(p, 1);
            
            if (self.lambda_stack.$last()['$=='](self.paren_nest)) {
              
              self.lambda_stack.$pop();
              if (self.$tok()['$==']("{".$freeze())) {
                self.$emit("tLAMBEG", "{".$freeze())
              } else {
                self.$emit("kDO_LAMBDA", "do".$freeze())
              };
            } else if (self.$tok()['$==']("{".$freeze())) {
              self.$emit("tLCURLY", "{".$freeze())
            } else {
              self.$emit_do()
            };
            if (self.$tok()['$==']("{".$freeze())) {
              self.paren_nest = $rb_plus(self.paren_nest, 1)};
            self.command_start = true;
            self.cs = 773;
            
            p = $rb_plus(p, 1);
            _goto_level = _out;
            continue;;;;;}
            else if ((500)['$===']($case)) {
            
            current_literal = self.$literal();
            if ($truthy(current_literal)) {
              if ($truthy(current_literal.$end_interp_brace_and_try_closing())) {
                
                if ($truthy(self['$version?'](18, 19))) {
                  
                  self.$emit("tRCURLY", "}".$freeze(), $rb_minus(p, 1), p);
                  self.cond.$lexpop();
                  self.cmdarg.$lexpop();
                } else {
                  self.$emit("tSTRING_DEND", "}".$freeze(), $rb_minus(p, 1), p)
                };
                if ($truthy(current_literal.$saved_herebody_s())) {
                  self.herebody_s = current_literal.$saved_herebody_s()};
                p = $rb_minus(p, 1);
                self.cs = self.$next_state_for_literal(current_literal);
                
                p = $rb_plus(p, 1);
                _goto_level = _out;
                continue;;;}};
            self.paren_nest = $rb_minus(self.paren_nest, 1);;
            
            self.te = p;
            p = $rb_minus(p, 1);
            
            self.$emit_table($$($nesting, 'PUNCTUATION'));
            if ($truthy($rb_lt(self.version, 24))) {
              
              self.cond.$lexpop();
              self.cmdarg.$lexpop();
            } else {
              
              self.cond.$pop();
              self.cmdarg.$pop();
            };
            if ($truthy(($truthy($b = self.$tok()['$==']("}".$freeze())) ? $b : self.$tok()['$==']("]".$freeze())))) {
              if ($truthy($rb_ge(self.version, 25))) {
                self.cs = 781
              } else {
                self.cs = 511
              }};
            
            p = $rb_plus(p, 1);
            _goto_level = _out;
            continue;;;;;}
            else if ((60)['$===']($case)) {
            
            self.sharp_s = $rb_minus(p, 1);;
            
            self.$emit_comment(self.sharp_s, (function() {if (p['$=='](pe)) {
              return $rb_minus(p, 2)
            } else {
              return p
            }; return nil; })());;}
            else if ((64)['$===']($case)) {
            
            self.$emit_comment(self.sharp_s, (function() {if (p['$=='](pe)) {
              return $rb_minus(p, 2)
            } else {
              return p
            }; return nil; })());;
            
            self.newline_s = p;;}
            else if ((216)['$===']($case)) {
            
            self.$emit_comment(self.sharp_s, (function() {if (p['$=='](pe)) {
              return $rb_minus(p, 2)
            } else {
              return p
            }; return nil; })());;
            
            self.te = p;
            p = $rb_minus(p, 1);;}
            else if ((231)['$===']($case)) {
            
            self.$emit_comment(self.sharp_s, (function() {if (p['$=='](pe)) {
              return $rb_minus(p, 2)
            } else {
              return p
            }; return nil; })());;
            
            self.te = p;
            p = $rb_minus(p, 1);;}
            else if ((243)['$===']($case)) {
            
            self.$emit_comment(self.sharp_s, (function() {if (p['$=='](pe)) {
              return $rb_minus(p, 2)
            } else {
              return p
            }; return nil; })());;
            
            self.te = p;
            p = $rb_minus(p, 1);;}
            else if ((265)['$===']($case)) {
            
            self.$emit_comment(self.sharp_s, (function() {if (p['$=='](pe)) {
              return $rb_minus(p, 2)
            } else {
              return p
            }; return nil; })());;
            
            self.te = p;
            p = $rb_minus(p, 1);
            
            
            self.cs = 781;
            _goto_level = _again;
            continue;;;;;}
            else if ((280)['$===']($case)) {
            
            self.$emit_comment(self.sharp_s, (function() {if (p['$=='](pe)) {
              return $rb_minus(p, 2)
            } else {
              return p
            }; return nil; })());;
            
            self.te = p;
            p = $rb_minus(p, 1);;}
            else if ((292)['$===']($case)) {
            
            self.$emit_comment(self.sharp_s, (function() {if (p['$=='](pe)) {
              return $rb_minus(p, 2)
            } else {
              return p
            }; return nil; })());;
            
            self.te = p;
            p = $rb_minus(p, 1);;}
            else if ((318)['$===']($case)) {
            
            self.$emit_comment(self.sharp_s, (function() {if (p['$=='](pe)) {
              return $rb_minus(p, 2)
            } else {
              return p
            }; return nil; })());;
            
            self.te = p;
            p = $rb_minus(p, 1);;}
            else if ((391)['$===']($case)) {
            
            self.$emit_comment(self.sharp_s, (function() {if (p['$=='](pe)) {
              return $rb_minus(p, 2)
            } else {
              return p
            }; return nil; })());;
            
            self.te = p;
            p = $rb_minus(p, 1);;}
            else if ((401)['$===']($case)) {
            
            self.$emit_comment(self.sharp_s, (function() {if (p['$=='](pe)) {
              return $rb_minus(p, 2)
            } else {
              return p
            }; return nil; })());;
            
            self.te = p;
            p = $rb_minus(p, 1);;}
            else if ((422)['$===']($case)) {
            
            self.$emit_comment(self.sharp_s, (function() {if (p['$=='](pe)) {
              return $rb_minus(p, 2)
            } else {
              return p
            }; return nil; })());;
            
            self.te = p;
            p = $rb_minus(p, 1);;}
            else if ((103)['$===']($case)) {
            
            self.$emit_comment(self.sharp_s, (function() {if (p['$=='](pe)) {
              return $rb_minus(p, 2)
            } else {
              return p
            }; return nil; })());;
            
            self.te = p;
            p = $rb_minus(p, 1);;}
            else if ((237)['$===']($case)) {
            
            tm = p;;
            
            self.te = p;
            p = $rb_minus(p, 1);
            
            self.$emit("tFID", self.$tok(self.ts, tm), self.ts, tm);
            self.cs = self.$arg_or_cmdarg(cmd_state);
            p = $rb_minus(tm, 1);
            
            p = $rb_plus(p, 1);
            _goto_level = _out;
            continue;;;;;}
            else if ((332)['$===']($case)) {
            
            tm = p;;
            
            self.te = p;
            p = $rb_minus(p, 1);
            
            self.$emit("tSYMBOL", self.$tok($rb_plus(self.ts, 1), tm), self.ts, tm);
            p = $rb_minus(tm, 1);
            self.cs = 781;
            
            p = $rb_plus(p, 1);
            _goto_level = _out;
            continue;;;;;}
            else if ((303)['$===']($case)) {
            
            tm = p;;
            
            self.te = p;
            p = $rb_minus(p, 1);
            
            p = $rb_minus(self.ts, 1);
            
            self.cs = 781;
            _goto_level = _again;
            continue;;;;;}
            else if ((415)['$===']($case)) {
            
            tm = p;;
            
            $case = self.act;
            if ((144)['$===']($case)) {
            
            p = $rb_minus(self.te, 1);;
            if (self.lambda_stack.$last()['$=='](self.paren_nest)) {
              
              self.lambda_stack.$pop();
              if (self.$tok()['$==']("{".$freeze())) {
                self.$emit("tLAMBEG", "{".$freeze())
              } else {
                self.$emit("kDO_LAMBDA", "do".$freeze())
              };
            } else if (self.$tok()['$==']("{".$freeze())) {
              self.$emit("tLCURLY", "{".$freeze())
            } else {
              self.$emit_do()
            };
            if (self.$tok()['$==']("{".$freeze())) {
              self.paren_nest = $rb_plus(self.paren_nest, 1)};
            self.command_start = true;
            self.cs = 773;
            
            p = $rb_plus(p, 1);
            _goto_level = _out;
            continue;;;}
            else if ((145)['$===']($case)) {
            
            p = $rb_minus(self.te, 1);;
            self.$emit_table($$($nesting, 'KEYWORDS'));
            self.cs = 333;
            
            p = $rb_plus(p, 1);
            _goto_level = _out;
            continue;;;}
            else if ((146)['$===']($case)) {
            
            p = $rb_minus(self.te, 1);;
            self.$emit("kCLASS", "class".$freeze(), self.ts, $rb_plus(self.ts, 5));
            self.$emit("tLSHFT", "<<".$freeze(), $rb_minus(self.te, 2), self.te);
            self.cs = 773;
            
            p = $rb_plus(p, 1);
            _goto_level = _out;
            continue;;;}
            else if ((147)['$===']($case)) {
            
            p = $rb_minus(self.te, 1);;
            self.$emit_table($$($nesting, 'KEYWORDS'));
            self.cs = 543;
            
            p = $rb_plus(p, 1);
            _goto_level = _out;
            continue;;;}
            else if ((148)['$===']($case)) {
            
            p = $rb_minus(self.te, 1);;
            self.$emit_table($$($nesting, 'KEYWORDS'));
            self.command_start = true;
            self.cs = 773;
            
            p = $rb_plus(p, 1);
            _goto_level = _out;
            continue;;;}
            else if ((149)['$===']($case)) {
            
            p = $rb_minus(self.te, 1);;
            self.$emit_table($$($nesting, 'KEYWORDS'));
            self.cs = 519;
            
            p = $rb_plus(p, 1);
            _goto_level = _out;
            continue;;;}
            else if ((150)['$===']($case)) {
            
            p = $rb_minus(self.te, 1);;
            self.$emit_table($$($nesting, 'KEYWORDS'));
            if ($truthy(($truthy($b = self['$version?'](18)) ? self.$tok()['$==']("not".$freeze()) : $b))) {
              
              self.cs = 543;
              
              p = $rb_plus(p, 1);
              _goto_level = _out;
              continue;;;
            } else {
              
              self.cs = 474;
              
              p = $rb_plus(p, 1);
              _goto_level = _out;
              continue;;;
            };}
            else if ((151)['$===']($case)) {
            
            p = $rb_minus(self.te, 1);;
            if ($truthy(self['$version?'](18))) {
              
              self.$emit("tIDENTIFIER");
              if ($truthy(($truthy($b = self.static_env['$nil?']()['$!']()) ? self.static_env['$declared?'](self.$tok()) : $b))) {
              } else {
                self.cs = self.$arg_or_cmdarg(cmd_state)
              };
            } else {
              self.$emit("k__ENCODING__", "__ENCODING__".$freeze())
            };
            
            p = $rb_plus(p, 1);
            _goto_level = _out;
            continue;;;}
            else if ((152)['$===']($case)) {
            
            p = $rb_minus(self.te, 1);;
            self.$emit_table($$($nesting, 'KEYWORDS'));
            
            p = $rb_plus(p, 1);
            _goto_level = _out;
            continue;;;}
            else if ((153)['$===']($case)) {
            
            p = $rb_minus(self.te, 1);;
            digits = self.$tok(self.num_digits_s, self.num_suffix_s);
            if ($truthy(digits['$end_with?']("_".$freeze()))) {
              self.$diagnostic("error", "trailing_in_number", $hash2(["character"], {"character": "_".$freeze()}), self.$range($rb_minus(self.te, 1), self.te))
            } else if ($truthy(($truthy($b = ($truthy($c = digits['$empty?']()) ? self.num_base['$=='](8) : $c)) ? self['$version?'](18) : $b))) {
              digits = "0".$freeze()
            } else if ($truthy(digits['$empty?']())) {
              self.$diagnostic("error", "empty_numeric")
            } else if ($truthy((($b = self.num_base['$=='](8)) ? (invalid_idx = digits.$index(/[89]/)) : self.num_base['$=='](8)))) {
              
              invalid_s = $rb_plus(self.num_digits_s, invalid_idx);
              self.$diagnostic("error", "invalid_octal", nil, self.$range(invalid_s, $rb_plus(invalid_s, 1)));};
            if ($truthy(self['$version?'](18, 19, 20))) {
              
              self.$emit("tINTEGER", digits.$to_i(self.num_base), self.ts, self.num_suffix_s);
              p = $rb_minus(self.num_suffix_s, 1);
            } else {
              self.num_xfrm.$call(digits.$to_i(self.num_base))
            };
            
            p = $rb_plus(p, 1);
            _goto_level = _out;
            continue;;;}
            else if ((155)['$===']($case)) {
            
            p = $rb_minus(self.te, 1);;
            if ($truthy(self['$version?'](18, 19, 20))) {
              self.$diagnostic("error", "trailing_in_number", $hash2(["character"], {"character": self.$tok($rb_minus(self.te, 1), self.te)}), self.$range($rb_minus(self.te, 1), self.te))
            } else {
              
              self.$emit("tINTEGER", self.$tok(self.ts, $rb_minus(self.te, 1)).$to_i(), self.ts, $rb_minus(self.te, 1));
              p = $rb_minus(p, 1);
              
              p = $rb_plus(p, 1);
              _goto_level = _out;
              continue;;;
            };}
            else if ((156)['$===']($case)) {
            
            p = $rb_minus(self.te, 1);;
            if ($truthy(self['$version?'](18, 19, 20))) {
              self.$diagnostic("error", "trailing_in_number", $hash2(["character"], {"character": self.$tok($rb_minus(self.te, 1), self.te)}), self.$range($rb_minus(self.te, 1), self.te))
            } else {
              
              self.$emit("tFLOAT", self.$tok(self.ts, $rb_minus(self.te, 1)).$to_f(), self.ts, $rb_minus(self.te, 1));
              p = $rb_minus(p, 1);
              
              p = $rb_plus(p, 1);
              _goto_level = _out;
              continue;;;
            };}
            else if ((157)['$===']($case)) {
            
            p = $rb_minus(self.te, 1);;
            digits = self.$tok(self.ts, self.num_suffix_s);
            if ($truthy(self['$version?'](18, 19, 20))) {
              
              self.$emit("tFLOAT", self.$Float(digits), self.ts, self.num_suffix_s);
              p = $rb_minus(self.num_suffix_s, 1);
            } else {
              self.num_xfrm.$call(digits)
            };
            
            p = $rb_plus(p, 1);
            _goto_level = _out;
            continue;;;}
            else if ((159)['$===']($case)) {
            
            p = $rb_minus(self.te, 1);;
            self.$emit("tCONSTANT");
            self.cs = self.$arg_or_cmdarg(cmd_state);
            
            p = $rb_plus(p, 1);
            _goto_level = _out;
            continue;;;}
            else if ((163)['$===']($case)) {
            
            p = $rb_minus(self.te, 1);;
            self.$emit("tIDENTIFIER");
            if ($truthy(($truthy($b = self.static_env['$nil?']()['$!']()) ? self.static_env['$declared?'](self.$tok()) : $b))) {
              
              self.cs = 446;
              
              p = $rb_plus(p, 1);
              _goto_level = _out;
              continue;;;
            } else {
              
              self.cs = self.$arg_or_cmdarg(cmd_state);
              
              p = $rb_plus(p, 1);
              _goto_level = _out;
              continue;;;
            };}
            else if ((164)['$===']($case)) {
            
            p = $rb_minus(self.te, 1);;
            if (tm['$=='](self.te)) {
              self.$emit("tFID")
            } else {
              
              self.$emit("tIDENTIFIER", self.$tok(self.ts, tm), self.ts, tm);
              p = $rb_minus(tm, 1);
            };
            self.cs = 474;
            
            p = $rb_plus(p, 1);
            _goto_level = _out;
            continue;;;}
            else if ((166)['$===']($case)) {
            
            p = $rb_minus(self.te, 1);;
            self.$emit_table($$($nesting, 'PUNCTUATION'));
            self.cs = 773;
            
            p = $rb_plus(p, 1);
            _goto_level = _out;
            continue;;;}
            else if ((167)['$===']($case)) {
            
            p = $rb_minus(self.te, 1);;
            self.$emit_table($$($nesting, 'PUNCTUATION'));
            self.cs = 543;
            
            p = $rb_plus(p, 1);
            _goto_level = _out;
            continue;;;};;}
            else if ((238)['$===']($case)) {
            
            tm = $rb_minus(p, 2);;
            
            self.te = p;
            p = $rb_minus(p, 1);
            
            self.$emit("tFID", self.$tok(self.ts, tm), self.ts, tm);
            self.cs = self.$arg_or_cmdarg(cmd_state);
            p = $rb_minus(tm, 1);
            
            p = $rb_plus(p, 1);
            _goto_level = _out;
            continue;;;;;}
            else if ((333)['$===']($case)) {
            
            tm = $rb_minus(p, 2);;
            
            self.te = p;
            p = $rb_minus(p, 1);
            
            self.$emit("tSYMBOL", self.$tok($rb_plus(self.ts, 1), tm), self.ts, tm);
            p = $rb_minus(tm, 1);
            self.cs = 781;
            
            p = $rb_plus(p, 1);
            _goto_level = _out;
            continue;;;;;}
            else if ((305)['$===']($case)) {
            
            tm = $rb_minus(p, 2);;
            
            self.te = p;
            p = $rb_minus(p, 1);
            
            p = $rb_minus(self.ts, 1);
            
            self.cs = 781;
            _goto_level = _again;
            continue;;;;;}
            else if ((416)['$===']($case)) {
            
            tm = $rb_minus(p, 2);;
            
            self.te = p;
            p = $rb_minus(p, 1);
            
            if (tm['$=='](self.te)) {
              self.$emit("tFID")
            } else {
              
              self.$emit("tIDENTIFIER", self.$tok(self.ts, tm), self.ts, tm);
              p = $rb_minus(tm, 1);
            };
            self.cs = 474;
            
            p = $rb_plus(p, 1);
            _goto_level = _out;
            continue;;;;;}
            else if ((334)['$===']($case)) {
            
            tm = p;;
            
            self.te = p;
            p = $rb_minus(p, 1);
            
            self.$emit("tSYMBOL", self.$tok($rb_plus(self.ts, 1), tm), self.ts, tm);
            p = $rb_minus(tm, 1);
            self.cs = 781;
            
            p = $rb_plus(p, 1);
            _goto_level = _out;
            continue;;;;;}
            else if ((306)['$===']($case)) {
            
            tm = p;;
            
            self.te = p;
            p = $rb_minus(p, 1);
            
            p = $rb_minus(self.ts, 1);
            
            self.cs = 781;
            _goto_level = _again;
            continue;;;;;}
            else if ((335)['$===']($case)) {
            
            tm = $rb_minus(p, 2);;
            
            self.te = p;
            p = $rb_minus(p, 1);
            
            self.$emit("tSYMBOL", self.$tok($rb_plus(self.ts, 1), tm), self.ts, tm);
            p = $rb_minus(tm, 1);
            self.cs = 781;
            
            p = $rb_plus(p, 1);
            _goto_level = _out;
            continue;;;;;}
            else if ((307)['$===']($case)) {
            
            tm = $rb_minus(p, 2);;
            
            self.te = p;
            p = $rb_minus(p, 1);
            
            p = $rb_minus(self.ts, 1);
            
            self.cs = 781;
            _goto_level = _again;
            continue;;;;;}
            else if ((339)['$===']($case)) {
            
            tm = $rb_minus(p, 2);;
            
            self.te = p;
            p = $rb_minus(p, 1);
            
            self.$emit("tSYMBOL", self.$tok($rb_plus(self.ts, 1), tm), self.ts, tm);
            p = $rb_minus(tm, 1);
            self.cs = 781;
            
            p = $rb_plus(p, 1);
            _goto_level = _out;
            continue;;;;;}
            else if ((310)['$===']($case)) {
            
            tm = $rb_minus(p, 2);;
            
            self.te = p;
            p = $rb_minus(p, 1);
            
            p = $rb_minus(self.ts, 1);
            
            self.cs = 781;
            _goto_level = _again;
            continue;;;;;}
            else if ((338)['$===']($case)) {
            
            tm = $rb_minus(p, 2);;
            
            self.te = p;
            p = $rb_minus(p, 1);
            
            self.$emit("tSYMBOL", self.$tok($rb_plus(self.ts, 1), tm), self.ts, tm);
            p = $rb_minus(tm, 1);
            self.cs = 781;
            
            p = $rb_plus(p, 1);
            _goto_level = _out;
            continue;;;;;}
            else if ((309)['$===']($case)) {
            
            tm = $rb_minus(p, 2);;
            
            $case = self.act;
            if ((98)['$===']($case)) {
            
            p = $rb_minus(self.te, 1);;
            self.$emit("tUNARY_NUM", self.$tok(self.ts, $rb_plus(self.ts, 1)), self.ts, $rb_plus(self.ts, 1));
            p = $rb_minus(p, 1);
            self.cs = 781;
            
            p = $rb_plus(p, 1);
            _goto_level = _out;
            continue;;;}
            else if ((105)['$===']($case)) {
            
            p = $rb_minus(self.te, 1);;
            self.$diagnostic("error", "unterminated_heredoc_id", nil, self.$range(self.ts, $rb_plus(self.ts, 1)));}
            else if ((116)['$===']($case)) {
            
            p = $rb_minus(self.te, 1);;
            if ($truthy($rb_ge(self.version, 27))) {
              
              self.$emit("tPIPE", self.$tok(self.ts, $rb_plus(self.ts, 1)), self.ts, $rb_plus(self.ts, 1));
              p = $rb_minus(p, 1);
              self.cs = 543;
              
              p = $rb_plus(p, 1);
              _goto_level = _out;
              continue;;;
            } else {
              
              p = $rb_minus(p, 2);
              
              self.cs = 781;
              _goto_level = _again;
              continue;;;
            };}
            else if ((120)['$===']($case)) {
            
            p = $rb_minus(self.te, 1);;
            self.$emit_table($$($nesting, 'PUNCTUATION_BEGIN'));
            
            p = $rb_plus(p, 1);
            _goto_level = _out;
            continue;;;}
            else if ((121)['$===']($case)) {
            
            p = $rb_minus(self.te, 1);;
            self.$emit("kRESCUE", "rescue".$freeze(), self.ts, tm);
            p = $rb_minus(tm, 1);
            self.cs = 519;
            
            p = $rb_plus(p, 1);
            _goto_level = _out;
            continue;;;}
            else if ((122)['$===']($case)) {
            
            p = $rb_minus(self.te, 1);;
            self.$emit_table($$($nesting, 'KEYWORDS_BEGIN'));
            self.command_start = true;
            self.cs = 773;
            
            p = $rb_plus(p, 1);
            _goto_level = _out;
            continue;;;}
            else if ((126)['$===']($case)) {
            
            p = $rb_minus(self.te, 1);;
            p = $rb_minus(self.ts, 1);
            
            self.cs = 781;
            _goto_level = _again;
            continue;;;}
            else if ((127)['$===']($case)) {
            
            p = $rb_minus(self.te, 1);;
            self.$emit("tIDENTIFIER");
            if ($truthy(($truthy($b = self.static_env['$nil?']()['$!']()) ? self.static_env['$declared?'](self.$tok()) : $b))) {
              
              self.cs = 446;
              
              p = $rb_plus(p, 1);
              _goto_level = _out;
              continue;;;
            } else {
              
              self.cs = self.$arg_or_cmdarg(cmd_state);
              
              p = $rb_plus(p, 1);
              _goto_level = _out;
              continue;;;
            };}
            else if ((131)['$===']($case)) {
            
            p = $rb_minus(self.te, 1);;
            p = $rb_minus(self.ts, 1);
            
            self.cs = 781;
            _goto_level = _again;
            continue;;;};;}
            else if ((336)['$===']($case)) {
            
            tm = $rb_minus(p, 3);;
            
            self.te = p;
            p = $rb_minus(p, 1);
            
            self.$emit("tSYMBOL", self.$tok($rb_plus(self.ts, 1), tm), self.ts, tm);
            p = $rb_minus(tm, 1);
            self.cs = 781;
            
            p = $rb_plus(p, 1);
            _goto_level = _out;
            continue;;;;;}
            else if ((308)['$===']($case)) {
            
            tm = $rb_minus(p, 3);;
            
            self.te = p;
            p = $rb_minus(p, 1);
            
            p = $rb_minus(self.ts, 1);
            
            self.cs = 781;
            _goto_level = _again;
            continue;;;;;}
            else if ((337)['$===']($case)) {
            
            tm = $rb_minus(p, 2);;
            
            self.te = p;
            p = $rb_minus(p, 1);
            
            self.$emit("tSYMBOL", self.$tok($rb_plus(self.ts, 1), tm), self.ts, tm);
            p = $rb_minus(tm, 1);
            self.cs = 781;
            
            p = $rb_plus(p, 1);
            _goto_level = _out;
            continue;;;;;}
            else if ((481)['$===']($case)) {
            
            tm = $rb_minus(p, 2);;
            
            self.te = p;
            p = $rb_minus(p, 1);
            
            self.$emit("tCONSTANT", self.$tok(self.ts, tm), self.ts, tm);
            p = $rb_minus(tm, 1);
            
            p = $rb_plus(p, 1);
            _goto_level = _out;
            continue;;;;;}
            else if ((261)['$===']($case)) {
            
            self.cond.$push(false);
            self.cmdarg.$push(false);
            self.paren_nest = $rb_plus(self.paren_nest, 1);;
            
            self.te = p;
            p = $rb_minus(p, 1);
            
            self.$emit("tLBRACK", "[".$freeze(), $rb_minus(self.te, 1), self.te);
            self.cs = 543;
            
            p = $rb_plus(p, 1);
            _goto_level = _out;
            continue;;;;;}
            else if ((377)['$===']($case)) {
            
            self.cond.$push(false);
            self.cmdarg.$push(false);
            self.paren_nest = $rb_plus(self.paren_nest, 1);;
            
            self.te = p;
            p = $rb_minus(p, 1);
            
            self.$emit("tLBRACK", "[".$freeze());
            
            p = $rb_plus(p, 1);
            _goto_level = _out;
            continue;;;;;}
            else if ((484)['$===']($case)) {
            
            self.cond.$push(false);
            self.cmdarg.$push(false);
            self.paren_nest = $rb_plus(self.paren_nest, 1);;
            
            self.te = p;
            p = $rb_minus(p, 1);
            
            self.$emit("tLBRACK2", "[".$freeze());
            self.cs = 543;
            
            p = $rb_plus(p, 1);
            _goto_level = _out;
            continue;;;;;}
            else if ((487)['$===']($case)) {
            
            self.paren_nest = $rb_minus(self.paren_nest, 1);;
            
            self.te = p;
            p = $rb_minus(p, 1);
            
            self.$emit_table($$($nesting, 'PUNCTUATION'));
            if ($truthy($rb_lt(self.version, 24))) {
              
              self.cond.$lexpop();
              self.cmdarg.$lexpop();
            } else {
              
              self.cond.$pop();
              self.cmdarg.$pop();
            };
            if ($truthy(($truthy($b = self.$tok()['$==']("}".$freeze())) ? $b : self.$tok()['$==']("]".$freeze())))) {
              if ($truthy($rb_ge(self.version, 25))) {
                self.cs = 781
              } else {
                self.cs = 511
              }};
            
            p = $rb_plus(p, 1);
            _goto_level = _out;
            continue;;;;;}
            else if ((253)['$===']($case)) {
            
            self.cond.$push(false);
            self.cmdarg.$push(false);
            self.paren_nest = $rb_plus(self.paren_nest, 1);
            if ($truthy(self['$version?'](18))) {
              self.command_start = true};;
            
            self.te = p;
            p = $rb_minus(p, 1);
            
            if ($truthy(self['$version?'](18))) {
              
              self.$emit("tLPAREN2", "(".$freeze(), $rb_minus(self.te, 1), self.te);
              self.cs = 773;
              
              p = $rb_plus(p, 1);
              _goto_level = _out;
              continue;;;
            } else {
              
              self.$emit("tLPAREN_ARG", "(".$freeze(), $rb_minus(self.te, 1), self.te);
              self.cs = 543;
              
              p = $rb_plus(p, 1);
              _goto_level = _out;
              continue;;;
            };;;}
            else if ((266)['$===']($case)) {
            
            self.cond.$push(false);
            self.cmdarg.$push(false);
            self.paren_nest = $rb_plus(self.paren_nest, 1);
            if ($truthy(self['$version?'](18))) {
              self.command_start = true};;
            
            self.te = p;
            p = $rb_minus(p, 1);
            
            self.$emit("tLPAREN2", "(".$freeze());
            self.cs = 543;
            
            p = $rb_plus(p, 1);
            _goto_level = _out;
            continue;;;;;}
            else if ((274)['$===']($case)) {
            
            self.cond.$push(false);
            self.cmdarg.$push(false);
            self.paren_nest = $rb_plus(self.paren_nest, 1);
            if ($truthy(self['$version?'](18))) {
              self.command_start = true};;
            
            self.te = p;
            p = $rb_minus(p, 1);
            
            self.$emit("tLPAREN_ARG", "(".$freeze(), $rb_minus(self.te, 1), self.te);
            if ($truthy(self['$version?'](18))) {
              
              self.cs = 773;
              
              p = $rb_plus(p, 1);
              _goto_level = _out;
              continue;;;
            } else {
              
              self.cs = 543;
              
              p = $rb_plus(p, 1);
              _goto_level = _out;
              continue;;;
            };;;}
            else if ((323)['$===']($case)) {
            
            self.cond.$push(false);
            self.cmdarg.$push(false);
            self.paren_nest = $rb_plus(self.paren_nest, 1);
            if ($truthy(self['$version?'](18))) {
              self.command_start = true};;
            
            self.te = p;
            p = $rb_minus(p, 1);
            
            self.$emit("tLPAREN", "(".$freeze());
            
            p = $rb_plus(p, 1);
            _goto_level = _out;
            continue;;;;;}
            else if ((428)['$===']($case)) {
            
            self.cond.$push(false);
            self.cmdarg.$push(false);
            self.paren_nest = $rb_plus(self.paren_nest, 1);
            if ($truthy(self['$version?'](18))) {
              self.command_start = true};;
            
            self.te = p;
            p = $rb_minus(p, 1);
            
            self.$emit_table($$($nesting, 'PUNCTUATION'));
            self.cs = 543;
            
            p = $rb_plus(p, 1);
            _goto_level = _out;
            continue;;;;;}
            else if ((429)['$===']($case)) {
            
            self.paren_nest = $rb_minus(self.paren_nest, 1);;
            
            self.te = p;
            p = $rb_minus(p, 1);
            
            self.$emit_table($$($nesting, 'PUNCTUATION'));
            if ($truthy($rb_lt(self.version, 24))) {
              
              self.cond.$lexpop();
              self.cmdarg.$lexpop();
            } else {
              
              self.cond.$pop();
              self.cmdarg.$pop();
            };
            if ($truthy(($truthy($b = self.$tok()['$==']("}".$freeze())) ? $b : self.$tok()['$==']("]".$freeze())))) {
              if ($truthy($rb_ge(self.version, 25))) {
                self.cs = 781
              } else {
                self.cs = 511
              }};
            
            p = $rb_plus(p, 1);
            _goto_level = _out;
            continue;;;;;}
            else if ((71)['$===']($case)) {
            
            heredoc_e = p;;
            
            self.newline_s = p;;}
            else if ((347)['$===']($case)) {
            
            new_herebody_s = p;;
            
            self.te = p;
            p = $rb_minus(p, 1);
            
            self.$tok(self.ts, heredoc_e)['$=~'](/^<<(-?)(~?)(["'`]?)(.*)\3$/m);
            indent = ($truthy($b = (($c = $gvars['~']) === nil ? nil : $c['$[]'](1))['$empty?']()['$!']()) ? $b : (($c = $gvars['~']) === nil ? nil : $c['$[]'](2))['$empty?']()['$!']());
            dedent_body = (($b = $gvars['~']) === nil ? nil : $b['$[]'](2))['$empty?']()['$!']();
            type = (function() {if ($truthy((($b = $gvars['~']) === nil ? nil : $b['$[]'](3))['$empty?']())) {
              return "<<\"".$freeze()
            } else {
              
              return $rb_plus("<<".$freeze(), (($b = $gvars['~']) === nil ? nil : $b['$[]'](3)));
            }; return nil; })();
            delimiter = (($b = $gvars['~']) === nil ? nil : $b['$[]'](4));
            if ($truthy($rb_ge(self.version, 27))) {
              if ($truthy(($truthy($b = $rb_gt(delimiter.$count("\n"), 0)) ? $b : $rb_gt(delimiter.$count("\r"), 0)))) {
                self.$diagnostic("error", "unterminated_heredoc_id", nil, self.$range(self.ts, $rb_plus(self.ts, 1)))}
            } else if ($truthy($rb_ge(self.version, 24))) {
              if ($truthy($rb_gt(delimiter.$count("\n"), 0))) {
                if ($truthy(delimiter['$end_with?']("\n"))) {
                  
                  self.$diagnostic("warning", "heredoc_id_ends_with_nl", nil, self.$range(self.ts, $rb_plus(self.ts, 1)));
                  delimiter = delimiter.$rstrip();
                } else {
                  self.$diagnostic("fatal", "heredoc_id_has_newline", nil, self.$range(self.ts, $rb_plus(self.ts, 1)))
                }}};
            if ($truthy(($truthy($b = dedent_body) ? self['$version?'](18, 19, 20, 21, 22) : $b))) {
              
              self.$emit("tLSHFT", "<<".$freeze(), self.ts, $rb_plus(self.ts, 2));
              p = $rb_plus(self.ts, 1);
              self.cs = 543;
              
              p = $rb_plus(p, 1);
              _goto_level = _out;
              continue;;;
            } else {
              
              self.cs = self.$push_literal(type, delimiter, self.ts, heredoc_e, indent, dedent_body);
              self.herebody_s = ($truthy($b = self.herebody_s) ? $b : new_herebody_s);
              p = $rb_minus(self.herebody_s, 1);
            };;;}
            else if ((342)['$===']($case)) {
            
            tm = $rb_minus(p, 1);
            diag_msg = "ivar_name";;
            
            self.te = p;
            p = $rb_minus(p, 1);
            
            if ($truthy($rb_ge(self.version, 27))) {
              self.$diagnostic("error", diag_msg, $hash2(["name"], {"name": self.$tok(tm, self.te)}), self.$range(tm, self.te))
            } else {
              
              self.$emit("tCOLON", self.$tok(self.ts, $rb_plus(self.ts, 1)), self.ts, $rb_plus(self.ts, 1));
              p = self.ts;
            };
            self.cs = 781;
            
            p = $rb_plus(p, 1);
            _goto_level = _out;
            continue;;;;;}
            else if ((345)['$===']($case)) {
            
            tm = $rb_minus(p, 2);
            diag_msg = "cvar_name";;
            
            self.te = p;
            p = $rb_minus(p, 1);
            
            if ($truthy($rb_ge(self.version, 27))) {
              self.$diagnostic("error", diag_msg, $hash2(["name"], {"name": self.$tok(tm, self.te)}), self.$range(tm, self.te))
            } else {
              
              self.$emit("tCOLON", self.$tok(self.ts, $rb_plus(self.ts, 1)), self.ts, $rb_plus(self.ts, 1));
              p = self.ts;
            };
            self.cs = 781;
            
            p = $rb_plus(p, 1);
            _goto_level = _out;
            continue;;;;;}
            else if ((353)['$===']($case)) {
            
            self.escape = nil;;
            
            self.te = p;
            p = $rb_minus(p, 1);
            
            value = ($truthy($b = self.escape) ? $b : self.$tok($rb_plus(self.ts, 1)));
            if ($truthy(self['$version?'](18))) {
              self.$emit("tINTEGER", value.$getbyte(0))
            } else {
              self.$emit("tCHARACTER", value)
            };
            self.cs = 781;
            
            p = $rb_plus(p, 1);
            _goto_level = _out;
            continue;;;;;}
            else if ((380)['$===']($case)) {
            
            tm = p;;
            
            self.te = p;
            p = $rb_minus(p, 1);
            
            self.$emit("kRESCUE", "rescue".$freeze(), self.ts, tm);
            p = $rb_minus(tm, 1);
            self.cs = 519;
            
            p = $rb_plus(p, 1);
            _goto_level = _out;
            continue;;;;;}
            else if ((471)['$===']($case)) {
            
            self.num_base = 16;
            self.num_digits_s = p;;
            
            self.num_suffix_s = p;;}
            else if ((465)['$===']($case)) {
            
            self.num_base = 10;
            self.num_digits_s = p;;
            
            self.num_suffix_s = p;;}
            else if ((468)['$===']($case)) {
            
            self.num_base = 8;
            self.num_digits_s = p;;
            
            self.num_suffix_s = p;;}
            else if ((462)['$===']($case)) {
            
            self.num_base = 2;
            self.num_digits_s = p;;
            
            self.num_suffix_s = p;;}
            else if ((477)['$===']($case)) {
            
            self.num_base = 10;
            self.num_digits_s = self.ts;;
            
            self.num_suffix_s = p;;}
            else if ((440)['$===']($case)) {
            
            self.num_base = 8;
            self.num_digits_s = self.ts;;
            
            self.num_suffix_s = p;;}
            else if ((478)['$===']($case)) {
            
            self.num_suffix_s = p;;
            
            self.num_xfrm = $send(self, 'lambda', [], ($$27 = function(chars){var self = $$27.$$s == null ? this : $$27.$$s;

            
              
              if (chars == null) {
                chars = nil;
              };
              return self.$emit("tINTEGER", chars);}, $$27.$$s = self, $$27.$$arity = 1, $$27));;}
            else if ((89)['$===']($case)) {
            
            tm = p;;
            
            self.te = $rb_plus(p, 1);
            
            p = $rb_minus(tm, 1);
            
            self.cs = 781;
            _goto_level = _again;
            continue;;;;;}
            else if ((8)['$===']($case)) {
            
            self.te = $rb_plus(p, 1);;
            
            self.newline_s = p;;}
            else if ((444)['$===']($case)) {
            
            self.te = $rb_plus(p, 1);;
            
            self.num_suffix_s = p;;}
            else if ((222)['$===']($case)) {
            
            self.te = $rb_plus(p, 1);;
            
            self.act = 43;;}
            else if ((209)['$===']($case)) {
            
            self.te = $rb_plus(p, 1);;
            
            self.act = 44;;}
            else if ((205)['$===']($case)) {
            
            self.te = $rb_plus(p, 1);;
            
            self.act = 45;;}
            else if ((26)['$===']($case)) {
            
            self.te = $rb_plus(p, 1);;
            
            self.act = 71;;}
            else if ((255)['$===']($case)) {
            
            self.te = $rb_plus(p, 1);;
            
            self.act = 72;;}
            else if ((27)['$===']($case)) {
            
            self.te = $rb_plus(p, 1);;
            
            self.act = 77;;}
            else if ((248)['$===']($case)) {
            
            self.te = $rb_plus(p, 1);;
            
            self.act = 78;;}
            else if ((275)['$===']($case)) {
            
            self.te = $rb_plus(p, 1);;
            
            self.act = 84;;}
            else if ((45)['$===']($case)) {
            
            self.te = $rb_plus(p, 1);;
            
            self.act = 85;;}
            else if ((296)['$===']($case)) {
            
            self.te = $rb_plus(p, 1);;
            
            self.act = 92;;}
            else if ((285)['$===']($case)) {
            
            self.te = $rb_plus(p, 1);;
            
            self.act = 93;;}
            else if ((69)['$===']($case)) {
            
            self.te = $rb_plus(p, 1);;
            
            self.act = 105;;}
            else if ((385)['$===']($case)) {
            
            self.te = $rb_plus(p, 1);;
            
            self.act = 116;;}
            else if ((299)['$===']($case)) {
            
            self.te = $rb_plus(p, 1);;
            
            self.act = 120;;}
            else if ((379)['$===']($case)) {
            
            self.te = $rb_plus(p, 1);;
            
            self.act = 121;;}
            else if ((378)['$===']($case)) {
            
            self.te = $rb_plus(p, 1);;
            
            self.act = 122;;}
            else if ((74)['$===']($case)) {
            
            self.te = $rb_plus(p, 1);;
            
            self.act = 126;;}
            else if ((297)['$===']($case)) {
            
            self.te = $rb_plus(p, 1);;
            
            self.act = 127;;}
            else if ((300)['$===']($case)) {
            
            self.te = $rb_plus(p, 1);;
            
            self.act = 131;;}
            else if ((495)['$===']($case)) {
            
            self.te = $rb_plus(p, 1);;
            
            self.act = 144;;}
            else if ((490)['$===']($case)) {
            
            self.te = $rb_plus(p, 1);;
            
            self.act = 145;;}
            else if ((498)['$===']($case)) {
            
            self.te = $rb_plus(p, 1);;
            
            self.act = 147;;}
            else if ((491)['$===']($case)) {
            
            self.te = $rb_plus(p, 1);;
            
            self.act = 148;;}
            else if ((492)['$===']($case)) {
            
            self.te = $rb_plus(p, 1);;
            
            self.act = 149;;}
            else if ((497)['$===']($case)) {
            
            self.te = $rb_plus(p, 1);;
            
            self.act = 150;;}
            else if ((489)['$===']($case)) {
            
            self.te = $rb_plus(p, 1);;
            
            self.act = 151;;}
            else if ((483)['$===']($case)) {
            
            self.te = $rb_plus(p, 1);;
            
            self.act = 152;;}
            else if ((409)['$===']($case)) {
            
            self.te = $rb_plus(p, 1);;
            
            self.act = 153;;}
            else if ((442)['$===']($case)) {
            
            self.te = $rb_plus(p, 1);;
            
            self.act = 156;;}
            else if ((81)['$===']($case)) {
            
            self.te = $rb_plus(p, 1);;
            
            self.act = 157;;}
            else if ((412)['$===']($case)) {
            
            self.te = $rb_plus(p, 1);;
            
            self.act = 159;;}
            else if ((403)['$===']($case)) {
            
            self.te = $rb_plus(p, 1);;
            
            self.act = 163;;}
            else if ((414)['$===']($case)) {
            
            self.te = $rb_plus(p, 1);;
            
            self.act = 164;;}
            else if ((407)['$===']($case)) {
            
            self.te = $rb_plus(p, 1);;
            
            self.act = 166;;}
            else if ((413)['$===']($case)) {
            
            self.te = $rb_plus(p, 1);;
            
            self.act = 167;;}
            else if ((87)['$===']($case)) {
            
            self.te = $rb_plus(p, 1);;
            
            self.act = 180;;}
            else if ((502)['$===']($case)) {
            
            self.te = $rb_plus(p, 1);;
            
            self.act = 182;;}
            else if ((177)['$===']($case)) {
            
            self.newline_s = p;;
            
            self.te = $rb_plus(p, 1);
            
            current_literal = self.$literal();
            if (self.te['$=='](pe)) {
              self.$diagnostic("fatal", "string_eof", nil, self.$range(current_literal.$str_s(), $rb_plus(current_literal.$str_s(), 1)))};
            if ($truthy(current_literal['$heredoc?']())) {
              
              line = self.$tok(self.herebody_s, self.ts).$gsub(/\r+$/, "".$freeze());
              if ($truthy(self['$version?'](18, 19, 20))) {
                line = line.$gsub(/\r.*$/, "".$freeze())};
              if ($truthy(current_literal.$nest_and_try_closing(line, self.herebody_s, self.ts))) {
                
                self.herebody_s = self.te;
                p = $rb_minus(current_literal.$heredoc_e(), 1);
                self.cs = self.$pop_literal();
                
                p = $rb_plus(p, 1);
                _goto_level = _out;
                continue;;;
              } else {
                
                current_literal.$infer_indent_level(line);
                self.herebody_s = self.te;
              };
            } else {
              
              if ($truthy(current_literal.$nest_and_try_closing(self.$tok(), self.ts, self.te))) {
                
                self.cs = self.$pop_literal();
                
                p = $rb_plus(p, 1);
                _goto_level = _out;
                continue;;;};
              if ($truthy(self.herebody_s)) {
                
                p = $rb_minus(self.herebody_s, 1);
                self.herebody_s = nil;};
            };
            if ($truthy(($truthy($b = current_literal['$words?']()) ? self['$eof_codepoint?'](self.source_pts['$[]'](p))['$!']() : $b))) {
              current_literal.$extend_space(self.ts, self.te)
            } else {
              
              current_literal.$extend_string(self.$tok(), self.ts, self.te);
              current_literal.$flush_string();
            };;;
            
            self.escape_s = p;
            self.escape = nil;;}
            else if ((124)['$===']($case)) {
            
            codepoint = self.source_pts['$[]']($rb_minus(p, 1));
            if ($truthy((self.escape = $$($nesting, 'ESCAPES')['$[]'](codepoint))['$nil?']())) {
              self.escape = self.$encode_escape(self.source_buffer.$slice($rb_minus(p, 1)))};;
            
            self.escape = self.$encode_escape(self.escape['$[]'](0).$ord()['$&'](159));;
            
            self.te = p;
            p = $rb_minus(p, 1);
            
            current_literal = self.$literal();
            escaped_char = self.source_buffer.$slice(self.escape_s).$chr();
            if ($truthy(current_literal['$munge_escape?'](escaped_char))) {
              if ($truthy(($truthy($b = current_literal['$regexp?']()) ? $$($nesting, 'REGEXP_META_CHARACTERS').$match(escaped_char) : $b))) {
                current_literal.$extend_string(self.$tok(), self.ts, self.te)
              } else {
                current_literal.$extend_string(escaped_char, self.ts, self.te)
              }
            } else if ($truthy(($truthy($b = current_literal['$squiggly_heredoc?']()) ? escaped_char['$==']("\n".$freeze()) : $b))) {
              current_literal.$extend_string(self.$tok(), self.ts, self.te)
            } else if ($truthy(($truthy($b = current_literal['$supports_line_continuation_via_slash?']()) ? escaped_char['$==']("\n".$freeze()) : $b))) {
              current_literal.$extend_string(self.$tok().$gsub("\\\n".$freeze(), "".$freeze()), self.ts, self.te)
            } else if ($truthy(current_literal['$regexp?']())) {
              current_literal.$extend_string(self.$tok().$gsub("\\\n".$freeze(), "".$freeze()), self.ts, self.te)
            } else {
              current_literal.$extend_string(($truthy($b = self.escape) ? $b : self.$tok()), self.ts, self.te)
            };;;}
            else if ((152)['$===']($case)) {
            
            codepoint = self.source_pts['$[]']($rb_minus(p, 1));
            if ($truthy((self.escape = $$($nesting, 'ESCAPES')['$[]'](codepoint))['$nil?']())) {
              self.escape = self.$encode_escape(self.source_buffer.$slice($rb_minus(p, 1)))};;
            
            self.escape = self.$encode_escape(self.escape['$[]'](0).$ord()['$&'](159));;
            
            self.te = p;
            p = $rb_minus(p, 1);
            
            current_literal = self.$literal();
            escaped_char = self.source_buffer.$slice(self.escape_s).$chr();
            if ($truthy(current_literal['$munge_escape?'](escaped_char))) {
              if ($truthy(($truthy($b = current_literal['$regexp?']()) ? $$($nesting, 'REGEXP_META_CHARACTERS').$match(escaped_char) : $b))) {
                current_literal.$extend_string(self.$tok(), self.ts, self.te)
              } else {
                current_literal.$extend_string(escaped_char, self.ts, self.te)
              }
            } else if ($truthy(($truthy($b = current_literal['$squiggly_heredoc?']()) ? escaped_char['$==']("\n".$freeze()) : $b))) {
              current_literal.$extend_string(self.$tok(), self.ts, self.te)
            } else if ($truthy(($truthy($b = current_literal['$supports_line_continuation_via_slash?']()) ? escaped_char['$==']("\n".$freeze()) : $b))) {
              current_literal.$extend_string(self.$tok().$gsub("\\\n".$freeze(), "".$freeze()), self.ts, self.te)
            } else if ($truthy(current_literal['$regexp?']())) {
              current_literal.$extend_string(self.$tok().$gsub("\\\n".$freeze(), "".$freeze()), self.ts, self.te)
            } else {
              current_literal.$extend_string(($truthy($b = self.escape) ? $b : self.$tok()), self.ts, self.te)
            };;;}
            else if ((363)['$===']($case)) {
            
            codepoint = self.source_pts['$[]']($rb_minus(p, 1));
            if ($truthy((self.escape = $$($nesting, 'ESCAPES')['$[]'](codepoint))['$nil?']())) {
              self.escape = self.$encode_escape(self.source_buffer.$slice($rb_minus(p, 1)))};;
            
            self.escape = self.$encode_escape(self.escape['$[]'](0).$ord()['$&'](159));;
            
            self.te = p;
            p = $rb_minus(p, 1);
            
            value = ($truthy($b = self.escape) ? $b : self.$tok($rb_plus(self.ts, 1)));
            if ($truthy(self['$version?'](18))) {
              self.$emit("tINTEGER", value.$getbyte(0))
            } else {
              self.$emit("tCHARACTER", value)
            };
            self.cs = 781;
            
            p = $rb_plus(p, 1);
            _goto_level = _out;
            continue;;;;;}
            else if ((129)['$===']($case)) {
            
            codepoint = self.source_pts['$[]']($rb_minus(p, 1));
            if ($truthy((self.escape = $$($nesting, 'ESCAPES')['$[]'](codepoint))['$nil?']())) {
              self.escape = self.$encode_escape(self.source_buffer.$slice($rb_minus(p, 1)))};;
            
            self.escape = self.$encode_escape(self.escape['$[]'](0).$ord()['$|'](128));;
            
            self.te = p;
            p = $rb_minus(p, 1);
            
            current_literal = self.$literal();
            escaped_char = self.source_buffer.$slice(self.escape_s).$chr();
            if ($truthy(current_literal['$munge_escape?'](escaped_char))) {
              if ($truthy(($truthy($b = current_literal['$regexp?']()) ? $$($nesting, 'REGEXP_META_CHARACTERS').$match(escaped_char) : $b))) {
                current_literal.$extend_string(self.$tok(), self.ts, self.te)
              } else {
                current_literal.$extend_string(escaped_char, self.ts, self.te)
              }
            } else if ($truthy(($truthy($b = current_literal['$squiggly_heredoc?']()) ? escaped_char['$==']("\n".$freeze()) : $b))) {
              current_literal.$extend_string(self.$tok(), self.ts, self.te)
            } else if ($truthy(($truthy($b = current_literal['$supports_line_continuation_via_slash?']()) ? escaped_char['$==']("\n".$freeze()) : $b))) {
              current_literal.$extend_string(self.$tok().$gsub("\\\n".$freeze(), "".$freeze()), self.ts, self.te)
            } else if ($truthy(current_literal['$regexp?']())) {
              current_literal.$extend_string(self.$tok().$gsub("\\\n".$freeze(), "".$freeze()), self.ts, self.te)
            } else {
              current_literal.$extend_string(($truthy($b = self.escape) ? $b : self.$tok()), self.ts, self.te)
            };;;}
            else if ((157)['$===']($case)) {
            
            codepoint = self.source_pts['$[]']($rb_minus(p, 1));
            if ($truthy((self.escape = $$($nesting, 'ESCAPES')['$[]'](codepoint))['$nil?']())) {
              self.escape = self.$encode_escape(self.source_buffer.$slice($rb_minus(p, 1)))};;
            
            self.escape = self.$encode_escape(self.escape['$[]'](0).$ord()['$|'](128));;
            
            self.te = p;
            p = $rb_minus(p, 1);
            
            current_literal = self.$literal();
            escaped_char = self.source_buffer.$slice(self.escape_s).$chr();
            if ($truthy(current_literal['$munge_escape?'](escaped_char))) {
              if ($truthy(($truthy($b = current_literal['$regexp?']()) ? $$($nesting, 'REGEXP_META_CHARACTERS').$match(escaped_char) : $b))) {
                current_literal.$extend_string(self.$tok(), self.ts, self.te)
              } else {
                current_literal.$extend_string(escaped_char, self.ts, self.te)
              }
            } else if ($truthy(($truthy($b = current_literal['$squiggly_heredoc?']()) ? escaped_char['$==']("\n".$freeze()) : $b))) {
              current_literal.$extend_string(self.$tok(), self.ts, self.te)
            } else if ($truthy(($truthy($b = current_literal['$supports_line_continuation_via_slash?']()) ? escaped_char['$==']("\n".$freeze()) : $b))) {
              current_literal.$extend_string(self.$tok().$gsub("\\\n".$freeze(), "".$freeze()), self.ts, self.te)
            } else if ($truthy(current_literal['$regexp?']())) {
              current_literal.$extend_string(self.$tok().$gsub("\\\n".$freeze(), "".$freeze()), self.ts, self.te)
            } else {
              current_literal.$extend_string(($truthy($b = self.escape) ? $b : self.$tok()), self.ts, self.te)
            };;;}
            else if ((368)['$===']($case)) {
            
            codepoint = self.source_pts['$[]']($rb_minus(p, 1));
            if ($truthy((self.escape = $$($nesting, 'ESCAPES')['$[]'](codepoint))['$nil?']())) {
              self.escape = self.$encode_escape(self.source_buffer.$slice($rb_minus(p, 1)))};;
            
            self.escape = self.$encode_escape(self.escape['$[]'](0).$ord()['$|'](128));;
            
            self.te = p;
            p = $rb_minus(p, 1);
            
            value = ($truthy($b = self.escape) ? $b : self.$tok($rb_plus(self.ts, 1)));
            if ($truthy(self['$version?'](18))) {
              self.$emit("tINTEGER", value.$getbyte(0))
            } else {
              self.$emit("tCHARACTER", value)
            };
            self.cs = 781;
            
            p = $rb_plus(p, 1);
            _goto_level = _out;
            continue;;;;;}
            else if ((122)['$===']($case)) {
            
            self.escape = self.source_buffer.$slice($rb_minus(p, 1)).$chr();
            if ($truthy(($truthy($b = $rb_ge(self.version, 27)) ? ($truthy($c = $range(0, 8, false)['$include?'](self.escape.$ord())) ? $c : $range(14, 31, false)['$include?'](self.escape.$ord())) : $b))) {
              self.$diagnostic("fatal", "invalid_escape")};;
            
            self.escape = self.$encode_escape(self.escape['$[]'](0).$ord()['$&'](159));;
            
            self.te = p;
            p = $rb_minus(p, 1);
            
            current_literal = self.$literal();
            escaped_char = self.source_buffer.$slice(self.escape_s).$chr();
            if ($truthy(current_literal['$munge_escape?'](escaped_char))) {
              if ($truthy(($truthy($b = current_literal['$regexp?']()) ? $$($nesting, 'REGEXP_META_CHARACTERS').$match(escaped_char) : $b))) {
                current_literal.$extend_string(self.$tok(), self.ts, self.te)
              } else {
                current_literal.$extend_string(escaped_char, self.ts, self.te)
              }
            } else if ($truthy(($truthy($b = current_literal['$squiggly_heredoc?']()) ? escaped_char['$==']("\n".$freeze()) : $b))) {
              current_literal.$extend_string(self.$tok(), self.ts, self.te)
            } else if ($truthy(($truthy($b = current_literal['$supports_line_continuation_via_slash?']()) ? escaped_char['$==']("\n".$freeze()) : $b))) {
              current_literal.$extend_string(self.$tok().$gsub("\\\n".$freeze(), "".$freeze()), self.ts, self.te)
            } else if ($truthy(current_literal['$regexp?']())) {
              current_literal.$extend_string(self.$tok().$gsub("\\\n".$freeze(), "".$freeze()), self.ts, self.te)
            } else {
              current_literal.$extend_string(($truthy($b = self.escape) ? $b : self.$tok()), self.ts, self.te)
            };;;}
            else if ((150)['$===']($case)) {
            
            self.escape = self.source_buffer.$slice($rb_minus(p, 1)).$chr();
            if ($truthy(($truthy($b = $rb_ge(self.version, 27)) ? ($truthy($c = $range(0, 8, false)['$include?'](self.escape.$ord())) ? $c : $range(14, 31, false)['$include?'](self.escape.$ord())) : $b))) {
              self.$diagnostic("fatal", "invalid_escape")};;
            
            self.escape = self.$encode_escape(self.escape['$[]'](0).$ord()['$&'](159));;
            
            self.te = p;
            p = $rb_minus(p, 1);
            
            current_literal = self.$literal();
            escaped_char = self.source_buffer.$slice(self.escape_s).$chr();
            if ($truthy(current_literal['$munge_escape?'](escaped_char))) {
              if ($truthy(($truthy($b = current_literal['$regexp?']()) ? $$($nesting, 'REGEXP_META_CHARACTERS').$match(escaped_char) : $b))) {
                current_literal.$extend_string(self.$tok(), self.ts, self.te)
              } else {
                current_literal.$extend_string(escaped_char, self.ts, self.te)
              }
            } else if ($truthy(($truthy($b = current_literal['$squiggly_heredoc?']()) ? escaped_char['$==']("\n".$freeze()) : $b))) {
              current_literal.$extend_string(self.$tok(), self.ts, self.te)
            } else if ($truthy(($truthy($b = current_literal['$supports_line_continuation_via_slash?']()) ? escaped_char['$==']("\n".$freeze()) : $b))) {
              current_literal.$extend_string(self.$tok().$gsub("\\\n".$freeze(), "".$freeze()), self.ts, self.te)
            } else if ($truthy(current_literal['$regexp?']())) {
              current_literal.$extend_string(self.$tok().$gsub("\\\n".$freeze(), "".$freeze()), self.ts, self.te)
            } else {
              current_literal.$extend_string(($truthy($b = self.escape) ? $b : self.$tok()), self.ts, self.te)
            };;;}
            else if ((361)['$===']($case)) {
            
            self.escape = self.source_buffer.$slice($rb_minus(p, 1)).$chr();
            if ($truthy(($truthy($b = $rb_ge(self.version, 27)) ? ($truthy($c = $range(0, 8, false)['$include?'](self.escape.$ord())) ? $c : $range(14, 31, false)['$include?'](self.escape.$ord())) : $b))) {
              self.$diagnostic("fatal", "invalid_escape")};;
            
            self.escape = self.$encode_escape(self.escape['$[]'](0).$ord()['$&'](159));;
            
            self.te = p;
            p = $rb_minus(p, 1);
            
            value = ($truthy($b = self.escape) ? $b : self.$tok($rb_plus(self.ts, 1)));
            if ($truthy(self['$version?'](18))) {
              self.$emit("tINTEGER", value.$getbyte(0))
            } else {
              self.$emit("tCHARACTER", value)
            };
            self.cs = 781;
            
            p = $rb_plus(p, 1);
            _goto_level = _out;
            continue;;;;;}
            else if ((128)['$===']($case)) {
            
            self.escape = self.source_buffer.$slice($rb_minus(p, 1)).$chr();
            if ($truthy(($truthy($b = $rb_ge(self.version, 27)) ? ($truthy($c = $range(0, 8, false)['$include?'](self.escape.$ord())) ? $c : $range(14, 31, false)['$include?'](self.escape.$ord())) : $b))) {
              self.$diagnostic("fatal", "invalid_escape")};;
            
            self.escape = self.$encode_escape(self.escape['$[]'](0).$ord()['$|'](128));;
            
            self.te = p;
            p = $rb_minus(p, 1);
            
            current_literal = self.$literal();
            escaped_char = self.source_buffer.$slice(self.escape_s).$chr();
            if ($truthy(current_literal['$munge_escape?'](escaped_char))) {
              if ($truthy(($truthy($b = current_literal['$regexp?']()) ? $$($nesting, 'REGEXP_META_CHARACTERS').$match(escaped_char) : $b))) {
                current_literal.$extend_string(self.$tok(), self.ts, self.te)
              } else {
                current_literal.$extend_string(escaped_char, self.ts, self.te)
              }
            } else if ($truthy(($truthy($b = current_literal['$squiggly_heredoc?']()) ? escaped_char['$==']("\n".$freeze()) : $b))) {
              current_literal.$extend_string(self.$tok(), self.ts, self.te)
            } else if ($truthy(($truthy($b = current_literal['$supports_line_continuation_via_slash?']()) ? escaped_char['$==']("\n".$freeze()) : $b))) {
              current_literal.$extend_string(self.$tok().$gsub("\\\n".$freeze(), "".$freeze()), self.ts, self.te)
            } else if ($truthy(current_literal['$regexp?']())) {
              current_literal.$extend_string(self.$tok().$gsub("\\\n".$freeze(), "".$freeze()), self.ts, self.te)
            } else {
              current_literal.$extend_string(($truthy($b = self.escape) ? $b : self.$tok()), self.ts, self.te)
            };;;}
            else if ((156)['$===']($case)) {
            
            self.escape = self.source_buffer.$slice($rb_minus(p, 1)).$chr();
            if ($truthy(($truthy($b = $rb_ge(self.version, 27)) ? ($truthy($c = $range(0, 8, false)['$include?'](self.escape.$ord())) ? $c : $range(14, 31, false)['$include?'](self.escape.$ord())) : $b))) {
              self.$diagnostic("fatal", "invalid_escape")};;
            
            self.escape = self.$encode_escape(self.escape['$[]'](0).$ord()['$|'](128));;
            
            self.te = p;
            p = $rb_minus(p, 1);
            
            current_literal = self.$literal();
            escaped_char = self.source_buffer.$slice(self.escape_s).$chr();
            if ($truthy(current_literal['$munge_escape?'](escaped_char))) {
              if ($truthy(($truthy($b = current_literal['$regexp?']()) ? $$($nesting, 'REGEXP_META_CHARACTERS').$match(escaped_char) : $b))) {
                current_literal.$extend_string(self.$tok(), self.ts, self.te)
              } else {
                current_literal.$extend_string(escaped_char, self.ts, self.te)
              }
            } else if ($truthy(($truthy($b = current_literal['$squiggly_heredoc?']()) ? escaped_char['$==']("\n".$freeze()) : $b))) {
              current_literal.$extend_string(self.$tok(), self.ts, self.te)
            } else if ($truthy(($truthy($b = current_literal['$supports_line_continuation_via_slash?']()) ? escaped_char['$==']("\n".$freeze()) : $b))) {
              current_literal.$extend_string(self.$tok().$gsub("\\\n".$freeze(), "".$freeze()), self.ts, self.te)
            } else if ($truthy(current_literal['$regexp?']())) {
              current_literal.$extend_string(self.$tok().$gsub("\\\n".$freeze(), "".$freeze()), self.ts, self.te)
            } else {
              current_literal.$extend_string(($truthy($b = self.escape) ? $b : self.$tok()), self.ts, self.te)
            };;;}
            else if ((367)['$===']($case)) {
            
            self.escape = self.source_buffer.$slice($rb_minus(p, 1)).$chr();
            if ($truthy(($truthy($b = $rb_ge(self.version, 27)) ? ($truthy($c = $range(0, 8, false)['$include?'](self.escape.$ord())) ? $c : $range(14, 31, false)['$include?'](self.escape.$ord())) : $b))) {
              self.$diagnostic("fatal", "invalid_escape")};;
            
            self.escape = self.$encode_escape(self.escape['$[]'](0).$ord()['$|'](128));;
            
            self.te = p;
            p = $rb_minus(p, 1);
            
            value = ($truthy($b = self.escape) ? $b : self.$tok($rb_plus(self.ts, 1)));
            if ($truthy(self['$version?'](18))) {
              self.$emit("tINTEGER", value.$getbyte(0))
            } else {
              self.$emit("tCHARACTER", value)
            };
            self.cs = 781;
            
            p = $rb_plus(p, 1);
            _goto_level = _out;
            continue;;;;;}
            else if ((126)['$===']($case)) {
            
            self.escape = "\u007F";;
            
            self.escape = self.$encode_escape(self.escape['$[]'](0).$ord()['$|'](128));;
            
            self.te = p;
            p = $rb_minus(p, 1);
            
            current_literal = self.$literal();
            escaped_char = self.source_buffer.$slice(self.escape_s).$chr();
            if ($truthy(current_literal['$munge_escape?'](escaped_char))) {
              if ($truthy(($truthy($b = current_literal['$regexp?']()) ? $$($nesting, 'REGEXP_META_CHARACTERS').$match(escaped_char) : $b))) {
                current_literal.$extend_string(self.$tok(), self.ts, self.te)
              } else {
                current_literal.$extend_string(escaped_char, self.ts, self.te)
              }
            } else if ($truthy(($truthy($b = current_literal['$squiggly_heredoc?']()) ? escaped_char['$==']("\n".$freeze()) : $b))) {
              current_literal.$extend_string(self.$tok(), self.ts, self.te)
            } else if ($truthy(($truthy($b = current_literal['$supports_line_continuation_via_slash?']()) ? escaped_char['$==']("\n".$freeze()) : $b))) {
              current_literal.$extend_string(self.$tok().$gsub("\\\n".$freeze(), "".$freeze()), self.ts, self.te)
            } else if ($truthy(current_literal['$regexp?']())) {
              current_literal.$extend_string(self.$tok().$gsub("\\\n".$freeze(), "".$freeze()), self.ts, self.te)
            } else {
              current_literal.$extend_string(($truthy($b = self.escape) ? $b : self.$tok()), self.ts, self.te)
            };;;}
            else if ((154)['$===']($case)) {
            
            self.escape = "\u007F";;
            
            self.escape = self.$encode_escape(self.escape['$[]'](0).$ord()['$|'](128));;
            
            self.te = p;
            p = $rb_minus(p, 1);
            
            current_literal = self.$literal();
            escaped_char = self.source_buffer.$slice(self.escape_s).$chr();
            if ($truthy(current_literal['$munge_escape?'](escaped_char))) {
              if ($truthy(($truthy($b = current_literal['$regexp?']()) ? $$($nesting, 'REGEXP_META_CHARACTERS').$match(escaped_char) : $b))) {
                current_literal.$extend_string(self.$tok(), self.ts, self.te)
              } else {
                current_literal.$extend_string(escaped_char, self.ts, self.te)
              }
            } else if ($truthy(($truthy($b = current_literal['$squiggly_heredoc?']()) ? escaped_char['$==']("\n".$freeze()) : $b))) {
              current_literal.$extend_string(self.$tok(), self.ts, self.te)
            } else if ($truthy(($truthy($b = current_literal['$supports_line_continuation_via_slash?']()) ? escaped_char['$==']("\n".$freeze()) : $b))) {
              current_literal.$extend_string(self.$tok().$gsub("\\\n".$freeze(), "".$freeze()), self.ts, self.te)
            } else if ($truthy(current_literal['$regexp?']())) {
              current_literal.$extend_string(self.$tok().$gsub("\\\n".$freeze(), "".$freeze()), self.ts, self.te)
            } else {
              current_literal.$extend_string(($truthy($b = self.escape) ? $b : self.$tok()), self.ts, self.te)
            };;;}
            else if ((365)['$===']($case)) {
            
            self.escape = "\u007F";;
            
            self.escape = self.$encode_escape(self.escape['$[]'](0).$ord()['$|'](128));;
            
            self.te = p;
            p = $rb_minus(p, 1);
            
            value = ($truthy($b = self.escape) ? $b : self.$tok($rb_plus(self.ts, 1)));
            if ($truthy(self['$version?'](18))) {
              self.$emit("tINTEGER", value.$getbyte(0))
            } else {
              self.$emit("tCHARACTER", value)
            };
            self.cs = 781;
            
            p = $rb_plus(p, 1);
            _goto_level = _out;
            continue;;;;;}
            else if ((133)['$===']($case)) {
            
            self.$diagnostic("fatal", "invalid_unicode_escape", nil, self.$range($rb_minus(self.escape_s, 1), p));;
            
            self.$diagnostic("fatal", "unterminated_unicode", nil, self.$range($rb_minus(p, 1), p));;
            
            self.te = p;
            p = $rb_minus(p, 1);
            
            current_literal = self.$literal();
            escaped_char = self.source_buffer.$slice(self.escape_s).$chr();
            if ($truthy(current_literal['$munge_escape?'](escaped_char))) {
              if ($truthy(($truthy($b = current_literal['$regexp?']()) ? $$($nesting, 'REGEXP_META_CHARACTERS').$match(escaped_char) : $b))) {
                current_literal.$extend_string(self.$tok(), self.ts, self.te)
              } else {
                current_literal.$extend_string(escaped_char, self.ts, self.te)
              }
            } else if ($truthy(($truthy($b = current_literal['$squiggly_heredoc?']()) ? escaped_char['$==']("\n".$freeze()) : $b))) {
              current_literal.$extend_string(self.$tok(), self.ts, self.te)
            } else if ($truthy(($truthy($b = current_literal['$supports_line_continuation_via_slash?']()) ? escaped_char['$==']("\n".$freeze()) : $b))) {
              current_literal.$extend_string(self.$tok().$gsub("\\\n".$freeze(), "".$freeze()), self.ts, self.te)
            } else if ($truthy(current_literal['$regexp?']())) {
              current_literal.$extend_string(self.$tok().$gsub("\\\n".$freeze(), "".$freeze()), self.ts, self.te)
            } else {
              current_literal.$extend_string(($truthy($b = self.escape) ? $b : self.$tok()), self.ts, self.te)
            };;;}
            else if ((161)['$===']($case)) {
            
            self.$diagnostic("fatal", "invalid_unicode_escape", nil, self.$range($rb_minus(self.escape_s, 1), p));;
            
            self.$diagnostic("fatal", "unterminated_unicode", nil, self.$range($rb_minus(p, 1), p));;
            
            self.te = p;
            p = $rb_minus(p, 1);
            
            current_literal = self.$literal();
            escaped_char = self.source_buffer.$slice(self.escape_s).$chr();
            if ($truthy(current_literal['$munge_escape?'](escaped_char))) {
              if ($truthy(($truthy($b = current_literal['$regexp?']()) ? $$($nesting, 'REGEXP_META_CHARACTERS').$match(escaped_char) : $b))) {
                current_literal.$extend_string(self.$tok(), self.ts, self.te)
              } else {
                current_literal.$extend_string(escaped_char, self.ts, self.te)
              }
            } else if ($truthy(($truthy($b = current_literal['$squiggly_heredoc?']()) ? escaped_char['$==']("\n".$freeze()) : $b))) {
              current_literal.$extend_string(self.$tok(), self.ts, self.te)
            } else if ($truthy(($truthy($b = current_literal['$supports_line_continuation_via_slash?']()) ? escaped_char['$==']("\n".$freeze()) : $b))) {
              current_literal.$extend_string(self.$tok().$gsub("\\\n".$freeze(), "".$freeze()), self.ts, self.te)
            } else if ($truthy(current_literal['$regexp?']())) {
              current_literal.$extend_string(self.$tok().$gsub("\\\n".$freeze(), "".$freeze()), self.ts, self.te)
            } else {
              current_literal.$extend_string(($truthy($b = self.escape) ? $b : self.$tok()), self.ts, self.te)
            };;;}
            else if ((372)['$===']($case)) {
            
            self.$diagnostic("fatal", "invalid_unicode_escape", nil, self.$range($rb_minus(self.escape_s, 1), p));;
            
            self.$diagnostic("fatal", "unterminated_unicode", nil, self.$range($rb_minus(p, 1), p));;
            
            self.te = p;
            p = $rb_minus(p, 1);
            
            value = ($truthy($b = self.escape) ? $b : self.$tok($rb_plus(self.ts, 1)));
            if ($truthy(self['$version?'](18))) {
              self.$emit("tINTEGER", value.$getbyte(0))
            } else {
              self.$emit("tCHARACTER", value)
            };
            self.cs = 781;
            
            p = $rb_plus(p, 1);
            _goto_level = _out;
            continue;;;;;}
            else if ((116)['$===']($case)) {
            
            self.escape_s = p;
            self.escape = nil;;
            
            self.$diagnostic("fatal", "escape_eof", nil, self.$range($rb_minus(p, 1), p));;
            
            self.te = p;
            p = $rb_minus(p, 1);
            
            current_literal = self.$literal();
            escaped_char = self.source_buffer.$slice(self.escape_s).$chr();
            if ($truthy(current_literal['$munge_escape?'](escaped_char))) {
              if ($truthy(($truthy($b = current_literal['$regexp?']()) ? $$($nesting, 'REGEXP_META_CHARACTERS').$match(escaped_char) : $b))) {
                current_literal.$extend_string(self.$tok(), self.ts, self.te)
              } else {
                current_literal.$extend_string(escaped_char, self.ts, self.te)
              }
            } else if ($truthy(($truthy($b = current_literal['$squiggly_heredoc?']()) ? escaped_char['$==']("\n".$freeze()) : $b))) {
              current_literal.$extend_string(self.$tok(), self.ts, self.te)
            } else if ($truthy(($truthy($b = current_literal['$supports_line_continuation_via_slash?']()) ? escaped_char['$==']("\n".$freeze()) : $b))) {
              current_literal.$extend_string(self.$tok().$gsub("\\\n".$freeze(), "".$freeze()), self.ts, self.te)
            } else if ($truthy(current_literal['$regexp?']())) {
              current_literal.$extend_string(self.$tok().$gsub("\\\n".$freeze(), "".$freeze()), self.ts, self.te)
            } else {
              current_literal.$extend_string(($truthy($b = self.escape) ? $b : self.$tok()), self.ts, self.te)
            };;;}
            else if ((145)['$===']($case)) {
            
            self.escape_s = p;
            self.escape = nil;;
            
            self.$diagnostic("fatal", "escape_eof", nil, self.$range($rb_minus(p, 1), p));;
            
            self.te = p;
            p = $rb_minus(p, 1);
            
            current_literal = self.$literal();
            escaped_char = self.source_buffer.$slice(self.escape_s).$chr();
            if ($truthy(current_literal['$munge_escape?'](escaped_char))) {
              if ($truthy(($truthy($b = current_literal['$regexp?']()) ? $$($nesting, 'REGEXP_META_CHARACTERS').$match(escaped_char) : $b))) {
                current_literal.$extend_string(self.$tok(), self.ts, self.te)
              } else {
                current_literal.$extend_string(escaped_char, self.ts, self.te)
              }
            } else if ($truthy(($truthy($b = current_literal['$squiggly_heredoc?']()) ? escaped_char['$==']("\n".$freeze()) : $b))) {
              current_literal.$extend_string(self.$tok(), self.ts, self.te)
            } else if ($truthy(($truthy($b = current_literal['$supports_line_continuation_via_slash?']()) ? escaped_char['$==']("\n".$freeze()) : $b))) {
              current_literal.$extend_string(self.$tok().$gsub("\\\n".$freeze(), "".$freeze()), self.ts, self.te)
            } else if ($truthy(current_literal['$regexp?']())) {
              current_literal.$extend_string(self.$tok().$gsub("\\\n".$freeze(), "".$freeze()), self.ts, self.te)
            } else {
              current_literal.$extend_string(($truthy($b = self.escape) ? $b : self.$tok()), self.ts, self.te)
            };;;}
            else if ((356)['$===']($case)) {
            
            self.escape_s = p;
            self.escape = nil;;
            
            self.$diagnostic("fatal", "escape_eof", nil, self.$range($rb_minus(p, 1), p));;
            
            self.te = p;
            p = $rb_minus(p, 1);
            
            value = ($truthy($b = self.escape) ? $b : self.$tok($rb_plus(self.ts, 1)));
            if ($truthy(self['$version?'](18))) {
              self.$emit("tINTEGER", value.$getbyte(0))
            } else {
              self.$emit("tCHARACTER", value)
            };
            self.cs = 781;
            
            p = $rb_plus(p, 1);
            _goto_level = _out;
            continue;;;;;}
            else if ((61)['$===']($case)) {
            
            self.sharp_s = $rb_minus(p, 1);;
            
            self.$emit_comment(self.sharp_s, (function() {if (p['$=='](pe)) {
              return $rb_minus(p, 2)
            } else {
              return p
            }; return nil; })());;
            
            self.newline_s = p;;}
            else if ((215)['$===']($case)) {
            
            self.sharp_s = $rb_minus(p, 1);;
            
            self.$emit_comment(self.sharp_s, (function() {if (p['$=='](pe)) {
              return $rb_minus(p, 2)
            } else {
              return p
            }; return nil; })());;
            
            self.te = p;
            p = $rb_minus(p, 1);;}
            else if ((230)['$===']($case)) {
            
            self.sharp_s = $rb_minus(p, 1);;
            
            self.$emit_comment(self.sharp_s, (function() {if (p['$=='](pe)) {
              return $rb_minus(p, 2)
            } else {
              return p
            }; return nil; })());;
            
            self.te = p;
            p = $rb_minus(p, 1);;}
            else if ((242)['$===']($case)) {
            
            self.sharp_s = $rb_minus(p, 1);;
            
            self.$emit_comment(self.sharp_s, (function() {if (p['$=='](pe)) {
              return $rb_minus(p, 2)
            } else {
              return p
            }; return nil; })());;
            
            self.te = p;
            p = $rb_minus(p, 1);;}
            else if ((264)['$===']($case)) {
            
            self.sharp_s = $rb_minus(p, 1);;
            
            self.$emit_comment(self.sharp_s, (function() {if (p['$=='](pe)) {
              return $rb_minus(p, 2)
            } else {
              return p
            }; return nil; })());;
            
            self.te = p;
            p = $rb_minus(p, 1);
            
            
            self.cs = 781;
            _goto_level = _again;
            continue;;;;;}
            else if ((279)['$===']($case)) {
            
            self.sharp_s = $rb_minus(p, 1);;
            
            self.$emit_comment(self.sharp_s, (function() {if (p['$=='](pe)) {
              return $rb_minus(p, 2)
            } else {
              return p
            }; return nil; })());;
            
            self.te = p;
            p = $rb_minus(p, 1);;}
            else if ((291)['$===']($case)) {
            
            self.sharp_s = $rb_minus(p, 1);;
            
            self.$emit_comment(self.sharp_s, (function() {if (p['$=='](pe)) {
              return $rb_minus(p, 2)
            } else {
              return p
            }; return nil; })());;
            
            self.te = p;
            p = $rb_minus(p, 1);;}
            else if ((317)['$===']($case)) {
            
            self.sharp_s = $rb_minus(p, 1);;
            
            self.$emit_comment(self.sharp_s, (function() {if (p['$=='](pe)) {
              return $rb_minus(p, 2)
            } else {
              return p
            }; return nil; })());;
            
            self.te = p;
            p = $rb_minus(p, 1);;}
            else if ((390)['$===']($case)) {
            
            self.sharp_s = $rb_minus(p, 1);;
            
            self.$emit_comment(self.sharp_s, (function() {if (p['$=='](pe)) {
              return $rb_minus(p, 2)
            } else {
              return p
            }; return nil; })());;
            
            self.te = p;
            p = $rb_minus(p, 1);;}
            else if ((400)['$===']($case)) {
            
            self.sharp_s = $rb_minus(p, 1);;
            
            self.$emit_comment(self.sharp_s, (function() {if (p['$=='](pe)) {
              return $rb_minus(p, 2)
            } else {
              return p
            }; return nil; })());;
            
            self.te = p;
            p = $rb_minus(p, 1);;}
            else if ((421)['$===']($case)) {
            
            self.sharp_s = $rb_minus(p, 1);;
            
            self.$emit_comment(self.sharp_s, (function() {if (p['$=='](pe)) {
              return $rb_minus(p, 2)
            } else {
              return p
            }; return nil; })());;
            
            self.te = p;
            p = $rb_minus(p, 1);;}
            else if ((102)['$===']($case)) {
            
            self.sharp_s = $rb_minus(p, 1);;
            
            self.$emit_comment(self.sharp_s, (function() {if (p['$=='](pe)) {
              return $rb_minus(p, 2)
            } else {
              return p
            }; return nil; })());;
            
            self.te = p;
            p = $rb_minus(p, 1);;}
            else if ((473)['$===']($case)) {
            
            self.num_base = 10;
            self.num_digits_s = self.ts;;
            
            self.num_suffix_s = p;;
            
            self.num_xfrm = $send(self, 'lambda', [], ($$28 = function(chars){var self = $$28.$$s == null ? this : $$28.$$s;

            
              
              if (chars == null) {
                chars = nil;
              };
              return self.$emit("tINTEGER", chars);}, $$28.$$s = self, $$28.$$arity = 1, $$28));;}
            else if ((437)['$===']($case)) {
            
            self.num_base = 8;
            self.num_digits_s = self.ts;;
            
            self.num_suffix_s = p;;
            
            self.num_xfrm = $send(self, 'lambda', [], ($$29 = function(chars){var self = $$29.$$s == null ? this : $$29.$$s;

            
              
              if (chars == null) {
                chars = nil;
              };
              return self.$emit("tINTEGER", chars);}, $$29.$$s = self, $$29.$$arity = 1, $$29));;}
            else if ((452)['$===']($case)) {
            
            self.num_suffix_s = p;;
            
            self.num_xfrm = $send(self, 'lambda', [], ($$30 = function(chars){var self = $$30.$$s == null ? this : $$30.$$s;

            
              
              if (chars == null) {
                chars = nil;
              };
              return self.$emit("tINTEGER", chars);}, $$30.$$s = self, $$30.$$arity = 1, $$30));;
            
            self.te = p;
            p = $rb_minus(p, 1);
            
            digits = self.$tok(self.num_digits_s, self.num_suffix_s);
            if ($truthy(digits['$end_with?']("_".$freeze()))) {
              self.$diagnostic("error", "trailing_in_number", $hash2(["character"], {"character": "_".$freeze()}), self.$range($rb_minus(self.te, 1), self.te))
            } else if ($truthy(($truthy($b = ($truthy($c = digits['$empty?']()) ? self.num_base['$=='](8) : $c)) ? self['$version?'](18) : $b))) {
              digits = "0".$freeze()
            } else if ($truthy(digits['$empty?']())) {
              self.$diagnostic("error", "empty_numeric")
            } else if ($truthy((($b = self.num_base['$=='](8)) ? (invalid_idx = digits.$index(/[89]/)) : self.num_base['$=='](8)))) {
              
              invalid_s = $rb_plus(self.num_digits_s, invalid_idx);
              self.$diagnostic("error", "invalid_octal", nil, self.$range(invalid_s, $rb_plus(invalid_s, 1)));};
            if ($truthy(self['$version?'](18, 19, 20))) {
              
              self.$emit("tINTEGER", digits.$to_i(self.num_base), self.ts, self.num_suffix_s);
              p = $rb_minus(self.num_suffix_s, 1);
            } else {
              self.num_xfrm.$call(digits.$to_i(self.num_base))
            };
            
            p = $rb_plus(p, 1);
            _goto_level = _out;
            continue;;;;;}
            else if ((445)['$===']($case)) {
            
            self.num_suffix_s = p;;
            
            self.num_xfrm = $send(self, 'lambda', [], ($$31 = function(chars){var self = $$31.$$s == null ? this : $$31.$$s;

            
              
              if (chars == null) {
                chars = nil;
              };
              return self.$emit("tFLOAT", self.$Float(chars));}, $$31.$$s = self, $$31.$$arity = 1, $$31));;
            
            self.te = p;
            p = $rb_minus(p, 1);
            
            digits = self.$tok(self.ts, self.num_suffix_s);
            if ($truthy(self['$version?'](18, 19, 20))) {
              
              self.$emit("tFLOAT", self.$Float(digits), self.ts, self.num_suffix_s);
              p = $rb_minus(self.num_suffix_s, 1);
            } else {
              self.num_xfrm.$call(digits)
            };
            
            p = $rb_plus(p, 1);
            _goto_level = _out;
            continue;;;;;}
            else if ((441)['$===']($case)) {
            
            self.num_suffix_s = p;;
            
            self.num_xfrm = $send(self, 'lambda', [], ($$32 = function(chars){var self = $$32.$$s == null ? this : $$32.$$s;

            
              
              if (chars == null) {
                chars = nil;
              };
              return self.$emit("tFLOAT", self.$Float(chars));}, $$32.$$s = self, $$32.$$arity = 1, $$32));;
            
            self.te = p;
            p = $rb_minus(p, 1);
            
            digits = self.$tok(self.ts, self.num_suffix_s);
            if ($truthy(self['$version?'](18, 19, 20))) {
              
              self.$emit("tFLOAT", self.$Float(digits), self.ts, self.num_suffix_s);
              p = $rb_minus(self.num_suffix_s, 1);
            } else {
              self.num_xfrm.$call(digits)
            };
            
            p = $rb_plus(p, 1);
            _goto_level = _out;
            continue;;;;;}
            else if ((270)['$===']($case)) {
            
            self.te = $rb_plus(p, 1);;
            
            self.newline_s = p;;
            
            self.act = 78;;}
            else if ((35)['$===']($case)) {
            
            self.te = $rb_plus(p, 1);;
            
            if ($truthy(self.herebody_s)) {
              
              p = self.herebody_s;
              self.herebody_s = nil;};;
            
            self.act = 77;;}
            else if ((46)['$===']($case)) {
            
            self.te = $rb_plus(p, 1);;
            
            if ($truthy(self.herebody_s)) {
              
              p = self.herebody_s;
              self.herebody_s = nil;};;
            
            self.act = 85;;}
            else if ((94)['$===']($case)) {
            
            self.te = $rb_plus(p, 1);;
            
            if ($truthy(self.herebody_s)) {
              
              p = self.herebody_s;
              self.herebody_s = nil;};;
            
            self.act = 180;;}
            else if ((65)['$===']($case)) {
            
            self.te = $rb_plus(p, 1);;
            
            self.$emit_comment(self.sharp_s, (function() {if (p['$=='](pe)) {
              return $rb_minus(p, 2)
            } else {
              return p
            }; return nil; })());;
            
            self.act = 98;;}
            else if ((84)['$===']($case)) {
            
            self.te = $rb_plus(p, 1);;
            
            self.$emit_comment(self.sharp_s, (function() {if (p['$=='](pe)) {
              return $rb_minus(p, 2)
            } else {
              return p
            }; return nil; })());;
            
            self.act = 146;;}
            else if ((93)['$===']($case)) {
            
            self.te = $rb_plus(p, 1);;
            
            self.$emit_comment(self.sharp_s, (function() {if (p['$=='](pe)) {
              return $rb_minus(p, 2)
            } else {
              return p
            }; return nil; })());;
            
            self.act = 180;;}
            else if ((37)['$===']($case)) {
            
            self.te = $rb_plus(p, 1);;
            
            tm = p;;
            
            self.act = 72;;}
            else if ((382)['$===']($case)) {
            
            self.te = $rb_plus(p, 1);;
            
            tm = p;;
            
            self.act = 126;;}
            else if ((381)['$===']($case)) {
            
            self.te = $rb_plus(p, 1);;
            
            tm = p;;
            
            self.act = 127;;}
            else if ((474)['$===']($case)) {
            
            self.te = $rb_plus(p, 1);;
            
            self.num_base = 10;
            self.num_digits_s = self.ts;;
            
            self.act = 153;;}
            else if ((127)['$===']($case)) {
            
            codepoint = self.source_pts['$[]']($rb_minus(p, 1));
            if ($truthy((self.escape = $$($nesting, 'ESCAPES')['$[]'](codepoint))['$nil?']())) {
              self.escape = self.$encode_escape(self.source_buffer.$slice($rb_minus(p, 1)))};;
            
            self.escape = self.$encode_escape(self.escape['$[]'](0).$ord()['$&'](159));;
            
            self.escape = self.$encode_escape(self.escape['$[]'](0).$ord()['$|'](128));;
            
            self.te = p;
            p = $rb_minus(p, 1);
            
            current_literal = self.$literal();
            escaped_char = self.source_buffer.$slice(self.escape_s).$chr();
            if ($truthy(current_literal['$munge_escape?'](escaped_char))) {
              if ($truthy(($truthy($b = current_literal['$regexp?']()) ? $$($nesting, 'REGEXP_META_CHARACTERS').$match(escaped_char) : $b))) {
                current_literal.$extend_string(self.$tok(), self.ts, self.te)
              } else {
                current_literal.$extend_string(escaped_char, self.ts, self.te)
              }
            } else if ($truthy(($truthy($b = current_literal['$squiggly_heredoc?']()) ? escaped_char['$==']("\n".$freeze()) : $b))) {
              current_literal.$extend_string(self.$tok(), self.ts, self.te)
            } else if ($truthy(($truthy($b = current_literal['$supports_line_continuation_via_slash?']()) ? escaped_char['$==']("\n".$freeze()) : $b))) {
              current_literal.$extend_string(self.$tok().$gsub("\\\n".$freeze(), "".$freeze()), self.ts, self.te)
            } else if ($truthy(current_literal['$regexp?']())) {
              current_literal.$extend_string(self.$tok().$gsub("\\\n".$freeze(), "".$freeze()), self.ts, self.te)
            } else {
              current_literal.$extend_string(($truthy($b = self.escape) ? $b : self.$tok()), self.ts, self.te)
            };;;}
            else if ((155)['$===']($case)) {
            
            codepoint = self.source_pts['$[]']($rb_minus(p, 1));
            if ($truthy((self.escape = $$($nesting, 'ESCAPES')['$[]'](codepoint))['$nil?']())) {
              self.escape = self.$encode_escape(self.source_buffer.$slice($rb_minus(p, 1)))};;
            
            self.escape = self.$encode_escape(self.escape['$[]'](0).$ord()['$&'](159));;
            
            self.escape = self.$encode_escape(self.escape['$[]'](0).$ord()['$|'](128));;
            
            self.te = p;
            p = $rb_minus(p, 1);
            
            current_literal = self.$literal();
            escaped_char = self.source_buffer.$slice(self.escape_s).$chr();
            if ($truthy(current_literal['$munge_escape?'](escaped_char))) {
              if ($truthy(($truthy($b = current_literal['$regexp?']()) ? $$($nesting, 'REGEXP_META_CHARACTERS').$match(escaped_char) : $b))) {
                current_literal.$extend_string(self.$tok(), self.ts, self.te)
              } else {
                current_literal.$extend_string(escaped_char, self.ts, self.te)
              }
            } else if ($truthy(($truthy($b = current_literal['$squiggly_heredoc?']()) ? escaped_char['$==']("\n".$freeze()) : $b))) {
              current_literal.$extend_string(self.$tok(), self.ts, self.te)
            } else if ($truthy(($truthy($b = current_literal['$supports_line_continuation_via_slash?']()) ? escaped_char['$==']("\n".$freeze()) : $b))) {
              current_literal.$extend_string(self.$tok().$gsub("\\\n".$freeze(), "".$freeze()), self.ts, self.te)
            } else if ($truthy(current_literal['$regexp?']())) {
              current_literal.$extend_string(self.$tok().$gsub("\\\n".$freeze(), "".$freeze()), self.ts, self.te)
            } else {
              current_literal.$extend_string(($truthy($b = self.escape) ? $b : self.$tok()), self.ts, self.te)
            };;;}
            else if ((366)['$===']($case)) {
            
            codepoint = self.source_pts['$[]']($rb_minus(p, 1));
            if ($truthy((self.escape = $$($nesting, 'ESCAPES')['$[]'](codepoint))['$nil?']())) {
              self.escape = self.$encode_escape(self.source_buffer.$slice($rb_minus(p, 1)))};;
            
            self.escape = self.$encode_escape(self.escape['$[]'](0).$ord()['$&'](159));;
            
            self.escape = self.$encode_escape(self.escape['$[]'](0).$ord()['$|'](128));;
            
            self.te = p;
            p = $rb_minus(p, 1);
            
            value = ($truthy($b = self.escape) ? $b : self.$tok($rb_plus(self.ts, 1)));
            if ($truthy(self['$version?'](18))) {
              self.$emit("tINTEGER", value.$getbyte(0))
            } else {
              self.$emit("tCHARACTER", value)
            };
            self.cs = 781;
            
            p = $rb_plus(p, 1);
            _goto_level = _out;
            continue;;;;;}
            else if ((125)['$===']($case)) {
            
            self.escape = self.source_buffer.$slice($rb_minus(p, 1)).$chr();
            if ($truthy(($truthy($b = $rb_ge(self.version, 27)) ? ($truthy($c = $range(0, 8, false)['$include?'](self.escape.$ord())) ? $c : $range(14, 31, false)['$include?'](self.escape.$ord())) : $b))) {
              self.$diagnostic("fatal", "invalid_escape")};;
            
            self.escape = self.$encode_escape(self.escape['$[]'](0).$ord()['$&'](159));;
            
            self.escape = self.$encode_escape(self.escape['$[]'](0).$ord()['$|'](128));;
            
            self.te = p;
            p = $rb_minus(p, 1);
            
            current_literal = self.$literal();
            escaped_char = self.source_buffer.$slice(self.escape_s).$chr();
            if ($truthy(current_literal['$munge_escape?'](escaped_char))) {
              if ($truthy(($truthy($b = current_literal['$regexp?']()) ? $$($nesting, 'REGEXP_META_CHARACTERS').$match(escaped_char) : $b))) {
                current_literal.$extend_string(self.$tok(), self.ts, self.te)
              } else {
                current_literal.$extend_string(escaped_char, self.ts, self.te)
              }
            } else if ($truthy(($truthy($b = current_literal['$squiggly_heredoc?']()) ? escaped_char['$==']("\n".$freeze()) : $b))) {
              current_literal.$extend_string(self.$tok(), self.ts, self.te)
            } else if ($truthy(($truthy($b = current_literal['$supports_line_continuation_via_slash?']()) ? escaped_char['$==']("\n".$freeze()) : $b))) {
              current_literal.$extend_string(self.$tok().$gsub("\\\n".$freeze(), "".$freeze()), self.ts, self.te)
            } else if ($truthy(current_literal['$regexp?']())) {
              current_literal.$extend_string(self.$tok().$gsub("\\\n".$freeze(), "".$freeze()), self.ts, self.te)
            } else {
              current_literal.$extend_string(($truthy($b = self.escape) ? $b : self.$tok()), self.ts, self.te)
            };;;}
            else if ((153)['$===']($case)) {
            
            self.escape = self.source_buffer.$slice($rb_minus(p, 1)).$chr();
            if ($truthy(($truthy($b = $rb_ge(self.version, 27)) ? ($truthy($c = $range(0, 8, false)['$include?'](self.escape.$ord())) ? $c : $range(14, 31, false)['$include?'](self.escape.$ord())) : $b))) {
              self.$diagnostic("fatal", "invalid_escape")};;
            
            self.escape = self.$encode_escape(self.escape['$[]'](0).$ord()['$&'](159));;
            
            self.escape = self.$encode_escape(self.escape['$[]'](0).$ord()['$|'](128));;
            
            self.te = p;
            p = $rb_minus(p, 1);
            
            current_literal = self.$literal();
            escaped_char = self.source_buffer.$slice(self.escape_s).$chr();
            if ($truthy(current_literal['$munge_escape?'](escaped_char))) {
              if ($truthy(($truthy($b = current_literal['$regexp?']()) ? $$($nesting, 'REGEXP_META_CHARACTERS').$match(escaped_char) : $b))) {
                current_literal.$extend_string(self.$tok(), self.ts, self.te)
              } else {
                current_literal.$extend_string(escaped_char, self.ts, self.te)
              }
            } else if ($truthy(($truthy($b = current_literal['$squiggly_heredoc?']()) ? escaped_char['$==']("\n".$freeze()) : $b))) {
              current_literal.$extend_string(self.$tok(), self.ts, self.te)
            } else if ($truthy(($truthy($b = current_literal['$supports_line_continuation_via_slash?']()) ? escaped_char['$==']("\n".$freeze()) : $b))) {
              current_literal.$extend_string(self.$tok().$gsub("\\\n".$freeze(), "".$freeze()), self.ts, self.te)
            } else if ($truthy(current_literal['$regexp?']())) {
              current_literal.$extend_string(self.$tok().$gsub("\\\n".$freeze(), "".$freeze()), self.ts, self.te)
            } else {
              current_literal.$extend_string(($truthy($b = self.escape) ? $b : self.$tok()), self.ts, self.te)
            };;;}
            else if ((364)['$===']($case)) {
            
            self.escape = self.source_buffer.$slice($rb_minus(p, 1)).$chr();
            if ($truthy(($truthy($b = $rb_ge(self.version, 27)) ? ($truthy($c = $range(0, 8, false)['$include?'](self.escape.$ord())) ? $c : $range(14, 31, false)['$include?'](self.escape.$ord())) : $b))) {
              self.$diagnostic("fatal", "invalid_escape")};;
            
            self.escape = self.$encode_escape(self.escape['$[]'](0).$ord()['$&'](159));;
            
            self.escape = self.$encode_escape(self.escape['$[]'](0).$ord()['$|'](128));;
            
            self.te = p;
            p = $rb_minus(p, 1);
            
            value = ($truthy($b = self.escape) ? $b : self.$tok($rb_plus(self.ts, 1)));
            if ($truthy(self['$version?'](18))) {
              self.$emit("tINTEGER", value.$getbyte(0))
            } else {
              self.$emit("tCHARACTER", value)
            };
            self.cs = 781;
            
            p = $rb_plus(p, 1);
            _goto_level = _out;
            continue;;;;;}
            else if ((469)['$===']($case)) {
            
            self.num_base = 16;
            self.num_digits_s = p;;
            
            self.num_suffix_s = p;;
            
            self.num_xfrm = $send(self, 'lambda', [], ($$33 = function(chars){var self = $$33.$$s == null ? this : $$33.$$s;

            
              
              if (chars == null) {
                chars = nil;
              };
              return self.$emit("tINTEGER", chars);}, $$33.$$s = self, $$33.$$arity = 1, $$33));;
            
            self.te = p;
            p = $rb_minus(p, 1);
            
            digits = self.$tok(self.num_digits_s, self.num_suffix_s);
            if ($truthy(digits['$end_with?']("_".$freeze()))) {
              self.$diagnostic("error", "trailing_in_number", $hash2(["character"], {"character": "_".$freeze()}), self.$range($rb_minus(self.te, 1), self.te))
            } else if ($truthy(($truthy($b = ($truthy($c = digits['$empty?']()) ? self.num_base['$=='](8) : $c)) ? self['$version?'](18) : $b))) {
              digits = "0".$freeze()
            } else if ($truthy(digits['$empty?']())) {
              self.$diagnostic("error", "empty_numeric")
            } else if ($truthy((($b = self.num_base['$=='](8)) ? (invalid_idx = digits.$index(/[89]/)) : self.num_base['$=='](8)))) {
              
              invalid_s = $rb_plus(self.num_digits_s, invalid_idx);
              self.$diagnostic("error", "invalid_octal", nil, self.$range(invalid_s, $rb_plus(invalid_s, 1)));};
            if ($truthy(self['$version?'](18, 19, 20))) {
              
              self.$emit("tINTEGER", digits.$to_i(self.num_base), self.ts, self.num_suffix_s);
              p = $rb_minus(self.num_suffix_s, 1);
            } else {
              self.num_xfrm.$call(digits.$to_i(self.num_base))
            };
            
            p = $rb_plus(p, 1);
            _goto_level = _out;
            continue;;;;;}
            else if ((463)['$===']($case)) {
            
            self.num_base = 10;
            self.num_digits_s = p;;
            
            self.num_suffix_s = p;;
            
            self.num_xfrm = $send(self, 'lambda', [], ($$34 = function(chars){var self = $$34.$$s == null ? this : $$34.$$s;

            
              
              if (chars == null) {
                chars = nil;
              };
              return self.$emit("tINTEGER", chars);}, $$34.$$s = self, $$34.$$arity = 1, $$34));;
            
            self.te = p;
            p = $rb_minus(p, 1);
            
            digits = self.$tok(self.num_digits_s, self.num_suffix_s);
            if ($truthy(digits['$end_with?']("_".$freeze()))) {
              self.$diagnostic("error", "trailing_in_number", $hash2(["character"], {"character": "_".$freeze()}), self.$range($rb_minus(self.te, 1), self.te))
            } else if ($truthy(($truthy($b = ($truthy($c = digits['$empty?']()) ? self.num_base['$=='](8) : $c)) ? self['$version?'](18) : $b))) {
              digits = "0".$freeze()
            } else if ($truthy(digits['$empty?']())) {
              self.$diagnostic("error", "empty_numeric")
            } else if ($truthy((($b = self.num_base['$=='](8)) ? (invalid_idx = digits.$index(/[89]/)) : self.num_base['$=='](8)))) {
              
              invalid_s = $rb_plus(self.num_digits_s, invalid_idx);
              self.$diagnostic("error", "invalid_octal", nil, self.$range(invalid_s, $rb_plus(invalid_s, 1)));};
            if ($truthy(self['$version?'](18, 19, 20))) {
              
              self.$emit("tINTEGER", digits.$to_i(self.num_base), self.ts, self.num_suffix_s);
              p = $rb_minus(self.num_suffix_s, 1);
            } else {
              self.num_xfrm.$call(digits.$to_i(self.num_base))
            };
            
            p = $rb_plus(p, 1);
            _goto_level = _out;
            continue;;;;;}
            else if ((466)['$===']($case)) {
            
            self.num_base = 8;
            self.num_digits_s = p;;
            
            self.num_suffix_s = p;;
            
            self.num_xfrm = $send(self, 'lambda', [], ($$35 = function(chars){var self = $$35.$$s == null ? this : $$35.$$s;

            
              
              if (chars == null) {
                chars = nil;
              };
              return self.$emit("tINTEGER", chars);}, $$35.$$s = self, $$35.$$arity = 1, $$35));;
            
            self.te = p;
            p = $rb_minus(p, 1);
            
            digits = self.$tok(self.num_digits_s, self.num_suffix_s);
            if ($truthy(digits['$end_with?']("_".$freeze()))) {
              self.$diagnostic("error", "trailing_in_number", $hash2(["character"], {"character": "_".$freeze()}), self.$range($rb_minus(self.te, 1), self.te))
            } else if ($truthy(($truthy($b = ($truthy($c = digits['$empty?']()) ? self.num_base['$=='](8) : $c)) ? self['$version?'](18) : $b))) {
              digits = "0".$freeze()
            } else if ($truthy(digits['$empty?']())) {
              self.$diagnostic("error", "empty_numeric")
            } else if ($truthy((($b = self.num_base['$=='](8)) ? (invalid_idx = digits.$index(/[89]/)) : self.num_base['$=='](8)))) {
              
              invalid_s = $rb_plus(self.num_digits_s, invalid_idx);
              self.$diagnostic("error", "invalid_octal", nil, self.$range(invalid_s, $rb_plus(invalid_s, 1)));};
            if ($truthy(self['$version?'](18, 19, 20))) {
              
              self.$emit("tINTEGER", digits.$to_i(self.num_base), self.ts, self.num_suffix_s);
              p = $rb_minus(self.num_suffix_s, 1);
            } else {
              self.num_xfrm.$call(digits.$to_i(self.num_base))
            };
            
            p = $rb_plus(p, 1);
            _goto_level = _out;
            continue;;;;;}
            else if ((460)['$===']($case)) {
            
            self.num_base = 2;
            self.num_digits_s = p;;
            
            self.num_suffix_s = p;;
            
            self.num_xfrm = $send(self, 'lambda', [], ($$36 = function(chars){var self = $$36.$$s == null ? this : $$36.$$s;

            
              
              if (chars == null) {
                chars = nil;
              };
              return self.$emit("tINTEGER", chars);}, $$36.$$s = self, $$36.$$arity = 1, $$36));;
            
            self.te = p;
            p = $rb_minus(p, 1);
            
            digits = self.$tok(self.num_digits_s, self.num_suffix_s);
            if ($truthy(digits['$end_with?']("_".$freeze()))) {
              self.$diagnostic("error", "trailing_in_number", $hash2(["character"], {"character": "_".$freeze()}), self.$range($rb_minus(self.te, 1), self.te))
            } else if ($truthy(($truthy($b = ($truthy($c = digits['$empty?']()) ? self.num_base['$=='](8) : $c)) ? self['$version?'](18) : $b))) {
              digits = "0".$freeze()
            } else if ($truthy(digits['$empty?']())) {
              self.$diagnostic("error", "empty_numeric")
            } else if ($truthy((($b = self.num_base['$=='](8)) ? (invalid_idx = digits.$index(/[89]/)) : self.num_base['$=='](8)))) {
              
              invalid_s = $rb_plus(self.num_digits_s, invalid_idx);
              self.$diagnostic("error", "invalid_octal", nil, self.$range(invalid_s, $rb_plus(invalid_s, 1)));};
            if ($truthy(self['$version?'](18, 19, 20))) {
              
              self.$emit("tINTEGER", digits.$to_i(self.num_base), self.ts, self.num_suffix_s);
              p = $rb_minus(self.num_suffix_s, 1);
            } else {
              self.num_xfrm.$call(digits.$to_i(self.num_base))
            };
            
            p = $rb_plus(p, 1);
            _goto_level = _out;
            continue;;;;;}
            else if ((472)['$===']($case)) {
            
            self.num_base = 10;
            self.num_digits_s = self.ts;;
            
            self.num_suffix_s = p;;
            
            self.num_xfrm = $send(self, 'lambda', [], ($$37 = function(chars){var self = $$37.$$s == null ? this : $$37.$$s;

            
              
              if (chars == null) {
                chars = nil;
              };
              return self.$emit("tINTEGER", chars);}, $$37.$$s = self, $$37.$$arity = 1, $$37));;
            
            self.te = p;
            p = $rb_minus(p, 1);
            
            digits = self.$tok(self.num_digits_s, self.num_suffix_s);
            if ($truthy(digits['$end_with?']("_".$freeze()))) {
              self.$diagnostic("error", "trailing_in_number", $hash2(["character"], {"character": "_".$freeze()}), self.$range($rb_minus(self.te, 1), self.te))
            } else if ($truthy(($truthy($b = ($truthy($c = digits['$empty?']()) ? self.num_base['$=='](8) : $c)) ? self['$version?'](18) : $b))) {
              digits = "0".$freeze()
            } else if ($truthy(digits['$empty?']())) {
              self.$diagnostic("error", "empty_numeric")
            } else if ($truthy((($b = self.num_base['$=='](8)) ? (invalid_idx = digits.$index(/[89]/)) : self.num_base['$=='](8)))) {
              
              invalid_s = $rb_plus(self.num_digits_s, invalid_idx);
              self.$diagnostic("error", "invalid_octal", nil, self.$range(invalid_s, $rb_plus(invalid_s, 1)));};
            if ($truthy(self['$version?'](18, 19, 20))) {
              
              self.$emit("tINTEGER", digits.$to_i(self.num_base), self.ts, self.num_suffix_s);
              p = $rb_minus(self.num_suffix_s, 1);
            } else {
              self.num_xfrm.$call(digits.$to_i(self.num_base))
            };
            
            p = $rb_plus(p, 1);
            _goto_level = _out;
            continue;;;;;}
            else if ((436)['$===']($case)) {
            
            self.num_base = 8;
            self.num_digits_s = self.ts;;
            
            self.num_suffix_s = p;;
            
            self.num_xfrm = $send(self, 'lambda', [], ($$38 = function(chars){var self = $$38.$$s == null ? this : $$38.$$s;

            
              
              if (chars == null) {
                chars = nil;
              };
              return self.$emit("tINTEGER", chars);}, $$38.$$s = self, $$38.$$arity = 1, $$38));;
            
            self.te = p;
            p = $rb_minus(p, 1);
            
            digits = self.$tok(self.num_digits_s, self.num_suffix_s);
            if ($truthy(digits['$end_with?']("_".$freeze()))) {
              self.$diagnostic("error", "trailing_in_number", $hash2(["character"], {"character": "_".$freeze()}), self.$range($rb_minus(self.te, 1), self.te))
            } else if ($truthy(($truthy($b = ($truthy($c = digits['$empty?']()) ? self.num_base['$=='](8) : $c)) ? self['$version?'](18) : $b))) {
              digits = "0".$freeze()
            } else if ($truthy(digits['$empty?']())) {
              self.$diagnostic("error", "empty_numeric")
            } else if ($truthy((($b = self.num_base['$=='](8)) ? (invalid_idx = digits.$index(/[89]/)) : self.num_base['$=='](8)))) {
              
              invalid_s = $rb_plus(self.num_digits_s, invalid_idx);
              self.$diagnostic("error", "invalid_octal", nil, self.$range(invalid_s, $rb_plus(invalid_s, 1)));};
            if ($truthy(self['$version?'](18, 19, 20))) {
              
              self.$emit("tINTEGER", digits.$to_i(self.num_base), self.ts, self.num_suffix_s);
              p = $rb_minus(self.num_suffix_s, 1);
            } else {
              self.num_xfrm.$call(digits.$to_i(self.num_base))
            };
            
            p = $rb_plus(p, 1);
            _goto_level = _out;
            continue;;;;;}
            else if ((31)['$===']($case)) {
            
            self.te = $rb_plus(p, 1);;
            
            if ($truthy(self.herebody_s)) {
              
              p = self.herebody_s;
              self.herebody_s = nil;};;
            
            tm = p;;
            
            self.act = 72;;}
            else if ((62)['$===']($case)) {
            
            self.te = $rb_plus(p, 1);;
            
            self.sharp_s = $rb_minus(p, 1);;
            
            self.$emit_comment(self.sharp_s, (function() {if (p['$=='](pe)) {
              return $rb_minus(p, 2)
            } else {
              return p
            }; return nil; })());;
            
            self.act = 98;;}
            else if ((92)['$===']($case)) {
            
            self.te = $rb_plus(p, 1);;
            
            self.sharp_s = $rb_minus(p, 1);;
            
            self.$emit_comment(self.sharp_s, (function() {if (p['$=='](pe)) {
              return $rb_minus(p, 2)
            } else {
              return p
            }; return nil; })());;
            
            self.act = 180;;}
            else if ((479)['$===']($case)) {
            
            self.te = $rb_plus(p, 1);;
            
            self.num_suffix_s = p;;
            
            self.num_xfrm = $send(self, 'lambda', [], ($$39 = function(chars){var self = $$39.$$s == null ? this : $$39.$$s;

            
              
              if (chars == null) {
                chars = nil;
              };
              return self.$emit("tINTEGER", chars);}, $$39.$$s = self, $$39.$$arity = 1, $$39));;
            
            self.act = 155;;}
            else if ((475)['$===']($case)) {
            
            self.te = $rb_plus(p, 1);;
            
            self.num_base = 10;
            self.num_digits_s = self.ts;;
            
            self.num_suffix_s = p;;
            
            self.num_xfrm = $send(self, 'lambda', [], ($$40 = function(chars){var self = $$40.$$s == null ? this : $$40.$$s;

            
              
              if (chars == null) {
                chars = nil;
              };
              return self.$emit("tINTEGER", chars);}, $$40.$$s = self, $$40.$$arity = 1, $$40));;
            
            self.act = 155;;}
            else if ((439)['$===']($case)) {
            
            self.te = $rb_plus(p, 1);;
            
            self.num_base = 8;
            self.num_digits_s = self.ts;;
            
            self.num_suffix_s = p;;
            
            self.num_xfrm = $send(self, 'lambda', [], ($$41 = function(chars){var self = $$41.$$s == null ? this : $$41.$$s;

            
              
              if (chars == null) {
                chars = nil;
              };
              return self.$emit("tINTEGER", chars);}, $$41.$$s = self, $$41.$$arity = 1, $$41));;
            
            self.act = 155;;}};};
        if ($truthy($rb_le(_goto_level, _again))) {
          
          $case = _lex_to_state_actions['$[]'](self.cs);
          if ((96)['$===']($case)) {
          self.ts = nil;};
          if (self.cs['$=='](0)) {
            
            _goto_level = _out;
            continue;;};
          p = $rb_plus(p, 1);
          if ($truthy(p['$!='](pe))) {
            
            _goto_level = _resume;
            continue;;};};
        if ($truthy($rb_le(_goto_level, _test_eof))) {
          if (p['$=='](eof)) {
            if ($truthy($rb_gt(_lex_eof_trans['$[]'](self.cs), 0))) {
              
              _trans = $rb_minus(_lex_eof_trans['$[]'](self.cs), 1);
              _goto_level = _eof_trans;
              continue;;}}};
        if ($truthy($rb_le(_goto_level, _out))) {
          break;};
      };;
      if ($truthy(false)) {
        testEof};
      self.p = p;
      if ($truthy(self.token_queue['$any?']())) {
        return self.token_queue.$shift()
      } else if (self.cs['$=='](klass.$lex_error())) {
        return [false, ["$error".$freeze(), self.$range($rb_minus(p, 1), p)]]
      } else {
        
        eof = self.source_pts.$size();
        return [false, ["$eof".$freeze(), self.$range(eof, eof)]];
      };
    }, $Lexer_advance$12.$$arity = 0);
    self.$protected();
    
    Opal.def(self, '$eof_codepoint?', $Lexer_eof_codepoint$ques$42 = function(point) {
      var self = this;

      return [4, 26, 0]['$include?'](point)
    }, $Lexer_eof_codepoint$ques$42.$$arity = 1);
    
    Opal.def(self, '$version?', $Lexer_version$ques$43 = function($a) {
      var $post_args, versions, self = this;

      
      
      $post_args = Opal.slice.call(arguments, 0, arguments.length);
      
      versions = $post_args;;
      return versions['$include?'](self.version);
    }, $Lexer_version$ques$43.$$arity = -1);
    
    Opal.def(self, '$stack_pop', $Lexer_stack_pop$44 = function $$stack_pop() {
      var self = this;

      
      self.top = $rb_minus(self.top, 1);
      return self.stack['$[]'](self.top);
    }, $Lexer_stack_pop$44.$$arity = 0);
    
    Opal.def(self, '$encode_escape', $Lexer_encode_escape$45 = function $$encode_escape(ord) {
      var self = this;

      return ord.$chr().$force_encoding(self.source_buffer.$source().$encoding())
    }, $Lexer_encode_escape$45.$$arity = 1);
    
    Opal.def(self, '$tok', $Lexer_tok$46 = function $$tok(s, e) {
      var self = this;

      
      
      if (s == null) {
        s = self.ts;
      };
      
      if (e == null) {
        e = self.te;
      };
      return self.source_buffer.$slice(Opal.Range.$new(s,e, true));
    }, $Lexer_tok$46.$$arity = -1);
    
    Opal.def(self, '$range', $Lexer_range$47 = function $$range(s, e) {
      var self = this;

      
      
      if (s == null) {
        s = self.ts;
      };
      
      if (e == null) {
        e = self.te;
      };
      return $$$($$$($$($nesting, 'Parser'), 'Source'), 'Range').$new(self.source_buffer, s, e);
    }, $Lexer_range$47.$$arity = -1);
    
    Opal.def(self, '$emit', $Lexer_emit$48 = function $$emit(type, value, s, e) {
      var self = this, token = nil;

      
      
      if (value == null) {
        value = self.$tok();
      };
      
      if (s == null) {
        s = self.ts;
      };
      
      if (e == null) {
        e = self.te;
      };
      token = [type, [value, self.$range(s, e)]];
      self.token_queue.$push(token);
      if ($truthy(self.tokens)) {
        self.tokens.$push(token)};
      return token;
    }, $Lexer_emit$48.$$arity = -2);
    
    Opal.def(self, '$emit_table', $Lexer_emit_table$49 = function $$emit_table(table, s, e) {
      var self = this, value = nil;

      
      
      if (s == null) {
        s = self.ts;
      };
      
      if (e == null) {
        e = self.te;
      };
      value = self.$tok(s, e);
      return self.$emit(table['$[]'](value), value, s, e);
    }, $Lexer_emit_table$49.$$arity = -2);
    
    Opal.def(self, '$emit_do', $Lexer_emit_do$50 = function $$emit_do(do_block) {
      var $a, self = this;

      
      
      if (do_block == null) {
        do_block = false;
      };
      if ($truthy(self.cond['$active?']())) {
        return self.$emit("kDO_COND", "do".$freeze())
      } else if ($truthy(($truthy($a = self.cmdarg['$active?']()) ? $a : do_block))) {
        return self.$emit("kDO_BLOCK", "do".$freeze())
      } else {
        return self.$emit("kDO", "do".$freeze())
      };
    }, $Lexer_emit_do$50.$$arity = -1);
    
    Opal.def(self, '$arg_or_cmdarg', $Lexer_arg_or_cmdarg$51 = function $$arg_or_cmdarg(cmd_state) {
      var self = this;

      if ($truthy(cmd_state)) {
        return self.$class().$lex_en_expr_cmdarg()
      } else {
        return self.$class().$lex_en_expr_arg()
      }
    }, $Lexer_arg_or_cmdarg$51.$$arity = 1);
    
    Opal.def(self, '$emit_comment', $Lexer_emit_comment$52 = function $$emit_comment(s, e) {
      var self = this;

      
      
      if (s == null) {
        s = self.ts;
      };
      
      if (e == null) {
        e = self.te;
      };
      if ($truthy(self.comments)) {
        self.comments.$push($$$($$$($$($nesting, 'Parser'), 'Source'), 'Comment').$new(self.$range(s, e)))};
      if ($truthy(self.tokens)) {
        self.tokens.$push(["tCOMMENT", [self.$tok(s, e), self.$range(s, e)]])};
      return nil;
    }, $Lexer_emit_comment$52.$$arity = -1);
    
    Opal.def(self, '$diagnostic', $Lexer_diagnostic$53 = function $$diagnostic(type, reason, arguments$, location, highlights) {
      var self = this;

      
      
      if (arguments$ == null) {
        arguments$ = nil;
      };
      
      if (location == null) {
        location = self.$range();
      };
      
      if (highlights == null) {
        highlights = [];
      };
      return self.diagnostics.$process($$$($$($nesting, 'Parser'), 'Diagnostic').$new(type, reason, arguments$, location, highlights));
    }, $Lexer_diagnostic$53.$$arity = -3);
    
    Opal.def(self, '$push_literal', $Lexer_push_literal$54 = function $$push_literal($a) {
      var $post_args, args, self = this, new_literal = nil;

      
      
      $post_args = Opal.slice.call(arguments, 0, arguments.length);
      
      args = $post_args;;
      new_literal = $send($$($nesting, 'Literal'), 'new', [self].concat(Opal.to_a(args)));
      self.literal_stack.$push(new_literal);
      return self.$next_state_for_literal(new_literal);
    }, $Lexer_push_literal$54.$$arity = -1);
    
    Opal.def(self, '$next_state_for_literal', $Lexer_next_state_for_literal$55 = function $$next_state_for_literal(literal) {
      var $a, self = this;

      if ($truthy(($truthy($a = literal['$words?']()) ? literal['$backslash_delimited?']() : $a))) {
        if ($truthy(literal['$interpolate?']())) {
          return self.$class().$lex_en_interp_backslash_delimited_words()
        } else {
          return self.$class().$lex_en_plain_backslash_delimited_words()
        }
      } else if ($truthy(($truthy($a = literal['$words?']()) ? literal['$backslash_delimited?']()['$!']() : $a))) {
        if ($truthy(literal['$interpolate?']())) {
          return self.$class().$lex_en_interp_words()
        } else {
          return self.$class().$lex_en_plain_words()
        }
      } else if ($truthy(($truthy($a = literal['$words?']()['$!']()) ? literal['$backslash_delimited?']() : $a))) {
        if ($truthy(literal['$interpolate?']())) {
          return self.$class().$lex_en_interp_backslash_delimited()
        } else {
          return self.$class().$lex_en_plain_backslash_delimited()
        }
      } else if ($truthy(literal['$interpolate?']())) {
        return self.$class().$lex_en_interp_string()
      } else {
        return self.$class().$lex_en_plain_string()
      }
    }, $Lexer_next_state_for_literal$55.$$arity = 1);
    
    Opal.def(self, '$literal', $Lexer_literal$56 = function $$literal() {
      var self = this;

      return self.literal_stack.$last()
    }, $Lexer_literal$56.$$arity = 0);
    
    Opal.def(self, '$pop_literal', $Lexer_pop_literal$57 = function $$pop_literal() {
      var self = this, old_literal = nil;

      
      old_literal = self.literal_stack.$pop();
      self.dedent_level = old_literal.$dedent_level();
      if (old_literal.$type()['$==']("tREGEXP_BEG")) {
        return self.$class().$lex_en_regexp_modifiers()
      } else {
        return self.$class().$lex_en_expr_end()
      };
    }, $Lexer_pop_literal$57.$$arity = 0);
    Opal.const_set($nesting[0], 'PUNCTUATION', $hash2(["=", "&", "|", "!", "^", "+", "-", "*", "/", "%", "~", ",", ";", ".", "..", "...", "[", "]", "(", ")", "?", ":", "&&", "||", "-@", "+@", "~@", "**", "->", "=~", "!~", "==", "!=", ">", ">>", ">=", "<", "<<", "<=", "=>", "::", "===", "<=>", "[]", "[]=", "{", "}", "`", "!@", "&."], {"=": "tEQL", "&": "tAMPER2", "|": "tPIPE", "!": "tBANG", "^": "tCARET", "+": "tPLUS", "-": "tMINUS", "*": "tSTAR2", "/": "tDIVIDE", "%": "tPERCENT", "~": "tTILDE", ",": "tCOMMA", ";": "tSEMI", ".": "tDOT", "..": "tDOT2", "...": "tDOT3", "[": "tLBRACK2", "]": "tRBRACK", "(": "tLPAREN2", ")": "tRPAREN", "?": "tEH", ":": "tCOLON", "&&": "tANDOP", "||": "tOROP", "-@": "tUMINUS", "+@": "tUPLUS", "~@": "tTILDE", "**": "tPOW", "->": "tLAMBDA", "=~": "tMATCH", "!~": "tNMATCH", "==": "tEQ", "!=": "tNEQ", ">": "tGT", ">>": "tRSHFT", ">=": "tGEQ", "<": "tLT", "<<": "tLSHFT", "<=": "tLEQ", "=>": "tASSOC", "::": "tCOLON2", "===": "tEQQ", "<=>": "tCMP", "[]": "tAREF", "[]=": "tASET", "{": "tLCURLY", "}": "tRCURLY", "`": "tBACK_REF2", "!@": "tBANG", "&.": "tANDDOT"}));
    Opal.const_set($nesting[0], 'PUNCTUATION_BEGIN', $hash2(["&", "*", "**", "+", "-", "::", "(", "{", "["], {"&": "tAMPER", "*": "tSTAR", "**": "tDSTAR", "+": "tUPLUS", "-": "tUMINUS", "::": "tCOLON3", "(": "tLPAREN", "{": "tLBRACE", "[": "tLBRACK"}));
    Opal.const_set($nesting[0], 'KEYWORDS', $hash2(["if", "unless", "while", "until", "rescue", "defined?", "BEGIN", "END"], {"if": "kIF_MOD", "unless": "kUNLESS_MOD", "while": "kWHILE_MOD", "until": "kUNTIL_MOD", "rescue": "kRESCUE_MOD", "defined?": "kDEFINED", "BEGIN": "klBEGIN", "END": "klEND"}));
    Opal.const_set($nesting[0], 'KEYWORDS_BEGIN', $hash2(["if", "unless", "while", "until", "rescue", "defined?", "BEGIN", "END"], {"if": "kIF", "unless": "kUNLESS", "while": "kWHILE", "until": "kUNTIL", "rescue": "kRESCUE", "defined?": "kDEFINED", "BEGIN": "klBEGIN", "END": "klEND"}));
    return $send(["class", "module", "def", "undef", "begin", "end", "then", "elsif", "else", "ensure", "case", "when", "for", "break", "next", "redo", "retry", "in", "do", "return", "yield", "super", "self", "nil", "true", "false", "and", "or", "not", "alias", "__FILE__", "__LINE__", "__ENCODING__"], 'each', [], ($Lexer$58 = function(keyword){var self = $Lexer$58.$$s == null ? this : $Lexer$58.$$s;

    
      
      if (keyword == null) {
        keyword = nil;
      };
      $writer = [keyword, (($writer = [keyword, "" + "k" + (keyword.$upcase())]), $send($$($nesting, 'KEYWORDS'), '[]=', Opal.to_a($writer)), $writer[$rb_minus($writer["length"], 1)])];
      $send($$($nesting, 'KEYWORDS_BEGIN'), '[]=', Opal.to_a($writer));
      return $writer[$rb_minus($writer["length"], 1)];}, $Lexer$58.$$s = self, $Lexer$58.$$arity = 1, $Lexer$58));
  })($$($nesting, 'Parser'), null, $nesting)
};

/* Generated by Opal 1.0.0 */
Opal.modules["parser/lexer/literal"] = function(Opal) {
  function $rb_plus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs + rhs : lhs['$+'](rhs);
  }
  function $rb_minus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs - rhs : lhs['$-'](rhs);
  }
  function $rb_gt(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs > rhs : lhs['$>'](rhs);
  }
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.$$$, $$ = Opal.$$, $module = Opal.module, $klass = Opal.klass, $hash2 = Opal.hash2, $enc = Opal.enc, $truthy = Opal.truthy, $send = Opal.send;

  Opal.add_stubs(['$attr_reader', '$attr_accessor', '$coerce_encoding', '$include?', '$send', '$+', '$[]', '$fetch', '$==', '$!', '$heredoc?', '$start_with?', '$freeze', '$clear_buffer', '$emit_start_tok', '$type', '$words?', '$=~', '$delimiter?', '$-', '$extend_space', '$!=', '$flush_string', '$emit', '$each_char', '$===', '$%', '$nil?', '$>', '$<<', '$empty?', '$extend_content', '$protected', '$lstrip', '$b', '$dup', '$force_encoding', '$encoding', '$source', '$source_buffer', '$length']);
  return (function($base, $parent_nesting) {
    var self = $module($base, 'Parser');

    var $nesting = [self].concat($parent_nesting);

    (function($base, $super, $parent_nesting) {
      var self = $klass($base, $super, 'Literal');

      var $nesting = [self].concat($parent_nesting), $Literal_initialize$1, $Literal_interpolate$ques$2, $Literal_words$ques$3, $Literal_regexp$ques$4, $Literal_heredoc$ques$5, $Literal_plain_heredoc$ques$6, $Literal_squiggly_heredoc$ques$7, $Literal_backslash_delimited$ques$8, $Literal_type$9, $Literal_munge_escape$ques$10, $Literal_nest_and_try_closing$11, $Literal_infer_indent_level$12, $Literal_start_interp_brace$14, $Literal_end_interp_brace_and_try_closing$15, $Literal_extend_string$16, $Literal_flush_string$17, $Literal_extend_content$18, $Literal_extend_space$19, $Literal_supports_line_continuation_via_slash$ques$20, $Literal_delimiter$ques$21, $Literal_coerce_encoding$22, $Literal_clear_buffer$23, $Literal_emit_start_tok$24, $Literal_emit$25;

      self.$$prototype.lexer = self.$$prototype.start_tok = self.$$prototype.str_type = self.$$prototype.monolithic = self.$$prototype.interpolate = self.$$prototype.heredoc_e = self.$$prototype.dedent_body = self.$$prototype.end_delim = self.$$prototype.start_delim = self.$$prototype.nesting = self.$$prototype.label_allowed = self.$$prototype.buffer = self.$$prototype.str_s = self.$$prototype.interp_braces = self.$$prototype.buffer_s = self.$$prototype.buffer_e = self.$$prototype.space_emitted = self.$$prototype.indent = nil;
      
      Opal.const_set($nesting[0], 'DELIMITERS', $hash2(["(", "[", "{", "<"], {"(": $enc(")", "ASCII-8BIT"), "[": $enc("]", "ASCII-8BIT"), "{": $enc("}", "ASCII-8BIT"), "<": $enc(">", "ASCII-8BIT")}));
      Opal.const_set($nesting[0], 'TYPES', $hash2(["'", "<<'", "%q", "\"", "<<\"", "%", "%Q", "%w", "%W", "%i", "%I", ":'", "%s", ":\"", "/", "%r", "%x", "`", "<<`"], {"'": ["tSTRING_BEG", false], "<<'": ["tSTRING_BEG", false], "%q": ["tSTRING_BEG", false], "\"": ["tSTRING_BEG", true], "<<\"": ["tSTRING_BEG", true], "%": ["tSTRING_BEG", true], "%Q": ["tSTRING_BEG", true], "%w": ["tQWORDS_BEG", false], "%W": ["tWORDS_BEG", true], "%i": ["tQSYMBOLS_BEG", false], "%I": ["tSYMBOLS_BEG", true], ":'": ["tSYMBEG", false], "%s": ["tSYMBEG", false], ":\"": ["tSYMBEG", true], "/": ["tREGEXP_BEG", true], "%r": ["tREGEXP_BEG", true], "%x": ["tXSTRING_BEG", true], "`": ["tXSTRING_BEG", true], "<<`": ["tXSTRING_BEG", true]}));
      self.$attr_reader("heredoc_e", "str_s", "dedent_level");
      self.$attr_accessor("saved_herebody_s");
      
      Opal.def(self, '$initialize', $Literal_initialize$1 = function $$initialize(lexer, str_type, delimiter, str_s, heredoc_e, indent, dedent_body, label_allowed) {
        var $a, $b, self = this;

        
        
        if (heredoc_e == null) {
          heredoc_e = nil;
        };
        
        if (indent == null) {
          indent = false;
        };
        
        if (dedent_body == null) {
          dedent_body = false;
        };
        
        if (label_allowed == null) {
          label_allowed = false;
        };
        self.lexer = lexer;
        self.nesting = 1;
        str_type = self.$coerce_encoding(str_type);
        delimiter = self.$coerce_encoding(delimiter);
        if ($truthy($$($nesting, 'TYPES')['$include?'](str_type))) {
        } else {
          lexer.$send("diagnostic", "error", "unexpected_percent_str", $hash2(["type"], {"type": str_type}), self.lexer.$send("range", str_s, $rb_plus(str_s, 2)))
        };
        self.str_type = str_type;
        self.str_s = str_s;
        $b = $$($nesting, 'TYPES')['$[]'](str_type), $a = Opal.to_ary($b), (self.start_tok = ($a[0] == null ? nil : $a[0])), (self.interpolate = ($a[1] == null ? nil : $a[1])), $b;
        self.start_delim = (function() {if ($truthy($$($nesting, 'DELIMITERS')['$include?'](delimiter))) {
          return delimiter
        } else {
          return nil
        }; return nil; })();
        self.end_delim = $$($nesting, 'DELIMITERS').$fetch(delimiter, delimiter);
        self.heredoc_e = heredoc_e;
        self.indent = indent;
        self.label_allowed = label_allowed;
        self.dedent_body = dedent_body;
        self.dedent_level = nil;
        self.interp_braces = 0;
        self.space_emitted = true;
        self.monolithic = ($truthy($a = (($b = self.start_tok['$==']("tSTRING_BEG")) ? [$enc("'", "ASCII-8BIT"), $enc("\"", "ASCII-8BIT")]['$include?'](str_type) : self.start_tok['$==']("tSTRING_BEG"))) ? self['$heredoc?']()['$!']() : $a);
        if ($truthy(self.str_type['$start_with?']($enc("%", "ASCII-8BIT").$freeze()))) {
          self.str_type = $rb_plus(self.str_type, delimiter)};
        self.$clear_buffer();
        if ($truthy(self.monolithic)) {
          return nil
        } else {
          return self.$emit_start_tok()
        };
      }, $Literal_initialize$1.$$arity = -5);
      
      Opal.def(self, '$interpolate?', $Literal_interpolate$ques$2 = function() {
        var self = this;

        return self.interpolate
      }, $Literal_interpolate$ques$2.$$arity = 0);
      
      Opal.def(self, '$words?', $Literal_words$ques$3 = function() {
        var $a, $b, $c, self = this;

        return ($truthy($a = ($truthy($b = ($truthy($c = self.$type()['$==']("tWORDS_BEG")) ? $c : self.$type()['$==']("tQWORDS_BEG"))) ? $b : self.$type()['$==']("tSYMBOLS_BEG"))) ? $a : self.$type()['$==']("tQSYMBOLS_BEG"))
      }, $Literal_words$ques$3.$$arity = 0);
      
      Opal.def(self, '$regexp?', $Literal_regexp$ques$4 = function() {
        var self = this;

        return self.$type()['$==']("tREGEXP_BEG")
      }, $Literal_regexp$ques$4.$$arity = 0);
      
      Opal.def(self, '$heredoc?', $Literal_heredoc$ques$5 = function() {
        var self = this;

        return self.heredoc_e['$!']()['$!']()
      }, $Literal_heredoc$ques$5.$$arity = 0);
      
      Opal.def(self, '$plain_heredoc?', $Literal_plain_heredoc$ques$6 = function() {
        var $a, self = this;

        return ($truthy($a = self['$heredoc?']()) ? self.dedent_body['$!']() : $a)
      }, $Literal_plain_heredoc$ques$6.$$arity = 0);
      
      Opal.def(self, '$squiggly_heredoc?', $Literal_squiggly_heredoc$ques$7 = function() {
        var $a, self = this;

        return ($truthy($a = self['$heredoc?']()) ? self.dedent_body : $a)
      }, $Literal_squiggly_heredoc$ques$7.$$arity = 0);
      
      Opal.def(self, '$backslash_delimited?', $Literal_backslash_delimited$ques$8 = function() {
        var self = this;

        return self.end_delim['$==']($enc("\\", "ASCII-8BIT").$freeze())
      }, $Literal_backslash_delimited$ques$8.$$arity = 0);
      
      Opal.def(self, '$type', $Literal_type$9 = function $$type() {
        var self = this;

        return self.start_tok
      }, $Literal_type$9.$$arity = 0);
      
      Opal.def(self, '$munge_escape?', $Literal_munge_escape$ques$10 = function(character) {
        var $a, self = this;

        
        character = self.$coerce_encoding(character);
        if ($truthy(($truthy($a = self['$words?']()) ? character['$=~'](/[ \t\v\r\f\n]/) : $a))) {
          return true
        } else {
          return [$enc("\\", "ASCII-8BIT").$freeze(), self.start_delim, self.end_delim]['$include?'](character)
        };
      }, $Literal_munge_escape$ques$10.$$arity = 1);
      
      Opal.def(self, '$nest_and_try_closing', $Literal_nest_and_try_closing$11 = function $$nest_and_try_closing(delimiter, ts, te, lookahead) {
        var $a, $b, $c, $d, self = this;

        
        
        if (lookahead == null) {
          lookahead = nil;
        };
        delimiter = self.$coerce_encoding(delimiter);
        if ($truthy(($truthy($a = self.start_delim) ? self.start_delim['$=='](delimiter) : $a))) {
          self.nesting = $rb_plus(self.nesting, 1)
        } else if ($truthy(self['$delimiter?'](delimiter))) {
          self.nesting = $rb_minus(self.nesting, 1)};
        if (self.nesting['$=='](0)) {
          
          if ($truthy(self['$words?']())) {
            self.$extend_space(ts, ts)};
          if ($truthy(($truthy($a = ($truthy($b = ($truthy($c = ($truthy($d = lookahead) ? self.label_allowed : $d)) ? lookahead['$[]'](0)['$==']($enc(":", "ASCII-8BIT")) : $c)) ? lookahead['$[]'](1)['$!=']($enc(":", "ASCII-8BIT")) : $b)) ? self.start_tok['$==']("tSTRING_BEG") : $a))) {
            
            self.$flush_string();
            return self.$emit("tLABEL_END", self.end_delim, ts, $rb_plus(te, 1));
          } else if ($truthy(self.monolithic)) {
            return self.$emit("tSTRING", self.buffer, self.str_s, te)
          } else {
            
            if ($truthy(self['$heredoc?']())) {
            } else {
              self.$flush_string()
            };
            return self.$emit("tSTRING_END", self.end_delim, ts, te);
          };
        } else {
          return nil
        };
      }, $Literal_nest_and_try_closing$11.$$arity = -4);
      
      Opal.def(self, '$infer_indent_level', $Literal_infer_indent_level$12 = function $$infer_indent_level(line) {
        var $$13, self = this, indent_level = nil;

        
        if ($truthy(self.dedent_body['$!']())) {
          return nil};
        indent_level = 0;
        return (function(){var $brk = Opal.new_brk(); try {return $send(line, 'each_char', [], ($$13 = function(char$){var self = $$13.$$s == null ? this : $$13.$$s, $a, $case = nil;
          if (self.dedent_level == null) self.dedent_level = nil;

        
          
          if (char$ == null) {
            char$ = nil;
          };
          return (function() {$case = char$;
          if (" "['$===']($case)) {return (indent_level = $rb_plus(indent_level, 1))}
          else if ("\t"['$===']($case)) {return (indent_level = $rb_plus(indent_level, $rb_minus(8, indent_level['$%'](8))))}
          else {
          if ($truthy(($truthy($a = self.dedent_level['$nil?']()) ? $a : $rb_gt(self.dedent_level, indent_level)))) {
            self.dedent_level = indent_level};
          
          Opal.brk(nil, $brk);}})();}, $$13.$$s = self, $$13.$$brk = $brk, $$13.$$arity = 1, $$13))
        } catch (err) { if (err === $brk) { return err.$v } else { throw err } }})();
      }, $Literal_infer_indent_level$12.$$arity = 1);
      
      Opal.def(self, '$start_interp_brace', $Literal_start_interp_brace$14 = function $$start_interp_brace() {
        var self = this;

        return (self.interp_braces = $rb_plus(self.interp_braces, 1))
      }, $Literal_start_interp_brace$14.$$arity = 0);
      
      Opal.def(self, '$end_interp_brace_and_try_closing', $Literal_end_interp_brace_and_try_closing$15 = function $$end_interp_brace_and_try_closing() {
        var self = this;

        
        self.interp_braces = $rb_minus(self.interp_braces, 1);
        
        return self.interp_braces['$=='](0);;
      }, $Literal_end_interp_brace_and_try_closing$15.$$arity = 0);
      
      Opal.def(self, '$extend_string', $Literal_extend_string$16 = function $$extend_string(string, ts, te) {
        var $a, self = this;

        
        self.buffer_s = ($truthy($a = self.buffer_s) ? $a : ts);
        self.buffer_e = te;
        return self.buffer['$<<'](string);
      }, $Literal_extend_string$16.$$arity = 3);
      
      Opal.def(self, '$flush_string', $Literal_flush_string$17 = function $$flush_string() {
        var self = this;

        
        if ($truthy(self.monolithic)) {
          
          self.$emit_start_tok();
          self.monolithic = false;};
        if ($truthy(self.buffer['$empty?']())) {
          return nil
        } else {
          
          self.$emit("tSTRING_CONTENT", self.buffer, self.buffer_s, self.buffer_e);
          self.$clear_buffer();
          return self.$extend_content();
        };
      }, $Literal_flush_string$17.$$arity = 0);
      
      Opal.def(self, '$extend_content', $Literal_extend_content$18 = function $$extend_content() {
        var self = this;

        return (self.space_emitted = false)
      }, $Literal_extend_content$18.$$arity = 0);
      
      Opal.def(self, '$extend_space', $Literal_extend_space$19 = function $$extend_space(ts, te) {
        var self = this;

        
        self.$flush_string();
        if ($truthy(self.space_emitted)) {
          return nil
        } else {
          
          self.$emit("tSPACE", nil, ts, te);
          return (self.space_emitted = true);
        };
      }, $Literal_extend_space$19.$$arity = 2);
      
      Opal.def(self, '$supports_line_continuation_via_slash?', $Literal_supports_line_continuation_via_slash$ques$20 = function() {
        var $a, self = this;

        return ($truthy($a = self['$words?']()['$!']()) ? self.interpolate : $a)
      }, $Literal_supports_line_continuation_via_slash$ques$20.$$arity = 0);
      self.$protected();
      
      Opal.def(self, '$delimiter?', $Literal_delimiter$ques$21 = function(delimiter) {
        var self = this;

        if ($truthy(self.indent)) {
          return self.end_delim['$=='](delimiter.$lstrip())
        } else {
          return self.end_delim['$=='](delimiter)
        }
      }, $Literal_delimiter$ques$21.$$arity = 1);
      
      Opal.def(self, '$coerce_encoding', $Literal_coerce_encoding$22 = function $$coerce_encoding(string) {
        var self = this;

        return string.$b()
      }, $Literal_coerce_encoding$22.$$arity = 1);
      
      Opal.def(self, '$clear_buffer', $Literal_clear_buffer$23 = function $$clear_buffer() {
        var self = this;

        
        self.buffer = $enc("", "ASCII-8BIT").$dup();
        self.buffer.$force_encoding(self.lexer.$source_buffer().$source().$encoding());
        self.buffer_s = nil;
        return (self.buffer_e = nil);
      }, $Literal_clear_buffer$23.$$arity = 0);
      
      Opal.def(self, '$emit_start_tok', $Literal_emit_start_tok$24 = function $$emit_start_tok() {
        var $a, self = this, str_e = nil;

        
        str_e = ($truthy($a = self.heredoc_e) ? $a : $rb_plus(self.str_s, self.str_type.$length()));
        return self.$emit(self.start_tok, self.str_type, self.str_s, str_e);
      }, $Literal_emit_start_tok$24.$$arity = 0);
      return (Opal.def(self, '$emit', $Literal_emit$25 = function $$emit(token, type, s, e) {
        var self = this;

        return self.lexer.$send("emit", token, type, s, e)
      }, $Literal_emit$25.$$arity = 4), nil) && 'emit';
    })($$($nesting, 'Lexer'), null, $nesting)
  })($nesting[0], $nesting)
};

/* Generated by Opal 1.0.0 */
Opal.modules["parser/lexer/stack_state"] = function(Opal) {
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.$$$, $$ = Opal.$$, $module = Opal.module, $klass = Opal.klass, $truthy = Opal.truthy;

  Opal.add_stubs(['$freeze', '$clear', '$|', '$<<', '$&', '$>>', '$==', '$[]', '$to_s']);
  return (function($base, $parent_nesting) {
    var self = $module($base, 'Parser');

    var $nesting = [self].concat($parent_nesting);

    (function($base, $super, $parent_nesting) {
      var self = $klass($base, $super, 'StackState');

      var $nesting = [self].concat($parent_nesting), $StackState_initialize$1, $StackState_clear$2, $StackState_push$3, $StackState_pop$4, $StackState_lexpop$5, $StackState_active$ques$6, $StackState_empty$ques$7, $StackState_to_s$8;

      self.$$prototype.stack = self.$$prototype.name = nil;
      
      
      Opal.def(self, '$initialize', $StackState_initialize$1 = function $$initialize(name) {
        var self = this;

        
        self.name = name.$freeze();
        return self.$clear();
      }, $StackState_initialize$1.$$arity = 1);
      
      Opal.def(self, '$clear', $StackState_clear$2 = function $$clear() {
        var self = this;

        return (self.stack = 0)
      }, $StackState_clear$2.$$arity = 0);
      
      Opal.def(self, '$push', $StackState_push$3 = function $$push(bit) {
        var self = this, bit_value = nil;

        
        bit_value = (function() {if ($truthy(bit)) {
          return 1
        } else {
          return 0
        }; return nil; })();
        self.stack = self.stack['$<<'](1)['$|'](bit_value);
        return bit;
      }, $StackState_push$3.$$arity = 1);
      
      Opal.def(self, '$pop', $StackState_pop$4 = function $$pop() {
        var self = this, bit_value = nil;

        
        bit_value = self.stack['$&'](1);
        self.stack = self.stack['$>>'](1);
        return bit_value['$=='](1);
      }, $StackState_pop$4.$$arity = 0);
      
      Opal.def(self, '$lexpop', $StackState_lexpop$5 = function $$lexpop() {
        var self = this;

        
        self.stack = self.stack['$>>'](1)['$|'](self.stack['$&'](1));
        return self.stack['$[]'](0)['$=='](1);
      }, $StackState_lexpop$5.$$arity = 0);
      
      Opal.def(self, '$active?', $StackState_active$ques$6 = function() {
        var self = this;

        return self.stack['$[]'](0)['$=='](1)
      }, $StackState_active$ques$6.$$arity = 0);
      
      Opal.def(self, '$empty?', $StackState_empty$ques$7 = function() {
        var self = this;

        return self.stack['$=='](0)
      }, $StackState_empty$ques$7.$$arity = 0);
      
      Opal.def(self, '$to_s', $StackState_to_s$8 = function $$to_s() {
        var self = this;

        return "" + "[" + (self.stack.$to_s(2)) + " <= " + (self.name) + "]"
      }, $StackState_to_s$8.$$arity = 0);
      return Opal.alias(self, "inspect", "to_s");
    })($$($nesting, 'Lexer'), null, $nesting)
  })($nesting[0], $nesting)
};

/* Generated by Opal 1.0.0 */
Opal.modules["parser/lexer/dedenter"] = function(Opal) {
  function $rb_le(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs <= rhs : lhs['$<='](rhs);
  }
  function $rb_plus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs + rhs : lhs['$+'](rhs);
  }
  function $rb_minus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs - rhs : lhs['$-'](rhs);
  }
  function $rb_gt(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs > rhs : lhs['$>'](rhs);
  }
  function $rb_times(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs * rhs : lhs['$*'](rhs);
  }
  function $rb_divide(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs / rhs : lhs['$/'](rhs);
  }
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.$$$, $$ = Opal.$$, $module = Opal.module, $klass = Opal.klass, $send = Opal.send, $truthy = Opal.truthy, $slice = Opal.slice;

  Opal.add_stubs(['$encoding', '$split', '$force_encoding', '$map!', '$each', '$each_char', '$<=', '$===', '$+', '$-', '$>', '$*', '$/', '$slice!', '$replace', '$join', '$end_with?']);
  return (function($base, $parent_nesting) {
    var self = $module($base, 'Parser');

    var $nesting = [self].concat($parent_nesting);

    (function($base, $super, $parent_nesting) {
      var self = $klass($base, $super, 'Dedenter');

      var $nesting = [self].concat($parent_nesting), $Dedenter_initialize$1, $Dedenter_dedent$2, $Dedenter_interrupt$6;

      self.$$prototype.at_line_begin = nil;
      
      Opal.const_set($nesting[0], 'TAB_WIDTH', 8);
      
      Opal.def(self, '$initialize', $Dedenter_initialize$1 = function $$initialize(dedent_level) {
        var self = this;

        
        self.dedent_level = dedent_level;
        self.at_line_begin = true;
        return (self.indent_level = 0);
      }, $Dedenter_initialize$1.$$arity = 1);
      
      Opal.def(self, '$dedent', $Dedenter_dedent$2 = function $$dedent(string) {
        var $$3, $a, $b, $$4, self = this, original_encoding = nil, lines = nil, lines_to_dedent = nil, _first = nil;

        
        original_encoding = string.$encoding();
        lines = string.$force_encoding($$$($$($nesting, 'Encoding'), 'BINARY')).$split("\\\n");
        $send(lines, 'map!', [], ($$3 = function(s){var self = $$3.$$s == null ? this : $$3.$$s;

        
          
          if (s == null) {
            s = nil;
          };
          return s.$force_encoding(original_encoding);}, $$3.$$s = self, $$3.$$arity = 1, $$3));
        if ($truthy(self.at_line_begin)) {
          lines_to_dedent = lines
        } else {
          $b = lines, $a = Opal.to_ary($b), (_first = ($a[0] == null ? nil : $a[0])), (lines_to_dedent = $slice.call($a, 1)), $b
        };
        (function(){var $brk = Opal.new_brk(); try {return $send(lines_to_dedent, 'each', [], ($$4 = function(line){var self = $$4.$$s == null ? this : $$4.$$s, $$5, left_to_remove = nil, remove = nil;
          if (self.dedent_level == null) self.dedent_level = nil;

        
          
          if (line == null) {
            line = nil;
          };
          left_to_remove = self.dedent_level;
          remove = 0;
          (function(){var $brk = Opal.new_brk(); try {return $send(line, 'each_char', [], ($$5 = function(char$){var self = $$5.$$s == null ? this : $$5.$$s, $case = nil;
            if (self.dedent_level == null) self.dedent_level = nil;

          
            
            if (char$ == null) {
              char$ = nil;
            };
            if ($truthy($rb_le(left_to_remove, 0))) {
              
              Opal.brk(nil, $brk)};
            return (function() {$case = char$;
            if (" "['$===']($case)) {
            remove = $rb_plus(remove, 1);
            return (left_to_remove = $rb_minus(left_to_remove, 1));}
            else if ("\t"['$===']($case)) {
            if ($truthy($rb_gt($rb_times($$($nesting, 'TAB_WIDTH'), $rb_plus($rb_divide(remove, $$($nesting, 'TAB_WIDTH')), 1)), self.dedent_level))) {
              
              Opal.brk(nil, $brk)};
            remove = $rb_plus(remove, 1);
            return (left_to_remove = $rb_minus(left_to_remove, $$($nesting, 'TAB_WIDTH')));}
            else {
            Opal.brk(nil, $brk)}})();}, $$5.$$s = self, $$5.$$brk = $brk, $$5.$$arity = 1, $$5))
          } catch (err) { if (err === $brk) { return err.$v } else { throw err } }})();
          return line['$slice!'](0, remove);}, $$4.$$s = self, $$4.$$brk = $brk, $$4.$$arity = 1, $$4))
        } catch (err) { if (err === $brk) { return err.$v } else { throw err } }})();
        string.$replace(lines.$join());
        return (self.at_line_begin = string['$end_with?']("\n"));
      }, $Dedenter_dedent$2.$$arity = 1);
      return (Opal.def(self, '$interrupt', $Dedenter_interrupt$6 = function $$interrupt() {
        var self = this;

        return (self.at_line_begin = false)
      }, $Dedenter_interrupt$6.$$arity = 0), nil) && 'interrupt';
    })($$($nesting, 'Lexer'), null, $nesting)
  })($nesting[0], $nesting)
};

/* Generated by Opal 1.0.0 */
Opal.modules["parser/builders/default"] = function(Opal) {
  function $rb_minus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs - rhs : lhs['$-'](rhs);
  }
  function $rb_plus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs + rhs : lhs['$+'](rhs);
  }
  function $rb_gt(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs > rhs : lhs['$>'](rhs);
  }
  function $rb_le(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs <= rhs : lhs['$<='](rhs);
  }
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.$$$, $$ = Opal.$$, $module = Opal.module, $klass = Opal.klass, $hash2 = Opal.hash2, $truthy = Opal.truthy, $send = Opal.send, $range = Opal.range, $slice = Opal.slice;

  Opal.add_stubs(['$attr_accessor', '$n0', '$token_map', '$numeric', '$n', '$value', '$new', '$loc', '$private', '$===', '$+@', '$-@', '$updated', '$join', '$expression', '$string_value', '$delimited_string_map', '$unquoted_map', '$collapse_string_parts?', '$nil?', '$first', '$children', '$string_map', '$prefix_string_map', '$to_sym', '$collection_map', '$==', '$version', '$empty?', '$diagnostic', '$!', '$type', '$dedent', '$each', '$interrupt', '$map', '$uniq', '$sort', '$each_char', '$to_proc', '$static_regexp', '$message', '$<<', '$regexp_map', '$unary_op_map', '$binary_op_map', '$!=', '$%', '$size', '$last', '$each_slice', '$pair_keyword_map', '$pair_quoted_map', '$symbol_compose', '$range_map', '$variable_map', '$name', '$source_buffer', '$dup', '$line', '$emit_encoding', '$class', '$declared?', '$static_env', '$to_s', '$top', '$current_arg_stack', '$parser', '$var_send_map', '$constant_map', '$dynamic_const_definition_allowed?', '$context', '$check_assignment_to_numparam', '$declare', '$with_expression', '$with_operator', '$join_exprs', '$[]', '$module_definition_map', '$definition_map', '$endless_definition_map', '$validate_definee', '$keyword_map', '$check_duplicate_args', '$emit_forward_arg', '$forward_arg', '$arg_prefix_map', '$kwarg_map', '$emit_procarg0', '$emit_arg_inside_procarg0', '$location', '$resize', '$-', '$end', '$call_type_for_dot', '$send_map', '$emit_lambda', '$expr_map', '$keyword', '$include?', '$block_map', '$array', '$+', '$emit_index', '$index_map', '$send_index_map', '$send_binary_op_map', '$static_regexp_node', '$names', '$send_unary_op_map', '$check_condition', '$condition_map', '$keyword_mod_map', '$ternary_map', '$for_map', '$>', '$count', '$rescue_body_map', '$any?', '$eh_keyword_map', '$push', '$none?', '$one?', '$begin', '$compact', '$guard_map', '$check_lvar_name', '$check_duplicate_pattern_variable', '$adjust', '$length', '$match_hash_var_from_str', '$match_var', '$check_duplicate_pattern_key', '$pair_keyword', '$static_string', '$pair_quoted', '$match_hash_var', '$<=', '$check_duplicate_arg', '$is_a?', '$[]=', '$arg_name_collides?', '$in_dynamic_block?', '$=~', '$has_numparams?', '$max_numparam_stack', '$start_with?', '$pattern_variables', '$pattern_hash_keys', '$with', '$begin_pos', '$end_pos', '$encode', '$valid_encoding?', '$process', '$diagnostics', '$send']);
  return (function($base, $parent_nesting) {
    var self = $module($base, 'Parser');

    var $nesting = [self].concat($parent_nesting);

    (function($base, $super, $parent_nesting) {
      var self = $klass($base, $super, 'Default');

      var $nesting = [self].concat($parent_nesting), $Default_initialize$2, $Default_nil$3, $Default_true$4, $Default_false$5, $Default_integer$6, $Default_float$7, $Default_rational$8, $Default_complex$9, $Default_numeric$10, $Default_unary_num$11, $Default___LINE__$12, $Default_string$13, $Default_string_internal$14, $Default_string_compose$15, $Default_character$16, $Default___FILE__$17, $Default_symbol$18, $Default_symbol_internal$19, $Default_symbol_compose$20, $Default_xstring_compose$21, $Default_dedent_string$22, $Default_regexp_options$24, $Default_regexp_compose$25, $Default_array$26, $Default_splat$27, $Default_word$28, $Default_words_compose$29, $Default_symbols_compose$30, $Default_pair$32, $Default_pair_list_18$33, $Default_pair_keyword$35, $Default_pair_quoted$36, $Default_kwsplat$37, $Default_associate$38, $Default_range_inclusive$39, $Default_range_exclusive$40, $Default_self$41, $Default_ident$42, $Default_ivar$43, $Default_gvar$44, $Default_cvar$45, $Default_back_ref$46, $Default_nth_ref$47, $Default_accessible$48, $Default_const$49, $Default_const_global$50, $Default_const_fetch$51, $Default___ENCODING__$52, $Default_assignable$53, $Default_const_op_assignable$54, $Default_assign$55, $Default_op_assign$56, $Default_multi_lhs$57, $Default_multi_assign$58, $Default_rassign$59, $Default_multi_rassign$60, $Default_def_class$61, $Default_def_sclass$62, $Default_def_module$63, $Default_def_method$64, $Default_def_endless_method$65, $Default_def_singleton$66, $Default_def_endless_singleton$67, $Default_undef_method$68, $Default_alias$69, $Default_args$70, $Default_numargs$71, $Default_forward_only_args$72, $Default_forward_arg$73, $Default_arg$74, $Default_optarg$75, $Default_restarg$76, $Default_kwarg$77, $Default_kwoptarg$78, $Default_kwrestarg$79, $Default_kwnilarg$80, $Default_shadowarg$81, $Default_blockarg$82, $Default_procarg0$83, $Default_arg_expr$84, $Default_restarg_expr$85, $Default_blockarg_expr$86, $Default_objc_kwarg$87, $Default_objc_restarg$88, $Default_call_type_for_dot$89, $Default_forwarded_args$90, $Default_call_method$91, $Default_call_lambda$92, $Default_block$93, $Default_block_pass$94, $Default_objc_varargs$95, $Default_attr_asgn$96, $Default_index$97, $Default_index_asgn$98, $Default_binary_op$99, $Default_match_op$100, $Default_unary_op$102, $Default_not_op$103, $Default_logical_op$104, $Default_condition$105, $Default_condition_mod$106, $Default_ternary$107, $Default_when$108, $Default_case$109, $Default_loop$110, $Default_loop_mod$111, $Default_for$112, $Default_keyword_cmd$113, $Default_preexe$114, $Default_postexe$115, $Default_rescue_body$116, $Default_begin_body$117, $Default_compstmt$118, $Default_begin$119, $Default_begin_keyword$120, $Default_case_match$121, $Default_in_match$122, $Default_in_pattern$123, $Default_if_guard$124, $Default_unless_guard$125, $Default_match_var$126, $Default_match_hash_var$127, $Default_match_hash_var_from_str$128, $Default_match_rest$129, $Default_hash_pattern$130, $Default_array_pattern$131, $Default_find_pattern$133, $Default_match_with_trailing_comma$134, $Default_const_pattern$135, $Default_pin$136, $Default_match_alt$137, $Default_match_as$138, $Default_match_nil_pattern$139, $Default_match_pair$140, $Default_match_label$141, $Default_check_condition$142, $Default_check_duplicate_args$143, $Default_check_duplicate_arg$145, $Default_check_assignment_to_numparam$146, $Default_arg_name_collides$ques$147, $Default_check_lvar_name$148, $Default_check_duplicate_pattern_variable$149, $Default_check_duplicate_pattern_key$150, $Default_n$151, $Default_n0$152, $Default_join_exprs$153, $Default_token_map$154, $Default_delimited_string_map$155, $Default_prefix_string_map$156, $Default_unquoted_map$157, $Default_pair_keyword_map$158, $Default_pair_quoted_map$159, $Default_expr_map$160, $Default_collection_map$161, $Default_string_map$162, $Default_regexp_map$163, $Default_constant_map$164, $Default_variable_map$165, $Default_binary_op_map$166, $Default_unary_op_map$167, $Default_range_map$168, $Default_arg_prefix_map$169, $Default_kwarg_map$170, $Default_module_definition_map$171, $Default_definition_map$172, $Default_endless_definition_map$173, $Default_send_map$174, $Default_var_send_map$175, $Default_send_binary_op_map$176, $Default_send_unary_op_map$177, $Default_index_map$178, $Default_send_index_map$179, $Default_block_map$180, $Default_keyword_map$181, $Default_keyword_mod_map$182, $Default_condition_map$183, $Default_ternary_map$184, $Default_for_map$185, $Default_rescue_body_map$186, $Default_eh_keyword_map$187, $Default_guard_map$188, $Default_static_string$189, $Default_static_regexp$191, $Default_static_regexp_node$192, $Default_collapse_string_parts$ques$193, $Default_value$194, $Default_string_value$195, $Default_loc$196, $Default_diagnostic$197, $Default_validate_definee$198;

      self.$$prototype.parser = self.$$prototype.emit_file_line_as_literals = nil;
      
      (function(self, $parent_nesting) {
        var $nesting = [self].concat($parent_nesting);

        return self.$attr_accessor("emit_lambda")
      })(Opal.get_singleton_class(self), $nesting);
      self.emit_lambda = false;
      (function(self, $parent_nesting) {
        var $nesting = [self].concat($parent_nesting);

        return self.$attr_accessor("emit_procarg0")
      })(Opal.get_singleton_class(self), $nesting);
      self.emit_procarg0 = false;
      (function(self, $parent_nesting) {
        var $nesting = [self].concat($parent_nesting);

        return self.$attr_accessor("emit_encoding")
      })(Opal.get_singleton_class(self), $nesting);
      self.emit_encoding = false;
      (function(self, $parent_nesting) {
        var $nesting = [self].concat($parent_nesting);

        return self.$attr_accessor("emit_index")
      })(Opal.get_singleton_class(self), $nesting);
      self.emit_index = false;
      (function(self, $parent_nesting) {
        var $nesting = [self].concat($parent_nesting);

        return self.$attr_accessor("emit_arg_inside_procarg0")
      })(Opal.get_singleton_class(self), $nesting);
      self.emit_arg_inside_procarg0 = false;
      (function(self, $parent_nesting) {
        var $nesting = [self].concat($parent_nesting);

        return self.$attr_accessor("emit_forward_arg")
      })(Opal.get_singleton_class(self), $nesting);
      self.emit_forward_arg = false;
      (function(self, $parent_nesting) {
        var $nesting = [self].concat($parent_nesting), $modernize$1;

        return (Opal.def(self, '$modernize', $modernize$1 = function $$modernize() {
          var self = this;

          
          self.emit_lambda = true;
          self.emit_procarg0 = true;
          self.emit_encoding = true;
          self.emit_index = true;
          self.emit_arg_inside_procarg0 = true;
          return (self.emit_forward_arg = true);
        }, $modernize$1.$$arity = 0), nil) && 'modernize'
      })(Opal.get_singleton_class(self), $nesting);
      self.$attr_accessor("parser");
      self.$attr_accessor("emit_file_line_as_literals");
      
      Opal.def(self, '$initialize', $Default_initialize$2 = function $$initialize() {
        var self = this;

        return (self.emit_file_line_as_literals = true)
      }, $Default_initialize$2.$$arity = 0);
      
      Opal.def(self, '$nil', $Default_nil$3 = function $$nil(nil_t) {
        var self = this;

        return self.$n0("nil", self.$token_map(nil_t))
      }, $Default_nil$3.$$arity = 1);
      
      Opal.def(self, '$true', $Default_true$4 = function(true_t) {
        var self = this;

        return self.$n0("true", self.$token_map(true_t))
      }, $Default_true$4.$$arity = 1);
      
      Opal.def(self, '$false', $Default_false$5 = function(false_t) {
        var self = this;

        return self.$n0("false", self.$token_map(false_t))
      }, $Default_false$5.$$arity = 1);
      
      Opal.def(self, '$integer', $Default_integer$6 = function $$integer(integer_t) {
        var self = this;

        return self.$numeric("int", integer_t)
      }, $Default_integer$6.$$arity = 1);
      
      Opal.def(self, '$float', $Default_float$7 = function(float_t) {
        var self = this;

        return self.$numeric("float", float_t)
      }, $Default_float$7.$$arity = 1);
      
      Opal.def(self, '$rational', $Default_rational$8 = function $$rational(rational_t) {
        var self = this;

        return self.$numeric("rational", rational_t)
      }, $Default_rational$8.$$arity = 1);
      
      Opal.def(self, '$complex', $Default_complex$9 = function $$complex(complex_t) {
        var self = this;

        return self.$numeric("complex", complex_t)
      }, $Default_complex$9.$$arity = 1);
      
      Opal.def(self, '$numeric', $Default_numeric$10 = function $$numeric(kind, token) {
        var self = this;

        return self.$n(kind, [self.$value(token)], $$$($$$($$($nesting, 'Source'), 'Map'), 'Operator').$new(nil, self.$loc(token)))
      }, $Default_numeric$10.$$arity = 2);
      self.$private("numeric");
      
      Opal.def(self, '$unary_num', $Default_unary_num$11 = function $$unary_num(unary_t, numeric) {
        var $a, self = this, value = nil, operator_loc = nil, $case = nil;

        
        $a = [].concat(Opal.to_a(numeric)), (value = ($a[0] == null ? nil : $a[0])), $a;
        operator_loc = self.$loc(unary_t);
        $case = self.$value(unary_t);
        if ("+"['$===']($case)) {value = value['$+@']()}
        else if ("-"['$===']($case)) {value = value['$-@']()};
        return numeric.$updated(nil, [value], $hash2(["location"], {"location": $$$($$$($$($nesting, 'Source'), 'Map'), 'Operator').$new(operator_loc, operator_loc.$join(numeric.$loc().$expression()))}));
      }, $Default_unary_num$11.$$arity = 2);
      
      Opal.def(self, '$__LINE__', $Default___LINE__$12 = function $$__LINE__(__LINE__t) {
        var self = this;

        return self.$n0("__LINE__", self.$token_map(__LINE__t))
      }, $Default___LINE__$12.$$arity = 1);
      
      Opal.def(self, '$string', $Default_string$13 = function $$string(string_t) {
        var self = this;

        return self.$n("str", [self.$string_value(string_t)], self.$delimited_string_map(string_t))
      }, $Default_string$13.$$arity = 1);
      
      Opal.def(self, '$string_internal', $Default_string_internal$14 = function $$string_internal(string_t) {
        var self = this;

        return self.$n("str", [self.$string_value(string_t)], self.$unquoted_map(string_t))
      }, $Default_string_internal$14.$$arity = 1);
      
      Opal.def(self, '$string_compose', $Default_string_compose$15 = function $$string_compose(begin_t, parts, end_t) {
        var $a, self = this;

        if ($truthy(self['$collapse_string_parts?'](parts))) {
          if ($truthy(($truthy($a = begin_t['$nil?']()) ? end_t['$nil?']() : $a))) {
            return parts.$first()
          } else {
            return self.$n("str", parts.$first().$children(), self.$string_map(begin_t, parts, end_t))
          }
        } else {
          return self.$n("dstr", [].concat(Opal.to_a(parts)), self.$string_map(begin_t, parts, end_t))
        }
      }, $Default_string_compose$15.$$arity = 3);
      
      Opal.def(self, '$character', $Default_character$16 = function $$character(char_t) {
        var self = this;

        return self.$n("str", [self.$string_value(char_t)], self.$prefix_string_map(char_t))
      }, $Default_character$16.$$arity = 1);
      
      Opal.def(self, '$__FILE__', $Default___FILE__$17 = function $$__FILE__(__FILE__t) {
        var self = this;

        return self.$n0("__FILE__", self.$token_map(__FILE__t))
      }, $Default___FILE__$17.$$arity = 1);
      
      Opal.def(self, '$symbol', $Default_symbol$18 = function $$symbol(symbol_t) {
        var self = this;

        return self.$n("sym", [self.$string_value(symbol_t).$to_sym()], self.$prefix_string_map(symbol_t))
      }, $Default_symbol$18.$$arity = 1);
      
      Opal.def(self, '$symbol_internal', $Default_symbol_internal$19 = function $$symbol_internal(symbol_t) {
        var self = this;

        return self.$n("sym", [self.$string_value(symbol_t).$to_sym()], self.$unquoted_map(symbol_t))
      }, $Default_symbol_internal$19.$$arity = 1);
      
      Opal.def(self, '$symbol_compose', $Default_symbol_compose$20 = function $$symbol_compose(begin_t, parts, end_t) {
        var $a, self = this, str = nil;

        if ($truthy(self['$collapse_string_parts?'](parts))) {
          
          str = parts.$first();
          return self.$n("sym", [str.$children().$first().$to_sym()], self.$collection_map(begin_t, str.$loc().$expression(), end_t));
        } else if ($truthy((($a = self.parser.$version()['$=='](18)) ? parts['$empty?']() : self.parser.$version()['$=='](18)))) {
          return self.$diagnostic("error", "empty_symbol", nil, self.$loc(begin_t).$join(self.$loc(end_t)))
        } else {
          return self.$n("dsym", [].concat(Opal.to_a(parts)), self.$collection_map(begin_t, parts, end_t))
        }
      }, $Default_symbol_compose$20.$$arity = 3);
      
      Opal.def(self, '$xstring_compose', $Default_xstring_compose$21 = function $$xstring_compose(begin_t, parts, end_t) {
        var self = this;

        return self.$n("xstr", [].concat(Opal.to_a(parts)), self.$string_map(begin_t, parts, end_t))
      }, $Default_xstring_compose$21.$$arity = 3);
      
      Opal.def(self, '$dedent_string', $Default_dedent_string$22 = function $$dedent_string(node, dedent_level) {
        var $a, $$23, self = this, dedenter = nil, str = nil;

        
        if ($truthy(dedent_level['$nil?']()['$!']())) {
          
          dedenter = $$$($$($nesting, 'Lexer'), 'Dedenter').$new(dedent_level);
          if (node.$type()['$==']("str")) {
            
            str = node.$children().$first();
            dedenter.$dedent(str);
          } else if ($truthy(($truthy($a = node.$type()['$==']("dstr")) ? $a : node.$type()['$==']("xstr")))) {
            $send(node.$children(), 'each', [], ($$23 = function(str_node){var self = $$23.$$s == null ? this : $$23.$$s;

            
              
              if (str_node == null) {
                str_node = nil;
              };
              if (str_node.$type()['$==']("str")) {
                
                str = str_node.$children().$first();
                return dedenter.$dedent(str);
              } else {
                return dedenter.$interrupt()
              };}, $$23.$$s = self, $$23.$$arity = 1, $$23))};};
        return node;
      }, $Default_dedent_string$22.$$arity = 2);
      
      Opal.def(self, '$regexp_options', $Default_regexp_options$24 = function $$regexp_options(regopt_t) {
        var self = this, options = nil;

        
        options = $send(self.$value(regopt_t).$each_char().$sort().$uniq(), 'map', [], "to_sym".$to_proc());
        return self.$n("regopt", options, self.$token_map(regopt_t));
      }, $Default_regexp_options$24.$$arity = 1);
      
      Opal.def(self, '$regexp_compose', $Default_regexp_compose$25 = function $$regexp_compose(begin_t, parts, end_t, options) {
        var self = this, e = nil;

        
        
        try {
          self.$static_regexp(parts, options)
        } catch ($err) {
          if (Opal.rescue($err, [$$($nesting, 'RegexpError')])) {e = $err;
            try {
              self.$diagnostic("error", "invalid_regexp", $hash2(["message"], {"message": e.$message()}), self.$loc(begin_t).$join(self.$loc(end_t)))
            } finally { Opal.pop_exception() }
          } else { throw $err; }
        };;
        return self.$n("regexp", parts['$<<'](options), self.$regexp_map(begin_t, end_t, options));
      }, $Default_regexp_compose$25.$$arity = 4);
      
      Opal.def(self, '$array', $Default_array$26 = function $$array(begin_t, elements, end_t) {
        var self = this;

        return self.$n("array", elements, self.$collection_map(begin_t, elements, end_t))
      }, $Default_array$26.$$arity = 3);
      
      Opal.def(self, '$splat', $Default_splat$27 = function $$splat(star_t, arg) {
        var self = this;

        
        
        if (arg == null) {
          arg = nil;
        };
        if ($truthy(arg['$nil?']())) {
          return self.$n0("splat", self.$unary_op_map(star_t))
        } else {
          return self.$n("splat", [arg], self.$unary_op_map(star_t, arg))
        };
      }, $Default_splat$27.$$arity = -2);
      
      Opal.def(self, '$word', $Default_word$28 = function $$word(parts) {
        var self = this;

        if ($truthy(self['$collapse_string_parts?'](parts))) {
          return parts.$first()
        } else {
          return self.$n("dstr", [].concat(Opal.to_a(parts)), self.$collection_map(nil, parts, nil))
        }
      }, $Default_word$28.$$arity = 1);
      
      Opal.def(self, '$words_compose', $Default_words_compose$29 = function $$words_compose(begin_t, parts, end_t) {
        var self = this;

        return self.$n("array", [].concat(Opal.to_a(parts)), self.$collection_map(begin_t, parts, end_t))
      }, $Default_words_compose$29.$$arity = 3);
      
      Opal.def(self, '$symbols_compose', $Default_symbols_compose$30 = function $$symbols_compose(begin_t, parts, end_t) {
        var $$31, self = this;

        
        parts = $send(parts, 'map', [], ($$31 = function(part){var self = $$31.$$s == null ? this : $$31.$$s, $a, $case = nil, value = nil;

        
          
          if (part == null) {
            part = nil;
          };
          return (function() {$case = part.$type();
          if ("str"['$===']($case)) {
          $a = [].concat(Opal.to_a(part)), (value = ($a[0] == null ? nil : $a[0])), $a;
          return part.$updated("sym", [value.$to_sym()]);}
          else if ("dstr"['$===']($case)) {return part.$updated("dsym")}
          else {return part}})();}, $$31.$$s = self, $$31.$$arity = 1, $$31));
        return self.$n("array", [].concat(Opal.to_a(parts)), self.$collection_map(begin_t, parts, end_t));
      }, $Default_symbols_compose$30.$$arity = 3);
      
      Opal.def(self, '$pair', $Default_pair$32 = function $$pair(key, assoc_t, value) {
        var self = this;

        return self.$n("pair", [key, value], self.$binary_op_map(key, assoc_t, value))
      }, $Default_pair$32.$$arity = 3);
      
      Opal.def(self, '$pair_list_18', $Default_pair_list_18$33 = function $$pair_list_18(list) {
        var $$34, self = this;

        if ($truthy(list.$size()['$%'](2)['$!='](0))) {
          return self.$diagnostic("error", "odd_hash", nil, list.$last().$loc().$expression())
        } else {
          return $send(list.$each_slice(2), 'map', [], ($$34 = function(key, value){var self = $$34.$$s == null ? this : $$34.$$s;

          
            
            if (key == null) {
              key = nil;
            };
            
            if (value == null) {
              value = nil;
            };
            return self.$n("pair", [key, value], self.$binary_op_map(key, nil, value));}, $$34.$$s = self, $$34.$$arity = 2, $$34))
        }
      }, $Default_pair_list_18$33.$$arity = 1);
      
      Opal.def(self, '$pair_keyword', $Default_pair_keyword$35 = function $$pair_keyword(key_t, value) {
        var $a, $b, self = this, key_map = nil, pair_map = nil, key = nil;

        
        $b = self.$pair_keyword_map(key_t, value), $a = Opal.to_ary($b), (key_map = ($a[0] == null ? nil : $a[0])), (pair_map = ($a[1] == null ? nil : $a[1])), $b;
        key = self.$n("sym", [self.$value(key_t).$to_sym()], key_map);
        return self.$n("pair", [key, value], pair_map);
      }, $Default_pair_keyword$35.$$arity = 2);
      
      Opal.def(self, '$pair_quoted', $Default_pair_quoted$36 = function $$pair_quoted(begin_t, parts, end_t, value) {
        var $a, $b, self = this, pair_map = nil, key = nil;

        
        $b = self.$pair_quoted_map(begin_t, end_t, value), $a = Opal.to_ary($b), (end_t = ($a[0] == null ? nil : $a[0])), (pair_map = ($a[1] == null ? nil : $a[1])), $b;
        key = self.$symbol_compose(begin_t, parts, end_t);
        return self.$n("pair", [key, value], pair_map);
      }, $Default_pair_quoted$36.$$arity = 4);
      
      Opal.def(self, '$kwsplat', $Default_kwsplat$37 = function $$kwsplat(dstar_t, arg) {
        var self = this;

        return self.$n("kwsplat", [arg], self.$unary_op_map(dstar_t, arg))
      }, $Default_kwsplat$37.$$arity = 2);
      
      Opal.def(self, '$associate', $Default_associate$38 = function $$associate(begin_t, pairs, end_t) {
        var self = this;

        return self.$n("hash", [].concat(Opal.to_a(pairs)), self.$collection_map(begin_t, pairs, end_t))
      }, $Default_associate$38.$$arity = 3);
      
      Opal.def(self, '$range_inclusive', $Default_range_inclusive$39 = function $$range_inclusive(lhs, dot2_t, rhs) {
        var self = this;

        return self.$n("irange", [lhs, rhs], self.$range_map(lhs, dot2_t, rhs))
      }, $Default_range_inclusive$39.$$arity = 3);
      
      Opal.def(self, '$range_exclusive', $Default_range_exclusive$40 = function $$range_exclusive(lhs, dot3_t, rhs) {
        var self = this;

        return self.$n("erange", [lhs, rhs], self.$range_map(lhs, dot3_t, rhs))
      }, $Default_range_exclusive$40.$$arity = 3);
      
      Opal.def(self, '$self', $Default_self$41 = function $$self(token) {
        var self = this;

        return self.$n0("self", self.$token_map(token))
      }, $Default_self$41.$$arity = 1);
      
      Opal.def(self, '$ident', $Default_ident$42 = function $$ident(token) {
        var self = this;

        return self.$n("ident", [self.$value(token).$to_sym()], self.$variable_map(token))
      }, $Default_ident$42.$$arity = 1);
      
      Opal.def(self, '$ivar', $Default_ivar$43 = function $$ivar(token) {
        var self = this;

        return self.$n("ivar", [self.$value(token).$to_sym()], self.$variable_map(token))
      }, $Default_ivar$43.$$arity = 1);
      
      Opal.def(self, '$gvar', $Default_gvar$44 = function $$gvar(token) {
        var self = this;

        return self.$n("gvar", [self.$value(token).$to_sym()], self.$variable_map(token))
      }, $Default_gvar$44.$$arity = 1);
      
      Opal.def(self, '$cvar', $Default_cvar$45 = function $$cvar(token) {
        var self = this;

        return self.$n("cvar", [self.$value(token).$to_sym()], self.$variable_map(token))
      }, $Default_cvar$45.$$arity = 1);
      
      Opal.def(self, '$back_ref', $Default_back_ref$46 = function $$back_ref(token) {
        var self = this;

        return self.$n("back_ref", [self.$value(token).$to_sym()], self.$token_map(token))
      }, $Default_back_ref$46.$$arity = 1);
      
      Opal.def(self, '$nth_ref', $Default_nth_ref$47 = function $$nth_ref(token) {
        var self = this;

        return self.$n("nth_ref", [self.$value(token)], self.$token_map(token))
      }, $Default_nth_ref$47.$$arity = 1);
      
      Opal.def(self, '$accessible', $Default_accessible$48 = function $$accessible(node) {
        var $a, self = this, $case = nil, name = nil;

        return (function() {$case = node.$type();
        if ("__FILE__"['$===']($case)) {if ($truthy(self.emit_file_line_as_literals)) {
          return self.$n("str", [node.$loc().$expression().$source_buffer().$name()], node.$loc().$dup())
        } else {
          return node
        }}
        else if ("__LINE__"['$===']($case)) {if ($truthy(self.emit_file_line_as_literals)) {
          return self.$n("int", [node.$loc().$expression().$line()], node.$loc().$dup())
        } else {
          return node
        }}
        else if ("__ENCODING__"['$===']($case)) {if ($truthy(self.$class().$emit_encoding()['$!']())) {
          return self.$n("const", [self.$n("const", [nil, "Encoding"], nil), "UTF_8"], node.$loc().$dup())
        } else {
          return node
        }}
        else if ("ident"['$===']($case)) {
        $a = [].concat(Opal.to_a(node)), (name = ($a[0] == null ? nil : $a[0])), $a;
        if ($truthy(self.parser.$static_env()['$declared?'](name))) {
          
          if (name.$to_s()['$=='](self.$parser().$current_arg_stack().$top())) {
            self.$diagnostic("error", "circular_argument_reference", $hash2(["var_name"], {"var_name": name.$to_s()}), node.$loc().$expression())};
          return node.$updated("lvar");
        } else {
          
          $a = [].concat(Opal.to_a(node)), (name = ($a[0] == null ? nil : $a[0])), $a;
          return self.$n("send", [nil, name], self.$var_send_map(node));
        };}
        else {return node}})()
      }, $Default_accessible$48.$$arity = 1);
      
      Opal.def(self, '$const', $Default_const$49 = function(name_t) {
        var self = this;

        return self.$n("const", [nil, self.$value(name_t).$to_sym()], self.$constant_map(nil, nil, name_t))
      }, $Default_const$49.$$arity = 1);
      
      Opal.def(self, '$const_global', $Default_const_global$50 = function $$const_global(t_colon3, name_t) {
        var self = this, cbase = nil;

        
        cbase = self.$n0("cbase", self.$token_map(t_colon3));
        return self.$n("const", [cbase, self.$value(name_t).$to_sym()], self.$constant_map(cbase, t_colon3, name_t));
      }, $Default_const_global$50.$$arity = 2);
      
      Opal.def(self, '$const_fetch', $Default_const_fetch$51 = function $$const_fetch(scope, t_colon2, name_t) {
        var self = this;

        return self.$n("const", [scope, self.$value(name_t).$to_sym()], self.$constant_map(scope, t_colon2, name_t))
      }, $Default_const_fetch$51.$$arity = 3);
      
      Opal.def(self, '$__ENCODING__', $Default___ENCODING__$52 = function $$__ENCODING__(__ENCODING__t) {
        var self = this;

        return self.$n0("__ENCODING__", self.$token_map(__ENCODING__t))
      }, $Default___ENCODING__$52.$$arity = 1);
      
      Opal.def(self, '$assignable', $Default_assignable$53 = function $$assignable(node) {
        var $a, self = this, $case = nil, name = nil;

        return (function() {$case = node.$type();
        if ("cvar"['$===']($case)) {return node.$updated("cvasgn")}
        else if ("ivar"['$===']($case)) {return node.$updated("ivasgn")}
        else if ("gvar"['$===']($case)) {return node.$updated("gvasgn")}
        else if ("const"['$===']($case)) {
        if ($truthy(self.parser.$context()['$dynamic_const_definition_allowed?']())) {
        } else {
          self.$diagnostic("error", "dynamic_const", nil, node.$loc().$expression())
        };
        return node.$updated("casgn");}
        else if ("ident"['$===']($case)) {
        $a = [].concat(Opal.to_a(node)), (name = ($a[0] == null ? nil : $a[0])), $a;
        self.$check_assignment_to_numparam(node);
        self.parser.$static_env().$declare(name);
        return node.$updated("lvasgn");}
        else if ("nil"['$===']($case) || "self"['$===']($case) || "true"['$===']($case) || "false"['$===']($case) || "__FILE__"['$===']($case) || "__LINE__"['$===']($case) || "__ENCODING__"['$===']($case)) {return self.$diagnostic("error", "invalid_assignment", nil, node.$loc().$expression())}
        else if ("back_ref"['$===']($case) || "nth_ref"['$===']($case)) {return self.$diagnostic("error", "backref_assignment", nil, node.$loc().$expression())}
        else { return nil }})()
      }, $Default_assignable$53.$$arity = 1);
      
      Opal.def(self, '$const_op_assignable', $Default_const_op_assignable$54 = function $$const_op_assignable(node) {
        var self = this;

        return node.$updated("casgn")
      }, $Default_const_op_assignable$54.$$arity = 1);
      
      Opal.def(self, '$assign', $Default_assign$55 = function $$assign(lhs, eql_t, rhs) {
        var self = this;

        return lhs['$<<'](rhs).$updated(nil, nil, $hash2(["location"], {"location": lhs.$loc().$with_operator(self.$loc(eql_t)).$with_expression(self.$join_exprs(lhs, rhs))}))
      }, $Default_assign$55.$$arity = 3);
      
      Opal.def(self, '$op_assign', $Default_op_assign$56 = function $$op_assign(lhs, op_t, rhs) {
        var self = this, $case = nil, operator = nil, source_map = nil;

        return (function() {$case = lhs.$type();
        if ("gvasgn"['$===']($case) || "ivasgn"['$===']($case) || "lvasgn"['$===']($case) || "cvasgn"['$===']($case) || "casgn"['$===']($case) || "send"['$===']($case) || "csend"['$===']($case) || "index"['$===']($case)) {
        operator = self.$value(op_t)['$[]']($range(0, -1, false)).$to_sym();
        source_map = lhs.$loc().$with_operator(self.$loc(op_t)).$with_expression(self.$join_exprs(lhs, rhs));
        if (lhs.$type()['$==']("index")) {
          lhs = lhs.$updated("indexasgn")};
        return (function() {$case = operator;
        if ("&&"['$===']($case)) {return self.$n("and_asgn", [lhs, rhs], source_map)}
        else if ("||"['$===']($case)) {return self.$n("or_asgn", [lhs, rhs], source_map)}
        else {return self.$n("op_asgn", [lhs, operator, rhs], source_map)}})();}
        else if ("back_ref"['$===']($case) || "nth_ref"['$===']($case)) {return self.$diagnostic("error", "backref_assignment", nil, lhs.$loc().$expression())}
        else { return nil }})()
      }, $Default_op_assign$56.$$arity = 3);
      
      Opal.def(self, '$multi_lhs', $Default_multi_lhs$57 = function $$multi_lhs(begin_t, items, end_t) {
        var self = this;

        return self.$n("mlhs", [].concat(Opal.to_a(items)), self.$collection_map(begin_t, items, end_t))
      }, $Default_multi_lhs$57.$$arity = 3);
      
      Opal.def(self, '$multi_assign', $Default_multi_assign$58 = function $$multi_assign(lhs, eql_t, rhs) {
        var self = this;

        return self.$n("masgn", [lhs, rhs], self.$binary_op_map(lhs, eql_t, rhs))
      }, $Default_multi_assign$58.$$arity = 3);
      
      Opal.def(self, '$rassign', $Default_rassign$59 = function $$rassign(lhs, assoc_t, rhs) {
        var self = this;

        return self.$n("rasgn", [lhs, rhs], self.$binary_op_map(lhs, assoc_t, rhs))
      }, $Default_rassign$59.$$arity = 3);
      
      Opal.def(self, '$multi_rassign', $Default_multi_rassign$60 = function $$multi_rassign(lhs, assoc_t, rhs) {
        var self = this;

        return self.$n("mrasgn", [lhs, rhs], self.$binary_op_map(lhs, assoc_t, rhs))
      }, $Default_multi_rassign$60.$$arity = 3);
      
      Opal.def(self, '$def_class', $Default_def_class$61 = function $$def_class(class_t, name, lt_t, superclass, body, end_t) {
        var self = this;

        return self.$n("class", [name, superclass, body], self.$module_definition_map(class_t, name, lt_t, end_t))
      }, $Default_def_class$61.$$arity = 6);
      
      Opal.def(self, '$def_sclass', $Default_def_sclass$62 = function $$def_sclass(class_t, lshft_t, expr, body, end_t) {
        var self = this;

        return self.$n("sclass", [expr, body], self.$module_definition_map(class_t, nil, lshft_t, end_t))
      }, $Default_def_sclass$62.$$arity = 5);
      
      Opal.def(self, '$def_module', $Default_def_module$63 = function $$def_module(module_t, name, body, end_t) {
        var self = this;

        return self.$n("module", [name, body], self.$module_definition_map(module_t, name, nil, end_t))
      }, $Default_def_module$63.$$arity = 4);
      
      Opal.def(self, '$def_method', $Default_def_method$64 = function $$def_method(def_t, name_t, args, body, end_t) {
        var self = this;

        return self.$n("def", [self.$value(name_t).$to_sym(), args, body], self.$definition_map(def_t, nil, name_t, end_t))
      }, $Default_def_method$64.$$arity = 5);
      
      Opal.def(self, '$def_endless_method', $Default_def_endless_method$65 = function $$def_endless_method(def_t, name_t, args, assignment_t, body) {
        var self = this;

        return self.$n("def_e", [self.$value(name_t).$to_sym(), args, body], self.$endless_definition_map(def_t, nil, name_t, assignment_t, body))
      }, $Default_def_endless_method$65.$$arity = 5);
      
      Opal.def(self, '$def_singleton', $Default_def_singleton$66 = function $$def_singleton(def_t, definee, dot_t, name_t, args, body, end_t) {
        var self = this;

        
        if ($truthy(self.$validate_definee(definee))) {
        } else {
          return nil
        };
        return self.$n("defs", [definee, self.$value(name_t).$to_sym(), args, body], self.$definition_map(def_t, dot_t, name_t, end_t));
      }, $Default_def_singleton$66.$$arity = 7);
      
      Opal.def(self, '$def_endless_singleton', $Default_def_endless_singleton$67 = function $$def_endless_singleton(def_t, definee, dot_t, name_t, args, assignment_t, body) {
        var self = this;

        
        if ($truthy(self.$validate_definee(definee))) {
        } else {
          return nil
        };
        return self.$n("defs_e", [definee, self.$value(name_t).$to_sym(), args, body], self.$endless_definition_map(def_t, dot_t, name_t, assignment_t, body));
      }, $Default_def_endless_singleton$67.$$arity = 7);
      
      Opal.def(self, '$undef_method', $Default_undef_method$68 = function $$undef_method(undef_t, names) {
        var self = this;

        return self.$n("undef", [].concat(Opal.to_a(names)), self.$keyword_map(undef_t, nil, names, nil))
      }, $Default_undef_method$68.$$arity = 2);
      
      Opal.def(self, '$alias', $Default_alias$69 = function $$alias(alias_t, to, from) {
        var self = this;

        return self.$n("alias", [to, from], self.$keyword_map(alias_t, nil, [to, from], nil))
      }, $Default_alias$69.$$arity = 3);
      
      Opal.def(self, '$args', $Default_args$70 = function $$args(begin_t, args, end_t, check_args) {
        var self = this;

        
        
        if (check_args == null) {
          check_args = true;
        };
        if ($truthy(check_args)) {
          args = self.$check_duplicate_args(args)};
        return self.$n("args", args, self.$collection_map(begin_t, args, end_t));
      }, $Default_args$70.$$arity = -4);
      
      Opal.def(self, '$numargs', $Default_numargs$71 = function $$numargs(max_numparam) {
        var self = this;

        return self.$n("numargs", [max_numparam], nil)
      }, $Default_numargs$71.$$arity = 1);
      
      Opal.def(self, '$forward_only_args', $Default_forward_only_args$72 = function $$forward_only_args(begin_t, dots_t, end_t) {
        var self = this, arg = nil;

        if ($truthy(self.$class().$emit_forward_arg())) {
          
          arg = self.$forward_arg(dots_t);
          return self.$n("args", [arg], self.$collection_map(begin_t, [arg], end_t));
        } else {
          return self.$n("forward_args", [], self.$collection_map(begin_t, self.$token_map(dots_t), end_t))
        }
      }, $Default_forward_only_args$72.$$arity = 3);
      
      Opal.def(self, '$forward_arg', $Default_forward_arg$73 = function $$forward_arg(dots_t) {
        var self = this;

        return self.$n("forward_arg", [], self.$token_map(dots_t))
      }, $Default_forward_arg$73.$$arity = 1);
      
      Opal.def(self, '$arg', $Default_arg$74 = function $$arg(name_t) {
        var self = this;

        return self.$n("arg", [self.$value(name_t).$to_sym()], self.$variable_map(name_t))
      }, $Default_arg$74.$$arity = 1);
      
      Opal.def(self, '$optarg', $Default_optarg$75 = function $$optarg(name_t, eql_t, value) {
        var self = this;

        return self.$n("optarg", [self.$value(name_t).$to_sym(), value], self.$variable_map(name_t).$with_operator(self.$loc(eql_t)).$with_expression(self.$loc(name_t).$join(value.$loc().$expression())))
      }, $Default_optarg$75.$$arity = 3);
      
      Opal.def(self, '$restarg', $Default_restarg$76 = function $$restarg(star_t, name_t) {
        var self = this;

        
        
        if (name_t == null) {
          name_t = nil;
        };
        if ($truthy(name_t)) {
          return self.$n("restarg", [self.$value(name_t).$to_sym()], self.$arg_prefix_map(star_t, name_t))
        } else {
          return self.$n0("restarg", self.$arg_prefix_map(star_t))
        };
      }, $Default_restarg$76.$$arity = -2);
      
      Opal.def(self, '$kwarg', $Default_kwarg$77 = function $$kwarg(name_t) {
        var self = this;

        return self.$n("kwarg", [self.$value(name_t).$to_sym()], self.$kwarg_map(name_t))
      }, $Default_kwarg$77.$$arity = 1);
      
      Opal.def(self, '$kwoptarg', $Default_kwoptarg$78 = function $$kwoptarg(name_t, value) {
        var self = this;

        return self.$n("kwoptarg", [self.$value(name_t).$to_sym(), value], self.$kwarg_map(name_t, value))
      }, $Default_kwoptarg$78.$$arity = 2);
      
      Opal.def(self, '$kwrestarg', $Default_kwrestarg$79 = function $$kwrestarg(dstar_t, name_t) {
        var self = this;

        
        
        if (name_t == null) {
          name_t = nil;
        };
        if ($truthy(name_t)) {
          return self.$n("kwrestarg", [self.$value(name_t).$to_sym()], self.$arg_prefix_map(dstar_t, name_t))
        } else {
          return self.$n0("kwrestarg", self.$arg_prefix_map(dstar_t))
        };
      }, $Default_kwrestarg$79.$$arity = -2);
      
      Opal.def(self, '$kwnilarg', $Default_kwnilarg$80 = function $$kwnilarg(dstar_t, nil_t) {
        var self = this;

        return self.$n0("kwnilarg", self.$arg_prefix_map(dstar_t, nil_t))
      }, $Default_kwnilarg$80.$$arity = 2);
      
      Opal.def(self, '$shadowarg', $Default_shadowarg$81 = function $$shadowarg(name_t) {
        var self = this;

        return self.$n("shadowarg", [self.$value(name_t).$to_sym()], self.$variable_map(name_t))
      }, $Default_shadowarg$81.$$arity = 1);
      
      Opal.def(self, '$blockarg', $Default_blockarg$82 = function $$blockarg(amper_t, name_t) {
        var self = this;

        return self.$n("blockarg", [self.$value(name_t).$to_sym()], self.$arg_prefix_map(amper_t, name_t))
      }, $Default_blockarg$82.$$arity = 2);
      
      Opal.def(self, '$procarg0', $Default_procarg0$83 = function $$procarg0(arg) {
        var $a, self = this;

        if ($truthy(self.$class().$emit_procarg0())) {
          if ($truthy((($a = arg.$type()['$==']("arg")) ? self.$class().$emit_arg_inside_procarg0() : arg.$type()['$==']("arg")))) {
            return self.$n("procarg0", [arg], $$$($$$($$($nesting, 'Source'), 'Map'), 'Collection').$new(nil, nil, arg.$location().$expression()))
          } else {
            return arg.$updated("procarg0")
          }
        } else {
          return arg
        }
      }, $Default_procarg0$83.$$arity = 1);
      
      Opal.def(self, '$arg_expr', $Default_arg_expr$84 = function $$arg_expr(expr) {
        var self = this;

        if (expr.$type()['$==']("lvasgn")) {
          return expr.$updated("arg")
        } else {
          return self.$n("arg_expr", [expr], expr.$loc().$dup())
        }
      }, $Default_arg_expr$84.$$arity = 1);
      
      Opal.def(self, '$restarg_expr', $Default_restarg_expr$85 = function $$restarg_expr(star_t, expr) {
        var self = this;

        
        
        if (expr == null) {
          expr = nil;
        };
        if ($truthy(expr['$nil?']())) {
          return self.$n0("restarg", self.$token_map(star_t))
        } else if (expr.$type()['$==']("lvasgn")) {
          return expr.$updated("restarg")
        } else {
          return self.$n("restarg_expr", [expr], expr.$loc().$dup())
        };
      }, $Default_restarg_expr$85.$$arity = -2);
      
      Opal.def(self, '$blockarg_expr', $Default_blockarg_expr$86 = function $$blockarg_expr(amper_t, expr) {
        var self = this;

        if (expr.$type()['$==']("lvasgn")) {
          return expr.$updated("blockarg")
        } else {
          return self.$n("blockarg_expr", [expr], expr.$loc().$dup())
        }
      }, $Default_blockarg_expr$86.$$arity = 2);
      
      Opal.def(self, '$objc_kwarg', $Default_objc_kwarg$87 = function $$objc_kwarg(kwname_t, assoc_t, name_t) {
        var self = this, kwname_l = nil, operator_l = nil;

        
        kwname_l = self.$loc(kwname_t);
        if ($truthy(assoc_t['$nil?']())) {
          
          kwname_l = kwname_l.$resize($rb_minus(kwname_l.$size(), 1));
          operator_l = kwname_l.$end().$resize(1);
        } else {
          operator_l = self.$loc(assoc_t)
        };
        return self.$n("objc_kwarg", [self.$value(kwname_t).$to_sym(), self.$value(name_t).$to_sym()], $$$($$$($$($nesting, 'Source'), 'Map'), 'ObjcKwarg').$new(kwname_l, operator_l, self.$loc(name_t), kwname_l.$join(self.$loc(name_t))));
      }, $Default_objc_kwarg$87.$$arity = 3);
      
      Opal.def(self, '$objc_restarg', $Default_objc_restarg$88 = function $$objc_restarg(star_t, name) {
        var self = this;

        
        
        if (name == null) {
          name = nil;
        };
        if ($truthy(name['$nil?']())) {
          return self.$n0("restarg", self.$arg_prefix_map(star_t))
        } else if (name.$type()['$==']("arg")) {
          return name.$updated("restarg", nil, $hash2(["location"], {"location": name.$loc().$with_operator(self.$loc(star_t))}))
        } else {
          return self.$n("objc_restarg", [name], self.$unary_op_map(star_t, name))
        };
      }, $Default_objc_restarg$88.$$arity = -2);
      
      Opal.def(self, '$call_type_for_dot', $Default_call_type_for_dot$89 = function $$call_type_for_dot(dot_t) {
        var $a, self = this;

        if ($truthy(($truthy($a = dot_t['$nil?']()['$!']()) ? self.$value(dot_t)['$==']("anddot") : $a))) {
          return "csend"
        } else {
          return "send"
        }
      }, $Default_call_type_for_dot$89.$$arity = 1);
      
      Opal.def(self, '$forwarded_args', $Default_forwarded_args$90 = function $$forwarded_args(dots_t) {
        var self = this;

        return self.$n("forwarded_args", [], self.$token_map(dots_t))
      }, $Default_forwarded_args$90.$$arity = 1);
      
      Opal.def(self, '$call_method', $Default_call_method$91 = function $$call_method(receiver, dot_t, selector_t, lparen_t, args, rparen_t) {
        var self = this, type = nil;

        
        
        if (lparen_t == null) {
          lparen_t = nil;
        };
        
        if (args == null) {
          args = [];
        };
        
        if (rparen_t == null) {
          rparen_t = nil;
        };
        type = self.$call_type_for_dot(dot_t);
        if ($truthy(selector_t['$nil?']())) {
          return self.$n(type, [receiver, "call"].concat(Opal.to_a(args)), self.$send_map(receiver, dot_t, nil, lparen_t, args, rparen_t))
        } else {
          return self.$n(type, [receiver, self.$value(selector_t).$to_sym()].concat(Opal.to_a(args)), self.$send_map(receiver, dot_t, selector_t, lparen_t, args, rparen_t))
        };
      }, $Default_call_method$91.$$arity = -4);
      
      Opal.def(self, '$call_lambda', $Default_call_lambda$92 = function $$call_lambda(lambda_t) {
        var self = this;

        if ($truthy(self.$class().$emit_lambda())) {
          return self.$n0("lambda", self.$expr_map(self.$loc(lambda_t)))
        } else {
          return self.$n("send", [nil, "lambda"], self.$send_map(nil, nil, lambda_t))
        }
      }, $Default_call_lambda$92.$$arity = 1);
      
      Opal.def(self, '$block', $Default_block$93 = function $$block(method_call, begin_t, args, body, end_t) {
        var $a, $b, self = this, _receiver = nil, _selector = nil, call_args = nil, last_arg = nil, block_type = nil, actual_send = nil, block = nil;

        
        $a = [].concat(Opal.to_a(method_call)), (_receiver = ($a[0] == null ? nil : $a[0])), (_selector = ($a[1] == null ? nil : $a[1])), (call_args = $slice.call($a, 2)), $a;
        if (method_call.$type()['$==']("yield")) {
          self.$diagnostic("error", "block_given_to_yield", nil, method_call.$loc().$keyword(), [self.$loc(begin_t)])};
        last_arg = call_args.$last();
        if ($truthy(($truthy($a = last_arg) ? ($truthy($b = last_arg.$type()['$==']("block_pass")) ? $b : last_arg.$type()['$==']("forwarded_args")) : $a))) {
          self.$diagnostic("error", "block_and_blockarg", nil, last_arg.$loc().$expression(), [self.$loc(begin_t)])};
        if (args.$type()['$==']("numargs")) {
          
          block_type = "numblock";
          args = args.$children()['$[]'](0);
        } else {
          block_type = "block"
        };
        if ($truthy(["send", "csend", "index", "super", "zsuper", "lambda"]['$include?'](method_call.$type()))) {
          return self.$n(block_type, [method_call, args, body], self.$block_map(method_call.$loc().$expression(), begin_t, end_t))
        } else {
          
          $a = [].concat(Opal.to_a(method_call)), (actual_send = ($a[0] == null ? nil : $a[0])), $a;
          block = self.$n(block_type, [actual_send, args, body], self.$block_map(actual_send.$loc().$expression(), begin_t, end_t));
          return self.$n(method_call.$type(), [block], method_call.$loc().$with_expression(self.$join_exprs(method_call, block)));
        };
      }, $Default_block$93.$$arity = 5);
      
      Opal.def(self, '$block_pass', $Default_block_pass$94 = function $$block_pass(amper_t, arg) {
        var self = this;

        return self.$n("block_pass", [arg], self.$unary_op_map(amper_t, arg))
      }, $Default_block_pass$94.$$arity = 2);
      
      Opal.def(self, '$objc_varargs', $Default_objc_varargs$95 = function $$objc_varargs(pair, rest_of_varargs) {
        var $a, self = this, value = nil, first_vararg = nil, vararg_array = nil;

        
        $a = [].concat(Opal.to_a(pair)), (value = ($a[0] == null ? nil : $a[0])), (first_vararg = ($a[1] == null ? nil : $a[1])), $a;
        vararg_array = self.$array(nil, [first_vararg].concat(Opal.to_a(rest_of_varargs)), nil).$updated("objc_varargs");
        return pair.$updated(nil, [value, vararg_array], $hash2(["location"], {"location": pair.$loc().$with_expression(pair.$loc().$expression().$join(vararg_array.$loc().$expression()))}));
      }, $Default_objc_varargs$95.$$arity = 2);
      
      Opal.def(self, '$attr_asgn', $Default_attr_asgn$96 = function $$attr_asgn(receiver, dot_t, selector_t) {
        var self = this, method_name = nil, type = nil;

        
        method_name = $rb_plus(self.$value(selector_t), "=").$to_sym();
        type = self.$call_type_for_dot(dot_t);
        return self.$n(type, [receiver, method_name], self.$send_map(receiver, dot_t, selector_t));
      }, $Default_attr_asgn$96.$$arity = 3);
      
      Opal.def(self, '$index', $Default_index$97 = function $$index(receiver, lbrack_t, indexes, rbrack_t) {
        var self = this;

        if ($truthy(self.$class().$emit_index())) {
          return self.$n("index", [receiver].concat(Opal.to_a(indexes)), self.$index_map(receiver, lbrack_t, rbrack_t))
        } else {
          return self.$n("send", [receiver, "[]"].concat(Opal.to_a(indexes)), self.$send_index_map(receiver, lbrack_t, rbrack_t))
        }
      }, $Default_index$97.$$arity = 4);
      
      Opal.def(self, '$index_asgn', $Default_index_asgn$98 = function $$index_asgn(receiver, lbrack_t, indexes, rbrack_t) {
        var self = this;

        if ($truthy(self.$class().$emit_index())) {
          return self.$n("indexasgn", [receiver].concat(Opal.to_a(indexes)), self.$index_map(receiver, lbrack_t, rbrack_t))
        } else {
          return self.$n("send", [receiver, "[]="].concat(Opal.to_a(indexes)), self.$send_index_map(receiver, lbrack_t, rbrack_t))
        }
      }, $Default_index_asgn$98.$$arity = 4);
      
      Opal.def(self, '$binary_op', $Default_binary_op$99 = function $$binary_op(receiver, operator_t, arg) {
        var self = this, source_map = nil, operator = nil, method_call = nil;

        
        source_map = self.$send_binary_op_map(receiver, operator_t, arg);
        if (self.parser.$version()['$=='](18)) {
          
          operator = self.$value(operator_t);
          if (operator['$==']("!=")) {
            method_call = self.$n("send", [receiver, "==", arg], source_map)
          } else if (operator['$==']("!~")) {
            method_call = self.$n("send", [receiver, "=~", arg], source_map)};
          if ($truthy(["!=", "!~"]['$include?'](operator))) {
            return self.$n("not", [method_call], self.$expr_map(source_map.$expression()))};};
        return self.$n("send", [receiver, self.$value(operator_t).$to_sym(), arg], source_map);
      }, $Default_binary_op$99.$$arity = 3);
      
      Opal.def(self, '$match_op', $Default_match_op$100 = function $$match_op(receiver, match_t, arg) {
        var $$101, self = this, source_map = nil, regexp = nil;

        
        source_map = self.$send_binary_op_map(receiver, match_t, arg);
        if ($truthy((regexp = self.$static_regexp_node(receiver)))) {
          
          $send(regexp.$names(), 'each', [], ($$101 = function(name){var self = $$101.$$s == null ? this : $$101.$$s;
            if (self.parser == null) self.parser = nil;

          
            
            if (name == null) {
              name = nil;
            };
            return self.parser.$static_env().$declare(name);}, $$101.$$s = self, $$101.$$arity = 1, $$101));
          return self.$n("match_with_lvasgn", [receiver, arg], source_map);
        } else {
          return self.$n("send", [receiver, "=~", arg], source_map)
        };
      }, $Default_match_op$100.$$arity = 3);
      
      Opal.def(self, '$unary_op', $Default_unary_op$102 = function $$unary_op(op_t, receiver) {
        var self = this, $case = nil, method = nil;

        
        $case = self.$value(op_t);
        if ("+"['$===']($case) || "-"['$===']($case)) {method = $rb_plus(self.$value(op_t), "@")}
        else {method = self.$value(op_t)};
        return self.$n("send", [receiver, method.$to_sym()], self.$send_unary_op_map(op_t, receiver));
      }, $Default_unary_op$102.$$arity = 2);
      
      Opal.def(self, '$not_op', $Default_not_op$103 = function $$not_op(not_t, begin_t, receiver, end_t) {
        var self = this, nil_node = nil;

        
        
        if (begin_t == null) {
          begin_t = nil;
        };
        
        if (receiver == null) {
          receiver = nil;
        };
        
        if (end_t == null) {
          end_t = nil;
        };
        if (self.parser.$version()['$=='](18)) {
          return self.$n("not", [self.$check_condition(receiver)], self.$unary_op_map(not_t, receiver))
        } else if ($truthy(receiver['$nil?']())) {
          
          nil_node = self.$n0("begin", self.$collection_map(begin_t, nil, end_t));
          return self.$n("send", [nil_node, "!"], self.$send_unary_op_map(not_t, nil_node));
        } else {
          return self.$n("send", [self.$check_condition(receiver), "!"], self.$send_map(nil, nil, not_t, begin_t, [receiver], end_t))
        };
      }, $Default_not_op$103.$$arity = -2);
      
      Opal.def(self, '$logical_op', $Default_logical_op$104 = function $$logical_op(type, lhs, op_t, rhs) {
        var self = this;

        return self.$n(type, [lhs, rhs], self.$binary_op_map(lhs, op_t, rhs))
      }, $Default_logical_op$104.$$arity = 4);
      
      Opal.def(self, '$condition', $Default_condition$105 = function $$condition(cond_t, cond, then_t, if_true, else_t, if_false, end_t) {
        var self = this;

        return self.$n("if", [self.$check_condition(cond), if_true, if_false], self.$condition_map(cond_t, cond, then_t, if_true, else_t, if_false, end_t))
      }, $Default_condition$105.$$arity = 7);
      
      Opal.def(self, '$condition_mod', $Default_condition_mod$106 = function $$condition_mod(if_true, if_false, cond_t, cond) {
        var $a, self = this;

        return self.$n("if", [self.$check_condition(cond), if_true, if_false], self.$keyword_mod_map(($truthy($a = if_true) ? $a : if_false), cond_t, cond))
      }, $Default_condition_mod$106.$$arity = 4);
      
      Opal.def(self, '$ternary', $Default_ternary$107 = function $$ternary(cond, question_t, if_true, colon_t, if_false) {
        var self = this;

        return self.$n("if", [self.$check_condition(cond), if_true, if_false], self.$ternary_map(cond, question_t, if_true, colon_t, if_false))
      }, $Default_ternary$107.$$arity = 5);
      
      Opal.def(self, '$when', $Default_when$108 = function $$when(when_t, patterns, then_t, body) {
        var self = this, children = nil;

        
        children = patterns['$<<'](body);
        return self.$n("when", children, self.$keyword_map(when_t, then_t, children, nil));
      }, $Default_when$108.$$arity = 4);
      
      Opal.def(self, '$case', $Default_case$109 = function(case_t, expr, when_bodies, else_t, else_body, end_t) {
        var self = this;

        return self.$n("case", [expr].concat(Opal.to_a(when_bodies['$<<'](else_body))), self.$condition_map(case_t, expr, nil, nil, else_t, else_body, end_t))
      }, $Default_case$109.$$arity = 6);
      
      Opal.def(self, '$loop', $Default_loop$110 = function $$loop(type, keyword_t, cond, do_t, body, end_t) {
        var self = this;

        return self.$n(type, [self.$check_condition(cond), body], self.$keyword_map(keyword_t, do_t, nil, end_t))
      }, $Default_loop$110.$$arity = 6);
      
      Opal.def(self, '$loop_mod', $Default_loop_mod$111 = function $$loop_mod(type, body, keyword_t, cond) {
        var self = this;

        
        if (body.$type()['$==']("kwbegin")) {
          type = "" + (type) + "_post"};
        return self.$n(type, [self.$check_condition(cond), body], self.$keyword_mod_map(body, keyword_t, cond));
      }, $Default_loop_mod$111.$$arity = 4);
      
      Opal.def(self, '$for', $Default_for$112 = function(for_t, iterator, in_t, iteratee, do_t, body, end_t) {
        var self = this;

        return self.$n("for", [iterator, iteratee, body], self.$for_map(for_t, in_t, do_t, end_t))
      }, $Default_for$112.$$arity = 7);
      
      Opal.def(self, '$keyword_cmd', $Default_keyword_cmd$113 = function $$keyword_cmd(type, keyword_t, lparen_t, args, rparen_t) {
        var $a, self = this, last_arg = nil;

        
        
        if (lparen_t == null) {
          lparen_t = nil;
        };
        
        if (args == null) {
          args = [];
        };
        
        if (rparen_t == null) {
          rparen_t = nil;
        };
        if ($truthy((($a = type['$==']("yield")) ? $rb_gt(args.$count(), 0) : type['$==']("yield")))) {
          
          last_arg = args.$last();
          if (last_arg.$type()['$==']("block_pass")) {
            self.$diagnostic("error", "block_given_to_yield", nil, self.$loc(keyword_t), [last_arg.$loc().$expression()])};};
        return self.$n(type, args, self.$keyword_map(keyword_t, lparen_t, args, rparen_t));
      }, $Default_keyword_cmd$113.$$arity = -3);
      
      Opal.def(self, '$preexe', $Default_preexe$114 = function $$preexe(preexe_t, lbrace_t, compstmt, rbrace_t) {
        var self = this;

        return self.$n("preexe", [compstmt], self.$keyword_map(preexe_t, lbrace_t, [], rbrace_t))
      }, $Default_preexe$114.$$arity = 4);
      
      Opal.def(self, '$postexe', $Default_postexe$115 = function $$postexe(postexe_t, lbrace_t, compstmt, rbrace_t) {
        var self = this;

        return self.$n("postexe", [compstmt], self.$keyword_map(postexe_t, lbrace_t, [], rbrace_t))
      }, $Default_postexe$115.$$arity = 4);
      
      Opal.def(self, '$rescue_body', $Default_rescue_body$116 = function $$rescue_body(rescue_t, exc_list, assoc_t, exc_var, then_t, compound_stmt) {
        var self = this;

        return self.$n("resbody", [exc_list, exc_var, compound_stmt], self.$rescue_body_map(rescue_t, exc_list, assoc_t, exc_var, then_t, compound_stmt))
      }, $Default_rescue_body$116.$$arity = 6);
      
      Opal.def(self, '$begin_body', $Default_begin_body$117 = function $$begin_body(compound_stmt, rescue_bodies, else_t, else_, ensure_t, ensure_) {
        var self = this, statements = nil;

        
        
        if (rescue_bodies == null) {
          rescue_bodies = [];
        };
        
        if (else_t == null) {
          else_t = nil;
        };
        
        if (else_ == null) {
          else_ = nil;
        };
        
        if (ensure_t == null) {
          ensure_t = nil;
        };
        
        if (ensure_ == null) {
          ensure_ = nil;
        };
        if ($truthy(rescue_bodies['$any?']())) {
          if ($truthy(else_t)) {
            compound_stmt = self.$n("rescue", [compound_stmt].concat(Opal.to_a($rb_plus(rescue_bodies, [else_]))), self.$eh_keyword_map(compound_stmt, nil, rescue_bodies, else_t, else_))
          } else {
            compound_stmt = self.$n("rescue", [compound_stmt].concat(Opal.to_a($rb_plus(rescue_bodies, [nil]))), self.$eh_keyword_map(compound_stmt, nil, rescue_bodies, nil, nil))
          }
        } else if ($truthy(else_t)) {
          
          statements = [];
          if ($truthy(compound_stmt['$nil?']()['$!']())) {
            if (compound_stmt.$type()['$==']("begin")) {
              statements = $rb_plus(statements, compound_stmt.$children())
            } else {
              statements.$push(compound_stmt)
            }};
          statements.$push(self.$n("begin", [else_], self.$collection_map(else_t, [else_], nil)));
          compound_stmt = self.$n("begin", statements, self.$collection_map(nil, statements, nil));};
        if ($truthy(ensure_t)) {
          compound_stmt = self.$n("ensure", [compound_stmt, ensure_], self.$eh_keyword_map(compound_stmt, ensure_t, [ensure_], nil, nil))};
        return compound_stmt;
      }, $Default_begin_body$117.$$arity = -2);
      
      Opal.def(self, '$compstmt', $Default_compstmt$118 = function $$compstmt(statements) {
        var self = this;

        return (function() {
        if ($truthy(statements['$none?']())) {return nil}
        else if ($truthy(statements['$one?']())) {return statements.$first()}
        else {return self.$n("begin", statements, self.$collection_map(nil, statements, nil))}})()
      }, $Default_compstmt$118.$$arity = 1);
      
      Opal.def(self, '$begin', $Default_begin$119 = function $$begin(begin_t, body, end_t) {
        var $a, $b, $c, self = this;

        if ($truthy(body['$nil?']())) {
          return self.$n0("begin", self.$collection_map(begin_t, nil, end_t))
        } else if ($truthy(($truthy($a = body.$type()['$==']("mlhs")) ? $a : ($truthy($b = (($c = body.$type()['$==']("begin")) ? body.$loc().$begin()['$nil?']() : body.$type()['$==']("begin"))) ? body.$loc().$end()['$nil?']() : $b)))) {
          return self.$n(body.$type(), body.$children(), self.$collection_map(begin_t, body.$children(), end_t))
        } else {
          return self.$n("begin", [body], self.$collection_map(begin_t, [body], end_t))
        }
      }, $Default_begin$119.$$arity = 3);
      
      Opal.def(self, '$begin_keyword', $Default_begin_keyword$120 = function $$begin_keyword(begin_t, body, end_t) {
        var $a, $b, self = this;

        if ($truthy(body['$nil?']())) {
          return self.$n0("kwbegin", self.$collection_map(begin_t, nil, end_t))
        } else if ($truthy(($truthy($a = (($b = body.$type()['$==']("begin")) ? body.$loc().$begin()['$nil?']() : body.$type()['$==']("begin"))) ? body.$loc().$end()['$nil?']() : $a))) {
          return self.$n("kwbegin", body.$children(), self.$collection_map(begin_t, body.$children(), end_t))
        } else {
          return self.$n("kwbegin", [body], self.$collection_map(begin_t, [body], end_t))
        }
      }, $Default_begin_keyword$120.$$arity = 3);
      
      Opal.def(self, '$case_match', $Default_case_match$121 = function $$case_match(case_t, expr, in_bodies, else_t, else_body, end_t) {
        var $a, self = this;

        
        if ($truthy(($truthy($a = else_t) ? else_body['$!']() : $a))) {
          else_body = self.$n("empty_else", nil, self.$token_map(else_t))};
        return self.$n("case_match", [expr].concat(Opal.to_a(in_bodies['$<<'](else_body))), self.$condition_map(case_t, expr, nil, nil, else_t, else_body, end_t));
      }, $Default_case_match$121.$$arity = 6);
      
      Opal.def(self, '$in_match', $Default_in_match$122 = function $$in_match(lhs, in_t, rhs) {
        var self = this;

        return self.$n("in_match", [lhs, rhs], self.$binary_op_map(lhs, in_t, rhs))
      }, $Default_in_match$122.$$arity = 3);
      
      Opal.def(self, '$in_pattern', $Default_in_pattern$123 = function $$in_pattern(in_t, pattern, guard, then_t, body) {
        var self = this, children = nil;

        
        children = [pattern, guard, body];
        return self.$n("in_pattern", children, self.$keyword_map(in_t, then_t, children.$compact(), nil));
      }, $Default_in_pattern$123.$$arity = 5);
      
      Opal.def(self, '$if_guard', $Default_if_guard$124 = function $$if_guard(if_t, if_body) {
        var self = this;

        return self.$n("if_guard", [if_body], self.$guard_map(if_t, if_body))
      }, $Default_if_guard$124.$$arity = 2);
      
      Opal.def(self, '$unless_guard', $Default_unless_guard$125 = function $$unless_guard(unless_t, unless_body) {
        var self = this;

        return self.$n("unless_guard", [unless_body], self.$guard_map(unless_t, unless_body))
      }, $Default_unless_guard$125.$$arity = 2);
      
      Opal.def(self, '$match_var', $Default_match_var$126 = function $$match_var(name_t) {
        var self = this, name = nil, name_l = nil;

        
        name = self.$value(name_t).$to_sym();
        name_l = self.$loc(name_t);
        self.$check_lvar_name(name, name_l);
        self.$check_duplicate_pattern_variable(name, name_l);
        self.parser.$static_env().$declare(name);
        return self.$n("match_var", [name], self.$variable_map(name_t));
      }, $Default_match_var$126.$$arity = 1);
      
      Opal.def(self, '$match_hash_var', $Default_match_hash_var$127 = function $$match_hash_var(name_t) {
        var self = this, name = nil, expr_l = nil, name_l = nil;

        
        name = self.$value(name_t).$to_sym();
        expr_l = self.$loc(name_t);
        name_l = expr_l.$adjust($hash2(["end_pos"], {"end_pos": -1}));
        self.$check_lvar_name(name, name_l);
        self.$check_duplicate_pattern_variable(name, name_l);
        self.parser.$static_env().$declare(name);
        return self.$n("match_var", [name], $$$($$$($$($nesting, 'Source'), 'Map'), 'Variable').$new(name_l, expr_l));
      }, $Default_match_hash_var$127.$$arity = 1);
      
      Opal.def(self, '$match_hash_var_from_str', $Default_match_hash_var_from_str$128 = function $$match_hash_var_from_str(begin_t, strings, end_t) {
        var $a, self = this, string = nil, $case = nil, name = nil, name_l = nil, begin_l = nil, end_l = nil, expr_l = nil;

        
        if ($truthy($rb_gt(strings.$length(), 1))) {
          self.$diagnostic("error", "pm_interp_in_var_name", nil, self.$loc(begin_t).$join(self.$loc(end_t)))};
        string = strings['$[]'](0);
        return (function() {$case = string.$type();
        if ("str"['$===']($case)) {
        $a = [].concat(Opal.to_a(string)), (name = ($a[0] == null ? nil : $a[0])), $a;
        name_l = string.$loc().$expression();
        self.$check_lvar_name(name, name_l);
        self.$check_duplicate_pattern_variable(name, name_l);
        self.parser.$static_env().$declare(name);
        if ($truthy((begin_l = string.$loc().$begin()))) {
          name_l = name_l.$adjust($hash2(["begin_pos"], {"begin_pos": begin_l.$length()}))};
        if ($truthy((end_l = string.$loc().$end()))) {
          name_l = name_l.$adjust($hash2(["end_pos"], {"end_pos": end_l.$length()['$-@']()}))};
        expr_l = self.$loc(begin_t).$join(string.$loc().$expression()).$join(self.$loc(end_t));
        return self.$n("match_var", [name.$to_sym()], $$$($$$($$($nesting, 'Source'), 'Map'), 'Variable').$new(name_l, expr_l));}
        else if ("begin"['$===']($case)) {return self.$match_hash_var_from_str(begin_t, string.$children(), end_t)}
        else {return self.$diagnostic("error", "pm_interp_in_var_name", nil, self.$loc(begin_t).$join(self.$loc(end_t)))}})();
      }, $Default_match_hash_var_from_str$128.$$arity = 3);
      
      Opal.def(self, '$match_rest', $Default_match_rest$129 = function $$match_rest(star_t, name_t) {
        var self = this, name = nil;

        
        
        if (name_t == null) {
          name_t = nil;
        };
        if ($truthy(name_t['$nil?']())) {
          return self.$n0("match_rest", self.$unary_op_map(star_t))
        } else {
          
          name = self.$match_var(name_t);
          return self.$n("match_rest", [name], self.$unary_op_map(star_t, name));
        };
      }, $Default_match_rest$129.$$arity = -2);
      
      Opal.def(self, '$hash_pattern', $Default_hash_pattern$130 = function $$hash_pattern(lbrace_t, kwargs, rbrace_t) {
        var self = this, args = nil;

        
        args = self.$check_duplicate_args(kwargs);
        return self.$n("hash_pattern", args, self.$collection_map(lbrace_t, args, rbrace_t));
      }, $Default_hash_pattern$130.$$arity = 3);
      
      Opal.def(self, '$array_pattern', $Default_array_pattern$131 = function $$array_pattern(lbrack_t, elements, rbrack_t) {
        var $$132, self = this, trailing_comma = nil, node_elements = nil, node_type = nil;

        
        if ($truthy(elements['$nil?']())) {
          return self.$n("array_pattern", nil, self.$collection_map(lbrack_t, [], rbrack_t))};
        trailing_comma = false;
        node_elements = $send(elements, 'map', [], ($$132 = function(element){var self = $$132.$$s == null ? this : $$132.$$s;

        
          
          if (element == null) {
            element = nil;
          };
          if (element.$type()['$==']("match_with_trailing_comma")) {
            
            trailing_comma = true;
            return element.$children().$first();
          } else {
            
            trailing_comma = false;
            return element;
          };}, $$132.$$s = self, $$132.$$arity = 1, $$132));
        node_type = (function() {if ($truthy(trailing_comma)) {
          return "array_pattern_with_tail"
        } else {
          return "array_pattern"
        }; return nil; })();
        return self.$n(node_type, node_elements, self.$collection_map(lbrack_t, elements, rbrack_t));
      }, $Default_array_pattern$131.$$arity = 3);
      
      Opal.def(self, '$find_pattern', $Default_find_pattern$133 = function $$find_pattern(lbrack_t, elements, rbrack_t) {
        var self = this;

        return self.$n("find_pattern", elements, self.$collection_map(lbrack_t, elements, rbrack_t))
      }, $Default_find_pattern$133.$$arity = 3);
      
      Opal.def(self, '$match_with_trailing_comma', $Default_match_with_trailing_comma$134 = function $$match_with_trailing_comma(match, comma_t) {
        var self = this;

        return self.$n("match_with_trailing_comma", [match], self.$expr_map(match.$loc().$expression().$join(self.$loc(comma_t))))
      }, $Default_match_with_trailing_comma$134.$$arity = 2);
      
      Opal.def(self, '$const_pattern', $Default_const_pattern$135 = function $$const_pattern(const$, ldelim_t, pattern, rdelim_t) {
        var self = this;

        return self.$n("const_pattern", [const$, pattern], $$$($$$($$($nesting, 'Source'), 'Map'), 'Collection').$new(self.$loc(ldelim_t), self.$loc(rdelim_t), const$.$loc().$expression().$join(self.$loc(rdelim_t))))
      }, $Default_const_pattern$135.$$arity = 4);
      
      Opal.def(self, '$pin', $Default_pin$136 = function $$pin(pin_t, var$) {
        var self = this;

        return self.$n("pin", [var$], self.$send_unary_op_map(pin_t, var$))
      }, $Default_pin$136.$$arity = 2);
      
      Opal.def(self, '$match_alt', $Default_match_alt$137 = function $$match_alt(left, pipe_t, right) {
        var self = this, source_map = nil;

        
        source_map = self.$binary_op_map(left, pipe_t, right);
        return self.$n("match_alt", [left, right], source_map);
      }, $Default_match_alt$137.$$arity = 3);
      
      Opal.def(self, '$match_as', $Default_match_as$138 = function $$match_as(value, assoc_t, as) {
        var self = this, source_map = nil;

        
        source_map = self.$binary_op_map(value, assoc_t, as);
        return self.$n("match_as", [value, as], source_map);
      }, $Default_match_as$138.$$arity = 3);
      
      Opal.def(self, '$match_nil_pattern', $Default_match_nil_pattern$139 = function $$match_nil_pattern(dstar_t, nil_t) {
        var self = this;

        return self.$n0("match_nil_pattern", self.$arg_prefix_map(dstar_t, nil_t))
      }, $Default_match_nil_pattern$139.$$arity = 2);
      
      Opal.def(self, '$match_pair', $Default_match_pair$140 = function $$match_pair(label_type, label, value) {
        var $a, $b, self = this, begin_t = nil, parts = nil, end_t = nil, label_loc = nil, var_name = nil;

        if (label_type['$==']("label")) {
          
          self.$check_duplicate_pattern_key(label['$[]'](0), label['$[]'](1));
          return self.$pair_keyword(label, value);
        } else {
          
          $b = label, $a = Opal.to_ary($b), (begin_t = ($a[0] == null ? nil : $a[0])), (parts = ($a[1] == null ? nil : $a[1])), (end_t = ($a[2] == null ? nil : $a[2])), $b;
          label_loc = self.$loc(begin_t).$join(self.$loc(end_t));
          if ($truthy((var_name = self.$static_string(parts)))) {
            self.$check_duplicate_pattern_key(var_name, label_loc)
          } else {
            self.$diagnostic("error", "pm_interp_in_var_name", nil, label_loc)
          };
          return self.$pair_quoted(begin_t, parts, end_t, value);
        }
      }, $Default_match_pair$140.$$arity = 3);
      
      Opal.def(self, '$match_label', $Default_match_label$141 = function $$match_label(label_type, label) {
        var $a, $b, self = this, begin_t = nil, strings = nil, end_t = nil;

        if (label_type['$==']("label")) {
          return self.$match_hash_var(label)
        } else {
          
          $b = label, $a = Opal.to_ary($b), (begin_t = ($a[0] == null ? nil : $a[0])), (strings = ($a[1] == null ? nil : $a[1])), (end_t = ($a[2] == null ? nil : $a[2])), $b;
          return self.$match_hash_var_from_str(begin_t, strings, end_t);
        }
      }, $Default_match_label$141.$$arity = 2);
      self.$private();
      
      Opal.def(self, '$check_condition', $Default_check_condition$142 = function $$check_condition(cond) {
        var $a, self = this, $case = nil, lhs = nil, rhs = nil, type = nil;

        return (function() {$case = cond.$type();
        if ("masgn"['$===']($case)) {if ($truthy($rb_le(self.parser.$version(), 23))) {
          return self.$diagnostic("error", "masgn_as_condition", nil, cond.$loc().$expression())
        } else {
          return cond
        }}
        else if ("begin"['$===']($case)) {if (cond.$children().$count()['$=='](1)) {
          return cond.$updated(nil, [self.$check_condition(cond.$children().$last())])
        } else {
          return cond
        }}
        else if ("and"['$===']($case) || "or"['$===']($case) || "irange"['$===']($case) || "erange"['$===']($case)) {
        $a = [].concat(Opal.to_a(cond)), (lhs = ($a[0] == null ? nil : $a[0])), (rhs = ($a[1] == null ? nil : $a[1])), $a;
        type = (function() {$case = cond.$type();
        if ("irange"['$===']($case)) {return "iflipflop"}
        else if ("erange"['$===']($case)) {return "eflipflop"}
        else { return nil }})();
        if ($truthy(($truthy($a = ["and", "or"]['$include?'](cond.$type())) ? self.parser.$version()['$=='](18) : $a))) {
          return cond
        } else {
          return cond.$updated(type, [self.$check_condition(lhs), self.$check_condition(rhs)])
        };}
        else if ("regexp"['$===']($case)) {return self.$n("match_current_line", [cond], self.$expr_map(cond.$loc().$expression()))}
        else {return cond}})()
      }, $Default_check_condition$142.$$arity = 1);
      
      Opal.def(self, '$check_duplicate_args', $Default_check_duplicate_args$143 = function $$check_duplicate_args(args, map) {
        var $$144, self = this;

        
        
        if (map == null) {
          map = $hash2([], {});
        };
        return $send(args, 'each', [], ($$144 = function(this_arg){var self = $$144.$$s == null ? this : $$144.$$s, $case = nil;

        
          
          if (this_arg == null) {
            this_arg = nil;
          };
          return (function() {$case = this_arg.$type();
          if ("arg"['$===']($case) || "optarg"['$===']($case) || "restarg"['$===']($case) || "blockarg"['$===']($case) || "kwarg"['$===']($case) || "kwoptarg"['$===']($case) || "kwrestarg"['$===']($case) || "shadowarg"['$===']($case)) {return self.$check_duplicate_arg(this_arg, map)}
          else if ("procarg0"['$===']($case)) {if ($truthy(this_arg.$children()['$[]'](0)['$is_a?']($$($nesting, 'Symbol')))) {
            return self.$check_duplicate_arg(this_arg, map)
          } else {
            return self.$check_duplicate_args(this_arg.$children(), map)
          }}
          else if ("mlhs"['$===']($case)) {return self.$check_duplicate_args(this_arg.$children(), map)}
          else { return nil }})();}, $$144.$$s = self, $$144.$$arity = 1, $$144));
      }, $Default_check_duplicate_args$143.$$arity = -2);
      
      Opal.def(self, '$check_duplicate_arg', $Default_check_duplicate_arg$145 = function $$check_duplicate_arg(this_arg, map) {
        var $a, self = this, this_name = nil, that_arg = nil, that_name = nil, $writer = nil;

        
        
        if (map == null) {
          map = $hash2([], {});
        };
        $a = [].concat(Opal.to_a(this_arg)), (this_name = ($a[0] == null ? nil : $a[0])), $a;
        that_arg = map['$[]'](this_name);
        $a = [].concat(Opal.to_a(that_arg)), (that_name = ($a[0] == null ? nil : $a[0])), $a;
        if ($truthy(that_arg['$nil?']())) {
          
          $writer = [this_name, this_arg];
          $send(map, '[]=', Opal.to_a($writer));
          return $writer[$rb_minus($writer["length"], 1)];
        } else if ($truthy(self['$arg_name_collides?'](this_name, that_name))) {
          return self.$diagnostic("error", "duplicate_argument", nil, this_arg.$loc().$name(), [that_arg.$loc().$name()])
        } else {
          return nil
        };
      }, $Default_check_duplicate_arg$145.$$arity = -2);
      
      Opal.def(self, '$check_assignment_to_numparam', $Default_check_assignment_to_numparam$146 = function $$check_assignment_to_numparam(node) {
        var $a, $b, self = this, name = nil, assigning_to_numparam = nil;

        
        name = node.$children()['$[]'](0).$to_s();
        assigning_to_numparam = ($truthy($a = ($truthy($b = self.parser.$context()['$in_dynamic_block?']()) ? name['$=~'](/^_([1-9])$/) : $b)) ? self.parser.$max_numparam_stack()['$has_numparams?']() : $a);
        if ($truthy(assigning_to_numparam)) {
          return self.$diagnostic("error", "cant_assign_to_numparam", $hash2(["name"], {"name": name}), node.$loc().$expression())
        } else {
          return nil
        };
      }, $Default_check_assignment_to_numparam$146.$$arity = 1);
      
      Opal.def(self, '$arg_name_collides?', $Default_arg_name_collides$ques$147 = function(this_name, that_name) {
        var $a, $b, self = this, $case = nil;

        return (function() {$case = self.parser.$version();
        if ((18)['$===']($case)) {return this_name['$=='](that_name)}
        else if ((19)['$===']($case)) {return ($truthy($a = this_name['$!=']("_")) ? this_name['$=='](that_name) : $a)}
        else {return ($truthy($a = ($truthy($b = this_name) ? this_name['$[]'](0)['$!=']("_") : $b)) ? this_name['$=='](that_name) : $a)}})()
      }, $Default_arg_name_collides$ques$147.$$arity = 2);
      
      Opal.def(self, '$check_lvar_name', $Default_check_lvar_name$148 = function $$check_lvar_name(name, loc) {
        var self = this;

        if ($truthy(name['$=~'](/^[[[:lower:]]|_][[[:alnum:]]_]*$/))) {
          return nil
        } else {
          return self.$diagnostic("error", "lvar_name", $hash2(["name"], {"name": name}), loc)
        }
      }, $Default_check_lvar_name$148.$$arity = 2);
      
      Opal.def(self, '$check_duplicate_pattern_variable', $Default_check_duplicate_pattern_variable$149 = function $$check_duplicate_pattern_variable(name, loc) {
        var self = this;

        
        if ($truthy(name.$to_s()['$start_with?']("_"))) {
          return nil};
        if ($truthy(self.parser.$pattern_variables()['$declared?'](name))) {
          self.$diagnostic("error", "duplicate_variable_name", $hash2(["name"], {"name": name.$to_s()}), loc)};
        return self.parser.$pattern_variables().$declare(name);
      }, $Default_check_duplicate_pattern_variable$149.$$arity = 2);
      
      Opal.def(self, '$check_duplicate_pattern_key', $Default_check_duplicate_pattern_key$150 = function $$check_duplicate_pattern_key(name, loc) {
        var self = this;

        
        if ($truthy(self.parser.$pattern_hash_keys()['$declared?'](name))) {
          self.$diagnostic("error", "duplicate_pattern_key", $hash2(["name"], {"name": name.$to_s()}), loc)};
        return self.parser.$pattern_hash_keys().$declare(name);
      }, $Default_check_duplicate_pattern_key$150.$$arity = 2);
      
      Opal.def(self, '$n', $Default_n$151 = function $$n(type, children, source_map) {
        var self = this;

        return $$$($$($nesting, 'AST'), 'Node').$new(type, children, $hash2(["location"], {"location": source_map}))
      }, $Default_n$151.$$arity = 3);
      
      Opal.def(self, '$n0', $Default_n0$152 = function $$n0(type, source_map) {
        var self = this;

        return self.$n(type, [], source_map)
      }, $Default_n0$152.$$arity = 2);
      
      Opal.def(self, '$join_exprs', $Default_join_exprs$153 = function $$join_exprs(left_expr, right_expr) {
        var self = this;

        return left_expr.$loc().$expression().$join(right_expr.$loc().$expression())
      }, $Default_join_exprs$153.$$arity = 2);
      
      Opal.def(self, '$token_map', $Default_token_map$154 = function $$token_map(token) {
        var self = this;

        return $$$($$($nesting, 'Source'), 'Map').$new(self.$loc(token))
      }, $Default_token_map$154.$$arity = 1);
      
      Opal.def(self, '$delimited_string_map', $Default_delimited_string_map$155 = function $$delimited_string_map(string_t) {
        var self = this, str_range = nil, begin_l = nil, end_l = nil;

        
        str_range = self.$loc(string_t);
        begin_l = str_range.$with($hash2(["end_pos"], {"end_pos": $rb_plus(str_range.$begin_pos(), 1)}));
        end_l = str_range.$with($hash2(["begin_pos"], {"begin_pos": $rb_minus(str_range.$end_pos(), 1)}));
        return $$$($$$($$($nesting, 'Source'), 'Map'), 'Collection').$new(begin_l, end_l, self.$loc(string_t));
      }, $Default_delimited_string_map$155.$$arity = 1);
      
      Opal.def(self, '$prefix_string_map', $Default_prefix_string_map$156 = function $$prefix_string_map(symbol) {
        var self = this, str_range = nil, begin_l = nil;

        
        str_range = self.$loc(symbol);
        begin_l = str_range.$with($hash2(["end_pos"], {"end_pos": $rb_plus(str_range.$begin_pos(), 1)}));
        return $$$($$$($$($nesting, 'Source'), 'Map'), 'Collection').$new(begin_l, nil, self.$loc(symbol));
      }, $Default_prefix_string_map$156.$$arity = 1);
      
      Opal.def(self, '$unquoted_map', $Default_unquoted_map$157 = function $$unquoted_map(token) {
        var self = this;

        return $$$($$$($$($nesting, 'Source'), 'Map'), 'Collection').$new(nil, nil, self.$loc(token))
      }, $Default_unquoted_map$157.$$arity = 1);
      
      Opal.def(self, '$pair_keyword_map', $Default_pair_keyword_map$158 = function $$pair_keyword_map(key_t, value_e) {
        var self = this, key_range = nil, key_l = nil, colon_l = nil;

        
        key_range = self.$loc(key_t);
        key_l = key_range.$adjust($hash2(["end_pos"], {"end_pos": -1}));
        colon_l = key_range.$with($hash2(["begin_pos"], {"begin_pos": $rb_minus(key_range.$end_pos(), 1)}));
        return [$$$($$$($$($nesting, 'Source'), 'Map'), 'Collection').$new(nil, nil, key_l), $$$($$$($$($nesting, 'Source'), 'Map'), 'Operator').$new(colon_l, key_range.$join(value_e.$loc().$expression()))];
      }, $Default_pair_keyword_map$158.$$arity = 2);
      
      Opal.def(self, '$pair_quoted_map', $Default_pair_quoted_map$159 = function $$pair_quoted_map(begin_t, end_t, value_e) {
        var self = this, end_l = nil, quote_l = nil, colon_l = nil;

        
        end_l = self.$loc(end_t);
        quote_l = end_l.$with($hash2(["begin_pos", "end_pos"], {"begin_pos": $rb_minus(end_l.$end_pos(), 2), "end_pos": $rb_minus(end_l.$end_pos(), 1)}));
        colon_l = end_l.$with($hash2(["begin_pos"], {"begin_pos": $rb_minus(end_l.$end_pos(), 1)}));
        return [[self.$value(end_t), quote_l], $$$($$$($$($nesting, 'Source'), 'Map'), 'Operator').$new(colon_l, self.$loc(begin_t).$join(value_e.$loc().$expression()))];
      }, $Default_pair_quoted_map$159.$$arity = 3);
      
      Opal.def(self, '$expr_map', $Default_expr_map$160 = function $$expr_map(loc) {
        var self = this;

        return $$$($$($nesting, 'Source'), 'Map').$new(loc)
      }, $Default_expr_map$160.$$arity = 1);
      
      Opal.def(self, '$collection_map', $Default_collection_map$161 = function $$collection_map(begin_t, parts, end_t) {
        var $a, self = this, expr_l = nil;

        
        if ($truthy(($truthy($a = begin_t['$nil?']()) ? $a : end_t['$nil?']()))) {
          if ($truthy(parts['$any?']())) {
            expr_l = self.$join_exprs(parts.$first(), parts.$last())
          } else if ($truthy(begin_t['$nil?']()['$!']())) {
            expr_l = self.$loc(begin_t)
          } else if ($truthy(end_t['$nil?']()['$!']())) {
            expr_l = self.$loc(end_t)}
        } else {
          expr_l = self.$loc(begin_t).$join(self.$loc(end_t))
        };
        return $$$($$$($$($nesting, 'Source'), 'Map'), 'Collection').$new(self.$loc(begin_t), self.$loc(end_t), expr_l);
      }, $Default_collection_map$161.$$arity = 3);
      
      Opal.def(self, '$string_map', $Default_string_map$162 = function $$string_map(begin_t, parts, end_t) {
        var $a, self = this, expr_l = nil;

        if ($truthy(($truthy($a = begin_t) ? self.$value(begin_t)['$start_with?']("<<") : $a))) {
          
          if ($truthy(parts['$any?']())) {
            expr_l = self.$join_exprs(parts.$first(), parts.$last())
          } else {
            expr_l = self.$loc(end_t).$begin()
          };
          return $$$($$$($$($nesting, 'Source'), 'Map'), 'Heredoc').$new(self.$loc(begin_t), expr_l, self.$loc(end_t));
        } else {
          return self.$collection_map(begin_t, parts, end_t)
        }
      }, $Default_string_map$162.$$arity = 3);
      
      Opal.def(self, '$regexp_map', $Default_regexp_map$163 = function $$regexp_map(begin_t, end_t, options_e) {
        var self = this;

        return $$$($$$($$($nesting, 'Source'), 'Map'), 'Collection').$new(self.$loc(begin_t), self.$loc(end_t), self.$loc(begin_t).$join(options_e.$loc().$expression()))
      }, $Default_regexp_map$163.$$arity = 3);
      
      Opal.def(self, '$constant_map', $Default_constant_map$164 = function $$constant_map(scope, colon2_t, name_t) {
        var self = this, expr_l = nil;

        
        if ($truthy(scope['$nil?']())) {
          expr_l = self.$loc(name_t)
        } else {
          expr_l = scope.$loc().$expression().$join(self.$loc(name_t))
        };
        return $$$($$$($$($nesting, 'Source'), 'Map'), 'Constant').$new(self.$loc(colon2_t), self.$loc(name_t), expr_l);
      }, $Default_constant_map$164.$$arity = 3);
      
      Opal.def(self, '$variable_map', $Default_variable_map$165 = function $$variable_map(name_t) {
        var self = this;

        return $$$($$$($$($nesting, 'Source'), 'Map'), 'Variable').$new(self.$loc(name_t))
      }, $Default_variable_map$165.$$arity = 1);
      
      Opal.def(self, '$binary_op_map', $Default_binary_op_map$166 = function $$binary_op_map(left_e, op_t, right_e) {
        var self = this;

        return $$$($$$($$($nesting, 'Source'), 'Map'), 'Operator').$new(self.$loc(op_t), self.$join_exprs(left_e, right_e))
      }, $Default_binary_op_map$166.$$arity = 3);
      
      Opal.def(self, '$unary_op_map', $Default_unary_op_map$167 = function $$unary_op_map(op_t, arg_e) {
        var self = this, expr_l = nil;

        
        
        if (arg_e == null) {
          arg_e = nil;
        };
        if ($truthy(arg_e['$nil?']())) {
          expr_l = self.$loc(op_t)
        } else {
          expr_l = self.$loc(op_t).$join(arg_e.$loc().$expression())
        };
        return $$$($$$($$($nesting, 'Source'), 'Map'), 'Operator').$new(self.$loc(op_t), expr_l);
      }, $Default_unary_op_map$167.$$arity = -2);
      
      Opal.def(self, '$range_map', $Default_range_map$168 = function $$range_map(start_e, op_t, end_e) {
        var $a, self = this, expr_l = nil;

        
        if ($truthy(($truthy($a = start_e) ? end_e : $a))) {
          expr_l = self.$join_exprs(start_e, end_e)
        } else if ($truthy(start_e)) {
          expr_l = start_e.$loc().$expression().$join(self.$loc(op_t))
        } else if ($truthy(end_e)) {
          expr_l = self.$loc(op_t).$join(end_e.$loc().$expression())};
        return $$$($$$($$($nesting, 'Source'), 'Map'), 'Operator').$new(self.$loc(op_t), expr_l);
      }, $Default_range_map$168.$$arity = 3);
      
      Opal.def(self, '$arg_prefix_map', $Default_arg_prefix_map$169 = function $$arg_prefix_map(op_t, name_t) {
        var self = this, expr_l = nil;

        
        
        if (name_t == null) {
          name_t = nil;
        };
        if ($truthy(name_t['$nil?']())) {
          expr_l = self.$loc(op_t)
        } else {
          expr_l = self.$loc(op_t).$join(self.$loc(name_t))
        };
        return $$$($$$($$($nesting, 'Source'), 'Map'), 'Variable').$new(self.$loc(name_t), expr_l);
      }, $Default_arg_prefix_map$169.$$arity = -2);
      
      Opal.def(self, '$kwarg_map', $Default_kwarg_map$170 = function $$kwarg_map(name_t, value_e) {
        var self = this, label_range = nil, name_range = nil, expr_l = nil;

        
        
        if (value_e == null) {
          value_e = nil;
        };
        label_range = self.$loc(name_t);
        name_range = label_range.$adjust($hash2(["end_pos"], {"end_pos": -1}));
        if ($truthy(value_e)) {
          expr_l = self.$loc(name_t).$join(value_e.$loc().$expression())
        } else {
          expr_l = self.$loc(name_t)
        };
        return $$$($$$($$($nesting, 'Source'), 'Map'), 'Variable').$new(name_range, expr_l);
      }, $Default_kwarg_map$170.$$arity = -2);
      
      Opal.def(self, '$module_definition_map', $Default_module_definition_map$171 = function $$module_definition_map(keyword_t, name_e, operator_t, end_t) {
        var self = this, name_l = nil;

        
        if ($truthy(name_e)) {
          name_l = name_e.$loc().$expression()};
        return $$$($$$($$($nesting, 'Source'), 'Map'), 'Definition').$new(self.$loc(keyword_t), self.$loc(operator_t), name_l, self.$loc(end_t));
      }, $Default_module_definition_map$171.$$arity = 4);
      
      Opal.def(self, '$definition_map', $Default_definition_map$172 = function $$definition_map(keyword_t, operator_t, name_t, end_t) {
        var self = this;

        return $$$($$$($$($nesting, 'Source'), 'Map'), 'Definition').$new(self.$loc(keyword_t), self.$loc(operator_t), self.$loc(name_t), self.$loc(end_t))
      }, $Default_definition_map$172.$$arity = 4);
      
      Opal.def(self, '$endless_definition_map', $Default_endless_definition_map$173 = function $$endless_definition_map(keyword_t, operator_t, name_t, assignment_t, body_e) {
        var self = this, body_l = nil;

        
        body_l = body_e.$loc().$expression();
        return $$$($$$($$($nesting, 'Source'), 'Map'), 'EndlessDefinition').$new(self.$loc(keyword_t), self.$loc(operator_t), self.$loc(name_t), self.$loc(assignment_t), body_l);
      }, $Default_endless_definition_map$173.$$arity = 5);
      
      Opal.def(self, '$send_map', $Default_send_map$174 = function $$send_map(receiver_e, dot_t, selector_t, begin_t, args, end_t) {
        var self = this, begin_l = nil, end_l = nil;

        
        
        if (begin_t == null) {
          begin_t = nil;
        };
        
        if (args == null) {
          args = [];
        };
        
        if (end_t == null) {
          end_t = nil;
        };
        if ($truthy(receiver_e)) {
          begin_l = receiver_e.$loc().$expression()
        } else if ($truthy(selector_t)) {
          begin_l = self.$loc(selector_t)};
        if ($truthy(end_t)) {
          end_l = self.$loc(end_t)
        } else if ($truthy(args['$any?']())) {
          end_l = args.$last().$loc().$expression()
        } else if ($truthy(selector_t)) {
          end_l = self.$loc(selector_t)};
        return $$$($$$($$($nesting, 'Source'), 'Map'), 'Send').$new(self.$loc(dot_t), self.$loc(selector_t), self.$loc(begin_t), self.$loc(end_t), begin_l.$join(end_l));
      }, $Default_send_map$174.$$arity = -4);
      
      Opal.def(self, '$var_send_map', $Default_var_send_map$175 = function $$var_send_map(variable_e) {
        var self = this;

        return $$$($$$($$($nesting, 'Source'), 'Map'), 'Send').$new(nil, variable_e.$loc().$expression(), nil, nil, variable_e.$loc().$expression())
      }, $Default_var_send_map$175.$$arity = 1);
      
      Opal.def(self, '$send_binary_op_map', $Default_send_binary_op_map$176 = function $$send_binary_op_map(lhs_e, selector_t, rhs_e) {
        var self = this;

        return $$$($$$($$($nesting, 'Source'), 'Map'), 'Send').$new(nil, self.$loc(selector_t), nil, nil, self.$join_exprs(lhs_e, rhs_e))
      }, $Default_send_binary_op_map$176.$$arity = 3);
      
      Opal.def(self, '$send_unary_op_map', $Default_send_unary_op_map$177 = function $$send_unary_op_map(selector_t, arg_e) {
        var self = this, expr_l = nil;

        
        if ($truthy(arg_e['$nil?']())) {
          expr_l = self.$loc(selector_t)
        } else {
          expr_l = self.$loc(selector_t).$join(arg_e.$loc().$expression())
        };
        return $$$($$$($$($nesting, 'Source'), 'Map'), 'Send').$new(nil, self.$loc(selector_t), nil, nil, expr_l);
      }, $Default_send_unary_op_map$177.$$arity = 2);
      
      Opal.def(self, '$index_map', $Default_index_map$178 = function $$index_map(receiver_e, lbrack_t, rbrack_t) {
        var self = this;

        return $$$($$$($$($nesting, 'Source'), 'Map'), 'Index').$new(self.$loc(lbrack_t), self.$loc(rbrack_t), receiver_e.$loc().$expression().$join(self.$loc(rbrack_t)))
      }, $Default_index_map$178.$$arity = 3);
      
      Opal.def(self, '$send_index_map', $Default_send_index_map$179 = function $$send_index_map(receiver_e, lbrack_t, rbrack_t) {
        var self = this;

        return $$$($$$($$($nesting, 'Source'), 'Map'), 'Send').$new(nil, self.$loc(lbrack_t).$join(self.$loc(rbrack_t)), nil, nil, receiver_e.$loc().$expression().$join(self.$loc(rbrack_t)))
      }, $Default_send_index_map$179.$$arity = 3);
      
      Opal.def(self, '$block_map', $Default_block_map$180 = function $$block_map(receiver_l, begin_t, end_t) {
        var self = this;

        return $$$($$$($$($nesting, 'Source'), 'Map'), 'Collection').$new(self.$loc(begin_t), self.$loc(end_t), receiver_l.$join(self.$loc(end_t)))
      }, $Default_block_map$180.$$arity = 3);
      
      Opal.def(self, '$keyword_map', $Default_keyword_map$181 = function $$keyword_map(keyword_t, begin_t, args, end_t) {
        var $a, self = this, end_l = nil;

        
        args = ($truthy($a = args) ? $a : []);
        if ($truthy(end_t)) {
          end_l = self.$loc(end_t)
        } else if ($truthy(($truthy($a = args['$any?']()) ? args.$last()['$nil?']()['$!']() : $a))) {
          end_l = args.$last().$loc().$expression()
        } else if ($truthy(($truthy($a = args['$any?']()) ? $rb_gt(args.$count(), 1) : $a))) {
          end_l = args['$[]'](-2).$loc().$expression()
        } else {
          end_l = self.$loc(keyword_t)
        };
        return $$$($$$($$($nesting, 'Source'), 'Map'), 'Keyword').$new(self.$loc(keyword_t), self.$loc(begin_t), self.$loc(end_t), self.$loc(keyword_t).$join(end_l));
      }, $Default_keyword_map$181.$$arity = 4);
      
      Opal.def(self, '$keyword_mod_map', $Default_keyword_mod_map$182 = function $$keyword_mod_map(pre_e, keyword_t, post_e) {
        var self = this;

        return $$$($$$($$($nesting, 'Source'), 'Map'), 'Keyword').$new(self.$loc(keyword_t), nil, nil, self.$join_exprs(pre_e, post_e))
      }, $Default_keyword_mod_map$182.$$arity = 3);
      
      Opal.def(self, '$condition_map', $Default_condition_map$183 = function $$condition_map(keyword_t, cond_e, begin_t, body_e, else_t, else_e, end_t) {
        var $a, self = this, end_l = nil;

        
        if ($truthy(end_t)) {
          end_l = self.$loc(end_t)
        } else if ($truthy(($truthy($a = else_e) ? else_e.$loc().$expression() : $a))) {
          end_l = else_e.$loc().$expression()
        } else if ($truthy(self.$loc(else_t))) {
          end_l = self.$loc(else_t)
        } else if ($truthy(($truthy($a = body_e) ? body_e.$loc().$expression() : $a))) {
          end_l = body_e.$loc().$expression()
        } else if ($truthy(self.$loc(begin_t))) {
          end_l = self.$loc(begin_t)
        } else {
          end_l = cond_e.$loc().$expression()
        };
        return $$$($$$($$($nesting, 'Source'), 'Map'), 'Condition').$new(self.$loc(keyword_t), self.$loc(begin_t), self.$loc(else_t), self.$loc(end_t), self.$loc(keyword_t).$join(end_l));
      }, $Default_condition_map$183.$$arity = 7);
      
      Opal.def(self, '$ternary_map', $Default_ternary_map$184 = function $$ternary_map(begin_e, question_t, mid_e, colon_t, end_e) {
        var self = this;

        return $$$($$$($$($nesting, 'Source'), 'Map'), 'Ternary').$new(self.$loc(question_t), self.$loc(colon_t), self.$join_exprs(begin_e, end_e))
      }, $Default_ternary_map$184.$$arity = 5);
      
      Opal.def(self, '$for_map', $Default_for_map$185 = function $$for_map(keyword_t, in_t, begin_t, end_t) {
        var self = this;

        return $$$($$$($$($nesting, 'Source'), 'Map'), 'For').$new(self.$loc(keyword_t), self.$loc(in_t), self.$loc(begin_t), self.$loc(end_t), self.$loc(keyword_t).$join(self.$loc(end_t)))
      }, $Default_for_map$185.$$arity = 4);
      
      Opal.def(self, '$rescue_body_map', $Default_rescue_body_map$186 = function $$rescue_body_map(keyword_t, exc_list_e, assoc_t, exc_var_e, then_t, compstmt_e) {
        var $a, self = this, end_l = nil;

        
        if ($truthy(compstmt_e)) {
          end_l = compstmt_e.$loc().$expression()};
        if ($truthy(($truthy($a = end_l['$nil?']()) ? then_t : $a))) {
          end_l = self.$loc(then_t)};
        if ($truthy(($truthy($a = end_l['$nil?']()) ? exc_var_e : $a))) {
          end_l = exc_var_e.$loc().$expression()};
        if ($truthy(($truthy($a = end_l['$nil?']()) ? exc_list_e : $a))) {
          end_l = exc_list_e.$loc().$expression()};
        if ($truthy(end_l['$nil?']())) {
          end_l = self.$loc(keyword_t)};
        return $$$($$$($$($nesting, 'Source'), 'Map'), 'RescueBody').$new(self.$loc(keyword_t), self.$loc(assoc_t), self.$loc(then_t), self.$loc(keyword_t).$join(end_l));
      }, $Default_rescue_body_map$186.$$arity = 6);
      
      Opal.def(self, '$eh_keyword_map', $Default_eh_keyword_map$187 = function $$eh_keyword_map(compstmt_e, keyword_t, body_es, else_t, else_e) {
        var self = this, begin_l = nil, end_l = nil;

        
        if ($truthy(compstmt_e['$nil?']())) {
          if ($truthy(keyword_t['$nil?']())) {
            begin_l = body_es.$first().$loc().$expression()
          } else {
            begin_l = self.$loc(keyword_t)
          }
        } else {
          begin_l = compstmt_e.$loc().$expression()
        };
        if ($truthy(else_t)) {
          if ($truthy(else_e['$nil?']())) {
            end_l = self.$loc(else_t)
          } else {
            end_l = else_e.$loc().$expression()
          }
        } else if ($truthy(body_es.$last()['$nil?']()['$!']())) {
          end_l = body_es.$last().$loc().$expression()
        } else {
          end_l = self.$loc(keyword_t)
        };
        return $$$($$$($$($nesting, 'Source'), 'Map'), 'Condition').$new(self.$loc(keyword_t), nil, self.$loc(else_t), nil, begin_l.$join(end_l));
      }, $Default_eh_keyword_map$187.$$arity = 5);
      
      Opal.def(self, '$guard_map', $Default_guard_map$188 = function $$guard_map(keyword_t, guard_body_e) {
        var self = this, keyword_l = nil, guard_body_l = nil;

        
        keyword_l = self.$loc(keyword_t);
        guard_body_l = guard_body_e.$loc().$expression();
        return $$$($$$($$($nesting, 'Source'), 'Map'), 'Keyword').$new(keyword_l, nil, nil, keyword_l.$join(guard_body_l));
      }, $Default_guard_map$188.$$arity = 2);
      
      Opal.def(self, '$static_string', $Default_static_string$189 = function $$static_string(nodes) {try {

        var $$190, self = this;

        return $send(nodes, 'map', [], ($$190 = function(node){var self = $$190.$$s == null ? this : $$190.$$s, $case = nil, string = nil;

        
          
          if (node == null) {
            node = nil;
          };
          return (function() {$case = node.$type();
          if ("str"['$===']($case)) {return node.$children()['$[]'](0)}
          else if ("begin"['$===']($case)) {if ($truthy((string = self.$static_string(node.$children())))) {
            return string
          } else {
            Opal.ret(nil)
          }}
          else {Opal.ret(nil)}})();}, $$190.$$s = self, $$190.$$arity = 1, $$190)).$join()
        } catch ($returner) { if ($returner === Opal.returner) { return $returner.$v } throw $returner; }
      }, $Default_static_string$189.$$arity = 1);
      
      Opal.def(self, '$static_regexp', $Default_static_regexp$191 = function $$static_regexp(parts, options) {
        var self = this, source = nil;

        
        source = self.$static_string(parts);
        if ($truthy(source['$nil?']())) {
          return nil};
        source = (function() {
        if ($truthy(options.$children()['$include?']("u"))) {return source.$encode($$$($$($nesting, 'Encoding'), 'UTF_8'))}
        else if ($truthy(options.$children()['$include?']("e"))) {return source.$encode($$$($$($nesting, 'Encoding'), 'EUC_JP'))}
        else if ($truthy(options.$children()['$include?']("s"))) {return source.$encode($$$($$($nesting, 'Encoding'), 'WINDOWS_31J'))}
        else if ($truthy(options.$children()['$include?']("n"))) {return source.$encode($$$($$($nesting, 'Encoding'), 'BINARY'))}
        else {return source}})();
        return $$($nesting, 'Regexp').$new(source, (function() {if ($truthy(options.$children()['$include?']("x"))) {
          return $$$($$($nesting, 'Regexp'), 'EXTENDED')
        } else {
          return nil
        }; return nil; })());
      }, $Default_static_regexp$191.$$arity = 2);
      
      Opal.def(self, '$static_regexp_node', $Default_static_regexp_node$192 = function $$static_regexp_node(node) {
        var $a, self = this, parts = nil, options = nil;

        if (node.$type()['$==']("regexp")) {
          
          $a = [node.$children()['$[]']($range(0, -2, false)), node.$children()['$[]'](-1)], (parts = $a[0]), (options = $a[1]), $a;
          return self.$static_regexp(parts, options);
        } else {
          return nil
        }
      }, $Default_static_regexp_node$192.$$arity = 1);
      
      Opal.def(self, '$collapse_string_parts?', $Default_collapse_string_parts$ques$193 = function(parts) {
        var $a, self = this;

        return ($truthy($a = parts['$one?']()) ? ["str", "dstr"]['$include?'](parts.$first().$type()) : $a)
      }, $Default_collapse_string_parts$ques$193.$$arity = 1);
      
      Opal.def(self, '$value', $Default_value$194 = function $$value(token) {
        var self = this;

        return token['$[]'](0)
      }, $Default_value$194.$$arity = 1);
      
      Opal.def(self, '$string_value', $Default_string_value$195 = function $$string_value(token) {
        var self = this;

        
        if ($truthy(token['$[]'](0)['$valid_encoding?']())) {
        } else {
          self.$diagnostic("error", "invalid_encoding", nil, token['$[]'](1))
        };
        return token['$[]'](0);
      }, $Default_string_value$195.$$arity = 1);
      
      Opal.def(self, '$loc', $Default_loc$196 = function $$loc(token) {
        var $a, self = this;

        if ($truthy(($truthy($a = token) ? token['$[]'](0) : $a))) {
          return token['$[]'](1)
        } else {
          return nil
        }
      }, $Default_loc$196.$$arity = 1);
      
      Opal.def(self, '$diagnostic', $Default_diagnostic$197 = function $$diagnostic(type, reason, arguments$, location, highlights) {
        var self = this;

        
        
        if (highlights == null) {
          highlights = [];
        };
        self.parser.$diagnostics().$process($$($nesting, 'Diagnostic').$new(type, reason, arguments$, location, highlights));
        if (type['$==']("error")) {
          return self.parser.$send("yyerror")
        } else {
          return nil
        };
      }, $Default_diagnostic$197.$$arity = -5);
      return (Opal.def(self, '$validate_definee', $Default_validate_definee$198 = function $$validate_definee(definee) {
        var self = this, $case = nil;

        return (function() {$case = definee.$type();
        if ("int"['$===']($case) || "str"['$===']($case) || "dstr"['$===']($case) || "sym"['$===']($case) || "dsym"['$===']($case) || "regexp"['$===']($case) || "array"['$===']($case) || "hash"['$===']($case)) {
        self.$diagnostic("error", "singleton_literal", nil, definee.$loc().$expression());
        return false;}
        else {return true}})()
      }, $Default_validate_definee$198.$$arity = 1), nil) && 'validate_definee';
    })($$($nesting, 'Builders'), null, $nesting)
  })($nesting[0], $nesting)
};

/* Generated by Opal 1.0.0 */
Opal.modules["parser/context"] = function(Opal) {
  function $rb_gt(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs > rhs : lhs['$>'](rhs);
  }
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.$$$, $$ = Opal.$$, $module = Opal.module, $klass = Opal.klass, $truthy = Opal.truthy, $send = Opal.send;

  Opal.add_stubs(['$attr_reader', '$freeze', '$<<', '$pop', '$clear', '$==', '$last', '$include?', '$rindex', '$stack', '$nil?', '$!', '$>', '$in_block?', '$in_lambda?']);
  return (function($base, $parent_nesting) {
    var self = $module($base, 'Parser');

    var $nesting = [self].concat($parent_nesting);

    (function($base, $super, $parent_nesting) {
      var self = $klass($base, $super, 'Context');

      var $nesting = [self].concat($parent_nesting), $Context_initialize$1, $Context_push$2, $Context_pop$3, $Context_reset$4, $Context_in_class$ques$5, $Context_indirectly_in_def$ques$6, $Context_class_definition_allowed$ques$7, $Context_in_block$ques$9, $Context_in_lambda$ques$10, $Context_in_dynamic_block$ques$11;

      self.$$prototype.stack = nil;
      
      self.$attr_reader("stack");
      
      Opal.def(self, '$initialize', $Context_initialize$1 = function $$initialize() {
        var self = this;

        
        self.stack = [];
        return self.$freeze();
      }, $Context_initialize$1.$$arity = 0);
      
      Opal.def(self, '$push', $Context_push$2 = function $$push(state) {
        var self = this;

        return self.stack['$<<'](state)
      }, $Context_push$2.$$arity = 1);
      
      Opal.def(self, '$pop', $Context_pop$3 = function $$pop() {
        var self = this;

        return self.stack.$pop()
      }, $Context_pop$3.$$arity = 0);
      
      Opal.def(self, '$reset', $Context_reset$4 = function $$reset() {
        var self = this;

        return self.stack.$clear()
      }, $Context_reset$4.$$arity = 0);
      
      Opal.def(self, '$in_class?', $Context_in_class$ques$5 = function() {
        var self = this;

        return self.stack.$last()['$==']("class")
      }, $Context_in_class$ques$5.$$arity = 0);
      
      Opal.def(self, '$indirectly_in_def?', $Context_indirectly_in_def$ques$6 = function() {
        var $a, self = this;

        return ($truthy($a = self.stack['$include?']("def")) ? $a : self.stack['$include?']("defs"))
      }, $Context_indirectly_in_def$ques$6.$$arity = 0);
      
      Opal.def(self, '$class_definition_allowed?', $Context_class_definition_allowed$ques$7 = function() {
        var $$8, $a, $b, self = this, def_index = nil, sclass_index = nil;

        
        def_index = $send(self.$stack(), 'rindex', [], ($$8 = function(item){var self = $$8.$$s == null ? this : $$8.$$s;

        
          
          if (item == null) {
            item = nil;
          };
          return ["def", "defs"]['$include?'](item);}, $$8.$$s = self, $$8.$$arity = 1, $$8));
        sclass_index = self.$stack().$rindex("sclass");
        return ($truthy($a = def_index['$nil?']()) ? $a : ($truthy($b = sclass_index['$nil?']()['$!']()) ? $rb_gt(sclass_index, def_index) : $b));
      }, $Context_class_definition_allowed$ques$7.$$arity = 0);
      Opal.alias(self, "module_definition_allowed?", "class_definition_allowed?");
      Opal.alias(self, "dynamic_const_definition_allowed?", "class_definition_allowed?");
      
      Opal.def(self, '$in_block?', $Context_in_block$ques$9 = function() {
        var self = this;

        return self.stack.$last()['$==']("block")
      }, $Context_in_block$ques$9.$$arity = 0);
      
      Opal.def(self, '$in_lambda?', $Context_in_lambda$ques$10 = function() {
        var self = this;

        return self.stack.$last()['$==']("lambda")
      }, $Context_in_lambda$ques$10.$$arity = 0);
      return (Opal.def(self, '$in_dynamic_block?', $Context_in_dynamic_block$ques$11 = function() {
        var $a, self = this;

        return ($truthy($a = self['$in_block?']()) ? $a : self['$in_lambda?']())
      }, $Context_in_dynamic_block$ques$11.$$arity = 0), nil) && 'in_dynamic_block?';
    })($nesting[0], null, $nesting)
  })($nesting[0], $nesting)
};

/* Generated by Opal 1.0.0 */
Opal.modules["parser/max_numparam_stack"] = function(Opal) {
  function $rb_lt(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs < rhs : lhs['$<'](rhs);
  }
  function $rb_gt(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs > rhs : lhs['$>'](rhs);
  }
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.$$$, $$ = Opal.$$, $module = Opal.module, $klass = Opal.klass;

  Opal.add_stubs(['$attr_reader', '$set', '$<', '$top', '$>', '$max', '$last', '$push', '$pop', '$private']);
  return (function($base, $parent_nesting) {
    var self = $module($base, 'Parser');

    var $nesting = [self].concat($parent_nesting);

    (function($base, $super, $parent_nesting) {
      var self = $klass($base, $super, 'MaxNumparamStack');

      var $nesting = [self].concat($parent_nesting), $MaxNumparamStack_initialize$1, $MaxNumparamStack_has_ordinary_params$excl$2, $MaxNumparamStack_has_ordinary_params$ques$3, $MaxNumparamStack_has_numparams$ques$4, $MaxNumparamStack_register$5, $MaxNumparamStack_top$6, $MaxNumparamStack_push$7, $MaxNumparamStack_pop$8, $MaxNumparamStack_set$9;

      self.$$prototype.stack = nil;
      
      self.$attr_reader("stack");
      
      Opal.def(self, '$initialize', $MaxNumparamStack_initialize$1 = function $$initialize() {
        var self = this;

        return (self.stack = [])
      }, $MaxNumparamStack_initialize$1.$$arity = 0);
      
      Opal.def(self, '$has_ordinary_params!', $MaxNumparamStack_has_ordinary_params$excl$2 = function() {
        var self = this;

        return self.$set(-1)
      }, $MaxNumparamStack_has_ordinary_params$excl$2.$$arity = 0);
      
      Opal.def(self, '$has_ordinary_params?', $MaxNumparamStack_has_ordinary_params$ques$3 = function() {
        var self = this;

        return $rb_lt(self.$top(), 0)
      }, $MaxNumparamStack_has_ordinary_params$ques$3.$$arity = 0);
      
      Opal.def(self, '$has_numparams?', $MaxNumparamStack_has_numparams$ques$4 = function() {
        var self = this;

        return $rb_gt(self.$top(), 0)
      }, $MaxNumparamStack_has_numparams$ques$4.$$arity = 0);
      
      Opal.def(self, '$register', $MaxNumparamStack_register$5 = function $$register(numparam) {
        var self = this;

        return self.$set([self.$top(), numparam].$max())
      }, $MaxNumparamStack_register$5.$$arity = 1);
      
      Opal.def(self, '$top', $MaxNumparamStack_top$6 = function $$top() {
        var self = this;

        return self.stack.$last()
      }, $MaxNumparamStack_top$6.$$arity = 0);
      
      Opal.def(self, '$push', $MaxNumparamStack_push$7 = function $$push() {
        var self = this;

        return self.stack.$push(0)
      }, $MaxNumparamStack_push$7.$$arity = 0);
      
      Opal.def(self, '$pop', $MaxNumparamStack_pop$8 = function $$pop() {
        var self = this;

        return self.stack.$pop()
      }, $MaxNumparamStack_pop$8.$$arity = 0);
      self.$private();
      return (Opal.def(self, '$set', $MaxNumparamStack_set$9 = function $$set(value) {
        var self = this;

        
        self.stack.$pop();
        return self.stack.$push(value);
      }, $MaxNumparamStack_set$9.$$arity = 1), nil) && 'set';
    })($nesting[0], null, $nesting)
  })($nesting[0], $nesting)
};

/* Generated by Opal 1.0.0 */
Opal.modules["parser/current_arg_stack"] = function(Opal) {
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.$$$, $$ = Opal.$$, $module = Opal.module, $klass = Opal.klass;

  Opal.add_stubs(['$attr_reader', '$freeze', '$<<', '$pop', '$push', '$clear', '$last']);
  return (function($base, $parent_nesting) {
    var self = $module($base, 'Parser');

    var $nesting = [self].concat($parent_nesting);

    (function($base, $super, $parent_nesting) {
      var self = $klass($base, $super, 'CurrentArgStack');

      var $nesting = [self].concat($parent_nesting), $CurrentArgStack_initialize$1, $CurrentArgStack_push$2, $CurrentArgStack_set$3, $CurrentArgStack_pop$4, $CurrentArgStack_reset$5, $CurrentArgStack_top$6;

      self.$$prototype.stack = nil;
      
      self.$attr_reader("stack");
      
      Opal.def(self, '$initialize', $CurrentArgStack_initialize$1 = function $$initialize() {
        var self = this;

        
        self.stack = [];
        return self.$freeze();
      }, $CurrentArgStack_initialize$1.$$arity = 0);
      
      Opal.def(self, '$push', $CurrentArgStack_push$2 = function $$push(value) {
        var self = this;

        return self.stack['$<<'](value)
      }, $CurrentArgStack_push$2.$$arity = 1);
      
      Opal.def(self, '$set', $CurrentArgStack_set$3 = function $$set(value) {
        var self = this;

        
        self.$pop();
        return self.$push(value);
      }, $CurrentArgStack_set$3.$$arity = 1);
      
      Opal.def(self, '$pop', $CurrentArgStack_pop$4 = function $$pop() {
        var self = this;

        return self.stack.$pop()
      }, $CurrentArgStack_pop$4.$$arity = 0);
      
      Opal.def(self, '$reset', $CurrentArgStack_reset$5 = function $$reset() {
        var self = this;

        return self.stack.$clear()
      }, $CurrentArgStack_reset$5.$$arity = 0);
      return (Opal.def(self, '$top', $CurrentArgStack_top$6 = function $$top() {
        var self = this;

        return self.stack.$last()
      }, $CurrentArgStack_top$6.$$arity = 0), nil) && 'top';
    })($nesting[0], null, $nesting)
  })($nesting[0], $nesting)
};

/* Generated by Opal 1.0.0 */
Opal.modules["parser/variables_stack"] = function(Opal) {
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.$$$, $$ = Opal.$$, $module = Opal.module, $klass = Opal.klass;

  Opal.add_stubs(['$push', '$<<', '$new', '$pop', '$clear', '$last', '$to_sym', '$include?']);
  return (function($base, $parent_nesting) {
    var self = $module($base, 'Parser');

    var $nesting = [self].concat($parent_nesting);

    (function($base, $super, $parent_nesting) {
      var self = $klass($base, $super, 'VariablesStack');

      var $nesting = [self].concat($parent_nesting), $VariablesStack_initialize$1, $VariablesStack_push$2, $VariablesStack_pop$3, $VariablesStack_reset$4, $VariablesStack_declare$5, $VariablesStack_declared$ques$6;

      self.$$prototype.stack = nil;
      
      
      Opal.def(self, '$initialize', $VariablesStack_initialize$1 = function $$initialize() {
        var self = this;

        
        self.stack = [];
        return self.$push();
      }, $VariablesStack_initialize$1.$$arity = 0);
      
      Opal.def(self, '$push', $VariablesStack_push$2 = function $$push() {
        var self = this;

        return self.stack['$<<']($$($nesting, 'Set').$new())
      }, $VariablesStack_push$2.$$arity = 0);
      
      Opal.def(self, '$pop', $VariablesStack_pop$3 = function $$pop() {
        var self = this;

        return self.stack.$pop()
      }, $VariablesStack_pop$3.$$arity = 0);
      
      Opal.def(self, '$reset', $VariablesStack_reset$4 = function $$reset() {
        var self = this;

        return self.stack.$clear()
      }, $VariablesStack_reset$4.$$arity = 0);
      
      Opal.def(self, '$declare', $VariablesStack_declare$5 = function $$declare(name) {
        var self = this;

        return self.stack.$last()['$<<'](name.$to_sym())
      }, $VariablesStack_declare$5.$$arity = 1);
      return (Opal.def(self, '$declared?', $VariablesStack_declared$ques$6 = function(name) {
        var self = this;

        return self.stack.$last()['$include?'](name.$to_sym())
      }, $VariablesStack_declared$ques$6.$$arity = 1), nil) && 'declared?';
    })($nesting[0], null, $nesting)
  })($nesting[0], $nesting)
};

/* Generated by Opal 1.0.0 */
Opal.modules["parser/base"] = function(Opal) {
  function $rb_minus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs - rhs : lhs['$-'](rhs);
  }
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.$$$, $$ = Opal.$$, $module = Opal.module, $klass = Opal.klass, $send = Opal.send, $gvars = Opal.gvars, $truthy = Opal.truthy, $hash2 = Opal.hash2;

  Opal.add_stubs(['$default_parser', '$setup_source_buffer', '$default_encoding', '$parse', '$parse_with_comments', '$read', '$new', '$all_errors_are_fatal=', '$diagnostics', '$-', '$ignore_warnings=', '$lambda', '$puts', '$render', '$consumer=', '$force_encoding', '$dup', '$==', '$name', '$raw_source=', '$source=', '$private_class_method', '$attr_reader', '$version', '$diagnostics=', '$static_env=', '$context=', '$parser=', '$class', '$[]', '$reset', '$source_buffer=', '$do_parse', '$comments=', '$comments', '$tokens=', '$!', '$raise', '$tokens', '$private', '$advance', '$===', '$diagnostic', '$map', '$process', '$yyerror', '$token_to_str']);
  return (function($base, $parent_nesting) {
    var self = $module($base, 'Parser');

    var $nesting = [self].concat($parent_nesting);

    (function($base, $super, $parent_nesting) {
      var self = $klass($base, $super, 'Base');

      var $nesting = [self].concat($parent_nesting), $Base_parse$1, $Base_parse_with_comments$2, $Base_parse_file$3, $Base_parse_file_with_comments$4, $Base_default_parser$5, $Base_setup_source_buffer$7, $Base_initialize$8, $Base_reset$9, $Base_parse$10, $Base_parse_with_comments$11, $Base_tokenize$12, $Base_next_token$13, $Base_check_kwarg_name$14, $Base_diagnostic$15, $Base_on_error$17;

      self.$$prototype.diagnostics = self.$$prototype.lexer = self.$$prototype.static_env = self.$$prototype.context = self.$$prototype.builder = self.$$prototype.current_arg_stack = self.$$prototype.pattern_variables = self.$$prototype.pattern_hash_keys = nil;
      
      Opal.defs(self, '$parse', $Base_parse$1 = function $$parse(string, file, line) {
        var self = this, parser = nil, source_buffer = nil;

        
        
        if (file == null) {
          file = "(string)";
        };
        
        if (line == null) {
          line = 1;
        };
        parser = self.$default_parser();
        source_buffer = self.$setup_source_buffer(file, line, string, parser.$default_encoding());
        return parser.$parse(source_buffer);
      }, $Base_parse$1.$$arity = -2);
      Opal.defs(self, '$parse_with_comments', $Base_parse_with_comments$2 = function $$parse_with_comments(string, file, line) {
        var self = this, parser = nil, source_buffer = nil;

        
        
        if (file == null) {
          file = "(string)";
        };
        
        if (line == null) {
          line = 1;
        };
        parser = self.$default_parser();
        source_buffer = self.$setup_source_buffer(file, line, string, parser.$default_encoding());
        return parser.$parse_with_comments(source_buffer);
      }, $Base_parse_with_comments$2.$$arity = -2);
      Opal.defs(self, '$parse_file', $Base_parse_file$3 = function $$parse_file(filename) {
        var self = this;

        return self.$parse($$($nesting, 'File').$read(filename), filename)
      }, $Base_parse_file$3.$$arity = 1);
      Opal.defs(self, '$parse_file_with_comments', $Base_parse_file_with_comments$4 = function $$parse_file_with_comments(filename) {
        var self = this;

        return self.$parse_with_comments($$($nesting, 'File').$read(filename), filename)
      }, $Base_parse_file_with_comments$4.$$arity = 1);
      Opal.defs(self, '$default_parser', $Base_default_parser$5 = function $$default_parser() {
        var $$6, self = this, parser = nil, $writer = nil;

        
        parser = self.$new();
        
        $writer = [true];
        $send(parser.$diagnostics(), 'all_errors_are_fatal=', Opal.to_a($writer));
        $writer[$rb_minus($writer["length"], 1)];;
        
        $writer = [true];
        $send(parser.$diagnostics(), 'ignore_warnings=', Opal.to_a($writer));
        $writer[$rb_minus($writer["length"], 1)];;
        
        $writer = [$send(self, 'lambda', [], ($$6 = function(diagnostic){var self = $$6.$$s == null ? this : $$6.$$s;
          if ($gvars.stderr == null) $gvars.stderr = nil;

        
          
          if (diagnostic == null) {
            diagnostic = nil;
          };
          return $gvars.stderr.$puts(diagnostic.$render());}, $$6.$$s = self, $$6.$$arity = 1, $$6))];
        $send(parser.$diagnostics(), 'consumer=', Opal.to_a($writer));
        $writer[$rb_minus($writer["length"], 1)];;
        return parser;
      }, $Base_default_parser$5.$$arity = 0);
      Opal.defs(self, '$setup_source_buffer', $Base_setup_source_buffer$7 = function $$setup_source_buffer(file, line, string, encoding) {
        var self = this, source_buffer = nil, $writer = nil;

        
        string = string.$dup().$force_encoding(encoding);
        source_buffer = $$$($$($nesting, 'Source'), 'Buffer').$new(file, line);
        if (self.$name()['$==']("Parser::Ruby18")) {
          
          $writer = [string];
          $send(source_buffer, 'raw_source=', Opal.to_a($writer));
          $writer[$rb_minus($writer["length"], 1)];
        } else {
          
          $writer = [string];
          $send(source_buffer, 'source=', Opal.to_a($writer));
          $writer[$rb_minus($writer["length"], 1)];
        };
        return source_buffer;
      }, $Base_setup_source_buffer$7.$$arity = 4);
      self.$private_class_method("setup_source_buffer");
      self.$attr_reader("diagnostics");
      self.$attr_reader("builder");
      self.$attr_reader("static_env");
      self.$attr_reader("source_buffer");
      self.$attr_reader("context");
      self.$attr_reader("max_numparam_stack");
      self.$attr_reader("current_arg_stack");
      self.$attr_reader("pattern_variables");
      self.$attr_reader("pattern_hash_keys");
      
      Opal.def(self, '$initialize', $Base_initialize$8 = function $$initialize(builder) {
        var $a, self = this, $writer = nil;

        
        
        if (builder == null) {
          builder = $$$($$$($$($nesting, 'Parser'), 'Builders'), 'Default').$new();
        };
        self.diagnostics = $$$($$($nesting, 'Diagnostic'), 'Engine').$new();
        self.static_env = $$($nesting, 'StaticEnvironment').$new();
        self.context = $$($nesting, 'Context').$new();
        self.max_numparam_stack = $$($nesting, 'MaxNumparamStack').$new();
        self.current_arg_stack = $$($nesting, 'CurrentArgStack').$new();
        self.pattern_variables = $$($nesting, 'VariablesStack').$new();
        self.pattern_hash_keys = $$($nesting, 'VariablesStack').$new();
        self.lexer = $$($nesting, 'Lexer').$new(self.$version());
        
        $writer = [self.diagnostics];
        $send(self.lexer, 'diagnostics=', Opal.to_a($writer));
        $writer[$rb_minus($writer["length"], 1)];;
        
        $writer = [self.static_env];
        $send(self.lexer, 'static_env=', Opal.to_a($writer));
        $writer[$rb_minus($writer["length"], 1)];;
        
        $writer = [self.context];
        $send(self.lexer, 'context=', Opal.to_a($writer));
        $writer[$rb_minus($writer["length"], 1)];;
        self.builder = builder;
        
        $writer = [self];
        $send(self.builder, 'parser=', Opal.to_a($writer));
        $writer[$rb_minus($writer["length"], 1)];;
        self.last_token = nil;
        if ($truthy(($truthy($a = $$$(self.$class(), 'Racc_debug_parser')) ? $$($nesting, 'ENV')['$[]']("RACC_DEBUG") : $a))) {
          self.yydebug = true};
        return self.$reset();
      }, $Base_initialize$8.$$arity = -1);
      
      Opal.def(self, '$reset', $Base_reset$9 = function $$reset() {
        var self = this;

        
        self.source_buffer = nil;
        self.lexer.$reset();
        self.static_env.$reset();
        self.context.$reset();
        self.current_arg_stack.$reset();
        self.pattern_variables.$reset();
        self.pattern_hash_keys.$reset();
        return self;
      }, $Base_reset$9.$$arity = 0);
      
      Opal.def(self, '$parse', $Base_parse$10 = function $$parse(source_buffer) {
        var self = this, $writer = nil;

        return (function() { try {
        
        
        $writer = [source_buffer];
        $send(self.lexer, 'source_buffer=', Opal.to_a($writer));
        $writer[$rb_minus($writer["length"], 1)];;
        self.source_buffer = source_buffer;
        return self.$do_parse();
        } finally {
          ((self.source_buffer = nil), (($writer = [nil]), $send(self.lexer, 'source_buffer=', Opal.to_a($writer)), $writer[$rb_minus($writer["length"], 1)]))
        }; })()
      }, $Base_parse$10.$$arity = 1);
      
      Opal.def(self, '$parse_with_comments', $Base_parse_with_comments$11 = function $$parse_with_comments(source_buffer) {
        var self = this, $writer = nil;

        return (function() { try {
        
        
        $writer = [[]];
        $send(self.lexer, 'comments=', Opal.to_a($writer));
        $writer[$rb_minus($writer["length"], 1)];;
        return [self.$parse(source_buffer), self.lexer.$comments()];
        } finally {
          (($writer = [nil]), $send(self.lexer, 'comments=', Opal.to_a($writer)), $writer[$rb_minus($writer["length"], 1)])
        }; })()
      }, $Base_parse_with_comments$11.$$arity = 1);
      
      Opal.def(self, '$tokenize', $Base_tokenize$12 = function $$tokenize(source_buffer, recover) {
        var self = this, $writer = nil, ast = nil;

        
        
        if (recover == null) {
          recover = false;
        };
        return (function() { try {
        
        
        $writer = [[]];
        $send(self.lexer, 'tokens=', Opal.to_a($writer));
        $writer[$rb_minus($writer["length"], 1)];;
        
        $writer = [[]];
        $send(self.lexer, 'comments=', Opal.to_a($writer));
        $writer[$rb_minus($writer["length"], 1)];;
        
        try {
          ast = self.$parse(source_buffer)
        } catch ($err) {
          if (Opal.rescue($err, [$$$($$($nesting, 'Parser'), 'SyntaxError')])) {
            try {
              if ($truthy(recover['$!']())) {
                self.$raise()}
            } finally { Opal.pop_exception() }
          } else { throw $err; }
        };;
        return [ast, self.lexer.$comments(), self.lexer.$tokens()];
        } finally {
          ((($writer = [nil]), $send(self.lexer, 'tokens=', Opal.to_a($writer)), $writer[$rb_minus($writer["length"], 1)]), (($writer = [nil]), $send(self.lexer, 'comments=', Opal.to_a($writer)), $writer[$rb_minus($writer["length"], 1)]))
        }; })();
      }, $Base_tokenize$12.$$arity = -2);
      self.$private();
      
      Opal.def(self, '$next_token', $Base_next_token$13 = function $$next_token() {
        var self = this, token = nil;

        
        token = self.lexer.$advance();
        self.last_token = token;
        return token;
      }, $Base_next_token$13.$$arity = 0);
      
      Opal.def(self, '$check_kwarg_name', $Base_check_kwarg_name$14 = function $$check_kwarg_name(name_t) {
        var self = this, $case = nil;

        return (function() {$case = name_t['$[]'](0);
        if (/^[a-z_]/['$===']($case)) {return nil}
        else if (/^[A-Z]/['$===']($case)) {return self.$diagnostic("error", "argument_const", nil, name_t)}
        else { return nil }})()
      }, $Base_check_kwarg_name$14.$$arity = 1);
      
      Opal.def(self, '$diagnostic', $Base_diagnostic$15 = function $$diagnostic(level, reason, arguments$, location_t, highlights_ts) {
        var $a, $b, $$16, self = this, _ = nil, location = nil, highlights = nil;

        
        
        if (highlights_ts == null) {
          highlights_ts = [];
        };
        $b = location_t, $a = Opal.to_ary($b), (_ = ($a[0] == null ? nil : $a[0])), (location = ($a[1] == null ? nil : $a[1])), $b;
        highlights = $send(highlights_ts, 'map', [], ($$16 = function(token){var self = $$16.$$s == null ? this : $$16.$$s, $c, $d, range = nil;

        
          
          if (token == null) {
            token = nil;
          };
          $d = token, $c = Opal.to_ary($d), (_ = ($c[0] == null ? nil : $c[0])), (range = ($c[1] == null ? nil : $c[1])), $d;
          return range;}, $$16.$$s = self, $$16.$$arity = 1, $$16));
        self.diagnostics.$process($$($nesting, 'Diagnostic').$new(level, reason, arguments$, location, highlights));
        if (level['$==']("error")) {
          return self.$yyerror()
        } else {
          return nil
        };
      }, $Base_diagnostic$15.$$arity = -5);
      return (Opal.def(self, '$on_error', $Base_on_error$17 = function $$on_error(error_token_id, error_value, value_stack) {
        var $a, $b, self = this, token_name = nil, _ = nil, location = nil;

        
        token_name = self.$token_to_str(error_token_id);
        $b = error_value, $a = Opal.to_ary($b), (_ = ($a[0] == null ? nil : $a[0])), (location = ($a[1] == null ? nil : $a[1])), $b;
        return self.diagnostics.$process($$($nesting, 'Diagnostic').$new("error", "unexpected_token", $hash2(["token"], {"token": token_name}), location));
      }, $Base_on_error$17.$$arity = 3), nil) && 'on_error';
    })($nesting[0], $$$($$($nesting, 'Racc'), 'Parser'), $nesting)
  })($nesting[0], $nesting)
};

/* Generated by Opal 1.0.0 */
Opal.modules["parser/rewriter"] = function(Opal) {
  function $rb_minus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs - rhs : lhs['$-'](rhs);
  }
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.$$$, $$ = Opal.$$, $module = Opal.module, $klass = Opal.klass, $send = Opal.send, $send2 = Opal.send2;

  Opal.add_stubs(['$new', '$process', '$include?', '$type', '$remove', '$wrap', '$insert_before', '$insert_after', '$replace', '$freeze', '$join', '$extend', '$warn_of_deprecation', '$class', '$warned_of_deprecation=', '$-']);
  return (function($base, $parent_nesting) {
    var self = $module($base, 'Parser');

    var $nesting = [self].concat($parent_nesting);

    (function($base, $super, $parent_nesting) {
      var self = $klass($base, $super, 'Rewriter');

      var $nesting = [self].concat($parent_nesting), $Rewriter_rewrite$1, $Rewriter_assignment$ques$2, $Rewriter_remove$3, $Rewriter_wrap$4, $Rewriter_insert_before$5, $Rewriter_insert_after$6, $Rewriter_replace$7, $Rewriter_initialize$8;

      self.$$prototype.source_rewriter = nil;
      
      
      Opal.def(self, '$rewrite', $Rewriter_rewrite$1 = function $$rewrite(source_buffer, ast) {
        var self = this;

        
        self.source_rewriter = $$$($$($nesting, 'Source'), 'Rewriter').$new(source_buffer);
        self.$process(ast);
        return self.source_rewriter.$process();
      }, $Rewriter_rewrite$1.$$arity = 2);
      
      Opal.def(self, '$assignment?', $Rewriter_assignment$ques$2 = function(node) {
        var self = this;

        return ["lvasgn", "ivasgn", "gvasgn", "cvasgn", "casgn"]['$include?'](node.$type())
      }, $Rewriter_assignment$ques$2.$$arity = 1);
      
      Opal.def(self, '$remove', $Rewriter_remove$3 = function $$remove(range) {
        var self = this;

        return self.source_rewriter.$remove(range)
      }, $Rewriter_remove$3.$$arity = 1);
      
      Opal.def(self, '$wrap', $Rewriter_wrap$4 = function $$wrap(range, before, after) {
        var self = this;

        return self.source_rewriter.$wrap(range, before, after)
      }, $Rewriter_wrap$4.$$arity = 3);
      
      Opal.def(self, '$insert_before', $Rewriter_insert_before$5 = function $$insert_before(range, content) {
        var self = this;

        return self.source_rewriter.$insert_before(range, content)
      }, $Rewriter_insert_before$5.$$arity = 2);
      
      Opal.def(self, '$insert_after', $Rewriter_insert_after$6 = function $$insert_after(range, content) {
        var self = this;

        return self.source_rewriter.$insert_after(range, content)
      }, $Rewriter_insert_after$6.$$arity = 2);
      
      Opal.def(self, '$replace', $Rewriter_replace$7 = function $$replace(range, content) {
        var self = this;

        return self.source_rewriter.$replace(range, content)
      }, $Rewriter_replace$7.$$arity = 2);
      Opal.const_set($nesting[0], 'DEPRECATION_WARNING', ["Parser::Rewriter is deprecated.", "Please update your code to use Parser::TreeRewriter instead"].$join("\n").$freeze());
      self.$extend($$($nesting, 'Deprecation'));
      return (Opal.def(self, '$initialize', $Rewriter_initialize$8 = function $$initialize($a) {
        var $post_args, $iter = $Rewriter_initialize$8.$$p, $yield = $iter || nil, self = this, $writer = nil, $zuper = nil, $zuper_i = nil, $zuper_ii = nil;

        if ($iter) $Rewriter_initialize$8.$$p = null;
        // Prepare super implicit arguments
        for($zuper_i = 0, $zuper_ii = arguments.length, $zuper = new Array($zuper_ii); $zuper_i < $zuper_ii; $zuper_i++) {
          $zuper[$zuper_i] = arguments[$zuper_i];
        }
        
        
        $post_args = Opal.slice.call(arguments, 0, arguments.length);
        ;
        self.$class().$warn_of_deprecation();
        
        $writer = [true];
        $send($$$($$($nesting, 'Source'), 'Rewriter'), 'warned_of_deprecation=', Opal.to_a($writer));
        $writer[$rb_minus($writer["length"], 1)];;
        return $send2(self, Opal.find_super_dispatcher(self, 'initialize', $Rewriter_initialize$8, false, true), 'initialize', $zuper, $iter);
      }, $Rewriter_initialize$8.$$arity = -1), nil) && 'initialize';
    })($nesting[0], $$$($$$($$($nesting, 'Parser'), 'AST'), 'Processor'), $nesting)
  })($nesting[0], $nesting)
};

/* Generated by Opal 1.0.0 */
Opal.modules["parser/tree_rewriter"] = function(Opal) {
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.$$$, $$ = Opal.$$, $module = Opal.module, $klass = Opal.klass, $hash2 = Opal.hash2, $hash = Opal.hash;

  Opal.add_stubs(['$new', '$process', '$include?', '$type', '$remove', '$wrap', '$insert_before', '$insert_after', '$replace']);
  return (function($base, $parent_nesting) {
    var self = $module($base, 'Parser');

    var $nesting = [self].concat($parent_nesting);

    (function($base, $super, $parent_nesting) {
      var self = $klass($base, $super, 'TreeRewriter');

      var $nesting = [self].concat($parent_nesting), $TreeRewriter_rewrite$1, $TreeRewriter_assignment$ques$2, $TreeRewriter_remove$3, $TreeRewriter_wrap$4, $TreeRewriter_insert_before$5, $TreeRewriter_insert_after$6, $TreeRewriter_replace$7;

      self.$$prototype.source_rewriter = nil;
      
      
      Opal.def(self, '$rewrite', $TreeRewriter_rewrite$1 = function $$rewrite(source_buffer, ast, $kwargs) {
        var policy, self = this;

        
        
        if ($kwargs == null) {
          $kwargs = $hash2([], {});
        } else if (!$kwargs.$$is_hash) {
          throw Opal.ArgumentError.$new('expected kwargs');
        };
        
        policy = Opal.kwrestargs($kwargs, {});;
        self.source_rewriter = $$$($$$($$($nesting, 'Parser'), 'Source'), 'TreeRewriter').$new(source_buffer, Opal.to_hash(policy));
        self.$process(ast);
        return self.source_rewriter.$process();
      }, $TreeRewriter_rewrite$1.$$arity = -3);
      
      Opal.def(self, '$assignment?', $TreeRewriter_assignment$ques$2 = function(node) {
        var self = this;

        return ["lvasgn", "ivasgn", "gvasgn", "cvasgn", "casgn"]['$include?'](node.$type())
      }, $TreeRewriter_assignment$ques$2.$$arity = 1);
      
      Opal.def(self, '$remove', $TreeRewriter_remove$3 = function $$remove(range) {
        var self = this;

        return self.source_rewriter.$remove(range)
      }, $TreeRewriter_remove$3.$$arity = 1);
      
      Opal.def(self, '$wrap', $TreeRewriter_wrap$4 = function $$wrap(range, before, after) {
        var self = this;

        return self.source_rewriter.$wrap(range, before, after)
      }, $TreeRewriter_wrap$4.$$arity = 3);
      
      Opal.def(self, '$insert_before', $TreeRewriter_insert_before$5 = function $$insert_before(range, content) {
        var self = this;

        return self.source_rewriter.$insert_before(range, content)
      }, $TreeRewriter_insert_before$5.$$arity = 2);
      
      Opal.def(self, '$insert_after', $TreeRewriter_insert_after$6 = function $$insert_after(range, content) {
        var self = this;

        return self.source_rewriter.$insert_after(range, content)
      }, $TreeRewriter_insert_after$6.$$arity = 2);
      return (Opal.def(self, '$replace', $TreeRewriter_replace$7 = function $$replace(range, content) {
        var self = this;

        return self.source_rewriter.$replace(range, content)
      }, $TreeRewriter_replace$7.$$arity = 2), nil) && 'replace';
    })($nesting[0], $$$($$$($$($nesting, 'Parser'), 'AST'), 'Processor'), $nesting)
  })($nesting[0], $nesting)
};

/* Generated by Opal 1.0.0 */
Opal.modules["parser"] = function(Opal) {
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.$$$, $$ = Opal.$$, $truthy = Opal.truthy, $module = Opal.module;

  Opal.add_stubs(['$=~', '$require', '$raise']);
  
  if ($truthy($$($nesting, 'RUBY_VERSION')['$=~'](/^1\.[89]\./))) {
    
    self.$require("parser/version");
    self.$raise($$($nesting, 'LoadError'), "" + "parser v" + ($$$($$($nesting, 'Parser'), 'VERSION')) + " cannot run on Ruby " + ($$($nesting, 'RUBY_VERSION')) + ".\n" + "Please upgrade to Ruby 2.0.0 or higher, or use an older version of the parser gem.\n");};
  self.$require("set");
  self.$require("racc/parser");
  self.$require("ast");
  return (function($base, $parent_nesting) {
    var self = $module($base, 'Parser');

    var $nesting = [self].concat($parent_nesting);

    
    self.$require("parser/version");
    self.$require("parser/messages");
    self.$require("parser/deprecation");
    (function($base, $parent_nesting) {
      var self = $module($base, 'AST');

      var $nesting = [self].concat($parent_nesting);

      
      self.$require("parser/ast/node");
      self.$require("parser/ast/processor");
      self.$require("parser/meta");
    })($nesting[0], $nesting);
    (function($base, $parent_nesting) {
      var self = $module($base, 'Source');

      var $nesting = [self].concat($parent_nesting);

      
      self.$require("parser/source/buffer");
      self.$require("parser/source/range");
      self.$require("parser/source/comment");
      self.$require("parser/source/comment/associator");
      self.$require("parser/source/rewriter");
      self.$require("parser/source/rewriter/action");
      self.$require("parser/source/tree_rewriter");
      self.$require("parser/source/tree_rewriter/action");
      self.$require("parser/source/map");
      self.$require("parser/source/map/operator");
      self.$require("parser/source/map/collection");
      self.$require("parser/source/map/constant");
      self.$require("parser/source/map/variable");
      self.$require("parser/source/map/keyword");
      self.$require("parser/source/map/definition");
      self.$require("parser/source/map/endless_definition");
      self.$require("parser/source/map/send");
      self.$require("parser/source/map/index");
      self.$require("parser/source/map/condition");
      self.$require("parser/source/map/ternary");
      self.$require("parser/source/map/for");
      self.$require("parser/source/map/rescue_body");
      self.$require("parser/source/map/heredoc");
      self.$require("parser/source/map/objc_kwarg");
    })($nesting[0], $nesting);
    self.$require("parser/syntax_error");
    self.$require("parser/clobbering_error");
    self.$require("parser/diagnostic");
    self.$require("parser/diagnostic/engine");
    self.$require("parser/static_environment");
    self.$require("parser/lexer");
    self.$require("parser/lexer/literal");
    self.$require("parser/lexer/stack_state");
    self.$require("parser/lexer/dedenter");
    (function($base, $parent_nesting) {
      var self = $module($base, 'Builders');

      var $nesting = [self].concat($parent_nesting);

      self.$require("parser/builders/default")
    })($nesting[0], $nesting);
    self.$require("parser/context");
    self.$require("parser/max_numparam_stack");
    self.$require("parser/current_arg_stack");
    self.$require("parser/variables_stack");
    self.$require("parser/base");
    self.$require("parser/rewriter");
    self.$require("parser/tree_rewriter");
  })($nesting[0], $nesting);
};

/* Generated by Opal 1.0.0 */
Opal.modules["parser/ruby25"] = function(Opal) {
  function $rb_minus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs - rhs : lhs['$-'](rhs);
  }
  function $rb_plus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs + rhs : lhs['$+'](rhs);
  }
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.$$$, $$ = Opal.$$, $module = Opal.module, $klass = Opal.klass, $send = Opal.send, $truthy = Opal.truthy, $hash = Opal.hash, $slice = Opal.slice;

  Opal.add_stubs(['$require', '$new', '$each', '$split', '$empty?', '$to_i', '$[]=', '$-', '$+', '$compstmt', '$[]', '$<<', '$preexe', '$!', '$nil?', '$diagnostic', '$begin_body', '$state=', '$alias', '$gvar', '$back_ref', '$undef_method', '$condition_mod', '$loop_mod', '$rescue_body', '$postexe', '$multi_assign', '$assign', '$array', '$op_assign', '$index', '$call_method', '$const_op_assignable', '$const_fetch', '$logical_op', '$not_op', '$push', '$cond', '$pop', '$block', '$keyword_cmd', '$multi_lhs', '$begin', '$splat', '$concat', '$assignable', '$index_asgn', '$attr_asgn', '$const_global', '$const', '$symbol', '$range_inclusive', '$range_exclusive', '$binary_op', '$unary_op', '$match_op', '$ternary', '$associate', '$==', '$cmdarg', '$block_pass', '$begin_keyword', '$call_lambda', '$condition', '$loop', '$case', '$for', '$extend_static', '$class_definition_allowed?', '$def_class', '$unextend', '$def_sclass', '$module_definition_allowed?', '$def_module', '$def_method', '$def_singleton', '$in_class?', '$arg', '$restarg', '$size', '$procarg0', '$args', '$declare', '$shadowarg', '$extend_dynamic', '$when', '$string_compose', '$dedent_string', '$dedent_level', '$string', '$character', '$xstring_compose', '$regexp_options', '$regexp_compose', '$words_compose', '$word', '$symbols_compose', '$string_internal', '$symbol_internal', '$ivar', '$cvar', '$symbol_compose', '$respond_to?', '$negate', '$unary_num', '$integer', '$float', '$rational', '$complex', '$ident', '$nil', '$self', '$true', '$false', '$__FILE__', '$__LINE__', '$__ENCODING__', '$accessible', '$nth_ref', '$in_kwarg', '$in_kwarg=', '$check_kwarg_name', '$kwoptarg', '$kwarg', '$kwrestarg', '$optarg', '$blockarg', '$pair', '$pair_keyword', '$pair_quoted', '$kwsplat', '$yyerrok']);
  
  self.$require("racc/parser.rb");
  self.$require("parser");
  return (function($base, $parent_nesting) {
    var self = $module($base, 'Parser');

    var $nesting = [self].concat($parent_nesting);

    (function($base, $super, $parent_nesting) {
      var self = $klass($base, $super, 'Ruby25');

      var $nesting = [self].concat($parent_nesting), $Ruby25_version$1, $Ruby25_default_encoding$2, $Ruby25$3, $Ruby25$5, $Ruby25$7, $Ruby25$9, $Ruby25__reduce_2$11, $Ruby25__reduce_3$12, $Ruby25__reduce_4$13, $Ruby25__reduce_5$14, $Ruby25__reduce_6$15, $Ruby25__reduce_8$16, $Ruby25__reduce_9$17, $Ruby25__reduce_10$18, $Ruby25__reduce_11$19, $Ruby25__reduce_12$20, $Ruby25__reduce_13$21, $Ruby25__reduce_14$22, $Ruby25__reduce_15$23, $Ruby25__reduce_17$24, $Ruby25__reduce_18$25, $Ruby25__reduce_19$26, $Ruby25__reduce_20$27, $Ruby25__reduce_21$28, $Ruby25__reduce_22$29, $Ruby25__reduce_23$30, $Ruby25__reduce_24$31, $Ruby25__reduce_25$32, $Ruby25__reduce_26$33, $Ruby25__reduce_27$34, $Ruby25__reduce_28$35, $Ruby25__reduce_29$36, $Ruby25__reduce_31$37, $Ruby25__reduce_32$38, $Ruby25__reduce_33$39, $Ruby25__reduce_35$40, $Ruby25__reduce_36$41, $Ruby25__reduce_37$42, $Ruby25__reduce_38$43, $Ruby25__reduce_39$44, $Ruby25__reduce_40$45, $Ruby25__reduce_41$46, $Ruby25__reduce_42$47, $Ruby25__reduce_44$48, $Ruby25__reduce_47$49, $Ruby25__reduce_48$50, $Ruby25__reduce_49$51, $Ruby25__reduce_50$52, $Ruby25__reduce_53$53, $Ruby25__reduce_54$54, $Ruby25__reduce_58$55, $Ruby25__reduce_59$56, $Ruby25__reduce_60$57, $Ruby25__reduce_62$58, $Ruby25__reduce_63$59, $Ruby25__reduce_64$60, $Ruby25__reduce_65$61, $Ruby25__reduce_66$62, $Ruby25__reduce_67$63, $Ruby25__reduce_68$64, $Ruby25__reduce_69$65, $Ruby25__reduce_70$66, $Ruby25__reduce_71$67, $Ruby25__reduce_72$68, $Ruby25__reduce_73$69, $Ruby25__reduce_74$70, $Ruby25__reduce_75$71, $Ruby25__reduce_76$72, $Ruby25__reduce_78$73, $Ruby25__reduce_79$74, $Ruby25__reduce_80$75, $Ruby25__reduce_81$76, $Ruby25__reduce_82$77, $Ruby25__reduce_83$78, $Ruby25__reduce_84$79, $Ruby25__reduce_85$80, $Ruby25__reduce_86$81, $Ruby25__reduce_88$82, $Ruby25__reduce_89$83, $Ruby25__reduce_90$84, $Ruby25__reduce_91$85, $Ruby25__reduce_92$86, $Ruby25__reduce_93$87, $Ruby25__reduce_94$88, $Ruby25__reduce_95$89, $Ruby25__reduce_96$90, $Ruby25__reduce_97$91, $Ruby25__reduce_98$92, $Ruby25__reduce_99$93, $Ruby25__reduce_100$94, $Ruby25__reduce_101$95, $Ruby25__reduce_102$96, $Ruby25__reduce_103$97, $Ruby25__reduce_104$98, $Ruby25__reduce_105$99, $Ruby25__reduce_106$100, $Ruby25__reduce_107$101, $Ruby25__reduce_108$102, $Ruby25__reduce_109$103, $Ruby25__reduce_110$104, $Ruby25__reduce_111$105, $Ruby25__reduce_113$106, $Ruby25__reduce_114$107, $Ruby25__reduce_115$108, $Ruby25__reduce_121$109, $Ruby25__reduce_125$110, $Ruby25__reduce_126$111, $Ruby25__reduce_127$112, $Ruby25__reduce_199$113, $Ruby25__reduce_200$114, $Ruby25__reduce_201$115, $Ruby25__reduce_202$116, $Ruby25__reduce_203$117, $Ruby25__reduce_204$118, $Ruby25__reduce_205$119, $Ruby25__reduce_206$120, $Ruby25__reduce_207$121, $Ruby25__reduce_208$122, $Ruby25__reduce_209$123, $Ruby25__reduce_210$124, $Ruby25__reduce_211$125, $Ruby25__reduce_212$126, $Ruby25__reduce_213$127, $Ruby25__reduce_214$128, $Ruby25__reduce_215$129, $Ruby25__reduce_216$130, $Ruby25__reduce_217$131, $Ruby25__reduce_218$132, $Ruby25__reduce_219$133, $Ruby25__reduce_220$134, $Ruby25__reduce_221$135, $Ruby25__reduce_222$136, $Ruby25__reduce_224$137, $Ruby25__reduce_225$138, $Ruby25__reduce_226$139, $Ruby25__reduce_227$140, $Ruby25__reduce_228$141, $Ruby25__reduce_229$142, $Ruby25__reduce_230$143, $Ruby25__reduce_231$144, $Ruby25__reduce_232$145, $Ruby25__reduce_233$146, $Ruby25__reduce_234$147, $Ruby25__reduce_235$148, $Ruby25__reduce_236$149, $Ruby25__reduce_242$150, $Ruby25__reduce_243$151, $Ruby25__reduce_247$152, $Ruby25__reduce_248$153, $Ruby25__reduce_250$154, $Ruby25__reduce_251$155, $Ruby25__reduce_252$156, $Ruby25__reduce_254$157, $Ruby25__reduce_257$158, $Ruby25__reduce_258$159, $Ruby25__reduce_259$160, $Ruby25__reduce_260$161, $Ruby25__reduce_261$162, $Ruby25__reduce_262$163, $Ruby25__reduce_263$164, $Ruby25__reduce_264$165, $Ruby25__reduce_265$166, $Ruby25__reduce_266$167, $Ruby25__reduce_267$168, $Ruby25__reduce_268$169, $Ruby25__reduce_269$170, $Ruby25__reduce_270$171, $Ruby25__reduce_271$172, $Ruby25__reduce_272$173, $Ruby25__reduce_273$174, $Ruby25__reduce_275$175, $Ruby25__reduce_276$176, $Ruby25__reduce_277$177, $Ruby25__reduce_288$178, $Ruby25__reduce_289$179, $Ruby25__reduce_290$180, $Ruby25__reduce_291$181, $Ruby25__reduce_292$182, $Ruby25__reduce_293$183, $Ruby25__reduce_294$184, $Ruby25__reduce_295$185, $Ruby25__reduce_296$186, $Ruby25__reduce_297$187, $Ruby25__reduce_298$188, $Ruby25__reduce_299$189, $Ruby25__reduce_300$190, $Ruby25__reduce_301$191, $Ruby25__reduce_302$192, $Ruby25__reduce_303$193, $Ruby25__reduce_304$194, $Ruby25__reduce_305$195, $Ruby25__reduce_306$196, $Ruby25__reduce_307$197, $Ruby25__reduce_309$198, $Ruby25__reduce_310$199, $Ruby25__reduce_311$200, $Ruby25__reduce_312$201, $Ruby25__reduce_313$202, $Ruby25__reduce_314$203, $Ruby25__reduce_315$204, $Ruby25__reduce_316$205, $Ruby25__reduce_317$206, $Ruby25__reduce_318$207, $Ruby25__reduce_319$208, $Ruby25__reduce_320$209, $Ruby25__reduce_321$210, $Ruby25__reduce_322$211, $Ruby25__reduce_323$212, $Ruby25__reduce_324$213, $Ruby25__reduce_325$214, $Ruby25__reduce_326$215, $Ruby25__reduce_327$216, $Ruby25__reduce_328$217, $Ruby25__reduce_329$218, $Ruby25__reduce_330$219, $Ruby25__reduce_331$220, $Ruby25__reduce_332$221, $Ruby25__reduce_333$222, $Ruby25__reduce_335$223, $Ruby25__reduce_338$224, $Ruby25__reduce_342$225, $Ruby25__reduce_344$226, $Ruby25__reduce_347$227, $Ruby25__reduce_348$228, $Ruby25__reduce_349$229, $Ruby25__reduce_350$230, $Ruby25__reduce_352$231, $Ruby25__reduce_353$232, $Ruby25__reduce_354$233, $Ruby25__reduce_355$234, $Ruby25__reduce_356$235, $Ruby25__reduce_357$236, $Ruby25__reduce_358$237, $Ruby25__reduce_359$238, $Ruby25__reduce_360$239, $Ruby25__reduce_361$240, $Ruby25__reduce_362$241, $Ruby25__reduce_363$242, $Ruby25__reduce_364$243, $Ruby25__reduce_365$244, $Ruby25__reduce_366$245, $Ruby25__reduce_367$246, $Ruby25__reduce_368$247, $Ruby25__reduce_369$248, $Ruby25__reduce_370$249, $Ruby25__reduce_372$250, $Ruby25__reduce_373$251, $Ruby25__reduce_374$252, $Ruby25__reduce_375$253, $Ruby25__reduce_376$254, $Ruby25__reduce_377$255, $Ruby25__reduce_378$256, $Ruby25__reduce_379$257, $Ruby25__reduce_381$258, $Ruby25__reduce_382$259, $Ruby25__reduce_383$260, $Ruby25__reduce_384$261, $Ruby25__reduce_385$262, $Ruby25__reduce_386$263, $Ruby25__reduce_387$264, $Ruby25__reduce_388$265, $Ruby25__reduce_389$266, $Ruby25__reduce_390$267, $Ruby25__reduce_392$268, $Ruby25__reduce_393$269, $Ruby25__reduce_394$270, $Ruby25__reduce_395$271, $Ruby25__reduce_396$272, $Ruby25__reduce_397$273, $Ruby25__reduce_398$274, $Ruby25__reduce_399$275, $Ruby25__reduce_400$276, $Ruby25__reduce_401$277, $Ruby25__reduce_402$278, $Ruby25__reduce_403$279, $Ruby25__reduce_404$280, $Ruby25__reduce_405$281, $Ruby25__reduce_406$282, $Ruby25__reduce_407$283, $Ruby25__reduce_408$284, $Ruby25__reduce_409$285, $Ruby25__reduce_410$286, $Ruby25__reduce_411$287, $Ruby25__reduce_412$288, $Ruby25__reduce_413$289, $Ruby25__reduce_414$290, $Ruby25__reduce_415$291, $Ruby25__reduce_416$292, $Ruby25__reduce_417$293, $Ruby25__reduce_418$294, $Ruby25__reduce_419$295, $Ruby25__reduce_420$296, $Ruby25__reduce_421$297, $Ruby25__reduce_422$298, $Ruby25__reduce_423$299, $Ruby25__reduce_424$300, $Ruby25__reduce_425$301, $Ruby25__reduce_426$302, $Ruby25__reduce_428$303, $Ruby25__reduce_429$304, $Ruby25__reduce_430$305, $Ruby25__reduce_433$306, $Ruby25__reduce_435$307, $Ruby25__reduce_440$308, $Ruby25__reduce_441$309, $Ruby25__reduce_442$310, $Ruby25__reduce_443$311, $Ruby25__reduce_444$312, $Ruby25__reduce_445$313, $Ruby25__reduce_446$314, $Ruby25__reduce_447$315, $Ruby25__reduce_448$316, $Ruby25__reduce_449$317, $Ruby25__reduce_450$318, $Ruby25__reduce_451$319, $Ruby25__reduce_452$320, $Ruby25__reduce_453$321, $Ruby25__reduce_454$322, $Ruby25__reduce_455$323, $Ruby25__reduce_456$324, $Ruby25__reduce_457$325, $Ruby25__reduce_458$326, $Ruby25__reduce_459$327, $Ruby25__reduce_460$328, $Ruby25__reduce_461$329, $Ruby25__reduce_462$330, $Ruby25__reduce_463$331, $Ruby25__reduce_464$332, $Ruby25__reduce_465$333, $Ruby25__reduce_466$334, $Ruby25__reduce_467$335, $Ruby25__reduce_468$336, $Ruby25__reduce_469$337, $Ruby25__reduce_470$338, $Ruby25__reduce_471$339, $Ruby25__reduce_472$340, $Ruby25__reduce_473$341, $Ruby25__reduce_474$342, $Ruby25__reduce_476$343, $Ruby25__reduce_477$344, $Ruby25__reduce_478$345, $Ruby25__reduce_479$346, $Ruby25__reduce_480$347, $Ruby25__reduce_481$348, $Ruby25__reduce_482$349, $Ruby25__reduce_483$350, $Ruby25__reduce_484$351, $Ruby25__reduce_485$352, $Ruby25__reduce_486$353, $Ruby25__reduce_487$354, $Ruby25__reduce_488$355, $Ruby25__reduce_489$356, $Ruby25__reduce_490$357, $Ruby25__reduce_491$358, $Ruby25__reduce_492$359, $Ruby25__reduce_493$360, $Ruby25__reduce_494$361, $Ruby25__reduce_495$362, $Ruby25__reduce_496$363, $Ruby25__reduce_497$364, $Ruby25__reduce_498$365, $Ruby25__reduce_499$366, $Ruby25__reduce_500$367, $Ruby25__reduce_501$368, $Ruby25__reduce_502$369, $Ruby25__reduce_503$370, $Ruby25__reduce_504$371, $Ruby25__reduce_505$372, $Ruby25__reduce_506$373, $Ruby25__reduce_507$374, $Ruby25__reduce_508$375, $Ruby25__reduce_509$376, $Ruby25__reduce_510$377, $Ruby25__reduce_511$378, $Ruby25__reduce_512$379, $Ruby25__reduce_513$380, $Ruby25__reduce_514$381, $Ruby25__reduce_515$382, $Ruby25__reduce_516$383, $Ruby25__reduce_517$384, $Ruby25__reduce_518$385, $Ruby25__reduce_519$386, $Ruby25__reduce_520$387, $Ruby25__reduce_521$388, $Ruby25__reduce_522$389, $Ruby25__reduce_523$390, $Ruby25__reduce_524$391, $Ruby25__reduce_525$392, $Ruby25__reduce_526$393, $Ruby25__reduce_527$394, $Ruby25__reduce_528$395, $Ruby25__reduce_529$396, $Ruby25__reduce_530$397, $Ruby25__reduce_531$398, $Ruby25__reduce_532$399, $Ruby25__reduce_534$400, $Ruby25__reduce_535$401, $Ruby25__reduce_536$402, $Ruby25__reduce_537$403, $Ruby25__reduce_538$404, $Ruby25__reduce_539$405, $Ruby25__reduce_540$406, $Ruby25__reduce_541$407, $Ruby25__reduce_542$408, $Ruby25__reduce_543$409, $Ruby25__reduce_544$410, $Ruby25__reduce_545$411, $Ruby25__reduce_546$412, $Ruby25__reduce_547$413, $Ruby25__reduce_548$414, $Ruby25__reduce_551$415, $Ruby25__reduce_552$416, $Ruby25__reduce_553$417, $Ruby25__reduce_554$418, $Ruby25__reduce_555$419, $Ruby25__reduce_556$420, $Ruby25__reduce_557$421, $Ruby25__reduce_558$422, $Ruby25__reduce_561$423, $Ruby25__reduce_562$424, $Ruby25__reduce_565$425, $Ruby25__reduce_566$426, $Ruby25__reduce_567$427, $Ruby25__reduce_569$428, $Ruby25__reduce_570$429, $Ruby25__reduce_572$430, $Ruby25__reduce_573$431, $Ruby25__reduce_574$432, $Ruby25__reduce_575$433, $Ruby25__reduce_576$434, $Ruby25__reduce_577$435, $Ruby25__reduce_590$436, $Ruby25__reduce_591$437, $Ruby25__reduce_596$438, $Ruby25__reduce_597$439, $Ruby25__reduce_601$440, $Ruby25__reduce_605$441, $Ruby25__reduce_none$442, clist = nil, racc_action_table = nil, arr = nil, idx = nil, racc_action_check = nil, racc_action_pointer = nil, racc_action_default = nil, racc_goto_table = nil, racc_goto_check = nil, racc_goto_pointer = nil, racc_goto_default = nil, racc_reduce_table = nil, racc_reduce_n = nil, racc_shift_n = nil, racc_token_table = nil, racc_nt_base = nil, racc_use_result_var = nil;

      self.$$prototype.builder = self.$$prototype.lexer = self.$$prototype.context = self.$$prototype.last_token = self.$$prototype.static_env = nil;
      
      
      Opal.def(self, '$version', $Ruby25_version$1 = function $$version() {
        var self = this;

        return 25
      }, $Ruby25_version$1.$$arity = 0);
      
      Opal.def(self, '$default_encoding', $Ruby25_default_encoding$2 = function $$default_encoding() {
        var self = this;

        return $$$($$($nesting, 'Encoding'), 'UTF_8')
      }, $Ruby25_default_encoding$2.$$arity = 0);
      clist = ["-585,608,547,212,213,-109,-107,-585,-585,-585,222,547,-585,-585,-585", "777,-585,274,547,870,243,-88,547,588,777,-585,-585,-585,-585,-102,560", "-74,983,590,561,-110,-585,-585,-104,-585,-585,-585,-585,-585,-105,-103", "-107,-109,-110,1025,776,223,240,993,212,213,242,241,-105,776,212,213", "993,-104,-103,-105,-585,-585,-585,-585,-585,-585,-585,-585,-585,-585", "-585,-585,-585,-585,115,-108,-585,-585,-585,114,765,-585,547,587,-585", "-102,-106,-585,-585,993,-585,223,-585,589,-585,111,-585,-585,273,-585", "-585,-585,-585,-585,-296,-585,-585,-585,-100,-98,703,-296,-296,-296", "115,-106,938,-296,-296,114,-296,-585,869,115,-585,-585,-585,-585,114", "-585,115,-585,-93,823,115,114,-585,-106,-101,114,-296,-296,223,-296", "-296,-296,-296,-296,223,274,-104,-581,-582,-108,-96,-104,-105,-103,-107", "-109,-110,-105,-103,-107,-109,-110,-95,-94,-96,983,-296,-296,-296,-296", "-296,-296,-296,-296,-296,-296,-296,-296,-296,-296,274,220,-296,-296", "-296,218,613,606,-581,-108,-296,-97,267,-296,-108,993,115,-95,-296,-102", "-296,114,-296,-296,-102,-296,-296,-296,-296,-296,115,-296,-585,-296", "-582,114,-96,456,750,-585,-585,-585,93,94,607,-585,-585,-296,-585,-106", "-296,-296,273,-296,-106,-296,-498,-585,-110,212,213,115,-296,-108,269", "-579,114,274,-585,-585,219,-585,-585,-585,-585,-585,-96,218,-99,-96", "789,115,554,-95,967,575,114,273,223,-96,-97,93,94,565,-110,-104,212", "213,-585,-585,-585,-585,-585,-585,-585,-585,-585,-585,-585,-585,-585", "-585,602,-102,-585,-585,-585,-487,614,-499,95,96,-585,-95,-487,-585", "-95,-585,575,-579,-585,269,-585,-487,-585,-585,-95,-585,-585,-585,-585", "-585,219,-585,-585,-585,-98,820,789,577,576,573,-579,115,273,-581,-97", "269,114,-585,575,598,-585,-585,-585,-97,641,-585,597,95,96,-585,-585", "-585,-585,-106,-103,-585,-585,-585,-585,680,-487,677,676,675,-585,678", "842,-585,618,-581,577,576,575,-585,-97,820,789,-97,-585,-585,735,-585", "-585,-585,-585,-585,115,-97,115,-269,-98,114,-585,114,680,595,677,676", "675,218,678,592,577,576,573,609,267,243,-585,-585,-585,-585,-585,-585", "-585,-585,-585,-585,-585,-585,-585,-585,-585,-104,-585,-585,-585,243", "614,243,-98,243,-585,-98,575,-585,577,576,575,524,-585,981,-585,-98", "-585,-585,737,-585,-585,-585,-585,-585,-296,-585,-585,-585,763,223,750", "-296,-296,-296,-107,223,219,-296,-296,537,-296,-585,539,223,-585,-585", "997,-585,888,-585,537,537,-578,539,536,764,-585,-106,-100,223,-296,-296", "220,-296,-296,-296,-296,-296,-109,-88,577,576,591,218,577,576,582,-95", "537,-491,563,539,644,524,223,-105,-491,-104,530,565,-296,-296,-296,-296", "-296,-296,-296,-296,-296,-296,-296,-296,-296,-296,-484,655,-296,-296", "-296,-101,613,-484,-107,660,-296,575,-578,-296,575,-110,-484,575,-296", "661,-296,223,-296,-296,663,-296,-296,-296,-296,-296,-484,-296,699,-296", "219,-578,-109,-484,-484,-484,-491,704,-484,-484,-484,-297,-484,-296", "260,261,-296,-296,-297,-99,-484,-296,-484,-484,-484,212,213,-297,-296", "-108,705,-484,-484,-484,554,-484,-484,-484,-484,-484,707,577,576,586", "577,576,578,577,576,580,259,258,403,-490,-489,696,695,405,404,567,-490", "-489,-484,-484,-484,-484,-484,-484,-484,-484,-484,-484,-484,-484,-484", "-484,-297,218,-484,-484,-484,218,-484,-484,557,559,-484,558,453,-484", "-484,724,-484,555,-484,734,-484,454,-484,-484,738,-484,-484,-484,-484", "-484,-492,-484,-487,-484,739,395,-270,-492,554,-487,-487,-487,-490,-489", "-487,-487,-487,-484,-487,499,-484,-484,-484,-484,751,-484,-487,-484", "-487,-487,-487,541,-484,-484,81,540,219,486,-487,-487,219,-487,-487", "-487,-487,-487,82,-334,223,486,243,218,-495,-493,-334,-494,83,223,527", "-495,-493,768,-494,-334,769,-492,263,454,-487,-487,-487,-487,-487,-487", "-487,-487,-487,-487,-487,-487,-487,-487,774,-297,-487,-487,-487,218", "-487,-487,-297,779,-487,497,967,-487,-487,499,-487,-297,-487,525,-487", "565,-487,-487,521,-487,-487,-487,-487,-487,-334,-487,-296,-487,219,-495", "-493,655,-494,-296,-296,-296,223,269,-296,-296,-296,-487,-296,269,-487", "-487,-487,-487,269,-487,655,-487,-296,-296,-296,223,-487,-487,243,278", "-297,789,-296,-296,219,-296,-296,-296,-296,-296,609,218,797,218,800", "-287,-487,-484,972,801,217,803,-287,-487,-484,805,807,970,518,215,815", "-287,-296,-296,-296,-296,-296,-296,-296,-296,-296,-296,-296,-296,-296", "-296,816,817,-296,-296,-296,789,766,-296,218,822,-296,-98,608,-296,-296", "601,-296,223,-296,511,-296,-107,-296,-296,599,-296,-296,-296,-296,-296", "219,-296,219,-296,-287,-487,-484,510,680,223,677,676,675,-73,678,-499", "223,-296,124,-498,-296,-296,-296,-296,831,-296,499,-296,-586,-96,497", "-271,-296,-108,495,-586,-586,-586,685,-105,-586,-586,-586,219,-586,809", "223,486,688,841,222,243,458,-586,-586,-586,-586,964,457,677,676,675", "-94,678,-586,-586,-93,-586,-586,-586,-586,-586,-103,-296,455,845,-102", "218,655,862,-296,696,695,240,517,-582,689,242,241,-296,238,239,-269", "515,-586,-586,-586,-586,-586,-586,-586,-586,-586,-586,-586,-586,-586", "-586,866,-497,-586,-586,-586,223,886,-586,-497,223,-586,890,406,-586", "-586,892,-586,-497,-586,393,-586,895,-586,-586,896,-586,-586,-586,-586", "-586,-296,-586,-586,-586,219,899,223,903,-496,-272,680,223,677,676,675", "-496,678,-586,905,800,-586,-586,-586,-586,-496,-586,-587,-586,908,910", "912,685,-586,-587,-587,-587,-497,914,-587,-587,-587,688,-587,223,916", "243,917,809,323,930,800,-587,-587,-587,-587,964,812,677,676,675,932", "678,-587,-587,934,-587,-587,-587,-587,-587,936,-296,938,-496,696,695", "938,240,-296,689,223,242,241,-582,238,239,944,-296,322,950,724,961,-587", "-587,-587,-587,-587,-587,-587,-587,-587,-587,-587,-587,-587,-587,968", "263,-587,-587,-587,973,983,-587,214,800,-587,987,243,-587,-587,989,-587", "991,-587,993,-587,993,-587,-587,660,-587,-587,-587,-587,-587,-296,-587", "-587,-587,680,211,677,676,675,680,678,677,676,675,240,678,210,-587,242", "241,-587,-587,-587,-587,1006,-587,-288,-587,1007,1008,938,938,-587,-288", "-288,-288,938,1013,-288,-288,-288,809,-288,243,983,1016,809,-582,-581", "223,812,209,-288,-288,-288,943,124,,,253,254,,-288,-288,,-288,-288,-288", "-288,-288,680,,677,676,675,240,678,246,,242,241,,238,239,,,244,,245", ",,,-288,-288,-288,-288,-288,-288,-288,-288,-288,-288,-288,-288,-288", "-288,,809,-288,-288,-288,,,-288,,,-288,,,-288,-288,,-288,,-288,,-288", ",-288,-288,,-288,-288,-288,-288,-288,,-288,,-288,729,730,,,731,109,110", ",680,,677,676,675,-288,678,,-288,-288,-288,-288,,-288,-252,-288,,,,", "-288,-252,-252,-252,,,-252,-252,-252,680,-252,677,676,675,685,678,,809", ",-252,-252,,,,688,,,243,,,-252,-252,,-252,-252,-252,-252,-252,118,119", "120,121,122,253,254,,683,118,119,120,121,122,,,,693,692,696,695,240", ",246,689,242,241,,238,239,,,244,-252,245,-414,,,,,-252,,-414,-414,-414", "269,-252,-414,-414,-414,223,-414,680,,677,676,675,,678,,-414,-414,-414", "118,119,120,121,122,-252,-252,,-414,-414,,-414,-414,-414,-414,-414,", ",,,-252,,,-252,,,809,680,-252,677,676,675,,678,,-252,,,-414,-414,-414", "-414,-414,-414,-414,-414,-414,-414,-414,-414,-414,-414,,,-414,-414,-414", ",,-414,,269,-414,,809,-414,-414,,-414,,-414,,-414,,-414,-414,,-414,-414", "-414,-414,-414,-303,-414,-414,-414,,,,-303,-303,-303,,,-303,-303,-303", ",-303,-414,243,,-414,-414,,-414,,-414,-303,-303,,,,,-414,,253,254,-303", "-303,,-303,-303,-303,-303,-303,118,119,120,121,122,,240,,246,,242,241", ",238,239,,,,,,,,-303,-303,-303,-303,-303,-303,-303,-303,-303,-303,-303", "-303,-303,-303,,,-303,-303,-303,,,-303,,278,-303,,,-303,-303,,-303,", "-303,,-303,,-303,-303,,-303,-303,-303,-303,-303,,-303,-252,-303,,,,", ",-252,-252,-252,,,-252,-252,-252,-303,-252,243,-303,-303,,-303,,-303", ",-252,-252,-252,,,-303,,,253,254,,-252,-252,,-252,-252,-252,-252,-252", ",,,,,240,,,,242,241,,238,239,,,,,,,,,-252,-252,-252,-252,-252,-252,-252", "-252,-252,-252,-252,-252,-252,-252,,,-252,-252,-252,,,-252,,269,-252", ",,-252,-252,,-252,,-252,,-252,,-252,-252,,-252,-252,-252,-252,-252,", "-252,-252,-252,,,,,,,,,,,,,,-252,,,-252,-252,,-252,,-252,296,70,71,72", "9,58,-252,,,64,65,,,,68,,66,67,69,30,31,73,74,,,,,,75,28,27,103,102", "104,105,,,19,,,,,603,8,46,298,10,107,106,108,97,57,99,98,100,,101,109", "110,,93,94,42,43,41,243,247,248,249,250,260,261,255,256,251,252,,236", "237,,,253,254,,40,,,33,,,59,60,,,61,,35,240,,246,45,242,241,,238,239", "259,258,244,20,245,,,,91,81,84,85,,86,88,87,89,,,,,82,90,,257,,-244", ",,63,,83,95,96,5,70,71,72,9,58,,,,64,65,,,,68,,66,67,69,30,31,73,74", ",,,,,75,28,27,103,102,104,105,,,19,,,,,603,8,46,7,10,107,106,108,97", "57,99,98,100,,101,109,110,,93,94,42,43,41,243,247,248,249,250,260,261", "255,256,251,252,,236,237,,,253,254,,40,,,33,,,59,60,,,61,,35,240,,246", "45,242,241,,238,239,259,258,244,20,245,,,,91,81,84,85,,86,88,87,89,", ",,,82,90,,257,,,,,63,,83,95,96,296,70,71,72,9,58,,,,64,65,,,,68,,66", "67,69,30,31,73,74,,,,,,75,28,27,103,102,104,105,,,19,,,,,,8,46,298,10", "107,106,108,97,57,99,98,100,,101,109,110,,93,94,42,43,41,243,247,248", "249,250,260,261,255,256,251,252,,236,237,,,253,254,,40,,,300,,,59,60", ",,61,,35,240,,246,45,242,241,,238,239,259,258,244,20,245,,,,91,81,84", "85,,86,88,87,89,,,,,82,90,,257,,,,,63,,83,95,96,296,70,71,72,9,58,,", ",64,65,,,,68,,66,67,69,30,31,73,74,,,,,,75,28,27,103,102,104,105,,,19", ",,,,,8,46,298,10,107,106,108,97,57,99,98,100,,101,109,110,,93,94,42", "43,41,243,247,248,249,250,260,261,255,256,251,252,,236,237,,,253,254", ",40,,,33,,,59,60,,,61,,35,240,,246,45,242,241,,238,239,259,258,244,20", "245,,,,91,81,84,85,,86,88,87,89,,,,,82,90,,257,,,,,63,,83,95,96,296", "70,71,72,9,58,,,,64,65,,,,68,,66,67,69,30,31,73,74,,,,,,75,28,27,103", "102,104,105,,,19,,,,,,8,46,298,10,107,106,108,97,57,99,98,100,,101,109", "110,,93,94,42,43,41,243,247,248,249,250,260,261,255,256,251,252,,236", "237,,,253,254,,40,,,33,,,59,60,,,61,,35,240,,246,45,242,241,,238,239", "259,258,244,20,245,,,,91,81,84,85,,86,88,87,89,,,,,82,90,223,257,,,", ",63,,83,95,96,296,70,71,72,9,58,,,,64,65,,,,68,,66,67,69,30,31,73,74", ",,,,,75,28,27,103,102,104,105,,,19,,,,,,8,46,298,10,107,106,108,97,57", "99,98,100,,101,109,110,,93,94,42,43,41,243,247,248,249,250,260,261,255", "256,251,252,,236,237,,,253,254,,40,,,33,,,59,60,,,61,,35,240,,246,45", "242,241,,238,239,259,258,244,20,245,,,,91,81,84,85,,86,88,87,89,,,,", "82,90,,257,,,,,63,,83,95,96,296,70,71,72,9,58,,,,64,65,,,,68,,66,67", "69,30,31,73,74,,,,,,75,28,27,103,102,104,105,,,19,,,,,,8,46,298,10,107", "106,108,97,57,99,98,100,,101,109,110,,93,94,42,43,41,243,247,248,249", "250,260,261,255,256,251,252,,236,237,,,253,254,,40,,,33,,,59,60,,,61", ",35,240,,246,45,242,241,,238,239,259,258,244,20,245,,,,91,81,84,85,", "86,88,87,89,,,,,82,90,,257,,,,,63,,83,95,96,296,70,71,72,9,58,,,,64", "65,,,,68,,66,67,69,30,31,73,74,,,,,,75,28,27,103,102,104,105,,,19,,", ",,,8,46,298,10,107,106,108,97,57,99,98,100,,101,109,110,,93,94,42,43", "41,243,247,248,249,250,260,261,255,256,251,252,,236,237,,,253,254,,40", ",,33,,,59,60,,,61,,35,240,,246,45,242,241,,238,239,259,258,244,20,245", ",,,91,81,84,85,,86,88,87,89,,,,,82,90,,257,,,,,63,,83,95,96,296,70,71", "72,9,58,,,,64,65,,,,68,,66,67,69,30,31,73,74,,,,,,75,28,27,103,102,104", "105,,,19,,,,,,8,46,298,10,107,106,108,97,57,99,98,100,,101,109,110,", "93,94,42,43,41,243,247,248,249,250,260,261,255,256,251,252,,-606,-606", ",,253,254,,40,,,33,,,59,60,,,61,,35,240,,246,45,242,241,,238,239,259", "258,244,20,245,,,,91,81,84,85,,86,88,87,89,,,,,82,90,,,,,,,63,,83,95", "96,296,70,71,72,9,58,,,,64,65,,,,68,,66,67,69,30,31,73,74,,,,,,75,28", "27,103,102,104,105,,,19,,,,,,8,46,298,10,107,106,108,97,57,99,98,100", ",101,109,110,,93,94,42,43,41,243,-606,-606,-606,-606,260,261,,,-606", "-606,,,,,,253,254,,40,,,300,,,59,60,,,61,,35,240,,246,45,242,241,,238", "239,259,258,244,20,245,,,,91,81,84,85,,86,88,87,89,,,,,82,90,,,,,,,63", ",83,95,96,296,70,71,72,9,58,,,,64,65,,,,68,,66,67,69,30,31,73,74,,,", ",,75,28,27,103,102,104,105,,,19,,,,,,8,46,298,10,107,106,108,97,57,99", "98,100,,101,109,110,,93,94,42,43,41,243,-606,-606,-606,-606,260,261", ",,-606,-606,,,,,,253,254,,40,,,33,,,59,60,,,61,,35,240,,246,45,242,241", ",238,239,259,258,244,20,245,,,,91,81,84,85,,86,88,87,89,,,,,82,90,,", ",,,,63,,83,95,96,296,70,71,72,9,58,,,,64,65,,,,68,,66,67,69,30,31,73", "74,,,,,,75,28,27,103,102,104,105,,,19,,,,,,8,46,298,10,107,106,108,97", "57,99,98,100,,101,109,110,,93,94,42,43,41,243,-606,-606,-606,-606,260", "261,,,-606,-606,,,,,,253,254,,40,,,33,,,59,60,,,61,,35,240,,246,45,242", "241,,238,239,259,258,244,20,245,,,,91,81,84,85,,86,88,87,89,,,,,82,90", ",,,,,,63,,83,95,96,296,70,71,72,9,58,,,,64,65,,,,68,,66,67,69,30,31", "73,74,,,,,,75,28,27,103,102,104,105,,,19,,,,,,8,46,298,10,107,106,108", "97,57,99,98,100,,101,109,110,,93,94,42,43,41,243,-606,-606,-606,-606", "260,261,,,-606,-606,,,,,,253,254,,40,,,33,,,59,60,,,61,,35,240,,246", "45,242,241,,238,239,259,258,244,20,245,,,,91,81,84,85,,86,88,87,89,", ",,,82,90,,,,,,,63,,83,95,96,296,70,71,72,9,58,,,,64,65,,,,68,,66,67", "69,30,31,73,74,,,,,,75,28,27,103,102,104,105,,,19,,,,,,8,46,298,10,107", "106,108,97,57,99,98,100,,101,109,110,,93,94,42,43,41,243,247,248,249", "250,260,261,255,,251,252,,,,,,253,254,,40,,,33,,,59,60,,,61,,35,240", ",246,45,242,241,,238,239,259,258,244,20,245,,,,91,81,84,85,,86,88,87", "89,,,,,82,90,,,,,,,63,,83,95,96,296,70,71,72,9,58,,,,64,65,,,,68,,66", "67,69,30,31,73,74,,,,,,75,28,27,103,102,104,105,,,19,,,,,,8,46,298,10", "107,106,108,97,57,99,98,100,,101,109,110,,93,94,42,43,41,243,247,248", "249,250,260,261,,,251,252,,,,,,253,254,,40,,,33,,,59,60,,,61,,35,240", ",246,45,242,241,,238,239,259,258,244,20,245,,,,91,81,84,85,,86,88,87", "89,,,,,82,90,,,,,,,63,,83,95,96,296,70,71,72,9,58,,,,64,65,,,,68,,66", "67,69,30,31,73,74,,,,,,75,28,27,103,102,104,105,,,19,,,,,,8,46,298,10", "107,106,108,97,57,99,98,100,,101,109,110,,93,94,42,43,41,243,247,248", "249,250,260,261,255,256,251,252,,-606,-606,,,253,254,,40,,,33,,,59,60", ",,61,,35,240,,246,45,242,241,,238,239,259,258,244,20,245,,,,91,81,84", "85,,86,88,87,89,,,,,82,90,,,,,,,63,,83,95,96,296,70,71,72,9,58,,,,64", "65,,,,68,,66,67,69,30,31,73,74,,,,,,75,28,27,103,102,104,105,,,19,,", ",,,8,46,298,10,107,106,108,97,57,99,98,100,,101,109,110,,93,94,42,43", "41,243,-606,-606,-606,-606,260,261,,,-606,-606,,,,,,253,254,,40,,,300", ",,59,60,,,61,,35,240,,246,45,242,241,,238,239,259,258,244,20,245,,,", "91,81,84,85,,86,88,87,89,,,,,82,90,,,,,,,63,,83,95,96,296,70,71,72,9", "58,,,,64,65,,,,68,,66,67,69,30,31,73,74,,,,,,75,28,27,103,102,104,105", ",,19,,,,,,8,46,298,10,107,106,108,97,57,99,98,100,,101,109,110,,93,94", "42,43,41,243,-606,-606,-606,-606,260,261,,,-606,-606,,,,,,253,254,,40", ",,33,,,59,60,,,61,,35,240,,246,45,242,241,,238,239,259,258,244,20,245", ",,,91,81,84,85,,86,88,87,89,,,,,82,90,,,,,,,63,,83,95,96,296,70,71,72", "9,58,,,,64,65,,,,68,,66,67,69,30,31,73,74,,,,,,75,28,27,103,102,104", "105,,,19,,,,,,8,46,298,10,107,106,108,97,57,99,98,100,,101,109,110,", "93,94,42,43,41,243,,,,,,,,,,,,,,,,253,254,,40,,,33,,,59,60,,,61,,35", "240,,246,45,242,241,,238,239,,,,20,,,,,91,81,84,85,,86,88,87,89,,,,", "82,90,,,,,,,63,,83,95,96,296,70,71,72,9,58,,,,64,65,,,,68,,66,67,69", "30,31,73,74,,,,,,75,28,27,103,102,104,105,,,19,,,,,,8,46,298,10,107", "106,108,97,57,99,98,100,,101,109,110,,93,94,42,43,41,,,,,,,,,,,,,,,", ",,,,40,,,33,,,59,60,,,61,,35,,,,45,,,,,,,,,20,,,,,91,81,84,85,,86,88", "87,89,,,,,82,90,,,,,,,63,,83,95,96,5,70,71,72,9,58,,,,64,65,,,,68,,66", "67,69,30,31,73,74,,,,,,75,28,27,103,102,104,105,,,19,,,,,,8,46,7,10", "107,106,108,97,57,99,98,100,,101,109,110,,93,94,42,43,41,,,,,,,,,,,", ",,,,,,,,40,,,33,,,59,60,,,61,,35,,,,45,,,,,,,,,20,,,,,91,81,84,85,,86", "88,87,89,,,,,82,90,,,,,,,63,,83,95,96,296,70,71,72,9,58,,,,64,65,,,", "68,,66,67,69,30,31,73,74,,,,,,75,28,27,103,102,104,105,,,19,,,,,,8,46", "298,10,107,106,108,97,57,99,98,100,,101,109,110,,93,94,42,43,41,,,,", ",,,,,,,,,,,,,,,40,,,33,,,59,60,,,61,,35,,,,45,,,,,,,,,20,,,,,91,81,84", "85,,86,88,87,89,,,,,82,90,,,,,,,63,,83,95,96,296,70,71,72,9,58,,,,64", "65,,,,68,,66,67,69,30,31,73,74,,,,,,75,28,27,103,102,104,105,,,19,,", ",,,8,46,298,10,107,106,108,97,57,99,98,100,,101,109,110,,93,94,42,43", "41,,,,,,,,,,,,,,,,,,,,40,,,33,,,59,60,,,61,,35,,,,45,,,,,,,,,20,,,,", "91,81,84,85,,86,88,87,89,,,,,82,90,,,,,,,63,,83,95,96,296,70,71,72,9", "58,,,,64,65,,,,68,,66,67,69,30,31,73,74,,,,,,75,28,27,103,102,104,105", ",,19,,,,,,8,46,298,10,107,106,108,97,57,99,98,100,,101,109,110,,93,94", "42,43,41,,,,,,,,,,,,,,,,,,,,40,,,33,,,59,60,,,61,,35,,,,45,,,,,,,,,20", ",,,,91,81,84,85,,86,88,87,89,,,,,82,90,,,,,,,63,,83,95,96,296,70,71", "72,9,58,,,,64,65,,,,68,,66,67,69,30,31,73,74,,,,,,75,28,27,103,102,104", "105,,,19,,,,,,8,46,298,10,107,106,108,97,57,99,98,100,,101,109,110,", "93,94,42,43,41,,,,,,,,,,,,,,,,,,,,40,,,33,,,59,60,,,61,,35,,,,45,,,", ",,,,,20,,,,,91,81,84,85,,86,88,87,89,,,,,82,90,,,,,,,63,,83,95,96,296", "70,71,72,9,58,,,,64,65,,,,68,,66,67,69,30,31,73,74,,,,,,75,28,27,103", "102,104,105,,,19,,,,,,8,46,298,10,107,106,108,97,57,99,98,100,,101,109", "110,,93,94,42,43,41,,,,,,,,,,,,,,,,,,,,40,,,33,,,59,60,,,61,,35,,,,45", ",,,,,,,,20,,,,,91,81,84,85,,86,88,87,89,,,,,82,90,,,,,,,63,,83,95,96", "296,70,71,72,9,58,,,,64,65,,,,68,,66,67,69,30,31,73,74,,,,,,75,28,27", "103,102,104,105,,,19,,,,,,8,46,298,10,107,106,108,97,57,99,98,100,,101", "109,110,,93,94,42,43,41,,,,,,,,,,,,,,,,,,,,40,,,33,,,59,60,,,61,,35", ",,,45,,,,,,,,,20,,,,,91,81,84,85,,86,88,87,89,,,,,82,90,,,,,,,63,,83", "95,96,296,70,71,72,9,58,,,,64,65,,,,68,,66,67,69,30,31,73,74,,,,,,75", "28,27,103,102,104,105,,,19,,,,,,8,46,298,10,107,106,108,97,57,99,98", "100,,101,109,110,,93,94,42,43,41,,,,,,,,,,,,,,,,,,,,40,,,33,,,59,60", ",,61,,35,,,,45,,,,,,,,,20,,,,,91,81,84,85,,86,88,87,89,,,,,82,90,,,", "70,71,72,63,58,83,95,96,64,65,,,,68,,66,67,69,30,31,73,74,,,,,,75,28", "27,103,102,104,105,,,19,,,,,,,46,,,107,106,108,97,57,99,98,100,,101", "109,110,,93,94,42,43,41,,,,,,,,,,,,,,,,,,,,228,,,234,,,59,60,,,61,,", ",,,45,,,,,,,,,20,,,,,91,81,84,85,,86,88,87,89,,,,,82,90,223,,,70,71", "72,63,58,83,95,96,64,65,,,,68,,66,67,69,315,316,73,74,,,,,,75,312,318", "103,102,104,105,,,235,,,,,,,46,,,107,106,108,97,57,99,98,100,,101,109", "110,,93,94,42,43,41,,,,,,,,,,,,,,,,,,,,228,,,234,,,59,60,,,61,,,,,,45", ",,,,,,,,233,,,,,91,81,84,85,,86,88,87,89,,,,,82,90,,,,70,71,72,63,58", "83,95,96,64,65,,,,68,,66,67,69,315,316,73,74,,,,,,75,312,318,103,102", "104,105,,,235,,,,,,,46,,,107,106,108,97,57,99,98,100,,101,109,110,,93", "94,42,43,41,,,,,,,,,,,,,,,,,,,,228,,,234,,,59,60,,,61,,,,,,45,,,,,,", ",,233,,,,,91,81,84,85,,86,88,87,89,,,,,82,90,,,,70,71,72,63,58,83,95", "96,64,65,,,,68,,66,67,69,315,316,73,74,,,,,,75,312,318,103,102,104,105", ",,235,,,,,,,46,,,107,106,108,97,57,99,98,100,,101,109,110,,93,94,42", "43,41,,,,,,,,,,,,,,,,,,,,228,,,234,,,59,60,,,61,,,,,,45,,,,,,,,,233", ",,,,91,81,84,85,,86,88,87,89,,,,,82,90,,,,70,71,72,63,58,83,95,96,64", "65,,,,68,,66,67,69,315,316,73,74,,,,,,75,312,318,103,102,104,105,,,235", ",,,,,,46,,,107,106,108,97,57,99,98,100,,101,109,110,,93,94,42,43,41", ",,,,,,,,,,,,,,,,,,,228,,,234,,,59,60,,,61,,,,,,45,,,,,,,,,233,,,,,91", "81,84,85,,86,88,87,89,,,,,82,90,,,,70,71,72,63,58,83,95,96,64,65,,,", "68,,66,67,69,315,316,73,74,,,,,,75,312,318,103,102,104,105,,,235,,,", ",,,46,,,107,106,108,97,57,99,98,100,,101,109,110,,93,94,42,43,41,,,", ",,,,,,,,,,,,,,,,228,,,234,,,59,60,,,61,,,,,,45,,,,,,,,,233,,,,,91,81", "84,85,,86,88,87,89,,,,,82,90,,,,70,71,72,63,58,83,95,96,64,65,,,,68", ",66,67,69,315,316,73,74,,,,,,75,312,318,103,102,104,105,,,235,,,,,,", "46,,,107,106,108,97,57,99,98,100,,101,109,110,,93,94,42,43,41,,,,,,", ",,,,,,,,,,,,,228,,,234,,,59,60,,,61,,,,,,45,,,,,,,,,233,,,,,91,81,84", "85,,86,88,87,89,,,,,82,90,,,,70,71,72,63,58,83,95,96,64,65,,,,68,,66", "67,69,315,316,73,74,,,,,,75,312,318,103,102,104,105,,,235,,,,,,,46,", ",107,106,108,97,57,99,98,100,,101,109,110,,93,94,42,43,41,,,,,,,,,,", ",,,,,,,,,228,,,234,,,59,60,,,61,,,,,,45,,,,,,,,,233,,,,,91,81,84,85", ",86,88,87,89,,,,,82,90,,,,70,71,72,63,58,83,95,96,64,65,,,,68,,66,67", "69,315,316,73,74,,,,,,75,312,318,103,102,104,105,,,235,,,,,,,46,,,107", "106,108,97,57,99,98,100,,101,109,110,,93,94,42,43,41,,,,,,,,,,,,,,,", ",,,,228,,,234,,,59,60,,,61,,,,,,45,,,,,,,,,233,,,,,91,81,84,85,,86,88", "87,89,,,,,82,90,,,,70,71,72,63,58,83,95,96,64,65,,,,68,,66,67,69,315", "316,73,74,,,,,,75,312,318,103,102,104,105,,,235,,,,,,,46,,,107,106,108", "97,57,99,98,100,,101,109,110,,93,94,42,43,41,,,,,,,,,,,,,,,,,,,,228", ",,234,,,59,60,,,61,,,,,,45,,,,,,,,,233,,,,,91,81,84,85,,86,88,87,89", ",,,,82,90,,,,70,71,72,63,58,83,95,96,64,65,,,,68,,66,67,69,315,316,73", "74,,,,,,75,312,318,103,102,104,105,,,235,,,,,,,46,,,107,106,108,97,57", "99,98,100,,101,109,110,,93,94,42,43,41,,,,,,,,,,,,,,,,,,,,228,,,234", ",,59,60,,,61,,,,,,45,,,,,,,,,233,,,,,91,81,84,85,,86,88,87,89,,,,,82", "90,,,,70,71,72,63,58,83,95,96,64,65,,,,68,,66,67,69,315,316,73,74,,", ",,,75,312,318,103,102,104,105,,,235,,,,,,,46,,,107,106,108,97,57,99", "98,100,,101,109,110,,93,94,42,43,41,,,,,,,,,,,,,,,,,,,,228,,,234,,,59", "60,,,61,,,,,,45,,,,,,,,,233,,,,,91,81,84,85,,86,88,87,89,,,,,82,90,", ",,70,71,72,63,58,83,95,96,64,65,,,,68,,66,67,69,315,316,73,74,,,,,,75", "312,318,103,102,104,105,,,235,,,,,,,46,,,107,106,108,97,57,99,98,100", ",101,109,110,,93,94,42,43,41,,,,,,,,,,,,,,,,,,,,228,,,234,,,59,60,,", "61,,,,,,45,,,,,,,,,233,,,,,91,81,84,85,,86,88,87,89,,,,,82,90,,,,70", "71,72,63,58,83,95,96,64,65,,,,68,,66,67,69,315,316,73,74,,,,,,75,312", "318,103,102,104,105,,,235,,,,,,,46,,,107,106,108,97,57,99,98,100,,101", "109,110,,93,94,42,43,41,,,,,,,,,,,,,,,,,,,,228,,,234,,,59,60,,,61,,", ",,,45,,,,,,,,,233,,,,,91,81,84,85,,86,88,87,89,,,,,82,90,,,,70,71,72", "63,58,83,95,96,64,65,,,,68,,66,67,69,315,316,73,74,,,,,,75,312,318,103", "102,104,105,,,235,,,,,,,46,,,107,106,108,97,57,99,98,100,,101,109,110", ",93,94,42,43,41,,,,,,,,,,,,,,,,,,,,228,,,234,,,59,60,,,61,,,,,,45,,", ",,,,,,233,,,,,91,81,84,85,,86,88,87,89,,,,,82,90,,,,70,71,72,63,58,83", "95,96,64,65,,,,68,,66,67,69,315,316,73,74,,,,,,75,312,318,103,102,104", "105,,,235,,,,,,,46,,,107,106,108,97,57,99,98,100,,101,109,110,,93,94", "42,43,41,,,,,,,,,,,,,,,,,,,,228,,,234,,,59,60,,,61,,,,,,45,,,,,,,,,233", ",,,,91,81,84,85,,86,88,87,89,,,,,82,90,,,,70,71,72,63,58,83,95,96,64", "65,,,,68,,66,67,69,315,316,73,74,,,,,,75,312,318,103,102,104,105,,,235", ",,,,,,46,,,107,106,108,97,57,99,98,100,,101,109,110,,93,94,42,43,41", ",,,,,,,,,,,,,,,,,,,228,,,234,,,59,60,,,61,,,,,,45,,,,,,,,,233,,,,,91", "81,84,85,,86,88,87,89,,,,,82,90,,,,70,71,72,63,58,83,95,96,64,65,,,", "68,,66,67,69,315,316,73,74,,,,,,75,312,318,103,102,104,105,,,235,,,", ",,,46,,,107,106,108,97,57,99,98,100,,101,109,110,,93,94,42,43,41,,,", ",,,,,,,,,,,,,,,,228,,,234,,,59,60,,,61,,,,,,45,,,,,,,,,233,,,,,91,81", "84,85,,86,88,87,89,,,,,82,90,,,,70,71,72,63,58,83,95,96,64,65,,,,68", ",66,67,69,315,316,73,74,,,,,,75,312,318,103,102,104,105,,,235,,,,,,", "46,,,107,106,108,97,57,99,98,100,,101,109,110,,93,94,42,43,41,,,,,,", ",,,,,,,,,,,,,228,,,234,,,59,60,,,61,,,,,,45,,,,,,,,,233,,,,,91,81,84", "85,,86,88,87,89,,,,,82,90,,,,70,71,72,63,58,83,95,96,64,65,,,,68,,66", "67,69,315,316,73,74,,,,,,75,312,318,103,102,104,105,,,235,,,,,,,46,", ",107,106,108,97,57,99,98,100,,101,109,110,,93,94,42,43,41,,,,,,,,,,", ",,,,,,,,,228,,,234,,,59,60,,,61,,,,,,45,,,,,,,,,233,,,,,91,81,84,85", ",86,88,87,89,,,,,82,90,,,,70,71,72,63,58,83,95,96,64,65,,,,68,,66,67", "69,315,316,73,74,,,,,,75,312,318,103,102,104,105,,,235,,,,,,,46,,,107", "106,108,97,57,99,98,100,,101,109,110,,93,94,42,43,41,,,,,,,,,,,,,,,", ",,,,228,,,234,,,59,60,,,61,,,,,,45,,,,,,,,,233,,,,,91,81,84,85,,86,88", "87,89,,,,,82,90,,,,70,71,72,63,58,83,95,96,64,65,,,,68,,66,67,69,315", "316,73,74,,,,,,75,312,318,103,102,104,105,,,235,,,,,,,46,,,107,106,108", "97,57,99,98,100,,101,109,110,,93,94,42,43,41,,,,,,,,,,,,,,,,,,,,228", ",,234,,,59,60,,,61,,,,,,45,,,,,,,,,233,,,,,91,81,84,85,,86,88,87,89", ",,,,82,90,,,,70,71,72,63,58,83,95,96,64,65,,,,68,,66,67,69,315,316,73", "74,,,,,,75,312,318,103,102,104,105,,,235,,,,,,,46,,,107,106,108,97,57", "99,98,100,,101,109,110,,93,94,42,43,41,,,,,,,,,,,,,,,,,,,,228,,,234", ",,59,60,,,61,,,,,,45,,,,,,,,,233,,,,,91,81,84,85,,86,88,87,89,,,,,82", "90,,,,70,71,72,63,58,83,95,96,64,65,,,,68,,66,67,69,315,316,73,74,,", ",,,75,312,318,103,102,104,105,,,235,,,,,,,46,,,107,106,108,97,57,99", "98,100,,101,109,110,,93,94,42,43,41,,,,,,,,,,,,,,,,,,,,228,,,234,,,59", "60,,,61,,,,,,45,,,,,,,,,233,,,,,91,81,84,85,,86,88,87,89,,,,,82,90,", ",,70,71,72,63,58,83,95,96,64,65,,,,68,,66,67,69,315,316,73,74,,,,,,75", "312,318,103,102,104,105,,,235,,,,,,,46,,,107,106,108,97,57,99,98,100", ",101,109,110,,93,94,42,43,41,,,,,,,,,,,,,,,,,,,,228,,,234,,,59,60,,", "61,,,,,,45,,,,,,,,,233,,,,,91,81,84,85,,86,88,87,89,,,,,82,90,,,,70", "71,72,63,58,83,95,96,64,65,,,,68,,66,67,69,315,316,73,74,,,,,,75,312", "318,103,102,104,105,,,235,,,,,,,46,,,107,106,108,97,57,99,98,100,,101", "109,110,,93,94,42,43,41,,,,,,,,,,,,,,,,,,,,228,,,234,,,59,60,,,61,,", ",,,45,,,,,,,,,233,,,,,91,81,84,85,,86,88,87,89,,,,,82,90,,,,70,71,72", "63,58,83,95,96,64,65,,,,68,,66,67,69,315,316,73,74,,,,,,75,312,318,103", "102,104,105,,,235,,,,,,,46,,,107,106,108,97,57,99,98,100,,101,109,110", ",93,94,42,43,41,,,,,,,,,,,,,,,,,,,,228,,,234,,,59,60,,,61,,,,,,45,,", ",,,,,,233,,,,,91,81,84,85,,86,88,87,89,,,,,82,90,,,,70,71,72,63,58,83", "95,96,64,65,,,,68,,66,67,69,315,316,73,74,,,,,,75,312,318,103,102,104", "105,,,235,,,,,,,46,,,107,106,108,97,57,99,98,100,,101,109,110,,93,94", "42,43,41,,,,,,,,,,,,,,,,,,,,228,,,234,,,59,60,,,61,,,,,,45,,,,,,,,,233", ",,,,91,81,84,85,,86,88,87,89,,,,,82,90,,,,70,71,72,63,58,83,95,96,64", "65,,,,68,,66,67,69,315,316,73,74,,,,,,75,312,318,103,102,104,105,,,235", ",,,,,,46,,,107,106,108,97,57,99,98,100,,101,109,110,,93,94,42,43,41", ",,,,,,,,,,,,,,,,,,,228,,,234,,,59,60,,,61,,,,,,45,,,,,,,,,233,,,,,91", "81,84,85,,86,88,87,89,,,,,82,90,,,,70,71,72,63,58,83,95,96,64,65,,,", "68,,66,67,69,315,316,73,74,,,,,,75,312,318,103,102,104,105,,,235,,,", ",,,46,,,107,106,108,97,57,99,98,100,,101,109,110,,93,94,42,43,41,,,", ",,,,,,,,,,,,,,,,228,,,234,,,59,60,,,61,,,,,,45,,,,,,,,,233,,,,,91,81", "84,85,,86,88,87,89,,,,,82,90,,,,70,71,72,63,58,83,95,96,64,65,,,,68", ",66,67,69,30,31,73,74,,,,,,75,28,27,103,102,104,105,,,235,,,,,,,46,", ",107,106,108,97,57,99,98,100,,101,109,110,,93,94,42,43,41,,,,,,,,,,", ",,,,,,,,,228,,,234,,,59,60,,,61,,,,,,45,,,,,,,,,233,,,,,91,81,84,85", ",86,88,87,89,,,,,82,90,,,,70,71,72,63,58,83,95,96,64,65,,,,68,,66,67", "69,30,31,73,74,,,,,,75,28,27,103,102,104,105,,,235,,,,,,,46,,,107,106", "108,97,57,99,98,100,290,101,109,110,,93,94,42,43,41,,,,,,,,,,,,,,,,", ",,,228,,,234,,,59,60,,,61,,287,,285,,45,,,291,,,,,,233,,,,,91,288,84", "85,,86,88,87,89,,,,,82,90,,,,70,71,72,63,58,83,95,96,64,65,,,,68,,66", "67,69,30,31,73,74,,,,,,75,28,27,103,102,104,105,,,235,,,,,,,46,,,107", "106,108,97,57,99,98,100,290,101,109,110,,93,94,42,43,41,,,,,,,,,,,,", ",,,,,,,228,,,234,,,59,60,,,61,,287,,285,,45,,,291,,,,,,233,,,,,91,288", "84,85,,86,88,87,89,,,,,82,90,,,,70,71,72,63,58,83,95,96,64,65,,,,68", ",66,67,69,30,31,73,74,,,,,,75,28,27,103,102,104,105,,,235,,,,,,,46,", ",107,106,108,97,57,99,98,100,290,101,109,110,,93,94,42,43,41,,,,,,,", ",,,,,,,,,,,,228,,,234,,,59,60,,,61,,287,,285,,45,,,291,,,,,,233,,,,", "91,288,84,85,,86,88,87,89,,,,,82,90,223,,,70,71,72,63,58,83,95,96,64", "65,,,,68,,66,67,69,315,316,73,74,,,,,,75,312,318,103,102,104,105,,,235", ",,,,,,46,,,107,106,108,97,57,99,98,100,,101,109,110,,93,94,42,43,41", ",,,,,,,,,,,,,,,,,,,228,,,234,,,59,60,,,61,,,,,,45,,,,,,,,,233,,,,,91", "81,84,85,,86,88,87,89,,,,,82,90,,,,70,71,72,63,58,83,95,96,64,65,,,", "68,,66,67,69,315,316,73,74,,,,,,75,312,318,103,102,104,105,,,235,,,", ",,,46,,,107,106,108,97,57,99,98,100,,101,109,110,,93,94,42,43,41,,,", ",,,,,,,,,,,,,,,,228,,,234,,,59,60,,,61,,,,,,45,,,,,,,,,233,,,,,91,81", "84,85,,86,88,87,89,,,,,82,90,,,,70,71,72,63,58,83,95,96,64,65,,,,68", ",66,67,69,315,316,73,74,,,,,,75,312,318,103,102,104,105,,,235,,,,,,", "46,,,107,106,108,97,57,99,98,100,,101,109,110,,93,94,42,43,41,,,,,,", ",,,,,,,,,,,,,228,,,234,,,59,60,,,61,,,,,,45,,,,,,,,,233,,,,,91,81,84", "85,,86,88,87,89,,,,,82,90,,,,70,71,72,63,58,83,95,96,64,65,,,,68,,66", "67,69,315,316,73,74,,,,,,75,312,318,103,102,104,105,,,235,,,,,,,46,", ",107,106,108,97,57,99,98,100,,101,109,110,,93,94,42,43,41,,,,,,,,,,", ",,,,,,,,,228,,,234,,,59,60,,,61,,,,,,45,,,,,,,,,233,,,,,91,81,84,85", ",86,88,87,89,,,,,82,90,,,,70,71,72,63,58,83,95,96,64,65,,,,68,,66,67", "69,315,316,73,74,,,,,,75,312,318,103,102,104,105,,,235,,,,,,,46,,,107", "106,108,97,57,99,98,100,,101,109,110,,93,94,42,43,41,,,,,,,,,,,,,,,", ",,,,228,,,234,,,59,60,,,61,,,,,,45,,,,,,,,,233,,,,,91,81,84,85,,86,88", "87,89,,,,,82,90,,,,,,,63,,83,95,96,70,71,72,9,58,,,,64,65,,,,68,,66", "67,69,30,31,73,74,,,,,,75,28,27,103,102,104,105,,,19,,,,,,8,46,,10,107", "106,108,97,57,99,98,100,,101,109,110,,93,94,42,43,41,,,,,,,,,,,,,,,", ",,,,40,,,33,,,59,60,,,61,,35,,,,45,,,,,,,,,20,,,,,91,81,84,85,,86,88", "87,89,,,,,82,90,,,,70,71,72,63,58,83,95,96,64,65,,,,68,,66,67,69,30", "31,73,74,,,,,,75,28,27,103,102,104,105,,,19,,,,,,,46,,,107,106,108,97", "57,99,98,100,,101,109,110,,93,94,42,43,41,,,,,,,,,,,,,,,,,,,,228,,,234", ",,59,60,,,61,,,,,,45,,,,,,,,,20,,,,,91,81,84,85,,86,88,87,89,,,,,82", "90,,,,70,71,72,63,58,83,95,96,64,65,,,,68,,66,67,69,315,316,73,74,,", ",,,75,312,318,103,102,104,105,,,235,,,,,,,46,,,107,106,108,97,57,99", "98,100,290,101,109,110,,93,94,42,43,41,,,,,,,,,,,,,,,,,,,,228,,,234", ",,59,60,,,61,,,,,,45,,,291,,,,,,233,,,,,91,288,84,85,,86,88,87,89,,", ",,82,90,,,,,,,63,,83,95,96,70,71,72,9,58,,,,64,65,,,,68,,66,67,69,30", "31,73,74,,,,,,75,28,27,103,102,104,105,,,19,,,,,,8,46,7,10,107,106,108", "97,57,99,98,100,,101,109,110,,93,94,42,43,41,,,,,,,,,,,,,,,,,,,,40,", ",33,,,59,60,,,61,,35,,,,45,,,,,,,,,20,,,,,91,81,84,85,,86,88,87,89,", ",,,82,90,,,,70,71,72,63,58,83,95,96,64,65,,,,68,,66,67,69,30,31,73,74", ",,,,,75,28,27,103,102,104,105,,,235,,,,,,,46,,,107,106,108,97,57,99", "98,100,290,101,109,110,,93,94,42,43,41,,,,,,,,,,,,,,,,,,,,228,,,234", ",,59,60,,,61,,287,,285,,45,,,291,,,,,,233,,,,,91,288,84,85,,86,88,87", "89,,,,,82,90,,,,70,71,72,63,58,83,95,96,64,65,,,,68,,66,67,69,30,31", "73,74,,,,,,75,28,27,103,102,104,105,,,235,,,,,,,46,,,107,106,108,97", "57,99,98,100,,101,109,110,,93,94,42,43,41,,,,,,,,,,,,,,,,,,,,228,,,234", ",,59,60,,,61,,,,,,45,,,,,,,,,233,,,,,91,81,84,85,,86,88,87,89,,,,,82", "90,,,,70,71,72,63,58,83,95,96,64,65,,,,68,,66,67,69,315,316,73,74,,", ",,,75,312,318,103,102,104,105,,,235,,,,,,,313,,,107,106,108,97,57,99", "98,100,,101,109,110,,93,94,,,319,,,,,,,,,,,,,,,,,,,,919,,,234,,,59,60", ",,61,,,,,,,,,,,,,,,,,,,,91,81,84,85,,86,88,87,89,,,,,82,90,,,,70,71", "72,63,58,83,95,96,64,65,,,,68,,66,67,69,30,31,73,74,,,,,,75,28,27,103", "102,104,105,,,235,,,,,,,46,,,107,106,108,97,57,99,98,100,290,101,109", "110,,93,94,42,43,41,,,,,,,,,,,,,,,,,,,,228,,,234,,,59,60,,,61,,287,", "285,,45,,,291,,,,,,233,,,,,91,288,84,85,,86,88,87,89,,,,,82,90,,,,70", "71,72,63,58,83,95,96,64,65,,,,68,,66,67,69,30,31,73,74,,,,,,75,28,27", "103,102,104,105,,,235,,,,,,,46,,,107,106,108,97,57,99,98,100,290,101", "109,110,,93,94,42,43,41,,,,,,,,,,,,,,,,,,,,228,,,234,,,59,60,,,61,,287", ",285,,45,,,291,,,,,,233,,,,,91,288,84,85,,86,88,87,89,,,,,82,90,,,,70", "71,72,63,58,83,95,96,64,65,,,,68,,66,67,69,30,31,73,74,,,,,,75,28,27", "103,102,104,105,,,235,,,,,,,46,,,107,106,108,97,57,99,98,100,290,101", "109,110,,93,94,42,43,41,,,,,,,,,,,,,,,,,,,,228,,,234,,,59,60,,,61,,287", ",285,,45,,,291,,,,,,233,,,,,91,288,84,85,,86,88,87,89,,,,,82,90,,,,70", "71,72,63,58,83,95,96,64,65,,,,68,,66,67,69,315,316,73,74,,,,,,75,312", "318,103,102,104,105,,,235,,,,,,,313,,,107,106,108,97,57,99,98,100,,101", "109,110,,93,94,,,319,,,,,,,,,,,,,,,,,,,,309,,,305,,,59,60,,,61,,304", ",,,,,,,,,,,,,,,,,91,81,84,85,,86,88,87,89,,,,,82,90,,,,70,71,72,63,58", "83,95,96,64,65,,,,68,,66,67,69,315,316,73,74,,,,,,75,312,318,103,102", "104,105,,,235,,,,,,,313,,,107,106,108,97,57,99,98,100,,101,109,110,", "93,94,,,319,,,,,,,,,,,,,,,,,,,,309,,,234,,,59,60,,,61,,,680,,677,676", "675,685,678,,,,,,,,,688,,91,81,84,85,,86,88,87,89,,,,,82,90,,,,321,", "683,63,,83,95,96,70,71,72,,58,696,695,,64,65,689,,,68,,66,67,69,315", "316,73,74,,,,,,75,312,318,103,102,104,105,,,235,,,,,,,313,,,107,106", "108,97,57,99,98,100,,101,109,110,,93,94,,,319,,,,,,,,,,,,,,,,,,,,925", ",,234,,,59,60,,,61,,,,,,,,,,,,,,,,,,,,91,81,84,85,,86,88,87,89,,,,,82", "90,,,,70,71,72,63,58,83,95,96,64,65,,,,68,,66,67,69,315,316,73,74,,", ",,,75,312,318,103,102,104,105,,,235,,,,,,,313,,,107,106,108,97,57,99", "98,100,,101,109,110,,93,94,,,319,,,,,,,,,,,,,,,,,,,,919,,,234,,,59,60", ",,61,,,,,,,,,,,,,,,,,,,,91,81,84,85,,86,88,87,89,,,,,82,90,,,,70,71", "72,63,58,83,95,96,64,65,,,,68,,66,67,69,315,316,73,74,,,,,,75,312,318", "103,102,104,105,,,235,,,,,,,46,,,107,106,108,97,57,99,98,100,,101,109", "110,,93,94,42,43,41,,,,,,,,,,,,,,,,,,,,228,,,234,,,59,60,,,61,,,,,,45", ",,,,,,,,233,,,,,91,81,84,85,,86,88,87,89,,,,,82,90,,,,70,71,72,63,58", "83,95,96,64,65,,,,68,,66,67,69,315,316,73,74,,,,,,75,312,318,103,102", "104,105,,,235,,,,,,,46,,,107,106,108,97,57,99,98,100,,101,109,110,,93", "94,42,43,41,,,,,,,,,,,,,,,,,,,,228,,,234,,,59,60,,,61,,,,,,45,,,,,,", ",,233,,,,,91,81,84,85,,86,88,87,89,,,,,82,90,,,,70,71,72,63,58,83,95", "96,64,65,,,,68,,66,67,69,315,316,73,74,,,,,,75,312,318,103,102,104,105", ",,235,,,,,,,46,,,107,106,108,97,57,99,98,100,,101,109,110,,93,94,42", "43,41,,,,,,,,,,,,,,,,,,,,228,,,234,,,59,60,,,61,,,,,,45,,,,,,,,,233", ",,,,91,81,84,85,,86,88,87,89,,,,,82,90,,,,70,71,72,63,58,83,95,96,64", "65,,,,68,,66,67,69,315,316,73,74,,,,,,75,312,318,103,102,104,105,,,235", ",,,,,,46,,,107,106,108,97,57,99,98,100,,101,109,110,,93,94,42,43,41", ",,,,,,,,,,,,,,,,,,,228,,,234,,,59,60,,,61,,,,,,45,,,,,,,,,233,,,,,91", "81,84,85,,86,88,87,89,,,,,82,90,,,,70,71,72,63,58,83,95,96,64,65,,,", "68,,66,67,69,315,316,73,74,,,,,,75,312,318,103,102,104,105,,,235,,,", ",,,46,,,107,106,108,97,57,99,98,100,290,101,109,110,,93,94,42,43,41", ",,,,,,,,,,,,,,,,,,,228,,,234,,,59,60,,,61,,,,285,,45,,,291,,,,,,233", ",,,,91,288,84,85,,86,88,87,89,,,,,82,90,,,,,,,63,,83,95,96,70,71,72", "9,58,,,,64,65,,,,68,,66,67,69,30,31,73,74,,,,,,75,28,27,103,102,104", "105,,,19,,,,,,8,46,,10,107,106,108,97,57,99,98,100,,101,109,110,,93", "94,42,43,41,,,,,,,,,,,,,,,,,,,,40,,,33,,,59,60,,,61,,35,,,,45,,,,,,", ",,20,,,,,91,81,84,85,,86,88,87,89,,,,,82,90,,,,70,71,72,63,58,83,95", "96,64,65,,,,68,,66,67,69,315,316,73,74,,,,,,75,312,318,103,102,104,105", ",,235,,,,,,,46,,,107,106,108,97,57,99,98,100,290,101,109,110,,93,94", "42,43,41,,,,,,,,,,,,,,,,,,,,228,,,234,,,59,60,,,61,,287,,,,45,,,291", ",,,,,233,,,,,91,288,84,85,,86,88,87,89,,,,,82,90,,,,70,71,72,63,58,83", "95,96,64,65,,,,68,,66,67,69,315,316,73,74,,,,,,75,312,318,103,102,104", "105,,,235,,,,,,,46,,,107,106,108,97,57,99,98,100,290,101,109,110,,93", "94,42,43,41,,,,,,,,,,,,,,,,,,,,228,,,234,,,59,60,,,61,,,,,,45,,,291", ",,,,,233,,,,,91,288,84,85,,86,88,87,89,,,,,82,90,,,,70,71,72,63,58,83", "95,96,64,65,,,,68,,66,67,69,30,31,73,74,,,,,,75,28,27,103,102,104,105", ",,19,,,,,,,46,,,107,106,108,97,57,99,98,100,,101,109,110,,93,94,42,43", "41,,,,,,,,,,,,,,,,,,,,228,,,234,,,59,60,,,61,,,,,,45,,,,,,,,,20,,,,", "91,81,84,85,,86,88,87,89,,,,,82,90,,,,70,71,72,63,58,83,95,96,64,65", ",,,68,,66,67,69,30,31,73,74,,,,,,75,28,27,103,102,104,105,,,19,,,,,", ",46,,,107,106,108,97,57,99,98,100,,101,109,110,,93,94,42,43,41,,,,,", ",,,,,,,,,,,,,,228,,,234,,,59,60,,,61,,,,,,45,,,,,,,,,20,,,,,91,81,84", "85,,86,88,87,89,,,,,82,90,,,,70,71,72,63,58,83,95,96,64,65,,,,68,,66", "67,69,30,31,73,74,,,,,,75,28,27,103,102,104,105,,,19,,,,,,,46,,,107", "106,108,97,57,99,98,100,,101,109,110,,93,94,42,43,41,,,,,,,,,,,,,,,", ",,,,228,,,234,,,59,60,,,61,,,,,,45,,,,,,,,,20,,,,,91,81,84,85,,86,88", "87,89,,,,,82,90,115,,,,,114,63,,83,95,96,70,71,72,,58,,,,64,65,,,,68", ",66,67,69,315,316,73,74,,,,,,75,312,318,103,102,104,105,,,235,,,,,,", "313,,,107,106,108,97,57,99,98,100,,101,109,110,,93,94,,,319,,,,,,,,", ",,,,,,,,,,,355,,,33,,,59,60,,,61,,35,,,,,,,,,,,,,,,,,,91,81,84,85,,86", "88,87,89,,,,,82,90,,,,70,71,72,63,58,83,95,96,64,65,,,,68,,66,67,69", "315,316,73,74,,,,,,75,312,318,103,102,104,105,,,235,,,,,,,313,,,107", "106,108,360,57,99,98,361,,101,109,110,,93,94,,,319,,,,,,,,,,,,,,,,,367", ",,362,,,234,,,59,60,,,61,,,,,,,,,,,,,,,,,,,,91,81,84,85,,86,88,87,89", ",,,,82,90,,,,70,71,72,63,58,83,95,96,64,65,,,,68,,66,67,69,315,316,73", "74,,,,,,75,312,318,103,102,104,105,,,235,,,,,,,313,,,107,106,108,360", "57,99,98,361,,101,109,110,,93,94,,,319,,,,,,,,,,,,,,,,,,,,362,,,234", ",,59,60,,,61,,,680,,677,676,675,685,678,,,,,,,,,688,,91,81,84,85,,86", "88,87,89,,,,,82,90,,,,,,683,63,,83,95,96,70,71,72,9,58,696,695,,64,65", "689,,,68,,66,67,69,30,31,73,74,,,,,,75,28,27,103,102,104,105,,,19,,", ",,,8,46,7,10,107,106,108,97,57,99,98,100,,101,109,110,,93,94,42,43,41", ",,,,,,,,,,,,,,,,,,,40,,,33,,,59,60,,,61,,35,,,,45,,,,,,,,,20,,,,,91", "81,84,85,,86,88,87,89,,,,,82,90,,,,,,395,63,,83,95,96,70,71,72,,58,", ",,64,65,,,,68,,66,67,69,30,31,73,74,,,,,,75,28,27,103,102,104,105,,", "19,,,,,,,46,,,107,106,108,97,57,99,98,100,,101,109,110,,93,94,42,43", "41,,,,,,,,,,,,,,,,,,,,228,,,234,,,59,60,,,61,,,,,,45,,,,,,,,,20,,,,", "91,81,84,85,,86,88,87,89,,,,,82,90,,,,70,71,72,63,58,83,95,96,64,65", ",,,68,,66,67,69,30,31,73,74,,,,,,75,28,27,103,102,104,105,,,19,,,,,", ",46,,,107,106,108,97,57,99,98,100,,101,109,110,,93,94,42,43,41,,,,,", ",,,,,,,,,,,,,,228,,,234,,,59,60,,,61,,,,,,45,,,,,,,,,20,,,,,91,81,84", "85,,86,88,87,89,,,,,82,90,,,,70,71,72,63,58,83,95,96,64,65,,,,68,,66", "67,69,30,31,73,74,,,,,,75,28,27,103,102,104,105,,,19,,,,,,,46,,,107", "106,108,97,57,99,98,100,,101,109,110,,93,94,42,43,41,,,,,,,,,,,,,,,", ",,,,228,,,234,,,59,60,,,61,,,,,,45,,,,,,,,,20,,,,,91,81,84,85,,86,88", "87,89,,,,,82,90,,,,70,71,72,63,58,83,95,96,64,65,,,,68,,66,67,69,30", "31,73,74,,,,,,75,28,27,103,102,104,105,,,19,,,,,,,46,,,107,106,108,97", "57,99,98,100,,101,109,110,,93,94,42,43,41,,,,,,,,,,,,,,,,,,,,228,,,234", ",,59,60,,,61,,,,,,45,,,,,,,,,20,,,,,91,81,84,85,,86,88,87,89,,,,,82", "90,,,,,,,63,,83,95,96,70,71,72,9,58,,,,64,65,,,,68,,66,67,69,30,31,73", "74,,,,,,75,28,27,103,102,104,105,,,19,,,,,,8,46,,10,107,106,108,97,57", "99,98,100,,101,109,110,,93,94,42,43,41,,,,,,,,,,,,,,,,,,,,40,,,33,,", "59,60,,,61,,35,,,,45,,,,,,,,,20,,,,,91,81,84,85,,86,88,87,89,,,,,82", "90,,,,70,71,72,63,58,83,95,96,64,65,,,,68,,66,67,69,315,316,73,74,,", ",,,75,312,318,103,102,104,105,,,235,,,,,,,46,,,107,106,108,97,57,99", "98,100,,101,109,110,,93,94,42,43,41,,,,,,,,,,,,,,,,,,,,228,,,234,,,59", "60,,,61,,638,,,,45,,,,,,,,,233,,,,,91,81,84,85,,86,88,87,89,,,,,82,90", ",,,70,71,72,63,58,83,95,96,64,65,,,,68,,66,67,69,30,31,73,74,,,,,,75", "28,27,103,102,104,105,,,19,,,,,,,46,,,107,106,108,97,57,99,98,100,,101", "109,110,,93,94,42,43,41,,,,,,,,,,,,,,,,,,,,228,,,234,,,59,60,,,61,,", ",,,45,,,,,,,,,20,,,,,91,81,84,85,,86,88,87,89,,,,,82,90,,,,70,71,72", "63,58,83,95,96,64,65,,,,68,,66,67,69,30,31,73,74,,,,,,75,28,27,103,102", "104,105,,,235,,,,,,,46,,,107,106,108,97,57,99,98,100,,101,109,110,,93", "94,42,43,41,,,,,,,,,,,,,,,,,,,,228,,,234,,,59,60,,,61,,411,,,,45,,,", ",,,,,233,,,,,91,81,84,85,,86,88,87,89,,,,,82,90,,,,70,71,72,63,58,83", "95,96,64,65,,,,68,,66,67,69,30,31,73,74,,,,,,75,28,27,103,102,104,105", ",,235,,,,,,,46,,,107,106,108,97,57,99,98,100,,101,109,110,,93,94,42", "43,41,,,,,,,,,,,,,,,,,,,,228,,,234,,,59,60,,,61,,411,,,,45,,,,,,,,,233", ",,,,91,81,84,85,,86,88,87,89,,,,,82,90,,,,70,71,72,63,58,83,95,96,64", "65,,,,68,,66,67,69,30,31,73,74,,,,,,75,28,27,103,102,104,105,,,19,,", ",,,,46,,,107,106,108,97,57,99,98,100,,101,109,110,,93,94,42,43,41,,", ",,,,,,,,,,,,,,,,,228,,,234,,,59,60,,,61,,,,,,45,,,,,,,,,20,,,,,91,81", "84,85,,86,88,87,89,,,,,82,90,,,,70,71,72,63,58,83,95,96,64,65,,,,68", ",66,67,69,30,31,73,74,,,,,,75,28,27,103,102,104,105,,,19,,,,,,,46,,", "107,106,108,97,57,99,98,100,,101,109,110,,93,94,42,43,41,,,,,,,,,,,", ",,,,,,,,228,,,234,,,59,60,,,61,,,,,,45,,,,,,,,,20,,,,,91,81,84,85,,86", "88,87,89,,,,,82,90,,,,70,71,72,63,58,83,95,96,64,65,,,,68,,66,67,69", "30,31,73,74,,,,,,75,28,27,103,102,104,105,,,235,,,,,,,46,,,107,106,108", "97,57,99,98,100,,101,109,110,,93,94,42,43,41,,,,,,,,,,,,,,,,,,,,228", ",,234,,,59,60,,,61,,,,,,45,,,,,,,,,233,,,,,91,81,84,85,,86,88,87,89", ",,,,82,90,,,,70,71,72,63,58,83,95,96,64,65,,,,68,,66,67,69,30,31,73", "74,,,,,,75,28,27,103,102,104,105,,,235,,,,,,,46,,,107,106,108,97,57", "99,98,100,290,101,109,110,,93,94,42,43,41,,,,,,,,,,,,,,,,,,,,228,,,234", ",,59,60,,,61,,287,,285,,45,,,291,,,,,,233,,,,,91,288,84,85,,86,88,87", "89,,,,,82,90,,,,70,71,72,63,58,83,95,96,64,65,,,,68,,66,67,69,315,316", "73,74,,,,,,75,312,318,103,102,104,105,,,235,,,,,,,46,,,107,106,108,97", "57,99,98,100,,101,109,110,,93,94,42,43,41,,,,,,,,,,,,,,,,,,,,228,,,234", ",,59,60,,,61,,,,,,45,,,,,,,,,233,,,,,91,81,84,85,,86,88,87,89,,,,,82", "90,,,,70,71,72,63,58,83,95,96,64,65,,,,68,,66,67,69,30,31,73,74,,,,", ",75,28,27,103,102,104,105,,,235,,,,,,,46,,,107,106,108,97,57,99,98,100", ",101,109,110,,93,94,42,43,41,,,,,,,,,,,,,,,,,,,,228,,,234,,,59,60,,", "61,,,,,,45,,,,,,,,,233,,,,,91,81,84,85,,86,88,87,89,,,,,82,90,,,,70", "71,72,63,58,83,95,96,64,65,,,,68,,66,67,69,30,31,73,74,,,,,,75,28,27", "103,102,104,105,,,19,,,,,,,46,,,107,106,108,97,57,99,98,100,,101,109", "110,,93,94,42,43,41,,,,,,,,,,,,,,,,,,,,228,,,234,,,59,60,,,61,,,,,,45", ",,,,,,,,20,,,,,91,81,84,85,,86,88,87,89,,,,,82,90,,,,70,71,72,63,58", "83,95,96,64,65,,,,68,,66,67,69,315,316,73,74,,,,,,75,312,318,103,102", "104,105,,,235,,,,,,,313,,,107,106,108,97,57,99,98,100,,101,109,110,", "93,94,,,319,,,,,,,,,,,,,,,,,,,,309,,,234,,,59,60,,,61,,,680,,677,676", "675,685,678,,,,,,,,,688,,91,81,84,85,,86,88,87,89,,,,,82,90,,,,513,", "683,63,,83,95,96,70,71,72,,58,696,695,,64,65,689,,,68,,66,67,69,315", "316,73,74,,,,,,75,312,318,103,102,104,105,,,235,,,,,,,46,,,107,106,108", "97,57,99,98,100,,101,109,110,,93,94,42,43,41,,,,,,,,,,,,,,,,,,,,228", ",,234,,,59,60,,,61,,,,,,45,,,,,,,,,233,,,,,91,81,84,85,,86,88,87,89", ",,,,82,90,,,,70,71,72,63,58,83,95,96,64,65,,,,68,,66,67,69,315,316,73", "74,,,,,,75,312,318,103,102,104,105,,,235,,,,,,,46,,,107,106,108,97,57", "99,98,100,,101,109,110,,93,94,42,43,41,,,,,,,,,,,,,,,,,,,,228,,,234", ",,59,60,,,61,,411,,,,45,,,,,,,,,233,,,,,91,81,84,85,,86,88,87,89,,,", ",82,90,,,,70,71,72,63,58,83,95,96,64,65,,,,68,,66,67,69,315,316,73,74", ",,,,,75,312,318,103,102,104,105,,,235,,,,,,,313,,,107,106,108,97,57", "99,98,100,,101,109,110,,93,94,,,319,,,,,,,,,,,,,,,,,,,,309,,,305,,,59", "60,,,61,,,,,,,,,,,,,,,,,,,,91,81,84,85,,86,88,87,89,,,,,82,90,,,,70", "71,72,63,58,83,95,96,64,65,,,,68,,66,67,69,315,316,73,74,,,,,,75,312", "318,103,102,104,105,,,235,,,,,,,313,,,107,106,108,97,57,99,98,100,,101", "109,110,,93,94,,,319,,,,,,,,,,,,,,,,,,,,309,,,305,,,59,60,,,61,,,,,", ",,,,,,,,,,,,,,91,81,84,85,,86,88,87,89,,,,,82,90,,,,70,71,72,63,58,83", "95,96,64,65,,,,68,,66,67,69,315,316,73,74,,,,,,75,312,318,103,102,104", "105,,,235,,,,,,,313,,,107,106,108,97,57,99,98,100,,101,109,110,,93,94", ",,319,,,,,,,,,,,,,,,,,,,,309,,,305,,,59,60,,,61,,,,,,,,,,,,,,,,,,,,91", "81,84,85,,86,88,87,89,,,,,82,90,,,,70,71,72,63,58,83,95,96,64,65,,,", "68,,66,67,69,315,316,73,74,,,,,,75,312,318,103,102,104,105,,,235,,,", ",,,46,,,107,106,108,97,57,99,98,100,,101,109,110,,93,94,42,43,41,,,", ",,,,,,,,,,,,,,,,228,,,234,,,59,60,,,61,,,,,,45,,,,,,,,,233,,,,,91,81", "84,85,,86,88,87,89,,,,,82,90,,,,70,71,72,63,58,83,95,96,64,65,,,,68", ",66,67,69,315,316,73,74,,,,,,75,312,318,103,102,104,105,,,235,,,,,,", "46,,,107,106,108,97,57,99,98,100,,101,109,110,,93,94,42,43,41,,,,,,", ",,,,,,,,,,,,,228,,,234,,,59,60,,,61,,,,,,45,,,,,,,,,233,,,,,91,81,84", "85,,86,88,87,89,,,,,82,90,,,,70,71,72,63,58,83,95,96,64,65,,,,68,,66", "67,69,315,316,73,74,,,,,,75,312,318,103,102,104,105,,,235,,,,,,,46,", ",107,106,108,97,57,99,98,100,,101,109,110,,93,94,42,43,41,,,,,,,,,,", ",,,,,,,,,228,,,234,,,59,60,,,61,,,,,,45,,,,,,,,,233,,,,,91,81,84,85", ",86,88,87,89,,,,,82,90,,,,70,71,72,63,58,83,95,96,64,65,,,,68,,66,67", "69,315,316,73,74,,,,,,75,312,318,103,102,104,105,,,235,,,,,,,46,,,107", "106,108,97,57,99,98,100,,101,109,110,,93,94,42,43,41,,,,,,,,,,,,,,,", ",,,,228,,,234,530,,59,60,,,61,,,,,,45,,,,,,,,,233,,,,,91,81,84,85,,86", "88,87,89,,,,,82,90,,,,70,71,72,63,58,83,95,96,64,65,,,,68,,66,67,69", "30,31,73,74,,,,,,75,28,27,103,102,104,105,,,235,,,,,,,46,,,107,106,108", "97,57,99,98,100,,101,109,110,,93,94,42,43,41,,,,,,,,,,,,,,,,,,,,228", ",,234,,,59,60,,,61,,,,,,45,,,,,,,,,233,,,,,91,81,84,85,,86,88,87,89", ",,,,82,90,,,,70,71,72,63,58,83,95,96,64,65,,,,68,,66,67,69,30,31,73", "74,,,,,,75,28,27,103,102,104,105,,,235,,,,,,,46,,,107,106,108,97,57", "99,98,100,,101,109,110,,93,94,42,43,41,,,,,,,,,,,,,,,,,,,,228,,,234", ",,59,60,,,61,,,,,,45,,,,,,,,,233,,,,,91,81,84,85,,86,88,87,89,,,,,82", "90,,,,70,71,72,63,58,83,95,96,64,65,,,,68,,66,67,69,30,31,73,74,,,,", ",75,28,27,103,102,104,105,,,235,,,,,,,46,,,107,106,108,97,57,99,98,100", ",101,109,110,,93,94,42,43,41,,,,,,,,,,,,,,,,,,,,228,,,234,,,59,60,,", "61,,,,,,45,,,,,,,,,233,,,,,91,81,84,85,,86,88,87,89,,,,,82,90,,,,70", "71,72,63,58,83,95,96,64,65,,,,68,,66,67,69,30,31,73,74,,,,,,75,28,27", "103,102,104,105,,,235,,,,,,,46,,,107,106,108,97,57,99,98,100,,101,109", "110,,93,94,42,43,41,,,,,,,,,,,,,,,,,,,,228,,,234,,,59,60,,,61,,,,,,45", ",,,,,,,,233,,,,,91,81,84,85,,86,88,87,89,,,,,82,90,,,,70,71,72,63,58", "83,95,96,64,65,,,,68,,66,67,69,315,316,73,74,,,,,,75,312,318,103,102", "104,105,,,235,,,,,,,46,,,107,106,108,97,57,99,98,100,290,101,109,110", ",93,94,42,43,41,,,,,,,,,,,,,,,,,,,,228,,,234,,,59,60,,,61,,,,285,,45", ",,291,,,,,,233,,,,,91,288,84,85,,86,88,87,89,,,,,82,90,,,,70,71,72,63", "58,83,95,96,64,65,,,,68,,66,67,69,315,316,73,74,,,,,,75,312,318,103", "102,104,105,,,235,,,,,,,46,,,107,106,108,97,57,99,98,100,290,101,109", "110,,93,94,42,43,41,,,,,,,,,,,,,,,,,,,,228,,,234,,,59,60,,,61,,638,", "285,,45,,,291,,,,,,233,,,,,91,288,84,85,,86,88,87,89,,,,,82,90,,,,70", "71,72,63,58,83,95,96,64,65,,,,68,,66,67,69,315,316,73,74,,,,,,75,312", "318,103,102,104,105,,,235,,,,,,,46,,,107,106,108,97,57,99,98,100,,101", "109,110,,93,94,42,43,41,,,,,,,,,,,,,,,,,,,,228,,,234,,,59,60,,,61,,", ",,,45,,,,,,,,,233,,,,,91,81,84,85,,86,88,87,89,,,,,82,90,,,,,,,63,,83", "95,96,70,71,72,9,58,,,,64,65,,,,68,,66,67,69,30,31,73,74,,,,,,75,28", "27,103,102,104,105,,,19,,,,,,8,46,,10,107,106,108,97,57,99,98,100,,101", "109,110,,93,94,42,43,41,,,,,,,,,,,,,,,,,,,,40,,,33,,,59,60,,,61,,35", ",,,45,,,,,,,,,20,,,,,91,81,84,85,,86,88,87,89,,,,,82,90,,,,70,71,72", "63,58,83,95,96,64,65,,,,68,,66,67,69,30,31,73,74,,,,,,75,28,27,103,102", "104,105,,,235,,,,,,,46,,,107,106,108,97,57,99,98,100,290,101,109,110", ",93,94,42,43,41,,,,,,,,,,,,,,,,,,,,228,,,234,,,59,60,,,61,,287,,285", ",45,,,291,,,,,,233,,,,,91,288,84,85,,86,88,87,89,,,,,82,90,,,,70,71", "72,63,58,83,95,96,64,65,,,,68,,66,67,69,30,31,73,74,,,,,,75,28,27,103", "102,104,105,,,19,,,,,,,46,,,107,106,108,97,57,99,98,100,,101,109,110", ",93,94,42,43,41,,,,,,,,,,,,,,,,,,,,228,,,234,,,59,60,,,61,,,,,,45,,", ",,,,,,20,,,,,91,81,84,85,,86,88,87,89,,,,,82,90,,,,70,71,72,63,58,83", "95,96,64,65,,,,68,,66,67,69,30,31,73,74,,,,,,75,28,27,103,102,104,105", ",,235,,,,,,,46,,,107,106,108,97,57,99,98,100,,101,109,110,,93,94,42", "43,41,,,,,,,,,,,,,,,,,,,,228,,,234,,,59,60,,,61,,,,,,45,,,,,,,,,233", ",,,,91,81,84,85,,86,88,87,89,,,,,82,90,,,,70,71,72,63,58,83,95,96,64", "65,,,,68,,66,67,69,315,316,73,74,,,,,,75,312,318,103,102,104,105,,,235", ",,,,,,46,,,107,106,108,97,57,99,98,100,,101,109,110,,93,94,42,43,41", ",,,,,,,,,,,,,,,,,,,228,,,234,,,59,60,,,61,,742,,,,45,,,,,,,,,233,,,", ",91,81,84,85,,86,88,87,89,,,,,82,90,,,,70,71,72,63,58,83,95,96,64,65", ",,,68,,66,67,69,30,31,73,74,,,,,,75,28,27,103,102,104,105,,,235,,,,", ",,46,,,107,106,108,97,57,99,98,100,290,101,109,110,,93,94,42,43,41,", ",,,,,,,,,,,,,,,,,,228,,,234,,,59,60,,,61,,287,,285,,45,,,291,,,,,,233", ",,,,91,288,84,85,,86,88,87,89,,,,,82,90,,,,70,71,72,63,58,83,95,96,64", "65,,,,68,,66,67,69,30,31,73,74,,,,,,75,28,27,103,102,104,105,,,235,", ",,,,,46,,,107,106,108,97,57,99,98,100,290,101,109,110,,93,94,42,43,41", ",,,,,,,,,,,,,,,,,,,228,,,234,,,59,60,,,61,,287,,285,,45,,,291,,,,,,233", ",,,,91,288,84,85,,86,88,87,89,,,,,82,90,,,,70,71,72,63,58,83,95,96,64", "65,,,,68,,66,67,69,30,31,73,74,,,,,,75,28,27,103,102,104,105,,,19,,", ",,,,46,,,107,106,108,97,57,99,98,100,,101,109,110,,93,94,42,43,41,,", ",,,,,,,,,,,,,,,,,228,,,234,,,59,60,,,61,,,,,,45,,,,,,,,,20,,,,,91,81", "84,85,,86,88,87,89,,,,,82,90,,,,70,71,72,63,58,83,95,96,64,65,,,,68", ",66,67,69,315,316,73,74,,,,,,75,312,318,103,102,104,105,,,235,,,,,,", "46,,,107,106,108,97,57,99,98,100,,101,109,110,,93,94,42,43,41,,,,,,", ",,,,,,,,,,,,,228,,,234,,,59,60,,,61,,287,,,,45,,,,,,,,,233,,,,,91,81", "84,85,,86,88,87,89,,,,,82,90,,,,70,71,72,63,58,83,95,96,64,65,,,,68", ",66,67,69,315,316,73,74,,,,,,75,312,318,103,102,104,105,,,235,,,,,,", "46,,,107,106,108,97,57,99,98,100,290,101,109,110,,93,94,42,43,41,,,", ",,,,,,,,,,,,,,,,228,,,234,,,59,60,,,61,,638,,,,45,,,291,,,,,,233,,,", ",91,288,84,85,,86,88,87,89,,,,,82,90,,,,70,71,72,63,58,83,95,96,64,65", ",,,68,,66,67,69,30,31,73,74,,,,,,75,28,27,103,102,104,105,,,19,,,,,", ",46,,,107,106,108,97,57,99,98,100,,101,109,110,,93,94,42,43,41,,,,,", ",,,,,,,,,,,,,,228,,,234,,,59,60,,,61,,,,,,45,,,,,,,,,20,,,,,91,81,84", "85,,86,88,87,89,,,,,82,90,,,,70,71,72,63,58,83,95,96,64,65,,,,68,,66", "67,69,315,316,73,74,,,,,,75,312,318,103,102,104,105,,,235,,,,,,,46,", ",107,106,108,97,57,99,98,100,,101,109,110,,93,94,42,43,41,,,,,,,,,,", ",,,,,,,,,228,,,234,,,59,60,,,61,,,,,,45,,,,,,,,,233,,,,,91,81,84,85", ",86,88,87,89,,,,,82,90,,,,70,71,72,63,58,83,95,96,64,65,,,,68,,66,67", "69,315,316,73,74,,,,,,75,312,318,103,102,104,105,,,235,,,,,,,46,,,107", "106,108,97,57,99,98,100,,101,109,110,,93,94,42,43,41,,,,,,,,,,,,,,,", ",,,,228,,,234,,,59,60,,,61,,,,,,45,,,,,,,,,233,,,,,91,81,84,85,,86,88", "87,89,,,,,82,90,,,,70,71,72,63,58,83,95,96,64,65,,,,68,,66,67,69,315", "316,73,74,,,,,,75,312,318,103,102,104,105,,,235,,,,,,,313,,,107,106", "108,97,57,99,98,100,,101,109,110,,93,94,,,319,,,,,,,,,,,,,,,,,,,,309", ",,305,,,59,60,,,61,,,,,,,,,,,,,,,,,,,,91,81,84,85,,86,88,87,89,,,,,82", "90,,,,70,71,72,63,58,83,95,96,64,65,,,,68,,66,67,69,30,31,73,74,,,,", ",75,28,27,103,102,104,105,,,19,,,,,,,46,,,107,106,108,97,57,99,98,100", ",101,109,110,,93,94,42,43,41,,,,,,,,,,,,,,,,,,,,228,,,234,,,59,60,,", "61,,,,,,45,,,,,,,,,20,,,,,91,81,84,85,,86,88,87,89,,,,,82,90,,,,70,71", "72,63,58,83,95,96,64,65,,,,68,,66,67,69,30,31,73,74,,,,,,75,28,27,103", "102,104,105,,,235,,,,,,,46,,,107,106,108,97,57,99,98,100,290,101,109", "110,,93,94,42,43,41,,,,,,,,,,,,,,,,,,,,228,,,234,,,59,60,,,61,,287,", "285,,45,,,291,,,,,,233,,,,,91,288,84,85,,86,88,87,89,,,,,82,90,,,,70", "71,72,63,58,83,95,96,64,65,,,,68,,66,67,69,315,316,73,74,,,,,,75,312", "318,103,102,104,105,,,235,,,,,,,313,,,107,106,108,97,57,99,98,100,,101", "109,110,,93,94,,,319,,,,,,,,,,,,,,,,,,,,309,,,305,,,59,60,,,61,,,680", ",677,676,675,685,678,,,,,,,,,688,,91,81,84,85,,86,88,87,89,,,,,82,90", ",,,,,683,63,,83,95,96,70,71,72,9,58,696,695,,64,65,689,,,68,,66,67,69", "30,31,73,74,,,,,,75,28,27,103,102,104,105,,,19,,,,,,8,46,298,10,107", "106,108,97,57,99,98,100,,101,109,110,,93,94,42,43,41,,,,,,,,,,,,,,,", ",,,,40,,,33,,,59,60,,,61,,35,,,,45,,,,,,,,,20,,,,,91,81,84,85,,86,88", "87,89,,,,,82,90,,,,,,395,63,,83,95,96,70,71,72,,58,,,,64,65,,,,68,,66", "67,69,315,316,73,74,,,,,,75,312,318,103,102,104,105,,,235,,,,,,,46,", ",107,106,108,97,57,99,98,100,,101,109,110,,93,94,42,43,41,,,,,,,,,,", ",,,,,,,,,228,,,234,,,59,60,,,61,,,,,,45,,,,,,,,,233,,,,,91,81,84,85", ",86,88,87,89,,,,,82,90,,,,70,71,72,63,58,83,95,96,64,65,,,,68,,66,67", "69,315,316,73,74,,,,,,75,312,318,103,102,104,105,,,235,,,,,,,46,,,107", "106,108,97,57,99,98,100,290,101,109,110,,93,94,42,43,41,,,,,,,,,,,,", ",,,,,,,228,,,234,,,59,60,,,61,,,,285,,45,,,291,,,,,,233,,,,,91,288,84", "85,,86,88,87,89,,,,,82,90,,,,70,71,72,63,58,83,95,96,64,65,,,,68,,66", "67,69,315,316,73,74,,,,,,75,312,318,103,102,104,105,,,235,,,,,,,46,", ",107,106,108,97,57,99,98,100,290,101,109,110,,93,94,42,43,41,,,,,,,", ",,,,,,,,,,,,228,,,234,,,59,60,,,61,,638,,285,,45,,,291,,,,,,233,,,,", "91,288,84,85,,86,88,87,89,,,,,82,90,,,,70,71,72,63,58,83,95,96,64,65", ",,,68,,66,67,69,315,316,73,74,,,,,,75,312,318,103,102,104,105,,,235", ",,,,,,46,,,107,106,108,97,57,99,98,100,,101,109,110,,93,94,42,43,41", ",,,,,,,,,,,,,,,,,,,228,,,234,,,59,60,,,61,,,,,,45,,,,,,,,,233,,,,,91", "81,84,85,,86,88,87,89,,,,,82,90,,,,70,71,72,63,58,83,95,96,64,65,,,", "68,,66,67,69,315,316,73,74,,,,,,75,312,318,103,102,104,105,,,235,,,", ",,,46,,,107,106,108,97,57,99,98,100,,101,109,110,,93,94,42,43,41,,,", ",,,,,,,,,,,,,,,,228,,,234,,,59,60,,,61,,,,,,45,,,,,,,,,233,,,,,91,81", "84,85,,86,88,87,89,,,,,82,90,,,,70,71,72,63,58,83,95,96,64,65,,,,68", ",66,67,69,315,316,73,74,,,,,,75,312,318,103,102,104,105,,,235,,,,,,", "46,,,107,106,108,97,57,99,98,100,,101,109,110,,93,94,42,43,41,,,,,,", ",,,,,,,,,,,,,228,,,234,,,59,60,,,61,,,,,,45,,,,,,,,,233,,,,,91,81,84", "85,,86,88,87,89,,,,,82,90,,,,70,71,72,63,58,83,95,96,64,65,,,,68,,66", "67,69,30,31,73,74,,,,,,75,28,27,103,102,104,105,,,235,,,,,,,46,,,107", "106,108,97,57,99,98,100,290,101,109,110,,93,94,42,43,41,,,,,,,,,,,,", ",,,,,,,228,,,234,,,59,60,,,61,,287,,285,,45,,,291,,,,,,233,,,,,91,288", "84,85,,86,88,87,89,,,,,82,90,,,,70,71,72,63,58,83,95,96,64,65,,,,68", ",66,67,69,315,316,73,74,,,,,,75,312,318,103,102,104,105,,,235,,,,,,", "46,,,107,106,108,97,57,99,98,100,,101,109,110,,93,94,42,43,41,,,,,,", ",,,,,,,,,,,,,228,,,234,,,59,60,,,61,,,,,,45,,,,,,,,,233,,,,,91,81,84", "85,,86,88,87,89,,,,,82,90,,,,,,,63,,83,95,96,176,187,177,200,173,193", "183,182,203,204,198,181,180,175,201,205,206,185,174,188,192,194,186", "179,,,,195,202,197,196,189,199,184,172,191,190,,,,,,171,178,169,170", "166,167,168,127,129,,,128,,,,,,,,160,161,,157,139,140,141,148,145,147", ",,142,143,,,,162,163,149,150,,,,,,,,,,,,,,154,153,,138,159,156,155,164", "151,152,146,144,136,158,137,,,165,91,,,,,,,,,,,,,,90,176,187,177,200", "173,193,183,182,203,204,198,181,180,175,201,205,206,185,174,188,192", "194,186,179,,,,195,202,197,196,189,199,184,172,191,190,,,,,,171,178", "169,170,166,167,168,127,129,,,128,,,,,,,,160,161,,157,139,140,141,148", "145,147,,,142,143,,,,162,163,149,150,,,,,,,,,,,,,,154,153,,138,159,156", "155,164,151,152,146,144,136,158,137,,,165,91,,,,,,,,,,,,,,90,176,187", "177,200,173,193,183,182,203,204,198,181,180,175,201,205,206,185,174", "188,192,194,186,179,,,,195,202,197,196,189,199,184,172,191,190,,,,,", "171,178,169,170,166,167,168,127,129,,,128,,,,,,,,160,161,,157,139,140", "141,148,145,147,,,142,143,,,,162,163,149,150,,,,,,,,,,,,,,154,153,,138", "159,156,155,164,151,152,146,144,136,158,137,,,165,91,,,,,,,,,,,,,,90", "176,187,177,200,173,193,183,182,203,204,198,181,180,175,201,205,206", "185,174,188,192,194,186,179,,,,195,202,197,196,189,199,184,172,191,190", ",,,,,171,178,169,170,166,167,168,127,129,126,,128,,,,,,,,160,161,,157", "139,140,141,148,145,147,,,142,143,,,,162,163,149,150,,,,,,,,,,,,,,154", "153,,138,159,156,155,164,151,152,146,144,136,158,137,,,165,91,,,,,,", ",,,,,,,90,176,187,177,200,173,193,183,182,203,204,198,181,180,175,201", "205,206,185,174,188,192,194,186,179,,,,195,202,197,378,377,379,376,172", "191,190,,,,,,171,178,169,170,373,374,375,371,129,99,98,372,,101,,,,", ",160,161,,157,139,140,141,148,145,147,,,142,143,,,,162,163,149,150,", ",,,,383,,,,,,,,154,153,,138,159,156,155,164,151,152,146,144,136,158", "137,,,165,176,187,177,200,173,193,183,182,203,204,198,181,180,175,201", "205,206,185,174,188,192,194,186,179,,,,195,202,197,196,189,199,184,172", "191,190,,,,,,171,178,169,170,166,167,168,127,129,,,128,,,,,,,,160,161", ",157,139,140,141,148,145,147,,,142,143,,,,162,163,149,150,,,,,,,,,,", ",,,154,153,,138,159,156,155,164,151,152,146,144,136,158,137,619,437", "165,,620,,,,,,,,160,161,,157,139,140,141,148,145,147,,,142,143,,,,162", "163,149,150,,,,,,269,,,,,,,,154,153,,138,159,156,155,164,151,152,146", "144,136,158,137,712,444,165,,713,,,,,,,,160,161,,157,139,140,141,148", "145,147,,,142,143,,,,162,163,149,150,,,,,,269,,,,,,,,154,153,,138,159", "156,155,164,151,152,146,144,136,158,137,747,444,165,,746,,,,,,,,160", "161,,157,139,140,141,148,145,147,,,142,143,,,,162,163,149,150,,,,,,269", ",,,,,,,154,153,,138,159,156,155,164,151,152,146,144,136,158,137,744", "437,165,,745,,,,,,,,160,161,,157,139,140,141,148,145,147,,,142,143,", ",,162,163,149,150,,,,,,269,,,,,,,,154,153,,138,159,156,155,164,151,152", "146,144,136,158,137,433,437,165,,434,,,,,,,,160,161,,157,139,140,141", "148,145,147,,,142,143,,,,162,163,149,150,,,,,,269,,,,,,,,154,153,,138", "159,156,155,164,151,152,146,144,136,158,137,484,437,165,,485,,,,,,,", "160,161,,157,139,140,141,148,145,147,,,142,143,,,,162,163,149,150,,", ",,,,,,,,,,,154,153,,138,159,156,155,164,151,152,146,144,136,158,137", "440,444,165,,439,,,,,,,,160,161,,157,139,140,141,148,145,147,,,142,143", ",,,162,163,149,150,,,,,,269,,,,,,,,154,153,,138,159,156,155,164,151", "152,146,144,136,158,137,621,444,165,,622,,,,,,,,160,161,,157,139,140", "141,148,145,147,,,142,143,,,,162,163,149,150,,,,,,269,,,,,,,,154,153", ",138,159,156,155,164,151,152,146,144,136,158,137,619,437,165,,620,,", ",,,,,160,161,,157,139,140,141,148,145,147,,,142,143,,,,162,163,149,150", ",,,,,269,,,,,,,,154,153,,138,159,156,155,164,151,152,146,144,136,158", "137,1004,444,165,,1005,,,,,,,,160,161,,157,139,140,141,148,145,147,", ",142,143,,,,162,163,149,150,,,,,,269,,,,,,,,154,153,,138,159,156,155", "164,151,152,146,144,136,158,137,484,437,165,,485,,,,,,,,160,161,,157", "139,140,141,148,145,147,,,142,143,,,,162,163,149,150,,,,,,269,,,,,,", ",154,153,,138,159,156,155,164,151,152,146,144,136,158,137,715,444,165", ",716,,,,,,,,160,161,,157,139,140,141,148,145,147,,,142,143,,,,162,163", "149,150,,,,,,269,,,,,,,,154,153,,138,159,156,155,164,151,152,146,144", "136,158,137,1002,437,165,,1003,,,,,,,,160,161,,157,139,140,141,148,145", "147,,,142,143,,,,162,163,149,150,,,,,,269,,,,,,,,154,153,,138,159,156", "155,164,151,152,146,144,136,158,137,999,444,165,,998,,,,,,,,160,161", ",157,139,140,141,148,145,147,,,142,143,,,,162,163,149,150,,,,,,269,", ",,,,,,154,153,,138,159,156,155,164,151,152,146,144,136,158,137,648,437", "165,,649,,,,,,,,160,161,,157,139,140,141,148,145,147,,,142,143,,,,162", "163,149,150,,,,,,269,,,,,,,,154,153,,138,159,156,155,164,151,152,146", "144,136,158,137,651,444,165,,652,,,,,,,,160,161,,157,139,140,141,148", "145,147,,,142,143,,,,162,163,149,150,,,,,,269,,,,,,,,154,153,,138,159", "156,155,164,151,152,146,144,136,158,137,710,437,165,,711,,,,,,,,160", "161,,157,139,140,141,148,145,147,,,142,143,,,,162,163,149,150,,,,,,269", ",,,,,,,154,153,,138,159,156,155,164,151,152,146,144,136,158,137,621", "444,165,,622,,,,,,,,160,161,,157,139,140,141,148,145,147,,,142,143,", ",,162,163,149,150,,,,,,269,,,,,,,,154,153,,138,159,156,155,164,151,152", "146,144,136,158,137,,680,165,677,676,675,685,678,,680,,677,676,675,685", "678,688,,,,,,,,688,,680,,677,676,675,685,678,,,,,,683,,,688,,,,,683", "693,692,696,695,,,,689,693,692,696,695,,,,689,683,,680,,677,676,675", "685,678,693,692,696,695,,,,689,688,,680,,677,676,675,685,678,,680,,677", "676,675,685,678,688,,,,,683,,,688,,,,,,693,692,696,695,,,,689,683,,", ",,,,,683,693,692,696,695,,,,689,693,692,696,695,,,680,689,677,676,675", "685,678,,680,,677,676,675,685,678,688,,,,,,,,688,,680,,677,676,675,685", "678,,,,,,683,,,688,,,,,683,,,696,695,,,,689,693,692,696,695,,,,689,683", ",680,,677,676,675,685,678,,,696,695,,,,689,688,,680,,677,676,675,685", "678,680,,677,676,675,685,678,,688,,,,,683,,688,,680,,677,676,675,685", "678,696,695,,,,689,683,,688,,,,,683,,,,696,695,,,,689,,696,695,,,,689", "683,,680,,677,676,675,685,678,693,692,696,695,,,,689,688,,680,,677,676", "675,685,678,680,,677,676,675,685,678,,688,,,,,683,666,688,,,,,,,693", "692,696,695,,,,689,683,,,,,,,683,,693,692,696,695,,,,689,,696,695,,", ",689"];
      racc_action_table = (arr = $$$('::', 'Array').$new(24631, nil));
      idx = 0;
      $send(clist, 'each', [], ($Ruby25$3 = function(str){var self = $Ruby25$3.$$s == null ? this : $Ruby25$3.$$s, $$4;

      
        
        if (str == null) {
          str = nil;
        };
        return $send(str.$split(",", -1), 'each', [], ($$4 = function(i){var self = $$4.$$s == null ? this : $$4.$$s, $writer = nil;

        
          
          if (i == null) {
            i = nil;
          };
          if ($truthy(i['$empty?']())) {
          } else {
            
            $writer = [idx, i.$to_i()];
            $send(arr, '[]=', Opal.to_a($writer));
            $writer[$rb_minus($writer["length"], 1)];
          };
          return (idx = $rb_plus(idx, 1));}, $$4.$$s = self, $$4.$$arity = 1, $$4));}, $Ruby25$3.$$s = self, $Ruby25$3.$$arity = 1, $Ruby25$3));
      clist = ["621,744,891,572,572,558,711,621,621,621,19,345,621,621,621,770,621,62", "708,795,461,643,344,390,632,621,621,621,621,352,362,643,1014,391,362", "356,621,621,1022,621,621,621,621,621,1002,923,1003,973,926,1017,770", "19,461,1018,449,449,461,461,744,632,658,658,1019,825,353,710,621,621", "621,621,621,621,621,621,621,621,621,621,621,621,834,1005,621,621,621", "834,621,621,865,390,621,922,712,621,621,1020,621,572,621,391,621,1,621", "621,62,621,621,621,621,621,746,621,621,621,558,711,549,746,746,746,891", "1004,1023,746,746,891,746,621,795,345,621,621,621,621,345,621,708,621", "352,708,344,708,621,621,356,344,746,746,449,746,746,746,746,746,658", "628,1022,712,1005,713,648,1022,1002,923,1003,973,926,1002,923,1003,973", "926,825,353,710,1024,746,746,746,746,746,746,746,746,746,746,746,746", "746,746,314,418,746,746,746,381,746,431,1004,1005,746,712,381,746,1005", "1031,865,784,746,922,746,865,746,746,922,746,746,746,746,746,549,746", "440,746,713,549,648,229,838,440,440,440,41,41,432,440,440,746,440,1004", "746,746,628,746,1004,746,226,440,418,568,568,349,746,746,314,361,349", "26,440,440,381,440,440,440,440,440,648,966,713,648,894,829,894,784,966", "501,829,314,429,648,651,319,319,966,229,838,343,343,440,440,440,440", "440,440,440,440,440,440,440,440,440,440,419,226,440,440,440,361,440", "227,41,41,440,784,361,440,784,715,583,361,440,26,440,361,440,440,784", "440,440,440,440,440,966,440,440,440,649,984,984,501,501,501,361,568", "26,651,651,441,568,440,385,415,440,440,747,440,501,440,412,319,319,747", "747,747,440,440,227,747,747,715,747,943,361,943,943,943,715,943,767", "747,451,715,583,583,585,715,651,698,698,651,747,747,583,747,747,747", "747,747,294,651,3,410,649,294,715,3,812,407,812,812,812,24,812,401,385", "385,385,745,24,463,747,747,747,747,747,747,747,747,747,747,747,747,747", "747,715,767,747,747,747,464,747,465,649,466,747,649,392,747,585,585", "388,323,747,943,747,649,747,747,585,747,747,747,747,747,439,747,747", "747,619,488,604,439,439,439,745,492,24,439,439,339,439,747,339,962,747", "747,962,747,812,747,336,335,360,336,335,620,747,747,323,508,439,439", "17,439,439,439,439,439,323,509,392,392,392,364,388,388,388,604,664,379", "364,664,512,455,514,619,379,604,519,364,439,439,439,439,439,439,439", "439,439,439,439,439,439,439,360,522,439,439,439,17,439,360,620,531,439", "389,360,439,386,17,360,387,439,532,439,533,439,439,534,439,439,439,439", "439,97,439,546,439,364,360,455,97,97,97,379,550,97,97,97,561,97,439", "44,44,439,439,561,439,97,439,97,97,97,14,14,561,439,439,551,360,97,97", "552,97,97,97,97,97,553,389,389,389,386,386,386,387,387,387,44,44,126", "378,377,800,800,126,126,366,378,377,97,97,97,97,97,97,97,97,97,97,97", "97,97,97,561,354,97,97,97,225,97,97,354,357,97,355,225,97,97,570,97", "354,97,580,97,225,97,97,588,97,97,97,97,97,376,97,100,97,590,351,596", "376,350,100,100,100,378,377,100,100,100,97,100,340,97,97,97,97,605,97", "100,97,100,100,100,338,97,97,79,337,354,610,100,100,225,100,100,100", "100,100,79,47,333,615,327,325,375,374,47,373,79,623,325,375,374,624", "373,47,625,376,627,325,100,100,100,100,100,100,100,100,100,100,100,100", "100,100,631,518,100,100,100,918,100,100,518,633,100,635,918,100,100", "637,100,518,100,324,100,918,100,100,320,100,100,100,100,100,47,100,622", "100,325,375,374,645,373,622,622,622,647,318,622,622,622,100,622,650", "100,100,100,100,653,100,654,100,622,622,622,313,100,100,657,312,518", "659,622,622,918,622,622,622,622,622,434,924,668,16,669,310,372,371,924", "671,16,672,310,372,371,673,682,924,309,16,690,310,622,622,622,622,622", "622,622,622,622,622,622,622,622,622,694,697,622,622,622,700,622,622", "417,706,622,434,433,622,622,417,622,709,622,303,622,434,622,622,417", "622,622,622,622,622,924,622,16,622,310,372,371,302,944,301,944,944,944", "299,944,39,718,622,298,38,622,622,622,622,722,622,286,622,444,433,283", "741,622,622,282,444,444,444,797,433,444,444,444,417,444,944,743,268", "797,752,235,476,231,444,444,444,444,997,230,997,997,997,39,997,444,444", "38,444,444,444,444,444,39,652,228,773,38,308,783,787,652,797,797,476", "308,652,797,476,476,652,476,476,790,308,444,444,444,444,444,444,444", "444,444,444,444,444,444,444,791,307,444,444,444,796,811,444,307,813", "444,818,207,444,444,821,444,307,444,111,444,826,444,444,828,444,444", "444,444,444,652,444,444,444,308,832,833,836,306,837,809,46,809,809,809", "306,809,444,846,847,444,444,444,444,306,444,445,444,849,850,851,905", "444,445,445,445,307,853,445,445,445,905,445,854,855,477,856,809,40,871", "872,445,445,445,445,916,809,916,916,916,876,916,445,445,877,445,445", "445,445,445,879,716,880,306,905,905,882,477,716,905,885,477,477,716", "477,477,887,716,37,898,902,915,445,445,445,445,445,445,445,445,445,445", "445,445,445,445,919,22,445,445,445,925,945,445,15,952,445,955,462,445", "445,956,445,957,445,958,445,960,445,445,969,445,445,445,445,445,716", "445,445,445,683,13,683,683,683,886,683,886,886,886,462,886,12,445,462", "462,445,445,445,445,974,445,57,445,975,976,977,978,445,57,57,57,979", "980,57,57,57,683,57,528,982,985,886,998,999,1001,683,10,57,57,57,886", "7,,,528,528,,57,57,,57,57,57,57,57,888,,888,888,888,528,888,528,,528", "528,,528,528,,,528,,528,,,,57,57,57,57,57,57,57,57,57,57,57,57,57,57", ",888,57,57,57,,,57,,,57,,,57,57,,57,,57,,57,,57,57,,57,57,57,57,57,", "57,,57,576,576,,,576,576,576,,1013,,1013,1013,1013,57,1013,,57,57,57", "57,,57,483,57,,,,,57,483,483,483,,,483,483,483,776,483,776,776,776,776", "776,,1013,,483,483,,,,776,,,481,,,483,483,,483,483,483,483,483,332,332", "332,332,332,481,481,,776,6,6,6,6,6,,,,776,776,776,776,481,,481,776,481", "481,,481,481,,,481,483,481,27,,,,,483,,27,27,27,483,483,27,27,27,776", "27,981,,981,981,981,,981,,27,27,27,297,297,297,297,297,483,483,,27,27", ",27,27,27,27,27,,,,,483,,,483,,,981,983,483,983,983,983,,983,,483,,", "27,27,27,27,27,27,27,27,27,27,27,27,27,27,,,27,27,27,,,27,,27,27,,983", "27,27,,27,,27,,27,,27,27,,27,27,27,27,27,28,27,27,27,,,,28,28,28,,,28", "28,28,,28,27,468,,27,27,,27,,27,28,28,,,,,27,,468,468,28,28,,28,28,28", "28,28,506,506,506,506,506,,468,,468,,468,468,,468,468,,,,,,,,28,28,28", "28,28,28,28,28,28,28,28,28,28,28,,,28,28,28,,,28,,28,28,,,28,28,,28", ",28,,28,,28,28,,28,28,28,28,28,,28,435,28,,,,,,435,435,435,,,435,435", "435,28,435,469,28,28,,28,,28,,435,435,435,,,28,,,469,469,,435,435,,435", "435,435,435,435,,,,,,469,,,,469,469,,469,469,,,,,,,,,435,435,435,435", "435,435,435,435,435,435,435,435,435,435,,,435,435,435,,,435,,435,435", ",,435,435,,435,,435,,435,,435,435,,435,435,435,435,435,,435,435,435", ",,,,,,,,,,,,,435,,,435,435,,435,,435,548,548,548,548,548,548,435,,,548", "548,,,,548,,548,548,548,548,548,548,548,,,,,,548,548,548,548,548,548", "548,,,548,,,,,422,548,548,548,548,548,548,548,548,548,548,548,548,,548", "548,548,,548,548,548,548,548,422,422,422,422,422,422,422,422,422,422", "422,,422,422,,,422,422,,548,,,548,,,548,548,,,548,,548,422,,422,548", "422,422,,422,422,422,422,422,548,422,,,,548,548,548,548,,548,548,548", "548,,,,,548,548,,422,,422,,,548,,548,548,548,0,0,0,0,0,0,,,,0,0,,,,0", ",0,0,0,0,0,0,0,,,,,,0,0,0,0,0,0,0,,,0,,,,,428,0,0,0,0,0,0,0,0,0,0,0", "0,,0,0,0,,0,0,0,0,0,428,428,428,428,428,428,428,428,428,428,428,,428", "428,,,428,428,,0,,,0,,,0,0,,,0,,0,428,,428,0,428,428,,428,428,428,428", "428,0,428,,,,0,0,0,0,,0,0,0,0,,,,,0,0,,428,,,,,0,,0,0,0,305,305,305", "305,305,305,,,,305,305,,,,305,,305,305,305,305,305,305,305,,,,,,305", "305,305,305,305,305,305,,,305,,,,,,305,305,305,305,305,305,305,305,305", "305,305,305,,305,305,305,,305,305,305,305,305,280,280,280,280,280,280", "280,280,280,280,280,,280,280,,,280,280,,305,,,305,,,305,305,,,305,,305", "280,,280,305,280,280,,280,280,280,280,280,305,280,,,,305,305,305,305", ",305,305,305,305,,,,,305,305,,280,,,,,305,,305,305,305,569,569,569,569", "569,569,,,,569,569,,,,569,,569,569,569,569,569,569,569,,,,,,569,569", "569,569,569,569,569,,,569,,,,,,569,569,569,569,569,569,569,569,569,569", "569,569,,569,569,569,,569,569,569,569,569,749,749,749,749,749,749,749", "749,749,749,749,,749,749,,,749,749,,569,,,569,,,569,569,,,569,,569,749", ",749,569,749,749,,749,749,749,749,749,569,749,,,,569,569,569,569,,569", "569,569,569,,,,,569,569,,749,,,,,569,,569,569,569,348,348,348,348,348", "348,,,,348,348,,,,348,,348,348,348,348,348,348,348,,,,,,348,348,348", "348,348,348,348,,,348,,,,,,348,348,348,348,348,348,348,348,348,348,348", "348,,348,348,348,,348,348,348,348,348,480,480,480,480,480,480,480,480", "480,480,480,,480,480,,,480,480,,348,,,348,,,348,348,,,348,,348,480,", "480,348,480,480,,480,480,480,480,480,348,480,,,,348,348,348,348,,348", "348,348,348,,,,,348,348,480,480,,,,,348,,348,348,348,921,921,921,921", "921,921,,,,921,921,,,,921,,921,921,921,921,921,921,921,,,,,,921,921", "921,921,921,921,921,,,921,,,,,,921,921,921,921,921,921,921,921,921,921", "921,921,,921,921,921,,921,921,921,921,921,843,843,843,843,843,843,843", "843,843,843,843,,843,843,,,843,843,,921,,,921,,,921,921,,,921,,921,843", ",843,921,843,843,,843,843,843,843,843,921,843,,,,921,921,921,921,,921", "921,921,921,,,,,921,921,,843,,,,,921,,921,921,921,789,789,789,789,789", "789,,,,789,789,,,,789,,789,789,789,789,789,789,789,,,,,,789,789,789", "789,789,789,789,,,789,,,,,,789,789,789,789,789,789,789,789,789,789,789", "789,,789,789,789,,789,789,789,789,789,21,21,21,21,21,21,21,21,21,21", "21,,21,21,,,21,21,,789,,,789,,,789,789,,,789,,789,21,,21,789,21,21,", "21,21,21,21,21,789,21,,,,789,789,789,789,,789,789,789,789,,,,,789,789", ",21,,,,,789,,789,789,789,733,733,733,733,733,733,,,,733,733,,,,733,", "733,733,733,733,733,733,733,,,,,,733,733,733,733,733,733,733,,,733,", ",,,,733,733,733,733,733,733,733,733,733,733,733,733,,733,733,733,,733", "733,733,733,733,529,529,529,529,529,529,529,529,529,529,529,,529,529", ",,529,529,,733,,,733,,,733,733,,,733,,733,529,,529,733,529,529,,529", "529,529,529,529,733,529,,,,733,733,733,733,,733,733,733,733,,,,,733", "733,,529,,,,,733,,733,733,733,714,714,714,714,714,714,,,,714,714,,,", "714,,714,714,714,714,714,714,714,,,,,,714,714,714,714,714,714,714,,", "714,,,,,,714,714,714,714,714,714,714,714,714,714,714,714,,714,714,714", ",714,714,714,714,714,459,459,459,459,459,459,459,459,459,459,459,,459", "459,,,459,459,,714,,,714,,,714,714,,,714,,714,459,,459,714,459,459,", "459,459,459,459,459,714,459,,,,714,714,714,714,,714,714,714,714,,,,", "714,714,,,,,,,714,,714,714,714,300,300,300,300,300,300,,,,300,300,,", ",300,,300,300,300,300,300,300,300,,,,,,300,300,300,300,300,300,300,", ",300,,,,,,300,300,300,300,300,300,300,300,300,300,300,300,,300,300,300", ",300,300,300,300,300,471,471,471,471,471,471,471,,,471,471,,,,,,471", "471,,300,,,300,,,300,300,,,300,,300,471,,471,300,471,471,,471,471,471", "471,471,300,471,,,,300,300,300,300,,300,300,300,300,,,,,300,300,,,,", ",,300,,300,300,300,778,778,778,778,778,778,,,,778,778,,,,778,,778,778", "778,778,778,778,778,,,,,,778,778,778,778,778,778,778,,,778,,,,,,778", "778,778,778,778,778,778,778,778,778,778,778,,778,778,778,,778,778,778", "778,778,473,473,473,473,473,473,473,,,473,473,,,,,,473,473,,778,,,778", ",,778,778,,,778,,778,473,,473,778,473,473,,473,473,473,473,473,778,473", ",,,778,778,778,778,,778,778,778,778,,,,,778,778,,,,,,,778,,778,778,778", "830,830,830,830,830,830,,,,830,830,,,,830,,830,830,830,830,830,830,830", ",,,,,830,830,830,830,830,830,830,,,830,,,,,,830,830,830,830,830,830", "830,830,830,830,830,830,,830,830,830,,830,830,830,830,830,475,475,475", "475,475,475,475,,,475,475,,,,,,475,475,,830,,,830,,,830,830,,,830,,830", "475,,475,830,475,475,,475,475,475,475,475,830,475,,,,830,830,830,830", ",830,830,830,830,,,,,830,830,,,,,,,830,,830,830,830,723,723,723,723", "723,723,,,,723,723,,,,723,,723,723,723,723,723,723,723,,,,,,723,723", "723,723,723,723,723,,,723,,,,,,723,723,723,723,723,723,723,723,723,723", "723,723,,723,723,723,,723,723,723,723,723,470,470,470,470,470,470,470", ",,470,470,,,,,,470,470,,723,,,723,,,723,723,,,723,,723,470,,470,723", "470,470,,470,470,470,470,470,723,470,,,,723,723,723,723,,723,723,723", "723,,,,,723,723,,,,,,,723,,723,723,723,719,719,719,719,719,719,,,,719", "719,,,,719,,719,719,719,719,719,719,719,,,,,,719,719,719,719,719,719", "719,,,719,,,,,,719,719,719,719,719,719,719,719,719,719,719,719,,719", "719,719,,719,719,719,719,719,479,479,479,479,479,479,479,479,,479,479", ",,,,,479,479,,719,,,719,,,719,719,,,719,,719,479,,479,719,479,479,,479", "479,479,479,479,719,479,,,,719,719,719,719,,719,719,719,719,,,,,719", "719,,,,,,,719,,719,719,719,234,234,234,234,234,234,,,,234,234,,,,234", ",234,234,234,234,234,234,234,,,,,,234,234,234,234,234,234,234,,,234", ",,,,,234,234,234,234,234,234,234,234,234,234,234,234,,234,234,234,,234", "234,234,234,234,478,478,478,478,478,478,478,,,478,478,,,,,,478,478,", "234,,,234,,,234,234,,,234,,234,478,,478,234,478,478,,478,478,478,478", "478,234,478,,,,234,234,234,234,,234,234,234,234,,,,,234,234,,,,,,,234", ",234,234,234,824,824,824,824,824,824,,,,824,824,,,,824,,824,824,824", "824,824,824,824,,,,,,824,824,824,824,824,824,824,,,824,,,,,,824,824", "824,824,824,824,824,824,824,824,824,824,,824,824,824,,824,824,824,824", "824,460,460,460,460,460,460,460,460,460,460,460,,460,460,,,460,460,", "824,,,824,,,824,824,,,824,,824,460,,460,824,460,460,,460,460,460,460", "460,824,460,,,,824,824,824,824,,824,824,824,824,,,,,824,824,,,,,,,824", ",824,824,824,33,33,33,33,33,33,,,,33,33,,,,33,,33,33,33,33,33,33,33", ",,,,,33,33,33,33,33,33,33,,,33,,,,,,33,33,33,33,33,33,33,33,33,33,33", "33,,33,33,33,,33,33,33,33,33,474,474,474,474,474,474,474,,,474,474,", ",,,,474,474,,33,,,33,,,33,33,,,33,,33,474,,474,33,474,474,,474,474,474", "474,474,33,474,,,,33,33,33,33,,33,33,33,33,,,,,33,33,,,,,,,33,,33,33", "33,545,545,545,545,545,545,,,,545,545,,,,545,,545,545,545,545,545,545", "545,,,,,,545,545,545,545,545,545,545,,,545,,,,,,545,545,545,545,545", "545,545,545,545,545,545,545,,545,545,545,,545,545,545,545,545,472,472", "472,472,472,472,472,,,472,472,,,,,,472,472,,545,,,545,,,545,545,,,545", ",545,472,,472,545,472,472,,472,472,472,472,472,545,472,,,,545,545,545", "545,,545,545,545,545,,,,,545,545,,,,,,,545,,545,545,545,347,347,347", "347,347,347,,,,347,347,,,,347,,347,347,347,347,347,347,347,,,,,,347", "347,347,347,347,347,347,,,347,,,,,,347,347,347,347,347,347,347,347,347", "347,347,347,,347,347,347,,347,347,347,347,347,467,,,,,,,,,,,,,,,,467", "467,,347,,,347,,,347,347,,,347,,347,467,,467,347,467,467,,467,467,,", ",347,,,,,347,347,347,347,,347,347,347,347,,,,,347,347,,,,,,,347,,347", "347,347,331,331,331,331,331,331,,,,331,331,,,,331,,331,331,331,331,331", "331,331,,,,,,331,331,331,331,331,331,331,,,331,,,,,,331,331,331,331", "331,331,331,331,331,331,331,331,,331,331,331,,331,331,331,331,331,,", ",,,,,,,,,,,,,,,,,331,,,331,,,331,331,,,331,,331,,,,331,,,,,,,,,331,", ",,,331,331,331,331,,331,331,331,331,,,,,331,331,,,,,,,331,,331,331,331", "124,124,124,124,124,124,,,,124,124,,,,124,,124,124,124,124,124,124,124", ",,,,,124,124,124,124,124,124,124,,,124,,,,,,124,124,124,124,124,124", "124,124,124,124,124,124,,124,124,124,,124,124,124,124,124,,,,,,,,,,", ",,,,,,,,,124,,,124,,,124,124,,,124,,124,,,,124,,,,,,,,,124,,,,,124,124", "124,124,,124,124,124,124,,,,,124,124,,,,,,,124,,124,124,124,862,862", "862,862,862,862,,,,862,862,,,,862,,862,862,862,862,862,862,862,,,,,", "862,862,862,862,862,862,862,,,862,,,,,,862,862,862,862,862,862,862,862", "862,862,862,862,,862,862,862,,862,862,862,862,862,,,,,,,,,,,,,,,,,,", ",862,,,862,,,862,862,,,862,,862,,,,862,,,,,,,,,862,,,,,862,862,862,862", ",862,862,862,862,,,,,862,862,,,,,,,862,,862,862,862,951,951,951,951", "951,951,,,,951,951,,,,951,,951,951,951,951,951,951,951,,,,,,951,951", "951,951,951,951,951,,,951,,,,,,951,951,951,951,951,951,951,951,951,951", "951,951,,951,951,951,,951,951,951,951,951,,,,,,,,,,,,,,,,,,,,951,,,951", ",,951,951,,,951,,951,,,,951,,,,,,,,,951,,,,,951,951,951,951,,951,951", "951,951,,,,,951,951,,,,,,,951,,951,951,951,209,209,209,209,209,209,", ",,209,209,,,,209,,209,209,209,209,209,209,209,,,,,,209,209,209,209,209", "209,209,,,209,,,,,,209,209,209,209,209,209,209,209,209,209,209,209,", "209,209,209,,209,209,209,209,209,,,,,,,,,,,,,,,,,,,,209,,,209,,,209", "209,,,209,,209,,,,209,,,,,,,,,209,,,,,209,209,209,209,,209,209,209,209", ",,,,209,209,,,,,,,209,,209,209,209,946,946,946,946,946,946,,,,946,946", ",,,946,,946,946,946,946,946,946,946,,,,,,946,946,946,946,946,946,946", ",,946,,,,,,946,946,946,946,946,946,946,946,946,946,946,946,,946,946", "946,,946,946,946,946,946,,,,,,,,,,,,,,,,,,,,946,,,946,,,946,946,,,946", ",946,,,,946,,,,,,,,,946,,,,,946,946,946,946,,946,946,946,946,,,,,946", "946,,,,,,,946,,946,946,946,929,929,929,929,929,929,,,,929,929,,,,929", ",929,929,929,929,929,929,929,,,,,,929,929,929,929,929,929,929,,,929", ",,,,,929,929,929,929,929,929,929,929,929,929,929,929,,929,929,929,,929", "929,929,929,929,,,,,,,,,,,,,,,,,,,,929,,,929,,,929,929,,,929,,929,,", ",929,,,,,,,,,929,,,,,929,929,929,929,,929,929,929,929,,,,,929,929,,", ",,,,929,,929,929,929,844,844,844,844,844,844,,,,844,844,,,,844,,844", "844,844,844,844,844,844,,,,,,844,844,844,844,844,844,844,,,844,,,,,", "844,844,844,844,844,844,844,844,844,844,844,844,,844,844,844,,844,844", "844,844,844,,,,,,,,,,,,,,,,,,,,844,,,844,,,844,844,,,844,,844,,,,844", ",,,,,,,,844,,,,,844,844,844,844,,844,844,844,844,,,,,844,844,,,,,,,844", ",844,844,844,928,928,928,928,928,928,,,,928,928,,,,928,,928,928,928", "928,928,928,928,,,,,,928,928,928,928,928,928,928,,,928,,,,,,928,928", "928,928,928,928,928,928,928,928,928,928,,928,928,928,,928,928,928,928", "928,,,,,,,,,,,,,,,,,,,,928,,,928,,,928,928,,,928,,928,,,,928,,,,,,,", ",928,,,,,928,928,928,928,,928,928,928,928,,,,,928,928,,,,222,222,222", "928,222,928,928,928,222,222,,,,222,,222,222,222,222,222,222,222,,,,", ",222,222,222,222,222,222,222,,,222,,,,,,,222,,,222,222,222,222,222,222", "222,222,,222,222,222,,222,222,222,222,222,,,,,,,,,,,,,,,,,,,,222,,,222", ",,222,222,,,222,,,,,,222,,,,,,,,,222,,,,,222,222,222,222,,222,222,222", "222,,,,,222,222,222,,,768,768,768,222,768,222,222,222,768,768,,,,768", ",768,768,768,768,768,768,768,,,,,,768,768,768,768,768,768,768,,,768", ",,,,,,768,,,768,768,768,768,768,768,768,768,,768,768,768,,768,768,768", "768,768,,,,,,,,,,,,,,,,,,,,768,,,768,,,768,768,,,768,,,,,,768,,,,,,", ",,768,,,,,768,768,768,768,,768,768,768,768,,,,,768,768,,,,766,766,766", "768,766,768,768,768,766,766,,,,766,,766,766,766,766,766,766,766,,,,", ",766,766,766,766,766,766,766,,,766,,,,,,,766,,,766,766,766,766,766,766", "766,766,,766,766,766,,766,766,766,766,766,,,,,,,,,,,,,,,,,,,,766,,,766", ",,766,766,,,766,,,,,,766,,,,,,,,,766,,,,,766,766,766,766,,766,766,766", "766,,,,,766,766,,,,765,765,765,766,765,766,766,766,765,765,,,,765,,765", "765,765,765,765,765,765,,,,,,765,765,765,765,765,765,765,,,765,,,,,", ",765,,,765,765,765,765,765,765,765,765,,765,765,765,,765,765,765,765", "765,,,,,,,,,,,,,,,,,,,,765,,,765,,,765,765,,,765,,,,,,765,,,,,,,,,765", ",,,,765,765,765,765,,765,765,765,765,,,,,765,765,,,,764,764,764,765", "764,765,765,765,764,764,,,,764,,764,764,764,764,764,764,764,,,,,,764", "764,764,764,764,764,764,,,764,,,,,,,764,,,764,764,764,764,764,764,764", "764,,764,764,764,,764,764,764,764,764,,,,,,,,,,,,,,,,,,,,764,,,764,", ",764,764,,,764,,,,,,764,,,,,,,,,764,,,,,764,764,764,764,,764,764,764", "764,,,,,764,764,,,,233,233,233,764,233,764,764,764,233,233,,,,233,,233", "233,233,233,233,233,233,,,,,,233,233,233,233,233,233,233,,,233,,,,,", ",233,,,233,233,233,233,233,233,233,233,,233,233,233,,233,233,233,233", "233,,,,,,,,,,,,,,,,,,,,233,,,233,,,233,233,,,233,,,,,,233,,,,,,,,,233", ",,,,233,233,233,233,,233,233,233,233,,,,,233,233,,,,763,763,763,233", "763,233,233,233,763,763,,,,763,,763,763,763,763,763,763,763,,,,,,763", "763,763,763,763,763,763,,,763,,,,,,,763,,,763,763,763,763,763,763,763", "763,,763,763,763,,763,763,763,763,763,,,,,,,,,,,,,,,,,,,,763,,,763,", ",763,763,,,763,,,,,,763,,,,,,,,,763,,,,,763,763,763,763,,763,763,763", "763,,,,,763,763,,,,236,236,236,763,236,763,763,763,236,236,,,,236,,236", "236,236,236,236,236,236,,,,,,236,236,236,236,236,236,236,,,236,,,,,", ",236,,,236,236,236,236,236,236,236,236,,236,236,236,,236,236,236,236", "236,,,,,,,,,,,,,,,,,,,,236,,,236,,,236,236,,,236,,,,,,236,,,,,,,,,236", ",,,,236,236,236,236,,236,236,236,236,,,,,236,236,,,,237,237,237,236", "237,236,236,236,237,237,,,,237,,237,237,237,237,237,237,237,,,,,,237", "237,237,237,237,237,237,,,237,,,,,,,237,,,237,237,237,237,237,237,237", "237,,237,237,237,,237,237,237,237,237,,,,,,,,,,,,,,,,,,,,237,,,237,", ",237,237,,,237,,,,,,237,,,,,,,,,237,,,,,237,237,237,237,,237,237,237", "237,,,,,237,237,,,,238,238,238,237,238,237,237,237,238,238,,,,238,,238", "238,238,238,238,238,238,,,,,,238,238,238,238,238,238,238,,,238,,,,,", ",238,,,238,238,238,238,238,238,238,238,,238,238,238,,238,238,238,238", "238,,,,,,,,,,,,,,,,,,,,238,,,238,,,238,238,,,238,,,,,,238,,,,,,,,,238", ",,,,238,238,238,238,,238,238,238,238,,,,,238,238,,,,239,239,239,238", "239,238,238,238,239,239,,,,239,,239,239,239,239,239,239,239,,,,,,239", "239,239,239,239,239,239,,,239,,,,,,,239,,,239,239,239,239,239,239,239", "239,,239,239,239,,239,239,239,239,239,,,,,,,,,,,,,,,,,,,,239,,,239,", ",239,239,,,239,,,,,,239,,,,,,,,,239,,,,,239,239,239,239,,239,239,239", "239,,,,,239,239,,,,240,240,240,239,240,239,239,239,240,240,,,,240,,240", "240,240,240,240,240,240,,,,,,240,240,240,240,240,240,240,,,240,,,,,", ",240,,,240,240,240,240,240,240,240,240,,240,240,240,,240,240,240,240", "240,,,,,,,,,,,,,,,,,,,,240,,,240,,,240,240,,,240,,,,,,240,,,,,,,,,240", ",,,,240,240,240,240,,240,240,240,240,,,,,240,240,,,,241,241,241,240", "241,240,240,240,241,241,,,,241,,241,241,241,241,241,241,241,,,,,,241", "241,241,241,241,241,241,,,241,,,,,,,241,,,241,241,241,241,241,241,241", "241,,241,241,241,,241,241,241,241,241,,,,,,,,,,,,,,,,,,,,241,,,241,", ",241,241,,,241,,,,,,241,,,,,,,,,241,,,,,241,241,241,241,,241,241,241", "241,,,,,241,241,,,,242,242,242,241,242,241,241,241,242,242,,,,242,,242", "242,242,242,242,242,242,,,,,,242,242,242,242,242,242,242,,,242,,,,,", ",242,,,242,242,242,242,242,242,242,242,,242,242,242,,242,242,242,242", "242,,,,,,,,,,,,,,,,,,,,242,,,242,,,242,242,,,242,,,,,,242,,,,,,,,,242", ",,,,242,242,242,242,,242,242,242,242,,,,,242,242,,,,243,243,243,242", "243,242,242,242,243,243,,,,243,,243,243,243,243,243,243,243,,,,,,243", "243,243,243,243,243,243,,,243,,,,,,,243,,,243,243,243,243,243,243,243", "243,,243,243,243,,243,243,243,243,243,,,,,,,,,,,,,,,,,,,,243,,,243,", ",243,243,,,243,,,,,,243,,,,,,,,,243,,,,,243,243,243,243,,243,243,243", "243,,,,,243,243,,,,244,244,244,243,244,243,243,243,244,244,,,,244,,244", "244,244,244,244,244,244,,,,,,244,244,244,244,244,244,244,,,244,,,,,", ",244,,,244,244,244,244,244,244,244,244,,244,244,244,,244,244,244,244", "244,,,,,,,,,,,,,,,,,,,,244,,,244,,,244,244,,,244,,,,,,244,,,,,,,,,244", ",,,,244,244,244,244,,244,244,244,244,,,,,244,244,,,,245,245,245,244", "245,244,244,244,245,245,,,,245,,245,245,245,245,245,245,245,,,,,,245", "245,245,245,245,245,245,,,245,,,,,,,245,,,245,245,245,245,245,245,245", "245,,245,245,245,,245,245,245,245,245,,,,,,,,,,,,,,,,,,,,245,,,245,", ",245,245,,,245,,,,,,245,,,,,,,,,245,,,,,245,245,245,245,,245,245,245", "245,,,,,245,245,,,,246,246,246,245,246,245,245,245,246,246,,,,246,,246", "246,246,246,246,246,246,,,,,,246,246,246,246,246,246,246,,,246,,,,,", ",246,,,246,246,246,246,246,246,246,246,,246,246,246,,246,246,246,246", "246,,,,,,,,,,,,,,,,,,,,246,,,246,,,246,246,,,246,,,,,,246,,,,,,,,,246", ",,,,246,246,246,246,,246,246,246,246,,,,,246,246,,,,247,247,247,246", "247,246,246,246,247,247,,,,247,,247,247,247,247,247,247,247,,,,,,247", "247,247,247,247,247,247,,,247,,,,,,,247,,,247,247,247,247,247,247,247", "247,,247,247,247,,247,247,247,247,247,,,,,,,,,,,,,,,,,,,,247,,,247,", ",247,247,,,247,,,,,,247,,,,,,,,,247,,,,,247,247,247,247,,247,247,247", "247,,,,,247,247,,,,248,248,248,247,248,247,247,247,248,248,,,,248,,248", "248,248,248,248,248,248,,,,,,248,248,248,248,248,248,248,,,248,,,,,", ",248,,,248,248,248,248,248,248,248,248,,248,248,248,,248,248,248,248", "248,,,,,,,,,,,,,,,,,,,,248,,,248,,,248,248,,,248,,,,,,248,,,,,,,,,248", ",,,,248,248,248,248,,248,248,248,248,,,,,248,248,,,,249,249,249,248", "249,248,248,248,249,249,,,,249,,249,249,249,249,249,249,249,,,,,,249", "249,249,249,249,249,249,,,249,,,,,,,249,,,249,249,249,249,249,249,249", "249,,249,249,249,,249,249,249,249,249,,,,,,,,,,,,,,,,,,,,249,,,249,", ",249,249,,,249,,,,,,249,,,,,,,,,249,,,,,249,249,249,249,,249,249,249", "249,,,,,249,249,,,,250,250,250,249,250,249,249,249,250,250,,,,250,,250", "250,250,250,250,250,250,,,,,,250,250,250,250,250,250,250,,,250,,,,,", ",250,,,250,250,250,250,250,250,250,250,,250,250,250,,250,250,250,250", "250,,,,,,,,,,,,,,,,,,,,250,,,250,,,250,250,,,250,,,,,,250,,,,,,,,,250", ",,,,250,250,250,250,,250,250,250,250,,,,,250,250,,,,251,251,251,250", "251,250,250,250,251,251,,,,251,,251,251,251,251,251,251,251,,,,,,251", "251,251,251,251,251,251,,,251,,,,,,,251,,,251,251,251,251,251,251,251", "251,,251,251,251,,251,251,251,251,251,,,,,,,,,,,,,,,,,,,,251,,,251,", ",251,251,,,251,,,,,,251,,,,,,,,,251,,,,,251,251,251,251,,251,251,251", "251,,,,,251,251,,,,252,252,252,251,252,251,251,251,252,252,,,,252,,252", "252,252,252,252,252,252,,,,,,252,252,252,252,252,252,252,,,252,,,,,", ",252,,,252,252,252,252,252,252,252,252,,252,252,252,,252,252,252,252", "252,,,,,,,,,,,,,,,,,,,,252,,,252,,,252,252,,,252,,,,,,252,,,,,,,,,252", ",,,,252,252,252,252,,252,252,252,252,,,,,252,252,,,,253,253,253,252", "253,252,252,252,253,253,,,,253,,253,253,253,253,253,253,253,,,,,,253", "253,253,253,253,253,253,,,253,,,,,,,253,,,253,253,253,253,253,253,253", "253,,253,253,253,,253,253,253,253,253,,,,,,,,,,,,,,,,,,,,253,,,253,", ",253,253,,,253,,,,,,253,,,,,,,,,253,,,,,253,253,253,253,,253,253,253", "253,,,,,253,253,,,,254,254,254,253,254,253,253,253,254,254,,,,254,,254", "254,254,254,254,254,254,,,,,,254,254,254,254,254,254,254,,,254,,,,,", ",254,,,254,254,254,254,254,254,254,254,,254,254,254,,254,254,254,254", "254,,,,,,,,,,,,,,,,,,,,254,,,254,,,254,254,,,254,,,,,,254,,,,,,,,,254", ",,,,254,254,254,254,,254,254,254,254,,,,,254,254,,,,255,255,255,254", "255,254,254,254,255,255,,,,255,,255,255,255,255,255,255,255,,,,,,255", "255,255,255,255,255,255,,,255,,,,,,,255,,,255,255,255,255,255,255,255", "255,,255,255,255,,255,255,255,255,255,,,,,,,,,,,,,,,,,,,,255,,,255,", ",255,255,,,255,,,,,,255,,,,,,,,,255,,,,,255,255,255,255,,255,255,255", "255,,,,,255,255,,,,256,256,256,255,256,255,255,255,256,256,,,,256,,256", "256,256,256,256,256,256,,,,,,256,256,256,256,256,256,256,,,256,,,,,", ",256,,,256,256,256,256,256,256,256,256,,256,256,256,,256,256,256,256", "256,,,,,,,,,,,,,,,,,,,,256,,,256,,,256,256,,,256,,,,,,256,,,,,,,,,256", ",,,,256,256,256,256,,256,256,256,256,,,,,256,256,,,,257,257,257,256", "257,256,256,256,257,257,,,,257,,257,257,257,257,257,257,257,,,,,,257", "257,257,257,257,257,257,,,257,,,,,,,257,,,257,257,257,257,257,257,257", "257,,257,257,257,,257,257,257,257,257,,,,,,,,,,,,,,,,,,,,257,,,257,", ",257,257,,,257,,,,,,257,,,,,,,,,257,,,,,257,257,257,257,,257,257,257", "257,,,,,257,257,,,,262,262,262,257,262,257,257,257,262,262,,,,262,,262", "262,262,262,262,262,262,,,,,,262,262,262,262,262,262,262,,,262,,,,,", ",262,,,262,262,262,262,262,262,262,262,,262,262,262,,262,262,262,262", "262,,,,,,,,,,,,,,,,,,,,262,,,262,,,262,262,,,262,,,,,,262,,,,,,,,,262", ",,,,262,262,262,262,,262,262,262,262,,,,,262,262,,,,750,750,750,262", "750,262,262,262,750,750,,,,750,,750,750,750,750,750,750,750,,,,,,750", "750,750,750,750,750,750,,,750,,,,,,,750,,,750,750,750,750,750,750,750", "750,,750,750,750,,750,750,750,750,750,,,,,,,,,,,,,,,,,,,,750,,,750,", ",750,750,,,750,,,,,,750,,,,,,,,,750,,,,,750,750,750,750,,750,750,750", "750,,,,,750,750,,,,269,269,269,750,269,750,750,750,269,269,,,,269,,269", "269,269,269,269,269,269,,,,,,269,269,269,269,269,269,269,,,269,,,,,", ",269,,,269,269,269,269,269,269,269,269,269,269,269,269,,269,269,269", "269,269,,,,,,,,,,,,,,,,,,,,269,,,269,,,269,269,,,269,,269,,269,,269", ",,269,,,,,,269,,,,,269,269,269,269,,269,269,269,269,,,,,269,269,,,,270", "270,270,269,270,269,269,269,270,270,,,,270,,270,270,270,270,270,270", "270,,,,,,270,270,270,270,270,270,270,,,270,,,,,,,270,,,270,270,270,270", "270,270,270,270,270,270,270,270,,270,270,270,270,270,,,,,,,,,,,,,,,", ",,,,270,,,270,,,270,270,,,270,,270,,270,,270,,,270,,,,,,270,,,,,270", "270,270,270,,270,270,270,270,,,,,270,270,,,,278,278,278,270,278,270", "270,270,278,278,,,,278,,278,278,278,278,278,278,278,,,,,,278,278,278", "278,278,278,278,,,278,,,,,,,278,,,278,278,278,278,278,278,278,278,278", "278,278,278,,278,278,278,278,278,,,,,,,,,,,,,,,,,,,,278,,,278,,,278", "278,,,278,,278,,278,,278,,,278,,,,,,278,,,,,278,278,278,278,,278,278", "278,278,,,,,278,278,278,,,742,742,742,278,742,278,278,278,742,742,,", ",742,,742,742,742,742,742,742,742,,,,,,742,742,742,742,742,742,742,", ",742,,,,,,,742,,,742,742,742,742,742,742,742,742,,742,742,742,,742,742", "742,742,742,,,,,,,,,,,,,,,,,,,,742,,,742,,,742,742,,,742,,,,,,742,,", ",,,,,,742,,,,,742,742,742,742,,742,742,742,742,,,,,742,742,,,,285,285", "285,742,285,742,742,742,285,285,,,,285,,285,285,285,285,285,285,285", ",,,,,285,285,285,285,285,285,285,,,285,,,,,,,285,,,285,285,285,285,285", "285,285,285,,285,285,285,,285,285,285,285,285,,,,,,,,,,,,,,,,,,,,285", ",,285,,,285,285,,,285,,,,,,285,,,,,,,,,285,,,,,285,285,285,285,,285", "285,285,285,,,,,285,285,,,,287,287,287,285,287,285,285,285,287,287,", ",,287,,287,287,287,287,287,287,287,,,,,,287,287,287,287,287,287,287", ",,287,,,,,,,287,,,287,287,287,287,287,287,287,287,,287,287,287,,287", "287,287,287,287,,,,,,,,,,,,,,,,,,,,287,,,287,,,287,287,,,287,,,,,,287", ",,,,,,,,287,,,,,287,287,287,287,,287,287,287,287,,,,,287,287,,,,290", "290,290,287,290,287,287,287,290,290,,,,290,,290,290,290,290,290,290", "290,,,,,,290,290,290,290,290,290,290,,,290,,,,,,,290,,,290,290,290,290", "290,290,290,290,,290,290,290,,290,290,290,290,290,,,,,,,,,,,,,,,,,,", ",290,,,290,,,290,290,,,290,,,,,,290,,,,,,,,,290,,,,,290,290,290,290", ",290,290,290,290,,,,,290,290,,,,291,291,291,290,291,290,290,290,291", "291,,,,291,,291,291,291,291,291,291,291,,,,,,291,291,291,291,291,291", "291,,,291,,,,,,,291,,,291,291,291,291,291,291,291,291,,291,291,291,", "291,291,291,291,291,,,,,,,,,,,,,,,,,,,,291,,,291,,,291,291,,,291,,,", ",,291,,,,,,,,,291,,,,,291,291,291,291,,291,291,291,291,,,,,291,291,", ",,,,,291,,291,291,291,296,296,296,296,296,,,,296,296,,,,296,,296,296", "296,296,296,296,296,,,,,,296,296,296,296,296,296,296,,,296,,,,,,296", "296,,296,296,296,296,296,296,296,296,296,,296,296,296,,296,296,296,296", "296,,,,,,,,,,,,,,,,,,,,296,,,296,,,296,296,,,296,,296,,,,296,,,,,,,", ",296,,,,,296,296,296,296,,296,296,296,296,,,,,296,296,,,,720,720,720", "296,720,296,296,296,720,720,,,,720,,720,720,720,720,720,720,720,,,,", ",720,720,720,720,720,720,720,,,720,,,,,,,720,,,720,720,720,720,720,720", "720,720,,720,720,720,,720,720,720,720,720,,,,,,,,,,,,,,,,,,,,720,,,720", ",,720,720,,,720,,,,,,720,,,,,,,,,720,,,,,720,720,720,720,,720,720,720", "720,,,,,720,720,,,,539,539,539,720,539,720,720,720,539,539,,,,539,,539", "539,539,539,539,539,539,,,,,,539,539,539,539,539,539,539,,,539,,,,,", ",539,,,539,539,539,539,539,539,539,539,539,539,539,539,,539,539,539", "539,539,,,,,,,,,,,,,,,,,,,,539,,,539,,,539,539,,,539,,,,,,539,,,539", ",,,,,539,,,,,539,539,539,539,,539,539,539,539,,,,,539,539,,,,,,,539", ",539,539,539,5,5,5,5,5,,,,5,5,,,,5,,5,5,5,5,5,5,5,,,,,,5,5,5,5,5,5,5", ",,5,,,,,,5,5,5,5,5,5,5,5,5,5,5,5,,5,5,5,,5,5,5,5,5,,,,,,,,,,,,,,,,,", ",,5,,,5,,,5,5,,,5,,5,,,,5,,,,,,,,,5,,,,,5,5,5,5,,5,5,5,5,,,,,5,5,,,", "970,970,970,5,970,5,5,5,970,970,,,,970,,970,970,970,970,970,970,970", ",,,,,970,970,970,970,970,970,970,,,970,,,,,,,970,,,970,970,970,970,970", "970,970,970,970,970,970,970,,970,970,970,970,970,,,,,,,,,,,,,,,,,,,", "970,,,970,,,970,970,,,970,,970,,970,,970,,,970,,,,,,970,,,,,970,970", "970,970,,970,970,970,970,,,,,970,970,,,,20,20,20,970,20,970,970,970", "20,20,,,,20,,20,20,20,20,20,20,20,,,,,,20,20,20,20,20,20,20,,,20,,,", ",,,20,,,20,20,20,20,20,20,20,20,,20,20,20,,20,20,20,20,20,,,,,,,,,,", ",,,,,,,,,20,,,20,,,20,20,,,20,,,,,,20,,,,,,,,,20,,,,,20,20,20,20,,20", "20,20,20,,,,,20,20,,,,917,917,917,20,917,20,20,20,917,917,,,,917,,917", "917,917,917,917,917,917,,,,,,917,917,917,917,917,917,917,,,917,,,,,", ",917,,,917,917,917,917,917,917,917,917,,917,917,917,,917,917,,,917,", ",,,,,,,,,,,,,,,,,,917,,,917,,,917,917,,,917,,,,,,,,,,,,,,,,,,,,917,917", "917,917,,917,917,917,917,,,,,917,917,,,,29,29,29,917,29,917,917,917", "29,29,,,,29,,29,29,29,29,29,29,29,,,,,,29,29,29,29,29,29,29,,,29,,,", ",,,29,,,29,29,29,29,29,29,29,29,29,29,29,29,,29,29,29,29,29,,,,,,,,", ",,,,,,,,,,,29,,,29,,,29,29,,,29,,29,,29,,29,,,29,,,,,,29,,,,,29,29,29", "29,,29,29,29,29,,,,,29,29,,,,30,30,30,29,30,29,29,29,30,30,,,,30,,30", "30,30,30,30,30,30,,,,,,30,30,30,30,30,30,30,,,30,,,,,,,30,,,30,30,30", "30,30,30,30,30,30,30,30,30,,30,30,30,30,30,,,,,,,,,,,,,,,,,,,,30,,,30", ",,30,30,,,30,,30,,30,,30,,,30,,,,,,30,,,,,30,30,30,30,,30,30,30,30,", ",,,30,30,,,,31,31,31,30,31,30,30,30,31,31,,,,31,,31,31,31,31,31,31,31", ",,,,,31,31,31,31,31,31,31,,,31,,,,,,,31,,,31,31,31,31,31,31,31,31,31", "31,31,31,,31,31,31,31,31,,,,,,,,,,,,,,,,,,,,31,,,31,,,31,31,,,31,,31", ",31,,31,,,31,,,,,,31,,,,,31,31,31,31,,31,31,31,31,,,,,31,31,,,,34,34", "34,31,34,31,31,31,34,34,,,,34,,34,34,34,34,34,34,34,,,,,,34,34,34,34", "34,34,34,,,34,,,,,,,34,,,34,34,34,34,34,34,34,34,,34,34,34,,34,34,,", "34,,,,,,,,,,,,,,,,,,,,34,,,34,,,34,34,,,34,,34,,,,,,,,,,,,,,,,,,34,34", "34,34,,34,34,34,34,,,,,34,34,,,,35,35,35,34,35,34,34,34,35,35,,,,35", ",35,35,35,35,35,35,35,,,,,,35,35,35,35,35,35,35,,,35,,,,,,,35,,,35,35", "35,35,35,35,35,35,,35,35,35,,35,35,,,35,,,,,,,,,,,,,,,,,,,,35,,,35,", ",35,35,,,35,,,1025,,1025,1025,1025,1025,1025,,,,,,,,,1025,,35,35,35", "35,,35,35,35,35,,,,,35,35,,,,35,,1025,35,,35,35,35,866,866,866,,866", "1025,1025,,866,866,1025,,,866,,866,866,866,866,866,866,866,,,,,,866", "866,866,866,866,866,866,,,866,,,,,,,866,,,866,866,866,866,866,866,866", "866,,866,866,866,,866,866,,,866,,,,,,,,,,,,,,,,,,,,866,,,866,,,866,866", ",,866,,,,,,,,,,,,,,,,,,,,866,866,866,866,,866,866,866,866,,,,,866,866", ",,,857,857,857,866,857,866,866,866,857,857,,,,857,,857,857,857,857,857", "857,857,,,,,,857,857,857,857,857,857,857,,,857,,,,,,,857,,,857,857,857", "857,857,857,857,857,,857,857,857,,857,857,,,857,,,,,,,,,,,,,,,,,,,,857", ",,857,,,857,857,,,857,,,,,,,,,,,,,,,,,,,,857,857,857,857,,857,857,857", "857,,,,,857,857,,,,42,42,42,857,42,857,857,857,42,42,,,,42,,42,42,42", "42,42,42,42,,,,,,42,42,42,42,42,42,42,,,42,,,,,,,42,,,42,42,42,42,42", "42,42,42,,42,42,42,,42,42,42,42,42,,,,,,,,,,,,,,,,,,,,42,,,42,,,42,42", ",,42,,,,,,42,,,,,,,,,42,,,,,42,42,42,42,,42,42,42,42,,,,,42,42,,,,43", "43,43,42,43,42,42,42,43,43,,,,43,,43,43,43,43,43,43,43,,,,,,43,43,43", "43,43,43,43,,,43,,,,,,,43,,,43,43,43,43,43,43,43,43,,43,43,43,,43,43", "43,43,43,,,,,,,,,,,,,,,,,,,,43,,,43,,,43,43,,,43,,,,,,43,,,,,,,,,43", ",,,,43,43,43,43,,43,43,43,43,,,,,43,43,,,,45,45,45,43,45,43,43,43,45", "45,,,,45,,45,45,45,45,45,45,45,,,,,,45,45,45,45,45,45,45,,,45,,,,,,", "45,,,45,45,45,45,45,45,45,45,,45,45,45,,45,45,45,45,45,,,,,,,,,,,,,", ",,,,,,45,,,45,,,45,45,,,45,,,,,,45,,,,,,,,,45,,,,,45,45,45,45,,45,45", "45,45,,,,,45,45,,,,842,842,842,45,842,45,45,45,842,842,,,,842,,842,842", "842,842,842,842,842,,,,,,842,842,842,842,842,842,842,,,842,,,,,,,842", ",,842,842,842,842,842,842,842,842,,842,842,842,,842,842,842,842,842", ",,,,,,,,,,,,,,,,,,,842,,,842,,,842,842,,,842,,,,,,842,,,,,,,,,842,,", ",,842,842,842,842,,842,842,842,842,,,,,842,842,,,,841,841,841,842,841", "842,842,842,841,841,,,,841,,841,841,841,841,841,841,841,,,,,,841,841", "841,841,841,841,841,,,841,,,,,,,841,,,841,841,841,841,841,841,841,841", "841,841,841,841,,841,841,841,841,841,,,,,,,,,,,,,,,,,,,,841,,,841,,", "841,841,,,841,,,,841,,841,,,841,,,,,,841,,,,,841,841,841,841,,841,841", "841,841,,,,,841,841,,,,,,,841,,841,841,841,59,59,59,59,59,,,,59,59,", ",,59,,59,59,59,59,59,59,59,,,,,,59,59,59,59,59,59,59,,,59,,,,,,59,59", ",59,59,59,59,59,59,59,59,59,,59,59,59,,59,59,59,59,59,,,,,,,,,,,,,,", ",,,,,59,,,59,,,59,59,,,59,,59,,,,59,,,,,,,,,59,,,,,59,59,59,59,,59,59", "59,59,,,,,59,59,,,,60,60,60,59,60,59,59,59,60,60,,,,60,,60,60,60,60", "60,60,60,,,,,,60,60,60,60,60,60,60,,,60,,,,,,,60,,,60,60,60,60,60,60", "60,60,60,60,60,60,,60,60,60,60,60,,,,,,,,,,,,,,,,,,,,60,,,60,,,60,60", ",,60,,60,,,,60,,,60,,,,,,60,,,,,60,60,60,60,,60,60,60,60,,,,,60,60,", ",,61,61,61,60,61,60,60,60,61,61,,,,61,,61,61,61,61,61,61,61,,,,,,61", "61,61,61,61,61,61,,,61,,,,,,,61,,,61,61,61,61,61,61,61,61,61,61,61,61", ",61,61,61,61,61,,,,,,,,,,,,,,,,,,,,61,,,61,,,61,61,,,61,,,,,,61,,,61", ",,,,,61,,,,,61,61,61,61,,61,61,61,61,,,,,61,61,,,,64,64,64,61,64,61", "61,61,64,64,,,,64,,64,64,64,64,64,64,64,,,,,,64,64,64,64,64,64,64,,", "64,,,,,,,64,,,64,64,64,64,64,64,64,64,,64,64,64,,64,64,64,64,64,,,,", ",,,,,,,,,,,,,,,64,,,64,,,64,64,,,64,,,,,,64,,,,,,,,,64,,,,,64,64,64", "64,,64,64,64,64,,,,,64,64,,,,65,65,65,64,65,64,64,64,65,65,,,,65,,65", "65,65,65,65,65,65,,,,,,65,65,65,65,65,65,65,,,65,,,,,,,65,,,65,65,65", "65,65,65,65,65,,65,65,65,,65,65,65,65,65,,,,,,,,,,,,,,,,,,,,65,,,65", ",,65,65,,,65,,,,,,65,,,,,,,,,65,,,,,65,65,65,65,,65,65,65,65,,,,,65", "65,,,,68,68,68,65,68,65,65,65,68,68,,,,68,,68,68,68,68,68,68,68,,,,", ",68,68,68,68,68,68,68,,,68,,,,,,,68,,,68,68,68,68,68,68,68,68,,68,68", "68,,68,68,68,68,68,,,,,,,,,,,,,,,,,,,,68,,,68,,,68,68,,,68,,,,,,68,", ",,,,,,,68,,,,,68,68,68,68,,68,68,68,68,,,,,68,68,68,,,,,68,68,,68,68", "68,69,69,69,,69,,,,69,69,,,,69,,69,69,69,69,69,69,69,,,,,,69,69,69,69", "69,69,69,,,69,,,,,,,69,,,69,69,69,69,69,69,69,69,,69,69,69,,69,69,,", "69,,,,,,,,,,,,,,,,,,,,69,,,69,,,69,69,,,69,,69,,,,,,,,,,,,,,,,,,69,69", "69,69,,69,69,69,69,,,,,69,69,,,,70,70,70,69,70,69,69,69,70,70,,,,70", ",70,70,70,70,70,70,70,,,,,,70,70,70,70,70,70,70,,,70,,,,,,,70,,,70,70", "70,70,70,70,70,70,,70,70,70,,70,70,,,70,,,,,,,,,,,,,,,,,70,,,70,,,70", ",,70,70,,,70,,,,,,,,,,,,,,,,,,,,70,70,70,70,,70,70,70,70,,,,,70,70,", ",,71,71,71,70,71,70,70,70,71,71,,,,71,,71,71,71,71,71,71,71,,,,,,71", "71,71,71,71,71,71,,,71,,,,,,,71,,,71,71,71,71,71,71,71,71,,71,71,71", ",71,71,,,71,,,,,,,,,,,,,,,,,,,,71,,,71,,,71,71,,,71,,,912,,912,912,912", "912,912,,,,,,,,,912,,71,71,71,71,,71,71,71,71,,,,,71,71,,,,,,912,71", ",71,71,71,113,113,113,113,113,912,912,,113,113,912,,,113,,113,113,113", "113,113,113,113,,,,,,113,113,113,113,113,113,113,,,113,,,,,,113,113", "113,113,113,113,113,113,113,113,113,113,,113,113,113,,113,113,113,113", "113,,,,,,,,,,,,,,,,,,,,113,,,113,,,113,113,,,113,,113,,,,113,,,,,,,", ",113,,,,,113,113,113,113,,113,113,113,113,,,,,113,113,,,,,,113,113,", "113,113,113,118,118,118,,118,,,,118,118,,,,118,,118,118,118,118,118", "118,118,,,,,,118,118,118,118,118,118,118,,,118,,,,,,,118,,,118,118,118", "118,118,118,118,118,,118,118,118,,118,118,118,118,118,,,,,,,,,,,,,,", ",,,,,118,,,118,,,118,118,,,118,,,,,,118,,,,,,,,,118,,,,,118,118,118", "118,,118,118,118,118,,,,,118,118,,,,119,119,119,118,119,118,118,118", "119,119,,,,119,,119,119,119,119,119,119,119,,,,,,119,119,119,119,119", "119,119,,,119,,,,,,,119,,,119,119,119,119,119,119,119,119,,119,119,119", ",119,119,119,119,119,,,,,,,,,,,,,,,,,,,,119,,,119,,,119,119,,,119,,", ",,,119,,,,,,,,,119,,,,,119,119,119,119,,119,119,119,119,,,,,119,119", ",,,120,120,120,119,120,119,119,119,120,120,,,,120,,120,120,120,120,120", "120,120,,,,,,120,120,120,120,120,120,120,,,120,,,,,,,120,,,120,120,120", "120,120,120,120,120,,120,120,120,,120,120,120,120,120,,,,,,,,,,,,,,", ",,,,,120,,,120,,,120,120,,,120,,,,,,120,,,,,,,,,120,,,,,120,120,120", "120,,120,120,120,120,,,,,120,120,,,,121,121,121,120,121,120,120,120", "121,121,,,,121,,121,121,121,121,121,121,121,,,,,,121,121,121,121,121", "121,121,,,121,,,,,,,121,,,121,121,121,121,121,121,121,121,,121,121,121", ",121,121,121,121,121,,,,,,,,,,,,,,,,,,,,121,,,121,,,121,121,,,121,,", ",,,121,,,,,,,,,121,,,,,121,121,121,121,,121,121,121,121,,,,,121,121", ",,,,,,121,,121,121,121,122,122,122,122,122,,,,122,122,,,,122,,122,122", "122,122,122,122,122,,,,,,122,122,122,122,122,122,122,,,122,,,,,,122", "122,,122,122,122,122,122,122,122,122,122,,122,122,122,,122,122,122,122", "122,,,,,,,,,,,,,,,,,,,,122,,,122,,,122,122,,,122,,122,,,,122,,,,,,,", ",122,,,,,122,122,122,122,,122,122,122,122,,,,,122,122,,,,823,823,823", "122,823,122,122,122,823,823,,,,823,,823,823,823,823,823,823,823,,,,", ",823,823,823,823,823,823,823,,,823,,,,,,,823,,,823,823,823,823,823,823", "823,823,,823,823,823,,823,823,823,823,823,,,,,,,,,,,,,,,,,,,,823,,,823", ",,823,823,,,823,,823,,,,823,,,,,,,,,823,,,,,823,823,823,823,,823,823", "823,823,,,,,823,823,,,,820,820,820,823,820,823,823,823,820,820,,,,820", ",820,820,820,820,820,820,820,,,,,,820,820,820,820,820,820,820,,,820", ",,,,,,820,,,820,820,820,820,820,820,820,820,,820,820,820,,820,820,820", "820,820,,,,,,,,,,,,,,,,,,,,820,,,820,,,820,820,,,820,,,,,,820,,,,,,", ",,820,,,,,820,820,820,820,,820,820,820,820,,,,,820,820,,,,210,210,210", "820,210,820,820,820,210,210,,,,210,,210,210,210,210,210,210,210,,,,", ",210,210,210,210,210,210,210,,,210,,,,,,,210,,,210,210,210,210,210,210", "210,210,,210,210,210,,210,210,210,210,210,,,,,,,,,,,,,,,,,,,,210,,,210", ",,210,210,,,210,,210,,,,210,,,,,,,,,210,,,,,210,210,210,210,,210,210", "210,210,,,,,210,210,,,,211,211,211,210,211,210,210,210,211,211,,,,211", ",211,211,211,211,211,211,211,,,,,,211,211,211,211,211,211,211,,,211", ",,,,,,211,,,211,211,211,211,211,211,211,211,,211,211,211,,211,211,211", "211,211,,,,,,,,,,,,,,,,,,,,211,,,211,,,211,211,,,211,,211,,,,211,,,", ",,,,,211,,,,,211,211,211,211,,211,211,211,211,,,,,211,211,,,,212,212", "212,211,212,211,211,211,212,212,,,,212,,212,212,212,212,212,212,212", ",,,,,212,212,212,212,212,212,212,,,212,,,,,,,212,,,212,212,212,212,212", "212,212,212,,212,212,212,,212,212,212,212,212,,,,,,,,,,,,,,,,,,,,212", ",,212,,,212,212,,,212,,,,,,212,,,,,,,,,212,,,,,212,212,212,212,,212", "212,212,212,,,,,212,212,,,,213,213,213,212,213,212,212,212,213,213,", ",,213,,213,213,213,213,213,213,213,,,,,,213,213,213,213,213,213,213", ",,213,,,,,,,213,,,213,213,213,213,213,213,213,213,,213,213,213,,213", "213,213,213,213,,,,,,,,,,,,,,,,,,,,213,,,213,,,213,213,,,213,,,,,,213", ",,,,,,,,213,,,,,213,213,213,213,,213,213,213,213,,,,,213,213,,,,214", "214,214,213,214,213,213,213,214,214,,,,214,,214,214,214,214,214,214", "214,,,,,,214,214,214,214,214,214,214,,,214,,,,,,,214,,,214,214,214,214", "214,214,214,214,,214,214,214,,214,214,214,214,214,,,,,,,,,,,,,,,,,,", ",214,,,214,,,214,214,,,214,,,,,,214,,,,,,,,,214,,,,,214,214,214,214", ",214,214,214,214,,,,,214,214,,,,215,215,215,214,215,214,214,214,215", "215,,,,215,,215,215,215,215,215,215,215,,,,,,215,215,215,215,215,215", "215,,,215,,,,,,,215,,,215,215,215,215,215,215,215,215,215,215,215,215", ",215,215,215,215,215,,,,,,,,,,,,,,,,,,,,215,,,215,,,215,215,,,215,,215", ",215,,215,,,215,,,,,,215,,,,,215,215,215,215,,215,215,215,215,,,,,215", "215,,,,807,807,807,215,807,215,215,215,807,807,,,,807,,807,807,807,807", "807,807,807,,,,,,807,807,807,807,807,807,807,,,807,,,,,,,807,,,807,807", "807,807,807,807,807,807,,807,807,807,,807,807,807,807,807,,,,,,,,,,", ",,,,,,,,,807,,,807,,,807,807,,,807,,,,,,807,,,,,,,,,807,,,,,807,807", "807,807,,807,807,807,807,,,,,807,807,,,,220,220,220,807,220,807,807", "807,220,220,,,,220,,220,220,220,220,220,220,220,,,,,,220,220,220,220", "220,220,220,,,220,,,,,,,220,,,220,220,220,220,220,220,220,220,,220,220", "220,,220,220,220,220,220,,,,,,,,,,,,,,,,,,,,220,,,220,,,220,220,,,220", ",,,,,220,,,,,,,,,220,,,,,220,220,220,220,,220,220,220,220,,,,,220,220", ",,,221,221,221,220,221,220,220,220,221,221,,,,221,,221,221,221,221,221", "221,221,,,,,,221,221,221,221,221,221,221,,,221,,,,,,,221,,,221,221,221", "221,221,221,221,221,,221,221,221,,221,221,221,221,221,,,,,,,,,,,,,,", ",,,,,221,,,221,,,221,221,,,221,,,,,,221,,,,,,,,,221,,,,,221,221,221", "221,,221,221,221,221,,,,,221,221,,,,304,304,304,221,304,221,221,221", "304,304,,,,304,,304,304,304,304,304,304,304,,,,,,304,304,304,304,304", "304,304,,,304,,,,,,,304,,,304,304,304,304,304,304,304,304,,304,304,304", ",304,304,,,304,,,,,,,,,,,,,,,,,,,,304,,,304,,,304,304,,,304,,,989,,989", "989,989,989,989,,,,,,,,,989,,304,304,304,304,,304,304,304,304,,,,,304", "304,,,,304,,989,304,,304,304,304,686,686,686,,686,989,989,,686,686,989", ",,686,,686,686,686,686,686,686,686,,,,,,686,686,686,686,686,686,686", ",,686,,,,,,,686,,,686,686,686,686,686,686,686,686,,686,686,686,,686", "686,686,686,686,,,,,,,,,,,,,,,,,,,,686,,,686,,,686,686,,,686,,,,,,686", ",,,,,,,,686,,,,,686,686,686,686,,686,686,686,686,,,,,686,686,,,,660", "660,660,686,660,686,686,686,660,660,,,,660,,660,660,660,660,660,660", "660,,,,,,660,660,660,660,660,660,660,,,660,,,,,,,660,,,660,660,660,660", "660,660,660,660,,660,660,660,,660,660,660,660,660,,,,,,,,,,,,,,,,,,", ",660,,,660,,,660,660,,,660,,660,,,,660,,,,,,,,,660,,,,,660,660,660,660", ",660,660,660,660,,,,,660,660,,,,655,655,655,660,655,660,660,660,655", "655,,,,655,,655,655,655,655,655,655,655,,,,,,655,655,655,655,655,655", "655,,,655,,,,,,,655,,,655,655,655,655,655,655,655,655,,655,655,655,", "655,655,,,655,,,,,,,,,,,,,,,,,,,,655,,,655,,,655,655,,,655,,,,,,,,,", ",,,,,,,,,,655,655,655,655,,655,655,655,655,,,,,655,655,,,,644,644,644", "655,644,655,655,655,644,644,,,,644,,644,644,644,644,644,644,644,,,,", ",644,644,644,644,644,644,644,,,644,,,,,,,644,,,644,644,644,644,644,644", "644,644,,644,644,644,,644,644,,,644,,,,,,,,,,,,,,,,,,,,644,,,644,,,644", "644,,,644,,,,,,,,,,,,,,,,,,,,644,644,644,644,,644,644,644,644,,,,,644", "644,,,,321,321,321,644,321,644,644,644,321,321,,,,321,,321,321,321,321", "321,321,321,,,,,,321,321,321,321,321,321,321,,,321,,,,,,,321,,,321,321", "321,321,321,321,321,321,,321,321,321,,321,321,,,321,,,,,,,,,,,,,,,,", ",,,321,,,321,,,321,321,,,321,,,,,,,,,,,,,,,,,,,,321,321,321,321,,321", "321,321,321,,,,,321,321,,,,641,641,641,321,641,321,321,321,641,641,", ",,641,,641,641,641,641,641,641,641,,,,,,641,641,641,641,641,641,641", ",,641,,,,,,,641,,,641,641,641,641,641,641,641,641,,641,641,641,,641", "641,641,641,641,,,,,,,,,,,,,,,,,,,,641,,,641,,,641,641,,,641,,,,,,641", ",,,,,,,,641,,,,,641,641,641,641,,641,641,641,641,,,,,641,641,,,,638", "638,638,641,638,641,641,641,638,638,,,,638,,638,638,638,638,638,638", "638,,,,,,638,638,638,638,638,638,638,,,638,,,,,,,638,,,638,638,638,638", "638,638,638,638,,638,638,638,,638,638,638,638,638,,,,,,,,,,,,,,,,,,", ",638,,,638,,,638,638,,,638,,,,,,638,,,,,,,,,638,,,,,638,638,638,638", ",638,638,638,638,,,,,638,638,,,,328,328,328,638,328,638,638,638,328", "328,,,,328,,328,328,328,328,328,328,328,,,,,,328,328,328,328,328,328", "328,,,328,,,,,,,328,,,328,328,328,328,328,328,328,328,,328,328,328,", "328,328,328,328,328,,,,,,,,,,,,,,,,,,,,328,,,328,,,328,328,,,328,,,", ",,328,,,,,,,,,328,,,,,328,328,328,328,,328,328,328,328,,,,,328,328,", ",,330,330,330,328,330,328,328,328,330,330,,,,330,,330,330,330,330,330", "330,330,,,,,,330,330,330,330,330,330,330,,,330,,,,,,,330,,,330,330,330", "330,330,330,330,330,,330,330,330,,330,330,330,330,330,,,,,,,,,,,,,,", ",,,,,330,,,330,330,,330,330,,,330,,,,,,330,,,,,,,,,330,,,,,330,330,330", "330,,330,330,330,330,,,,,330,330,,,,614,614,614,330,614,330,330,330", "614,614,,,,614,,614,614,614,614,614,614,614,,,,,,614,614,614,614,614", "614,614,,,614,,,,,,,614,,,614,614,614,614,614,614,614,614,,614,614,614", ",614,614,614,614,614,,,,,,,,,,,,,,,,,,,,614,,,614,,,614,614,,,614,,", ",,,614,,,,,,,,,614,,,,,614,614,614,614,,614,614,614,614,,,,,614,614", ",,,613,613,613,614,613,614,614,614,613,613,,,,613,,613,613,613,613,613", "613,613,,,,,,613,613,613,613,613,613,613,,,613,,,,,,,613,,,613,613,613", "613,613,613,613,613,,613,613,613,,613,613,613,613,613,,,,,,,,,,,,,,", ",,,,,613,,,613,,,613,613,,,613,,,,,,613,,,,,,,,,613,,,,,613,613,613", "613,,613,613,613,613,,,,,613,613,,,,609,609,609,613,609,613,613,613", "609,609,,,,609,,609,609,609,609,609,609,609,,,,,,609,609,609,609,609", "609,609,,,609,,,,,,,609,,,609,609,609,609,609,609,609,609,,609,609,609", ",609,609,609,609,609,,,,,,,,,,,,,,,,,,,,609,,,609,,,609,609,,,609,,", ",,,609,,,,,,,,,609,,,,,609,609,609,609,,609,609,609,609,,,,,609,609", ",,,608,608,608,609,608,609,609,609,608,608,,,,608,,608,608,608,608,608", "608,608,,,,,,608,608,608,608,608,608,608,,,608,,,,,,,608,,,608,608,608", "608,608,608,608,608,,608,608,608,,608,608,608,608,608,,,,,,,,,,,,,,", ",,,,,608,,,608,,,608,608,,,608,,,,,,608,,,,,,,,,608,,,,,608,608,608", "608,,608,608,608,608,,,,,608,608,,,,607,607,607,608,607,608,608,608", "607,607,,,,607,,607,607,607,607,607,607,607,,,,,,607,607,607,607,607", "607,607,,,607,,,,,,,607,,,607,607,607,607,607,607,607,607,607,607,607", "607,,607,607,607,607,607,,,,,,,,,,,,,,,,,,,,607,,,607,,,607,607,,,607", ",,,607,,607,,,607,,,,,,607,,,,,607,607,607,607,,607,607,607,607,,,,", "607,607,,,,606,606,606,607,606,607,607,607,606,606,,,,606,,606,606,606", "606,606,606,606,,,,,,606,606,606,606,606,606,606,,,606,,,,,,,606,,,606", "606,606,606,606,606,606,606,606,606,606,606,,606,606,606,606,606,,,", ",,,,,,,,,,,,,,,,606,,,606,,,606,606,,,606,,606,,606,,606,,,606,,,,,", "606,,,,,606,606,606,606,,606,606,606,606,,,,,606,606,,,,603,603,603", "606,603,606,606,606,603,603,,,,603,,603,603,603,603,603,603,603,,,,", ",603,603,603,603,603,603,603,,,603,,,,,,,603,,,603,603,603,603,603,603", "603,603,,603,603,603,,603,603,603,603,603,,,,,,,,,,,,,,,,,,,,603,,,603", ",,603,603,,,603,,,,,,603,,,,,,,,,603,,,,,603,603,603,603,,603,603,603", "603,,,,,603,603,,,,,,,603,,603,603,603,602,602,602,602,602,,,,602,602", ",,,602,,602,602,602,602,602,602,602,,,,,,602,602,602,602,602,602,602", ",,602,,,,,,602,602,,602,602,602,602,602,602,602,602,602,,602,602,602", ",602,602,602,602,602,,,,,,,,,,,,,,,,,,,,602,,,602,,,602,602,,,602,,602", ",,,602,,,,,,,,,602,,,,,602,602,602,602,,602,602,602,602,,,,,602,602", ",,,599,599,599,602,599,602,602,602,599,599,,,,599,,599,599,599,599,599", "599,599,,,,,,599,599,599,599,599,599,599,,,599,,,,,,,599,,,599,599,599", "599,599,599,599,599,599,599,599,599,,599,599,599,599,599,,,,,,,,,,,", ",,,,,,,,599,,,599,,,599,599,,,599,,599,,599,,599,,,599,,,,,,599,,,,", "599,599,599,599,,599,599,599,599,,,,,599,599,,,,346,346,346,599,346", "599,599,599,346,346,,,,346,,346,346,346,346,346,346,346,,,,,,346,346", "346,346,346,346,346,,,346,,,,,,,346,,,346,346,346,346,346,346,346,346", ",346,346,346,,346,346,346,346,346,,,,,,,,,,,,,,,,,,,,346,,,346,,,346", "346,,,346,,,,,,346,,,,,,,,,346,,,,,346,346,346,346,,346,346,346,346", ",,,,346,346,,,,598,598,598,346,598,346,346,346,598,598,,,,598,,598,598", "598,598,598,598,598,,,,,,598,598,598,598,598,598,598,,,598,,,,,,,598", ",,598,598,598,598,598,598,598,598,,598,598,598,,598,598,598,598,598", ",,,,,,,,,,,,,,,,,,,598,,,598,,,598,598,,,598,,,,,,598,,,,,,,,,598,,", ",,598,598,598,598,,598,598,598,598,,,,,598,598,,,,597,597,597,598,597", "598,598,598,597,597,,,,597,,597,597,597,597,597,597,597,,,,,,597,597", "597,597,597,597,597,,,597,,,,,,,597,,,597,597,597,597,597,597,597,597", ",597,597,597,,597,597,597,597,597,,,,,,,,,,,,,,,,,,,,597,,,597,,,597", "597,,,597,,597,,,,597,,,,,,,,,597,,,,,597,597,597,597,,597,597,597,597", ",,,,597,597,,,,565,565,565,597,565,597,597,597,565,565,,,,565,,565,565", "565,565,565,565,565,,,,,,565,565,565,565,565,565,565,,,565,,,,,,,565", ",,565,565,565,565,565,565,565,565,565,565,565,565,,565,565,565,565,565", ",,,,,,,,,,,,,,,,,,,565,,,565,,,565,565,,,565,,565,,565,,565,,,565,,", ",,,565,,,,,565,565,565,565,,565,565,565,565,,,,,565,565,,,,555,555,555", "565,555,565,565,565,555,555,,,,555,,555,555,555,555,555,555,555,,,,", ",555,555,555,555,555,555,555,,,555,,,,,,,555,,,555,555,555,555,555,555", "555,555,555,555,555,555,,555,555,555,555,555,,,,,,,,,,,,,,,,,,,,555", ",,555,,,555,555,,,555,,555,,555,,555,,,555,,,,,,555,,,,,555,555,555", "555,,555,555,555,555,,,,,555,555,,,,367,367,367,555,367,555,555,555", "367,367,,,,367,,367,367,367,367,367,367,367,,,,,,367,367,367,367,367", "367,367,,,367,,,,,,,367,,,367,367,367,367,367,367,367,367,,367,367,367", ",367,367,367,367,367,,,,,,,,,,,,,,,,,,,,367,,,367,,,367,367,,,367,,", ",,,367,,,,,,,,,367,,,,,367,367,367,367,,367,367,367,367,,,,,367,367", ",,,554,554,554,367,554,367,367,367,554,554,,,,554,,554,554,554,554,554", "554,554,,,,,,554,554,554,554,554,554,554,,,554,,,,,,,554,,,554,554,554", "554,554,554,554,554,,554,554,554,,554,554,554,554,554,,,,,,,,,,,,,,", ",,,,,554,,,554,,,554,554,,,554,,554,,,,554,,,,,,,,,554,,,,,554,554,554", "554,,554,554,554,554,,,,,554,554,,,,536,536,536,554,536,554,554,554", "536,536,,,,536,,536,536,536,536,536,536,536,,,,,,536,536,536,536,536", "536,536,,,536,,,,,,,536,,,536,536,536,536,536,536,536,536,536,536,536", "536,,536,536,536,536,536,,,,,,,,,,,,,,,,,,,,536,,,536,,,536,536,,,536", ",536,,,,536,,,536,,,,,,536,,,,,536,536,536,536,,536,536,536,536,,,,", "536,536,,,,530,530,530,536,530,536,536,536,530,530,,,,530,,530,530,530", "530,530,530,530,,,,,,530,530,530,530,530,530,530,,,530,,,,,,,530,,,530", "530,530,530,530,530,530,530,,530,530,530,,530,530,530,530,530,,,,,,", ",,,,,,,,,,,,,530,,,530,,,530,530,,,530,,,,,,530,,,,,,,,,530,,,,,530", "530,530,530,,530,530,530,530,,,,,530,530,,,,525,525,525,530,525,530", "530,530,525,525,,,,525,,525,525,525,525,525,525,525,,,,,,525,525,525", "525,525,525,525,,,525,,,,,,,525,,,525,525,525,525,525,525,525,525,,525", "525,525,,525,525,525,525,525,,,,,,,,,,,,,,,,,,,,525,,,525,,,525,525", ",,525,,,,,,525,,,,,,,,,525,,,,,525,525,525,525,,525,525,525,525,,,,", "525,525,,,,524,524,524,525,524,525,525,525,524,524,,,,524,,524,524,524", "524,524,524,524,,,,,,524,524,524,524,524,524,524,,,524,,,,,,,524,,,524", "524,524,524,524,524,524,524,,524,524,524,,524,524,524,524,524,,,,,,", ",,,,,,,,,,,,,524,,,524,,,524,524,,,524,,,,,,524,,,,,,,,,524,,,,,524", "524,524,524,,524,524,524,524,,,,,524,524,,,,521,521,521,524,521,524", "524,524,521,521,,,,521,,521,521,521,521,521,521,521,,,,,,521,521,521", "521,521,521,521,,,521,,,,,,,521,,,521,521,521,521,521,521,521,521,,521", "521,521,,521,521,,,521,,,,,,,,,,,,,,,,,,,,521,,,521,,,521,521,,,521", ",,,,,,,,,,,,,,,,,,,521,521,521,521,,521,521,521,521,,,,,521,521,,,,383", "383,383,521,383,521,521,521,383,383,,,,383,,383,383,383,383,383,383", "383,,,,,,383,383,383,383,383,383,383,,,383,,,,,,,383,,,383,383,383,383", "383,383,383,383,,383,383,383,,383,383,383,383,383,,,,,,,,,,,,,,,,,,", ",383,,,383,,,383,383,,,383,,,,,,383,,,,,,,,,383,,,,,383,383,383,383", ",383,383,383,383,,,,,383,383,,,,515,515,515,383,515,383,383,383,515", "515,,,,515,,515,515,515,515,515,515,515,,,,,,515,515,515,515,515,515", "515,,,515,,,,,,,515,,,515,515,515,515,515,515,515,515,515,515,515,515", ",515,515,515,515,515,,,,,,,,,,,,,,,,,,,,515,,,515,,,515,515,,,515,,515", ",515,,515,,,515,,,,,,515,,,,,515,515,515,515,,515,515,515,515,,,,,515", "515,,,,513,513,513,515,513,515,515,515,513,513,,,,513,,513,513,513,513", "513,513,513,,,,,,513,513,513,513,513,513,513,,,513,,,,,,,513,,,513,513", "513,513,513,513,513,513,,513,513,513,,513,513,,,513,,,,,,,,,,,,,,,,", ",,,513,,,513,,,513,513,,,513,,,991,,991,991,991,991,991,,,,,,,,,991", ",513,513,513,513,,513,513,513,513,,,,,513,513,,,,,,991,513,,513,513", "513,505,505,505,505,505,991,991,,505,505,991,,,505,,505,505,505,505", "505,505,505,,,,,,505,505,505,505,505,505,505,,,505,,,,,,505,505,505", "505,505,505,505,505,505,505,505,505,,505,505,505,,505,505,505,505,505", ",,,,,,,,,,,,,,,,,,,505,,,505,,,505,505,,,505,,505,,,,505,,,,,,,,,505", ",,,,505,505,505,505,,505,505,505,505,,,,,505,505,,,,,,505,505,,505,505", "505,499,499,499,,499,,,,499,499,,,,499,,499,499,499,499,499,499,499", ",,,,,499,499,499,499,499,499,499,,,499,,,,,,,499,,,499,499,499,499,499", "499,499,499,,499,499,499,,499,499,499,499,499,,,,,,,,,,,,,,,,,,,,499", ",,499,,,499,499,,,499,,,,,,499,,,,,,,,,499,,,,,499,499,499,499,,499", "499,499,499,,,,,499,499,,,,497,497,497,499,497,499,499,499,497,497,", ",,497,,497,497,497,497,497,497,497,,,,,,497,497,497,497,497,497,497", ",,497,,,,,,,497,,,497,497,497,497,497,497,497,497,497,497,497,497,,497", "497,497,497,497,,,,,,,,,,,,,,,,,,,,497,,,497,,,497,497,,,497,,,,497", ",497,,,497,,,,,,497,,,,,497,497,497,497,,497,497,497,497,,,,,497,497", ",,,495,495,495,497,495,497,497,497,495,495,,,,495,,495,495,495,495,495", "495,495,,,,,,495,495,495,495,495,495,495,,,495,,,,,,,495,,,495,495,495", "495,495,495,495,495,495,495,495,495,,495,495,495,495,495,,,,,,,,,,,", ",,,,,,,,495,,,495,,,495,495,,,495,,495,,495,,495,,,495,,,,,,495,,,,", "495,495,495,495,,495,495,495,495,,,,,495,495,,,,458,458,458,495,458", "495,495,495,458,458,,,,458,,458,458,458,458,458,458,458,,,,,,458,458", "458,458,458,458,458,,,458,,,,,,,458,,,458,458,458,458,458,458,458,458", ",458,458,458,,458,458,458,458,458,,,,,,,,,,,,,,,,,,,,458,,,458,,,458", "458,,,458,,,,,,458,,,,,,,,,458,,,,,458,458,458,458,,458,458,458,458", ",,,,458,458,,,,457,457,457,458,457,458,458,458,457,457,,,,457,,457,457", "457,457,457,457,457,,,,,,457,457,457,457,457,457,457,,,457,,,,,,,457", ",,457,457,457,457,457,457,457,457,,457,457,457,,457,457,457,457,457", ",,,,,,,,,,,,,,,,,,,457,,,457,,,457,457,,,457,,,,,,457,,,,,,,,,457,,", ",,457,457,457,457,,457,457,457,457,,,,,457,457,,,,456,456,456,457,456", "457,457,457,456,456,,,,456,,456,456,456,456,456,456,456,,,,,,456,456", "456,456,456,456,456,,,456,,,,,,,456,,,456,456,456,456,456,456,456,456", ",456,456,456,,456,456,456,456,456,,,,,,,,,,,,,,,,,,,,456,,,456,,,456", "456,,,456,,,,,,456,,,,,,,,,456,,,,,456,456,456,456,,456,456,456,456", ",,,,456,456,,,,454,454,454,456,454,456,456,456,454,454,,,,454,,454,454", "454,454,454,454,454,,,,,,454,454,454,454,454,454,454,,,454,,,,,,,454", ",,454,454,454,454,454,454,454,454,454,454,454,454,,454,454,454,454,454", ",,,,,,,,,,,,,,,,,,,454,,,454,,,454,454,,,454,,454,,454,,454,,,454,,", ",,,454,,,,,454,454,454,454,,454,454,454,454,,,,,454,454,,,,411,411,411", "454,411,454,454,454,411,411,,,,411,,411,411,411,411,411,411,411,,,,", ",411,411,411,411,411,411,411,,,411,,,,,,,411,,,411,411,411,411,411,411", "411,411,,411,411,411,,411,411,411,411,411,,,,,,,,,,,,,,,,,,,,411,,,411", ",,411,411,,,411,,,,,,411,,,,,,,,,411,,,,,411,411,411,411,,411,411,411", "411,,,,,411,411,,,,,,,411,,411,411,411,594,594,594,594,594,594,594,594", "594,594,594,594,594,594,594,594,594,594,594,594,594,594,594,594,,,,594", "594,594,594,594,594,594,594,594,594,,,,,,594,594,594,594,594,594,594", "594,594,,,594,,,,,,,,594,594,,594,594,594,594,594,594,594,,,594,594", ",,,594,594,594,594,,,,,,,,,,,,,,594,594,,594,594,594,594,594,594,594", "594,594,594,594,594,,,594,594,,,,,,,,,,,,,,594,402,402,402,402,402,402", "402,402,402,402,402,402,402,402,402,402,402,402,402,402,402,402,402", "402,,,,402,402,402,402,402,402,402,402,402,402,,,,,,402,402,402,402", "402,402,402,402,402,,,402,,,,,,,,402,402,,402,402,402,402,402,402,402", ",,402,402,,,,402,402,402,402,,,,,,,,,,,,,,402,402,,402,402,402,402,402", "402,402,402,402,402,402,402,,,402,402,,,,,,,,,,,,,,402,9,9,9,9,9,9,9", "9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,,,,9,9,9,9,9,9,9,9,9,9,,,,,,9,9,9", "9,9,9,9,9,9,,,9,,,,,,,,9,9,,9,9,9,9,9,9,9,,,9,9,,,,9,9,9,9,,,,,,,,,", ",,,,9,9,,9,9,9,9,9,9,9,9,9,9,9,9,,,9,9,,,,,,,,,,,,,,9,8,8,8,8,8,8,8", "8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,,,,8,8,8,8,8,8,8,8,8,8,,,,,,8,8,8", "8,8,8,8,8,8,8,,8,,,,,,,,8,8,,8,8,8,8,8,8,8,,,8,8,,,,8,8,8,8,,,,,,,,", ",,,,,8,8,,8,8,8,8,8,8,8,8,8,8,8,8,,,8,8,,,,,,,,,,,,,,8,72,72,72,72,72", "72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,,,,72,72,72", "72,72,72,72,72,72,72,,,,,,72,72,72,72,72,72,72,72,72,72,72,72,,72,,", ",,,72,72,,72,72,72,72,72,72,72,,,72,72,,,,72,72,72,72,,,,,,72,,,,,,", ",72,72,,72,72,72,72,72,72,72,72,72,72,72,72,,,72,726,726,726,726,726", "726,726,726,726,726,726,726,726,726,726,726,726,726,726,726,726,726", "726,726,,,,726,726,726,726,726,726,726,726,726,726,,,,,,726,726,726", "726,726,726,726,726,726,,,726,,,,,,,,726,726,,726,726,726,726,726,726", "726,,,726,726,,,,726,726,726,726,,,,,,,,,,,,,,726,726,,726,726,726,726", "726,726,726,726,726,726,726,726,526,526,726,,526,,,,,,,,526,526,,526", "526,526,526,526,526,526,,,526,526,,,,526,526,526,526,,,,,,526,,,,,,", ",526,526,,526,526,526,526,526,526,526,526,526,526,526,526,557,557,526", ",557,,,,,,,,557,557,,557,557,557,557,557,557,557,,,557,557,,,,557,557", "557,557,,,,,,557,,,,,,,,557,557,,557,557,557,557,557,557,557,557,557", "557,557,557,601,601,557,,601,,,,,,,,601,601,,601,601,601,601,601,601", "601,,,601,601,,,,601,601,601,601,,,,,,601,,,,,,,,601,601,,601,601,601", "601,601,601,601,601,601,601,601,601,600,600,601,,600,,,,,,,,600,600", ",600,600,600,600,600,600,600,,,600,600,,,,600,600,600,600,,,,,,600,", ",,,,,,600,600,,600,600,600,600,600,600,600,600,600,600,600,600,216,216", "600,,216,,,,,,,,216,216,,216,216,216,216,216,216,216,,,216,216,,,,216", "216,216,216,,,,,,216,,,,,,,,216,216,,216,216,216,216,216,216,216,216", "216,216,216,216,265,265,216,,265,,,,,,,,265,265,,265,265,265,265,265", "265,265,,,265,265,,,,265,265,265,265,,,,,,,,,,,,,,265,265,,265,265,265", "265,265,265,265,265,265,265,265,265,217,217,265,,217,,,,,,,,217,217", ",217,217,217,217,217,217,217,,,217,217,,,,217,217,217,217,,,,,,217,", ",,,,,,217,217,,217,217,217,217,217,217,217,217,217,217,217,217,453,453", "217,,453,,,,,,,,453,453,,453,453,453,453,453,453,453,,,453,453,,,,453", "453,453,453,,,,,,453,,,,,,,,453,453,,453,453,453,453,453,453,453,453", "453,453,453,453,452,452,453,,452,,,,,,,,452,452,,452,452,452,452,452", "452,452,,,452,452,,,,452,452,452,452,,,,,,452,,,,,,,,452,452,,452,452", "452,452,452,452,452,452,452,452,452,452,972,972,452,,972,,,,,,,,972", "972,,972,972,972,972,972,972,972,,,972,972,,,,972,972,972,972,,,,,,972", ",,,,,,,972,972,,972,972,972,972,972,972,972,972,972,972,972,972,564", "564,972,,564,,,,,,,,564,564,,564,564,564,564,564,564,564,,,564,564,", ",,564,564,564,564,,,,,,564,,,,,,,,564,564,,564,564,564,564,564,564,564", "564,564,564,564,564,563,563,564,,563,,,,,,,,563,563,,563,563,563,563", "563,563,563,,,563,563,,,,563,563,563,563,,,,,,563,,,,,,,,563,563,,563", "563,563,563,563,563,563,563,563,563,563,563,971,971,563,,971,,,,,,,", "971,971,,971,971,971,971,971,971,971,,,971,971,,,,971,971,971,971,,", ",,,971,,,,,,,,971,971,,971,971,971,971,971,971,971,971,971,971,971,971", "967,967,971,,967,,,,,,,,967,967,,967,967,967,967,967,967,967,,,967,967", ",,,967,967,967,967,,,,,,967,,,,,,,,967,967,,967,967,967,967,967,967", "967,967,967,967,967,967,516,516,967,,516,,,,,,,,516,516,,516,516,516", "516,516,516,516,,,516,516,,,,516,516,516,516,,,,,,516,,,,,,,,516,516", ",516,516,516,516,516,516,516,516,516,516,516,516,517,517,516,,517,,", ",,,,,517,517,,517,517,517,517,517,517,517,,,517,517,,,,517,517,517,517", ",,,,,517,,,,,,,,517,517,,517,517,517,517,517,517,517,517,517,517,517", "517,556,556,517,,556,,,,,,,,556,556,,556,556,556,556,556,556,556,,,556", "556,,,,556,556,556,556,,,,,,556,,,,,,,,556,556,,556,556,556,556,556", "556,556,556,556,556,556,556,527,527,556,,527,,,,,,,,527,527,,527,527", "527,527,527,527,527,,,527,527,,,,527,527,527,527,,,,,,527,,,,,,,,527", "527,,527,527,527,527,527,527,527,527,527,527,527,527,,803,527,803,803", "803,803,803,,725,,725,725,725,725,725,803,,,,,,,,725,,987,,987,987,987", "987,987,,,,,,803,,,987,,,,,725,803,803,803,803,,,,803,725,725,725,725", ",,,725,987,,908,,908,908,908,908,908,987,987,987,987,,,,987,908,,910", ",910,910,910,910,910,,724,,724,724,724,724,724,910,,,,,908,,,724,,,", ",,908,908,908,908,,,,908,910,,,,,,,,724,910,910,910,910,,,,910,724,724", "724,724,,,993,724,993,993,993,993,993,,932,,932,932,932,932,932,993", ",,,,,,,932,,934,,934,934,934,934,934,,,,,,993,,,934,,,,,932,,,993,993", ",,,993,932,932,932,932,,,,932,934,,936,,936,936,936,936,936,,,934,934", ",,,934,936,,938,,938,938,938,938,938,1008,,1008,1008,1008,1008,1008", ",938,,,,,936,,1008,,666,,666,666,666,666,666,936,936,,,,936,938,,666", ",,,,1008,,,,938,938,,,,938,,1008,1008,,,,1008,666,,544,,544,544,544", "544,544,666,666,666,666,,,,666,544,,801,,801,801,801,801,801,805,,805", "805,805,805,805,,801,,,,,544,544,805,,,,,,,544,544,544,544,,,,544,801", ",,,,,,805,,801,801,801,801,,,,801,,805,805,,,,805"];
      racc_action_check = (arr = $$$('::', 'Array').$new(24631, nil));
      idx = 0;
      $send(clist, 'each', [], ($Ruby25$5 = function(str){var self = $Ruby25$5.$$s == null ? this : $Ruby25$5.$$s, $$6;

      
        
        if (str == null) {
          str = nil;
        };
        return $send(str.$split(",", -1), 'each', [], ($$6 = function(i){var self = $$6.$$s == null ? this : $$6.$$s, $writer = nil;

        
          
          if (i == null) {
            i = nil;
          };
          if ($truthy(i['$empty?']())) {
          } else {
            
            $writer = [idx, i.$to_i()];
            $send(arr, '[]=', Opal.to_a($writer));
            $writer[$rb_minus($writer["length"], 1)];
          };
          return (idx = $rb_plus(idx, 1));}, $$6.$$s = self, $$6.$$arity = 1, $$6));}, $Ruby25$5.$$s = self, $Ruby25$5.$$arity = 1, $Ruby25$5));
      racc_action_pointer = [1920, 101, nil, 270, nil, 11209, 1358, 1126, 22816, 22688, 1121, nil, 1055, 1044, 567, 1074, 768, 416, nil, -79, 11471, 2620, 1126, nil, 334, nil, 232, 1423, 1533, 11733, 11864, 11995, nil, 4020, 12126, 12257, nil, 1001, 841, 837, 1039, 171, 12658, 12789, 521, 12920, 927, 654, nil, nil, nil, nil, nil, nil, nil, nil, nil, 1208, nil, 13321, 13452, 13583, -8, nil, 13714, 13845, nil, nil, 13976, 14115, 14246, 14377, 22944, nil, nil, nil, nil, nil, nil, 602, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, 574, nil, nil, 686, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, 1035, nil, 14516, nil, nil, nil, nil, 14655, 14786, 14917, 15048, 15187, nil, 4580, nil, 577, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, 895, nil, 5000, 15580, 15711, 15842, 15973, 16104, 16235, 23362, 23484, nil, nil, 16497, 16628, 5691, nil, nil, 582, 160, 223, 927, 141, 823, 874, nil, 6346, 3740, 869, 6608, 6739, 6870, 7001, 7132, 7263, 7394, 7525, 7656, 7787, 7918, 8049, 8180, 8311, 8442, 8573, 8704, 8835, 8966, 9097, 9228, 9359, nil, nil, nil, nil, 9490, nil, nil, 23423, nil, nil, 859, 9752, 9883, nil, nil, nil, nil, nil, nil, nil, 10014, nil, 2060, nil, 809, 805, nil, 10276, 847, 10407, nil, nil, 10538, 10669, nil, nil, 268, nil, 10808, 1412, 814, 778, 3040, 787, 825, 764, 16759, 2060, 977, 940, 908, 805, 770, nil, 742, 697, 165, nil, nil, nil, 720, 220, 657, 17422, nil, 365, 719, 658, nil, 668, 17815, nil, 17946, 4440, 1349, 602, nil, 361, 360, 625, 602, 349, 616, nil, nil, 250, 10, -1, 19264, 4300, 2340, 121, 676, 554, 5, 40, 578, 610, 11, 639, nil, nil, 467, 230, -21, nil, 436, nil, 530, 19919, nil, nil, nil, 772, 771, 662, 660, 659, 607, 555, 554, 442, nil, 118, nil, 20836, nil, 290, 498, 501, 390, 495, -37, -27, 386, nil, nil, nil, nil, nil, nil, nil, nil, 300, 22560, nil, nil, nil, nil, 294, nil, nil, 268, 22293, 225, nil, nil, 208, nil, 809, 105, 259, nil, nil, 1780, nil, nil, nil, nil, nil, 1920, 148, nil, 64, 101, 804, 756, 1645, nil, nil, nil, 464, 222, 258, nil, nil, 936, 1072, nil, nil, nil, 18, nil, 290, 23606, 23545, 22162, 437, 22031, 21900, 21769, 2900, 3880, -46, 1098, 353, 373, 375, 377, 4300, 1485, 1596, 3460, 3040, 4160, 3180, 4020, 3320, 893, 1025, 3740, 3600, 2340, 1311, nil, 1344, nil, nil, nil, nil, 339, nil, nil, nil, 345, nil, nil, 21638, nil, 21507, nil, 21376, nil, 215, nil, nil, nil, 21237, 1538, nil, 369, 376, nil, nil, 389, 21098, 394, 20967, 23972, 24033, 690, 439, nil, 20705, 412, nil, 20574, 20443, 23118, 24155, 1159, 2760, 20312, 546, 554, 435, 478, nil, 20181, nil, nil, 11070, nil, nil, nil, nil, 24502, 4160, 564, nil, 1780, 90, 576, 599, 596, 609, 20050, 19788, 24094, 23179, -19, nil, nil, 512, nil, 23789, 23728, 19657, nil, nil, 213, 2200, 580, nil, -33, nil, nil, nil, 1269, nil, nil, nil, 554, nil, nil, 258, nil, 324, nil, nil, 544, nil, 554, nil, nil, nil, 22432, nil, 557, 19526, 19395, 19133, 23301, 23240, 19002, 18863, 384, 614, 18732, 18601, 18470, 18339, 625, nil, nil, 18208, 18077, 637, nil, nil, nil, 382, 409, 0, 798, 611, 613, 739, nil, 723, 130, nil, nil, 653, -50, 766, nil, 644, nil, 694, 17684, nil, nil, 17553, nil, -112, 17291, 670, nil, 678, 136, 312, 726, 256, 904, 731, 689, 17160, nil, 764, 24, 819, 17029, nil, nil, nil, 388, nil, 24463, nil, 711, 713, nil, 718, 720, 724, nil, nil, nil, nil, nil, nil, nil, nil, 715, 1135, nil, nil, 16898, nil, nil, nil, 811, nil, nil, nil, 827, nil, nil, 828, 374, nil, 869, nil, nil, nil, nil, nil, 878, nil, 6, 765, 41, -18, 68, 135, 2900, 292, 1040, nil, 794, 3600, 10939, nil, 923, 3460, 24306, 24225, 23057, nil, nil, nil, nil, nil, nil, 2760, nil, nil, nil, nil, nil, nil, nil, 806, 10145, 824, -85, 331, 110, 354, nil, 2200, 9621, nil, 824, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, 6477, 6215, 6084, 5953, 292, 5822, nil, -59, nil, nil, 870, nil, nil, 1308, nil, 3180, nil, nil, nil, nil, 853, 183, nil, nil, 979, nil, 2620, 867, 929, nil, nil, nil, -9, 891, 890, nil, nil, 534, 24519, nil, 24217, nil, 24526, nil, 16366, nil, 1005, nil, 889, 355, 895, nil, nil, nil, nil, 1018, nil, 15449, 1022, nil, 15318, 3880, 39, 1028, nil, 1031, 141, 3320, nil, 1042, 922, -50, nil, 926, 922, 142, nil, nil, 13182, 13051, 2480, 5420, nil, 931, 932, nil, 941, 942, 943, nil, 974, 959, 955, 949, 12527, nil, nil, nil, nil, 4720, nil, nil, 76, 12396, nil, nil, nil, nil, 1005, 963, nil, nil, nil, 973, 977, nil, 983, 985, nil, 989, nil, nil, 996, 1140, 999, 1201, nil, nil, -10, nil, nil, 256, nil, nil, nil, 1126, nil, nil, nil, 1047, nil, nil, 1021, nil, nil, 24281, nil, 24298, nil, 14424, nil, nil, 1028, 1050, 11602, 694, 1097, nil, 2480, 79, 33, 766, 1102, 36, nil, 5560, 5280, nil, nil, 24366, nil, 24383, nil, 24422, nil, 24439, nil, nil, nil, nil, 320, 865, 1025, 5140, nil, nil, nil, nil, 4860, 1028, nil, nil, 1030, 1034, 1036, 1038, nil, 1040, nil, 353, nil, nil, nil, 190, 23911, nil, 1169, 11340, 23850, 23667, 35, 1093, 1201, 1078, 1079, 1080, 1085, 1086, 1389, 1093, 1427, 324, 1218, nil, 24242, nil, 16806, nil, 21145, nil, 24358, nil, nil, nil, 914, 1140, 1141, nil, 1101, 32, 34, 109, 69, nil, nil, 24446, nil, nil, nil, nil, 1279, -101, nil, nil, -84, -80, -71, -38, nil, 26, -11, 42, 12304, nil, nil, nil, nil, nil, 72, nil];
      racc_action_default = [-3, -606, -1, -592, -4, -606, -7, -606, -606, -606, -606, -30, -606, -606, -34, -606, -606, -287, -46, -594, -606, -51, -55, -56, -57, -61, -264, -264, -264, -300, -330, -331, -73, -12, -77, -85, -87, -606, -496, -497, -606, -606, -606, -606, -223, -606, -594, -237, -278, -279, -280, -281, -282, -283, -284, -285, -286, -580, -289, -293, -605, -570, -308, -310, -606, -606, -53, -53, -592, -606, -606, -606, -606, -332, -333, -335, -437, -438, -439, -440, -441, -462, -444, -445, -464, -466, -449, -454, -458, -460, -476, -462, -478, -480, -481, -482, -483, -578, -485, -486, -579, -488, -489, -490, -491, -492, -493, -494, -495, -500, -501, -606, -2, -593, -601, -602, -603, -6, -606, -606, -606, -606, -606, -8, -3, -18, -606, -116, -117, -118, -119, -120, -121, -122, -123, -124, -128, -129, -130, -131, -132, -133, -134, -135, -136, -137, -138, -139, -140, -141, -142, -143, -144, -145, -146, -147, -148, -149, -150, -151, -152, -153, -154, -155, -156, -157, -158, -159, -160, -161, -162, -163, -164, -165, -166, -167, -168, -169, -170, -171, -172, -173, -174, -175, -176, -177, -178, -179, -180, -181, -182, -183, -184, -185, -186, -187, -188, -189, -190, -191, -192, -193, -194, -195, -196, -197, -198, -23, -125, -12, -606, -606, -606, -606, -606, -254, -606, -606, -590, -591, -606, -606, -594, -595, -50, -606, -496, -497, -606, -287, -606, -606, -229, -606, -12, -606, -606, -606, -606, -606, -606, -606, -606, -606, -606, -606, -606, -606, -606, -606, -606, -606, -606, -606, -606, -606, -606, -606, -238, -239, -240, -241, -606, -401, -403, -606, -588, -589, -62, -254, -606, -307, -407, -416, -418, -68, -413, -69, -594, -70, -244, -259, -268, -268, -263, -606, -269, -606, -462, -572, -606, -606, -71, -72, -592, -13, -606, -16, -606, -75, -12, -594, -606, -78, -81, -12, -93, -94, -606, -606, -101, -300, -303, -594, -606, -330, -331, -334, -414, -606, -83, -606, -89, -297, -479, -606, -217, -218, -606, -230, -606, -12, -291, -594, -245, -598, -598, -606, -606, -598, -606, -309, -392, -52, -606, -606, -606, -12, -12, -592, -606, -593, -496, -497, -606, -606, -287, -606, -345, -346, -111, -112, -606, -114, -606, -287, -504, -606, -496, -497, -323, -116, -117, -158, -159, -160, -176, -181, -188, -191, -325, -606, -568, -606, -442, -606, -606, -606, -606, -606, -606, -606, -606, 1033, -5, -604, -24, -25, -26, -27, -28, -606, -606, -20, -21, -22, -126, -606, -31, -33, -274, -606, -606, -273, -32, -606, -35, -606, -287, -43, -45, -199, -249, -269, -47, -48, -36, -200, -249, -594, -255, -268, -268, -581, -582, -264, -411, -583, -584, -582, -581, -264, -410, -412, -583, -584, -42, -207, -49, -594, -306, -606, -606, -606, -254, -297, -606, -606, -606, -208, -209, -210, -211, -212, -213, -214, -215, -219, -220, -221, -222, -224, -225, -226, -227, -228, -231, -232, -233, -234, -594, -242, -422, -264, -581, -582, -59, -63, -594, -265, -420, -422, -594, -302, -260, -606, -261, -606, -266, -606, -270, -606, -575, -577, -11, -593, -15, -17, -594, -74, -295, -90, -79, -606, -594, -254, -606, -606, -100, -606, -479, -606, -86, -91, -606, -606, -606, -606, -243, -235, -606, -429, -606, -594, -606, -246, -600, -599, -248, -600, -298, -299, -571, -311, -528, -12, -336, -337, -12, -606, -606, -606, -606, -606, -606, -254, -606, -606, -297, -53, -111, -112, -113, -606, -606, -254, -319, -502, -606, -12, -506, -327, -594, -443, -463, -468, -606, -470, -446, -465, -606, -467, -448, -606, -451, -606, -453, -456, -606, -457, -606, -477, -9, -19, -606, -29, -277, -606, -606, -254, -606, -606, -606, -606, -415, -606, -256, -258, -606, -606, -64, -253, -408, -606, -606, -66, -409, -305, -596, -581, -582, -581, -582, -594, -606, -606, -423, -58, -404, -420, -251, -606, -381, -606, -301, -268, -267, -271, -606, -573, -574, -606, -14, -76, -606, -82, -88, -594, -581, -582, -252, -585, -99, -606, -84, -606, -206, -216, -594, -605, -605, -290, -292, -294, -598, -393, -528, -396, -567, -567, -511, -513, -513, -513, -527, -529, -530, -531, -532, -533, -534, -535, -536, -606, -538, -540, -542, -547, -549, -550, -552, -557, -559, -560, -562, -563, -564, -606, -605, -338, -605, -54, -339, -340, -314, -315, -606, -317, -606, -594, -581, -582, -585, -296, -12, -111, -112, -115, -594, -12, -606, -321, -606, -12, -528, -528, -606, -569, -469, -472, -473, -474, -475, -12, -447, -450, -452, -455, -459, -461, -127, -275, -606, -594, -581, -582, -582, -581, -44, -250, -606, -597, -268, -38, -202, -39, -203, -65, -40, -205, -41, -204, -67, -606, -606, -606, -606, -415, -606, -402, -381, -406, -405, -606, -417, -382, -594, -384, -12, -419, -262, -272, -576, -80, -415, -92, -304, -605, -343, -12, -430, -605, -431, -432, -247, -606, -594, -606, -509, -510, -606, -606, -520, -606, -523, -606, -525, -606, -347, -606, -349, -351, -358, -594, -541, -551, -561, -565, -606, -341, -606, -606, -316, -606, -12, -415, -606, -415, -606, -606, -12, -324, -606, -594, -606, -328, -606, -276, -415, -37, -201, -257, -606, -236, -12, -60, -567, -567, -363, -365, -365, -365, -380, -606, -594, -386, -536, -544, -545, -555, -421, -10, -12, -436, -344, -606, -606, -434, -394, -397, -399, -606, -567, -548, -566, -512, -513, -513, -539, -513, -513, -558, -513, -536, -553, -594, -606, -356, -606, -537, -312, -606, -313, -271, -605, -318, -320, -503, -606, -326, -505, -507, -506, -471, -424, -606, -361, -362, -371, -373, -606, -376, -606, -378, -383, -606, -606, -606, -543, -606, -435, -12, -496, -497, -606, -606, -287, -433, -12, -12, -395, -508, -606, -516, -606, -518, -606, -521, -606, -524, -526, -348, -350, -354, -606, -359, -12, -425, -426, -427, -322, -12, -567, -546, -364, -365, -365, -365, -365, -556, -365, -385, -594, -388, -390, -391, -554, -606, -297, -429, -254, -606, -606, -297, -606, -606, -513, -513, -513, -513, -352, -606, -357, -606, -605, -606, -360, -606, -368, -606, -370, -606, -374, -606, -377, -379, -387, -606, -296, -585, -428, -594, -581, -582, -585, -296, -398, -400, -606, -514, -517, -519, -522, -606, -355, -342, -329, -365, -365, -365, -365, -389, -415, -513, -353, -606, -366, -369, -372, -375, -515, -365, -367];
      clist = ["221,380,302,29,429,553,135,135,29,341,334,125,208,317,317,116,264,659", "216,496,344,345,112,29,349,303,266,330,413,414,487,723,29,29,29,6,29", "265,130,130,6,272,276,133,133,562,347,348,317,317,317,639,545,548,532", "123,113,818,488,435,441,324,29,636,224,636,320,29,29,535,538,29,385", "542,396,397,398,399,850,813,116,778,392,878,343,343,667,350,343,282", "282,282,881,639,332,631,281,281,281,942,965,117,130,959,674,963,787", "1,483,333,625,427,579,581,584,584,29,447,301,633,335,29,29,29,29,29", "522,29,426,2,299,268,275,277,446,533,945,331,343,343,343,343,583,585", "798,799,604,821,6,852,853,381,283,283,283,366,370,400,566,6,357,639", "543,279,292,293,854,338,496,382,871,628,337,962,636,636,665,868,407", "544,959,965,795,336,339,328,1021,594,928,929,878,482,982,490,491,770", "942,947,791,865,384,386,387,302,388,885,629,706,796,394,955,389,29,29", "29,29,29,29,29,844,878,881,390,29,29,29,674,452,915,1014,391,436,424", "425,773,728,808,29,733,720,701,448,449,623,402,876,717,445,409,359,207", "873,953,401,408,419,642,342,419,861,26,1024,719,830,419,26,833,834,569", "302,412,412,29,29,302,878,570,726,902,501,26,29,281,317,674,674,,,,26", "26,26,722,26,519,435,441,,420,29,317,420,549,29,647,682,116,420,29,736", "516,736,523,504,534,,550,551,645,26,,,906,907,26,26,654,526,26,272,282", "506,,276,29,512,281,281,282,520,767,948,,1015,709,281,507,505,931,29", "29,29,,447,718,427,556,,,650,,116,808,951,784,887,343,,552,650,29,780", "757,26,,,,762,26,26,26,26,26,266,26,508,29,568,743,,514,,,283,571,639", ",299,794,650,135,283,299,572,489,593,,650,,636,605,,492,,,,824,,,600", ",656,,,,,825,682,986,,,,130,,,827,,133,,808,,808,828,435,441,,832,,", "783,611,,,,,1000,616,29,,,838,624,,,851,,,436,,26,26,26,26,26,26,26", "450,,792,,26,26,26,445,,682,682,,780,877,,879,317,,26,,980,808,611,", "317,,,,523,754,756,,29,,759,761,523,,698,,,700,29,,,281,753,755,,,,758", "760,26,26,436,493,29,808,,808,856,26,714,610,436,,,,,615,445,29,949", "658,29,,898,,509,26,445,29,,26,702,682,,682,26,808,904,29,,,436,29,921", ",772,,,,436,721,,281,,,,,445,627,,,26,135,445,,,956,740,957,946,,29", "29,,605,29,26,26,26,,793,29,29,,708,436,29,29,635,,976,771,281,317,130", ",,26,605,133,,445,281,,317,523,,748,,,,,419,26,,,785,840,,,,,419,419", ",835,,419,419,664,754,756,761,759,839,611,281,,616,856,,856,,,985,1017", "829,,,,,,,826,,420,,,847,,605,,,682,,420,420,,,605,420,420,836,617,", ",,,,872,,,,,26,,,29,1022,,412,,29,29,605,,29,,,752,,,,,,,29,863,,840", "343,867,630,,,,634,860,856,,848,,,29,,,130,855,864,1001,,,643,,,26,", ",646,,,874,,,874,26,891,855,,,,29,,,,,,662,,,26,340,29,894,419,,,,,", ",,,,,26,,,26,,,,,,650,26,,952,,,847,,847,29,847,26,727,29,,26,,920,", "29,,855,317,420,,,343,897,802,804,806,317,901,29,,,,,,,,,,,26,26,,,26", ",,29,,,26,26,,,,26,26,,,,,874,,,848,,848,,848,16,,,969,,16,,,,317,974", "975,847,,847,,847,,847,,225,,,,,786,,,984,225,225,225,,16,308,308,857", "29,,971,,,,,29,29,,,,,847,,,410,423,,996,,,16,,,29,,225,225,,29,225", "354,364,364,13,,848,,848,13,848,,848,,,,,,29,26,,,,,26,26,,605,26,,", "436,,,,,,13,26,,,,445,,848,16,,445,,,225,225,225,225,16,26,16,,,,498", ",500,13,,502,503,,,,,,,358,,,,,,,,,281,26,,,,,,,,,933,935,26,937,939", "857,940,,857,,857,,857,,,,,,,,889,,,,,13,,,,,,,,26,13,,13,26,849,,900", ",,26,,,,,,16,225,417,225,225,417,225,,26,,,417,225,225,,,880,,882,,", ",,,,16,26,,,,39,,,,,39,,,857,,857,,857,941,857,596,,,,,,1009,1010,1011", "1012,,,,,,225,225,,39,307,307,,,,225,,,13,,415,,857,415,,,,,,415,,26", ",16,,39,,16,26,26,,308,16,13,1030,353,369,369,369,,,,,,,,26,,308,,,26", ",909,911,913,,,16,958,,960,,,,637,,340,,640,26,,,225,16,16,,,,39,,977", ",978,,979,,,39,,39,,,,225,13,,,,13,,,,,13,,637,,,340,225,,,,,,,,,,,38", ",,423,,38,,,,13,,,,,,1018,,1019,,1020,,,,,,13,13,,,,,,,38,306,306,1023", ",988,990,992,994,,995,,,741,,,,,,,1031,39,637,340,,,38,225,,,,,,,,,352", "368,368,368,,,,,,,39,,,,,,,,781,,,782,,,,,,,,,,1026,1027,1028,1029,", ",,,,790,,16,,38,1032,,,,,308,,225,38,,38,,,308,,,,,,,,814,225,,,,,39", ",,,39,,,,307,39,16,,,16,,,,,,,225,,,,,307,,,,,225,,,,16,39,,,,,,,13", ",,,,,,,837,39,39,,,,,,,,,,,417,225,,,16,38,,,,,417,417,,,,417,417,,", "13,,,13,,,,,,,,38,,,,,,,,,,,,,13,,,308,,,,,,884,,,,,308,,,,,,,,,,,893", ",,,415,,,,13,,,,,,415,415,,,340,415,415,,,,38,,,,38,,,,306,38,,,,,,", ",,,,,,,,16,306,,,,16,225,,,16,,38,,,,,,,,16,,,,,,,,38,38,,39,,,,,,417", ",307,,,,,,,,307,,,,,,,,17,,,,,17,,,,,16,,,,,,39,,13,39,,16,,13,,,,13", ",,,,,17,310,310,,13,,,39,,,,,,,,,,,,225,,415,,16,,,17,,,16,,,,,,,356", "365,365,,39,,,16,,,,,,13,,,,,,,918,,,,13,16,,,,924,,,,,,,,,,,,,,,17", ",307,,,15,,,,17,15,17,,307,,13,,,38,,,13,,,,,306,,,,,,,,306,13,966,", "15,,16,,,,,,,16,16,,,,,13,,,,927,38,,,38,,,15,16,,,,,16,,39,,,,,39,", ",,39,38,,,,,,,225,,39,,,,,17,,418,,,418,,,,,,418,,,,,13,,,38,,,15,13", "13,17,,,,,,15,,15,,,,,,,39,13,,,,,13,,,,,39,,,,,,,,,,306,,,,,,,,,,,306", ",,,,,,,,,,,,,39,17,,,,17,39,,,310,17,,,,,,,,,,39,,,,,,310,,,,,,15,369", "15,,17,15,39,,,,923,15,,38,,,,,38,,17,17,38,,,15,,,,,,,38,,,,,,,,,,", ",,,,,,,,,,,,,,,,,,369,,,,39,,,,,,,39,39,,,,38,,,,,,,,,,15,38,,39,15", ",,,39,15,,,,,,,,,,,,,,,,,,,,,,,,,,15,38,,,,,,38,,,,,,,,,15,15,,,,38", ",,,,,,,,,,,,368,,,,,38,,,,922,,,,,,,,,,,,,17,,,,,,,,310,,,,,,,,310,", ",,,,,,,,,,,,,,,,,,,,368,,17,,38,17,,,,,,38,38,,,,,,,,,,,,,,17,,,38,", ",,732,38,,,,,,,,,,,,,,,,,,,,,418,,,,17,,,,,,418,418,,,,418,418,,,,,", ",,,15,,,,,,,,,,,,,,,,,,,,,310,,,,,,,,,,,310,,,,,,,,15,,,15,,,,,,,,,", ",,,,,,,,,,,15,,,,,,,,,,,,,,,,,,,,,,,,,,,17,,15,,,17,15,,,17,,,15,15", ",,,15,15,17,,,,,,,,,,,,,,,,,418,,,,,,,,,,,,,,,232,,,,,,,,,280,280,280", ",17,,,,,,,,,326,327,17,329,,,,,,,,,,,,,,,280,280,,,,,,,,,,,,,,,,,,17", ",,,,,17,,15,,,,,15,,,,15,,,17,,,,,,,15,,,,,,365,,,,,17,,,,926,,15,,", ",,,,,,,,,,,,,,,,,,,,,,,,,15,,,,,,,,,,,15,,,,,,,,,,365,,,,17,,,,,,,17", "17,,,,,,,,,,,,,15,,,,17,,15,,,17,,,,280,422,,,428,280,,15,,,428,,,,", ",,,,,,,,232,,15,459,460,461,462,463,464,465,466,467,468,469,470,471", "472,473,474,475,476,477,478,479,480,,,,,481,,,,,,,280,280,,,,,,,,280", ",,,,,,280,,280,,,280,280,,,15,,,,,,,15,15,,,,,,,,,,,,,,,,,15,,,,,15", ",,,528,,529,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,", ",,,,,,,,,,,,,,,,,,,,,,,,280,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,", ",,280,,428,428,428,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,280,,280,,280", ",,,,,,,,,,,,,,,280,,,,,,,,,428,657,,,,,,,,,,,280,,,280,,,,,,,,,,,,,", ",280,280,,,,,,,,,,280,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,280,428,280,,,", "749,,,280,280,428,428,,,,428,428,,,,,,,,,,,,,,,,,,,,,,,,280,,,280,,", ",,,,,,,,,,,,,,,,280,,,,,,,,,,,,,,,,,,,,,,,,,,280,,,,,,,,,,,,,,,,,,,", ",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,280,,,,,,,,428,,,,,,,,,,,,,428,428", "428,428,,843,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,280,,,,,,,,,,,,,", ",,280,,,,,,,,,,,,,,,,,,280,428,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,", ",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,", ",,,,,,,,,,,,,,,,,,,,,,280"];
      racc_goto_table = (arr = $$$('::', 'Array').$new(3371, nil));
      idx = 0;
      $send(clist, 'each', [], ($Ruby25$7 = function(str){var self = $Ruby25$7.$$s == null ? this : $Ruby25$7.$$s, $$8;

      
        
        if (str == null) {
          str = nil;
        };
        return $send(str.$split(",", -1), 'each', [], ($$8 = function(i){var self = $$8.$$s == null ? this : $$8.$$s, $writer = nil;

        
          
          if (i == null) {
            i = nil;
          };
          if ($truthy(i['$empty?']())) {
          } else {
            
            $writer = [idx, i.$to_i()];
            $send(arr, '[]=', Opal.to_a($writer));
            $writer[$rb_minus($writer["length"], 1)];
          };
          return (idx = $rb_plus(idx, 1));}, $$8.$$s = self, $$8.$$arity = 1, $$8));}, $Ruby25$7.$$s = self, $Ruby25$7.$$arity = 1, $Ruby25$7));
      clist = ["34,63,10,50,30,101,68,68,50,96,77,16,16,73,73,104,142,11,32,83,18,18", "4,50,18,56,32,34,23,23,45,105,50,50,50,7,50,42,64,64,7,81,81,67,67,61", "36,36,73,73,73,186,99,99,9,8,6,100,30,43,43,71,50,84,21,84,57,50,50", "79,79,50,159,79,18,18,18,18,129,119,104,131,159,177,25,25,141,4,25,78", "78,78,182,186,7,46,39,39,39,117,136,5,64,183,171,135,12,1,43,109,145", "70,164,164,164,164,50,70,53,145,78,50,50,50,50,50,58,50,27,2,52,44,44", "44,27,108,120,107,25,25,25,25,163,163,124,124,31,12,7,121,133,106,80", "80,80,62,62,7,103,7,102,186,98,51,51,51,127,95,83,94,133,82,76,134,84", "84,137,138,10,139,183,136,140,80,80,74,135,69,143,144,177,146,120,148", "149,152,117,153,154,155,158,160,161,10,162,119,48,101,141,5,129,165", "50,50,50,50,50,50,50,131,177,182,166,50,50,50,171,32,133,120,167,81", "25,25,46,168,118,50,169,170,37,25,25,30,26,175,61,64,24,20,17,179,180", "2,21,21,15,110,21,13,47,120,111,112,21,47,141,141,113,10,78,78,50,50", "10,177,114,115,116,159,47,50,39,73,171,171,,,,47,47,47,9,47,34,43,43", ",19,50,73,19,18,50,30,176,104,19,50,164,32,164,56,4,34,,10,10,58,47", ",,124,124,47,47,58,32,47,81,78,7,,81,50,57,39,39,78,71,31,12,,100,30", "39,8,6,124,50,50,50,,70,30,70,32,,,43,,104,118,105,31,118,25,,4,43,50", "83,45,47,,,,45,47,47,47,47,47,32,47,53,50,25,30,,53,,,80,42,186,,52", "79,43,68,80,52,25,51,16,,43,,84,34,,51,,,,99,,,32,,70,,,,,31,176,124", ",,,64,,,31,,67,,118,,118,9,43,43,,9,,,58,81,,,,,11,81,50,,,31,34,,,130", ",,81,,47,47,47,47,47,47,47,54,,23,,47,47,47,64,,176,176,,83,130,,130", "73,,47,,118,118,81,,73,,,,56,70,70,,50,,70,70,56,,10,,,10,50,,,39,27", "27,,,,27,27,47,47,81,54,50,118,,118,176,47,36,44,81,,,,,44,64,50,101", "25,50,,9,,54,47,64,50,,47,104,176,,176,47,118,9,50,,,81,50,99,,96,,", ",81,104,,39,,,,,64,44,,,47,68,64,,,130,16,130,99,,50,50,,34,50,47,47", "47,,77,50,50,,78,81,50,50,80,,130,142,39,73,64,,,47,34,67,,64,39,,73", "56,,7,,,,,21,47,,,56,70,,,,,21,21,,63,,21,21,80,70,70,70,70,27,81,39", ",81,176,,176,,,9,130,18,,,,,,,10,,19,,,123,,34,,,176,,19,19,,,34,19", "19,10,54,,,,,,123,,,,,47,,,50,31,,78,,50,50,34,,50,,,80,,,,,,,50,77", ",70,25,77,54,,,,54,10,176,,125,,,50,,,64,34,10,30,,,54,,,47,,,54,,,125", ",,125,47,18,34,,,,50,,,,,,54,,,47,75,50,10,21,,,,,,,,,,,47,,,47,,,,", ",43,47,,123,,,123,,123,50,123,47,54,50,,47,,10,,50,,34,73,19,,,25,104", "174,174,174,73,104,50,,,,,,,,,,,47,47,,,47,,,50,,,47,47,,,,47,47,,,", ",125,,,125,,125,,125,29,,,10,,29,,,,73,10,10,123,,123,,123,,123,,29", ",,,,54,,,10,29,29,29,,29,29,29,178,50,,32,,,,,50,50,,,,,123,,,75,75", ",34,,,29,,,50,,29,29,,50,29,29,29,29,22,,125,,125,22,125,,125,,,,,,50", "47,,,,,47,47,,34,47,,,81,,,,,,22,47,,,,64,,125,29,,64,,,29,29,29,29", "29,47,29,,,,75,,75,22,,75,75,,,,,,,22,,,,,,,,,39,47,,,,,,,,,174,174", "47,174,174,178,174,,178,,178,,178,,,,,,,,54,,,,,22,,,,,,,,47,22,,22", "47,128,,54,,,47,,,,,,29,29,29,29,29,29,29,,47,,,29,29,29,,,128,,128", ",,,,,,29,47,,,,60,,,,,60,,,178,,178,,178,54,178,75,,,,,,174,174,174", "174,,,,,,29,29,,60,60,60,,,,29,,,22,,22,,178,22,,,,,,22,,47,,29,,60", ",29,47,47,,29,29,22,174,60,60,60,60,,,,,,,,47,,29,,,47,,126,126,126", ",,29,128,,128,,,,75,,75,,75,47,,,29,29,29,,,,60,,128,,128,,128,,,60", ",60,,,,29,22,,,,22,,,,,22,,75,,,75,29,,,,,,,,,,,59,,,75,,59,,,,22,,", ",,,128,,128,,128,,,,,,22,22,,,,,,,59,59,59,128,,126,126,126,126,,126", ",,75,,,,,,,128,60,75,75,,,59,29,,,,,,,,,59,59,59,59,,,,,,,60,,,,,,,", "75,,,75,,,,,,,,,,126,126,126,126,,,,,,75,,29,,59,126,,,,,29,,29,59,", "59,,,29,,,,,,,,75,29,,,,,60,,,,60,,,,60,60,29,,,29,,,,,,,29,,,,,60,", ",,,29,,,,29,60,,,,,,,22,,,,,,,,75,60,60,,,,,,,,,,,29,29,,,29,59,,,,", "29,29,,,,29,29,,,22,,,22,,,,,,,,59,,,,,,,,,,,,,22,,,29,,,,,,75,,,,,29", ",,,,,,,,,,75,,,,22,,,,22,,,,,,22,22,,,75,22,22,,,,59,,,,59,,,,59,59", ",,,,,,,,,,,,,,29,59,,,,29,29,,,29,,59,,,,,,,,29,,,,,,,,59,59,,60,,,", ",,29,,60,,,,,,,,60,,,,,,,,33,,,,,33,,,,,29,,,,,,60,,22,60,,29,,22,,", ",22,,,,,,33,33,33,,22,,,60,,,,,,,,,,,,29,,22,,29,,,33,,,29,,,,,,,33", "33,33,,60,,,29,,,,,,22,,,,,,,29,,,,22,29,,,,29,,,,,,,,,,,,,,,33,,60", ",,28,,,,33,28,33,,60,,22,,,59,,,22,,,,,59,,,,,,,,59,22,29,,28,,29,,", ",,,,29,29,,,,,22,,,,22,59,,,59,,,28,29,,,,,29,,60,,,,,60,,,,60,59,,", ",,,,29,,60,,,,,33,,33,,,33,,,,,,33,,,,,22,,,59,,,28,22,22,33,,,,,,28", ",28,,,,,,,60,22,,,,,22,,,,,60,,,,,,,,,,59,,,,,,,,,,,59,,,,,,,,,,,,,", "60,33,,,,33,60,,,33,33,,,,,,,,,,60,,,,,,33,,,,,,28,60,28,,33,28,60,", ",,60,28,,59,,,,,59,,33,33,59,,,28,,,,,,,59,,,,,,,,,,,,,,,,,,,,,,,,,", ",,,60,,,,60,,,,,,,60,60,,,,59,,,,,,,,,,28,59,,60,28,,,,60,28,,,,,,,", ",,,,,,,,,,,,,,,,,,28,59,,,,,,59,,,,,,,,,28,28,,,,59,,,,,,,,,,,,,59,", ",,,59,,,,59,,,,,,,,,,,,,33,,,,,,,,33,,,,,,,,33,,,,,,,,,,,,,,,,,,,,,", "59,,33,,59,33,,,,,,59,59,,,,,,,,,,,,,,33,,,59,,,,33,59,,,,,,,,,,,,,", ",,,,,,,33,,,,33,,,,,,33,33,,,,33,33,,,,,,,,,28,,,,,,,,,,,,,,,,,,,,,33", ",,,,,,,,,,33,,,,,,,,28,,,28,,,,,,,,,,,,,,,,,,,,,28,,,,,,,,,,,,,,,,,", ",,,,,,,,,33,,28,,,33,28,,,33,,,28,28,,,,28,28,33,,,,,,,,,,,,,,,,,33", ",,,,,,,,,,,,,,35,,,,,,,,,35,35,35,,33,,,,,,,,,35,35,33,35,,,,,,,,,,", ",,,,35,35,,,,,,,,,,,,,,,,,,33,,,,,,33,,28,,,,,28,,,,28,,,33,,,,,,,28", ",,,,,33,,,,,33,,,,33,,28,,,,,,,,,,,,,,,,,,,,,,,,,,,,28,,,,,,,,,,,28", ",,,,,,,,,33,,,,33,,,,,,,33,33,,,,,,,,,,,,,28,,,,33,,28,,,33,,,,35,35", ",,35,35,,28,,,35,,,,,,,,,,,,,35,,28,35,35,35,35,35,35,35,35,35,35,35", "35,35,35,35,35,35,35,35,35,35,35,,,,,35,,,,,,,35,35,,,,,,,,35,,,,,,", "35,,35,,,35,35,,,28,,,,,,,28,28,,,,,,,,,,,,,,,,,28,,,,,28,,,,35,,35", ",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,", ",,,,,,,,,,,,35,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,35,,35,35,35", ",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,35,,35,,35,,,,,,,,,,,,,,,,35,,,", ",,,,,35,35,,,,,,,,,,,35,,,35,,,,,,,,,,,,,,,35,35,,,,,,,,,,35,,,,,,,", ",,,,,,,,,,,,,,,,,,,,,,,,35,35,35,,,,35,,,35,35,35,35,,,,35,35,,,,,,", ",,,,,,,,,,,,,,,,,35,,,35,,,,,,,,,,,,,,,,,,,35,,,,,,,,,,,,,,,,,,,,,,", ",,,35,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,35,,,,", ",,,35,,,,,,,,,,,,,35,35,35,35,,35,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,", ",,,,35,,,,,,,,,,,,,,,,35,,,,,,,,,,,,,,,,,,35,35,,,,,,,,,,,,,,,,,,,,", ",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,", ",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,35"];
      racc_goto_check = (arr = $$$('::', 'Array').$new(3371, nil));
      idx = 0;
      $send(clist, 'each', [], ($Ruby25$9 = function(str){var self = $Ruby25$9.$$s == null ? this : $Ruby25$9.$$s, $$10;

      
        
        if (str == null) {
          str = nil;
        };
        return $send(str.$split(",", -1), 'each', [], ($$10 = function(i){var self = $$10.$$s == null ? this : $$10.$$s, $writer = nil;

        
          
          if (i == null) {
            i = nil;
          };
          if ($truthy(i['$empty?']())) {
          } else {
            
            $writer = [idx, i.$to_i()];
            $send(arr, '[]=', Opal.to_a($writer));
            $writer[$rb_minus($writer["length"], 1)];
          };
          return (idx = $rb_plus(idx, 1));}, $$10.$$s = self, $$10.$$arity = 1, $$10));}, $Ruby25$9.$$s = self, $Ruby25$9.$$arity = 1, $Ruby25$9));
      racc_goto_pointer = [nil, 107, 129, nil, 19, 96, 53, 35, 48, -277, -31, -514, -553, -528, nil, -249, 3, 241, -44, 87, 180, 44, 959, -182, 38, 20, 119, -86, 1773, 887, -211, -283, 2, 1655, -19, 2400, -20, -309, nil, 67, nil, nil, 13, -157, 105, -238, -395, 260, -280, nil, 3, 134, 97, 85, 254, nil, -9, 31, -195, 1281, 1126, -317, 85, -71, 30, nil, nil, 35, -2, -219, -103, 20, nil, -21, 141, 730, 112, -50, 60, -266, 123, 15, -312, -264, -432, nil, nil, nil, nil, nil, nil, nil, nil, nil, 97, 106, -53, nil, -180, -292, -641, -345, 91, -208, 12, -539, 79, 79, -197, 50, 194, -304, -458, -102, -104, -294, -557, -787, -447, -604, -752, -627, nil, -88, -524, -26, 364, -610, 309, -698, -312, -551, nil, -626, -743, -811, -816, -368, -618, -163, -483, -458, -6, -681, -681, -372, -72, nil, -80, -80, nil, nil, -431, -697, -462, -592, nil, nil, 121, -9, 117, 117, 118, -246, -274, 124, 134, 141, -341, -339, -328, -440, nil, nil, 171, -556, -239, -718, 147, -546, -653, nil, -711, -807, nil, nil, -446];
      racc_goto_default = [nil, nil, nil, 3, nil, 4, 351, 297, nil, nil, 531, nil, 819, nil, 294, 295, nil, nil, nil, 11, 12, 18, 230, nil, nil, 14, nil, 416, 231, 325, nil, nil, 564, 229, 451, 21, nil, nil, 346, 22, 23, 24, nil, 653, nil, nil, nil, 314, nil, 25, 311, 430, 32, nil, nil, 34, 37, 36, nil, 226, 227, 363, nil, 132, 438, 131, 134, 77, 78, nil, 421, 92, 44, 47, 262, 286, nil, 788, 431, nil, 432, 443, 612, 494, 284, 270, 48, 49, 50, 51, 52, 53, 54, 55, 56, nil, 271, 62, nil, nil, nil, nil, nil, nil, 546, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, 810, 681, nil, 811, 954, 846, 669, nil, 670, nil, nil, 671, nil, 673, nil, 775, nil, nil, nil, 679, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, 442, nil, nil, 632, 626, nil, nil, nil, nil, 76, 79, 80, nil, nil, nil, nil, nil, 574, nil, nil, nil, nil, nil, nil, 875, 725, 668, nil, 672, 883, 684, 686, 687, 858, 690, 691, 859, 694, 697, 289];
      racc_reduce_table = [0, 0, "racc_error", 1, 146, "_reduce_none", 2, 147, "_reduce_2", 0, 148, "_reduce_3", 1, 148, "_reduce_4", 3, 148, "_reduce_5", 2, 148, "_reduce_6", 1, 150, "_reduce_none", 2, 150, "_reduce_8", 3, 153, "_reduce_9", 4, 154, "_reduce_10", 2, 155, "_reduce_11", 0, 159, "_reduce_12", 1, 159, "_reduce_13", 3, 159, "_reduce_14", 2, 159, "_reduce_15", 1, 160, "_reduce_none", 2, 160, "_reduce_17", 0, 171, "_reduce_18", 4, 152, "_reduce_19", 3, 152, "_reduce_20", 3, 152, "_reduce_21", 3, 152, "_reduce_22", 2, 152, "_reduce_23", 3, 152, "_reduce_24", 3, 152, "_reduce_25", 3, 152, "_reduce_26", 3, 152, "_reduce_27", 3, 152, "_reduce_28", 4, 152, "_reduce_29", 1, 152, "_reduce_none", 3, 152, "_reduce_31", 3, 152, "_reduce_32", 3, 152, "_reduce_33", 1, 152, "_reduce_none", 3, 164, "_reduce_35", 3, 164, "_reduce_36", 6, 164, "_reduce_37", 5, 164, "_reduce_38", 5, 164, "_reduce_39", 5, 164, "_reduce_40", 5, 164, "_reduce_41", 3, 164, "_reduce_42", 1, 172, "_reduce_none", 3, 172, "_reduce_44", 1, 172, "_reduce_none", 1, 170, "_reduce_none", 3, 170, "_reduce_47", 3, 170, "_reduce_48", 3, 170, "_reduce_49", 2, 170, "_reduce_50", 1, 170, "_reduce_none", 1, 163, "_reduce_none", 0, 183, "_reduce_53", 3, 181, "_reduce_54", 1, 166, "_reduce_none", 1, 166, "_reduce_none", 1, 185, "_reduce_none", 4, 185, "_reduce_58", 0, 193, "_reduce_59", 4, 190, "_reduce_60", 1, 192, "_reduce_none", 2, 184, "_reduce_62", 3, 184, "_reduce_63", 4, 184, "_reduce_64", 5, 184, "_reduce_65", 4, 184, "_reduce_66", 5, 184, "_reduce_67", 2, 184, "_reduce_68", 2, 184, "_reduce_69", 2, 184, "_reduce_70", 2, 184, "_reduce_71", 2, 184, "_reduce_72", 1, 165, "_reduce_73", 3, 165, "_reduce_74", 1, 198, "_reduce_75", 3, 198, "_reduce_76", 1, 197, "_reduce_none", 2, 197, "_reduce_78", 3, 197, "_reduce_79", 5, 197, "_reduce_80", 2, 197, "_reduce_81", 4, 197, "_reduce_82", 2, 197, "_reduce_83", 4, 197, "_reduce_84", 1, 197, "_reduce_85", 3, 197, "_reduce_86", 1, 201, "_reduce_none", 3, 201, "_reduce_88", 2, 200, "_reduce_89", 3, 200, "_reduce_90", 1, 203, "_reduce_91", 3, 203, "_reduce_92", 1, 202, "_reduce_93", 1, 202, "_reduce_94", 4, 202, "_reduce_95", 3, 202, "_reduce_96", 3, 202, "_reduce_97", 3, 202, "_reduce_98", 3, 202, "_reduce_99", 2, 202, "_reduce_100", 1, 202, "_reduce_101", 1, 167, "_reduce_102", 1, 167, "_reduce_103", 4, 167, "_reduce_104", 3, 167, "_reduce_105", 3, 167, "_reduce_106", 3, 167, "_reduce_107", 3, 167, "_reduce_108", 2, 167, "_reduce_109", 1, 167, "_reduce_110", 1, 206, "_reduce_111", 1, 206, "_reduce_none", 2, 207, "_reduce_113", 1, 207, "_reduce_114", 3, 207, "_reduce_115", 1, 208, "_reduce_none", 1, 208, "_reduce_none", 1, 208, "_reduce_none", 1, 208, "_reduce_none", 1, 208, "_reduce_none", 1, 211, "_reduce_121", 1, 211, "_reduce_none", 1, 161, "_reduce_none", 1, 161, "_reduce_none", 1, 162, "_reduce_125", 0, 214, "_reduce_126", 4, 162, "_reduce_127", 1, 209, "_reduce_none", 1, 209, "_reduce_none", 1, 209, "_reduce_none", 1, 209, "_reduce_none", 1, 209, "_reduce_none", 1, 209, "_reduce_none", 1, 209, "_reduce_none", 1, 209, "_reduce_none", 1, 209, "_reduce_none", 1, 209, "_reduce_none", 1, 209, "_reduce_none", 1, 209, "_reduce_none", 1, 209, "_reduce_none", 1, 209, "_reduce_none", 1, 209, "_reduce_none", 1, 209, "_reduce_none", 1, 209, "_reduce_none", 1, 209, "_reduce_none", 1, 209, "_reduce_none", 1, 209, "_reduce_none", 1, 209, "_reduce_none", 1, 209, "_reduce_none", 1, 209, "_reduce_none", 1, 209, "_reduce_none", 1, 209, "_reduce_none", 1, 209, "_reduce_none", 1, 209, "_reduce_none", 1, 209, "_reduce_none", 1, 209, "_reduce_none", 1, 209, "_reduce_none", 1, 210, "_reduce_none", 1, 210, "_reduce_none", 1, 210, "_reduce_none", 1, 210, "_reduce_none", 1, 210, "_reduce_none", 1, 210, "_reduce_none", 1, 210, "_reduce_none", 1, 210, "_reduce_none", 1, 210, "_reduce_none", 1, 210, "_reduce_none", 1, 210, "_reduce_none", 1, 210, "_reduce_none", 1, 210, "_reduce_none", 1, 210, "_reduce_none", 1, 210, "_reduce_none", 1, 210, "_reduce_none", 1, 210, "_reduce_none", 1, 210, "_reduce_none", 1, 210, "_reduce_none", 1, 210, "_reduce_none", 1, 210, "_reduce_none", 1, 210, "_reduce_none", 1, 210, "_reduce_none", 1, 210, "_reduce_none", 1, 210, "_reduce_none", 1, 210, "_reduce_none", 1, 210, "_reduce_none", 1, 210, "_reduce_none", 1, 210, "_reduce_none", 1, 210, "_reduce_none", 1, 210, "_reduce_none", 1, 210, "_reduce_none", 1, 210, "_reduce_none", 1, 210, "_reduce_none", 1, 210, "_reduce_none", 1, 210, "_reduce_none", 1, 210, "_reduce_none", 1, 210, "_reduce_none", 1, 210, "_reduce_none", 1, 210, "_reduce_none", 1, 210, "_reduce_none", 3, 180, "_reduce_199", 3, 180, "_reduce_200", 6, 180, "_reduce_201", 5, 180, "_reduce_202", 5, 180, "_reduce_203", 5, 180, "_reduce_204", 5, 180, "_reduce_205", 4, 180, "_reduce_206", 3, 180, "_reduce_207", 3, 180, "_reduce_208", 3, 180, "_reduce_209", 3, 180, "_reduce_210", 3, 180, "_reduce_211", 3, 180, "_reduce_212", 3, 180, "_reduce_213", 3, 180, "_reduce_214", 3, 180, "_reduce_215", 4, 180, "_reduce_216", 2, 180, "_reduce_217", 2, 180, "_reduce_218", 3, 180, "_reduce_219", 3, 180, "_reduce_220", 3, 180, "_reduce_221", 3, 180, "_reduce_222", 1, 180, "_reduce_none", 3, 180, "_reduce_224", 3, 180, "_reduce_225", 3, 180, "_reduce_226", 3, 180, "_reduce_227", 3, 180, "_reduce_228", 2, 180, "_reduce_229", 2, 180, "_reduce_230", 3, 180, "_reduce_231", 3, 180, "_reduce_232", 3, 180, "_reduce_233", 3, 180, "_reduce_234", 3, 180, "_reduce_235", 6, 180, "_reduce_236", 1, 180, "_reduce_none", 1, 219, "_reduce_none", 1, 219, "_reduce_none", 1, 219, "_reduce_none", 1, 219, "_reduce_none", 3, 217, "_reduce_242", 3, 217, "_reduce_243", 1, 220, "_reduce_none", 1, 221, "_reduce_none", 2, 221, "_reduce_none", 4, 221, "_reduce_247", 2, 221, "_reduce_248", 1, 215, "_reduce_none", 3, 215, "_reduce_250", 3, 226, "_reduce_251", 0, 227, "_reduce_252", 1, 227, "_reduce_none", 0, 175, "_reduce_254", 1, 175, "_reduce_none", 2, 175, "_reduce_none", 4, 175, "_reduce_257", 2, 175, "_reduce_258", 1, 196, "_reduce_259", 2, 196, "_reduce_260", 2, 196, "_reduce_261", 4, 196, "_reduce_262", 1, 196, "_reduce_263", 0, 230, "_reduce_264", 2, 189, "_reduce_265", 2, 229, "_reduce_266", 2, 228, "_reduce_267", 0, 228, "_reduce_268", 1, 223, "_reduce_269", 2, 223, "_reduce_270", 3, 223, "_reduce_271", 4, 223, "_reduce_272", 1, 169, "_reduce_273", 1, 169, "_reduce_none", 3, 168, "_reduce_275", 4, 168, "_reduce_276", 2, 168, "_reduce_277", 1, 218, "_reduce_none", 1, 218, "_reduce_none", 1, 218, "_reduce_none", 1, 218, "_reduce_none", 1, 218, "_reduce_none", 1, 218, "_reduce_none", 1, 218, "_reduce_none", 1, 218, "_reduce_none", 1, 218, "_reduce_none", 1, 218, "_reduce_none", 1, 218, "_reduce_288", 0, 252, "_reduce_289", 4, 218, "_reduce_290", 0, 253, "_reduce_291", 4, 218, "_reduce_292", 0, 254, "_reduce_293", 4, 218, "_reduce_294", 3, 218, "_reduce_295", 3, 218, "_reduce_296", 2, 218, "_reduce_297", 3, 218, "_reduce_298", 3, 218, "_reduce_299", 1, 218, "_reduce_300", 4, 218, "_reduce_301", 3, 218, "_reduce_302", 1, 218, "_reduce_303", 5, 218, "_reduce_304", 4, 218, "_reduce_305", 3, 218, "_reduce_306", 2, 218, "_reduce_307", 1, 218, "_reduce_none", 2, 218, "_reduce_309", 0, 255, "_reduce_310", 3, 218, "_reduce_311", 6, 218, "_reduce_312", 6, 218, "_reduce_313", 4, 218, "_reduce_314", 4, 218, "_reduce_315", 5, 218, "_reduce_316", 4, 218, "_reduce_317", 6, 218, "_reduce_318", 0, 256, "_reduce_319", 6, 218, "_reduce_320", 0, 257, "_reduce_321", 7, 218, "_reduce_322", 0, 258, "_reduce_323", 5, 218, "_reduce_324", 0, 259, "_reduce_325", 6, 218, "_reduce_326", 0, 260, "_reduce_327", 0, 261, "_reduce_328", 9, 218, "_reduce_329", 1, 218, "_reduce_330", 1, 218, "_reduce_331", 1, 218, "_reduce_332", 1, 218, "_reduce_333", 1, 174, "_reduce_none", 1, 195, "_reduce_335", 1, 244, "_reduce_none", 1, 244, "_reduce_none", 2, 244, "_reduce_338", 1, 182, "_reduce_none", 1, 182, "_reduce_none", 1, 245, "_reduce_none", 5, 245, "_reduce_342", 1, 157, "_reduce_none", 2, 157, "_reduce_344", 1, 247, "_reduce_none", 1, 247, "_reduce_none", 1, 262, "_reduce_347", 3, 262, "_reduce_348", 1, 265, "_reduce_349", 3, 265, "_reduce_350", 1, 264, "_reduce_none", 4, 264, "_reduce_352", 6, 264, "_reduce_353", 3, 264, "_reduce_354", 5, 264, "_reduce_355", 2, 264, "_reduce_356", 4, 264, "_reduce_357", 1, 264, "_reduce_358", 3, 264, "_reduce_359", 4, 266, "_reduce_360", 2, 266, "_reduce_361", 2, 266, "_reduce_362", 1, 266, "_reduce_363", 2, 271, "_reduce_364", 0, 271, "_reduce_365", 6, 272, "_reduce_366", 8, 272, "_reduce_367", 4, 272, "_reduce_368", 6, 272, "_reduce_369", 4, 272, "_reduce_370", 2, 272, "_reduce_none", 6, 272, "_reduce_372", 2, 272, "_reduce_373", 4, 272, "_reduce_374", 6, 272, "_reduce_375", 2, 272, "_reduce_376", 4, 272, "_reduce_377", 2, 272, "_reduce_378", 4, 272, "_reduce_379", 1, 272, "_reduce_none", 0, 276, "_reduce_381", 1, 276, "_reduce_382", 3, 277, "_reduce_383", 1, 277, "_reduce_384", 4, 277, "_reduce_385", 1, 278, "_reduce_386", 4, 278, "_reduce_387", 1, 279, "_reduce_388", 3, 279, "_reduce_389", 1, 280, "_reduce_390", 1, 280, "_reduce_none", 0, 284, "_reduce_392", 0, 285, "_reduce_393", 4, 243, "_reduce_394", 4, 282, "_reduce_395", 1, 282, "_reduce_396", 0, 288, "_reduce_397", 4, 283, "_reduce_398", 0, 289, "_reduce_399", 4, 283, "_reduce_400", 0, 291, "_reduce_401", 4, 287, "_reduce_402", 2, 186, "_reduce_403", 4, 186, "_reduce_404", 5, 186, "_reduce_405", 5, 186, "_reduce_406", 2, 242, "_reduce_407", 4, 242, "_reduce_408", 4, 242, "_reduce_409", 3, 242, "_reduce_410", 3, 242, "_reduce_411", 3, 242, "_reduce_412", 2, 242, "_reduce_413", 1, 242, "_reduce_414", 4, 242, "_reduce_415", 0, 293, "_reduce_416", 4, 241, "_reduce_417", 0, 294, "_reduce_418", 4, 241, "_reduce_419", 0, 295, "_reduce_420", 3, 191, "_reduce_421", 0, 296, "_reduce_422", 0, 297, "_reduce_423", 4, 290, "_reduce_424", 5, 246, "_reduce_425", 1, 298, "_reduce_426", 1, 298, "_reduce_none", 6, 156, "_reduce_428", 0, 156, "_reduce_429", 1, 299, "_reduce_430", 1, 299, "_reduce_none", 1, 299, "_reduce_none", 2, 300, "_reduce_433", 1, 300, "_reduce_none", 2, 158, "_reduce_435", 1, 158, "_reduce_none", 1, 231, "_reduce_none", 1, 231, "_reduce_none", 1, 231, "_reduce_none", 1, 232, "_reduce_440", 1, 302, "_reduce_441", 2, 302, "_reduce_442", 3, 303, "_reduce_443", 1, 303, "_reduce_444", 1, 303, "_reduce_445", 3, 233, "_reduce_446", 4, 234, "_reduce_447", 3, 235, "_reduce_448", 0, 307, "_reduce_449", 3, 307, "_reduce_450", 1, 308, "_reduce_451", 2, 308, "_reduce_452", 3, 237, "_reduce_453", 0, 310, "_reduce_454", 3, 310, "_reduce_455", 3, 236, "_reduce_456", 3, 238, "_reduce_457", 0, 311, "_reduce_458", 3, 311, "_reduce_459", 0, 312, "_reduce_460", 3, 312, "_reduce_461", 0, 304, "_reduce_462", 2, 304, "_reduce_463", 0, 305, "_reduce_464", 2, 305, "_reduce_465", 0, 306, "_reduce_466", 2, 306, "_reduce_467", 1, 309, "_reduce_468", 2, 309, "_reduce_469", 0, 314, "_reduce_470", 4, 309, "_reduce_471", 1, 313, "_reduce_472", 1, 313, "_reduce_473", 1, 313, "_reduce_474", 1, 313, "_reduce_none", 1, 212, "_reduce_476", 3, 213, "_reduce_477", 1, 301, "_reduce_478", 2, 301, "_reduce_479", 1, 216, "_reduce_480", 1, 216, "_reduce_481", 1, 216, "_reduce_482", 1, 216, "_reduce_483", 1, 204, "_reduce_484", 1, 204, "_reduce_485", 1, 204, "_reduce_486", 1, 204, "_reduce_487", 1, 204, "_reduce_488", 1, 205, "_reduce_489", 1, 205, "_reduce_490", 1, 205, "_reduce_491", 1, 205, "_reduce_492", 1, 205, "_reduce_493", 1, 205, "_reduce_494", 1, 205, "_reduce_495", 1, 239, "_reduce_496", 1, 239, "_reduce_497", 1, 173, "_reduce_498", 1, 173, "_reduce_499", 1, 178, "_reduce_500", 1, 178, "_reduce_501", 0, 315, "_reduce_502", 4, 248, "_reduce_503", 0, 248, "_reduce_504", 3, 250, "_reduce_505", 0, 317, "_reduce_506", 3, 250, "_reduce_507", 4, 316, "_reduce_508", 2, 316, "_reduce_509", 2, 316, "_reduce_510", 1, 316, "_reduce_511", 2, 319, "_reduce_512", 0, 319, "_reduce_513", 6, 286, "_reduce_514", 8, 286, "_reduce_515", 4, 286, "_reduce_516", 6, 286, "_reduce_517", 4, 286, "_reduce_518", 6, 286, "_reduce_519", 2, 286, "_reduce_520", 4, 286, "_reduce_521", 6, 286, "_reduce_522", 2, 286, "_reduce_523", 4, 286, "_reduce_524", 2, 286, "_reduce_525", 4, 286, "_reduce_526", 1, 286, "_reduce_527", 0, 286, "_reduce_528", 1, 281, "_reduce_529", 1, 281, "_reduce_530", 1, 281, "_reduce_531", 1, 281, "_reduce_532", 1, 263, "_reduce_none", 1, 263, "_reduce_534", 1, 321, "_reduce_535", 1, 322, "_reduce_536", 3, 322, "_reduce_537", 1, 273, "_reduce_538", 3, 273, "_reduce_539", 1, 323, "_reduce_540", 2, 324, "_reduce_541", 1, 324, "_reduce_542", 2, 325, "_reduce_543", 1, 325, "_reduce_544", 1, 267, "_reduce_545", 3, 267, "_reduce_546", 1, 318, "_reduce_547", 3, 318, "_reduce_548", 1, 326, "_reduce_none", 1, 326, "_reduce_none", 2, 268, "_reduce_551", 1, 268, "_reduce_552", 3, 327, "_reduce_553", 3, 328, "_reduce_554", 1, 274, "_reduce_555", 3, 274, "_reduce_556", 1, 320, "_reduce_557", 3, 320, "_reduce_558", 1, 329, "_reduce_none", 1, 329, "_reduce_none", 2, 275, "_reduce_561", 1, 275, "_reduce_562", 1, 330, "_reduce_none", 1, 330, "_reduce_none", 2, 270, "_reduce_565", 2, 269, "_reduce_566", 0, 269, "_reduce_567", 1, 251, "_reduce_none", 3, 251, "_reduce_569", 0, 240, "_reduce_570", 2, 240, "_reduce_none", 1, 225, "_reduce_572", 3, 225, "_reduce_573", 3, 331, "_reduce_574", 2, 331, "_reduce_575", 4, 331, "_reduce_576", 2, 331, "_reduce_577", 1, 194, "_reduce_none", 1, 194, "_reduce_none", 1, 194, "_reduce_none", 1, 188, "_reduce_none", 1, 188, "_reduce_none", 1, 188, "_reduce_none", 1, 188, "_reduce_none", 1, 292, "_reduce_none", 1, 292, "_reduce_none", 1, 292, "_reduce_none", 1, 187, "_reduce_none", 1, 187, "_reduce_none", 1, 177, "_reduce_590", 1, 177, "_reduce_591", 0, 149, "_reduce_none", 1, 149, "_reduce_none", 0, 179, "_reduce_none", 1, 179, "_reduce_none", 2, 199, "_reduce_596", 2, 176, "_reduce_597", 0, 224, "_reduce_none", 1, 224, "_reduce_none", 1, 224, "_reduce_none", 1, 249, "_reduce_601", 1, 249, "_reduce_none", 1, 151, "_reduce_none", 2, 151, "_reduce_none", 0, 222, "_reduce_605"];
      racc_reduce_n = 606;
      racc_shift_n = 1033;
      racc_token_table = $hash(false, 0, "error", 1, "kCLASS", 2, "kMODULE", 3, "kDEF", 4, "kUNDEF", 5, "kBEGIN", 6, "kRESCUE", 7, "kENSURE", 8, "kEND", 9, "kIF", 10, "kUNLESS", 11, "kTHEN", 12, "kELSIF", 13, "kELSE", 14, "kCASE", 15, "kWHEN", 16, "kWHILE", 17, "kUNTIL", 18, "kFOR", 19, "kBREAK", 20, "kNEXT", 21, "kREDO", 22, "kRETRY", 23, "kIN", 24, "kDO", 25, "kDO_COND", 26, "kDO_BLOCK", 27, "kDO_LAMBDA", 28, "kRETURN", 29, "kYIELD", 30, "kSUPER", 31, "kSELF", 32, "kNIL", 33, "kTRUE", 34, "kFALSE", 35, "kAND", 36, "kOR", 37, "kNOT", 38, "kIF_MOD", 39, "kUNLESS_MOD", 40, "kWHILE_MOD", 41, "kUNTIL_MOD", 42, "kRESCUE_MOD", 43, "kALIAS", 44, "kDEFINED", 45, "klBEGIN", 46, "klEND", 47, "k__LINE__", 48, "k__FILE__", 49, "k__ENCODING__", 50, "tIDENTIFIER", 51, "tFID", 52, "tGVAR", 53, "tIVAR", 54, "tCONSTANT", 55, "tLABEL", 56, "tCVAR", 57, "tNTH_REF", 58, "tBACK_REF", 59, "tSTRING_CONTENT", 60, "tINTEGER", 61, "tFLOAT", 62, "tUPLUS", 63, "tUMINUS", 64, "tUNARY_NUM", 65, "tPOW", 66, "tCMP", 67, "tEQ", 68, "tEQQ", 69, "tNEQ", 70, "tGEQ", 71, "tLEQ", 72, "tANDOP", 73, "tOROP", 74, "tMATCH", 75, "tNMATCH", 76, "tDOT", 77, "tDOT2", 78, "tDOT3", 79, "tAREF", 80, "tASET", 81, "tLSHFT", 82, "tRSHFT", 83, "tCOLON2", 84, "tCOLON3", 85, "tOP_ASGN", 86, "tASSOC", 87, "tLPAREN", 88, "tLPAREN2", 89, "tRPAREN", 90, "tLPAREN_ARG", 91, "tLBRACK", 92, "tLBRACK2", 93, "tRBRACK", 94, "tLBRACE", 95, "tLBRACE_ARG", 96, "tSTAR", 97, "tSTAR2", 98, "tAMPER", 99, "tAMPER2", 100, "tTILDE", 101, "tPERCENT", 102, "tDIVIDE", 103, "tDSTAR", 104, "tPLUS", 105, "tMINUS", 106, "tLT", 107, "tGT", 108, "tPIPE", 109, "tBANG", 110, "tCARET", 111, "tLCURLY", 112, "tRCURLY", 113, "tBACK_REF2", 114, "tSYMBEG", 115, "tSTRING_BEG", 116, "tXSTRING_BEG", 117, "tREGEXP_BEG", 118, "tREGEXP_OPT", 119, "tWORDS_BEG", 120, "tQWORDS_BEG", 121, "tSYMBOLS_BEG", 122, "tQSYMBOLS_BEG", 123, "tSTRING_DBEG", 124, "tSTRING_DVAR", 125, "tSTRING_END", 126, "tSTRING_DEND", 127, "tSTRING", 128, "tSYMBOL", 129, "tNL", 130, "tEH", 131, "tCOLON", 132, "tCOMMA", 133, "tSPACE", 134, "tSEMI", 135, "tLAMBDA", 136, "tLAMBEG", 137, "tCHARACTER", 138, "tRATIONAL", 139, "tIMAGINARY", 140, "tLABEL_END", 141, "tANDDOT", 142, "tEQL", 143, "tLOWEST", 144);
      racc_nt_base = 145;
      racc_use_result_var = true;
      Opal.const_set($nesting[0], 'Racc_arg', [racc_action_table, racc_action_check, racc_action_default, racc_action_pointer, racc_goto_table, racc_goto_check, racc_goto_default, racc_goto_pointer, racc_nt_base, racc_reduce_table, racc_token_table, racc_shift_n, racc_reduce_n, racc_use_result_var]);
      Opal.const_set($nesting[0], 'Racc_token_to_s_table', ["$end", "error", "kCLASS", "kMODULE", "kDEF", "kUNDEF", "kBEGIN", "kRESCUE", "kENSURE", "kEND", "kIF", "kUNLESS", "kTHEN", "kELSIF", "kELSE", "kCASE", "kWHEN", "kWHILE", "kUNTIL", "kFOR", "kBREAK", "kNEXT", "kREDO", "kRETRY", "kIN", "kDO", "kDO_COND", "kDO_BLOCK", "kDO_LAMBDA", "kRETURN", "kYIELD", "kSUPER", "kSELF", "kNIL", "kTRUE", "kFALSE", "kAND", "kOR", "kNOT", "kIF_MOD", "kUNLESS_MOD", "kWHILE_MOD", "kUNTIL_MOD", "kRESCUE_MOD", "kALIAS", "kDEFINED", "klBEGIN", "klEND", "k__LINE__", "k__FILE__", "k__ENCODING__", "tIDENTIFIER", "tFID", "tGVAR", "tIVAR", "tCONSTANT", "tLABEL", "tCVAR", "tNTH_REF", "tBACK_REF", "tSTRING_CONTENT", "tINTEGER", "tFLOAT", "tUPLUS", "tUMINUS", "tUNARY_NUM", "tPOW", "tCMP", "tEQ", "tEQQ", "tNEQ", "tGEQ", "tLEQ", "tANDOP", "tOROP", "tMATCH", "tNMATCH", "tDOT", "tDOT2", "tDOT3", "tAREF", "tASET", "tLSHFT", "tRSHFT", "tCOLON2", "tCOLON3", "tOP_ASGN", "tASSOC", "tLPAREN", "tLPAREN2", "tRPAREN", "tLPAREN_ARG", "tLBRACK", "tLBRACK2", "tRBRACK", "tLBRACE", "tLBRACE_ARG", "tSTAR", "tSTAR2", "tAMPER", "tAMPER2", "tTILDE", "tPERCENT", "tDIVIDE", "tDSTAR", "tPLUS", "tMINUS", "tLT", "tGT", "tPIPE", "tBANG", "tCARET", "tLCURLY", "tRCURLY", "tBACK_REF2", "tSYMBEG", "tSTRING_BEG", "tXSTRING_BEG", "tREGEXP_BEG", "tREGEXP_OPT", "tWORDS_BEG", "tQWORDS_BEG", "tSYMBOLS_BEG", "tQSYMBOLS_BEG", "tSTRING_DBEG", "tSTRING_DVAR", "tSTRING_END", "tSTRING_DEND", "tSTRING", "tSYMBOL", "tNL", "tEH", "tCOLON", "tCOMMA", "tSPACE", "tSEMI", "tLAMBDA", "tLAMBEG", "tCHARACTER", "tRATIONAL", "tIMAGINARY", "tLABEL_END", "tANDDOT", "tEQL", "tLOWEST", "$start", "program", "top_compstmt", "top_stmts", "opt_terms", "top_stmt", "terms", "stmt", "begin_block", "bodystmt", "compstmt", "opt_rescue", "opt_else", "opt_ensure", "stmts", "stmt_or_begin", "fitem", "undef_list", "expr_value", "command_asgn", "mlhs", "command_call", "lhs", "mrhs", "mrhs_arg", "expr", "@1", "command_rhs", "var_lhs", "primary_value", "opt_call_args", "rbracket", "call_op", "backref", "opt_nl", "arg", "expr_value_do", "do", "@2", "command", "block_command", "block_call", "dot_or_colon", "operation2", "command_args", "cmd_brace_block", "brace_body", "fcall", "@3", "operation", "k_return", "call_args", "mlhs_basic", "mlhs_inner", "rparen", "mlhs_head", "mlhs_item", "mlhs_node", "mlhs_post", "user_variable", "keyword_variable", "cname", "cpath", "fname", "op", "reswords", "fsym", "symbol", "dsym", "@4", "arg_rhs", "simple_numeric", "rel_expr", "primary", "relop", "arg_value", "aref_args", "none", "args", "trailer", "assocs", "paren_args", "opt_paren_args", "opt_block_arg", "block_arg", "@5", "literal", "strings", "xstring", "regexp", "words", "qwords", "symbols", "qsymbols", "var_ref", "assoc_list", "brace_block", "method_call", "lambda", "then", "if_tail", "case_body", "for_var", "superclass", "term", "f_arglist", "singleton", "@6", "@7", "@8", "@9", "@10", "@11", "@12", "@13", "@14", "@15", "f_marg", "f_norm_arg", "f_margs", "f_marg_list", "block_args_tail", "f_block_kwarg", "f_kwrest", "opt_f_block_arg", "f_block_arg", "opt_block_args_tail", "block_param", "f_arg", "f_block_optarg", "f_rest_arg", "opt_block_param", "block_param_def", "opt_bv_decl", "bv_decls", "bvar", "f_bad_arg", "f_larglist", "lambda_body", "@16", "@17", "f_args", "do_block", "@18", "@19", "do_body", "@20", "operation3", "@21", "@22", "@23", "@24", "@25", "cases", "exc_list", "exc_var", "numeric", "string", "string1", "string_contents", "xstring_contents", "regexp_contents", "word_list", "word", "string_content", "symbol_list", "qword_list", "qsym_list", "string_dvar", "@26", "@27", "args_tail", "@28", "f_kwarg", "opt_args_tail", "f_optarg", "f_arg_asgn", "f_arg_item", "f_label", "f_kw", "f_block_kw", "kwrest_mark", "f_opt", "f_block_opt", "restarg_mark", "blkarg_mark", "assoc"]);
      Opal.const_set($nesting[0], 'Racc_debug_parser', false);
      
      Opal.def(self, '$_reduce_2', $Ruby25__reduce_2$11 = function $$_reduce_2(val, _values, result) {
        var self = this;

        
        result = self.builder.$compstmt(val['$[]'](0));
        return result;
      }, $Ruby25__reduce_2$11.$$arity = 3);
      
      Opal.def(self, '$_reduce_3', $Ruby25__reduce_3$12 = function $$_reduce_3(val, _values, result) {
        var self = this;

        
        result = [];
        return result;
      }, $Ruby25__reduce_3$12.$$arity = 3);
      
      Opal.def(self, '$_reduce_4', $Ruby25__reduce_4$13 = function $$_reduce_4(val, _values, result) {
        var self = this;

        
        result = [val['$[]'](0)];
        return result;
      }, $Ruby25__reduce_4$13.$$arity = 3);
      
      Opal.def(self, '$_reduce_5', $Ruby25__reduce_5$14 = function $$_reduce_5(val, _values, result) {
        var self = this;

        
        result = val['$[]'](0)['$<<'](val['$[]'](2));
        return result;
      }, $Ruby25__reduce_5$14.$$arity = 3);
      
      Opal.def(self, '$_reduce_6', $Ruby25__reduce_6$15 = function $$_reduce_6(val, _values, result) {
        var self = this;

        
        result = [val['$[]'](1)];
        return result;
      }, $Ruby25__reduce_6$15.$$arity = 3);
      
      Opal.def(self, '$_reduce_8', $Ruby25__reduce_8$16 = function $$_reduce_8(val, _values, result) {
        var self = this;

        
        result = $send(self.builder, 'preexe', [val['$[]'](0)].concat(Opal.to_a(val['$[]'](1))));
        return result;
      }, $Ruby25__reduce_8$16.$$arity = 3);
      
      Opal.def(self, '$_reduce_9', $Ruby25__reduce_9$17 = function $$_reduce_9(val, _values, result) {
        var self = this;

        
        result = val;
        return result;
      }, $Ruby25__reduce_9$17.$$arity = 3);
      
      Opal.def(self, '$_reduce_10', $Ruby25__reduce_10$18 = function $$_reduce_10(val, _values, result) {
        var $a, $b, self = this, rescue_bodies = nil, else_t = nil, else_ = nil, ensure_t = nil, ensure_ = nil;

        
        rescue_bodies = val['$[]'](1);
        $b = val['$[]'](2), $a = Opal.to_ary($b), (else_t = ($a[0] == null ? nil : $a[0])), (else_ = ($a[1] == null ? nil : $a[1])), $b;
        $b = val['$[]'](3), $a = Opal.to_ary($b), (ensure_t = ($a[0] == null ? nil : $a[0])), (ensure_ = ($a[1] == null ? nil : $a[1])), $b;
        if ($truthy(($truthy($a = rescue_bodies['$empty?']()) ? else_t['$nil?']()['$!']() : $a))) {
          self.$diagnostic("warning", "useless_else", nil, else_t)};
        result = self.builder.$begin_body(val['$[]'](0), rescue_bodies, else_t, else_, ensure_t, ensure_);
        return result;
      }, $Ruby25__reduce_10$18.$$arity = 3);
      
      Opal.def(self, '$_reduce_11', $Ruby25__reduce_11$19 = function $$_reduce_11(val, _values, result) {
        var self = this;

        
        result = self.builder.$compstmt(val['$[]'](0));
        return result;
      }, $Ruby25__reduce_11$19.$$arity = 3);
      
      Opal.def(self, '$_reduce_12', $Ruby25__reduce_12$20 = function $$_reduce_12(val, _values, result) {
        var self = this;

        
        result = [];
        return result;
      }, $Ruby25__reduce_12$20.$$arity = 3);
      
      Opal.def(self, '$_reduce_13', $Ruby25__reduce_13$21 = function $$_reduce_13(val, _values, result) {
        var self = this;

        
        result = [val['$[]'](0)];
        return result;
      }, $Ruby25__reduce_13$21.$$arity = 3);
      
      Opal.def(self, '$_reduce_14', $Ruby25__reduce_14$22 = function $$_reduce_14(val, _values, result) {
        var self = this;

        
        result = val['$[]'](0)['$<<'](val['$[]'](2));
        return result;
      }, $Ruby25__reduce_14$22.$$arity = 3);
      
      Opal.def(self, '$_reduce_15', $Ruby25__reduce_15$23 = function $$_reduce_15(val, _values, result) {
        var self = this;

        
        result = [val['$[]'](1)];
        return result;
      }, $Ruby25__reduce_15$23.$$arity = 3);
      
      Opal.def(self, '$_reduce_17', $Ruby25__reduce_17$24 = function $$_reduce_17(val, _values, result) {
        var self = this;

        
        self.$diagnostic("error", "begin_in_method", nil, val['$[]'](0));
        return result;
      }, $Ruby25__reduce_17$24.$$arity = 3);
      
      Opal.def(self, '$_reduce_18', $Ruby25__reduce_18$25 = function $$_reduce_18(val, _values, result) {
        var self = this, $writer = nil;

        
        
        $writer = ["expr_fname"];
        $send(self.lexer, 'state=', Opal.to_a($writer));
        $writer[$rb_minus($writer["length"], 1)];;
        return result;
      }, $Ruby25__reduce_18$25.$$arity = 3);
      
      Opal.def(self, '$_reduce_19', $Ruby25__reduce_19$26 = function $$_reduce_19(val, _values, result) {
        var self = this;

        
        result = self.builder.$alias(val['$[]'](0), val['$[]'](1), val['$[]'](3));
        return result;
      }, $Ruby25__reduce_19$26.$$arity = 3);
      
      Opal.def(self, '$_reduce_20', $Ruby25__reduce_20$27 = function $$_reduce_20(val, _values, result) {
        var self = this;

        
        result = self.builder.$alias(val['$[]'](0), self.builder.$gvar(val['$[]'](1)), self.builder.$gvar(val['$[]'](2)));
        return result;
      }, $Ruby25__reduce_20$27.$$arity = 3);
      
      Opal.def(self, '$_reduce_21', $Ruby25__reduce_21$28 = function $$_reduce_21(val, _values, result) {
        var self = this;

        
        result = self.builder.$alias(val['$[]'](0), self.builder.$gvar(val['$[]'](1)), self.builder.$back_ref(val['$[]'](2)));
        return result;
      }, $Ruby25__reduce_21$28.$$arity = 3);
      
      Opal.def(self, '$_reduce_22', $Ruby25__reduce_22$29 = function $$_reduce_22(val, _values, result) {
        var self = this;

        
        self.$diagnostic("error", "nth_ref_alias", nil, val['$[]'](2));
        return result;
      }, $Ruby25__reduce_22$29.$$arity = 3);
      
      Opal.def(self, '$_reduce_23', $Ruby25__reduce_23$30 = function $$_reduce_23(val, _values, result) {
        var self = this;

        
        result = self.builder.$undef_method(val['$[]'](0), val['$[]'](1));
        return result;
      }, $Ruby25__reduce_23$30.$$arity = 3);
      
      Opal.def(self, '$_reduce_24', $Ruby25__reduce_24$31 = function $$_reduce_24(val, _values, result) {
        var self = this;

        
        result = self.builder.$condition_mod(val['$[]'](0), nil, val['$[]'](1), val['$[]'](2));
        return result;
      }, $Ruby25__reduce_24$31.$$arity = 3);
      
      Opal.def(self, '$_reduce_25', $Ruby25__reduce_25$32 = function $$_reduce_25(val, _values, result) {
        var self = this;

        
        result = self.builder.$condition_mod(nil, val['$[]'](0), val['$[]'](1), val['$[]'](2));
        return result;
      }, $Ruby25__reduce_25$32.$$arity = 3);
      
      Opal.def(self, '$_reduce_26', $Ruby25__reduce_26$33 = function $$_reduce_26(val, _values, result) {
        var self = this;

        
        result = self.builder.$loop_mod("while", val['$[]'](0), val['$[]'](1), val['$[]'](2));
        return result;
      }, $Ruby25__reduce_26$33.$$arity = 3);
      
      Opal.def(self, '$_reduce_27', $Ruby25__reduce_27$34 = function $$_reduce_27(val, _values, result) {
        var self = this;

        
        result = self.builder.$loop_mod("until", val['$[]'](0), val['$[]'](1), val['$[]'](2));
        return result;
      }, $Ruby25__reduce_27$34.$$arity = 3);
      
      Opal.def(self, '$_reduce_28', $Ruby25__reduce_28$35 = function $$_reduce_28(val, _values, result) {
        var self = this, rescue_body = nil;

        
        rescue_body = self.builder.$rescue_body(val['$[]'](1), nil, nil, nil, nil, val['$[]'](2));
        result = self.builder.$begin_body(val['$[]'](0), [rescue_body]);
        return result;
      }, $Ruby25__reduce_28$35.$$arity = 3);
      
      Opal.def(self, '$_reduce_29', $Ruby25__reduce_29$36 = function $$_reduce_29(val, _values, result) {
        var self = this;

        
        result = self.builder.$postexe(val['$[]'](0), val['$[]'](1), val['$[]'](2), val['$[]'](3));
        return result;
      }, $Ruby25__reduce_29$36.$$arity = 3);
      
      Opal.def(self, '$_reduce_31', $Ruby25__reduce_31$37 = function $$_reduce_31(val, _values, result) {
        var self = this;

        
        result = self.builder.$multi_assign(val['$[]'](0), val['$[]'](1), val['$[]'](2));
        return result;
      }, $Ruby25__reduce_31$37.$$arity = 3);
      
      Opal.def(self, '$_reduce_32', $Ruby25__reduce_32$38 = function $$_reduce_32(val, _values, result) {
        var self = this;

        
        result = self.builder.$assign(val['$[]'](0), val['$[]'](1), self.builder.$array(nil, val['$[]'](2), nil));
        return result;
      }, $Ruby25__reduce_32$38.$$arity = 3);
      
      Opal.def(self, '$_reduce_33', $Ruby25__reduce_33$39 = function $$_reduce_33(val, _values, result) {
        var self = this;

        
        result = self.builder.$multi_assign(val['$[]'](0), val['$[]'](1), val['$[]'](2));
        return result;
      }, $Ruby25__reduce_33$39.$$arity = 3);
      
      Opal.def(self, '$_reduce_35', $Ruby25__reduce_35$40 = function $$_reduce_35(val, _values, result) {
        var self = this;

        
        result = self.builder.$assign(val['$[]'](0), val['$[]'](1), val['$[]'](2));
        return result;
      }, $Ruby25__reduce_35$40.$$arity = 3);
      
      Opal.def(self, '$_reduce_36', $Ruby25__reduce_36$41 = function $$_reduce_36(val, _values, result) {
        var self = this;

        
        result = self.builder.$op_assign(val['$[]'](0), val['$[]'](1), val['$[]'](2));
        return result;
      }, $Ruby25__reduce_36$41.$$arity = 3);
      
      Opal.def(self, '$_reduce_37', $Ruby25__reduce_37$42 = function $$_reduce_37(val, _values, result) {
        var self = this;

        
        result = self.builder.$op_assign(self.builder.$index(val['$[]'](0), val['$[]'](1), val['$[]'](2), val['$[]'](3)), val['$[]'](4), val['$[]'](5));
        return result;
      }, $Ruby25__reduce_37$42.$$arity = 3);
      
      Opal.def(self, '$_reduce_38', $Ruby25__reduce_38$43 = function $$_reduce_38(val, _values, result) {
        var self = this;

        
        result = self.builder.$op_assign(self.builder.$call_method(val['$[]'](0), val['$[]'](1), val['$[]'](2)), val['$[]'](3), val['$[]'](4));
        return result;
      }, $Ruby25__reduce_38$43.$$arity = 3);
      
      Opal.def(self, '$_reduce_39', $Ruby25__reduce_39$44 = function $$_reduce_39(val, _values, result) {
        var self = this;

        
        result = self.builder.$op_assign(self.builder.$call_method(val['$[]'](0), val['$[]'](1), val['$[]'](2)), val['$[]'](3), val['$[]'](4));
        return result;
      }, $Ruby25__reduce_39$44.$$arity = 3);
      
      Opal.def(self, '$_reduce_40', $Ruby25__reduce_40$45 = function $$_reduce_40(val, _values, result) {
        var self = this, const$ = nil;

        
        const$ = self.builder.$const_op_assignable(self.builder.$const_fetch(val['$[]'](0), val['$[]'](1), val['$[]'](2)));
        result = self.builder.$op_assign(const$, val['$[]'](3), val['$[]'](4));
        return result;
      }, $Ruby25__reduce_40$45.$$arity = 3);
      
      Opal.def(self, '$_reduce_41', $Ruby25__reduce_41$46 = function $$_reduce_41(val, _values, result) {
        var self = this;

        
        result = self.builder.$op_assign(self.builder.$call_method(val['$[]'](0), val['$[]'](1), val['$[]'](2)), val['$[]'](3), val['$[]'](4));
        return result;
      }, $Ruby25__reduce_41$46.$$arity = 3);
      
      Opal.def(self, '$_reduce_42', $Ruby25__reduce_42$47 = function $$_reduce_42(val, _values, result) {
        var self = this;

        
        self.builder.$op_assign(val['$[]'](0), val['$[]'](1), val['$[]'](2));
        return result;
      }, $Ruby25__reduce_42$47.$$arity = 3);
      
      Opal.def(self, '$_reduce_44', $Ruby25__reduce_44$48 = function $$_reduce_44(val, _values, result) {
        var self = this, rescue_body = nil;

        
        rescue_body = self.builder.$rescue_body(val['$[]'](1), nil, nil, nil, nil, val['$[]'](2));
        result = self.builder.$begin_body(val['$[]'](0), [rescue_body]);
        return result;
      }, $Ruby25__reduce_44$48.$$arity = 3);
      
      Opal.def(self, '$_reduce_47', $Ruby25__reduce_47$49 = function $$_reduce_47(val, _values, result) {
        var self = this;

        
        result = self.builder.$logical_op("and", val['$[]'](0), val['$[]'](1), val['$[]'](2));
        return result;
      }, $Ruby25__reduce_47$49.$$arity = 3);
      
      Opal.def(self, '$_reduce_48', $Ruby25__reduce_48$50 = function $$_reduce_48(val, _values, result) {
        var self = this;

        
        result = self.builder.$logical_op("or", val['$[]'](0), val['$[]'](1), val['$[]'](2));
        return result;
      }, $Ruby25__reduce_48$50.$$arity = 3);
      
      Opal.def(self, '$_reduce_49', $Ruby25__reduce_49$51 = function $$_reduce_49(val, _values, result) {
        var self = this;

        
        result = self.builder.$not_op(val['$[]'](0), nil, val['$[]'](2), nil);
        return result;
      }, $Ruby25__reduce_49$51.$$arity = 3);
      
      Opal.def(self, '$_reduce_50', $Ruby25__reduce_50$52 = function $$_reduce_50(val, _values, result) {
        var self = this;

        
        result = self.builder.$not_op(val['$[]'](0), nil, val['$[]'](1), nil);
        return result;
      }, $Ruby25__reduce_50$52.$$arity = 3);
      
      Opal.def(self, '$_reduce_53', $Ruby25__reduce_53$53 = function $$_reduce_53(val, _values, result) {
        var self = this;

        
        self.lexer.$cond().$push(true);
        return result;
      }, $Ruby25__reduce_53$53.$$arity = 3);
      
      Opal.def(self, '$_reduce_54', $Ruby25__reduce_54$54 = function $$_reduce_54(val, _values, result) {
        var self = this;

        
        self.lexer.$cond().$pop();
        result = [val['$[]'](1), val['$[]'](2)];
        return result;
      }, $Ruby25__reduce_54$54.$$arity = 3);
      
      Opal.def(self, '$_reduce_58', $Ruby25__reduce_58$55 = function $$_reduce_58(val, _values, result) {
        var self = this;

        
        result = self.builder.$call_method(val['$[]'](0), val['$[]'](1), val['$[]'](2), nil, val['$[]'](3), nil);
        return result;
      }, $Ruby25__reduce_58$55.$$arity = 3);
      
      Opal.def(self, '$_reduce_59', $Ruby25__reduce_59$56 = function $$_reduce_59(val, _values, result) {
        var self = this;

        
        self.context.$push("block");
        return result;
      }, $Ruby25__reduce_59$56.$$arity = 3);
      
      Opal.def(self, '$_reduce_60', $Ruby25__reduce_60$57 = function $$_reduce_60(val, _values, result) {
        var self = this;

        
        result = [val['$[]'](0)].concat(Opal.to_a(val['$[]'](2))).concat([val['$[]'](3)]);
        self.context.$pop();
        return result;
      }, $Ruby25__reduce_60$57.$$arity = 3);
      
      Opal.def(self, '$_reduce_62', $Ruby25__reduce_62$58 = function $$_reduce_62(val, _values, result) {
        var self = this;

        
        result = self.builder.$call_method(nil, nil, val['$[]'](0), nil, val['$[]'](1), nil);
        return result;
      }, $Ruby25__reduce_62$58.$$arity = 3);
      
      Opal.def(self, '$_reduce_63', $Ruby25__reduce_63$59 = function $$_reduce_63(val, _values, result) {
        var $a, $b, self = this, method_call = nil, begin_t = nil, args = nil, body = nil, end_t = nil;

        
        method_call = self.builder.$call_method(nil, nil, val['$[]'](0), nil, val['$[]'](1), nil);
        $b = val['$[]'](2), $a = Opal.to_ary($b), (begin_t = ($a[0] == null ? nil : $a[0])), (args = ($a[1] == null ? nil : $a[1])), (body = ($a[2] == null ? nil : $a[2])), (end_t = ($a[3] == null ? nil : $a[3])), $b;
        result = self.builder.$block(method_call, begin_t, args, body, end_t);
        return result;
      }, $Ruby25__reduce_63$59.$$arity = 3);
      
      Opal.def(self, '$_reduce_64', $Ruby25__reduce_64$60 = function $$_reduce_64(val, _values, result) {
        var self = this;

        
        result = self.builder.$call_method(val['$[]'](0), val['$[]'](1), val['$[]'](2), nil, val['$[]'](3), nil);
        return result;
      }, $Ruby25__reduce_64$60.$$arity = 3);
      
      Opal.def(self, '$_reduce_65', $Ruby25__reduce_65$61 = function $$_reduce_65(val, _values, result) {
        var $a, $b, self = this, method_call = nil, begin_t = nil, args = nil, body = nil, end_t = nil;

        
        method_call = self.builder.$call_method(val['$[]'](0), val['$[]'](1), val['$[]'](2), nil, val['$[]'](3), nil);
        $b = val['$[]'](4), $a = Opal.to_ary($b), (begin_t = ($a[0] == null ? nil : $a[0])), (args = ($a[1] == null ? nil : $a[1])), (body = ($a[2] == null ? nil : $a[2])), (end_t = ($a[3] == null ? nil : $a[3])), $b;
        result = self.builder.$block(method_call, begin_t, args, body, end_t);
        return result;
      }, $Ruby25__reduce_65$61.$$arity = 3);
      
      Opal.def(self, '$_reduce_66', $Ruby25__reduce_66$62 = function $$_reduce_66(val, _values, result) {
        var self = this;

        
        result = self.builder.$call_method(val['$[]'](0), val['$[]'](1), val['$[]'](2), nil, val['$[]'](3), nil);
        return result;
      }, $Ruby25__reduce_66$62.$$arity = 3);
      
      Opal.def(self, '$_reduce_67', $Ruby25__reduce_67$63 = function $$_reduce_67(val, _values, result) {
        var $a, $b, self = this, method_call = nil, begin_t = nil, args = nil, body = nil, end_t = nil;

        
        method_call = self.builder.$call_method(val['$[]'](0), val['$[]'](1), val['$[]'](2), nil, val['$[]'](3), nil);
        $b = val['$[]'](4), $a = Opal.to_ary($b), (begin_t = ($a[0] == null ? nil : $a[0])), (args = ($a[1] == null ? nil : $a[1])), (body = ($a[2] == null ? nil : $a[2])), (end_t = ($a[3] == null ? nil : $a[3])), $b;
        result = self.builder.$block(method_call, begin_t, args, body, end_t);
        return result;
      }, $Ruby25__reduce_67$63.$$arity = 3);
      
      Opal.def(self, '$_reduce_68', $Ruby25__reduce_68$64 = function $$_reduce_68(val, _values, result) {
        var self = this;

        
        result = self.builder.$keyword_cmd("super", val['$[]'](0), nil, val['$[]'](1), nil);
        return result;
      }, $Ruby25__reduce_68$64.$$arity = 3);
      
      Opal.def(self, '$_reduce_69', $Ruby25__reduce_69$65 = function $$_reduce_69(val, _values, result) {
        var self = this;

        
        result = self.builder.$keyword_cmd("yield", val['$[]'](0), nil, val['$[]'](1), nil);
        return result;
      }, $Ruby25__reduce_69$65.$$arity = 3);
      
      Opal.def(self, '$_reduce_70', $Ruby25__reduce_70$66 = function $$_reduce_70(val, _values, result) {
        var self = this;

        
        result = self.builder.$keyword_cmd("return", val['$[]'](0), nil, val['$[]'](1), nil);
        return result;
      }, $Ruby25__reduce_70$66.$$arity = 3);
      
      Opal.def(self, '$_reduce_71', $Ruby25__reduce_71$67 = function $$_reduce_71(val, _values, result) {
        var self = this;

        
        result = self.builder.$keyword_cmd("break", val['$[]'](0), nil, val['$[]'](1), nil);
        return result;
      }, $Ruby25__reduce_71$67.$$arity = 3);
      
      Opal.def(self, '$_reduce_72', $Ruby25__reduce_72$68 = function $$_reduce_72(val, _values, result) {
        var self = this;

        
        result = self.builder.$keyword_cmd("next", val['$[]'](0), nil, val['$[]'](1), nil);
        return result;
      }, $Ruby25__reduce_72$68.$$arity = 3);
      
      Opal.def(self, '$_reduce_73', $Ruby25__reduce_73$69 = function $$_reduce_73(val, _values, result) {
        var self = this;

        
        result = self.builder.$multi_lhs(nil, val['$[]'](0), nil);
        return result;
      }, $Ruby25__reduce_73$69.$$arity = 3);
      
      Opal.def(self, '$_reduce_74', $Ruby25__reduce_74$70 = function $$_reduce_74(val, _values, result) {
        var self = this;

        
        result = self.builder.$begin(val['$[]'](0), val['$[]'](1), val['$[]'](2));
        return result;
      }, $Ruby25__reduce_74$70.$$arity = 3);
      
      Opal.def(self, '$_reduce_75', $Ruby25__reduce_75$71 = function $$_reduce_75(val, _values, result) {
        var self = this;

        
        result = self.builder.$multi_lhs(nil, val['$[]'](0), nil);
        return result;
      }, $Ruby25__reduce_75$71.$$arity = 3);
      
      Opal.def(self, '$_reduce_76', $Ruby25__reduce_76$72 = function $$_reduce_76(val, _values, result) {
        var self = this;

        
        result = self.builder.$multi_lhs(val['$[]'](0), val['$[]'](1), val['$[]'](2));
        return result;
      }, $Ruby25__reduce_76$72.$$arity = 3);
      
      Opal.def(self, '$_reduce_78', $Ruby25__reduce_78$73 = function $$_reduce_78(val, _values, result) {
        var self = this;

        
        result = val['$[]'](0).$push(val['$[]'](1));
        return result;
      }, $Ruby25__reduce_78$73.$$arity = 3);
      
      Opal.def(self, '$_reduce_79', $Ruby25__reduce_79$74 = function $$_reduce_79(val, _values, result) {
        var self = this;

        
        result = val['$[]'](0).$push(self.builder.$splat(val['$[]'](1), val['$[]'](2)));
        return result;
      }, $Ruby25__reduce_79$74.$$arity = 3);
      
      Opal.def(self, '$_reduce_80', $Ruby25__reduce_80$75 = function $$_reduce_80(val, _values, result) {
        var self = this;

        
        result = val['$[]'](0).$push(self.builder.$splat(val['$[]'](1), val['$[]'](2))).$concat(val['$[]'](4));
        return result;
      }, $Ruby25__reduce_80$75.$$arity = 3);
      
      Opal.def(self, '$_reduce_81', $Ruby25__reduce_81$76 = function $$_reduce_81(val, _values, result) {
        var self = this;

        
        result = val['$[]'](0).$push(self.builder.$splat(val['$[]'](1)));
        return result;
      }, $Ruby25__reduce_81$76.$$arity = 3);
      
      Opal.def(self, '$_reduce_82', $Ruby25__reduce_82$77 = function $$_reduce_82(val, _values, result) {
        var self = this;

        
        result = val['$[]'](0).$push(self.builder.$splat(val['$[]'](1))).$concat(val['$[]'](3));
        return result;
      }, $Ruby25__reduce_82$77.$$arity = 3);
      
      Opal.def(self, '$_reduce_83', $Ruby25__reduce_83$78 = function $$_reduce_83(val, _values, result) {
        var self = this;

        
        result = [self.builder.$splat(val['$[]'](0), val['$[]'](1))];
        return result;
      }, $Ruby25__reduce_83$78.$$arity = 3);
      
      Opal.def(self, '$_reduce_84', $Ruby25__reduce_84$79 = function $$_reduce_84(val, _values, result) {
        var self = this;

        
        result = [self.builder.$splat(val['$[]'](0), val['$[]'](1))].concat(Opal.to_a(val['$[]'](3)));
        return result;
      }, $Ruby25__reduce_84$79.$$arity = 3);
      
      Opal.def(self, '$_reduce_85', $Ruby25__reduce_85$80 = function $$_reduce_85(val, _values, result) {
        var self = this;

        
        result = [self.builder.$splat(val['$[]'](0))];
        return result;
      }, $Ruby25__reduce_85$80.$$arity = 3);
      
      Opal.def(self, '$_reduce_86', $Ruby25__reduce_86$81 = function $$_reduce_86(val, _values, result) {
        var self = this;

        
        result = [self.builder.$splat(val['$[]'](0))].concat(Opal.to_a(val['$[]'](2)));
        return result;
      }, $Ruby25__reduce_86$81.$$arity = 3);
      
      Opal.def(self, '$_reduce_88', $Ruby25__reduce_88$82 = function $$_reduce_88(val, _values, result) {
        var self = this;

        
        result = self.builder.$begin(val['$[]'](0), val['$[]'](1), val['$[]'](2));
        return result;
      }, $Ruby25__reduce_88$82.$$arity = 3);
      
      Opal.def(self, '$_reduce_89', $Ruby25__reduce_89$83 = function $$_reduce_89(val, _values, result) {
        var self = this;

        
        result = [val['$[]'](0)];
        return result;
      }, $Ruby25__reduce_89$83.$$arity = 3);
      
      Opal.def(self, '$_reduce_90', $Ruby25__reduce_90$84 = function $$_reduce_90(val, _values, result) {
        var self = this;

        
        result = val['$[]'](0)['$<<'](val['$[]'](1));
        return result;
      }, $Ruby25__reduce_90$84.$$arity = 3);
      
      Opal.def(self, '$_reduce_91', $Ruby25__reduce_91$85 = function $$_reduce_91(val, _values, result) {
        var self = this;

        
        result = [val['$[]'](0)];
        return result;
      }, $Ruby25__reduce_91$85.$$arity = 3);
      
      Opal.def(self, '$_reduce_92', $Ruby25__reduce_92$86 = function $$_reduce_92(val, _values, result) {
        var self = this;

        
        result = val['$[]'](0)['$<<'](val['$[]'](2));
        return result;
      }, $Ruby25__reduce_92$86.$$arity = 3);
      
      Opal.def(self, '$_reduce_93', $Ruby25__reduce_93$87 = function $$_reduce_93(val, _values, result) {
        var self = this;

        
        result = self.builder.$assignable(val['$[]'](0));
        return result;
      }, $Ruby25__reduce_93$87.$$arity = 3);
      
      Opal.def(self, '$_reduce_94', $Ruby25__reduce_94$88 = function $$_reduce_94(val, _values, result) {
        var self = this;

        
        result = self.builder.$assignable(val['$[]'](0));
        return result;
      }, $Ruby25__reduce_94$88.$$arity = 3);
      
      Opal.def(self, '$_reduce_95', $Ruby25__reduce_95$89 = function $$_reduce_95(val, _values, result) {
        var self = this;

        
        result = self.builder.$index_asgn(val['$[]'](0), val['$[]'](1), val['$[]'](2), val['$[]'](3));
        return result;
      }, $Ruby25__reduce_95$89.$$arity = 3);
      
      Opal.def(self, '$_reduce_96', $Ruby25__reduce_96$90 = function $$_reduce_96(val, _values, result) {
        var self = this;

        
        result = self.builder.$attr_asgn(val['$[]'](0), val['$[]'](1), val['$[]'](2));
        return result;
      }, $Ruby25__reduce_96$90.$$arity = 3);
      
      Opal.def(self, '$_reduce_97', $Ruby25__reduce_97$91 = function $$_reduce_97(val, _values, result) {
        var self = this;

        
        result = self.builder.$attr_asgn(val['$[]'](0), val['$[]'](1), val['$[]'](2));
        return result;
      }, $Ruby25__reduce_97$91.$$arity = 3);
      
      Opal.def(self, '$_reduce_98', $Ruby25__reduce_98$92 = function $$_reduce_98(val, _values, result) {
        var self = this;

        
        result = self.builder.$attr_asgn(val['$[]'](0), val['$[]'](1), val['$[]'](2));
        return result;
      }, $Ruby25__reduce_98$92.$$arity = 3);
      
      Opal.def(self, '$_reduce_99', $Ruby25__reduce_99$93 = function $$_reduce_99(val, _values, result) {
        var self = this;

        
        result = self.builder.$assignable(self.builder.$const_fetch(val['$[]'](0), val['$[]'](1), val['$[]'](2)));
        return result;
      }, $Ruby25__reduce_99$93.$$arity = 3);
      
      Opal.def(self, '$_reduce_100', $Ruby25__reduce_100$94 = function $$_reduce_100(val, _values, result) {
        var self = this;

        
        result = self.builder.$assignable(self.builder.$const_global(val['$[]'](0), val['$[]'](1)));
        return result;
      }, $Ruby25__reduce_100$94.$$arity = 3);
      
      Opal.def(self, '$_reduce_101', $Ruby25__reduce_101$95 = function $$_reduce_101(val, _values, result) {
        var self = this;

        
        result = self.builder.$assignable(val['$[]'](0));
        return result;
      }, $Ruby25__reduce_101$95.$$arity = 3);
      
      Opal.def(self, '$_reduce_102', $Ruby25__reduce_102$96 = function $$_reduce_102(val, _values, result) {
        var self = this;

        
        result = self.builder.$assignable(val['$[]'](0));
        return result;
      }, $Ruby25__reduce_102$96.$$arity = 3);
      
      Opal.def(self, '$_reduce_103', $Ruby25__reduce_103$97 = function $$_reduce_103(val, _values, result) {
        var self = this;

        
        result = self.builder.$assignable(val['$[]'](0));
        return result;
      }, $Ruby25__reduce_103$97.$$arity = 3);
      
      Opal.def(self, '$_reduce_104', $Ruby25__reduce_104$98 = function $$_reduce_104(val, _values, result) {
        var self = this;

        
        result = self.builder.$index_asgn(val['$[]'](0), val['$[]'](1), val['$[]'](2), val['$[]'](3));
        return result;
      }, $Ruby25__reduce_104$98.$$arity = 3);
      
      Opal.def(self, '$_reduce_105', $Ruby25__reduce_105$99 = function $$_reduce_105(val, _values, result) {
        var self = this;

        
        result = self.builder.$attr_asgn(val['$[]'](0), val['$[]'](1), val['$[]'](2));
        return result;
      }, $Ruby25__reduce_105$99.$$arity = 3);
      
      Opal.def(self, '$_reduce_106', $Ruby25__reduce_106$100 = function $$_reduce_106(val, _values, result) {
        var self = this;

        
        result = self.builder.$attr_asgn(val['$[]'](0), val['$[]'](1), val['$[]'](2));
        return result;
      }, $Ruby25__reduce_106$100.$$arity = 3);
      
      Opal.def(self, '$_reduce_107', $Ruby25__reduce_107$101 = function $$_reduce_107(val, _values, result) {
        var self = this;

        
        result = self.builder.$attr_asgn(val['$[]'](0), val['$[]'](1), val['$[]'](2));
        return result;
      }, $Ruby25__reduce_107$101.$$arity = 3);
      
      Opal.def(self, '$_reduce_108', $Ruby25__reduce_108$102 = function $$_reduce_108(val, _values, result) {
        var self = this;

        
        result = self.builder.$assignable(self.builder.$const_fetch(val['$[]'](0), val['$[]'](1), val['$[]'](2)));
        return result;
      }, $Ruby25__reduce_108$102.$$arity = 3);
      
      Opal.def(self, '$_reduce_109', $Ruby25__reduce_109$103 = function $$_reduce_109(val, _values, result) {
        var self = this;

        
        result = self.builder.$assignable(self.builder.$const_global(val['$[]'](0), val['$[]'](1)));
        return result;
      }, $Ruby25__reduce_109$103.$$arity = 3);
      
      Opal.def(self, '$_reduce_110', $Ruby25__reduce_110$104 = function $$_reduce_110(val, _values, result) {
        var self = this;

        
        result = self.builder.$assignable(val['$[]'](0));
        return result;
      }, $Ruby25__reduce_110$104.$$arity = 3);
      
      Opal.def(self, '$_reduce_111', $Ruby25__reduce_111$105 = function $$_reduce_111(val, _values, result) {
        var self = this;

        
        self.$diagnostic("error", "module_name_const", nil, val['$[]'](0));
        return result;
      }, $Ruby25__reduce_111$105.$$arity = 3);
      
      Opal.def(self, '$_reduce_113', $Ruby25__reduce_113$106 = function $$_reduce_113(val, _values, result) {
        var self = this;

        
        result = self.builder.$const_global(val['$[]'](0), val['$[]'](1));
        return result;
      }, $Ruby25__reduce_113$106.$$arity = 3);
      
      Opal.def(self, '$_reduce_114', $Ruby25__reduce_114$107 = function $$_reduce_114(val, _values, result) {
        var self = this;

        
        result = self.builder.$const(val['$[]'](0));
        return result;
      }, $Ruby25__reduce_114$107.$$arity = 3);
      
      Opal.def(self, '$_reduce_115', $Ruby25__reduce_115$108 = function $$_reduce_115(val, _values, result) {
        var self = this;

        
        result = self.builder.$const_fetch(val['$[]'](0), val['$[]'](1), val['$[]'](2));
        return result;
      }, $Ruby25__reduce_115$108.$$arity = 3);
      
      Opal.def(self, '$_reduce_121', $Ruby25__reduce_121$109 = function $$_reduce_121(val, _values, result) {
        var self = this;

        
        result = self.builder.$symbol(val['$[]'](0));
        return result;
      }, $Ruby25__reduce_121$109.$$arity = 3);
      
      Opal.def(self, '$_reduce_125', $Ruby25__reduce_125$110 = function $$_reduce_125(val, _values, result) {
        var self = this;

        
        result = [val['$[]'](0)];
        return result;
      }, $Ruby25__reduce_125$110.$$arity = 3);
      
      Opal.def(self, '$_reduce_126', $Ruby25__reduce_126$111 = function $$_reduce_126(val, _values, result) {
        var self = this, $writer = nil;

        
        
        $writer = ["expr_fname"];
        $send(self.lexer, 'state=', Opal.to_a($writer));
        $writer[$rb_minus($writer["length"], 1)];;
        return result;
      }, $Ruby25__reduce_126$111.$$arity = 3);
      
      Opal.def(self, '$_reduce_127', $Ruby25__reduce_127$112 = function $$_reduce_127(val, _values, result) {
        var self = this;

        
        result = val['$[]'](0)['$<<'](val['$[]'](3));
        return result;
      }, $Ruby25__reduce_127$112.$$arity = 3);
      
      Opal.def(self, '$_reduce_199', $Ruby25__reduce_199$113 = function $$_reduce_199(val, _values, result) {
        var self = this;

        
        result = self.builder.$assign(val['$[]'](0), val['$[]'](1), val['$[]'](2));
        return result;
      }, $Ruby25__reduce_199$113.$$arity = 3);
      
      Opal.def(self, '$_reduce_200', $Ruby25__reduce_200$114 = function $$_reduce_200(val, _values, result) {
        var self = this;

        
        result = self.builder.$op_assign(val['$[]'](0), val['$[]'](1), val['$[]'](2));
        return result;
      }, $Ruby25__reduce_200$114.$$arity = 3);
      
      Opal.def(self, '$_reduce_201', $Ruby25__reduce_201$115 = function $$_reduce_201(val, _values, result) {
        var self = this;

        
        result = self.builder.$op_assign(self.builder.$index(val['$[]'](0), val['$[]'](1), val['$[]'](2), val['$[]'](3)), val['$[]'](4), val['$[]'](5));
        return result;
      }, $Ruby25__reduce_201$115.$$arity = 3);
      
      Opal.def(self, '$_reduce_202', $Ruby25__reduce_202$116 = function $$_reduce_202(val, _values, result) {
        var self = this;

        
        result = self.builder.$op_assign(self.builder.$call_method(val['$[]'](0), val['$[]'](1), val['$[]'](2)), val['$[]'](3), val['$[]'](4));
        return result;
      }, $Ruby25__reduce_202$116.$$arity = 3);
      
      Opal.def(self, '$_reduce_203', $Ruby25__reduce_203$117 = function $$_reduce_203(val, _values, result) {
        var self = this;

        
        result = self.builder.$op_assign(self.builder.$call_method(val['$[]'](0), val['$[]'](1), val['$[]'](2)), val['$[]'](3), val['$[]'](4));
        return result;
      }, $Ruby25__reduce_203$117.$$arity = 3);
      
      Opal.def(self, '$_reduce_204', $Ruby25__reduce_204$118 = function $$_reduce_204(val, _values, result) {
        var self = this;

        
        result = self.builder.$op_assign(self.builder.$call_method(val['$[]'](0), val['$[]'](1), val['$[]'](2)), val['$[]'](3), val['$[]'](4));
        return result;
      }, $Ruby25__reduce_204$118.$$arity = 3);
      
      Opal.def(self, '$_reduce_205', $Ruby25__reduce_205$119 = function $$_reduce_205(val, _values, result) {
        var self = this, const$ = nil;

        
        const$ = self.builder.$const_op_assignable(self.builder.$const_fetch(val['$[]'](0), val['$[]'](1), val['$[]'](2)));
        result = self.builder.$op_assign(const$, val['$[]'](3), val['$[]'](4));
        return result;
      }, $Ruby25__reduce_205$119.$$arity = 3);
      
      Opal.def(self, '$_reduce_206', $Ruby25__reduce_206$120 = function $$_reduce_206(val, _values, result) {
        var self = this, const$ = nil;

        
        const$ = self.builder.$const_op_assignable(self.builder.$const_global(val['$[]'](0), val['$[]'](1)));
        result = self.builder.$op_assign(const$, val['$[]'](2), val['$[]'](3));
        return result;
      }, $Ruby25__reduce_206$120.$$arity = 3);
      
      Opal.def(self, '$_reduce_207', $Ruby25__reduce_207$121 = function $$_reduce_207(val, _values, result) {
        var self = this;

        
        result = self.builder.$op_assign(val['$[]'](0), val['$[]'](1), val['$[]'](2));
        return result;
      }, $Ruby25__reduce_207$121.$$arity = 3);
      
      Opal.def(self, '$_reduce_208', $Ruby25__reduce_208$122 = function $$_reduce_208(val, _values, result) {
        var self = this;

        
        result = self.builder.$range_inclusive(val['$[]'](0), val['$[]'](1), val['$[]'](2));
        return result;
      }, $Ruby25__reduce_208$122.$$arity = 3);
      
      Opal.def(self, '$_reduce_209', $Ruby25__reduce_209$123 = function $$_reduce_209(val, _values, result) {
        var self = this;

        
        result = self.builder.$range_exclusive(val['$[]'](0), val['$[]'](1), val['$[]'](2));
        return result;
      }, $Ruby25__reduce_209$123.$$arity = 3);
      
      Opal.def(self, '$_reduce_210', $Ruby25__reduce_210$124 = function $$_reduce_210(val, _values, result) {
        var self = this;

        
        result = self.builder.$binary_op(val['$[]'](0), val['$[]'](1), val['$[]'](2));
        return result;
      }, $Ruby25__reduce_210$124.$$arity = 3);
      
      Opal.def(self, '$_reduce_211', $Ruby25__reduce_211$125 = function $$_reduce_211(val, _values, result) {
        var self = this;

        
        result = self.builder.$binary_op(val['$[]'](0), val['$[]'](1), val['$[]'](2));
        return result;
      }, $Ruby25__reduce_211$125.$$arity = 3);
      
      Opal.def(self, '$_reduce_212', $Ruby25__reduce_212$126 = function $$_reduce_212(val, _values, result) {
        var self = this;

        
        result = self.builder.$binary_op(val['$[]'](0), val['$[]'](1), val['$[]'](2));
        return result;
      }, $Ruby25__reduce_212$126.$$arity = 3);
      
      Opal.def(self, '$_reduce_213', $Ruby25__reduce_213$127 = function $$_reduce_213(val, _values, result) {
        var self = this;

        
        result = self.builder.$binary_op(val['$[]'](0), val['$[]'](1), val['$[]'](2));
        return result;
      }, $Ruby25__reduce_213$127.$$arity = 3);
      
      Opal.def(self, '$_reduce_214', $Ruby25__reduce_214$128 = function $$_reduce_214(val, _values, result) {
        var self = this;

        
        result = self.builder.$binary_op(val['$[]'](0), val['$[]'](1), val['$[]'](2));
        return result;
      }, $Ruby25__reduce_214$128.$$arity = 3);
      
      Opal.def(self, '$_reduce_215', $Ruby25__reduce_215$129 = function $$_reduce_215(val, _values, result) {
        var self = this;

        
        result = self.builder.$binary_op(val['$[]'](0), val['$[]'](1), val['$[]'](2));
        return result;
      }, $Ruby25__reduce_215$129.$$arity = 3);
      
      Opal.def(self, '$_reduce_216', $Ruby25__reduce_216$130 = function $$_reduce_216(val, _values, result) {
        var self = this;

        
        result = self.builder.$unary_op(val['$[]'](0), self.builder.$binary_op(val['$[]'](1), val['$[]'](2), val['$[]'](3)));
        return result;
      }, $Ruby25__reduce_216$130.$$arity = 3);
      
      Opal.def(self, '$_reduce_217', $Ruby25__reduce_217$131 = function $$_reduce_217(val, _values, result) {
        var self = this;

        
        result = self.builder.$unary_op(val['$[]'](0), val['$[]'](1));
        return result;
      }, $Ruby25__reduce_217$131.$$arity = 3);
      
      Opal.def(self, '$_reduce_218', $Ruby25__reduce_218$132 = function $$_reduce_218(val, _values, result) {
        var self = this;

        
        result = self.builder.$unary_op(val['$[]'](0), val['$[]'](1));
        return result;
      }, $Ruby25__reduce_218$132.$$arity = 3);
      
      Opal.def(self, '$_reduce_219', $Ruby25__reduce_219$133 = function $$_reduce_219(val, _values, result) {
        var self = this;

        
        result = self.builder.$binary_op(val['$[]'](0), val['$[]'](1), val['$[]'](2));
        return result;
      }, $Ruby25__reduce_219$133.$$arity = 3);
      
      Opal.def(self, '$_reduce_220', $Ruby25__reduce_220$134 = function $$_reduce_220(val, _values, result) {
        var self = this;

        
        result = self.builder.$binary_op(val['$[]'](0), val['$[]'](1), val['$[]'](2));
        return result;
      }, $Ruby25__reduce_220$134.$$arity = 3);
      
      Opal.def(self, '$_reduce_221', $Ruby25__reduce_221$135 = function $$_reduce_221(val, _values, result) {
        var self = this;

        
        result = self.builder.$binary_op(val['$[]'](0), val['$[]'](1), val['$[]'](2));
        return result;
      }, $Ruby25__reduce_221$135.$$arity = 3);
      
      Opal.def(self, '$_reduce_222', $Ruby25__reduce_222$136 = function $$_reduce_222(val, _values, result) {
        var self = this;

        
        result = self.builder.$binary_op(val['$[]'](0), val['$[]'](1), val['$[]'](2));
        return result;
      }, $Ruby25__reduce_222$136.$$arity = 3);
      
      Opal.def(self, '$_reduce_224', $Ruby25__reduce_224$137 = function $$_reduce_224(val, _values, result) {
        var self = this;

        
        result = self.builder.$binary_op(val['$[]'](0), val['$[]'](1), val['$[]'](2));
        return result;
      }, $Ruby25__reduce_224$137.$$arity = 3);
      
      Opal.def(self, '$_reduce_225', $Ruby25__reduce_225$138 = function $$_reduce_225(val, _values, result) {
        var self = this;

        
        result = self.builder.$binary_op(val['$[]'](0), val['$[]'](1), val['$[]'](2));
        return result;
      }, $Ruby25__reduce_225$138.$$arity = 3);
      
      Opal.def(self, '$_reduce_226', $Ruby25__reduce_226$139 = function $$_reduce_226(val, _values, result) {
        var self = this;

        
        result = self.builder.$binary_op(val['$[]'](0), val['$[]'](1), val['$[]'](2));
        return result;
      }, $Ruby25__reduce_226$139.$$arity = 3);
      
      Opal.def(self, '$_reduce_227', $Ruby25__reduce_227$140 = function $$_reduce_227(val, _values, result) {
        var self = this;

        
        result = self.builder.$match_op(val['$[]'](0), val['$[]'](1), val['$[]'](2));
        return result;
      }, $Ruby25__reduce_227$140.$$arity = 3);
      
      Opal.def(self, '$_reduce_228', $Ruby25__reduce_228$141 = function $$_reduce_228(val, _values, result) {
        var self = this;

        
        result = self.builder.$binary_op(val['$[]'](0), val['$[]'](1), val['$[]'](2));
        return result;
      }, $Ruby25__reduce_228$141.$$arity = 3);
      
      Opal.def(self, '$_reduce_229', $Ruby25__reduce_229$142 = function $$_reduce_229(val, _values, result) {
        var self = this;

        
        result = self.builder.$not_op(val['$[]'](0), nil, val['$[]'](1), nil);
        return result;
      }, $Ruby25__reduce_229$142.$$arity = 3);
      
      Opal.def(self, '$_reduce_230', $Ruby25__reduce_230$143 = function $$_reduce_230(val, _values, result) {
        var self = this;

        
        result = self.builder.$unary_op(val['$[]'](0), val['$[]'](1));
        return result;
      }, $Ruby25__reduce_230$143.$$arity = 3);
      
      Opal.def(self, '$_reduce_231', $Ruby25__reduce_231$144 = function $$_reduce_231(val, _values, result) {
        var self = this;

        
        result = self.builder.$binary_op(val['$[]'](0), val['$[]'](1), val['$[]'](2));
        return result;
      }, $Ruby25__reduce_231$144.$$arity = 3);
      
      Opal.def(self, '$_reduce_232', $Ruby25__reduce_232$145 = function $$_reduce_232(val, _values, result) {
        var self = this;

        
        result = self.builder.$binary_op(val['$[]'](0), val['$[]'](1), val['$[]'](2));
        return result;
      }, $Ruby25__reduce_232$145.$$arity = 3);
      
      Opal.def(self, '$_reduce_233', $Ruby25__reduce_233$146 = function $$_reduce_233(val, _values, result) {
        var self = this;

        
        result = self.builder.$logical_op("and", val['$[]'](0), val['$[]'](1), val['$[]'](2));
        return result;
      }, $Ruby25__reduce_233$146.$$arity = 3);
      
      Opal.def(self, '$_reduce_234', $Ruby25__reduce_234$147 = function $$_reduce_234(val, _values, result) {
        var self = this;

        
        result = self.builder.$logical_op("or", val['$[]'](0), val['$[]'](1), val['$[]'](2));
        return result;
      }, $Ruby25__reduce_234$147.$$arity = 3);
      
      Opal.def(self, '$_reduce_235', $Ruby25__reduce_235$148 = function $$_reduce_235(val, _values, result) {
        var self = this;

        
        result = self.builder.$keyword_cmd("defined?", val['$[]'](0), nil, [val['$[]'](2)], nil);
        return result;
      }, $Ruby25__reduce_235$148.$$arity = 3);
      
      Opal.def(self, '$_reduce_236', $Ruby25__reduce_236$149 = function $$_reduce_236(val, _values, result) {
        var self = this;

        
        result = self.builder.$ternary(val['$[]'](0), val['$[]'](1), val['$[]'](2), val['$[]'](4), val['$[]'](5));
        return result;
      }, $Ruby25__reduce_236$149.$$arity = 3);
      
      Opal.def(self, '$_reduce_242', $Ruby25__reduce_242$150 = function $$_reduce_242(val, _values, result) {
        var self = this;

        
        result = self.builder.$binary_op(val['$[]'](0), val['$[]'](1), val['$[]'](2));
        return result;
      }, $Ruby25__reduce_242$150.$$arity = 3);
      
      Opal.def(self, '$_reduce_243', $Ruby25__reduce_243$151 = function $$_reduce_243(val, _values, result) {
        var self = this;

        
        result = self.builder.$binary_op(val['$[]'](0), val['$[]'](1), val['$[]'](2));
        return result;
      }, $Ruby25__reduce_243$151.$$arity = 3);
      
      Opal.def(self, '$_reduce_247', $Ruby25__reduce_247$152 = function $$_reduce_247(val, _values, result) {
        var self = this;

        
        result = val['$[]'](0)['$<<'](self.builder.$associate(nil, val['$[]'](2), nil));
        return result;
      }, $Ruby25__reduce_247$152.$$arity = 3);
      
      Opal.def(self, '$_reduce_248', $Ruby25__reduce_248$153 = function $$_reduce_248(val, _values, result) {
        var self = this;

        
        result = [self.builder.$associate(nil, val['$[]'](0), nil)];
        return result;
      }, $Ruby25__reduce_248$153.$$arity = 3);
      
      Opal.def(self, '$_reduce_250', $Ruby25__reduce_250$154 = function $$_reduce_250(val, _values, result) {
        var self = this, rescue_body = nil;

        
        rescue_body = self.builder.$rescue_body(val['$[]'](1), nil, nil, nil, nil, val['$[]'](2));
        result = self.builder.$begin_body(val['$[]'](0), [rescue_body]);
        return result;
      }, $Ruby25__reduce_250$154.$$arity = 3);
      
      Opal.def(self, '$_reduce_251', $Ruby25__reduce_251$155 = function $$_reduce_251(val, _values, result) {
        var self = this;

        
        result = val;
        return result;
      }, $Ruby25__reduce_251$155.$$arity = 3);
      
      Opal.def(self, '$_reduce_252', $Ruby25__reduce_252$156 = function $$_reduce_252(val, _values, result) {
        var self = this;

        
        result = [nil, [], nil];
        return result;
      }, $Ruby25__reduce_252$156.$$arity = 3);
      
      Opal.def(self, '$_reduce_254', $Ruby25__reduce_254$157 = function $$_reduce_254(val, _values, result) {
        var self = this;

        
        result = [];
        return result;
      }, $Ruby25__reduce_254$157.$$arity = 3);
      
      Opal.def(self, '$_reduce_257', $Ruby25__reduce_257$158 = function $$_reduce_257(val, _values, result) {
        var self = this;

        
        result = val['$[]'](0)['$<<'](self.builder.$associate(nil, val['$[]'](2), nil));
        return result;
      }, $Ruby25__reduce_257$158.$$arity = 3);
      
      Opal.def(self, '$_reduce_258', $Ruby25__reduce_258$159 = function $$_reduce_258(val, _values, result) {
        var self = this;

        
        result = [self.builder.$associate(nil, val['$[]'](0), nil)];
        return result;
      }, $Ruby25__reduce_258$159.$$arity = 3);
      
      Opal.def(self, '$_reduce_259', $Ruby25__reduce_259$160 = function $$_reduce_259(val, _values, result) {
        var self = this;

        
        result = [val['$[]'](0)];
        return result;
      }, $Ruby25__reduce_259$160.$$arity = 3);
      
      Opal.def(self, '$_reduce_260', $Ruby25__reduce_260$161 = function $$_reduce_260(val, _values, result) {
        var self = this;

        
        result = val['$[]'](0).$concat(val['$[]'](1));
        return result;
      }, $Ruby25__reduce_260$161.$$arity = 3);
      
      Opal.def(self, '$_reduce_261', $Ruby25__reduce_261$162 = function $$_reduce_261(val, _values, result) {
        var self = this;

        
        result = [self.builder.$associate(nil, val['$[]'](0), nil)];
        result.$concat(val['$[]'](1));
        return result;
      }, $Ruby25__reduce_261$162.$$arity = 3);
      
      Opal.def(self, '$_reduce_262', $Ruby25__reduce_262$163 = function $$_reduce_262(val, _values, result) {
        var self = this, assocs = nil;

        
        assocs = self.builder.$associate(nil, val['$[]'](2), nil);
        result = val['$[]'](0)['$<<'](assocs);
        result.$concat(val['$[]'](3));
        return result;
      }, $Ruby25__reduce_262$163.$$arity = 3);
      
      Opal.def(self, '$_reduce_263', $Ruby25__reduce_263$164 = function $$_reduce_263(val, _values, result) {
        var self = this;

        
        result = [val['$[]'](0)];
        return result;
      }, $Ruby25__reduce_263$164.$$arity = 3);
      
      Opal.def(self, '$_reduce_264', $Ruby25__reduce_264$165 = function $$_reduce_264(val, _values, result) {
        var $a, self = this, last_token = nil, lookahead = nil, top = nil;

        
        last_token = self.last_token['$[]'](0);
        lookahead = ($truthy($a = last_token['$==']("tLBRACK")) ? $a : last_token['$==']("tLPAREN_ARG"));
        if ($truthy(lookahead)) {
          
          top = self.lexer.$cmdarg().$pop();
          self.lexer.$cmdarg().$push(true);
          self.lexer.$cmdarg().$push(top);
        } else {
          self.lexer.$cmdarg().$push(true)
        };
        return result;
      }, $Ruby25__reduce_264$165.$$arity = 3);
      
      Opal.def(self, '$_reduce_265', $Ruby25__reduce_265$166 = function $$_reduce_265(val, _values, result) {
        var self = this, last_token = nil, lookahead = nil, top = nil;

        
        last_token = self.last_token['$[]'](0);
        lookahead = last_token['$==']("tLBRACE_ARG");
        if ($truthy(lookahead)) {
          
          top = self.lexer.$cmdarg().$pop();
          self.lexer.$cmdarg().$pop();
          self.lexer.$cmdarg().$push(top);
        } else {
          self.lexer.$cmdarg().$pop()
        };
        result = val['$[]'](1);
        return result;
      }, $Ruby25__reduce_265$166.$$arity = 3);
      
      Opal.def(self, '$_reduce_266', $Ruby25__reduce_266$167 = function $$_reduce_266(val, _values, result) {
        var self = this;

        
        result = self.builder.$block_pass(val['$[]'](0), val['$[]'](1));
        return result;
      }, $Ruby25__reduce_266$167.$$arity = 3);
      
      Opal.def(self, '$_reduce_267', $Ruby25__reduce_267$168 = function $$_reduce_267(val, _values, result) {
        var self = this;

        
        result = [val['$[]'](1)];
        return result;
      }, $Ruby25__reduce_267$168.$$arity = 3);
      
      Opal.def(self, '$_reduce_268', $Ruby25__reduce_268$169 = function $$_reduce_268(val, _values, result) {
        var self = this;

        
        result = [];
        return result;
      }, $Ruby25__reduce_268$169.$$arity = 3);
      
      Opal.def(self, '$_reduce_269', $Ruby25__reduce_269$170 = function $$_reduce_269(val, _values, result) {
        var self = this;

        
        result = [val['$[]'](0)];
        return result;
      }, $Ruby25__reduce_269$170.$$arity = 3);
      
      Opal.def(self, '$_reduce_270', $Ruby25__reduce_270$171 = function $$_reduce_270(val, _values, result) {
        var self = this;

        
        result = [self.builder.$splat(val['$[]'](0), val['$[]'](1))];
        return result;
      }, $Ruby25__reduce_270$171.$$arity = 3);
      
      Opal.def(self, '$_reduce_271', $Ruby25__reduce_271$172 = function $$_reduce_271(val, _values, result) {
        var self = this;

        
        result = val['$[]'](0)['$<<'](val['$[]'](2));
        return result;
      }, $Ruby25__reduce_271$172.$$arity = 3);
      
      Opal.def(self, '$_reduce_272', $Ruby25__reduce_272$173 = function $$_reduce_272(val, _values, result) {
        var self = this;

        
        result = val['$[]'](0)['$<<'](self.builder.$splat(val['$[]'](2), val['$[]'](3)));
        return result;
      }, $Ruby25__reduce_272$173.$$arity = 3);
      
      Opal.def(self, '$_reduce_273', $Ruby25__reduce_273$174 = function $$_reduce_273(val, _values, result) {
        var self = this;

        
        result = self.builder.$array(nil, val['$[]'](0), nil);
        return result;
      }, $Ruby25__reduce_273$174.$$arity = 3);
      
      Opal.def(self, '$_reduce_275', $Ruby25__reduce_275$175 = function $$_reduce_275(val, _values, result) {
        var self = this;

        
        result = val['$[]'](0)['$<<'](val['$[]'](2));
        return result;
      }, $Ruby25__reduce_275$175.$$arity = 3);
      
      Opal.def(self, '$_reduce_276', $Ruby25__reduce_276$176 = function $$_reduce_276(val, _values, result) {
        var self = this;

        
        result = val['$[]'](0)['$<<'](self.builder.$splat(val['$[]'](2), val['$[]'](3)));
        return result;
      }, $Ruby25__reduce_276$176.$$arity = 3);
      
      Opal.def(self, '$_reduce_277', $Ruby25__reduce_277$177 = function $$_reduce_277(val, _values, result) {
        var self = this;

        
        result = [self.builder.$splat(val['$[]'](0), val['$[]'](1))];
        return result;
      }, $Ruby25__reduce_277$177.$$arity = 3);
      
      Opal.def(self, '$_reduce_288', $Ruby25__reduce_288$178 = function $$_reduce_288(val, _values, result) {
        var self = this;

        
        result = self.builder.$call_method(nil, nil, val['$[]'](0));
        return result;
      }, $Ruby25__reduce_288$178.$$arity = 3);
      
      Opal.def(self, '$_reduce_289', $Ruby25__reduce_289$179 = function $$_reduce_289(val, _values, result) {
        var self = this;

        
        self.lexer.$cmdarg().$push(false);
        return result;
      }, $Ruby25__reduce_289$179.$$arity = 3);
      
      Opal.def(self, '$_reduce_290', $Ruby25__reduce_290$180 = function $$_reduce_290(val, _values, result) {
        var self = this;

        
        self.lexer.$cmdarg().$pop();
        result = self.builder.$begin_keyword(val['$[]'](0), val['$[]'](2), val['$[]'](3));
        return result;
      }, $Ruby25__reduce_290$180.$$arity = 3);
      
      Opal.def(self, '$_reduce_291', $Ruby25__reduce_291$181 = function $$_reduce_291(val, _values, result) {
        var self = this, $writer = nil;

        
        
        $writer = ["expr_endarg"];
        $send(self.lexer, 'state=', Opal.to_a($writer));
        $writer[$rb_minus($writer["length"], 1)];;
        return result;
      }, $Ruby25__reduce_291$181.$$arity = 3);
      
      Opal.def(self, '$_reduce_292', $Ruby25__reduce_292$182 = function $$_reduce_292(val, _values, result) {
        var self = this;

        
        result = self.builder.$begin(val['$[]'](0), val['$[]'](1), val['$[]'](3));
        return result;
      }, $Ruby25__reduce_292$182.$$arity = 3);
      
      Opal.def(self, '$_reduce_293', $Ruby25__reduce_293$183 = function $$_reduce_293(val, _values, result) {
        var self = this, $writer = nil;

        
        
        $writer = ["expr_endarg"];
        $send(self.lexer, 'state=', Opal.to_a($writer));
        $writer[$rb_minus($writer["length"], 1)];;
        return result;
      }, $Ruby25__reduce_293$183.$$arity = 3);
      
      Opal.def(self, '$_reduce_294', $Ruby25__reduce_294$184 = function $$_reduce_294(val, _values, result) {
        var self = this;

        
        result = self.builder.$begin(val['$[]'](0), nil, val['$[]'](3));
        return result;
      }, $Ruby25__reduce_294$184.$$arity = 3);
      
      Opal.def(self, '$_reduce_295', $Ruby25__reduce_295$185 = function $$_reduce_295(val, _values, result) {
        var self = this;

        
        result = self.builder.$begin(val['$[]'](0), val['$[]'](1), val['$[]'](2));
        return result;
      }, $Ruby25__reduce_295$185.$$arity = 3);
      
      Opal.def(self, '$_reduce_296', $Ruby25__reduce_296$186 = function $$_reduce_296(val, _values, result) {
        var self = this;

        
        result = self.builder.$const_fetch(val['$[]'](0), val['$[]'](1), val['$[]'](2));
        return result;
      }, $Ruby25__reduce_296$186.$$arity = 3);
      
      Opal.def(self, '$_reduce_297', $Ruby25__reduce_297$187 = function $$_reduce_297(val, _values, result) {
        var self = this;

        
        result = self.builder.$const_global(val['$[]'](0), val['$[]'](1));
        return result;
      }, $Ruby25__reduce_297$187.$$arity = 3);
      
      Opal.def(self, '$_reduce_298', $Ruby25__reduce_298$188 = function $$_reduce_298(val, _values, result) {
        var self = this;

        
        result = self.builder.$array(val['$[]'](0), val['$[]'](1), val['$[]'](2));
        return result;
      }, $Ruby25__reduce_298$188.$$arity = 3);
      
      Opal.def(self, '$_reduce_299', $Ruby25__reduce_299$189 = function $$_reduce_299(val, _values, result) {
        var self = this;

        
        result = self.builder.$associate(val['$[]'](0), val['$[]'](1), val['$[]'](2));
        return result;
      }, $Ruby25__reduce_299$189.$$arity = 3);
      
      Opal.def(self, '$_reduce_300', $Ruby25__reduce_300$190 = function $$_reduce_300(val, _values, result) {
        var self = this;

        
        result = self.builder.$keyword_cmd("return", val['$[]'](0));
        return result;
      }, $Ruby25__reduce_300$190.$$arity = 3);
      
      Opal.def(self, '$_reduce_301', $Ruby25__reduce_301$191 = function $$_reduce_301(val, _values, result) {
        var self = this;

        
        result = self.builder.$keyword_cmd("yield", val['$[]'](0), val['$[]'](1), val['$[]'](2), val['$[]'](3));
        return result;
      }, $Ruby25__reduce_301$191.$$arity = 3);
      
      Opal.def(self, '$_reduce_302', $Ruby25__reduce_302$192 = function $$_reduce_302(val, _values, result) {
        var self = this;

        
        result = self.builder.$keyword_cmd("yield", val['$[]'](0), val['$[]'](1), [], val['$[]'](2));
        return result;
      }, $Ruby25__reduce_302$192.$$arity = 3);
      
      Opal.def(self, '$_reduce_303', $Ruby25__reduce_303$193 = function $$_reduce_303(val, _values, result) {
        var self = this;

        
        result = self.builder.$keyword_cmd("yield", val['$[]'](0));
        return result;
      }, $Ruby25__reduce_303$193.$$arity = 3);
      
      Opal.def(self, '$_reduce_304', $Ruby25__reduce_304$194 = function $$_reduce_304(val, _values, result) {
        var self = this;

        
        result = self.builder.$keyword_cmd("defined?", val['$[]'](0), val['$[]'](2), [val['$[]'](3)], val['$[]'](4));
        return result;
      }, $Ruby25__reduce_304$194.$$arity = 3);
      
      Opal.def(self, '$_reduce_305', $Ruby25__reduce_305$195 = function $$_reduce_305(val, _values, result) {
        var self = this;

        
        result = self.builder.$not_op(val['$[]'](0), val['$[]'](1), val['$[]'](2), val['$[]'](3));
        return result;
      }, $Ruby25__reduce_305$195.$$arity = 3);
      
      Opal.def(self, '$_reduce_306', $Ruby25__reduce_306$196 = function $$_reduce_306(val, _values, result) {
        var self = this;

        
        result = self.builder.$not_op(val['$[]'](0), val['$[]'](1), nil, val['$[]'](2));
        return result;
      }, $Ruby25__reduce_306$196.$$arity = 3);
      
      Opal.def(self, '$_reduce_307', $Ruby25__reduce_307$197 = function $$_reduce_307(val, _values, result) {
        var $a, $b, self = this, method_call = nil, begin_t = nil, args = nil, body = nil, end_t = nil;

        
        method_call = self.builder.$call_method(nil, nil, val['$[]'](0));
        $b = val['$[]'](1), $a = Opal.to_ary($b), (begin_t = ($a[0] == null ? nil : $a[0])), (args = ($a[1] == null ? nil : $a[1])), (body = ($a[2] == null ? nil : $a[2])), (end_t = ($a[3] == null ? nil : $a[3])), $b;
        result = self.builder.$block(method_call, begin_t, args, body, end_t);
        return result;
      }, $Ruby25__reduce_307$197.$$arity = 3);
      
      Opal.def(self, '$_reduce_309', $Ruby25__reduce_309$198 = function $$_reduce_309(val, _values, result) {
        var $a, $b, self = this, begin_t = nil, args = nil, body = nil, end_t = nil;

        
        $b = val['$[]'](1), $a = Opal.to_ary($b), (begin_t = ($a[0] == null ? nil : $a[0])), (args = ($a[1] == null ? nil : $a[1])), (body = ($a[2] == null ? nil : $a[2])), (end_t = ($a[3] == null ? nil : $a[3])), $b;
        result = self.builder.$block(val['$[]'](0), begin_t, args, body, end_t);
        return result;
      }, $Ruby25__reduce_309$198.$$arity = 3);
      
      Opal.def(self, '$_reduce_310', $Ruby25__reduce_310$199 = function $$_reduce_310(val, _values, result) {
        var self = this;

        
        self.context.$push("lambda");
        return result;
      }, $Ruby25__reduce_310$199.$$arity = 3);
      
      Opal.def(self, '$_reduce_311', $Ruby25__reduce_311$200 = function $$_reduce_311(val, _values, result) {
        var $a, $b, $c, self = this, lambda_call = nil, args = nil, begin_t = nil, body = nil, end_t = nil;

        
        lambda_call = self.builder.$call_lambda(val['$[]'](0));
        $b = val['$[]'](2), $a = Opal.to_ary($b), (args = ($a[0] == null ? nil : $a[0])), ($c = Opal.to_ary(($a[1] == null ? nil : $a[1])), (begin_t = ($c[0] == null ? nil : $c[0])), (body = ($c[1] == null ? nil : $c[1])), (end_t = ($c[2] == null ? nil : $c[2]))), $b;
        result = self.builder.$block(lambda_call, begin_t, args, body, end_t);
        return result;
      }, $Ruby25__reduce_311$200.$$arity = 3);
      
      Opal.def(self, '$_reduce_312', $Ruby25__reduce_312$201 = function $$_reduce_312(val, _values, result) {
        var $a, $b, self = this, else_t = nil, else_ = nil;

        
        $b = val['$[]'](4), $a = Opal.to_ary($b), (else_t = ($a[0] == null ? nil : $a[0])), (else_ = ($a[1] == null ? nil : $a[1])), $b;
        result = self.builder.$condition(val['$[]'](0), val['$[]'](1), val['$[]'](2), val['$[]'](3), else_t, else_, val['$[]'](5));
        return result;
      }, $Ruby25__reduce_312$201.$$arity = 3);
      
      Opal.def(self, '$_reduce_313', $Ruby25__reduce_313$202 = function $$_reduce_313(val, _values, result) {
        var $a, $b, self = this, else_t = nil, else_ = nil;

        
        $b = val['$[]'](4), $a = Opal.to_ary($b), (else_t = ($a[0] == null ? nil : $a[0])), (else_ = ($a[1] == null ? nil : $a[1])), $b;
        result = self.builder.$condition(val['$[]'](0), val['$[]'](1), val['$[]'](2), else_, else_t, val['$[]'](3), val['$[]'](5));
        return result;
      }, $Ruby25__reduce_313$202.$$arity = 3);
      
      Opal.def(self, '$_reduce_314', $Ruby25__reduce_314$203 = function $$_reduce_314(val, _values, result) {
        var self = this;

        
        result = $send(self.builder, 'loop', ["while", val['$[]'](0)].concat(Opal.to_a(val['$[]'](1))).concat([val['$[]'](2), val['$[]'](3)]));
        return result;
      }, $Ruby25__reduce_314$203.$$arity = 3);
      
      Opal.def(self, '$_reduce_315', $Ruby25__reduce_315$204 = function $$_reduce_315(val, _values, result) {
        var self = this;

        
        result = $send(self.builder, 'loop', ["until", val['$[]'](0)].concat(Opal.to_a(val['$[]'](1))).concat([val['$[]'](2), val['$[]'](3)]));
        return result;
      }, $Ruby25__reduce_315$204.$$arity = 3);
      
      Opal.def(self, '$_reduce_316', $Ruby25__reduce_316$205 = function $$_reduce_316(val, _values, result) {
        var $a, $b, $c, self = this, when_bodies = nil, else_t = nil, else_body = nil;

        
        $a = [].concat(Opal.to_a(val['$[]'](3))), $b = $a.length - 1, $b = ($b < 0) ? 0 : $b, (when_bodies = $slice.call($a, 0, $b)), ($c = Opal.to_ary(($a[$b] == null ? nil : $a[$b])), (else_t = ($c[0] == null ? nil : $c[0])), (else_body = ($c[1] == null ? nil : $c[1]))), $a;
        result = self.builder.$case(val['$[]'](0), val['$[]'](1), when_bodies, else_t, else_body, val['$[]'](4));
        return result;
      }, $Ruby25__reduce_316$205.$$arity = 3);
      
      Opal.def(self, '$_reduce_317', $Ruby25__reduce_317$206 = function $$_reduce_317(val, _values, result) {
        var $a, $b, $c, self = this, when_bodies = nil, else_t = nil, else_body = nil;

        
        $a = [].concat(Opal.to_a(val['$[]'](2))), $b = $a.length - 1, $b = ($b < 0) ? 0 : $b, (when_bodies = $slice.call($a, 0, $b)), ($c = Opal.to_ary(($a[$b] == null ? nil : $a[$b])), (else_t = ($c[0] == null ? nil : $c[0])), (else_body = ($c[1] == null ? nil : $c[1]))), $a;
        result = self.builder.$case(val['$[]'](0), nil, when_bodies, else_t, else_body, val['$[]'](3));
        return result;
      }, $Ruby25__reduce_317$206.$$arity = 3);
      
      Opal.def(self, '$_reduce_318', $Ruby25__reduce_318$207 = function $$_reduce_318(val, _values, result) {
        var self = this;

        
        result = $send(self.builder, 'for', [val['$[]'](0), val['$[]'](1), val['$[]'](2)].concat(Opal.to_a(val['$[]'](3))).concat([val['$[]'](4), val['$[]'](5)]));
        return result;
      }, $Ruby25__reduce_318$207.$$arity = 3);
      
      Opal.def(self, '$_reduce_319', $Ruby25__reduce_319$208 = function $$_reduce_319(val, _values, result) {
        var self = this;

        
        self.static_env.$extend_static();
        self.lexer.$cmdarg().$push(false);
        self.lexer.$cond().$push(false);
        self.context.$push("class");
        return result;
      }, $Ruby25__reduce_319$208.$$arity = 3);
      
      Opal.def(self, '$_reduce_320', $Ruby25__reduce_320$209 = function $$_reduce_320(val, _values, result) {
        var $a, $b, self = this, lt_t = nil, superclass = nil;

        
        if ($truthy(self.context['$class_definition_allowed?']())) {
        } else {
          self.$diagnostic("error", "class_in_def", nil, val['$[]'](0))
        };
        $b = val['$[]'](2), $a = Opal.to_ary($b), (lt_t = ($a[0] == null ? nil : $a[0])), (superclass = ($a[1] == null ? nil : $a[1])), $b;
        result = self.builder.$def_class(val['$[]'](0), val['$[]'](1), lt_t, superclass, val['$[]'](4), val['$[]'](5));
        self.lexer.$cmdarg().$pop();
        self.lexer.$cond().$pop();
        self.static_env.$unextend();
        self.context.$pop();
        return result;
      }, $Ruby25__reduce_320$209.$$arity = 3);
      
      Opal.def(self, '$_reduce_321', $Ruby25__reduce_321$210 = function $$_reduce_321(val, _values, result) {
        var self = this;

        
        self.static_env.$extend_static();
        self.lexer.$cmdarg().$push(false);
        self.lexer.$cond().$push(false);
        self.context.$push("sclass");
        return result;
      }, $Ruby25__reduce_321$210.$$arity = 3);
      
      Opal.def(self, '$_reduce_322', $Ruby25__reduce_322$211 = function $$_reduce_322(val, _values, result) {
        var self = this;

        
        result = self.builder.$def_sclass(val['$[]'](0), val['$[]'](1), val['$[]'](2), val['$[]'](5), val['$[]'](6));
        self.lexer.$cmdarg().$pop();
        self.lexer.$cond().$pop();
        self.static_env.$unextend();
        self.context.$pop();
        return result;
      }, $Ruby25__reduce_322$211.$$arity = 3);
      
      Opal.def(self, '$_reduce_323', $Ruby25__reduce_323$212 = function $$_reduce_323(val, _values, result) {
        var self = this;

        
        self.static_env.$extend_static();
        self.lexer.$cmdarg().$push(false);
        self.context.$push("module");
        return result;
      }, $Ruby25__reduce_323$212.$$arity = 3);
      
      Opal.def(self, '$_reduce_324', $Ruby25__reduce_324$213 = function $$_reduce_324(val, _values, result) {
        var self = this;

        
        if ($truthy(self.context['$module_definition_allowed?']())) {
        } else {
          self.$diagnostic("error", "module_in_def", nil, val['$[]'](0))
        };
        result = self.builder.$def_module(val['$[]'](0), val['$[]'](1), val['$[]'](3), val['$[]'](4));
        self.lexer.$cmdarg().$pop();
        self.static_env.$unextend();
        self.context.$pop();
        return result;
      }, $Ruby25__reduce_324$213.$$arity = 3);
      
      Opal.def(self, '$_reduce_325', $Ruby25__reduce_325$214 = function $$_reduce_325(val, _values, result) {
        var self = this;

        
        self.static_env.$extend_static();
        self.lexer.$cmdarg().$push(false);
        self.lexer.$cond().$push(false);
        self.context.$push("def");
        return result;
      }, $Ruby25__reduce_325$214.$$arity = 3);
      
      Opal.def(self, '$_reduce_326', $Ruby25__reduce_326$215 = function $$_reduce_326(val, _values, result) {
        var self = this;

        
        result = self.builder.$def_method(val['$[]'](0), val['$[]'](1), val['$[]'](3), val['$[]'](4), val['$[]'](5));
        self.lexer.$cmdarg().$pop();
        self.lexer.$cond().$pop();
        self.static_env.$unextend();
        self.context.$pop();
        return result;
      }, $Ruby25__reduce_326$215.$$arity = 3);
      
      Opal.def(self, '$_reduce_327', $Ruby25__reduce_327$216 = function $$_reduce_327(val, _values, result) {
        var self = this, $writer = nil;

        
        
        $writer = ["expr_fname"];
        $send(self.lexer, 'state=', Opal.to_a($writer));
        $writer[$rb_minus($writer["length"], 1)];;
        return result;
      }, $Ruby25__reduce_327$216.$$arity = 3);
      
      Opal.def(self, '$_reduce_328', $Ruby25__reduce_328$217 = function $$_reduce_328(val, _values, result) {
        var self = this;

        
        self.static_env.$extend_static();
        self.lexer.$cmdarg().$push(false);
        self.lexer.$cond().$push(false);
        self.context.$push("defs");
        return result;
      }, $Ruby25__reduce_328$217.$$arity = 3);
      
      Opal.def(self, '$_reduce_329', $Ruby25__reduce_329$218 = function $$_reduce_329(val, _values, result) {
        var self = this;

        
        result = self.builder.$def_singleton(val['$[]'](0), val['$[]'](1), val['$[]'](2), val['$[]'](4), val['$[]'](6), val['$[]'](7), val['$[]'](8));
        self.lexer.$cmdarg().$pop();
        self.lexer.$cond().$pop();
        self.static_env.$unextend();
        self.context.$pop();
        return result;
      }, $Ruby25__reduce_329$218.$$arity = 3);
      
      Opal.def(self, '$_reduce_330', $Ruby25__reduce_330$219 = function $$_reduce_330(val, _values, result) {
        var self = this;

        
        result = self.builder.$keyword_cmd("break", val['$[]'](0));
        return result;
      }, $Ruby25__reduce_330$219.$$arity = 3);
      
      Opal.def(self, '$_reduce_331', $Ruby25__reduce_331$220 = function $$_reduce_331(val, _values, result) {
        var self = this;

        
        result = self.builder.$keyword_cmd("next", val['$[]'](0));
        return result;
      }, $Ruby25__reduce_331$220.$$arity = 3);
      
      Opal.def(self, '$_reduce_332', $Ruby25__reduce_332$221 = function $$_reduce_332(val, _values, result) {
        var self = this;

        
        result = self.builder.$keyword_cmd("redo", val['$[]'](0));
        return result;
      }, $Ruby25__reduce_332$221.$$arity = 3);
      
      Opal.def(self, '$_reduce_333', $Ruby25__reduce_333$222 = function $$_reduce_333(val, _values, result) {
        var self = this;

        
        result = self.builder.$keyword_cmd("retry", val['$[]'](0));
        return result;
      }, $Ruby25__reduce_333$222.$$arity = 3);
      
      Opal.def(self, '$_reduce_335', $Ruby25__reduce_335$223 = function $$_reduce_335(val, _values, result) {
        var self = this;

        
        if ($truthy(self.context['$in_class?']())) {
          self.$diagnostic("error", "invalid_return", nil, val['$[]'](0))};
        return result;
      }, $Ruby25__reduce_335$223.$$arity = 3);
      
      Opal.def(self, '$_reduce_338', $Ruby25__reduce_338$224 = function $$_reduce_338(val, _values, result) {
        var self = this;

        
        result = val['$[]'](1);
        return result;
      }, $Ruby25__reduce_338$224.$$arity = 3);
      
      Opal.def(self, '$_reduce_342', $Ruby25__reduce_342$225 = function $$_reduce_342(val, _values, result) {
        var $a, $b, self = this, else_t = nil, else_ = nil;

        
        $b = val['$[]'](4), $a = Opal.to_ary($b), (else_t = ($a[0] == null ? nil : $a[0])), (else_ = ($a[1] == null ? nil : $a[1])), $b;
        result = [val['$[]'](0), self.builder.$condition(val['$[]'](0), val['$[]'](1), val['$[]'](2), val['$[]'](3), else_t, else_, nil)];
        return result;
      }, $Ruby25__reduce_342$225.$$arity = 3);
      
      Opal.def(self, '$_reduce_344', $Ruby25__reduce_344$226 = function $$_reduce_344(val, _values, result) {
        var self = this;

        
        result = val;
        return result;
      }, $Ruby25__reduce_344$226.$$arity = 3);
      
      Opal.def(self, '$_reduce_347', $Ruby25__reduce_347$227 = function $$_reduce_347(val, _values, result) {
        var self = this;

        
        result = self.builder.$arg(val['$[]'](0));
        return result;
      }, $Ruby25__reduce_347$227.$$arity = 3);
      
      Opal.def(self, '$_reduce_348', $Ruby25__reduce_348$228 = function $$_reduce_348(val, _values, result) {
        var self = this;

        
        result = self.builder.$multi_lhs(val['$[]'](0), val['$[]'](1), val['$[]'](2));
        return result;
      }, $Ruby25__reduce_348$228.$$arity = 3);
      
      Opal.def(self, '$_reduce_349', $Ruby25__reduce_349$229 = function $$_reduce_349(val, _values, result) {
        var self = this;

        
        result = [val['$[]'](0)];
        return result;
      }, $Ruby25__reduce_349$229.$$arity = 3);
      
      Opal.def(self, '$_reduce_350', $Ruby25__reduce_350$230 = function $$_reduce_350(val, _values, result) {
        var self = this;

        
        result = val['$[]'](0)['$<<'](val['$[]'](2));
        return result;
      }, $Ruby25__reduce_350$230.$$arity = 3);
      
      Opal.def(self, '$_reduce_352', $Ruby25__reduce_352$231 = function $$_reduce_352(val, _values, result) {
        var self = this;

        
        result = val['$[]'](0).$push(self.builder.$restarg(val['$[]'](2), val['$[]'](3)));
        return result;
      }, $Ruby25__reduce_352$231.$$arity = 3);
      
      Opal.def(self, '$_reduce_353', $Ruby25__reduce_353$232 = function $$_reduce_353(val, _values, result) {
        var self = this;

        
        result = val['$[]'](0).$push(self.builder.$restarg(val['$[]'](2), val['$[]'](3))).$concat(val['$[]'](5));
        return result;
      }, $Ruby25__reduce_353$232.$$arity = 3);
      
      Opal.def(self, '$_reduce_354', $Ruby25__reduce_354$233 = function $$_reduce_354(val, _values, result) {
        var self = this;

        
        result = val['$[]'](0).$push(self.builder.$restarg(val['$[]'](2)));
        return result;
      }, $Ruby25__reduce_354$233.$$arity = 3);
      
      Opal.def(self, '$_reduce_355', $Ruby25__reduce_355$234 = function $$_reduce_355(val, _values, result) {
        var self = this;

        
        result = val['$[]'](0).$push(self.builder.$restarg(val['$[]'](2))).$concat(val['$[]'](4));
        return result;
      }, $Ruby25__reduce_355$234.$$arity = 3);
      
      Opal.def(self, '$_reduce_356', $Ruby25__reduce_356$235 = function $$_reduce_356(val, _values, result) {
        var self = this;

        
        result = [self.builder.$restarg(val['$[]'](0), val['$[]'](1))];
        return result;
      }, $Ruby25__reduce_356$235.$$arity = 3);
      
      Opal.def(self, '$_reduce_357', $Ruby25__reduce_357$236 = function $$_reduce_357(val, _values, result) {
        var self = this;

        
        result = [self.builder.$restarg(val['$[]'](0), val['$[]'](1))].concat(Opal.to_a(val['$[]'](3)));
        return result;
      }, $Ruby25__reduce_357$236.$$arity = 3);
      
      Opal.def(self, '$_reduce_358', $Ruby25__reduce_358$237 = function $$_reduce_358(val, _values, result) {
        var self = this;

        
        result = [self.builder.$restarg(val['$[]'](0))];
        return result;
      }, $Ruby25__reduce_358$237.$$arity = 3);
      
      Opal.def(self, '$_reduce_359', $Ruby25__reduce_359$238 = function $$_reduce_359(val, _values, result) {
        var self = this;

        
        result = [self.builder.$restarg(val['$[]'](0))].concat(Opal.to_a(val['$[]'](2)));
        return result;
      }, $Ruby25__reduce_359$238.$$arity = 3);
      
      Opal.def(self, '$_reduce_360', $Ruby25__reduce_360$239 = function $$_reduce_360(val, _values, result) {
        var self = this;

        
        result = val['$[]'](0).$concat(val['$[]'](2)).$concat(val['$[]'](3));
        return result;
      }, $Ruby25__reduce_360$239.$$arity = 3);
      
      Opal.def(self, '$_reduce_361', $Ruby25__reduce_361$240 = function $$_reduce_361(val, _values, result) {
        var self = this;

        
        result = val['$[]'](0).$concat(val['$[]'](1));
        return result;
      }, $Ruby25__reduce_361$240.$$arity = 3);
      
      Opal.def(self, '$_reduce_362', $Ruby25__reduce_362$241 = function $$_reduce_362(val, _values, result) {
        var self = this;

        
        result = val['$[]'](0).$concat(val['$[]'](1));
        return result;
      }, $Ruby25__reduce_362$241.$$arity = 3);
      
      Opal.def(self, '$_reduce_363', $Ruby25__reduce_363$242 = function $$_reduce_363(val, _values, result) {
        var self = this;

        
        result = [val['$[]'](0)];
        return result;
      }, $Ruby25__reduce_363$242.$$arity = 3);
      
      Opal.def(self, '$_reduce_364', $Ruby25__reduce_364$243 = function $$_reduce_364(val, _values, result) {
        var self = this;

        
        result = val['$[]'](1);
        return result;
      }, $Ruby25__reduce_364$243.$$arity = 3);
      
      Opal.def(self, '$_reduce_365', $Ruby25__reduce_365$244 = function $$_reduce_365(val, _values, result) {
        var self = this;

        
        result = [];
        return result;
      }, $Ruby25__reduce_365$244.$$arity = 3);
      
      Opal.def(self, '$_reduce_366', $Ruby25__reduce_366$245 = function $$_reduce_366(val, _values, result) {
        var self = this;

        
        result = val['$[]'](0).$concat(val['$[]'](2)).$concat(val['$[]'](4)).$concat(val['$[]'](5));
        return result;
      }, $Ruby25__reduce_366$245.$$arity = 3);
      
      Opal.def(self, '$_reduce_367', $Ruby25__reduce_367$246 = function $$_reduce_367(val, _values, result) {
        var self = this;

        
        result = val['$[]'](0).$concat(val['$[]'](2)).$concat(val['$[]'](4)).$concat(val['$[]'](6)).$concat(val['$[]'](7));
        return result;
      }, $Ruby25__reduce_367$246.$$arity = 3);
      
      Opal.def(self, '$_reduce_368', $Ruby25__reduce_368$247 = function $$_reduce_368(val, _values, result) {
        var self = this;

        
        result = val['$[]'](0).$concat(val['$[]'](2)).$concat(val['$[]'](3));
        return result;
      }, $Ruby25__reduce_368$247.$$arity = 3);
      
      Opal.def(self, '$_reduce_369', $Ruby25__reduce_369$248 = function $$_reduce_369(val, _values, result) {
        var self = this;

        
        result = val['$[]'](0).$concat(val['$[]'](2)).$concat(val['$[]'](4)).$concat(val['$[]'](5));
        return result;
      }, $Ruby25__reduce_369$248.$$arity = 3);
      
      Opal.def(self, '$_reduce_370', $Ruby25__reduce_370$249 = function $$_reduce_370(val, _values, result) {
        var self = this;

        
        result = val['$[]'](0).$concat(val['$[]'](2)).$concat(val['$[]'](3));
        return result;
      }, $Ruby25__reduce_370$249.$$arity = 3);
      
      Opal.def(self, '$_reduce_372', $Ruby25__reduce_372$250 = function $$_reduce_372(val, _values, result) {
        var self = this;

        
        result = val['$[]'](0).$concat(val['$[]'](2)).$concat(val['$[]'](4)).$concat(val['$[]'](5));
        return result;
      }, $Ruby25__reduce_372$250.$$arity = 3);
      
      Opal.def(self, '$_reduce_373', $Ruby25__reduce_373$251 = function $$_reduce_373(val, _values, result) {
        var $a, self = this;

        
        if ($truthy(($truthy($a = val['$[]'](1)['$empty?']()) ? val['$[]'](0).$size()['$=='](1) : $a))) {
          result = [self.builder.$procarg0(val['$[]'](0)['$[]'](0))]
        } else {
          result = val['$[]'](0).$concat(val['$[]'](1))
        };
        return result;
      }, $Ruby25__reduce_373$251.$$arity = 3);
      
      Opal.def(self, '$_reduce_374', $Ruby25__reduce_374$252 = function $$_reduce_374(val, _values, result) {
        var self = this;

        
        result = val['$[]'](0).$concat(val['$[]'](2)).$concat(val['$[]'](3));
        return result;
      }, $Ruby25__reduce_374$252.$$arity = 3);
      
      Opal.def(self, '$_reduce_375', $Ruby25__reduce_375$253 = function $$_reduce_375(val, _values, result) {
        var self = this;

        
        result = val['$[]'](0).$concat(val['$[]'](2)).$concat(val['$[]'](4)).$concat(val['$[]'](5));
        return result;
      }, $Ruby25__reduce_375$253.$$arity = 3);
      
      Opal.def(self, '$_reduce_376', $Ruby25__reduce_376$254 = function $$_reduce_376(val, _values, result) {
        var self = this;

        
        result = val['$[]'](0).$concat(val['$[]'](1));
        return result;
      }, $Ruby25__reduce_376$254.$$arity = 3);
      
      Opal.def(self, '$_reduce_377', $Ruby25__reduce_377$255 = function $$_reduce_377(val, _values, result) {
        var self = this;

        
        result = val['$[]'](0).$concat(val['$[]'](2)).$concat(val['$[]'](3));
        return result;
      }, $Ruby25__reduce_377$255.$$arity = 3);
      
      Opal.def(self, '$_reduce_378', $Ruby25__reduce_378$256 = function $$_reduce_378(val, _values, result) {
        var self = this;

        
        result = val['$[]'](0).$concat(val['$[]'](1));
        return result;
      }, $Ruby25__reduce_378$256.$$arity = 3);
      
      Opal.def(self, '$_reduce_379', $Ruby25__reduce_379$257 = function $$_reduce_379(val, _values, result) {
        var self = this;

        
        result = val['$[]'](0).$concat(val['$[]'](2)).$concat(val['$[]'](3));
        return result;
      }, $Ruby25__reduce_379$257.$$arity = 3);
      
      Opal.def(self, '$_reduce_381', $Ruby25__reduce_381$258 = function $$_reduce_381(val, _values, result) {
        var self = this;

        
        result = self.builder.$args(nil, [], nil);
        return result;
      }, $Ruby25__reduce_381$258.$$arity = 3);
      
      Opal.def(self, '$_reduce_382', $Ruby25__reduce_382$259 = function $$_reduce_382(val, _values, result) {
        var self = this, $writer = nil;

        
        
        $writer = ["expr_value"];
        $send(self.lexer, 'state=', Opal.to_a($writer));
        $writer[$rb_minus($writer["length"], 1)];;
        return result;
      }, $Ruby25__reduce_382$259.$$arity = 3);
      
      Opal.def(self, '$_reduce_383', $Ruby25__reduce_383$260 = function $$_reduce_383(val, _values, result) {
        var self = this;

        
        result = self.builder.$args(val['$[]'](0), val['$[]'](1), val['$[]'](2));
        return result;
      }, $Ruby25__reduce_383$260.$$arity = 3);
      
      Opal.def(self, '$_reduce_384', $Ruby25__reduce_384$261 = function $$_reduce_384(val, _values, result) {
        var self = this;

        
        result = self.builder.$args(val['$[]'](0), [], val['$[]'](0));
        return result;
      }, $Ruby25__reduce_384$261.$$arity = 3);
      
      Opal.def(self, '$_reduce_385', $Ruby25__reduce_385$262 = function $$_reduce_385(val, _values, result) {
        var self = this;

        
        result = self.builder.$args(val['$[]'](0), val['$[]'](1).$concat(val['$[]'](2)), val['$[]'](3));
        return result;
      }, $Ruby25__reduce_385$262.$$arity = 3);
      
      Opal.def(self, '$_reduce_386', $Ruby25__reduce_386$263 = function $$_reduce_386(val, _values, result) {
        var self = this;

        
        result = [];
        return result;
      }, $Ruby25__reduce_386$263.$$arity = 3);
      
      Opal.def(self, '$_reduce_387', $Ruby25__reduce_387$264 = function $$_reduce_387(val, _values, result) {
        var self = this;

        
        result = val['$[]'](2);
        return result;
      }, $Ruby25__reduce_387$264.$$arity = 3);
      
      Opal.def(self, '$_reduce_388', $Ruby25__reduce_388$265 = function $$_reduce_388(val, _values, result) {
        var self = this;

        
        result = [val['$[]'](0)];
        return result;
      }, $Ruby25__reduce_388$265.$$arity = 3);
      
      Opal.def(self, '$_reduce_389', $Ruby25__reduce_389$266 = function $$_reduce_389(val, _values, result) {
        var self = this;

        
        result = val['$[]'](0)['$<<'](val['$[]'](2));
        return result;
      }, $Ruby25__reduce_389$266.$$arity = 3);
      
      Opal.def(self, '$_reduce_390', $Ruby25__reduce_390$267 = function $$_reduce_390(val, _values, result) {
        var self = this;

        
        self.static_env.$declare(val['$[]'](0)['$[]'](0));
        result = self.builder.$shadowarg(val['$[]'](0));
        return result;
      }, $Ruby25__reduce_390$267.$$arity = 3);
      
      Opal.def(self, '$_reduce_392', $Ruby25__reduce_392$268 = function $$_reduce_392(val, _values, result) {
        var self = this;

        
        self.static_env.$extend_dynamic();
        return result;
      }, $Ruby25__reduce_392$268.$$arity = 3);
      
      Opal.def(self, '$_reduce_393', $Ruby25__reduce_393$269 = function $$_reduce_393(val, _values, result) {
        var self = this;

        
        self.context.$pop();
        self.lexer.$cmdarg().$push(false);
        return result;
      }, $Ruby25__reduce_393$269.$$arity = 3);
      
      Opal.def(self, '$_reduce_394', $Ruby25__reduce_394$270 = function $$_reduce_394(val, _values, result) {
        var self = this;

        
        self.lexer.$cmdarg().$pop();
        result = [val['$[]'](1), val['$[]'](3)];
        self.static_env.$unextend();
        return result;
      }, $Ruby25__reduce_394$270.$$arity = 3);
      
      Opal.def(self, '$_reduce_395', $Ruby25__reduce_395$271 = function $$_reduce_395(val, _values, result) {
        var self = this;

        
        result = self.builder.$args(val['$[]'](0), val['$[]'](1).$concat(val['$[]'](2)), val['$[]'](3));
        return result;
      }, $Ruby25__reduce_395$271.$$arity = 3);
      
      Opal.def(self, '$_reduce_396', $Ruby25__reduce_396$272 = function $$_reduce_396(val, _values, result) {
        var self = this;

        
        result = self.builder.$args(nil, val['$[]'](0), nil);
        return result;
      }, $Ruby25__reduce_396$272.$$arity = 3);
      
      Opal.def(self, '$_reduce_397', $Ruby25__reduce_397$273 = function $$_reduce_397(val, _values, result) {
        var self = this;

        
        self.context.$push("lambda");
        return result;
      }, $Ruby25__reduce_397$273.$$arity = 3);
      
      Opal.def(self, '$_reduce_398', $Ruby25__reduce_398$274 = function $$_reduce_398(val, _values, result) {
        var self = this;

        
        result = [val['$[]'](0), val['$[]'](2), val['$[]'](3)];
        self.context.$pop();
        return result;
      }, $Ruby25__reduce_398$274.$$arity = 3);
      
      Opal.def(self, '$_reduce_399', $Ruby25__reduce_399$275 = function $$_reduce_399(val, _values, result) {
        var self = this;

        
        self.context.$push("lambda");
        return result;
      }, $Ruby25__reduce_399$275.$$arity = 3);
      
      Opal.def(self, '$_reduce_400', $Ruby25__reduce_400$276 = function $$_reduce_400(val, _values, result) {
        var self = this;

        
        result = [val['$[]'](0), val['$[]'](2), val['$[]'](3)];
        self.context.$pop();
        return result;
      }, $Ruby25__reduce_400$276.$$arity = 3);
      
      Opal.def(self, '$_reduce_401', $Ruby25__reduce_401$277 = function $$_reduce_401(val, _values, result) {
        var self = this;

        
        self.context.$push("block");
        return result;
      }, $Ruby25__reduce_401$277.$$arity = 3);
      
      Opal.def(self, '$_reduce_402', $Ruby25__reduce_402$278 = function $$_reduce_402(val, _values, result) {
        var self = this;

        
        result = [val['$[]'](0)].concat(Opal.to_a(val['$[]'](2))).concat([val['$[]'](3)]);
        self.context.$pop();
        return result;
      }, $Ruby25__reduce_402$278.$$arity = 3);
      
      Opal.def(self, '$_reduce_403', $Ruby25__reduce_403$279 = function $$_reduce_403(val, _values, result) {
        var $a, $b, self = this, begin_t = nil, block_args = nil, body = nil, end_t = nil;

        
        $b = val['$[]'](1), $a = Opal.to_ary($b), (begin_t = ($a[0] == null ? nil : $a[0])), (block_args = ($a[1] == null ? nil : $a[1])), (body = ($a[2] == null ? nil : $a[2])), (end_t = ($a[3] == null ? nil : $a[3])), $b;
        result = self.builder.$block(val['$[]'](0), begin_t, block_args, body, end_t);
        return result;
      }, $Ruby25__reduce_403$279.$$arity = 3);
      
      Opal.def(self, '$_reduce_404', $Ruby25__reduce_404$280 = function $$_reduce_404(val, _values, result) {
        var $a, $b, self = this, lparen_t = nil, args = nil, rparen_t = nil;

        
        $b = val['$[]'](3), $a = Opal.to_ary($b), (lparen_t = ($a[0] == null ? nil : $a[0])), (args = ($a[1] == null ? nil : $a[1])), (rparen_t = ($a[2] == null ? nil : $a[2])), $b;
        result = self.builder.$call_method(val['$[]'](0), val['$[]'](1), val['$[]'](2), lparen_t, args, rparen_t);
        return result;
      }, $Ruby25__reduce_404$280.$$arity = 3);
      
      Opal.def(self, '$_reduce_405', $Ruby25__reduce_405$281 = function $$_reduce_405(val, _values, result) {
        var $a, $b, self = this, lparen_t = nil, args = nil, rparen_t = nil, method_call = nil, begin_t = nil, body = nil, end_t = nil;

        
        $b = val['$[]'](3), $a = Opal.to_ary($b), (lparen_t = ($a[0] == null ? nil : $a[0])), (args = ($a[1] == null ? nil : $a[1])), (rparen_t = ($a[2] == null ? nil : $a[2])), $b;
        method_call = self.builder.$call_method(val['$[]'](0), val['$[]'](1), val['$[]'](2), lparen_t, args, rparen_t);
        $b = val['$[]'](4), $a = Opal.to_ary($b), (begin_t = ($a[0] == null ? nil : $a[0])), (args = ($a[1] == null ? nil : $a[1])), (body = ($a[2] == null ? nil : $a[2])), (end_t = ($a[3] == null ? nil : $a[3])), $b;
        result = self.builder.$block(method_call, begin_t, args, body, end_t);
        return result;
      }, $Ruby25__reduce_405$281.$$arity = 3);
      
      Opal.def(self, '$_reduce_406', $Ruby25__reduce_406$282 = function $$_reduce_406(val, _values, result) {
        var $a, $b, self = this, method_call = nil, begin_t = nil, args = nil, body = nil, end_t = nil;

        
        method_call = self.builder.$call_method(val['$[]'](0), val['$[]'](1), val['$[]'](2), nil, val['$[]'](3), nil);
        $b = val['$[]'](4), $a = Opal.to_ary($b), (begin_t = ($a[0] == null ? nil : $a[0])), (args = ($a[1] == null ? nil : $a[1])), (body = ($a[2] == null ? nil : $a[2])), (end_t = ($a[3] == null ? nil : $a[3])), $b;
        result = self.builder.$block(method_call, begin_t, args, body, end_t);
        return result;
      }, $Ruby25__reduce_406$282.$$arity = 3);
      
      Opal.def(self, '$_reduce_407', $Ruby25__reduce_407$283 = function $$_reduce_407(val, _values, result) {
        var $a, $b, self = this, lparen_t = nil, args = nil, rparen_t = nil;

        
        $b = val['$[]'](1), $a = Opal.to_ary($b), (lparen_t = ($a[0] == null ? nil : $a[0])), (args = ($a[1] == null ? nil : $a[1])), (rparen_t = ($a[2] == null ? nil : $a[2])), $b;
        result = self.builder.$call_method(nil, nil, val['$[]'](0), lparen_t, args, rparen_t);
        return result;
      }, $Ruby25__reduce_407$283.$$arity = 3);
      
      Opal.def(self, '$_reduce_408', $Ruby25__reduce_408$284 = function $$_reduce_408(val, _values, result) {
        var $a, $b, self = this, lparen_t = nil, args = nil, rparen_t = nil;

        
        $b = val['$[]'](3), $a = Opal.to_ary($b), (lparen_t = ($a[0] == null ? nil : $a[0])), (args = ($a[1] == null ? nil : $a[1])), (rparen_t = ($a[2] == null ? nil : $a[2])), $b;
        result = self.builder.$call_method(val['$[]'](0), val['$[]'](1), val['$[]'](2), lparen_t, args, rparen_t);
        return result;
      }, $Ruby25__reduce_408$284.$$arity = 3);
      
      Opal.def(self, '$_reduce_409', $Ruby25__reduce_409$285 = function $$_reduce_409(val, _values, result) {
        var $a, $b, self = this, lparen_t = nil, args = nil, rparen_t = nil;

        
        $b = val['$[]'](3), $a = Opal.to_ary($b), (lparen_t = ($a[0] == null ? nil : $a[0])), (args = ($a[1] == null ? nil : $a[1])), (rparen_t = ($a[2] == null ? nil : $a[2])), $b;
        result = self.builder.$call_method(val['$[]'](0), val['$[]'](1), val['$[]'](2), lparen_t, args, rparen_t);
        return result;
      }, $Ruby25__reduce_409$285.$$arity = 3);
      
      Opal.def(self, '$_reduce_410', $Ruby25__reduce_410$286 = function $$_reduce_410(val, _values, result) {
        var self = this;

        
        result = self.builder.$call_method(val['$[]'](0), val['$[]'](1), val['$[]'](2));
        return result;
      }, $Ruby25__reduce_410$286.$$arity = 3);
      
      Opal.def(self, '$_reduce_411', $Ruby25__reduce_411$287 = function $$_reduce_411(val, _values, result) {
        var $a, $b, self = this, lparen_t = nil, args = nil, rparen_t = nil;

        
        $b = val['$[]'](2), $a = Opal.to_ary($b), (lparen_t = ($a[0] == null ? nil : $a[0])), (args = ($a[1] == null ? nil : $a[1])), (rparen_t = ($a[2] == null ? nil : $a[2])), $b;
        result = self.builder.$call_method(val['$[]'](0), val['$[]'](1), nil, lparen_t, args, rparen_t);
        return result;
      }, $Ruby25__reduce_411$287.$$arity = 3);
      
      Opal.def(self, '$_reduce_412', $Ruby25__reduce_412$288 = function $$_reduce_412(val, _values, result) {
        var $a, $b, self = this, lparen_t = nil, args = nil, rparen_t = nil;

        
        $b = val['$[]'](2), $a = Opal.to_ary($b), (lparen_t = ($a[0] == null ? nil : $a[0])), (args = ($a[1] == null ? nil : $a[1])), (rparen_t = ($a[2] == null ? nil : $a[2])), $b;
        result = self.builder.$call_method(val['$[]'](0), val['$[]'](1), nil, lparen_t, args, rparen_t);
        return result;
      }, $Ruby25__reduce_412$288.$$arity = 3);
      
      Opal.def(self, '$_reduce_413', $Ruby25__reduce_413$289 = function $$_reduce_413(val, _values, result) {
        var $a, $b, self = this, lparen_t = nil, args = nil, rparen_t = nil;

        
        $b = val['$[]'](1), $a = Opal.to_ary($b), (lparen_t = ($a[0] == null ? nil : $a[0])), (args = ($a[1] == null ? nil : $a[1])), (rparen_t = ($a[2] == null ? nil : $a[2])), $b;
        result = self.builder.$keyword_cmd("super", val['$[]'](0), lparen_t, args, rparen_t);
        return result;
      }, $Ruby25__reduce_413$289.$$arity = 3);
      
      Opal.def(self, '$_reduce_414', $Ruby25__reduce_414$290 = function $$_reduce_414(val, _values, result) {
        var self = this;

        
        result = self.builder.$keyword_cmd("zsuper", val['$[]'](0));
        return result;
      }, $Ruby25__reduce_414$290.$$arity = 3);
      
      Opal.def(self, '$_reduce_415', $Ruby25__reduce_415$291 = function $$_reduce_415(val, _values, result) {
        var self = this;

        
        result = self.builder.$index(val['$[]'](0), val['$[]'](1), val['$[]'](2), val['$[]'](3));
        return result;
      }, $Ruby25__reduce_415$291.$$arity = 3);
      
      Opal.def(self, '$_reduce_416', $Ruby25__reduce_416$292 = function $$_reduce_416(val, _values, result) {
        var self = this;

        
        self.context.$push("block");
        return result;
      }, $Ruby25__reduce_416$292.$$arity = 3);
      
      Opal.def(self, '$_reduce_417', $Ruby25__reduce_417$293 = function $$_reduce_417(val, _values, result) {
        var self = this;

        
        result = [val['$[]'](0)].concat(Opal.to_a(val['$[]'](2))).concat([val['$[]'](3)]);
        self.context.$pop();
        return result;
      }, $Ruby25__reduce_417$293.$$arity = 3);
      
      Opal.def(self, '$_reduce_418', $Ruby25__reduce_418$294 = function $$_reduce_418(val, _values, result) {
        var self = this;

        
        self.context.$push("block");
        return result;
      }, $Ruby25__reduce_418$294.$$arity = 3);
      
      Opal.def(self, '$_reduce_419', $Ruby25__reduce_419$295 = function $$_reduce_419(val, _values, result) {
        var self = this;

        
        result = [val['$[]'](0)].concat(Opal.to_a(val['$[]'](2))).concat([val['$[]'](3)]);
        self.context.$pop();
        return result;
      }, $Ruby25__reduce_419$295.$$arity = 3);
      
      Opal.def(self, '$_reduce_420', $Ruby25__reduce_420$296 = function $$_reduce_420(val, _values, result) {
        var self = this;

        
        self.static_env.$extend_dynamic();
        return result;
      }, $Ruby25__reduce_420$296.$$arity = 3);
      
      Opal.def(self, '$_reduce_421', $Ruby25__reduce_421$297 = function $$_reduce_421(val, _values, result) {
        var self = this;

        
        result = [val['$[]'](1), val['$[]'](2)];
        self.static_env.$unextend();
        return result;
      }, $Ruby25__reduce_421$297.$$arity = 3);
      
      Opal.def(self, '$_reduce_422', $Ruby25__reduce_422$298 = function $$_reduce_422(val, _values, result) {
        var self = this;

        
        self.static_env.$extend_dynamic();
        return result;
      }, $Ruby25__reduce_422$298.$$arity = 3);
      
      Opal.def(self, '$_reduce_423', $Ruby25__reduce_423$299 = function $$_reduce_423(val, _values, result) {
        var self = this;

        
        self.lexer.$cmdarg().$push(false);
        return result;
      }, $Ruby25__reduce_423$299.$$arity = 3);
      
      Opal.def(self, '$_reduce_424', $Ruby25__reduce_424$300 = function $$_reduce_424(val, _values, result) {
        var self = this;

        
        result = [val['$[]'](2), val['$[]'](3)];
        self.static_env.$unextend();
        self.lexer.$cmdarg().$pop();
        return result;
      }, $Ruby25__reduce_424$300.$$arity = 3);
      
      Opal.def(self, '$_reduce_425', $Ruby25__reduce_425$301 = function $$_reduce_425(val, _values, result) {
        var self = this;

        
        result = [self.builder.$when(val['$[]'](0), val['$[]'](1), val['$[]'](2), val['$[]'](3))].concat(Opal.to_a(val['$[]'](4)));
        return result;
      }, $Ruby25__reduce_425$301.$$arity = 3);
      
      Opal.def(self, '$_reduce_426', $Ruby25__reduce_426$302 = function $$_reduce_426(val, _values, result) {
        var self = this;

        
        result = [val['$[]'](0)];
        return result;
      }, $Ruby25__reduce_426$302.$$arity = 3);
      
      Opal.def(self, '$_reduce_428', $Ruby25__reduce_428$303 = function $$_reduce_428(val, _values, result) {
        var $a, $b, self = this, assoc_t = nil, exc_var = nil, exc_list = nil;

        
        $b = val['$[]'](2), $a = Opal.to_ary($b), (assoc_t = ($a[0] == null ? nil : $a[0])), (exc_var = ($a[1] == null ? nil : $a[1])), $b;
        if ($truthy(val['$[]'](1))) {
          exc_list = self.builder.$array(nil, val['$[]'](1), nil)};
        result = [self.builder.$rescue_body(val['$[]'](0), exc_list, assoc_t, exc_var, val['$[]'](3), val['$[]'](4))].concat(Opal.to_a(val['$[]'](5)));
        return result;
      }, $Ruby25__reduce_428$303.$$arity = 3);
      
      Opal.def(self, '$_reduce_429', $Ruby25__reduce_429$304 = function $$_reduce_429(val, _values, result) {
        var self = this;

        
        result = [];
        return result;
      }, $Ruby25__reduce_429$304.$$arity = 3);
      
      Opal.def(self, '$_reduce_430', $Ruby25__reduce_430$305 = function $$_reduce_430(val, _values, result) {
        var self = this;

        
        result = [val['$[]'](0)];
        return result;
      }, $Ruby25__reduce_430$305.$$arity = 3);
      
      Opal.def(self, '$_reduce_433', $Ruby25__reduce_433$306 = function $$_reduce_433(val, _values, result) {
        var self = this;

        
        result = [val['$[]'](0), val['$[]'](1)];
        return result;
      }, $Ruby25__reduce_433$306.$$arity = 3);
      
      Opal.def(self, '$_reduce_435', $Ruby25__reduce_435$307 = function $$_reduce_435(val, _values, result) {
        var self = this;

        
        result = [val['$[]'](0), val['$[]'](1)];
        return result;
      }, $Ruby25__reduce_435$307.$$arity = 3);
      
      Opal.def(self, '$_reduce_440', $Ruby25__reduce_440$308 = function $$_reduce_440(val, _values, result) {
        var self = this;

        
        result = self.builder.$string_compose(nil, val['$[]'](0), nil);
        return result;
      }, $Ruby25__reduce_440$308.$$arity = 3);
      
      Opal.def(self, '$_reduce_441', $Ruby25__reduce_441$309 = function $$_reduce_441(val, _values, result) {
        var self = this;

        
        result = [val['$[]'](0)];
        return result;
      }, $Ruby25__reduce_441$309.$$arity = 3);
      
      Opal.def(self, '$_reduce_442', $Ruby25__reduce_442$310 = function $$_reduce_442(val, _values, result) {
        var self = this;

        
        result = val['$[]'](0)['$<<'](val['$[]'](1));
        return result;
      }, $Ruby25__reduce_442$310.$$arity = 3);
      
      Opal.def(self, '$_reduce_443', $Ruby25__reduce_443$311 = function $$_reduce_443(val, _values, result) {
        var self = this, string = nil;

        
        string = self.builder.$string_compose(val['$[]'](0), val['$[]'](1), val['$[]'](2));
        result = self.builder.$dedent_string(string, self.lexer.$dedent_level());
        return result;
      }, $Ruby25__reduce_443$311.$$arity = 3);
      
      Opal.def(self, '$_reduce_444', $Ruby25__reduce_444$312 = function $$_reduce_444(val, _values, result) {
        var self = this, string = nil;

        
        string = self.builder.$string(val['$[]'](0));
        result = self.builder.$dedent_string(string, self.lexer.$dedent_level());
        return result;
      }, $Ruby25__reduce_444$312.$$arity = 3);
      
      Opal.def(self, '$_reduce_445', $Ruby25__reduce_445$313 = function $$_reduce_445(val, _values, result) {
        var self = this;

        
        result = self.builder.$character(val['$[]'](0));
        return result;
      }, $Ruby25__reduce_445$313.$$arity = 3);
      
      Opal.def(self, '$_reduce_446', $Ruby25__reduce_446$314 = function $$_reduce_446(val, _values, result) {
        var self = this, string = nil;

        
        string = self.builder.$xstring_compose(val['$[]'](0), val['$[]'](1), val['$[]'](2));
        result = self.builder.$dedent_string(string, self.lexer.$dedent_level());
        return result;
      }, $Ruby25__reduce_446$314.$$arity = 3);
      
      Opal.def(self, '$_reduce_447', $Ruby25__reduce_447$315 = function $$_reduce_447(val, _values, result) {
        var self = this, opts = nil;

        
        opts = self.builder.$regexp_options(val['$[]'](3));
        result = self.builder.$regexp_compose(val['$[]'](0), val['$[]'](1), val['$[]'](2), opts);
        return result;
      }, $Ruby25__reduce_447$315.$$arity = 3);
      
      Opal.def(self, '$_reduce_448', $Ruby25__reduce_448$316 = function $$_reduce_448(val, _values, result) {
        var self = this;

        
        result = self.builder.$words_compose(val['$[]'](0), val['$[]'](1), val['$[]'](2));
        return result;
      }, $Ruby25__reduce_448$316.$$arity = 3);
      
      Opal.def(self, '$_reduce_449', $Ruby25__reduce_449$317 = function $$_reduce_449(val, _values, result) {
        var self = this;

        
        result = [];
        return result;
      }, $Ruby25__reduce_449$317.$$arity = 3);
      
      Opal.def(self, '$_reduce_450', $Ruby25__reduce_450$318 = function $$_reduce_450(val, _values, result) {
        var self = this;

        
        result = val['$[]'](0)['$<<'](self.builder.$word(val['$[]'](1)));
        return result;
      }, $Ruby25__reduce_450$318.$$arity = 3);
      
      Opal.def(self, '$_reduce_451', $Ruby25__reduce_451$319 = function $$_reduce_451(val, _values, result) {
        var self = this;

        
        result = [val['$[]'](0)];
        return result;
      }, $Ruby25__reduce_451$319.$$arity = 3);
      
      Opal.def(self, '$_reduce_452', $Ruby25__reduce_452$320 = function $$_reduce_452(val, _values, result) {
        var self = this;

        
        result = val['$[]'](0)['$<<'](val['$[]'](1));
        return result;
      }, $Ruby25__reduce_452$320.$$arity = 3);
      
      Opal.def(self, '$_reduce_453', $Ruby25__reduce_453$321 = function $$_reduce_453(val, _values, result) {
        var self = this;

        
        result = self.builder.$symbols_compose(val['$[]'](0), val['$[]'](1), val['$[]'](2));
        return result;
      }, $Ruby25__reduce_453$321.$$arity = 3);
      
      Opal.def(self, '$_reduce_454', $Ruby25__reduce_454$322 = function $$_reduce_454(val, _values, result) {
        var self = this;

        
        result = [];
        return result;
      }, $Ruby25__reduce_454$322.$$arity = 3);
      
      Opal.def(self, '$_reduce_455', $Ruby25__reduce_455$323 = function $$_reduce_455(val, _values, result) {
        var self = this;

        
        result = val['$[]'](0)['$<<'](self.builder.$word(val['$[]'](1)));
        return result;
      }, $Ruby25__reduce_455$323.$$arity = 3);
      
      Opal.def(self, '$_reduce_456', $Ruby25__reduce_456$324 = function $$_reduce_456(val, _values, result) {
        var self = this;

        
        result = self.builder.$words_compose(val['$[]'](0), val['$[]'](1), val['$[]'](2));
        return result;
      }, $Ruby25__reduce_456$324.$$arity = 3);
      
      Opal.def(self, '$_reduce_457', $Ruby25__reduce_457$325 = function $$_reduce_457(val, _values, result) {
        var self = this;

        
        result = self.builder.$symbols_compose(val['$[]'](0), val['$[]'](1), val['$[]'](2));
        return result;
      }, $Ruby25__reduce_457$325.$$arity = 3);
      
      Opal.def(self, '$_reduce_458', $Ruby25__reduce_458$326 = function $$_reduce_458(val, _values, result) {
        var self = this;

        
        result = [];
        return result;
      }, $Ruby25__reduce_458$326.$$arity = 3);
      
      Opal.def(self, '$_reduce_459', $Ruby25__reduce_459$327 = function $$_reduce_459(val, _values, result) {
        var self = this;

        
        result = val['$[]'](0)['$<<'](self.builder.$string_internal(val['$[]'](1)));
        return result;
      }, $Ruby25__reduce_459$327.$$arity = 3);
      
      Opal.def(self, '$_reduce_460', $Ruby25__reduce_460$328 = function $$_reduce_460(val, _values, result) {
        var self = this;

        
        result = [];
        return result;
      }, $Ruby25__reduce_460$328.$$arity = 3);
      
      Opal.def(self, '$_reduce_461', $Ruby25__reduce_461$329 = function $$_reduce_461(val, _values, result) {
        var self = this;

        
        result = val['$[]'](0)['$<<'](self.builder.$symbol_internal(val['$[]'](1)));
        return result;
      }, $Ruby25__reduce_461$329.$$arity = 3);
      
      Opal.def(self, '$_reduce_462', $Ruby25__reduce_462$330 = function $$_reduce_462(val, _values, result) {
        var self = this;

        
        result = [];
        return result;
      }, $Ruby25__reduce_462$330.$$arity = 3);
      
      Opal.def(self, '$_reduce_463', $Ruby25__reduce_463$331 = function $$_reduce_463(val, _values, result) {
        var self = this;

        
        result = val['$[]'](0)['$<<'](val['$[]'](1));
        return result;
      }, $Ruby25__reduce_463$331.$$arity = 3);
      
      Opal.def(self, '$_reduce_464', $Ruby25__reduce_464$332 = function $$_reduce_464(val, _values, result) {
        var self = this;

        
        result = [];
        return result;
      }, $Ruby25__reduce_464$332.$$arity = 3);
      
      Opal.def(self, '$_reduce_465', $Ruby25__reduce_465$333 = function $$_reduce_465(val, _values, result) {
        var self = this;

        
        result = val['$[]'](0)['$<<'](val['$[]'](1));
        return result;
      }, $Ruby25__reduce_465$333.$$arity = 3);
      
      Opal.def(self, '$_reduce_466', $Ruby25__reduce_466$334 = function $$_reduce_466(val, _values, result) {
        var self = this;

        
        result = [];
        return result;
      }, $Ruby25__reduce_466$334.$$arity = 3);
      
      Opal.def(self, '$_reduce_467', $Ruby25__reduce_467$335 = function $$_reduce_467(val, _values, result) {
        var self = this;

        
        result = val['$[]'](0)['$<<'](val['$[]'](1));
        return result;
      }, $Ruby25__reduce_467$335.$$arity = 3);
      
      Opal.def(self, '$_reduce_468', $Ruby25__reduce_468$336 = function $$_reduce_468(val, _values, result) {
        var self = this;

        
        result = self.builder.$string_internal(val['$[]'](0));
        return result;
      }, $Ruby25__reduce_468$336.$$arity = 3);
      
      Opal.def(self, '$_reduce_469', $Ruby25__reduce_469$337 = function $$_reduce_469(val, _values, result) {
        var self = this;

        
        result = val['$[]'](1);
        return result;
      }, $Ruby25__reduce_469$337.$$arity = 3);
      
      Opal.def(self, '$_reduce_470', $Ruby25__reduce_470$338 = function $$_reduce_470(val, _values, result) {
        var self = this;

        
        self.lexer.$cmdarg().$push(false);
        self.lexer.$cond().$push(false);
        return result;
      }, $Ruby25__reduce_470$338.$$arity = 3);
      
      Opal.def(self, '$_reduce_471', $Ruby25__reduce_471$339 = function $$_reduce_471(val, _values, result) {
        var self = this;

        
        self.lexer.$cmdarg().$pop();
        self.lexer.$cond().$pop();
        result = self.builder.$begin(val['$[]'](0), val['$[]'](2), val['$[]'](3));
        return result;
      }, $Ruby25__reduce_471$339.$$arity = 3);
      
      Opal.def(self, '$_reduce_472', $Ruby25__reduce_472$340 = function $$_reduce_472(val, _values, result) {
        var self = this;

        
        result = self.builder.$gvar(val['$[]'](0));
        return result;
      }, $Ruby25__reduce_472$340.$$arity = 3);
      
      Opal.def(self, '$_reduce_473', $Ruby25__reduce_473$341 = function $$_reduce_473(val, _values, result) {
        var self = this;

        
        result = self.builder.$ivar(val['$[]'](0));
        return result;
      }, $Ruby25__reduce_473$341.$$arity = 3);
      
      Opal.def(self, '$_reduce_474', $Ruby25__reduce_474$342 = function $$_reduce_474(val, _values, result) {
        var self = this;

        
        result = self.builder.$cvar(val['$[]'](0));
        return result;
      }, $Ruby25__reduce_474$342.$$arity = 3);
      
      Opal.def(self, '$_reduce_476', $Ruby25__reduce_476$343 = function $$_reduce_476(val, _values, result) {
        var self = this, $writer = nil;

        
        
        $writer = ["expr_end"];
        $send(self.lexer, 'state=', Opal.to_a($writer));
        $writer[$rb_minus($writer["length"], 1)];;
        result = self.builder.$symbol(val['$[]'](0));
        return result;
      }, $Ruby25__reduce_476$343.$$arity = 3);
      
      Opal.def(self, '$_reduce_477', $Ruby25__reduce_477$344 = function $$_reduce_477(val, _values, result) {
        var self = this, $writer = nil;

        
        
        $writer = ["expr_end"];
        $send(self.lexer, 'state=', Opal.to_a($writer));
        $writer[$rb_minus($writer["length"], 1)];;
        result = self.builder.$symbol_compose(val['$[]'](0), val['$[]'](1), val['$[]'](2));
        return result;
      }, $Ruby25__reduce_477$344.$$arity = 3);
      
      Opal.def(self, '$_reduce_478', $Ruby25__reduce_478$345 = function $$_reduce_478(val, _values, result) {
        var self = this;

        
        result = val['$[]'](0);
        return result;
      }, $Ruby25__reduce_478$345.$$arity = 3);
      
      Opal.def(self, '$_reduce_479', $Ruby25__reduce_479$346 = function $$_reduce_479(val, _values, result) {
        var self = this;

        
        if ($truthy(self.builder['$respond_to?']("negate"))) {
          result = self.builder.$negate(val['$[]'](0), val['$[]'](1))
        } else {
          result = self.builder.$unary_num(val['$[]'](0), val['$[]'](1))
        };
        return result;
      }, $Ruby25__reduce_479$346.$$arity = 3);
      
      Opal.def(self, '$_reduce_480', $Ruby25__reduce_480$347 = function $$_reduce_480(val, _values, result) {
        var self = this, $writer = nil;

        
        
        $writer = ["expr_end"];
        $send(self.lexer, 'state=', Opal.to_a($writer));
        $writer[$rb_minus($writer["length"], 1)];;
        result = self.builder.$integer(val['$[]'](0));
        return result;
      }, $Ruby25__reduce_480$347.$$arity = 3);
      
      Opal.def(self, '$_reduce_481', $Ruby25__reduce_481$348 = function $$_reduce_481(val, _values, result) {
        var self = this, $writer = nil;

        
        
        $writer = ["expr_end"];
        $send(self.lexer, 'state=', Opal.to_a($writer));
        $writer[$rb_minus($writer["length"], 1)];;
        result = self.builder.$float(val['$[]'](0));
        return result;
      }, $Ruby25__reduce_481$348.$$arity = 3);
      
      Opal.def(self, '$_reduce_482', $Ruby25__reduce_482$349 = function $$_reduce_482(val, _values, result) {
        var self = this, $writer = nil;

        
        
        $writer = ["expr_end"];
        $send(self.lexer, 'state=', Opal.to_a($writer));
        $writer[$rb_minus($writer["length"], 1)];;
        result = self.builder.$rational(val['$[]'](0));
        return result;
      }, $Ruby25__reduce_482$349.$$arity = 3);
      
      Opal.def(self, '$_reduce_483', $Ruby25__reduce_483$350 = function $$_reduce_483(val, _values, result) {
        var self = this, $writer = nil;

        
        
        $writer = ["expr_end"];
        $send(self.lexer, 'state=', Opal.to_a($writer));
        $writer[$rb_minus($writer["length"], 1)];;
        result = self.builder.$complex(val['$[]'](0));
        return result;
      }, $Ruby25__reduce_483$350.$$arity = 3);
      
      Opal.def(self, '$_reduce_484', $Ruby25__reduce_484$351 = function $$_reduce_484(val, _values, result) {
        var self = this;

        
        result = self.builder.$ident(val['$[]'](0));
        return result;
      }, $Ruby25__reduce_484$351.$$arity = 3);
      
      Opal.def(self, '$_reduce_485', $Ruby25__reduce_485$352 = function $$_reduce_485(val, _values, result) {
        var self = this;

        
        result = self.builder.$ivar(val['$[]'](0));
        return result;
      }, $Ruby25__reduce_485$352.$$arity = 3);
      
      Opal.def(self, '$_reduce_486', $Ruby25__reduce_486$353 = function $$_reduce_486(val, _values, result) {
        var self = this;

        
        result = self.builder.$gvar(val['$[]'](0));
        return result;
      }, $Ruby25__reduce_486$353.$$arity = 3);
      
      Opal.def(self, '$_reduce_487', $Ruby25__reduce_487$354 = function $$_reduce_487(val, _values, result) {
        var self = this;

        
        result = self.builder.$const(val['$[]'](0));
        return result;
      }, $Ruby25__reduce_487$354.$$arity = 3);
      
      Opal.def(self, '$_reduce_488', $Ruby25__reduce_488$355 = function $$_reduce_488(val, _values, result) {
        var self = this;

        
        result = self.builder.$cvar(val['$[]'](0));
        return result;
      }, $Ruby25__reduce_488$355.$$arity = 3);
      
      Opal.def(self, '$_reduce_489', $Ruby25__reduce_489$356 = function $$_reduce_489(val, _values, result) {
        var self = this;

        
        result = self.builder.$nil(val['$[]'](0));
        return result;
      }, $Ruby25__reduce_489$356.$$arity = 3);
      
      Opal.def(self, '$_reduce_490', $Ruby25__reduce_490$357 = function $$_reduce_490(val, _values, result) {
        var self = this;

        
        result = self.builder.$self(val['$[]'](0));
        return result;
      }, $Ruby25__reduce_490$357.$$arity = 3);
      
      Opal.def(self, '$_reduce_491', $Ruby25__reduce_491$358 = function $$_reduce_491(val, _values, result) {
        var self = this;

        
        result = self.builder.$true(val['$[]'](0));
        return result;
      }, $Ruby25__reduce_491$358.$$arity = 3);
      
      Opal.def(self, '$_reduce_492', $Ruby25__reduce_492$359 = function $$_reduce_492(val, _values, result) {
        var self = this;

        
        result = self.builder.$false(val['$[]'](0));
        return result;
      }, $Ruby25__reduce_492$359.$$arity = 3);
      
      Opal.def(self, '$_reduce_493', $Ruby25__reduce_493$360 = function $$_reduce_493(val, _values, result) {
        var self = this;

        
        result = self.builder.$__FILE__(val['$[]'](0));
        return result;
      }, $Ruby25__reduce_493$360.$$arity = 3);
      
      Opal.def(self, '$_reduce_494', $Ruby25__reduce_494$361 = function $$_reduce_494(val, _values, result) {
        var self = this;

        
        result = self.builder.$__LINE__(val['$[]'](0));
        return result;
      }, $Ruby25__reduce_494$361.$$arity = 3);
      
      Opal.def(self, '$_reduce_495', $Ruby25__reduce_495$362 = function $$_reduce_495(val, _values, result) {
        var self = this;

        
        result = self.builder.$__ENCODING__(val['$[]'](0));
        return result;
      }, $Ruby25__reduce_495$362.$$arity = 3);
      
      Opal.def(self, '$_reduce_496', $Ruby25__reduce_496$363 = function $$_reduce_496(val, _values, result) {
        var self = this;

        
        result = self.builder.$accessible(val['$[]'](0));
        return result;
      }, $Ruby25__reduce_496$363.$$arity = 3);
      
      Opal.def(self, '$_reduce_497', $Ruby25__reduce_497$364 = function $$_reduce_497(val, _values, result) {
        var self = this;

        
        result = self.builder.$accessible(val['$[]'](0));
        return result;
      }, $Ruby25__reduce_497$364.$$arity = 3);
      
      Opal.def(self, '$_reduce_498', $Ruby25__reduce_498$365 = function $$_reduce_498(val, _values, result) {
        var self = this;

        
        result = self.builder.$assignable(val['$[]'](0));
        return result;
      }, $Ruby25__reduce_498$365.$$arity = 3);
      
      Opal.def(self, '$_reduce_499', $Ruby25__reduce_499$366 = function $$_reduce_499(val, _values, result) {
        var self = this;

        
        result = self.builder.$assignable(val['$[]'](0));
        return result;
      }, $Ruby25__reduce_499$366.$$arity = 3);
      
      Opal.def(self, '$_reduce_500', $Ruby25__reduce_500$367 = function $$_reduce_500(val, _values, result) {
        var self = this;

        
        result = self.builder.$nth_ref(val['$[]'](0));
        return result;
      }, $Ruby25__reduce_500$367.$$arity = 3);
      
      Opal.def(self, '$_reduce_501', $Ruby25__reduce_501$368 = function $$_reduce_501(val, _values, result) {
        var self = this;

        
        result = self.builder.$back_ref(val['$[]'](0));
        return result;
      }, $Ruby25__reduce_501$368.$$arity = 3);
      
      Opal.def(self, '$_reduce_502', $Ruby25__reduce_502$369 = function $$_reduce_502(val, _values, result) {
        var self = this, $writer = nil;

        
        
        $writer = ["expr_value"];
        $send(self.lexer, 'state=', Opal.to_a($writer));
        $writer[$rb_minus($writer["length"], 1)];;
        return result;
      }, $Ruby25__reduce_502$369.$$arity = 3);
      
      Opal.def(self, '$_reduce_503', $Ruby25__reduce_503$370 = function $$_reduce_503(val, _values, result) {
        var self = this;

        
        result = [val['$[]'](0), val['$[]'](2)];
        return result;
      }, $Ruby25__reduce_503$370.$$arity = 3);
      
      Opal.def(self, '$_reduce_504', $Ruby25__reduce_504$371 = function $$_reduce_504(val, _values, result) {
        var self = this;

        
        result = nil;
        return result;
      }, $Ruby25__reduce_504$371.$$arity = 3);
      
      Opal.def(self, '$_reduce_505', $Ruby25__reduce_505$372 = function $$_reduce_505(val, _values, result) {
        var self = this, $writer = nil;

        
        result = self.builder.$args(val['$[]'](0), val['$[]'](1), val['$[]'](2));
        
        $writer = ["expr_value"];
        $send(self.lexer, 'state=', Opal.to_a($writer));
        $writer[$rb_minus($writer["length"], 1)];;
        return result;
      }, $Ruby25__reduce_505$372.$$arity = 3);
      
      Opal.def(self, '$_reduce_506', $Ruby25__reduce_506$373 = function $$_reduce_506(val, _values, result) {
        var self = this, $writer = nil;

        
        result = self.lexer.$in_kwarg();
        
        $writer = [true];
        $send(self.lexer, 'in_kwarg=', Opal.to_a($writer));
        $writer[$rb_minus($writer["length"], 1)];;
        return result;
      }, $Ruby25__reduce_506$373.$$arity = 3);
      
      Opal.def(self, '$_reduce_507', $Ruby25__reduce_507$374 = function $$_reduce_507(val, _values, result) {
        var self = this, $writer = nil;

        
        
        $writer = [val['$[]'](0)];
        $send(self.lexer, 'in_kwarg=', Opal.to_a($writer));
        $writer[$rb_minus($writer["length"], 1)];;
        result = self.builder.$args(nil, val['$[]'](1), nil);
        return result;
      }, $Ruby25__reduce_507$374.$$arity = 3);
      
      Opal.def(self, '$_reduce_508', $Ruby25__reduce_508$375 = function $$_reduce_508(val, _values, result) {
        var self = this;

        
        result = val['$[]'](0).$concat(val['$[]'](2)).$concat(val['$[]'](3));
        return result;
      }, $Ruby25__reduce_508$375.$$arity = 3);
      
      Opal.def(self, '$_reduce_509', $Ruby25__reduce_509$376 = function $$_reduce_509(val, _values, result) {
        var self = this;

        
        result = val['$[]'](0).$concat(val['$[]'](1));
        return result;
      }, $Ruby25__reduce_509$376.$$arity = 3);
      
      Opal.def(self, '$_reduce_510', $Ruby25__reduce_510$377 = function $$_reduce_510(val, _values, result) {
        var self = this;

        
        result = val['$[]'](0).$concat(val['$[]'](1));
        return result;
      }, $Ruby25__reduce_510$377.$$arity = 3);
      
      Opal.def(self, '$_reduce_511', $Ruby25__reduce_511$378 = function $$_reduce_511(val, _values, result) {
        var self = this;

        
        result = [val['$[]'](0)];
        return result;
      }, $Ruby25__reduce_511$378.$$arity = 3);
      
      Opal.def(self, '$_reduce_512', $Ruby25__reduce_512$379 = function $$_reduce_512(val, _values, result) {
        var self = this;

        
        result = val['$[]'](1);
        return result;
      }, $Ruby25__reduce_512$379.$$arity = 3);
      
      Opal.def(self, '$_reduce_513', $Ruby25__reduce_513$380 = function $$_reduce_513(val, _values, result) {
        var self = this;

        
        result = [];
        return result;
      }, $Ruby25__reduce_513$380.$$arity = 3);
      
      Opal.def(self, '$_reduce_514', $Ruby25__reduce_514$381 = function $$_reduce_514(val, _values, result) {
        var self = this;

        
        result = val['$[]'](0).$concat(val['$[]'](2)).$concat(val['$[]'](4)).$concat(val['$[]'](5));
        return result;
      }, $Ruby25__reduce_514$381.$$arity = 3);
      
      Opal.def(self, '$_reduce_515', $Ruby25__reduce_515$382 = function $$_reduce_515(val, _values, result) {
        var self = this;

        
        result = val['$[]'](0).$concat(val['$[]'](2)).$concat(val['$[]'](4)).$concat(val['$[]'](6)).$concat(val['$[]'](7));
        return result;
      }, $Ruby25__reduce_515$382.$$arity = 3);
      
      Opal.def(self, '$_reduce_516', $Ruby25__reduce_516$383 = function $$_reduce_516(val, _values, result) {
        var self = this;

        
        result = val['$[]'](0).$concat(val['$[]'](2)).$concat(val['$[]'](3));
        return result;
      }, $Ruby25__reduce_516$383.$$arity = 3);
      
      Opal.def(self, '$_reduce_517', $Ruby25__reduce_517$384 = function $$_reduce_517(val, _values, result) {
        var self = this;

        
        result = val['$[]'](0).$concat(val['$[]'](2)).$concat(val['$[]'](4)).$concat(val['$[]'](5));
        return result;
      }, $Ruby25__reduce_517$384.$$arity = 3);
      
      Opal.def(self, '$_reduce_518', $Ruby25__reduce_518$385 = function $$_reduce_518(val, _values, result) {
        var self = this;

        
        result = val['$[]'](0).$concat(val['$[]'](2)).$concat(val['$[]'](3));
        return result;
      }, $Ruby25__reduce_518$385.$$arity = 3);
      
      Opal.def(self, '$_reduce_519', $Ruby25__reduce_519$386 = function $$_reduce_519(val, _values, result) {
        var self = this;

        
        result = val['$[]'](0).$concat(val['$[]'](2)).$concat(val['$[]'](4)).$concat(val['$[]'](5));
        return result;
      }, $Ruby25__reduce_519$386.$$arity = 3);
      
      Opal.def(self, '$_reduce_520', $Ruby25__reduce_520$387 = function $$_reduce_520(val, _values, result) {
        var self = this;

        
        result = val['$[]'](0).$concat(val['$[]'](1));
        return result;
      }, $Ruby25__reduce_520$387.$$arity = 3);
      
      Opal.def(self, '$_reduce_521', $Ruby25__reduce_521$388 = function $$_reduce_521(val, _values, result) {
        var self = this;

        
        result = val['$[]'](0).$concat(val['$[]'](2)).$concat(val['$[]'](3));
        return result;
      }, $Ruby25__reduce_521$388.$$arity = 3);
      
      Opal.def(self, '$_reduce_522', $Ruby25__reduce_522$389 = function $$_reduce_522(val, _values, result) {
        var self = this;

        
        result = val['$[]'](0).$concat(val['$[]'](2)).$concat(val['$[]'](4)).$concat(val['$[]'](5));
        return result;
      }, $Ruby25__reduce_522$389.$$arity = 3);
      
      Opal.def(self, '$_reduce_523', $Ruby25__reduce_523$390 = function $$_reduce_523(val, _values, result) {
        var self = this;

        
        result = val['$[]'](0).$concat(val['$[]'](1));
        return result;
      }, $Ruby25__reduce_523$390.$$arity = 3);
      
      Opal.def(self, '$_reduce_524', $Ruby25__reduce_524$391 = function $$_reduce_524(val, _values, result) {
        var self = this;

        
        result = val['$[]'](0).$concat(val['$[]'](2)).$concat(val['$[]'](3));
        return result;
      }, $Ruby25__reduce_524$391.$$arity = 3);
      
      Opal.def(self, '$_reduce_525', $Ruby25__reduce_525$392 = function $$_reduce_525(val, _values, result) {
        var self = this;

        
        result = val['$[]'](0).$concat(val['$[]'](1));
        return result;
      }, $Ruby25__reduce_525$392.$$arity = 3);
      
      Opal.def(self, '$_reduce_526', $Ruby25__reduce_526$393 = function $$_reduce_526(val, _values, result) {
        var self = this;

        
        result = val['$[]'](0).$concat(val['$[]'](2)).$concat(val['$[]'](3));
        return result;
      }, $Ruby25__reduce_526$393.$$arity = 3);
      
      Opal.def(self, '$_reduce_527', $Ruby25__reduce_527$394 = function $$_reduce_527(val, _values, result) {
        var self = this;

        
        result = val['$[]'](0);
        return result;
      }, $Ruby25__reduce_527$394.$$arity = 3);
      
      Opal.def(self, '$_reduce_528', $Ruby25__reduce_528$395 = function $$_reduce_528(val, _values, result) {
        var self = this;

        
        result = [];
        return result;
      }, $Ruby25__reduce_528$395.$$arity = 3);
      
      Opal.def(self, '$_reduce_529', $Ruby25__reduce_529$396 = function $$_reduce_529(val, _values, result) {
        var self = this;

        
        self.$diagnostic("error", "argument_const", nil, val['$[]'](0));
        return result;
      }, $Ruby25__reduce_529$396.$$arity = 3);
      
      Opal.def(self, '$_reduce_530', $Ruby25__reduce_530$397 = function $$_reduce_530(val, _values, result) {
        var self = this;

        
        self.$diagnostic("error", "argument_ivar", nil, val['$[]'](0));
        return result;
      }, $Ruby25__reduce_530$397.$$arity = 3);
      
      Opal.def(self, '$_reduce_531', $Ruby25__reduce_531$398 = function $$_reduce_531(val, _values, result) {
        var self = this;

        
        self.$diagnostic("error", "argument_gvar", nil, val['$[]'](0));
        return result;
      }, $Ruby25__reduce_531$398.$$arity = 3);
      
      Opal.def(self, '$_reduce_532', $Ruby25__reduce_532$399 = function $$_reduce_532(val, _values, result) {
        var self = this;

        
        self.$diagnostic("error", "argument_cvar", nil, val['$[]'](0));
        return result;
      }, $Ruby25__reduce_532$399.$$arity = 3);
      
      Opal.def(self, '$_reduce_534', $Ruby25__reduce_534$400 = function $$_reduce_534(val, _values, result) {
        var self = this;

        
        self.static_env.$declare(val['$[]'](0)['$[]'](0));
        result = val['$[]'](0);
        return result;
      }, $Ruby25__reduce_534$400.$$arity = 3);
      
      Opal.def(self, '$_reduce_535', $Ruby25__reduce_535$401 = function $$_reduce_535(val, _values, result) {
        var self = this;

        
        result = val['$[]'](0);
        return result;
      }, $Ruby25__reduce_535$401.$$arity = 3);
      
      Opal.def(self, '$_reduce_536', $Ruby25__reduce_536$402 = function $$_reduce_536(val, _values, result) {
        var self = this;

        
        result = self.builder.$arg(val['$[]'](0));
        return result;
      }, $Ruby25__reduce_536$402.$$arity = 3);
      
      Opal.def(self, '$_reduce_537', $Ruby25__reduce_537$403 = function $$_reduce_537(val, _values, result) {
        var self = this;

        
        result = self.builder.$multi_lhs(val['$[]'](0), val['$[]'](1), val['$[]'](2));
        return result;
      }, $Ruby25__reduce_537$403.$$arity = 3);
      
      Opal.def(self, '$_reduce_538', $Ruby25__reduce_538$404 = function $$_reduce_538(val, _values, result) {
        var self = this;

        
        result = [val['$[]'](0)];
        return result;
      }, $Ruby25__reduce_538$404.$$arity = 3);
      
      Opal.def(self, '$_reduce_539', $Ruby25__reduce_539$405 = function $$_reduce_539(val, _values, result) {
        var self = this;

        
        result = val['$[]'](0)['$<<'](val['$[]'](2));
        return result;
      }, $Ruby25__reduce_539$405.$$arity = 3);
      
      Opal.def(self, '$_reduce_540', $Ruby25__reduce_540$406 = function $$_reduce_540(val, _values, result) {
        var self = this;

        
        self.$check_kwarg_name(val['$[]'](0));
        self.static_env.$declare(val['$[]'](0)['$[]'](0));
        result = val['$[]'](0);
        return result;
      }, $Ruby25__reduce_540$406.$$arity = 3);
      
      Opal.def(self, '$_reduce_541', $Ruby25__reduce_541$407 = function $$_reduce_541(val, _values, result) {
        var self = this;

        
        result = self.builder.$kwoptarg(val['$[]'](0), val['$[]'](1));
        return result;
      }, $Ruby25__reduce_541$407.$$arity = 3);
      
      Opal.def(self, '$_reduce_542', $Ruby25__reduce_542$408 = function $$_reduce_542(val, _values, result) {
        var self = this;

        
        result = self.builder.$kwarg(val['$[]'](0));
        return result;
      }, $Ruby25__reduce_542$408.$$arity = 3);
      
      Opal.def(self, '$_reduce_543', $Ruby25__reduce_543$409 = function $$_reduce_543(val, _values, result) {
        var self = this;

        
        result = self.builder.$kwoptarg(val['$[]'](0), val['$[]'](1));
        return result;
      }, $Ruby25__reduce_543$409.$$arity = 3);
      
      Opal.def(self, '$_reduce_544', $Ruby25__reduce_544$410 = function $$_reduce_544(val, _values, result) {
        var self = this;

        
        result = self.builder.$kwarg(val['$[]'](0));
        return result;
      }, $Ruby25__reduce_544$410.$$arity = 3);
      
      Opal.def(self, '$_reduce_545', $Ruby25__reduce_545$411 = function $$_reduce_545(val, _values, result) {
        var self = this;

        
        result = [val['$[]'](0)];
        return result;
      }, $Ruby25__reduce_545$411.$$arity = 3);
      
      Opal.def(self, '$_reduce_546', $Ruby25__reduce_546$412 = function $$_reduce_546(val, _values, result) {
        var self = this;

        
        result = val['$[]'](0)['$<<'](val['$[]'](2));
        return result;
      }, $Ruby25__reduce_546$412.$$arity = 3);
      
      Opal.def(self, '$_reduce_547', $Ruby25__reduce_547$413 = function $$_reduce_547(val, _values, result) {
        var self = this;

        
        result = [val['$[]'](0)];
        return result;
      }, $Ruby25__reduce_547$413.$$arity = 3);
      
      Opal.def(self, '$_reduce_548', $Ruby25__reduce_548$414 = function $$_reduce_548(val, _values, result) {
        var self = this;

        
        result = val['$[]'](0)['$<<'](val['$[]'](2));
        return result;
      }, $Ruby25__reduce_548$414.$$arity = 3);
      
      Opal.def(self, '$_reduce_551', $Ruby25__reduce_551$415 = function $$_reduce_551(val, _values, result) {
        var self = this;

        
        self.static_env.$declare(val['$[]'](1)['$[]'](0));
        result = [self.builder.$kwrestarg(val['$[]'](0), val['$[]'](1))];
        return result;
      }, $Ruby25__reduce_551$415.$$arity = 3);
      
      Opal.def(self, '$_reduce_552', $Ruby25__reduce_552$416 = function $$_reduce_552(val, _values, result) {
        var self = this;

        
        result = [self.builder.$kwrestarg(val['$[]'](0))];
        return result;
      }, $Ruby25__reduce_552$416.$$arity = 3);
      
      Opal.def(self, '$_reduce_553', $Ruby25__reduce_553$417 = function $$_reduce_553(val, _values, result) {
        var self = this;

        
        result = self.builder.$optarg(val['$[]'](0), val['$[]'](1), val['$[]'](2));
        return result;
      }, $Ruby25__reduce_553$417.$$arity = 3);
      
      Opal.def(self, '$_reduce_554', $Ruby25__reduce_554$418 = function $$_reduce_554(val, _values, result) {
        var self = this;

        
        result = self.builder.$optarg(val['$[]'](0), val['$[]'](1), val['$[]'](2));
        return result;
      }, $Ruby25__reduce_554$418.$$arity = 3);
      
      Opal.def(self, '$_reduce_555', $Ruby25__reduce_555$419 = function $$_reduce_555(val, _values, result) {
        var self = this;

        
        result = [val['$[]'](0)];
        return result;
      }, $Ruby25__reduce_555$419.$$arity = 3);
      
      Opal.def(self, '$_reduce_556', $Ruby25__reduce_556$420 = function $$_reduce_556(val, _values, result) {
        var self = this;

        
        result = val['$[]'](0)['$<<'](val['$[]'](2));
        return result;
      }, $Ruby25__reduce_556$420.$$arity = 3);
      
      Opal.def(self, '$_reduce_557', $Ruby25__reduce_557$421 = function $$_reduce_557(val, _values, result) {
        var self = this;

        
        result = [val['$[]'](0)];
        return result;
      }, $Ruby25__reduce_557$421.$$arity = 3);
      
      Opal.def(self, '$_reduce_558', $Ruby25__reduce_558$422 = function $$_reduce_558(val, _values, result) {
        var self = this;

        
        result = val['$[]'](0)['$<<'](val['$[]'](2));
        return result;
      }, $Ruby25__reduce_558$422.$$arity = 3);
      
      Opal.def(self, '$_reduce_561', $Ruby25__reduce_561$423 = function $$_reduce_561(val, _values, result) {
        var self = this;

        
        self.static_env.$declare(val['$[]'](1)['$[]'](0));
        result = [self.builder.$restarg(val['$[]'](0), val['$[]'](1))];
        return result;
      }, $Ruby25__reduce_561$423.$$arity = 3);
      
      Opal.def(self, '$_reduce_562', $Ruby25__reduce_562$424 = function $$_reduce_562(val, _values, result) {
        var self = this;

        
        result = [self.builder.$restarg(val['$[]'](0))];
        return result;
      }, $Ruby25__reduce_562$424.$$arity = 3);
      
      Opal.def(self, '$_reduce_565', $Ruby25__reduce_565$425 = function $$_reduce_565(val, _values, result) {
        var self = this;

        
        self.static_env.$declare(val['$[]'](1)['$[]'](0));
        result = self.builder.$blockarg(val['$[]'](0), val['$[]'](1));
        return result;
      }, $Ruby25__reduce_565$425.$$arity = 3);
      
      Opal.def(self, '$_reduce_566', $Ruby25__reduce_566$426 = function $$_reduce_566(val, _values, result) {
        var self = this;

        
        result = [val['$[]'](1)];
        return result;
      }, $Ruby25__reduce_566$426.$$arity = 3);
      
      Opal.def(self, '$_reduce_567', $Ruby25__reduce_567$427 = function $$_reduce_567(val, _values, result) {
        var self = this;

        
        result = [];
        return result;
      }, $Ruby25__reduce_567$427.$$arity = 3);
      
      Opal.def(self, '$_reduce_569', $Ruby25__reduce_569$428 = function $$_reduce_569(val, _values, result) {
        var self = this;

        
        result = val['$[]'](1);
        return result;
      }, $Ruby25__reduce_569$428.$$arity = 3);
      
      Opal.def(self, '$_reduce_570', $Ruby25__reduce_570$429 = function $$_reduce_570(val, _values, result) {
        var self = this;

        
        result = [];
        return result;
      }, $Ruby25__reduce_570$429.$$arity = 3);
      
      Opal.def(self, '$_reduce_572', $Ruby25__reduce_572$430 = function $$_reduce_572(val, _values, result) {
        var self = this;

        
        result = [val['$[]'](0)];
        return result;
      }, $Ruby25__reduce_572$430.$$arity = 3);
      
      Opal.def(self, '$_reduce_573', $Ruby25__reduce_573$431 = function $$_reduce_573(val, _values, result) {
        var self = this;

        
        result = val['$[]'](0)['$<<'](val['$[]'](2));
        return result;
      }, $Ruby25__reduce_573$431.$$arity = 3);
      
      Opal.def(self, '$_reduce_574', $Ruby25__reduce_574$432 = function $$_reduce_574(val, _values, result) {
        var self = this;

        
        result = self.builder.$pair(val['$[]'](0), val['$[]'](1), val['$[]'](2));
        return result;
      }, $Ruby25__reduce_574$432.$$arity = 3);
      
      Opal.def(self, '$_reduce_575', $Ruby25__reduce_575$433 = function $$_reduce_575(val, _values, result) {
        var self = this;

        
        result = self.builder.$pair_keyword(val['$[]'](0), val['$[]'](1));
        return result;
      }, $Ruby25__reduce_575$433.$$arity = 3);
      
      Opal.def(self, '$_reduce_576', $Ruby25__reduce_576$434 = function $$_reduce_576(val, _values, result) {
        var self = this;

        
        result = self.builder.$pair_quoted(val['$[]'](0), val['$[]'](1), val['$[]'](2), val['$[]'](3));
        return result;
      }, $Ruby25__reduce_576$434.$$arity = 3);
      
      Opal.def(self, '$_reduce_577', $Ruby25__reduce_577$435 = function $$_reduce_577(val, _values, result) {
        var self = this;

        
        result = self.builder.$kwsplat(val['$[]'](0), val['$[]'](1));
        return result;
      }, $Ruby25__reduce_577$435.$$arity = 3);
      
      Opal.def(self, '$_reduce_590', $Ruby25__reduce_590$436 = function $$_reduce_590(val, _values, result) {
        var self = this;

        
        result = ["dot", val['$[]'](0)['$[]'](1)];
        return result;
      }, $Ruby25__reduce_590$436.$$arity = 3);
      
      Opal.def(self, '$_reduce_591', $Ruby25__reduce_591$437 = function $$_reduce_591(val, _values, result) {
        var self = this;

        
        result = ["anddot", val['$[]'](0)['$[]'](1)];
        return result;
      }, $Ruby25__reduce_591$437.$$arity = 3);
      
      Opal.def(self, '$_reduce_596', $Ruby25__reduce_596$438 = function $$_reduce_596(val, _values, result) {
        var self = this;

        
        result = val['$[]'](1);
        return result;
      }, $Ruby25__reduce_596$438.$$arity = 3);
      
      Opal.def(self, '$_reduce_597', $Ruby25__reduce_597$439 = function $$_reduce_597(val, _values, result) {
        var self = this;

        
        result = val['$[]'](1);
        return result;
      }, $Ruby25__reduce_597$439.$$arity = 3);
      
      Opal.def(self, '$_reduce_601', $Ruby25__reduce_601$440 = function $$_reduce_601(val, _values, result) {
        var self = this;

        
        self.$yyerrok();
        return result;
      }, $Ruby25__reduce_601$440.$$arity = 3);
      
      Opal.def(self, '$_reduce_605', $Ruby25__reduce_605$441 = function $$_reduce_605(val, _values, result) {
        var self = this;

        
        result = nil;
        return result;
      }, $Ruby25__reduce_605$441.$$arity = 3);
      return (Opal.def(self, '$_reduce_none', $Ruby25__reduce_none$442 = function $$_reduce_none(val, _values, result) {
        var self = this;

        return val['$[]'](0)
      }, $Ruby25__reduce_none$442.$$arity = 3), nil) && '_reduce_none';
    })($nesting[0], $$$($$($nesting, 'Parser'), 'Base'), $nesting)
  })($nesting[0], $nesting);
};

/* Generated by Opal 1.0.0 */
Opal.modules["opal/ast/builder"] = function(Opal) {
  function $rb_minus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs - rhs : lhs['$-'](rhs);
  }
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.$$$, $$ = Opal.$$, $module = Opal.module, $klass = Opal.klass, $send = Opal.send, $hash2 = Opal.hash2;

  Opal.add_stubs(['$require', '$emit_lambda=', '$-', '$new']);
  
  self.$require("opal/ast/node");
  self.$require("parser/ruby25");
  return (function($base, $parent_nesting) {
    var self = $module($base, 'Opal');

    var $nesting = [self].concat($parent_nesting);

    (function($base, $parent_nesting) {
      var self = $module($base, 'AST');

      var $nesting = [self].concat($parent_nesting);

      (function($base, $super, $parent_nesting) {
        var self = $klass($base, $super, 'Builder');

        var $nesting = [self].concat($parent_nesting), $Builder_n$1, $writer = nil;

        
        
        $writer = [true];
        $send(self, 'emit_lambda=', Opal.to_a($writer));
        $writer[$rb_minus($writer["length"], 1)];;
        return (Opal.def(self, '$n', $Builder_n$1 = function $$n(type, children, location) {
          var self = this;

          return $$$($$$($$$('::', 'Opal'), 'AST'), 'Node').$new(type, children, $hash2(["location"], {"location": location}))
        }, $Builder_n$1.$$arity = 3), nil) && 'n';
      })($nesting[0], $$$($$$($$$('::', 'Parser'), 'Builders'), 'Default'), $nesting)
    })($nesting[0], $nesting)
  })($nesting[0], $nesting);
};

/* Generated by Opal 1.0.0 */
Opal.modules["opal/rewriters/base"] = function(Opal) {
  function $rb_plus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs + rhs : lhs['$+'](rhs);
  }
  function $rb_minus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs - rhs : lhs['$-'](rhs);
  }
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.$$$, $$ = Opal.$$, $module = Opal.module, $klass = Opal.klass, $truthy = Opal.truthy, $hash2 = Opal.hash2, $send = Opal.send, $send2 = Opal.send2;

  Opal.add_stubs(['$require', '$new', '$current_node', '$loc', '$+', '$stmts_of', '$begin_with_stmts', '$nil?', '$include?', '$type', '$children', '$length', '$===', '$[]', '$s', '$attr_accessor', '$current_node=', '$-', '$location=', '$raise']);
  
  self.$require("parser");
  self.$require("opal/ast/node");
  return (function($base, $parent_nesting) {
    var self = $module($base, 'Opal');

    var $nesting = [self].concat($parent_nesting);

    (function($base, $parent_nesting) {
      var self = $module($base, 'Rewriters');

      var $nesting = [self].concat($parent_nesting);

      (function($base, $super, $parent_nesting) {
        var self = $klass($base, $super, 'Base');

        var $nesting = [self].concat($parent_nesting), $Base_s$9, $Base_s$10, $Base_prepend_to_body$11, $Base_append_to_body$12, $Base_stmts_of$13, $Base_begin_with_stmts$14, $Base_process$15, $Base_error$16;

        
        (function($base, $super, $parent_nesting) {
          var self = $klass($base, $super, 'DummyLocation');

          var $nesting = [self].concat($parent_nesting), $DummyLocation_node$eq$1, $DummyLocation_expression$2, $DummyLocation_begin_pos$3, $DummyLocation_end_pos$4, $DummyLocation_source$5, $DummyLocation_line$6, $DummyLocation_column$7, $DummyLocation_last_line$8;

          
          
          Opal.def(self, '$node=', $DummyLocation_node$eq$1 = function($a) {
            var $post_args, self = this;

            
            
            $post_args = Opal.slice.call(arguments, 0, arguments.length);
            ;
            return nil;
          }, $DummyLocation_node$eq$1.$$arity = -1);
          
          Opal.def(self, '$expression', $DummyLocation_expression$2 = function $$expression() {
            var self = this;

            return self
          }, $DummyLocation_expression$2.$$arity = 0);
          
          Opal.def(self, '$begin_pos', $DummyLocation_begin_pos$3 = function $$begin_pos() {
            var self = this;

            return 0
          }, $DummyLocation_begin_pos$3.$$arity = 0);
          
          Opal.def(self, '$end_pos', $DummyLocation_end_pos$4 = function $$end_pos() {
            var self = this;

            return 0
          }, $DummyLocation_end_pos$4.$$arity = 0);
          
          Opal.def(self, '$source', $DummyLocation_source$5 = function $$source() {
            var self = this;

            return ""
          }, $DummyLocation_source$5.$$arity = 0);
          
          Opal.def(self, '$line', $DummyLocation_line$6 = function $$line() {
            var self = this;

            return 0
          }, $DummyLocation_line$6.$$arity = 0);
          
          Opal.def(self, '$column', $DummyLocation_column$7 = function $$column() {
            var self = this;

            return 0
          }, $DummyLocation_column$7.$$arity = 0);
          return (Opal.def(self, '$last_line', $DummyLocation_last_line$8 = function $$last_line() {
            var self = this;

            return $$$($$($nesting, 'Float'), 'INFINITY')
          }, $DummyLocation_last_line$8.$$arity = 0), nil) && 'last_line';
        })($nesting[0], null, $nesting);
        Opal.const_set($nesting[0], 'DUMMY_LOCATION', $$($nesting, 'DummyLocation').$new());
        
        Opal.def(self, '$s', $Base_s$9 = function $$s(type, $a) {
          var $post_args, children, self = this, loc = nil;

          
          
          $post_args = Opal.slice.call(arguments, 1, arguments.length);
          
          children = $post_args;;
          loc = (function() {if ($truthy(self.$current_node())) {
            return self.$current_node().$loc()
          } else {
            return $$($nesting, 'DUMMY_LOCATION')
          }; return nil; })();
          return $$$($$$($$$('::', 'Opal'), 'AST'), 'Node').$new(type, children, $hash2(["location"], {"location": loc}));
        }, $Base_s$9.$$arity = -2);
        Opal.defs(self, '$s', $Base_s$10 = function $$s(type, $a) {
          var $post_args, children, self = this;

          
          
          $post_args = Opal.slice.call(arguments, 1, arguments.length);
          
          children = $post_args;;
          return $$$($$$($$$('::', 'Opal'), 'AST'), 'Node').$new(type, children, $hash2(["location"], {"location": $$($nesting, 'DUMMY_LOCATION')}));
        }, $Base_s$10.$$arity = -2);
        Opal.alias(self, "on_iter", "process_regular_node");
        Opal.alias(self, "on_top", "process_regular_node");
        Opal.alias(self, "on_zsuper", "process_regular_node");
        Opal.alias(self, "on_jscall", "on_send");
        Opal.alias(self, "on_jsattr", "process_regular_node");
        Opal.alias(self, "on_jsattrasgn", "process_regular_node");
        Opal.alias(self, "on_kwsplat", "process_regular_node");
        
        Opal.def(self, '$prepend_to_body', $Base_prepend_to_body$11 = function $$prepend_to_body(body, node) {
          var self = this, stmts = nil;

          
          stmts = $rb_plus(self.$stmts_of(node), self.$stmts_of(body));
          return self.$begin_with_stmts(stmts);
        }, $Base_prepend_to_body$11.$$arity = 2);
        
        Opal.def(self, '$append_to_body', $Base_append_to_body$12 = function $$append_to_body(body, node) {
          var self = this, stmts = nil;

          
          stmts = $rb_plus(self.$stmts_of(body), self.$stmts_of(node));
          return self.$begin_with_stmts(stmts);
        }, $Base_append_to_body$12.$$arity = 2);
        
        Opal.def(self, '$stmts_of', $Base_stmts_of$13 = function $$stmts_of(node) {
          var self = this;

          if ($truthy(node['$nil?']())) {
            return []
          } else if ($truthy(["begin", "kwbegin"]['$include?'](node.$type()))) {
            return node.$children()
          } else {
            return [node]
          }
        }, $Base_stmts_of$13.$$arity = 1);
        
        Opal.def(self, '$begin_with_stmts', $Base_begin_with_stmts$14 = function $$begin_with_stmts(stmts) {
          var self = this, $case = nil;

          return (function() {$case = stmts.$length();
          if ((0)['$===']($case)) {return nil}
          else if ((1)['$===']($case)) {return stmts['$[]'](0)}
          else {return $send(self, 's', ["begin"].concat(Opal.to_a(stmts)))}})()
        }, $Base_begin_with_stmts$14.$$arity = 1);
        self.$attr_accessor("current_node");
        
        Opal.def(self, '$process', $Base_process$15 = function $$process(node) {
          var $iter = $Base_process$15.$$p, $yield = $iter || nil, self = this, $writer = nil, $zuper = nil, $zuper_i = nil, $zuper_ii = nil;

          if ($iter) $Base_process$15.$$p = null;
          // Prepare super implicit arguments
          for($zuper_i = 0, $zuper_ii = arguments.length, $zuper = new Array($zuper_ii); $zuper_i < $zuper_ii; $zuper_i++) {
            $zuper[$zuper_i] = arguments[$zuper_i];
          }
          return (function() { try {
          
          
          $writer = [node];
          $send(self, 'current_node=', Opal.to_a($writer));
          $writer[$rb_minus($writer["length"], 1)];;
          return $send2(self, Opal.find_super_dispatcher(self, 'process', $Base_process$15, false, true), 'process', $zuper, $iter);
          } finally {
            (($writer = [nil]), $send(self, 'current_node=', Opal.to_a($writer)), $writer[$rb_minus($writer["length"], 1)])
          }; })()
        }, $Base_process$15.$$arity = 1);
        return (Opal.def(self, '$error', $Base_error$16 = function $$error(msg) {
          var self = this, error = nil, $writer = nil;

          
          error = $$$($$$('::', 'Opal'), 'RewritingError').$new(msg);
          if ($truthy(self.$current_node())) {
            
            $writer = [self.$current_node().$loc()];
            $send(error, 'location=', Opal.to_a($writer));
            $writer[$rb_minus($writer["length"], 1)];};
          return self.$raise(error);
        }, $Base_error$16.$$arity = 1), nil) && 'error';
      })($nesting[0], $$$($$$($$$('::', 'Parser'), 'AST'), 'Processor'), $nesting)
    })($nesting[0], $nesting)
  })($nesting[0], $nesting);
};

/* Generated by Opal 1.0.0 */
Opal.modules["opal/rewriters/opal_engine_check"] = function(Opal) {
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.$$$, $$ = Opal.$$, $module = Opal.module, $klass = Opal.klass, $truthy = Opal.truthy;

  Opal.add_stubs(['$require', '$children', '$skip_check_present?', '$s', '$skip_check_present_not?', '$updated', '$process_all', '$==']);
  
  self.$require("opal/rewriters/base");
  return (function($base, $parent_nesting) {
    var self = $module($base, 'Opal');

    var $nesting = [self].concat($parent_nesting);

    (function($base, $parent_nesting) {
      var self = $module($base, 'Rewriters');

      var $nesting = [self].concat($parent_nesting);

      (function($base, $super, $parent_nesting) {
        var self = $klass($base, $super, 'OpalEngineCheck');

        var $nesting = [self].concat($parent_nesting), $OpalEngineCheck_on_if$1, $OpalEngineCheck_skip_check_present$ques$2, $OpalEngineCheck_skip_check_present_not$ques$3;

        
        
        Opal.def(self, '$on_if', $OpalEngineCheck_on_if$1 = function $$on_if(node) {
          var $a, self = this, test = nil, true_body = nil, false_body = nil;

          
          $a = [].concat(Opal.to_a(node.$children())), (test = ($a[0] == null ? nil : $a[0])), (true_body = ($a[1] == null ? nil : $a[1])), (false_body = ($a[2] == null ? nil : $a[2])), $a;
          if ($truthy(self['$skip_check_present?'](test))) {
            false_body = self.$s("nil")};
          if ($truthy(self['$skip_check_present_not?'](test))) {
            true_body = self.$s("nil")};
          return node.$updated(nil, self.$process_all([test, true_body, false_body]));
        }, $OpalEngineCheck_on_if$1.$$arity = 1);
        
        Opal.def(self, '$skip_check_present?', $OpalEngineCheck_skip_check_present$ques$2 = function(test) {
          var $a, self = this;

          return ($truthy($a = test['$==']($$($nesting, 'RUBY_ENGINE_CHECK'))) ? $a : test['$==']($$($nesting, 'RUBY_PLATFORM_CHECK')))
        }, $OpalEngineCheck_skip_check_present$ques$2.$$arity = 1);
        
        Opal.def(self, '$skip_check_present_not?', $OpalEngineCheck_skip_check_present_not$ques$3 = function(test) {
          var $a, self = this;

          return ($truthy($a = test['$==']($$($nesting, 'RUBY_ENGINE_CHECK_NOT'))) ? $a : test['$==']($$($nesting, 'RUBY_PLATFORM_CHECK_NOT')))
        }, $OpalEngineCheck_skip_check_present_not$ques$3.$$arity = 1);
        Opal.const_set($nesting[0], 'RUBY_ENGINE_CHECK', self.$s("send", self.$s("const", nil, "RUBY_ENGINE"), "==", self.$s("str", "opal")));
        Opal.const_set($nesting[0], 'RUBY_ENGINE_CHECK_NOT', self.$s("send", self.$s("const", nil, "RUBY_ENGINE"), "!=", self.$s("str", "opal")));
        Opal.const_set($nesting[0], 'RUBY_PLATFORM_CHECK', self.$s("send", self.$s("const", nil, "RUBY_PLATFORM"), "==", self.$s("str", "opal")));
        return Opal.const_set($nesting[0], 'RUBY_PLATFORM_CHECK_NOT', self.$s("send", self.$s("const", nil, "RUBY_PLATFORM"), "!=", self.$s("str", "opal")));
      })($nesting[0], $$($nesting, 'Base'), $nesting)
    })($nesting[0], $nesting)
  })($nesting[0], $nesting);
};

/* Generated by Opal 1.0.0 */
Opal.modules["opal/rewriters/for_rewriter"] = function(Opal) {
  function $rb_plus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs + rhs : lhs['$+'](rhs);
  }
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.$$$, $$ = Opal.$$, $module = Opal.module, $klass = Opal.klass, $truthy = Opal.truthy, $send = Opal.send, $send2 = Opal.send2;

  Opal.add_stubs(['$require', '$+', '$find', '$map', '$s', '$next_tmp', '$class', '$type', '$===', '$<<', '$prepend_to_body', '$process', '$attr_reader', '$new', '$to_a', '$result']);
  
  self.$require("opal/rewriters/base");
  return (function($base, $parent_nesting) {
    var self = $module($base, 'Opal');

    var $nesting = [self].concat($parent_nesting);

    (function($base, $parent_nesting) {
      var self = $module($base, 'Rewriters');

      var $nesting = [self].concat($parent_nesting);

      (function($base, $super, $parent_nesting) {
        var self = $klass($base, $super, 'ForRewriter');

        var $nesting = [self].concat($parent_nesting), $ForRewriter_reset_tmp_counter$excl$1, $ForRewriter_next_tmp$2, $ForRewriter_on_for$3;

        
        Opal.defs(self, '$reset_tmp_counter!', $ForRewriter_reset_tmp_counter$excl$1 = function() {
          var self = this;

          return (self.counter = 0)
        }, $ForRewriter_reset_tmp_counter$excl$1.$$arity = 0);
        Opal.defs(self, '$next_tmp', $ForRewriter_next_tmp$2 = function $$next_tmp() {
          var $a, self = this;
          if (self.counter == null) self.counter = nil;

          
          self.counter = ($truthy($a = self.counter) ? $a : 0);
          self.counter = $rb_plus(self.counter, 1);
          return "" + "$for_tmp" + (self.counter);
        }, $ForRewriter_next_tmp$2.$$arity = 0);
        
        Opal.def(self, '$on_for', $ForRewriter_on_for$3 = function $$on_for(node) {
          var $a, $$4, self = this, loop_variable = nil, iterating_value = nil, loop_body = nil, iterating_lvars = nil, lvars_declared_in_body = nil, outer_assigns = nil, tmp_loop_variable = nil, get_tmp_loop_variable = nil, loop_variable_assignment = nil, $case = nil;

          
          $a = [].concat(Opal.to_a(node)), (loop_variable = ($a[0] == null ? nil : $a[0])), (iterating_value = ($a[1] == null ? nil : $a[1])), (loop_body = ($a[2] == null ? nil : $a[2])), $a;
          iterating_lvars = $$($nesting, 'LocalVariableAssigns').$find(loop_variable);
          lvars_declared_in_body = $$($nesting, 'LocalVariableAssigns').$find(loop_body);
          outer_assigns = $send($rb_plus(iterating_lvars, lvars_declared_in_body), 'map', [], ($$4 = function(lvar_name){var self = $$4.$$s == null ? this : $$4.$$s;

          
            
            if (lvar_name == null) {
              lvar_name = nil;
            };
            return self.$s("lvdeclare", lvar_name);}, $$4.$$s = self, $$4.$$arity = 1, $$4));
          tmp_loop_variable = self.$class().$next_tmp();
          get_tmp_loop_variable = self.$s("js_tmp", tmp_loop_variable);
          loop_variable_assignment = (function() {$case = loop_variable.$type();
          if ("mlhs"['$===']($case)) {return self.$s("masgn", loop_variable, get_tmp_loop_variable)}
          else {return loop_variable['$<<'](get_tmp_loop_variable)}})();
          loop_body = self.$prepend_to_body(loop_body, loop_variable_assignment);
          node = self.$s("send", iterating_value, "each", self.$s("iter", self.$s("args", self.$s("arg", tmp_loop_variable)), self.$process(loop_body)));
          return $send(self, 's', ["begin"].concat(Opal.to_a(outer_assigns)).concat([node]));
        }, $ForRewriter_on_for$3.$$arity = 1);
        return (function($base, $super, $parent_nesting) {
          var self = $klass($base, $super, 'LocalVariableAssigns');

          var $nesting = [self].concat($parent_nesting), $LocalVariableAssigns_find$5, $LocalVariableAssigns_initialize$6, $LocalVariableAssigns_on_lvasgn$7;

          
          self.$attr_reader("result");
          Opal.defs(self, '$find', $LocalVariableAssigns_find$5 = function $$find(node) {
            var self = this, processor = nil;

            
            processor = self.$new();
            processor.$process(node);
            return processor.$result().$to_a();
          }, $LocalVariableAssigns_find$5.$$arity = 1);
          
          Opal.def(self, '$initialize', $LocalVariableAssigns_initialize$6 = function $$initialize() {
            var self = this;

            return (self.result = $$($nesting, 'Set').$new())
          }, $LocalVariableAssigns_initialize$6.$$arity = 0);
          return (Opal.def(self, '$on_lvasgn', $LocalVariableAssigns_on_lvasgn$7 = function $$on_lvasgn(node) {
            var $a, $iter = $LocalVariableAssigns_on_lvasgn$7.$$p, $yield = $iter || nil, self = this, name = nil, _ = nil, $zuper = nil, $zuper_i = nil, $zuper_ii = nil;

            if ($iter) $LocalVariableAssigns_on_lvasgn$7.$$p = null;
            // Prepare super implicit arguments
            for($zuper_i = 0, $zuper_ii = arguments.length, $zuper = new Array($zuper_ii); $zuper_i < $zuper_ii; $zuper_i++) {
              $zuper[$zuper_i] = arguments[$zuper_i];
            }
            
            $a = [].concat(Opal.to_a(node)), (name = ($a[0] == null ? nil : $a[0])), (_ = ($a[1] == null ? nil : $a[1])), $a;
            self.$result()['$<<'](name);
            return $send2(self, Opal.find_super_dispatcher(self, 'on_lvasgn', $LocalVariableAssigns_on_lvasgn$7, false, true), 'on_lvasgn', $zuper, $iter);
          }, $LocalVariableAssigns_on_lvasgn$7.$$arity = 1), nil) && 'on_lvasgn';
        })($nesting[0], $$($nesting, 'Base'), $nesting);
      })($nesting[0], $$($nesting, 'Base'), $nesting)
    })($nesting[0], $nesting)
  })($nesting[0], $nesting);
};

/* Generated by Opal 1.0.0 */
Opal.modules["opal/rewriters/explicit_writer_return"] = function(Opal) {
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.$$$, $$ = Opal.$$, $module = Opal.module, $klass = Opal.klass, $truthy = Opal.truthy, $send2 = Opal.send2, $slice = Opal.slice, $send = Opal.send;

  Opal.add_stubs(['$require', '$s', '$=~', '$to_s', '$==', '$process_all', '$updated']);
  
  self.$require("opal/rewriters/base");
  return (function($base, $parent_nesting) {
    var self = $module($base, 'Opal');

    var $nesting = [self].concat($parent_nesting);

    (function($base, $parent_nesting) {
      var self = $module($base, 'Rewriters');

      var $nesting = [self].concat($parent_nesting);

      (function($base, $super, $parent_nesting) {
        var self = $klass($base, $super, 'ExplicitWriterReturn');

        var $nesting = [self].concat($parent_nesting), $ExplicitWriterReturn_initialize$1, $ExplicitWriterReturn_on_send$2, $ExplicitWriterReturn_on_masgn$3;

        self.$$prototype.in_masgn = nil;
        
        
        Opal.def(self, '$initialize', $ExplicitWriterReturn_initialize$1 = function $$initialize() {
          var self = this;

          return (self.in_masgn = false)
        }, $ExplicitWriterReturn_initialize$1.$$arity = 0);
        Opal.const_set($nesting[0], 'TMP_NAME', "$writer");
        Opal.const_set($nesting[0], 'GET_ARGS_NODE', self.$s("lvar", $$($nesting, 'TMP_NAME')));
        Opal.const_set($nesting[0], 'RETURN_ARGS_NODE', self.$s("jsattr", $$($nesting, 'GET_ARGS_NODE'), self.$s("send", self.$s("jsattr", $$($nesting, 'GET_ARGS_NODE'), self.$s("str", "length")), "-", self.$s("int", 1))));
        
        Opal.def(self, '$on_send', $ExplicitWriterReturn_on_send$2 = function $$on_send(node) {
          var $a, $iter = $ExplicitWriterReturn_on_send$2.$$p, $yield = $iter || nil, self = this, recv = nil, method_name = nil, args = nil, set_args_node = nil, $zuper = nil, $zuper_i = nil, $zuper_ii = nil;

          if ($iter) $ExplicitWriterReturn_on_send$2.$$p = null;
          // Prepare super implicit arguments
          for($zuper_i = 0, $zuper_ii = arguments.length, $zuper = new Array($zuper_ii); $zuper_i < $zuper_ii; $zuper_i++) {
            $zuper[$zuper_i] = arguments[$zuper_i];
          }
          
          if ($truthy(self.in_masgn)) {
            return $send2(self, Opal.find_super_dispatcher(self, 'on_send', $ExplicitWriterReturn_on_send$2, false, true), 'on_send', $zuper, $iter)};
          $a = [].concat(Opal.to_a(node)), (recv = ($a[0] == null ? nil : $a[0])), (method_name = ($a[1] == null ? nil : $a[1])), (args = $slice.call($a, 2)), $a;
          if ($truthy(($truthy($a = method_name.$to_s()['$=~'](Opal.regexp([$$($nesting, 'REGEXP_START'), "\\w+=", $$($nesting, 'REGEXP_END')]))) ? $a : method_name.$to_s()['$==']("[]=")))) {
            
            set_args_node = self.$s("lvasgn", $$($nesting, 'TMP_NAME'), $send(self, 's', ["array"].concat(Opal.to_a(self.$process_all(args)))));
            return self.$s("begin", set_args_node, node.$updated(nil, [recv, method_name, self.$s("splat", $$($nesting, 'GET_ARGS_NODE'))]), $$($nesting, 'RETURN_ARGS_NODE'));
          } else {
            return $send2(self, Opal.find_super_dispatcher(self, 'on_send', $ExplicitWriterReturn_on_send$2, false, true), 'on_send', $zuper, $iter)
          };
        }, $ExplicitWriterReturn_on_send$2.$$arity = 1);
        return (Opal.def(self, '$on_masgn', $ExplicitWriterReturn_on_masgn$3 = function $$on_masgn(node) {
          var $iter = $ExplicitWriterReturn_on_masgn$3.$$p, $yield = $iter || nil, self = this, result = nil, $zuper = nil, $zuper_i = nil, $zuper_ii = nil;

          if ($iter) $ExplicitWriterReturn_on_masgn$3.$$p = null;
          // Prepare super implicit arguments
          for($zuper_i = 0, $zuper_ii = arguments.length, $zuper = new Array($zuper_ii); $zuper_i < $zuper_ii; $zuper_i++) {
            $zuper[$zuper_i] = arguments[$zuper_i];
          }
          
          self.in_masgn = true;
          result = $send2(self, Opal.find_super_dispatcher(self, 'on_masgn', $ExplicitWriterReturn_on_masgn$3, false, true), 'on_masgn', $zuper, $iter);
          self.in_masgn = false;
          return result;
        }, $ExplicitWriterReturn_on_masgn$3.$$arity = 1), nil) && 'on_masgn';
      })($nesting[0], $$($nesting, 'Base'), $nesting)
    })($nesting[0], $nesting)
  })($nesting[0], $nesting);
};

/* Generated by Opal 1.0.0 */
Opal.modules["opal/rewriters/js_reserved_words"] = function(Opal) {
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.$$$, $$ = Opal.$$, $module = Opal.module, $klass = Opal.klass, $truthy = Opal.truthy, $range = Opal.range, $send2 = Opal.send2, $hash2 = Opal.hash2;

  Opal.add_stubs(['$require', '$freeze', '$=~', '$!', '$valid_name?', '$class', '$to_sym', '$valid_ivar_name?', '$[]', '$to_s', '$updated', '$fix_var_name', '$fix_ivar_name']);
  
  self.$require("opal/rewriters/base");
  self.$require("opal/regexp_anchors");
  return (function($base, $parent_nesting) {
    var self = $module($base, 'Opal');

    var $nesting = [self].concat($parent_nesting);

    (function($base, $parent_nesting) {
      var self = $module($base, 'Rewriters');

      var $nesting = [self].concat($parent_nesting);

      (function($base, $super, $parent_nesting) {
        var self = $klass($base, $super, 'JsReservedWords');

        var $nesting = [self].concat($parent_nesting), $JsReservedWords_valid_name$ques$1, $JsReservedWords_valid_ivar_name$ques$2, $JsReservedWords_fix_var_name$3, $JsReservedWords_fix_ivar_name$4, $JsReservedWords_on_lvar$5, $JsReservedWords_on_lvasgn$6, $JsReservedWords_on_ivar$7, $JsReservedWords_on_ivasgn$8, $JsReservedWords_on_restarg$9, $JsReservedWords_on_argument$10;

        
        Opal.const_set($nesting[0], 'ES51_RESERVED_WORD', Opal.regexp([$$($nesting, 'REGEXP_START'), "(?:do|if|in|for|let|new|try|var|case|else|enum|eval|false|null|this|true|void|with|break|catch|class|const|super|throw|while|yield|delete|export|import|public|return|static|switch|typeof|default|extends|finally|package|private|continue|debugger|function|arguments|interface|protected|implements|instanceof)", $$($nesting, 'REGEXP_END')]).$freeze());
        Opal.const_set($nesting[0], 'ES3_RESERVED_WORD_EXCLUSIVE', Opal.regexp([$$($nesting, 'REGEXP_START'), "(?:int|byte|char|goto|long|final|float|short|double|native|throws|boolean|abstract|volatile|transient|synchronized)", $$($nesting, 'REGEXP_END')]).$freeze());
        Opal.const_set($nesting[0], 'PROTO_SPECIAL_PROPS', Opal.regexp([$$($nesting, 'REGEXP_START'), "(?:constructor|displayName|__proto__|__parent__|__noSuchMethod__|__count__)", $$($nesting, 'REGEXP_END')]).$freeze());
        Opal.const_set($nesting[0], 'PROTO_SPECIAL_METHODS', Opal.regexp([$$($nesting, 'REGEXP_START'), "(?:hasOwnProperty|valueOf)", $$($nesting, 'REGEXP_END')]).$freeze());
        Opal.const_set($nesting[0], 'IMMUTABLE_PROPS', Opal.regexp([$$($nesting, 'REGEXP_START'), "(?:NaN|Infinity|undefined)", $$($nesting, 'REGEXP_END')]).$freeze());
        Opal.const_set($nesting[0], 'BASIC_IDENTIFIER_RULES', Opal.regexp([$$($nesting, 'REGEXP_START'), "[$_a-z][$_a-z\\d]*", $$($nesting, 'REGEXP_END')], 'i').$freeze());
        Opal.const_set($nesting[0], 'RESERVED_FUNCTION_NAMES', Opal.regexp([$$($nesting, 'REGEXP_START'), "(?:Array)", $$($nesting, 'REGEXP_END')]).$freeze());
        Opal.defs(self, '$valid_name?', $JsReservedWords_valid_name$ques$1 = function(name) {
          var $a, $b, $c, self = this;

          return ($truthy($a = $$($nesting, 'BASIC_IDENTIFIER_RULES')['$=~'](name)) ? ($truthy($b = ($truthy($c = $$($nesting, 'ES51_RESERVED_WORD')['$=~'](name)) ? $c : $$($nesting, 'ES3_RESERVED_WORD_EXCLUSIVE')['$=~'](name))) ? $b : $$($nesting, 'IMMUTABLE_PROPS')['$=~'](name))['$!']() : $a)
        }, $JsReservedWords_valid_name$ques$1.$$arity = 1);
        Opal.defs(self, '$valid_ivar_name?', $JsReservedWords_valid_ivar_name$ques$2 = function(name) {
          var $a, self = this;

          return ($truthy($a = $$($nesting, 'PROTO_SPECIAL_PROPS')['$=~'](name)) ? $a : $$($nesting, 'PROTO_SPECIAL_METHODS')['$=~'](name))['$!']()
        }, $JsReservedWords_valid_ivar_name$ques$2.$$arity = 1);
        
        Opal.def(self, '$fix_var_name', $JsReservedWords_fix_var_name$3 = function $$fix_var_name(name) {
          var self = this;

          if ($truthy(self.$class()['$valid_name?'](name))) {
            return name
          } else {
            return (("" + (name)) + "$").$to_sym()
          }
        }, $JsReservedWords_fix_var_name$3.$$arity = 1);
        
        Opal.def(self, '$fix_ivar_name', $JsReservedWords_fix_ivar_name$4 = function $$fix_ivar_name(name) {
          var self = this;

          if ($truthy(self.$class()['$valid_ivar_name?'](name.$to_s()['$[]']($range(1, -1, false))))) {
            return name
          } else {
            return (("" + (name)) + "$").$to_sym()
          }
        }, $JsReservedWords_fix_ivar_name$4.$$arity = 1);
        
        Opal.def(self, '$on_lvar', $JsReservedWords_on_lvar$5 = function $$on_lvar(node) {
          var $a, $iter = $JsReservedWords_on_lvar$5.$$p, $yield = $iter || nil, self = this, name = nil, _ = nil;

          if ($iter) $JsReservedWords_on_lvar$5.$$p = null;
          
          $a = [].concat(Opal.to_a(node)), (name = ($a[0] == null ? nil : $a[0])), (_ = ($a[1] == null ? nil : $a[1])), $a;
          node = node.$updated(nil, [self.$fix_var_name(name)]);
          return $send2(self, Opal.find_super_dispatcher(self, 'on_lvar', $JsReservedWords_on_lvar$5, false, true), 'on_lvar', [node], null);
        }, $JsReservedWords_on_lvar$5.$$arity = 1);
        
        Opal.def(self, '$on_lvasgn', $JsReservedWords_on_lvasgn$6 = function $$on_lvasgn(node) {
          var $a, $iter = $JsReservedWords_on_lvasgn$6.$$p, $yield = $iter || nil, self = this, name = nil, value = nil;

          if ($iter) $JsReservedWords_on_lvasgn$6.$$p = null;
          
          $a = [].concat(Opal.to_a(node)), (name = ($a[0] == null ? nil : $a[0])), (value = ($a[1] == null ? nil : $a[1])), $a;
          node = (function() {if ($truthy(value)) {
            return node.$updated(nil, [self.$fix_var_name(name), value])
          } else {
            return node.$updated(nil, [self.$fix_var_name(name)])
          }; return nil; })();
          return $send2(self, Opal.find_super_dispatcher(self, 'on_lvasgn', $JsReservedWords_on_lvasgn$6, false, true), 'on_lvasgn', [node], null);
        }, $JsReservedWords_on_lvasgn$6.$$arity = 1);
        
        Opal.def(self, '$on_ivar', $JsReservedWords_on_ivar$7 = function $$on_ivar(node) {
          var $a, $iter = $JsReservedWords_on_ivar$7.$$p, $yield = $iter || nil, self = this, name = nil, _ = nil;

          if ($iter) $JsReservedWords_on_ivar$7.$$p = null;
          
          $a = [].concat(Opal.to_a(node)), (name = ($a[0] == null ? nil : $a[0])), (_ = ($a[1] == null ? nil : $a[1])), $a;
          node = node.$updated(nil, [self.$fix_ivar_name(name)]);
          return $send2(self, Opal.find_super_dispatcher(self, 'on_ivar', $JsReservedWords_on_ivar$7, false, true), 'on_ivar', [node], null);
        }, $JsReservedWords_on_ivar$7.$$arity = 1);
        
        Opal.def(self, '$on_ivasgn', $JsReservedWords_on_ivasgn$8 = function $$on_ivasgn(node) {
          var $a, $iter = $JsReservedWords_on_ivasgn$8.$$p, $yield = $iter || nil, self = this, name = nil, value = nil;

          if ($iter) $JsReservedWords_on_ivasgn$8.$$p = null;
          
          $a = [].concat(Opal.to_a(node)), (name = ($a[0] == null ? nil : $a[0])), (value = ($a[1] == null ? nil : $a[1])), $a;
          node = (function() {if ($truthy(value)) {
            return node.$updated(nil, [self.$fix_ivar_name(name), value])
          } else {
            return node.$updated(nil, [self.$fix_ivar_name(name)])
          }; return nil; })();
          return $send2(self, Opal.find_super_dispatcher(self, 'on_ivasgn', $JsReservedWords_on_ivasgn$8, false, true), 'on_ivasgn', [node], null);
        }, $JsReservedWords_on_ivasgn$8.$$arity = 1);
        
        Opal.def(self, '$on_restarg', $JsReservedWords_on_restarg$9 = function $$on_restarg(node) {
          var $a, self = this, name = nil, _ = nil;

          
          $a = [].concat(Opal.to_a(node)), (name = ($a[0] == null ? nil : $a[0])), (_ = ($a[1] == null ? nil : $a[1])), $a;
          if ($truthy(name)) {
            node = node.$updated(nil, [self.$fix_var_name(name)], $hash2(["meta"], {"meta": $hash2(["arg_name"], {"arg_name": name})}))};
          return node;
        }, $JsReservedWords_on_restarg$9.$$arity = 1);
        return (Opal.def(self, '$on_argument', $JsReservedWords_on_argument$10 = function $$on_argument(node) {
          var $a, $iter = $JsReservedWords_on_argument$10.$$p, $yield = $iter || nil, self = this, name = nil, value = nil, fixed_name = nil, new_children = nil;

          if ($iter) $JsReservedWords_on_argument$10.$$p = null;
          
          node = $send2(self, Opal.find_super_dispatcher(self, 'on_argument', $JsReservedWords_on_argument$10, false, true), 'on_argument', [node], null);
          $a = [].concat(Opal.to_a(node)), (name = ($a[0] == null ? nil : $a[0])), (value = ($a[1] == null ? nil : $a[1])), $a;
          fixed_name = self.$fix_var_name(name);
          new_children = (function() {if ($truthy(value)) {
            return [fixed_name, value]
          } else {
            return [fixed_name]
          }; return nil; })();
          return node.$updated(nil, new_children, $hash2(["meta"], {"meta": $hash2(["arg_name"], {"arg_name": name})}));
        }, $JsReservedWords_on_argument$10.$$arity = 1), nil) && 'on_argument';
      })($nesting[0], $$($nesting, 'Base'), $nesting)
    })($nesting[0], $nesting)
  })($nesting[0], $nesting);
};

/* Generated by Opal 1.0.0 */
Opal.modules["opal/rewriters/block_to_iter"] = function(Opal) {
  function $rb_plus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs + rhs : lhs['$+'](rhs);
  }
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.$$$, $$ = Opal.$$, $module = Opal.module, $klass = Opal.klass, $send2 = Opal.send2;

  Opal.add_stubs(['$require', '$s', '$updated', '$+', '$children']);
  
  self.$require("opal/rewriters/base");
  return (function($base, $parent_nesting) {
    var self = $module($base, 'Opal');

    var $nesting = [self].concat($parent_nesting);

    (function($base, $parent_nesting) {
      var self = $module($base, 'Rewriters');

      var $nesting = [self].concat($parent_nesting);

      (function($base, $super, $parent_nesting) {
        var self = $klass($base, $super, 'BlockToIter');

        var $nesting = [self].concat($parent_nesting), $BlockToIter_on_block$1;

        return (Opal.def(self, '$on_block', $BlockToIter_on_block$1 = function $$on_block(node) {
          var $a, $iter = $BlockToIter_on_block$1.$$p, $yield = $iter || nil, self = this, recvr = nil, args = nil, body = nil, iter_node = nil, $zuper = nil, $zuper_i = nil, $zuper_ii = nil;

          if ($iter) $BlockToIter_on_block$1.$$p = null;
          // Prepare super implicit arguments
          for($zuper_i = 0, $zuper_ii = arguments.length, $zuper = new Array($zuper_ii); $zuper_i < $zuper_ii; $zuper_i++) {
            $zuper[$zuper_i] = arguments[$zuper_i];
          }
          
          $a = [].concat(Opal.to_a($send2(self, Opal.find_super_dispatcher(self, 'on_block', $BlockToIter_on_block$1, false, true), 'on_block', $zuper, $iter))), (recvr = ($a[0] == null ? nil : $a[0])), (args = ($a[1] == null ? nil : $a[1])), (body = ($a[2] == null ? nil : $a[2])), $a;
          iter_node = self.$s("iter", args, body);
          return recvr.$updated(nil, $rb_plus(recvr.$children(), [iter_node]));
        }, $BlockToIter_on_block$1.$$arity = 1), nil) && 'on_block'
      })($nesting[0], $$($nesting, 'Base'), $nesting)
    })($nesting[0], $nesting)
  })($nesting[0], $nesting);
};

/* Generated by Opal 1.0.0 */
Opal.modules["opal/rewriters/dot_js_syntax"] = function(Opal) {
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.$$$, $$ = Opal.$$, $module = Opal.module, $klass = Opal.klass, $slice = Opal.slice, $truthy = Opal.truthy, $send2 = Opal.send2, $send = Opal.send;

  Opal.add_stubs(['$require', '$==', '$type', '$===', '$!=', '$size', '$error', '$first', '$to_js_attr_call', '$to_js_attr_assign_call', '$to_native_js_call', '$s']);
  
  self.$require("opal/rewriters/base");
  return (function($base, $parent_nesting) {
    var self = $module($base, 'Opal');

    var $nesting = [self].concat($parent_nesting);

    (function($base, $parent_nesting) {
      var self = $module($base, 'Rewriters');

      var $nesting = [self].concat($parent_nesting);

      (function($base, $super, $parent_nesting) {
        var self = $klass($base, $super, 'DotJsSyntax');

        var $nesting = [self].concat($parent_nesting), $DotJsSyntax_on_send$1, $DotJsSyntax_to_native_js_call$2, $DotJsSyntax_to_js_attr_call$3, $DotJsSyntax_to_js_attr_assign_call$4;

        
        
        Opal.def(self, '$on_send', $DotJsSyntax_on_send$1 = function $$on_send(node) {
          var $a, $iter = $DotJsSyntax_on_send$1.$$p, $yield = $iter || nil, self = this, recv = nil, meth = nil, args = nil, recv_of_recv = nil, meth_of_recv = nil, _ = nil, $case = nil, property = nil, value = nil, $zuper = nil, $zuper_i = nil, $zuper_ii = nil;

          if ($iter) $DotJsSyntax_on_send$1.$$p = null;
          // Prepare super implicit arguments
          for($zuper_i = 0, $zuper_ii = arguments.length, $zuper = new Array($zuper_ii); $zuper_i < $zuper_ii; $zuper_i++) {
            $zuper[$zuper_i] = arguments[$zuper_i];
          }
          
          $a = [].concat(Opal.to_a(node)), (recv = ($a[0] == null ? nil : $a[0])), (meth = ($a[1] == null ? nil : $a[1])), (args = $slice.call($a, 2)), $a;
          if ($truthy(($truthy($a = recv) ? recv.$type()['$==']("send") : $a))) {
            
            $a = [].concat(Opal.to_a(recv)), (recv_of_recv = ($a[0] == null ? nil : $a[0])), (meth_of_recv = ($a[1] == null ? nil : $a[1])), (_ = ($a[2] == null ? nil : $a[2])), $a;
            if (meth_of_recv['$==']("JS")) {
              
              $case = meth;
              if ("[]"['$===']($case)) {
              if ($truthy(args.$size()['$!='](1))) {
                self.$error(".JS[:property] syntax supports only one argument")};
              property = args.$first();
              node = self.$to_js_attr_call(recv_of_recv, property);}
              else if ("[]="['$===']($case)) {
              if ($truthy(args.$size()['$!='](2))) {
                self.$error(".JS[:property]= syntax supports only two arguments")};
              $a = [].concat(Opal.to_a(args)), (property = ($a[0] == null ? nil : $a[0])), (value = ($a[1] == null ? nil : $a[1])), $a;
              node = self.$to_js_attr_assign_call(recv_of_recv, property, value);}
              else {node = self.$to_native_js_call(recv_of_recv, meth, args)};
              return $send2(self, Opal.find_super_dispatcher(self, 'on_send', $DotJsSyntax_on_send$1, false, true), 'on_send', [node], null);
            } else {
              return $send2(self, Opal.find_super_dispatcher(self, 'on_send', $DotJsSyntax_on_send$1, false, true), 'on_send', $zuper, $iter)
            };
          } else {
            return $send2(self, Opal.find_super_dispatcher(self, 'on_send', $DotJsSyntax_on_send$1, false, true), 'on_send', $zuper, $iter)
          };
        }, $DotJsSyntax_on_send$1.$$arity = 1);
        
        Opal.def(self, '$to_native_js_call', $DotJsSyntax_to_native_js_call$2 = function $$to_native_js_call(recv, meth, args) {
          var self = this;

          return $send(self, 's', ["jscall", recv, meth].concat(Opal.to_a(args)))
        }, $DotJsSyntax_to_native_js_call$2.$$arity = 3);
        
        Opal.def(self, '$to_js_attr_call', $DotJsSyntax_to_js_attr_call$3 = function $$to_js_attr_call(recv, property) {
          var self = this;

          return self.$s("jsattr", recv, property)
        }, $DotJsSyntax_to_js_attr_call$3.$$arity = 2);
        return (Opal.def(self, '$to_js_attr_assign_call', $DotJsSyntax_to_js_attr_assign_call$4 = function $$to_js_attr_assign_call(recv, property, value) {
          var self = this;

          return self.$s("jsattrasgn", recv, property, value)
        }, $DotJsSyntax_to_js_attr_assign_call$4.$$arity = 3), nil) && 'to_js_attr_assign_call';
      })($nesting[0], $$($nesting, 'Base'), $nesting)
    })($nesting[0], $nesting)
  })($nesting[0], $nesting);
};

/* Generated by Opal 1.0.0 */
Opal.modules["opal/rewriters/logical_operator_assignment"] = function(Opal) {
  function $rb_plus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs + rhs : lhs['$+'](rhs);
  }
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.$$$, $$ = Opal.$$, $module = Opal.module, $klass = Opal.klass, $truthy = Opal.truthy, $lambda = Opal.lambda, $slice = Opal.slice, $hash2 = Opal.hash2, $send = Opal.send, $send2 = Opal.send2;

  Opal.add_stubs(['$require', '$+', '$updated', '$s', '$==', '$[]', '$type', '$new_temp', '$freeze', '$call', '$fetch', '$error', '$process', '$include?']);
  
  self.$require("opal/rewriters/base");
  return (function($base, $parent_nesting) {
    var self = $module($base, 'Opal');

    var $nesting = [self].concat($parent_nesting);

    (function($base, $parent_nesting) {
      var self = $module($base, 'Rewriters');

      var $nesting = [self].concat($parent_nesting);

      (function($base, $super, $parent_nesting) {
        var self = $klass($base, $super, 'LogicalOperatorAssignment');

        var $nesting = [self].concat($parent_nesting), $LogicalOperatorAssignment_reset_tmp_counter$excl$1, $LogicalOperatorAssignment_new_temp$2, $LogicalOperatorAssignment$3, $LogicalOperatorAssignment_on_or_asgn$7, $LogicalOperatorAssignment_on_and_asgn$9, $LogicalOperatorAssignment_on_defined$ques$11;

        
        Opal.defs(self, '$reset_tmp_counter!', $LogicalOperatorAssignment_reset_tmp_counter$excl$1 = function() {
          var self = this;

          return (Opal.class_variable_set($nesting[0], '@@counter', 0))
        }, $LogicalOperatorAssignment_reset_tmp_counter$excl$1.$$arity = 0);
        Opal.defs(self, '$new_temp', $LogicalOperatorAssignment_new_temp$2 = function $$new_temp() {
          var $a, $b, self = this;

          
          (Opal.class_variable_set($nesting[0], '@@counter', ($truthy($a = (($b = $nesting[0].$$cvars['@@counter']) == null ? nil : $b)) ? $a : 0)));
          (Opal.class_variable_set($nesting[0], '@@counter', $rb_plus((($a = $nesting[0].$$cvars['@@counter']) == null ? nil : $a), 1)));
          return "" + "$logical_op_recvr_tmp_" + ((($a = $nesting[0].$$cvars['@@counter']) == null ? nil : $a));
        }, $LogicalOperatorAssignment_new_temp$2.$$arity = 0);
        Opal.const_set($nesting[0], 'GET_SET', $lambda(($LogicalOperatorAssignment$3 = function(get_type, set_type){var self = $LogicalOperatorAssignment$3.$$s == null ? this : $LogicalOperatorAssignment$3.$$s, $$4;

        
          
          if (get_type == null) {
            get_type = nil;
          };
          
          if (set_type == null) {
            set_type = nil;
          };
          return $lambda(($$4 = function(lhs, rhs, root_type){var self = $$4.$$s == null ? this : $$4.$$s, $a, get_node = nil, condition_node = nil, defined_node = nil;

          
            
            if (lhs == null) {
              lhs = nil;
            };
            
            if (rhs == null) {
              rhs = nil;
            };
            
            if (root_type == null) {
              root_type = nil;
            };
            get_node = lhs.$updated(get_type);
            condition_node = self.$s(root_type, get_node, rhs);
            if ($truthy((($a = get_type['$==']("const")) ? root_type['$==']("or") : get_type['$==']("const")))) {
              
              defined_node = self.$s("defined?", get_node);
              condition_node = self.$s("if", defined_node, self.$s("begin", condition_node), rhs);};
            return lhs.$updated(set_type, [].concat(Opal.to_a(lhs)).concat([condition_node]));}, $$4.$$s = self, $$4.$$arity = 3, $$4));}, $LogicalOperatorAssignment$3.$$s = self, $LogicalOperatorAssignment$3.$$arity = 2, $LogicalOperatorAssignment$3)));
        Opal.const_set($nesting[0], 'LocalVariableHandler', $$($nesting, 'GET_SET')['$[]']("lvar", "lvasgn"));
        Opal.const_set($nesting[0], 'InstanceVariableHandler', $$($nesting, 'GET_SET')['$[]']("ivar", "ivasgn"));
        Opal.const_set($nesting[0], 'ConstantHandler', $$($nesting, 'GET_SET')['$[]']("const", "casgn"));
        Opal.const_set($nesting[0], 'GlobalVariableHandler', $$($nesting, 'GET_SET')['$[]']("gvar", "gvasgn"));
        Opal.const_set($nesting[0], 'ClassVariableHandler', $$($nesting, 'GET_SET')['$[]']("cvar", "cvasgn"));
        (function($base, $super, $parent_nesting) {
          var self = $klass($base, $super, 'SendHandler');

          var $nesting = [self].concat($parent_nesting), $SendHandler_call$5;

          return (Opal.defs(self, '$call', $SendHandler_call$5 = function $$call(lhs, rhs, root_type) {
            var $a, self = this, recvr = nil, reader_method = nil, args = nil, recvr_tmp = nil, cache_recvr = nil, writer_method = nil, call_reader = nil, call_writer = nil, get_or_set = nil;

            
            $a = [].concat(Opal.to_a(lhs)), (recvr = ($a[0] == null ? nil : $a[0])), (reader_method = ($a[1] == null ? nil : $a[1])), (args = $slice.call($a, 2)), $a;
            if ($truthy(($truthy($a = recvr) ? recvr.$type()['$==']("send") : $a))) {
              
              recvr_tmp = self.$new_temp();
              cache_recvr = self.$s("lvasgn", recvr_tmp, recvr);
              recvr = self.$s("js_tmp", recvr_tmp);};
            writer_method = "" + (reader_method) + "=";
            call_reader = lhs.$updated("send", [recvr, reader_method].concat(Opal.to_a(args)));
            call_writer = lhs.$updated("send", [recvr, writer_method].concat(Opal.to_a(args)).concat([rhs]));
            get_or_set = self.$s(root_type, call_reader, call_writer);
            if ($truthy(cache_recvr)) {
              return self.$s("begin", cache_recvr, get_or_set)
            } else {
              return get_or_set
            };
          }, $SendHandler_call$5.$$arity = 3), nil) && 'call'
        })($nesting[0], self, $nesting);
        (function($base, $super, $parent_nesting) {
          var self = $klass($base, $super, 'ConditionalSendHandler');

          var $nesting = [self].concat($parent_nesting), $ConditionalSendHandler_call$6;

          return (Opal.defs(self, '$call', $ConditionalSendHandler_call$6 = function $$call(lhs, rhs, root_type) {
            var $a, self = this, recvr = nil, meth = nil, args = nil, recvr_tmp = nil, cache_recvr = nil, recvr_is_nil = nil, plain_send = nil, plain_or_asgn = nil;

            
            root_type = "" + (root_type) + "_asgn";
            $a = [].concat(Opal.to_a(lhs)), (recvr = ($a[0] == null ? nil : $a[0])), (meth = ($a[1] == null ? nil : $a[1])), (args = $slice.call($a, 2)), $a;
            recvr_tmp = self.$new_temp();
            cache_recvr = self.$s("lvasgn", recvr_tmp, recvr);
            recvr = self.$s("js_tmp", recvr_tmp);
            recvr_is_nil = self.$s("send", recvr, "nil?");
            plain_send = lhs.$updated("send", [recvr, meth].concat(Opal.to_a(args)));
            plain_or_asgn = self.$s(root_type, plain_send, rhs);
            return self.$s("begin", cache_recvr, self.$s("if", recvr_is_nil, self.$s("nil"), plain_or_asgn));
          }, $ConditionalSendHandler_call$6.$$arity = 3), nil) && 'call'
        })($nesting[0], self, $nesting);
        Opal.const_set($nesting[0], 'HANDLERS', $hash2(["lvasgn", "ivasgn", "casgn", "gvasgn", "cvasgn", "send", "csend"], {"lvasgn": $$($nesting, 'LocalVariableHandler'), "ivasgn": $$($nesting, 'InstanceVariableHandler'), "casgn": $$($nesting, 'ConstantHandler'), "gvasgn": $$($nesting, 'GlobalVariableHandler'), "cvasgn": $$($nesting, 'ClassVariableHandler'), "send": $$($nesting, 'SendHandler'), "csend": $$($nesting, 'ConditionalSendHandler')}).$freeze());
        
        Opal.def(self, '$on_or_asgn', $LogicalOperatorAssignment_on_or_asgn$7 = function $$on_or_asgn(node) {
          var $a, $$8, self = this, lhs = nil, rhs = nil, result = nil;

          
          $a = [].concat(Opal.to_a(node)), (lhs = ($a[0] == null ? nil : $a[0])), (rhs = ($a[1] == null ? nil : $a[1])), $a;
          result = $send($$($nesting, 'HANDLERS'), 'fetch', [lhs.$type()], ($$8 = function(){var self = $$8.$$s == null ? this : $$8.$$s;

          return self.$error("" + "cannot handle LHS type: " + (lhs.$type()))}, $$8.$$s = self, $$8.$$arity = 0, $$8)).$call(lhs, rhs, "or");
          return self.$process(result);
        }, $LogicalOperatorAssignment_on_or_asgn$7.$$arity = 1);
        
        Opal.def(self, '$on_and_asgn', $LogicalOperatorAssignment_on_and_asgn$9 = function $$on_and_asgn(node) {
          var $a, $$10, self = this, lhs = nil, rhs = nil, result = nil;

          
          $a = [].concat(Opal.to_a(node)), (lhs = ($a[0] == null ? nil : $a[0])), (rhs = ($a[1] == null ? nil : $a[1])), $a;
          result = $send($$($nesting, 'HANDLERS'), 'fetch', [lhs.$type()], ($$10 = function(){var self = $$10.$$s == null ? this : $$10.$$s;

          return self.$error("" + "cannot handle LHS type: " + (lhs.$type()))}, $$10.$$s = self, $$10.$$arity = 0, $$10)).$call(lhs, rhs, "and");
          return self.$process(result);
        }, $LogicalOperatorAssignment_on_and_asgn$9.$$arity = 1);
        Opal.const_set($nesting[0], 'ASSIGNMENT_STRING_NODE', self.$s("str", "assignment"));
        return (Opal.def(self, '$on_defined?', $LogicalOperatorAssignment_on_defined$ques$11 = function(node) {
          var $a, $iter = $LogicalOperatorAssignment_on_defined$ques$11.$$p, $yield = $iter || nil, self = this, inner = nil, _ = nil;

          if ($iter) $LogicalOperatorAssignment_on_defined$ques$11.$$p = null;
          
          $a = [].concat(Opal.to_a(node)), (inner = ($a[0] == null ? nil : $a[0])), (_ = ($a[1] == null ? nil : $a[1])), $a;
          if ($truthy(["or_asgn", "and_asgn"]['$include?'](inner.$type()))) {
            return $$($nesting, 'ASSIGNMENT_STRING_NODE')
          } else {
            return $send2(self, Opal.find_super_dispatcher(self, 'on_defined?', $LogicalOperatorAssignment_on_defined$ques$11, false, true), 'on_defined?', [node], null)
          };
        }, $LogicalOperatorAssignment_on_defined$ques$11.$$arity = 1), nil) && 'on_defined?';
      })($nesting[0], $$($nesting, 'Base'), $nesting)
    })($nesting[0], $nesting)
  })($nesting[0], $nesting);
};

/* Generated by Opal 1.0.0 */
Opal.modules["opal/rewriters/binary_operator_assignment"] = function(Opal) {
  function $rb_plus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs + rhs : lhs['$+'](rhs);
  }
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.$$$, $$ = Opal.$$, $module = Opal.module, $klass = Opal.klass, $truthy = Opal.truthy, $lambda = Opal.lambda, $slice = Opal.slice, $hash2 = Opal.hash2, $send = Opal.send, $send2 = Opal.send2;

  Opal.add_stubs(['$require', '$+', '$updated', '$s', '$[]', '$==', '$type', '$new_temp', '$freeze', '$call', '$fetch', '$error', '$process']);
  
  self.$require("opal/rewriters/base");
  return (function($base, $parent_nesting) {
    var self = $module($base, 'Opal');

    var $nesting = [self].concat($parent_nesting);

    (function($base, $parent_nesting) {
      var self = $module($base, 'Rewriters');

      var $nesting = [self].concat($parent_nesting);

      (function($base, $super, $parent_nesting) {
        var self = $klass($base, $super, 'BinaryOperatorAssignment');

        var $nesting = [self].concat($parent_nesting), $BinaryOperatorAssignment_reset_tmp_counter$excl$1, $BinaryOperatorAssignment_new_temp$2, $BinaryOperatorAssignment$3, $BinaryOperatorAssignment_on_op_asgn$7, $BinaryOperatorAssignment_on_defined$ques$9;

        
        Opal.defs(self, '$reset_tmp_counter!', $BinaryOperatorAssignment_reset_tmp_counter$excl$1 = function() {
          var self = this;

          return (Opal.class_variable_set($nesting[0], '@@counter', 0))
        }, $BinaryOperatorAssignment_reset_tmp_counter$excl$1.$$arity = 0);
        Opal.defs(self, '$new_temp', $BinaryOperatorAssignment_new_temp$2 = function $$new_temp() {
          var $a, $b, self = this;

          
          (Opal.class_variable_set($nesting[0], '@@counter', ($truthy($a = (($b = $nesting[0].$$cvars['@@counter']) == null ? nil : $b)) ? $a : 0)));
          (Opal.class_variable_set($nesting[0], '@@counter', $rb_plus((($a = $nesting[0].$$cvars['@@counter']) == null ? nil : $a), 1)));
          return "" + "$binary_op_recvr_tmp_" + ((($a = $nesting[0].$$cvars['@@counter']) == null ? nil : $a));
        }, $BinaryOperatorAssignment_new_temp$2.$$arity = 0);
        Opal.const_set($nesting[0], 'GET_SET', $lambda(($BinaryOperatorAssignment$3 = function(get_type, set_type){var self = $BinaryOperatorAssignment$3.$$s == null ? this : $BinaryOperatorAssignment$3.$$s, $$4;

        
          
          if (get_type == null) {
            get_type = nil;
          };
          
          if (set_type == null) {
            set_type = nil;
          };
          return $lambda(($$4 = function(lhs, operation, rhs){var self = $$4.$$s == null ? this : $$4.$$s, get_node = nil, set_node = nil;

          
            
            if (lhs == null) {
              lhs = nil;
            };
            
            if (operation == null) {
              operation = nil;
            };
            
            if (rhs == null) {
              rhs = nil;
            };
            get_node = lhs.$updated(get_type);
            set_node = self.$s("send", get_node, operation, rhs);
            return lhs.$updated(set_type, [].concat(Opal.to_a(lhs)).concat([set_node]));}, $$4.$$s = self, $$4.$$arity = 3, $$4));}, $BinaryOperatorAssignment$3.$$s = self, $BinaryOperatorAssignment$3.$$arity = 2, $BinaryOperatorAssignment$3)));
        Opal.const_set($nesting[0], 'LocalVariableHandler', $$($nesting, 'GET_SET')['$[]']("lvar", "lvasgn"));
        Opal.const_set($nesting[0], 'InstanceVariableHandler', $$($nesting, 'GET_SET')['$[]']("ivar", "ivasgn"));
        Opal.const_set($nesting[0], 'ConstantHandler', $$($nesting, 'GET_SET')['$[]']("const", "casgn"));
        Opal.const_set($nesting[0], 'GlobalVariableHandler', $$($nesting, 'GET_SET')['$[]']("gvar", "gvasgn"));
        Opal.const_set($nesting[0], 'ClassVariableHandler', $$($nesting, 'GET_SET')['$[]']("cvar", "cvasgn"));
        (function($base, $super, $parent_nesting) {
          var self = $klass($base, $super, 'SendHandler');

          var $nesting = [self].concat($parent_nesting), $SendHandler_call$5;

          return (Opal.defs(self, '$call', $SendHandler_call$5 = function $$call(lhs, operation, rhs) {
            var $a, self = this, recvr = nil, reader_method = nil, args = nil, recvr_tmp = nil, cache_recvr = nil, writer_method = nil, call_reader = nil, call_op = nil, call_writer = nil;

            
            $a = [].concat(Opal.to_a(lhs)), (recvr = ($a[0] == null ? nil : $a[0])), (reader_method = ($a[1] == null ? nil : $a[1])), (args = $slice.call($a, 2)), $a;
            if ($truthy(($truthy($a = recvr) ? recvr.$type()['$==']("send") : $a))) {
              
              recvr_tmp = self.$new_temp();
              cache_recvr = self.$s("lvasgn", recvr_tmp, recvr);
              recvr = self.$s("js_tmp", recvr_tmp);};
            writer_method = "" + (reader_method) + "=";
            call_reader = lhs.$updated("send", [recvr, reader_method].concat(Opal.to_a(args)));
            call_op = self.$s("send", call_reader, operation, rhs);
            call_writer = lhs.$updated("send", [recvr, writer_method].concat(Opal.to_a(args)).concat([call_op]));
            if ($truthy(cache_recvr)) {
              return self.$s("begin", cache_recvr, call_writer)
            } else {
              return call_writer
            };
          }, $SendHandler_call$5.$$arity = 3), nil) && 'call'
        })($nesting[0], self, $nesting);
        (function($base, $super, $parent_nesting) {
          var self = $klass($base, $super, 'ConditionalSendHandler');

          var $nesting = [self].concat($parent_nesting), $ConditionalSendHandler_call$6;

          return (Opal.defs(self, '$call', $ConditionalSendHandler_call$6 = function $$call(lhs, operation, rhs) {
            var $a, self = this, recvr = nil, meth = nil, args = nil, recvr_tmp = nil, cache_recvr = nil, recvr_is_nil = nil, plain_send = nil, plain_op_asgn = nil;

            
            $a = [].concat(Opal.to_a(lhs)), (recvr = ($a[0] == null ? nil : $a[0])), (meth = ($a[1] == null ? nil : $a[1])), (args = $slice.call($a, 2)), $a;
            recvr_tmp = self.$new_temp();
            cache_recvr = self.$s("lvasgn", recvr_tmp, recvr);
            recvr = self.$s("js_tmp", recvr_tmp);
            recvr_is_nil = self.$s("send", recvr, "nil?");
            plain_send = lhs.$updated("send", [recvr, meth].concat(Opal.to_a(args)));
            plain_op_asgn = self.$s("op_asgn", plain_send, operation, rhs);
            return self.$s("begin", cache_recvr, self.$s("if", recvr_is_nil, self.$s("nil"), plain_op_asgn));
          }, $ConditionalSendHandler_call$6.$$arity = 3), nil) && 'call'
        })($nesting[0], self, $nesting);
        Opal.const_set($nesting[0], 'HANDLERS', $hash2(["lvasgn", "ivasgn", "casgn", "gvasgn", "cvasgn", "send", "csend"], {"lvasgn": $$($nesting, 'LocalVariableHandler'), "ivasgn": $$($nesting, 'InstanceVariableHandler'), "casgn": $$($nesting, 'ConstantHandler'), "gvasgn": $$($nesting, 'GlobalVariableHandler'), "cvasgn": $$($nesting, 'ClassVariableHandler'), "send": $$($nesting, 'SendHandler'), "csend": $$($nesting, 'ConditionalSendHandler')}).$freeze());
        
        Opal.def(self, '$on_op_asgn', $BinaryOperatorAssignment_on_op_asgn$7 = function $$on_op_asgn(node) {
          var $a, $$8, self = this, lhs = nil, op = nil, rhs = nil, result = nil;

          
          $a = [].concat(Opal.to_a(node)), (lhs = ($a[0] == null ? nil : $a[0])), (op = ($a[1] == null ? nil : $a[1])), (rhs = ($a[2] == null ? nil : $a[2])), $a;
          result = $send($$($nesting, 'HANDLERS'), 'fetch', [lhs.$type()], ($$8 = function(){var self = $$8.$$s == null ? this : $$8.$$s;

          return self.$error("" + "cannot handle LHS type: " + (lhs.$type()))}, $$8.$$s = self, $$8.$$arity = 0, $$8)).$call(lhs, op, rhs);
          return self.$process(result);
        }, $BinaryOperatorAssignment_on_op_asgn$7.$$arity = 1);
        Opal.const_set($nesting[0], 'ASSIGNMENT_STRING_NODE', self.$s("str", "assignment"));
        return (Opal.def(self, '$on_defined?', $BinaryOperatorAssignment_on_defined$ques$9 = function(node) {
          var $a, $iter = $BinaryOperatorAssignment_on_defined$ques$9.$$p, $yield = $iter || nil, self = this, inner = nil, _ = nil;

          if ($iter) $BinaryOperatorAssignment_on_defined$ques$9.$$p = null;
          
          $a = [].concat(Opal.to_a(node)), (inner = ($a[0] == null ? nil : $a[0])), (_ = ($a[1] == null ? nil : $a[1])), $a;
          if (inner.$type()['$==']("op_asgn")) {
            return $$($nesting, 'ASSIGNMENT_STRING_NODE')
          } else {
            return $send2(self, Opal.find_super_dispatcher(self, 'on_defined?', $BinaryOperatorAssignment_on_defined$ques$9, false, true), 'on_defined?', [node], null)
          };
        }, $BinaryOperatorAssignment_on_defined$ques$9.$$arity = 1), nil) && 'on_defined?';
      })($nesting[0], $$($nesting, 'Base'), $nesting)
    })($nesting[0], $nesting)
  })($nesting[0], $nesting);
};

/* Generated by Opal 1.0.0 */
Opal.modules["opal/rewriters/hashes/key_duplicates_rewriter"] = function(Opal) {
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.$$$, $$ = Opal.$$, $module = Opal.module, $klass = Opal.klass, $send2 = Opal.send2, $truthy = Opal.truthy;

  Opal.add_stubs(['$require', '$new', '$include?', '$type', '$<<', '$==', '$process_regular_node', '$updated', '$inspect', '$warn']);
  
  self.$require("opal/rewriters/base");
  self.$require("set");
  return (function($base, $parent_nesting) {
    var self = $module($base, 'Opal');

    var $nesting = [self].concat($parent_nesting);

    (function($base, $parent_nesting) {
      var self = $module($base, 'Rewriters');

      var $nesting = [self].concat($parent_nesting);

      (function($base, $parent_nesting) {
        var self = $module($base, 'Hashes');

        var $nesting = [self].concat($parent_nesting);

        (function($base, $super, $parent_nesting) {
          var self = $klass($base, $super, 'KeyDuplicatesRewriter');

          var $nesting = [self].concat($parent_nesting), $KeyDuplicatesRewriter_initialize$1, $KeyDuplicatesRewriter_on_hash$2, $KeyDuplicatesRewriter_on_pair$3, $KeyDuplicatesRewriter_on_kwsplat$4;

          self.$$prototype.keys = nil;
          
          
          Opal.def(self, '$initialize', $KeyDuplicatesRewriter_initialize$1 = function $$initialize() {
            var self = this;

            return (self.keys = $$($nesting, 'UniqKeysSet').$new())
          }, $KeyDuplicatesRewriter_initialize$1.$$arity = 0);
          
          Opal.def(self, '$on_hash', $KeyDuplicatesRewriter_on_hash$2 = function $$on_hash(node) {
            var $a, $iter = $KeyDuplicatesRewriter_on_hash$2.$$p, $yield = $iter || nil, self = this, previous_keys = nil;

            if ($iter) $KeyDuplicatesRewriter_on_hash$2.$$p = null;
            return (function() { try {
            
            $a = [self.keys, $$($nesting, 'UniqKeysSet').$new()], (previous_keys = $a[0]), (self.keys = $a[1]), $a;
            return $send2(self, Opal.find_super_dispatcher(self, 'on_hash', $KeyDuplicatesRewriter_on_hash$2, false, true), 'on_hash', [node], null);
            } finally {
              (self.keys = previous_keys)
            }; })()
          }, $KeyDuplicatesRewriter_on_hash$2.$$arity = 1);
          
          Opal.def(self, '$on_pair', $KeyDuplicatesRewriter_on_pair$3 = function $$on_pair(node) {
            var $a, $iter = $KeyDuplicatesRewriter_on_pair$3.$$p, $yield = $iter || nil, self = this, key = nil, _value = nil;

            if ($iter) $KeyDuplicatesRewriter_on_pair$3.$$p = null;
            
            $a = [].concat(Opal.to_a(node)), (key = ($a[0] == null ? nil : $a[0])), (_value = ($a[1] == null ? nil : $a[1])), $a;
            if ($truthy(["str", "sym"]['$include?'](key.$type()))) {
              self.keys['$<<'](key)};
            return $send2(self, Opal.find_super_dispatcher(self, 'on_pair', $KeyDuplicatesRewriter_on_pair$3, false, true), 'on_pair', [node], null);
          }, $KeyDuplicatesRewriter_on_pair$3.$$arity = 1);
          
          Opal.def(self, '$on_kwsplat', $KeyDuplicatesRewriter_on_kwsplat$4 = function $$on_kwsplat(node) {
            var $a, self = this, hash = nil, _ = nil;

            
            $a = [].concat(Opal.to_a(node)), (hash = ($a[0] == null ? nil : $a[0])), (_ = ($a[1] == null ? nil : $a[1])), $a;
            if (hash.$type()['$==']("hash")) {
              hash = self.$process_regular_node(hash)};
            return node.$updated(nil, [hash]);
          }, $KeyDuplicatesRewriter_on_kwsplat$4.$$arity = 1);
          return (function($base, $super, $parent_nesting) {
            var self = $klass($base, $super, 'UniqKeysSet');

            var $nesting = [self].concat($parent_nesting), $UniqKeysSet_initialize$5, $UniqKeysSet_$lt$lt$6;

            self.$$prototype.set = nil;
            
            
            Opal.def(self, '$initialize', $UniqKeysSet_initialize$5 = function $$initialize() {
              var self = this;

              return (self.set = $$($nesting, 'Set').$new())
            }, $UniqKeysSet_initialize$5.$$arity = 0);
            return (Opal.def(self, '$<<', $UniqKeysSet_$lt$lt$6 = function(element) {
              var $a, self = this, key = nil, _ = nil;

              if ($truthy(self.set['$include?'](element))) {
                
                $a = [].concat(Opal.to_a(element)), (key = ($a[0] == null ? nil : $a[0])), (_ = ($a[1] == null ? nil : $a[1])), $a;
                key = (function() {if (element.$type()['$==']("str")) {
                  return key.$inspect()
                } else {
                  return "" + ":" + (key)
                }; return nil; })();
                return $$($nesting, 'Kernel').$warn("" + "warning: key " + (key) + " is duplicated and overwritten");
              } else {
                return self.set['$<<'](element)
              }
            }, $UniqKeysSet_$lt$lt$6.$$arity = 1), nil) && '<<';
          })($nesting[0], null, $nesting);
        })($nesting[0], $$$($$$($$$('::', 'Opal'), 'Rewriters'), 'Base'), $nesting)
      })($nesting[0], $nesting)
    })($nesting[0], $nesting)
  })($nesting[0], $nesting);
};

/* Generated by Opal 1.0.0 */
Opal.modules["opal/rewriters/dump_args"] = function(Opal) {
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.$$$, $$ = Opal.$$, $module = Opal.module, $klass = Opal.klass, $send2 = Opal.send2, $hash2 = Opal.hash2;

  Opal.add_stubs(['$require', '$updated']);
  
  self.$require("opal/rewriters/base");
  return (function($base, $parent_nesting) {
    var self = $module($base, 'Opal');

    var $nesting = [self].concat($parent_nesting);

    (function($base, $parent_nesting) {
      var self = $module($base, 'Rewriters');

      var $nesting = [self].concat($parent_nesting);

      (function($base, $super, $parent_nesting) {
        var self = $klass($base, $super, 'DumpArgs');

        var $nesting = [self].concat($parent_nesting), $DumpArgs_on_def$1, $DumpArgs_on_defs$2, $DumpArgs_on_iter$3;

        
        
        Opal.def(self, '$on_def', $DumpArgs_on_def$1 = function $$on_def(node) {
          var $a, $iter = $DumpArgs_on_def$1.$$p, $yield = $iter || nil, self = this, _mid = nil, args = nil, _body = nil;

          if ($iter) $DumpArgs_on_def$1.$$p = null;
          
          node = $send2(self, Opal.find_super_dispatcher(self, 'on_def', $DumpArgs_on_def$1, false, true), 'on_def', [node], null);
          $a = [].concat(Opal.to_a(node)), (_mid = ($a[0] == null ? nil : $a[0])), (args = ($a[1] == null ? nil : $a[1])), (_body = ($a[2] == null ? nil : $a[2])), $a;
          return node.$updated(nil, nil, $hash2(["meta"], {"meta": $hash2(["original_args"], {"original_args": args})}));
        }, $DumpArgs_on_def$1.$$arity = 1);
        
        Opal.def(self, '$on_defs', $DumpArgs_on_defs$2 = function $$on_defs(node) {
          var $a, $iter = $DumpArgs_on_defs$2.$$p, $yield = $iter || nil, self = this, _recv = nil, _mid = nil, args = nil, _body = nil;

          if ($iter) $DumpArgs_on_defs$2.$$p = null;
          
          node = $send2(self, Opal.find_super_dispatcher(self, 'on_defs', $DumpArgs_on_defs$2, false, true), 'on_defs', [node], null);
          $a = [].concat(Opal.to_a(node)), (_recv = ($a[0] == null ? nil : $a[0])), (_mid = ($a[1] == null ? nil : $a[1])), (args = ($a[2] == null ? nil : $a[2])), (_body = ($a[3] == null ? nil : $a[3])), $a;
          return node.$updated(nil, nil, $hash2(["meta"], {"meta": $hash2(["original_args"], {"original_args": args})}));
        }, $DumpArgs_on_defs$2.$$arity = 1);
        return (Opal.def(self, '$on_iter', $DumpArgs_on_iter$3 = function $$on_iter(node) {
          var $a, $iter = $DumpArgs_on_iter$3.$$p, $yield = $iter || nil, self = this, args = nil, _body = nil;

          if ($iter) $DumpArgs_on_iter$3.$$p = null;
          
          node = $send2(self, Opal.find_super_dispatcher(self, 'on_iter', $DumpArgs_on_iter$3, false, true), 'on_iter', [node], null);
          $a = [].concat(Opal.to_a(node)), (args = ($a[0] == null ? nil : $a[0])), (_body = ($a[1] == null ? nil : $a[1])), $a;
          return node.$updated(nil, nil, $hash2(["meta"], {"meta": $hash2(["original_args"], {"original_args": args})}));
        }, $DumpArgs_on_iter$3.$$arity = 1), nil) && 'on_iter';
      })($nesting[0], $$($nesting, 'Base'), $nesting)
    })($nesting[0], $nesting)
  })($nesting[0], $nesting);
};

/* Generated by Opal 1.0.0 */
Opal.modules["opal/rewriters/mlhs_args"] = function(Opal) {
  function $rb_plus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs + rhs : lhs['$+'](rhs);
  }
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.$$$, $$ = Opal.$$, $module = Opal.module, $klass = Opal.klass, $send2 = Opal.send2, $truthy = Opal.truthy, $send = Opal.send, $hash2 = Opal.hash2;

  Opal.add_stubs(['$require', '$new', '$updated', '$rewritten', '$initialization', '$s', '$prepend_to_body', '$attr_reader', '$split!', '$+', '$each', '$children', '$==', '$type', '$new_mlhs_tmp', '$process', '$<<', '$length', '$[]', '$empty?']);
  
  self.$require("opal/rewriters/base");
  return (function($base, $parent_nesting) {
    var self = $module($base, 'Opal');

    var $nesting = [self].concat($parent_nesting);

    (function($base, $parent_nesting) {
      var self = $module($base, 'Rewriters');

      var $nesting = [self].concat($parent_nesting);

      (function($base, $super, $parent_nesting) {
        var self = $klass($base, $super, 'MlhsArgs');

        var $nesting = [self].concat($parent_nesting), $MlhsArgs_on_def$1, $MlhsArgs_on_defs$2, $MlhsArgs_on_iter$3;

        
        
        Opal.def(self, '$on_def', $MlhsArgs_on_def$1 = function $$on_def(node) {
          var $a, $iter = $MlhsArgs_on_def$1.$$p, $yield = $iter || nil, self = this, mid = nil, args = nil, body = nil, arguments$ = nil;

          if ($iter) $MlhsArgs_on_def$1.$$p = null;
          
          node = $send2(self, Opal.find_super_dispatcher(self, 'on_def', $MlhsArgs_on_def$1, false, true), 'on_def', [node], null);
          $a = [].concat(Opal.to_a(node)), (mid = ($a[0] == null ? nil : $a[0])), (args = ($a[1] == null ? nil : $a[1])), (body = ($a[2] == null ? nil : $a[2])), $a;
          arguments$ = $$($nesting, 'Arguments').$new(args);
          args = args.$updated(nil, arguments$.$rewritten());
          if ($truthy(arguments$.$initialization())) {
            
            body = ($truthy($a = body) ? $a : self.$s("nil"));
            body = self.$prepend_to_body(body, arguments$.$initialization());};
          return node.$updated(nil, [mid, args, body]);
        }, $MlhsArgs_on_def$1.$$arity = 1);
        
        Opal.def(self, '$on_defs', $MlhsArgs_on_defs$2 = function $$on_defs(node) {
          var $a, $iter = $MlhsArgs_on_defs$2.$$p, $yield = $iter || nil, self = this, recv = nil, mid = nil, args = nil, body = nil, arguments$ = nil;

          if ($iter) $MlhsArgs_on_defs$2.$$p = null;
          
          node = $send2(self, Opal.find_super_dispatcher(self, 'on_defs', $MlhsArgs_on_defs$2, false, true), 'on_defs', [node], null);
          $a = [].concat(Opal.to_a(node)), (recv = ($a[0] == null ? nil : $a[0])), (mid = ($a[1] == null ? nil : $a[1])), (args = ($a[2] == null ? nil : $a[2])), (body = ($a[3] == null ? nil : $a[3])), $a;
          arguments$ = $$($nesting, 'Arguments').$new(args);
          args = args.$updated(nil, arguments$.$rewritten());
          if ($truthy(arguments$.$initialization())) {
            
            body = ($truthy($a = body) ? $a : self.$s("nil"));
            body = self.$prepend_to_body(body, arguments$.$initialization());};
          return node.$updated(nil, [recv, mid, args, body]);
        }, $MlhsArgs_on_defs$2.$$arity = 1);
        
        Opal.def(self, '$on_iter', $MlhsArgs_on_iter$3 = function $$on_iter(node) {
          var $a, $iter = $MlhsArgs_on_iter$3.$$p, $yield = $iter || nil, self = this, args = nil, body = nil, arguments$ = nil;

          if ($iter) $MlhsArgs_on_iter$3.$$p = null;
          
          node = $send2(self, Opal.find_super_dispatcher(self, 'on_iter', $MlhsArgs_on_iter$3, false, true), 'on_iter', [node], null);
          $a = [].concat(Opal.to_a(node)), (args = ($a[0] == null ? nil : $a[0])), (body = ($a[1] == null ? nil : $a[1])), $a;
          arguments$ = $$($nesting, 'Arguments').$new(args);
          args = args.$updated(nil, arguments$.$rewritten());
          if ($truthy(arguments$.$initialization())) {
            
            body = ($truthy($a = body) ? $a : self.$s("nil"));
            body = self.$prepend_to_body(body, arguments$.$initialization());};
          return node.$updated(nil, [args, body]);
        }, $MlhsArgs_on_iter$3.$$arity = 1);
        (function($base, $super, $parent_nesting) {
          var self = $klass($base, $super, 'Arguments');

          var $nesting = [self].concat($parent_nesting), $Arguments_initialize$4, $Arguments_reset_tmp_counter$excl$5, $Arguments_new_mlhs_tmp$6, $Arguments_split$excl$7;

          self.$$prototype.counter = self.$$prototype.args = self.$$prototype.initialization = nil;
          
          self.$attr_reader("rewritten", "initialization");
          
          Opal.def(self, '$initialize', $Arguments_initialize$4 = function $$initialize(args) {
            var self = this;

            
            self.args = args;
            self.rewritten = [];
            self.initialization = [];
            self.rewriter = $$($nesting, 'MlhsRewriter').$new();
            return self['$split!']();
          }, $Arguments_initialize$4.$$arity = 1);
          
          Opal.def(self, '$reset_tmp_counter!', $Arguments_reset_tmp_counter$excl$5 = function() {
            var self = this;

            return (self.counter = 0)
          }, $Arguments_reset_tmp_counter$excl$5.$$arity = 0);
          
          Opal.def(self, '$new_mlhs_tmp', $Arguments_new_mlhs_tmp$6 = function $$new_mlhs_tmp() {
            var $a, self = this;

            
            self.counter = ($truthy($a = self.counter) ? $a : 0);
            self.counter = $rb_plus(self.counter, 1);
            return "" + "$mlhs_tmp" + (self.counter);
          }, $Arguments_new_mlhs_tmp$6.$$arity = 0);
          return (Opal.def(self, '$split!', $Arguments_split$excl$7 = function() {
            var $$8, self = this;

            
            $send(self.args.$children(), 'each', [], ($$8 = function(arg){var self = $$8.$$s == null ? this : $$8.$$s, var_name = nil, rhs = nil, mlhs = nil;
              if (self.rewriter == null) self.rewriter = nil;
              if (self.initialization == null) self.initialization = nil;
              if (self.rewritten == null) self.rewritten = nil;

            
              
              if (arg == null) {
                arg = nil;
              };
              if (arg.$type()['$==']("mlhs")) {
                
                var_name = self.$new_mlhs_tmp();
                rhs = self.$s("lvar", var_name);
                mlhs = self.rewriter.$process(arg);
                self.initialization['$<<'](self.$s("masgn", mlhs, rhs));
                return self.rewritten['$<<'](self.$s("arg", var_name).$updated(nil, nil, $hash2(["meta"], {"meta": $hash2(["arg_name"], {"arg_name": var_name})})));
              } else {
                return self.rewritten['$<<'](arg)
              };}, $$8.$$s = self, $$8.$$arity = 1, $$8));
            if (self.initialization.$length()['$=='](1)) {
              return (self.initialization = self.initialization['$[]'](0))
            } else if ($truthy(self.initialization['$empty?']())) {
              return (self.initialization = nil)
            } else {
              return (self.initialization = $send(self, 's', ["begin"].concat(Opal.to_a(self.initialization))))
            };
          }, $Arguments_split$excl$7.$$arity = 0), nil) && 'split!';
        })($nesting[0], $$($nesting, 'Base'), $nesting);
        return (function($base, $super, $parent_nesting) {
          var self = $klass($base, $super, 'MlhsRewriter');

          var $nesting = [self].concat($parent_nesting), $MlhsRewriter_on_arg$9, $MlhsRewriter_on_restarg$10;

          
          
          Opal.def(self, '$on_arg', $MlhsRewriter_on_arg$9 = function $$on_arg(node) {
            var self = this;

            return node.$updated("lvasgn")
          }, $MlhsRewriter_on_arg$9.$$arity = 1);
          return (Opal.def(self, '$on_restarg', $MlhsRewriter_on_restarg$10 = function $$on_restarg(node) {
            var self = this, name = nil;

            
            name = node.$children()['$[]'](0);
            if ($truthy(name)) {
              return self.$s("splat", node.$updated("lvasgn"))
            } else {
              return self.$s("splat")
            };
          }, $MlhsRewriter_on_restarg$10.$$arity = 1), nil) && 'on_restarg';
        })($nesting[0], $$($nesting, 'Base'), $nesting);
      })($nesting[0], $$($nesting, 'Base'), $nesting)
    })($nesting[0], $nesting)
  })($nesting[0], $nesting);
};

/* Generated by Opal 1.0.0 */
Opal.modules["opal/rewriters/arguments"] = function(Opal) {
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.$$$, $$ = Opal.$$, $module = Opal.module, $klass = Opal.klass, $send = Opal.send, $truthy = Opal.truthy;

  Opal.add_stubs(['$attr_reader', '$each', '$type', '$===', '$<<', '$any?', '$raise', '$!', '$nil?', '$has_any_kwargs?', '$can_inline_kwargs?', '$empty?']);
  return (function($base, $parent_nesting) {
    var self = $module($base, 'Opal');

    var $nesting = [self].concat($parent_nesting);

    (function($base, $parent_nesting) {
      var self = $module($base, 'Rewriters');

      var $nesting = [self].concat($parent_nesting);

      (function($base, $super, $parent_nesting) {
        var self = $klass($base, $super, 'Arguments');

        var $nesting = [self].concat($parent_nesting), $Arguments_initialize$1, $Arguments_has_post_args$ques$3, $Arguments_has_any_kwargs$ques$4, $Arguments_can_inline_kwargs$ques$5;

        self.$$prototype.restarg = self.$$prototype.postargs = self.$$prototype.kwargs = self.$$prototype.kwoptargs = self.$$prototype.kwrestarg = self.$$prototype.optargs = nil;
        
        self.$attr_reader("args", "optargs", "restarg", "postargs", "kwargs", "kwoptargs", "kwrestarg", "shadowargs", "blockarg");
        
        Opal.def(self, '$initialize', $Arguments_initialize$1 = function $$initialize(args) {
          var $$2, self = this;

          
          self.args = [];
          self.optargs = [];
          self.restarg = nil;
          self.postargs = [];
          self.kwargs = [];
          self.kwoptargs = [];
          self.kwrestarg = nil;
          self.shadowargs = [];
          self.blockarg = nil;
          return $send(args, 'each', [], ($$2 = function(arg){var self = $$2.$$s == null ? this : $$2.$$s, $a, $case = nil;
            if (self.restarg == null) self.restarg = nil;
            if (self.optargs == null) self.optargs = nil;
            if (self.postargs == null) self.postargs = nil;
            if (self.args == null) self.args = nil;
            if (self.kwargs == null) self.kwargs = nil;
            if (self.kwoptargs == null) self.kwoptargs = nil;
            if (self.shadowargs == null) self.shadowargs = nil;

          
            
            if (arg == null) {
              arg = nil;
            };
            return (function() {$case = arg.$type();
            if ("arg"['$===']($case) || "mlhs"['$===']($case)) {return (function() {if ($truthy(($truthy($a = self.restarg) ? $a : self.optargs['$any?']()))) {
              return self.postargs
            } else {
              return self.args
            }; return nil; })()['$<<'](arg)}
            else if ("optarg"['$===']($case)) {return self.optargs['$<<'](arg)}
            else if ("restarg"['$===']($case)) {return (self.restarg = arg)}
            else if ("kwarg"['$===']($case)) {return self.kwargs['$<<'](arg)}
            else if ("kwoptarg"['$===']($case)) {return self.kwoptargs['$<<'](arg)}
            else if ("kwrestarg"['$===']($case)) {return (self.kwrestarg = arg)}
            else if ("shadowarg"['$===']($case)) {return self.shadowargs['$<<'](arg)}
            else if ("blockarg"['$===']($case)) {return (self.blockarg = arg)}
            else {return self.$raise("" + "Unsupported arg type " + (arg.$type()))}})();}, $$2.$$s = self, $$2.$$arity = 1, $$2));
        }, $Arguments_initialize$1.$$arity = 1);
        
        Opal.def(self, '$has_post_args?', $Arguments_has_post_args$ques$3 = function() {
          var $a, $b, self = this;

          return ($truthy($a = ($truthy($b = self.restarg['$nil?']()['$!']()) ? $b : self.postargs['$any?']())) ? $a : ($truthy($b = self['$has_any_kwargs?']()) ? self['$can_inline_kwargs?']()['$!']() : $b))
        }, $Arguments_has_post_args$ques$3.$$arity = 0);
        
        Opal.def(self, '$has_any_kwargs?', $Arguments_has_any_kwargs$ques$4 = function() {
          var $a, $b, self = this;

          return ($truthy($a = ($truthy($b = self.kwargs['$any?']()) ? $b : self.kwoptargs['$any?']())) ? $a : self.kwrestarg['$nil?']()['$!']())
        }, $Arguments_has_any_kwargs$ques$4.$$arity = 0);
        return (Opal.def(self, '$can_inline_kwargs?', $Arguments_can_inline_kwargs$ques$5 = function() {
          var $a, $b, self = this;

          return ($truthy($a = ($truthy($b = self.optargs['$empty?']()) ? self.restarg['$nil?']() : $b)) ? self.postargs['$empty?']() : $a)
        }, $Arguments_can_inline_kwargs$ques$5.$$arity = 0), nil) && 'can_inline_kwargs?';
      })($nesting[0], null, $nesting)
    })($nesting[0], $nesting)
  })($nesting[0], $nesting)
};

/* Generated by Opal 1.0.0 */
Opal.modules["opal/rewriters/inline_args"] = function(Opal) {
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.$$$, $$ = Opal.$$, $module = Opal.module, $klass = Opal.klass, $send2 = Opal.send2, $truthy = Opal.truthy, $hash2 = Opal.hash2, $send = Opal.send;

  Opal.add_stubs(['$require', '$s', '$new', '$updated', '$inline', '$prepend_to_body', '$initialization', '$attr_reader', '$freeze', '$children', '$each', '$send', '$any?', '$blockarg', '$<<', '$shadowargs', '$args', '$==', '$[]', '$has_post_args?', '$length', '$has_any_kwargs?', '$can_inline_kwargs?', '$kwargs', '$kwoptargs', '$kwrestarg', '$postargs', '$optargs', '$args_to_keep', '$restarg']);
  
  self.$require("opal/rewriters/base");
  self.$require("opal/rewriters/arguments");
  return (function($base, $parent_nesting) {
    var self = $module($base, 'Opal');

    var $nesting = [self].concat($parent_nesting);

    (function($base, $parent_nesting) {
      var self = $module($base, 'Rewriters');

      var $nesting = [self].concat($parent_nesting);

      (function($base, $super, $parent_nesting) {
        var self = $klass($base, $super, 'InlineArgs');

        var $nesting = [self].concat($parent_nesting), $InlineArgs_on_def$1, $InlineArgs_on_defs$2, $InlineArgs_on_iter$3;

        
        
        Opal.def(self, '$on_def', $InlineArgs_on_def$1 = function $$on_def(node) {
          var $a, $iter = $InlineArgs_on_def$1.$$p, $yield = $iter || nil, self = this, mid = nil, args = nil, body = nil, initializer = nil, inline_args = nil;

          if ($iter) $InlineArgs_on_def$1.$$p = null;
          
          node = $send2(self, Opal.find_super_dispatcher(self, 'on_def', $InlineArgs_on_def$1, false, true), 'on_def', [node], null);
          $a = [].concat(Opal.to_a(node)), (mid = ($a[0] == null ? nil : $a[0])), (args = ($a[1] == null ? nil : $a[1])), (body = ($a[2] == null ? nil : $a[2])), $a;
          body = ($truthy($a = body) ? $a : self.$s("nil"));
          initializer = $$($nesting, 'Initializer').$new(args, $hash2(["type"], {"type": "def"}));
          inline_args = args.$updated(nil, initializer.$inline());
          body = self.$prepend_to_body(body, initializer.$initialization());
          return node.$updated(nil, [mid, inline_args, body]);
        }, $InlineArgs_on_def$1.$$arity = 1);
        
        Opal.def(self, '$on_defs', $InlineArgs_on_defs$2 = function $$on_defs(node) {
          var $a, $iter = $InlineArgs_on_defs$2.$$p, $yield = $iter || nil, self = this, recv = nil, mid = nil, args = nil, body = nil, initializer = nil, inline_args = nil;

          if ($iter) $InlineArgs_on_defs$2.$$p = null;
          
          node = $send2(self, Opal.find_super_dispatcher(self, 'on_defs', $InlineArgs_on_defs$2, false, true), 'on_defs', [node], null);
          $a = [].concat(Opal.to_a(node)), (recv = ($a[0] == null ? nil : $a[0])), (mid = ($a[1] == null ? nil : $a[1])), (args = ($a[2] == null ? nil : $a[2])), (body = ($a[3] == null ? nil : $a[3])), $a;
          body = ($truthy($a = body) ? $a : self.$s("nil"));
          initializer = $$($nesting, 'Initializer').$new(args, $hash2(["type"], {"type": "defs"}));
          inline_args = args.$updated(nil, initializer.$inline());
          body = self.$prepend_to_body(body, initializer.$initialization());
          return node.$updated(nil, [recv, mid, inline_args, body]);
        }, $InlineArgs_on_defs$2.$$arity = 1);
        
        Opal.def(self, '$on_iter', $InlineArgs_on_iter$3 = function $$on_iter(node) {
          var $a, $iter = $InlineArgs_on_iter$3.$$p, $yield = $iter || nil, self = this, args = nil, body = nil, initializer = nil, inline_args = nil;

          if ($iter) $InlineArgs_on_iter$3.$$p = null;
          
          node = $send2(self, Opal.find_super_dispatcher(self, 'on_iter', $InlineArgs_on_iter$3, false, true), 'on_iter', [node], null);
          $a = [].concat(Opal.to_a(node)), (args = ($a[0] == null ? nil : $a[0])), (body = ($a[1] == null ? nil : $a[1])), $a;
          body = ($truthy($a = body) ? $a : self.$s("nil"));
          initializer = $$($nesting, 'Initializer').$new(args, $hash2(["type"], {"type": "iter"}));
          inline_args = args.$updated(nil, initializer.$inline());
          body = self.$prepend_to_body(body, initializer.$initialization());
          return node.$updated(nil, [inline_args, body]);
        }, $InlineArgs_on_iter$3.$$arity = 1);
        return (function($base, $super, $parent_nesting) {
          var self = $klass($base, $super, 'Initializer');

          var $nesting = [self].concat($parent_nesting), $Initializer_initialize$4, $Initializer_extract_blockarg$6, $Initializer_initialize_shadowargs$7, $Initializer_extract_args$9, $Initializer_prepare_post_args$11, $Initializer_prepare_kwargs$12, $Initializer_extract_kwargs$13, $Initializer_extract_kwoptargs$15, $Initializer_extract_kwrestarg$17, $Initializer_extract_post_args$18, $Initializer_extract_optargs$20, $Initializer_extract_restarg$22, $Initializer_args_to_keep$23;

          self.$$prototype.initialization = self.$$prototype.args = self.$$prototype.inline = nil;
          
          self.$attr_reader("inline", "initialization");
          Opal.const_set($nesting[0], 'STEPS', ["extract_blockarg", "initialize_shadowargs", "extract_args", "prepare_post_args", "prepare_kwargs", "extract_optargs", "extract_restarg", "extract_post_args", "extract_kwargs", "extract_kwoptargs", "extract_kwrestarg"].$freeze());
          
          Opal.def(self, '$initialize', $Initializer_initialize$4 = function $$initialize(args, $kwargs) {
            var type, $$5, self = this;

            
            
            if ($kwargs == null) {
              $kwargs = $hash2([], {});
            } else if (!$kwargs.$$is_hash) {
              throw Opal.ArgumentError.$new('expected kwargs');
            };
            
            if (!Opal.hasOwnProperty.call($kwargs.$$smap, 'type')) {
              throw Opal.ArgumentError.$new('missing keyword: type');
            }
            type = $kwargs.$$smap["type"];;
            self.args = $$($nesting, 'Arguments').$new(args.$children());
            self.inline = [];
            self.initialization = [];
            self.type = type;
            self.underscore_found = false;
            $send($$($nesting, 'STEPS'), 'each', [], ($$5 = function(step){var self = $$5.$$s == null ? this : $$5.$$s;

            
              
              if (step == null) {
                step = nil;
              };
              return self.$send(step);}, $$5.$$s = self, $$5.$$arity = 1, $$5));
            if ($truthy(self.initialization['$any?']())) {
              return (self.initialization = $send(self, 's', ["begin"].concat(Opal.to_a(self.initialization))))
            } else {
              return (self.initialization = nil)
            };
          }, $Initializer_initialize$4.$$arity = 2);
          
          Opal.def(self, '$extract_blockarg', $Initializer_extract_blockarg$6 = function $$extract_blockarg() {
            var self = this, arg = nil;

            if ($truthy((arg = self.args.$blockarg()))) {
              return self.initialization['$<<'](arg.$updated("extract_blockarg"))
            } else {
              return nil
            }
          }, $Initializer_extract_blockarg$6.$$arity = 0);
          
          Opal.def(self, '$initialize_shadowargs', $Initializer_initialize_shadowargs$7 = function $$initialize_shadowargs() {
            var $$8, self = this;

            return $send(self.args.$shadowargs(), 'each', [], ($$8 = function(arg){var self = $$8.$$s == null ? this : $$8.$$s;
              if (self.initialization == null) self.initialization = nil;

            
              
              if (arg == null) {
                arg = nil;
              };
              return self.initialization['$<<'](arg.$updated("initialize_shadowarg"));}, $$8.$$s = self, $$8.$$arity = 1, $$8))
          }, $Initializer_initialize_shadowargs$7.$$arity = 0);
          
          Opal.def(self, '$extract_args', $Initializer_extract_args$9 = function $$extract_args() {
            var $$10, self = this;

            return $send(self.args.$args(), 'each', [], ($$10 = function(arg){var self = $$10.$$s == null ? this : $$10.$$s;
              if (self.type == null) self.type = nil;
              if (self.initialization == null) self.initialization = nil;
              if (self.underscore_found == null) self.underscore_found = nil;
              if (self.inline == null) self.inline = nil;

            
              
              if (arg == null) {
                arg = nil;
              };
              if (self.type['$==']("iter")) {
                
                self.initialization['$<<'](arg.$updated("initialize_iter_arg"));
                if (arg.$children()['$[]'](0)['$==']("_")) {
                  
                  if ($truthy(self.underscore_found)) {
                    arg = self.$s("fake_arg")};
                  self.underscore_found = true;};};
              return self.inline['$<<'](arg);}, $$10.$$s = self, $$10.$$arity = 1, $$10))
          }, $Initializer_extract_args$9.$$arity = 0);
          
          Opal.def(self, '$prepare_post_args', $Initializer_prepare_post_args$11 = function $$prepare_post_args() {
            var self = this;

            if ($truthy(self.args['$has_post_args?']())) {
              return self.initialization['$<<'](self.$s("prepare_post_args", self.args.$args().$length()))
            } else {
              return nil
            }
          }, $Initializer_prepare_post_args$11.$$arity = 0);
          
          Opal.def(self, '$prepare_kwargs', $Initializer_prepare_kwargs$12 = function $$prepare_kwargs() {
            var self = this;

            
            if ($truthy(self.args['$has_any_kwargs?']())) {
            } else {
              return nil
            };
            if ($truthy(self.args['$can_inline_kwargs?']())) {
              self.inline['$<<'](self.$s("arg", "$kwargs"))
            } else {
              
              self.initialization['$<<'](self.$s("extract_kwargs"));
              self.inline['$<<'](self.$s("fake_arg"));
            };
            return self.initialization['$<<'](self.$s("ensure_kwargs_are_kwargs"));
          }, $Initializer_prepare_kwargs$12.$$arity = 0);
          
          Opal.def(self, '$extract_kwargs', $Initializer_extract_kwargs$13 = function $$extract_kwargs() {
            var $$14, self = this;

            return $send(self.args.$kwargs(), 'each', [], ($$14 = function(arg){var self = $$14.$$s == null ? this : $$14.$$s;
              if (self.initialization == null) self.initialization = nil;

            
              
              if (arg == null) {
                arg = nil;
              };
              return self.initialization['$<<'](arg.$updated("extract_kwarg"));}, $$14.$$s = self, $$14.$$arity = 1, $$14))
          }, $Initializer_extract_kwargs$13.$$arity = 0);
          
          Opal.def(self, '$extract_kwoptargs', $Initializer_extract_kwoptargs$15 = function $$extract_kwoptargs() {
            var $$16, self = this;

            return $send(self.args.$kwoptargs(), 'each', [], ($$16 = function(arg){var self = $$16.$$s == null ? this : $$16.$$s;
              if (self.initialization == null) self.initialization = nil;

            
              
              if (arg == null) {
                arg = nil;
              };
              return self.initialization['$<<'](arg.$updated("extract_kwoptarg"));}, $$16.$$s = self, $$16.$$arity = 1, $$16))
          }, $Initializer_extract_kwoptargs$15.$$arity = 0);
          
          Opal.def(self, '$extract_kwrestarg', $Initializer_extract_kwrestarg$17 = function $$extract_kwrestarg() {
            var self = this, arg = nil;

            if ($truthy((arg = self.args.$kwrestarg()))) {
              return self.initialization['$<<'](arg.$updated("extract_kwrestarg"))
            } else {
              return nil
            }
          }, $Initializer_extract_kwrestarg$17.$$arity = 0);
          
          Opal.def(self, '$extract_post_args', $Initializer_extract_post_args$18 = function $$extract_post_args() {
            var $$19, self = this;

            return $send(self.args.$postargs(), 'each', [], ($$19 = function(arg){var self = $$19.$$s == null ? this : $$19.$$s;
              if (self.initialization == null) self.initialization = nil;
              if (self.inline == null) self.inline = nil;

            
              
              if (arg == null) {
                arg = nil;
              };
              self.initialization['$<<'](arg.$updated("extract_post_arg"));
              return self.inline['$<<'](self.$s("fake_arg"));}, $$19.$$s = self, $$19.$$arity = 1, $$19))
          }, $Initializer_extract_post_args$18.$$arity = 0);
          
          Opal.def(self, '$extract_optargs', $Initializer_extract_optargs$20 = function $$extract_optargs() {
            var $$21, self = this, has_post_args = nil;

            
            has_post_args = self.args['$has_post_args?']();
            return $send(self.args.$optargs(), 'each', [], ($$21 = function(arg){var self = $$21.$$s == null ? this : $$21.$$s, $a, arg_name = nil, default_value = nil;
              if (self.initialization == null) self.initialization = nil;
              if (self.inline == null) self.inline = nil;

            
              
              if (arg == null) {
                arg = nil;
              };
              if ($truthy(has_post_args)) {
                
                $a = [].concat(Opal.to_a(arg)), (arg_name = ($a[0] == null ? nil : $a[0])), (default_value = ($a[1] == null ? nil : $a[1])), $a;
                self.initialization['$<<'](arg.$updated("extract_post_optarg", [arg_name, default_value, self.$args_to_keep()]));
                return self.inline['$<<'](self.$s("fake_arg"));
              } else {
                
                self.inline['$<<'](arg.$updated("arg"));
                return self.initialization['$<<'](arg.$updated("extract_optarg"));
              };}, $$21.$$s = self, $$21.$$arity = 1, $$21));
          }, $Initializer_extract_optargs$20.$$arity = 0);
          
          Opal.def(self, '$extract_restarg', $Initializer_extract_restarg$22 = function $$extract_restarg() {
            var self = this, arg = nil, arg_name = nil;

            if ($truthy((arg = self.args.$restarg()))) {
              
              arg_name = arg.$children()['$[]'](0);
              self.initialization['$<<'](arg.$updated("extract_restarg", [arg_name, self.$args_to_keep()]));
              return self.inline['$<<'](self.$s("fake_arg"));
            } else {
              return nil
            }
          }, $Initializer_extract_restarg$22.$$arity = 0);
          return (Opal.def(self, '$args_to_keep', $Initializer_args_to_keep$23 = function $$args_to_keep() {
            var self = this;

            return self.args.$postargs().$length()
          }, $Initializer_args_to_keep$23.$$arity = 0), nil) && 'args_to_keep';
        })($nesting[0], $$$($$$($$$('::', 'Opal'), 'Rewriters'), 'Base'), $nesting);
      })($nesting[0], $$($nesting, 'Base'), $nesting)
    })($nesting[0], $nesting)
  })($nesting[0], $nesting);
};

/* Generated by Opal 1.0.0 */
Opal.modules["opal/rewriter"] = function(Opal) {
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.$$$, $$ = Opal.$$, $module = Opal.module, $klass = Opal.klass, $truthy = Opal.truthy, $send = Opal.send;

  Opal.add_stubs(['$require', '$<<', '$list', '$delete', '$use', '$disabled?', '$class', '$each', '$new', '$process']);
  
  self.$require("opal/rewriters/opal_engine_check");
  self.$require("opal/rewriters/for_rewriter");
  self.$require("opal/rewriters/explicit_writer_return");
  self.$require("opal/rewriters/js_reserved_words");
  self.$require("opal/rewriters/block_to_iter");
  self.$require("opal/rewriters/dot_js_syntax");
  self.$require("opal/rewriters/logical_operator_assignment");
  self.$require("opal/rewriters/binary_operator_assignment");
  self.$require("opal/rewriters/hashes/key_duplicates_rewriter");
  self.$require("opal/rewriters/dump_args");
  self.$require("opal/rewriters/mlhs_args");
  self.$require("opal/rewriters/inline_args");
  return (function($base, $parent_nesting) {
    var self = $module($base, 'Opal');

    var $nesting = [self].concat($parent_nesting);

    (function($base, $super, $parent_nesting) {
      var self = $klass($base, $super, 'Rewriter');

      var $nesting = [self].concat($parent_nesting), $Rewriter_initialize$6, $Rewriter_process$7;

      self.$$prototype.sexp = nil;
      
      (function(self, $parent_nesting) {
        var $nesting = [self].concat($parent_nesting), $list$1, $use$2, $delete$3, $disable$4, $disabled$ques$5;

        
        
        Opal.def(self, '$list', $list$1 = function $$list() {
          var $a, self = this;
          if (self.list == null) self.list = nil;

          return (self.list = ($truthy($a = self.list) ? $a : []))
        }, $list$1.$$arity = 0);
        
        Opal.def(self, '$use', $use$2 = function $$use(rewriter) {
          var self = this;

          return self.$list()['$<<'](rewriter)
        }, $use$2.$$arity = 1);
        
        Opal.def(self, '$delete', $delete$3 = function(rewriter) {
          var self = this;

          return self.$list().$delete(rewriter)
        }, $delete$3.$$arity = 1);
        
        Opal.def(self, '$disable', $disable$4 = function $$disable() {
          var $iter = $disable$4.$$p, $yield = $iter || nil, self = this;

          if ($iter) $disable$4.$$p = null;
          return (function() { try {
          
          self.disabled = true;
          return Opal.yieldX($yield, []);;
          } finally {
            (self.disabled = false)
          }; })()
        }, $disable$4.$$arity = 0);
        return (Opal.def(self, '$disabled?', $disabled$ques$5 = function() {
          var $a, self = this;
          if (self.disabled == null) self.disabled = nil;

          if ($truthy((($a = self['disabled'], $a != null && $a !== nil) ? 'instance-variable' : nil))) {
            return self.disabled
          } else {
            return nil
          }
        }, $disabled$ques$5.$$arity = 0), nil) && 'disabled?';
      })(Opal.get_singleton_class(self), $nesting);
      self.$use($$$($$($nesting, 'Rewriters'), 'OpalEngineCheck'));
      self.$use($$$($$($nesting, 'Rewriters'), 'ForRewriter'));
      self.$use($$$($$($nesting, 'Rewriters'), 'BlockToIter'));
      self.$use($$$($$($nesting, 'Rewriters'), 'DotJsSyntax'));
      self.$use($$$($$($nesting, 'Rewriters'), 'JsReservedWords'));
      self.$use($$$($$($nesting, 'Rewriters'), 'LogicalOperatorAssignment'));
      self.$use($$$($$($nesting, 'Rewriters'), 'BinaryOperatorAssignment'));
      self.$use($$$($$($nesting, 'Rewriters'), 'ExplicitWriterReturn'));
      self.$use($$$($$$($$($nesting, 'Rewriters'), 'Hashes'), 'KeyDuplicatesRewriter'));
      self.$use($$$($$($nesting, 'Rewriters'), 'DumpArgs'));
      self.$use($$$($$($nesting, 'Rewriters'), 'MlhsArgs'));
      self.$use($$$($$($nesting, 'Rewriters'), 'InlineArgs'));
      
      Opal.def(self, '$initialize', $Rewriter_initialize$6 = function $$initialize(sexp) {
        var self = this;

        return (self.sexp = sexp)
      }, $Rewriter_initialize$6.$$arity = 1);
      return (Opal.def(self, '$process', $Rewriter_process$7 = function $$process() {
        var $$8, self = this;

        
        if ($truthy(self.$class()['$disabled?']())) {
          return self.sexp};
        $send(self.$class().$list(), 'each', [], ($$8 = function(rewriter_class){var self = $$8.$$s == null ? this : $$8.$$s, rewriter = nil;
          if (self.sexp == null) self.sexp = nil;

        
          
          if (rewriter_class == null) {
            rewriter_class = nil;
          };
          rewriter = rewriter_class.$new();
          return (self.sexp = rewriter.$process(self.sexp));}, $$8.$$s = self, $$8.$$arity = 1, $$8));
        return self.sexp;
      }, $Rewriter_process$7.$$arity = 0), nil) && 'process';
    })($nesting[0], null, $nesting)
  })($nesting[0], $nesting);
};

/* Generated by Opal 1.0.0 */
Opal.modules["opal/parser/source_buffer"] = function(Opal) {
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.$$$, $$ = Opal.$$, $module = Opal.module, $klass = Opal.klass, $truthy = Opal.truthy, $send2 = Opal.send2;

  return (function($base, $parent_nesting) {
    var self = $module($base, 'Opal');

    var $nesting = [self].concat($parent_nesting);

    (function($base, $parent_nesting) {
      var self = $module($base, 'Parser');

      var $nesting = [self].concat($parent_nesting);

      (function($base, $super, $parent_nesting) {
        var self = $klass($base, $super, 'SourceBuffer');

        var $nesting = [self].concat($parent_nesting), $SourceBuffer_recognize_encoding$1;

        return (Opal.defs(self, '$recognize_encoding', $SourceBuffer_recognize_encoding$1 = function $$recognize_encoding(string) {
          var $a, $iter = $SourceBuffer_recognize_encoding$1.$$p, $yield = $iter || nil, self = this, $zuper = nil, $zuper_i = nil, $zuper_ii = nil;

          if ($iter) $SourceBuffer_recognize_encoding$1.$$p = null;
          // Prepare super implicit arguments
          for($zuper_i = 0, $zuper_ii = arguments.length, $zuper = new Array($zuper_ii); $zuper_i < $zuper_ii; $zuper_i++) {
            $zuper[$zuper_i] = arguments[$zuper_i];
          }
          return ($truthy($a = $send2(self, Opal.find_super_dispatcher(self, 'recognize_encoding', $SourceBuffer_recognize_encoding$1, false, true), 'recognize_encoding', $zuper, $iter)) ? $a : $$$($$($nesting, 'Encoding'), 'UTF_8'))
        }, $SourceBuffer_recognize_encoding$1.$$arity = 1), nil) && 'recognize_encoding'
      })($nesting[0], $$$($$$($$$('::', 'Parser'), 'Source'), 'Buffer'), $nesting)
    })($nesting[0], $nesting)
  })($nesting[0], $nesting)
};

/* Generated by Opal 1.0.0 */
Opal.modules["opal/parser/default_config"] = function(Opal) {
  function $rb_minus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs - rhs : lhs['$-'](rhs);
  }
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.$$$, $$ = Opal.$$, $module = Opal.module, $send2 = Opal.send2, $send = Opal.send, $lambda = Opal.lambda, $truthy = Opal.truthy;

  Opal.add_stubs(['$attr_accessor', '$all_errors_are_fatal=', '$diagnostics', '$-', '$ignore_warnings=', '$diagnostics_consumer', '$consumer=', '$extend', '$!=', '$diagnostics_consumer=', '$new', '$rewrite', '$process', '$default_parser', '$default_parser_class']);
  return (function($base, $parent_nesting) {
    var self = $module($base, 'Opal');

    var $nesting = [self].concat($parent_nesting);

    (function($base, $parent_nesting) {
      var self = $module($base, 'Parser');

      var $nesting = [self].concat($parent_nesting);

      
      (function($base, $parent_nesting) {
        var self = $module($base, 'DefaultConfig');

        var $nesting = [self].concat($parent_nesting), $DefaultConfig_included$2, $DefaultConfig_initialize$4, $DefaultConfig_parse$5, $DefaultConfig_rewrite$6;

        
        (function($base, $parent_nesting) {
          var self = $module($base, 'ClassMethods');

          var $nesting = [self].concat($parent_nesting), $ClassMethods_default_parser$1;

          
          self.$attr_accessor("diagnostics_consumer");
          
          Opal.def(self, '$default_parser', $ClassMethods_default_parser$1 = function $$default_parser() {
            var $iter = $ClassMethods_default_parser$1.$$p, $yield = $iter || nil, self = this, parser = nil, $writer = nil, $zuper = nil, $zuper_i = nil, $zuper_ii = nil;

            if ($iter) $ClassMethods_default_parser$1.$$p = null;
            // Prepare super implicit arguments
            for($zuper_i = 0, $zuper_ii = arguments.length, $zuper = new Array($zuper_ii); $zuper_i < $zuper_ii; $zuper_i++) {
              $zuper[$zuper_i] = arguments[$zuper_i];
            }
            
            parser = $send2(self, Opal.find_super_dispatcher(self, 'default_parser', $ClassMethods_default_parser$1, false, true), 'default_parser', $zuper, $iter);
            
            $writer = [true];
            $send(parser.$diagnostics(), 'all_errors_are_fatal=', Opal.to_a($writer));
            $writer[$rb_minus($writer["length"], 1)];;
            
            $writer = [false];
            $send(parser.$diagnostics(), 'ignore_warnings=', Opal.to_a($writer));
            $writer[$rb_minus($writer["length"], 1)];;
            
            $writer = [self.$diagnostics_consumer()];
            $send(parser.$diagnostics(), 'consumer=', Opal.to_a($writer));
            $writer[$rb_minus($writer["length"], 1)];;
            return parser;
          }, $ClassMethods_default_parser$1.$$arity = 0);
        })($nesting[0], $nesting);
        Opal.defs(self, '$included', $DefaultConfig_included$2 = function $$included(klass) {
          var $$3, self = this, $writer = nil;

          
          klass.$extend($$($nesting, 'ClassMethods'));
          
          $writer = [$lambda(($$3 = function(diagnostic){var self = $$3.$$s == null ? this : $$3.$$s;

          
            
            if (diagnostic == null) {
              diagnostic = nil;
            };
            if ($truthy($$($nesting, 'RUBY_ENGINE')['$!=']("opal"))) {
              return nil
            } else {
              return nil
            };}, $$3.$$s = self, $$3.$$arity = 1, $$3))];
          $send(klass, 'diagnostics_consumer=', Opal.to_a($writer));
          return $writer[$rb_minus($writer["length"], 1)];;
        }, $DefaultConfig_included$2.$$arity = 1);
        
        Opal.def(self, '$initialize', $DefaultConfig_initialize$4 = function $$initialize($a) {
          var $post_args, $iter = $DefaultConfig_initialize$4.$$p, $yield = $iter || nil, self = this;

          if ($iter) $DefaultConfig_initialize$4.$$p = null;
          
          
          $post_args = Opal.slice.call(arguments, 0, arguments.length);
          ;
          return $send2(self, Opal.find_super_dispatcher(self, 'initialize', $DefaultConfig_initialize$4, false, true), 'initialize', [$$$($$$($$($nesting, 'Opal'), 'AST'), 'Builder').$new()], null);
        }, $DefaultConfig_initialize$4.$$arity = -1);
        
        Opal.def(self, '$parse', $DefaultConfig_parse$5 = function $$parse(source_buffer) {
          var $iter = $DefaultConfig_parse$5.$$p, $yield = $iter || nil, self = this, parsed = nil, rewriten = nil, $zuper = nil, $zuper_i = nil, $zuper_ii = nil;

          if ($iter) $DefaultConfig_parse$5.$$p = null;
          // Prepare super implicit arguments
          for($zuper_i = 0, $zuper_ii = arguments.length, $zuper = new Array($zuper_ii); $zuper_i < $zuper_ii; $zuper_i++) {
            $zuper[$zuper_i] = arguments[$zuper_i];
          }
          
          parsed = $send2(self, Opal.find_super_dispatcher(self, 'parse', $DefaultConfig_parse$5, false, true), 'parse', $zuper, $iter);
          rewriten = self.$rewrite(parsed);
          return rewriten;
        }, $DefaultConfig_parse$5.$$arity = 1);
        
        Opal.def(self, '$rewrite', $DefaultConfig_rewrite$6 = function $$rewrite(node) {
          var self = this;

          return $$$($$($nesting, 'Opal'), 'Rewriter').$new(node).$process()
        }, $DefaultConfig_rewrite$6.$$arity = 1);
      })($nesting[0], $nesting);
      (function(self, $parent_nesting) {
        var $nesting = [self].concat($parent_nesting), $default_parser$7;

        
        self.$attr_accessor("default_parser_class");
        return (Opal.def(self, '$default_parser', $default_parser$7 = function $$default_parser() {
          var self = this;

          return self.$default_parser_class().$default_parser()
        }, $default_parser$7.$$arity = 0), nil) && 'default_parser';
      })(Opal.get_singleton_class(self), $nesting);
    })($nesting[0], $nesting)
  })($nesting[0], $nesting)
};

/* Generated by Opal 1.0.0 */
Opal.modules["opal/parser/with_ruby_lexer"] = function(Opal) {
  function $rb_minus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs - rhs : lhs['$-'](rhs);
  }
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.$$$, $$ = Opal.$$, $klass = Opal.klass, $send = Opal.send;

  Opal.add_stubs(['$include', '$default_parser_class=', '$-']);
  return (function($base, $super, $parent_nesting) {
    var self = $klass($base, $super, 'WithRubyLexer');

    var $nesting = [self].concat($parent_nesting), $writer = nil;

    
    self.$include($$$($$$($$($nesting, 'Opal'), 'Parser'), 'DefaultConfig'));
    
    $writer = [self];
    $send($$$($$($nesting, 'Opal'), 'Parser'), 'default_parser_class=', Opal.to_a($writer));
    return $writer[$rb_minus($writer["length"], 1)];;
  })($$$($$($nesting, 'Opal'), 'Parser'), $$$($$($nesting, 'Parser'), 'Ruby25'), $nesting)
};

/* Generated by Opal 1.0.0 */
Opal.modules["opal/parser/patch"] = function(Opal) {
  function $rb_plus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs + rhs : lhs['$+'](rhs);
  }
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.$$$, $$ = Opal.$$, $klass = Opal.klass, $truthy = Opal.truthy, $send = Opal.send;

  Opal.add_stubs(['$==', '$source', '$unpack', '$+', '$to_a', '$lines', '$end_with?', '$<<', '$map', '$chomp']);
  if ($$($nesting, 'RUBY_ENGINE')['$==']("opal")) {
    
    (function($base, $super, $parent_nesting) {
      var self = $klass($base, $super, 'Lexer');

      var $nesting = [self].concat($parent_nesting), $Lexer_source_buffer$eq$1;

      self.$$prototype.source_buffer = nil;
      return (Opal.def(self, '$source_buffer=', $Lexer_source_buffer$eq$1 = function(source_buffer) {
        var self = this, source = nil;

        
        self.source_buffer = source_buffer;
        if ($truthy(self.source_buffer)) {
          
          source = self.source_buffer.$source();
          return (self.source_pts = source.$unpack("U*"));
        } else {
          return (self.source_pts = nil)
        };
      }, $Lexer_source_buffer$eq$1.$$arity = 1), nil) && 'source_buffer='
    })($$($nesting, 'Parser'), null, $nesting);
    (function($base, $super, $parent_nesting) {
      var self = $klass($base, $super, 'Literal');

      var $nesting = [self].concat($parent_nesting), $Literal_extend_string$2;

      self.$$prototype.buffer_s = self.$$prototype.buffer = nil;
      
      
      Opal.udef(self, '$' + "extend_string");;
      return (Opal.def(self, '$extend_string', $Literal_extend_string$2 = function $$extend_string(string, ts, te) {
        var $a, self = this;

        
        self.buffer_s = ($truthy($a = self.buffer_s) ? $a : ts);
        self.buffer_e = te;
        return (self.buffer = $rb_plus(self.buffer, string));
      }, $Literal_extend_string$2.$$arity = 3), nil) && 'extend_string';
    })($$$($$($nesting, 'Parser'), 'Lexer'), null, $nesting);
    return (function($base, $super, $parent_nesting) {
      var self = $klass($base, $super, 'Buffer');

      var $nesting = [self].concat($parent_nesting), $Buffer_source_lines$3;

      self.$$prototype.lines = self.$$prototype.source = nil;
      return (Opal.def(self, '$source_lines', $Buffer_source_lines$3 = function $$source_lines() {
        var $a, $$4, self = this, lines = nil;

        return (self.lines = ($truthy($a = self.lines) ? $a : ((lines = self.source.$lines().$to_a()), (function() {if ($truthy(self.source['$end_with?']("\n"))) {
          return lines['$<<']("")
        } else {
          return nil
        }; return nil; })(), $send(lines, 'map', [], ($$4 = function(line){var self = $$4.$$s == null ? this : $$4.$$s;

        
          
          if (line == null) {
            line = nil;
          };
          return line.$chomp("\n");}, $$4.$$s = self, $$4.$$arity = 1, $$4)))))
      }, $Buffer_source_lines$3.$$arity = 0), nil) && 'source_lines'
    })($$$($$($nesting, 'Parser'), 'Source'), null, $nesting);
  } else {
    return nil
  }
};

/* Generated by Opal 1.0.0 */
Opal.modules["opal/parser"] = function(Opal) {
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.$$$, $$ = Opal.$$;

  Opal.add_stubs(['$require', '$==']);
  
  self.$require("opal/ast/builder");
  self.$require("opal/rewriter");
  self.$require("opal/parser/source_buffer");
  self.$require("opal/parser/default_config");
  self.$require("opal/parser/with_ruby_lexer");
  if ($$($nesting, 'RUBY_ENGINE')['$==']("opal")) {
    return self.$require("opal/parser/patch")
  } else {
    return nil
  };
};

/* Generated by Opal 1.0.0 */
Opal.modules["opal/fragment"] = function(Opal) {
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.$$$, $$ = Opal.$$, $module = Opal.module, $klass = Opal.klass, $truthy = Opal.truthy;

  Opal.add_stubs(['$attr_reader', '$to_s', '$inspect', '$type', '$===', '$first', '$children', '$[]', '$line', '$column']);
  return (function($base, $parent_nesting) {
    var self = $module($base, 'Opal');

    var $nesting = [self].concat($parent_nesting);

    (function($base, $super, $parent_nesting) {
      var self = $klass($base, $super, 'Fragment');

      var $nesting = [self].concat($parent_nesting), $Fragment_initialize$1, $Fragment_inspect$2, $Fragment_source_map_name$3, $Fragment_line$4, $Fragment_column$5;

      self.$$prototype.code = self.$$prototype.sexp = nil;
      
      self.$attr_reader("code");
      
      Opal.def(self, '$initialize', $Fragment_initialize$1 = function $$initialize(code, scope, sexp) {
        var self = this;

        
        
        if (sexp == null) {
          sexp = nil;
        };
        self.code = code.$to_s();
        self.sexp = sexp;
        return (self.scope = scope);
      }, $Fragment_initialize$1.$$arity = -3);
      
      Opal.def(self, '$inspect', $Fragment_inspect$2 = function $$inspect() {
        var self = this;

        return "" + "f(" + (self.code.$inspect()) + ")"
      }, $Fragment_inspect$2.$$arity = 0);
      
      Opal.def(self, '$source_map_name', $Fragment_source_map_name$3 = function $$source_map_name() {
        var self = this, $case = nil;

        return (function() {$case = self.sexp.$type();
        if ("top"['$===']($case) || "begin"['$===']($case) || "newline"['$===']($case) || "js_return"['$===']($case)) {return nil}
        else if ("self"['$===']($case)) {return "self"}
        else if ("module"['$===']($case)) {return "module"}
        else if ("class"['$===']($case)) {return "class"}
        else if ("int"['$===']($case)) {return self.sexp.$children().$first()}
        else if ("def"['$===']($case)) {return self.sexp.$children().$first()}
        else if ("defs"['$===']($case)) {return self.sexp.$children()['$[]'](1)}
        else if ("send"['$===']($case)) {return self.sexp.$children()['$[]'](1)}
        else if ("lvar"['$===']($case) || "lvasgn"['$===']($case) || "lvdeclare"['$===']($case) || "ivar"['$===']($case) || "ivasgn"['$===']($case) || "gvar"['$===']($case) || "cvar"['$===']($case) || "cvasgn"['$===']($case) || "gvars"['$===']($case) || "gvasgn"['$===']($case)) {return self.sexp.$children().$first()}
        else { return nil }})()
      }, $Fragment_source_map_name$3.$$arity = 0);
      
      Opal.def(self, '$line', $Fragment_line$4 = function $$line() {
        var self = this;

        if ($truthy(self.sexp)) {
          return self.sexp.$line()
        } else {
          return nil
        }
      }, $Fragment_line$4.$$arity = 0);
      return (Opal.def(self, '$column', $Fragment_column$5 = function $$column() {
        var self = this;

        if ($truthy(self.sexp)) {
          return self.sexp.$column()
        } else {
          return nil
        }
      }, $Fragment_column$5.$$arity = 0), nil) && 'column';
    })($nesting[0], null, $nesting)
  })($nesting[0], $nesting)
};

/* Generated by Opal 1.0.0 */
Opal.modules["opal/nodes/helpers"] = function(Opal) {
  function $rb_plus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs + rhs : lhs['$+'](rhs);
  }
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.$$$, $$ = Opal.$$, $module = Opal.module, $truthy = Opal.truthy, $send = Opal.send;

  Opal.add_stubs(['$require', '$valid_name?', '$inspect', '$=~', '$to_s', '$+', '$indent', '$compiler', '$to_proc', '$parser_indent', '$push', '$current_indent', '$js_truthy_optimize', '$helper', '$fragment', '$expr', '$==', '$type', '$[]', '$children', '$uses_block!', '$scope', '$block_name', '$handlers', '$include?', '$truthy_optimize?', '$new_temp', '$wrap']);
  
  self.$require("opal/regexp_anchors");
  return (function($base, $parent_nesting) {
    var self = $module($base, 'Opal');

    var $nesting = [self].concat($parent_nesting);

    (function($base, $parent_nesting) {
      var self = $module($base, 'Nodes');

      var $nesting = [self].concat($parent_nesting);

      (function($base, $parent_nesting) {
        var self = $module($base, 'Helpers');

        var $nesting = [self].concat($parent_nesting), $Helpers_property$1, $Helpers_valid_name$ques$2, $Helpers_mid_to_jsid$3, $Helpers_indent$4, $Helpers_current_indent$5, $Helpers_line$6, $Helpers_empty_line$7, $Helpers_js_truthy$8, $Helpers_js_falsy$9, $Helpers_js_truthy_optimize$10, $Helpers_conditional_send$11;

        
        
        Opal.def(self, '$property', $Helpers_property$1 = function $$property(name) {
          var self = this;

          if ($truthy(self['$valid_name?'](name))) {
            return "" + "." + (name)
          } else {
            return "" + "[" + (name.$inspect()) + "]"
          }
        }, $Helpers_property$1.$$arity = 1);
        
        Opal.def(self, '$valid_name?', $Helpers_valid_name$ques$2 = function(name) {
          var self = this;

          return $$$($$$($$($nesting, 'Opal'), 'Rewriters'), 'JsReservedWords')['$valid_name?'](name)
        }, $Helpers_valid_name$ques$2.$$arity = 1);
        
        Opal.def(self, '$mid_to_jsid', $Helpers_mid_to_jsid$3 = function $$mid_to_jsid(mid) {
          var self = this;

          if ($truthy(/\=|\+|\-|\*|\/|\!|\?|<|\>|\&|\||\^|\%|\~|\[/['$=~'](mid.$to_s()))) {
            return "" + "['$" + (mid) + "']"
          } else {
            return $rb_plus(".$", mid)
          }
        }, $Helpers_mid_to_jsid$3.$$arity = 1);
        
        Opal.def(self, '$indent', $Helpers_indent$4 = function $$indent() {
          var $iter = $Helpers_indent$4.$$p, block = $iter || nil, self = this;

          if ($iter) $Helpers_indent$4.$$p = null;
          
          
          if ($iter) $Helpers_indent$4.$$p = null;;
          return $send(self.$compiler(), 'indent', [], block.$to_proc());
        }, $Helpers_indent$4.$$arity = 0);
        
        Opal.def(self, '$current_indent', $Helpers_current_indent$5 = function $$current_indent() {
          var self = this;

          return self.$compiler().$parser_indent()
        }, $Helpers_current_indent$5.$$arity = 0);
        
        Opal.def(self, '$line', $Helpers_line$6 = function $$line($a) {
          var $post_args, strs, self = this;

          
          
          $post_args = Opal.slice.call(arguments, 0, arguments.length);
          
          strs = $post_args;;
          self.$push("" + "\n" + (self.$current_indent()));
          return $send(self, 'push', Opal.to_a(strs));
        }, $Helpers_line$6.$$arity = -1);
        
        Opal.def(self, '$empty_line', $Helpers_empty_line$7 = function $$empty_line() {
          var self = this;

          return self.$push("\n")
        }, $Helpers_empty_line$7.$$arity = 0);
        
        Opal.def(self, '$js_truthy', $Helpers_js_truthy$8 = function $$js_truthy(sexp) {
          var self = this, optimize = nil;

          
          if ($truthy((optimize = self.$js_truthy_optimize(sexp)))) {
            return optimize};
          self.$helper("truthy");
          return [self.$fragment("$truthy("), self.$expr(sexp), self.$fragment(")")];
        }, $Helpers_js_truthy$8.$$arity = 1);
        
        Opal.def(self, '$js_falsy', $Helpers_js_falsy$9 = function $$js_falsy(sexp) {
          var self = this, mid = nil;

          
          if (sexp.$type()['$==']("send")) {
            
            mid = sexp.$children()['$[]'](1);
            if (mid['$==']("block_given?")) {
              
              self.$scope()['$uses_block!']();
              return "" + (self.$scope().$block_name()) + " === nil";};};
          self.$helper("falsy");
          return [self.$fragment("$falsy("), self.$expr(sexp), self.$fragment(")")];
        }, $Helpers_js_falsy$9.$$arity = 1);
        
        Opal.def(self, '$js_truthy_optimize', $Helpers_js_truthy_optimize$10 = function $$js_truthy_optimize(sexp) {
          var $a, $b, self = this, mid = nil, receiver_handler_class = nil, receiver = nil, allow_optimization_on_type = nil;

          if (sexp.$type()['$==']("send")) {
            
            mid = sexp.$children()['$[]'](1);
            receiver_handler_class = ($truthy($a = (receiver = sexp.$children()['$[]'](0))) ? self.$compiler().$handlers()['$[]'](receiver.$type()) : $a);
            allow_optimization_on_type = ($truthy($a = ($truthy($b = $$$($$($nesting, 'Compiler'), 'COMPARE')['$include?'](mid.$to_s())) ? receiver_handler_class : $b)) ? receiver_handler_class['$truthy_optimize?']() : $a);
            if ($truthy(($truthy($a = ($truthy($b = allow_optimization_on_type) ? $b : mid['$==']("block_given?"))) ? $a : mid['$==']("==")))) {
              return self.$expr(sexp)
            } else {
              return nil
            };
          } else {
            return nil
          }
        }, $Helpers_js_truthy_optimize$10.$$arity = 1);
        
        Opal.def(self, '$conditional_send', $Helpers_conditional_send$11 = function $$conditional_send(recvr) {
          var $iter = $Helpers_conditional_send$11.$$p, $yield = $iter || nil, self = this, receiver_temp = nil;

          if ($iter) $Helpers_conditional_send$11.$$p = null;
          
          receiver_temp = self.$scope().$new_temp();
          self.$push("" + (receiver_temp) + " = ", recvr);
          self.$push("" + ", (" + (receiver_temp) + " === nil || " + (receiver_temp) + " == null) ? nil : ");
          Opal.yield1($yield, receiver_temp);
          return self.$wrap("(", ")");
        }, $Helpers_conditional_send$11.$$arity = 1);
      })($nesting[0], $nesting)
    })($nesting[0], $nesting)
  })($nesting[0], $nesting);
};

/* Generated by Opal 1.0.0 */
Opal.modules["opal/nodes/base"] = function(Opal) {
  function $rb_minus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs - rhs : lhs['$-'](rhs);
  }
  function $rb_plus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs + rhs : lhs['$+'](rhs);
  }
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.$$$, $$ = Opal.$$, $module = Opal.module, $klass = Opal.klass, $truthy = Opal.truthy, $hash2 = Opal.hash2, $send = Opal.send;

  Opal.add_stubs(['$require', '$include', '$each', '$[]=', '$handlers', '$-', '$each_with_index', '$define_method', '$[]', '$children', '$attr_reader', '$type', '$compile', '$raise', '$is_a?', '$fragment', '$<<', '$reverse_each', '$unshift', '$push', '$new', '$scope', '$error', '$s', '$==', '$process', '$expr', '$add_scope_local', '$to_sym', '$add_scope_ivar', '$add_scope_gvar', '$add_scope_temp', '$helper', '$with_temp', '$to_proc', '$in_while?', '$instance_variable_get', '$has_rescue_else?', '$in_ensure', '$in_ensure?', '$!', '$class_scope?', '$sclass?', '$+', '$parent', '$class_variable_owner_nesting_level', '$comments', '$compiler', '$loc']);
  
  self.$require("opal/nodes/helpers");
  return (function($base, $parent_nesting) {
    var self = $module($base, 'Opal');

    var $nesting = [self].concat($parent_nesting);

    (function($base, $parent_nesting) {
      var self = $module($base, 'Nodes');

      var $nesting = [self].concat($parent_nesting);

      (function($base, $super, $parent_nesting) {
        var self = $klass($base, $super, 'Base');

        var $nesting = [self].concat($parent_nesting), $Base_handlers$1, $Base_handle$2, $Base_children$4, $Base_truthy_optimize$ques$7, $Base_initialize$8, $Base_children$9, $Base_compile_to_fragments$10, $Base_compile$11, $Base_push$12, $Base_unshift$14, $Base_wrap$16, $Base_fragment$17, $Base_error$18, $Base_scope$19, $Base_s$20, $Base_expr$ques$21, $Base_recv$ques$22, $Base_stmt$ques$23, $Base_process$24, $Base_expr$25, $Base_recv$26, $Base_stmt$27, $Base_expr_or_nil$28, $Base_add_local$29, $Base_add_ivar$30, $Base_add_gvar$31, $Base_add_temp$32, $Base_helper$33, $Base_with_temp$34, $Base_in_while$ques$35, $Base_while_loop$36, $Base_has_rescue_else$ques$37, $Base_in_ensure$38, $Base_in_ensure$ques$39, $Base_class_variable_owner_nesting_level$40, $Base_class_variable_owner$41, $Base_comments$42;

        self.$$prototype.sexp = self.$$prototype.fragments = self.$$prototype.compiler = self.$$prototype.level = nil;
        
        self.$include($$($nesting, 'Helpers'));
        Opal.defs(self, '$handlers', $Base_handlers$1 = function $$handlers() {
          var $a, self = this;
          if (self.handlers == null) self.handlers = nil;

          return (self.handlers = ($truthy($a = self.handlers) ? $a : $hash2([], {})))
        }, $Base_handlers$1.$$arity = 0);
        Opal.defs(self, '$handle', $Base_handle$2 = function $$handle($a) {
          var $post_args, types, $$3, self = this;

          
          
          $post_args = Opal.slice.call(arguments, 0, arguments.length);
          
          types = $post_args;;
          return $send(types, 'each', [], ($$3 = function(type){var self = $$3.$$s == null ? this : $$3.$$s, $writer = nil;

          
            
            if (type == null) {
              type = nil;
            };
            $writer = [type, self];
            $send($$($nesting, 'Base').$handlers(), '[]=', Opal.to_a($writer));
            return $writer[$rb_minus($writer["length"], 1)];}, $$3.$$s = self, $$3.$$arity = 1, $$3));
        }, $Base_handle$2.$$arity = -1);
        Opal.defs(self, '$children', $Base_children$4 = function $$children($a) {
          var $post_args, names, $$5, self = this;

          
          
          $post_args = Opal.slice.call(arguments, 0, arguments.length);
          
          names = $post_args;;
          return $send(names, 'each_with_index', [], ($$5 = function(name, idx){var self = $$5.$$s == null ? this : $$5.$$s, $$6;

          
            
            if (name == null) {
              name = nil;
            };
            
            if (idx == null) {
              idx = nil;
            };
            return $send(self, 'define_method', [name], ($$6 = function(){var self = $$6.$$s == null ? this : $$6.$$s;
              if (self.sexp == null) self.sexp = nil;

            return self.sexp.$children()['$[]'](idx)}, $$6.$$s = self, $$6.$$arity = 0, $$6));}, $$5.$$s = self, $$5.$$arity = 2, $$5));
        }, $Base_children$4.$$arity = -1);
        Opal.defs(self, '$truthy_optimize?', $Base_truthy_optimize$ques$7 = function() {
          var self = this;

          return false
        }, $Base_truthy_optimize$ques$7.$$arity = 0);
        self.$attr_reader("compiler", "type");
        
        Opal.def(self, '$initialize', $Base_initialize$8 = function $$initialize(sexp, level, compiler) {
          var self = this;

          
          self.sexp = sexp;
          self.type = sexp.$type();
          self.level = level;
          return (self.compiler = compiler);
        }, $Base_initialize$8.$$arity = 3);
        
        Opal.def(self, '$children', $Base_children$9 = function $$children() {
          var self = this;

          return self.sexp.$children()
        }, $Base_children$9.$$arity = 0);
        
        Opal.def(self, '$compile_to_fragments', $Base_compile_to_fragments$10 = function $$compile_to_fragments() {
          var $a, self = this;

          
          if ($truthy((($a = self['fragments'], $a != null && $a !== nil) ? 'instance-variable' : nil))) {
            return self.fragments};
          self.fragments = [];
          self.$compile();
          return self.fragments;
        }, $Base_compile_to_fragments$10.$$arity = 0);
        
        Opal.def(self, '$compile', $Base_compile$11 = function $$compile() {
          var self = this;

          return self.$raise("Not Implemented")
        }, $Base_compile$11.$$arity = 0);
        
        Opal.def(self, '$push', $Base_push$12 = function $$push($a) {
          var $post_args, strs, $$13, self = this;

          
          
          $post_args = Opal.slice.call(arguments, 0, arguments.length);
          
          strs = $post_args;;
          return $send(strs, 'each', [], ($$13 = function(str){var self = $$13.$$s == null ? this : $$13.$$s;
            if (self.fragments == null) self.fragments = nil;

          
            
            if (str == null) {
              str = nil;
            };
            if ($truthy(str['$is_a?']($$($nesting, 'String')))) {
              str = self.$fragment(str)};
            return self.fragments['$<<'](str);}, $$13.$$s = self, $$13.$$arity = 1, $$13));
        }, $Base_push$12.$$arity = -1);
        
        Opal.def(self, '$unshift', $Base_unshift$14 = function $$unshift($a) {
          var $post_args, strs, $$15, self = this;

          
          
          $post_args = Opal.slice.call(arguments, 0, arguments.length);
          
          strs = $post_args;;
          return $send(strs, 'reverse_each', [], ($$15 = function(str){var self = $$15.$$s == null ? this : $$15.$$s;
            if (self.fragments == null) self.fragments = nil;

          
            
            if (str == null) {
              str = nil;
            };
            if ($truthy(str['$is_a?']($$($nesting, 'String')))) {
              str = self.$fragment(str)};
            return self.fragments.$unshift(str);}, $$15.$$s = self, $$15.$$arity = 1, $$15));
        }, $Base_unshift$14.$$arity = -1);
        
        Opal.def(self, '$wrap', $Base_wrap$16 = function $$wrap(pre, post) {
          var self = this;

          
          self.$unshift(pre);
          return self.$push(post);
        }, $Base_wrap$16.$$arity = 2);
        
        Opal.def(self, '$fragment', $Base_fragment$17 = function $$fragment(str) {
          var self = this;

          return $$$($$($nesting, 'Opal'), 'Fragment').$new(str, self.$scope(), self.sexp)
        }, $Base_fragment$17.$$arity = 1);
        
        Opal.def(self, '$error', $Base_error$18 = function $$error(msg) {
          var self = this;

          return self.compiler.$error(msg)
        }, $Base_error$18.$$arity = 1);
        
        Opal.def(self, '$scope', $Base_scope$19 = function $$scope() {
          var self = this;

          return self.compiler.$scope()
        }, $Base_scope$19.$$arity = 0);
        
        Opal.def(self, '$s', $Base_s$20 = function $$s($a) {
          var $post_args, args, self = this;

          
          
          $post_args = Opal.slice.call(arguments, 0, arguments.length);
          
          args = $post_args;;
          return $send(self.compiler, 's', Opal.to_a(args));
        }, $Base_s$20.$$arity = -1);
        
        Opal.def(self, '$expr?', $Base_expr$ques$21 = function() {
          var self = this;

          return self.level['$==']("expr")
        }, $Base_expr$ques$21.$$arity = 0);
        
        Opal.def(self, '$recv?', $Base_recv$ques$22 = function() {
          var self = this;

          return self.level['$==']("recv")
        }, $Base_recv$ques$22.$$arity = 0);
        
        Opal.def(self, '$stmt?', $Base_stmt$ques$23 = function() {
          var self = this;

          return self.level['$==']("stmt")
        }, $Base_stmt$ques$23.$$arity = 0);
        
        Opal.def(self, '$process', $Base_process$24 = function $$process(sexp, level) {
          var self = this;

          
          
          if (level == null) {
            level = "expr";
          };
          return self.compiler.$process(sexp, level);
        }, $Base_process$24.$$arity = -2);
        
        Opal.def(self, '$expr', $Base_expr$25 = function $$expr(sexp) {
          var self = this;

          return self.compiler.$process(sexp, "expr")
        }, $Base_expr$25.$$arity = 1);
        
        Opal.def(self, '$recv', $Base_recv$26 = function $$recv(sexp) {
          var self = this;

          return self.compiler.$process(sexp, "recv")
        }, $Base_recv$26.$$arity = 1);
        
        Opal.def(self, '$stmt', $Base_stmt$27 = function $$stmt(sexp) {
          var self = this;

          return self.compiler.$process(sexp, "stmt")
        }, $Base_stmt$27.$$arity = 1);
        
        Opal.def(self, '$expr_or_nil', $Base_expr_or_nil$28 = function $$expr_or_nil(sexp) {
          var self = this;

          if ($truthy(sexp)) {
            return self.$expr(sexp)
          } else {
            return "nil"
          }
        }, $Base_expr_or_nil$28.$$arity = 1);
        
        Opal.def(self, '$add_local', $Base_add_local$29 = function $$add_local(name) {
          var self = this;

          return self.$scope().$add_scope_local(name.$to_sym())
        }, $Base_add_local$29.$$arity = 1);
        
        Opal.def(self, '$add_ivar', $Base_add_ivar$30 = function $$add_ivar(name) {
          var self = this;

          return self.$scope().$add_scope_ivar(name)
        }, $Base_add_ivar$30.$$arity = 1);
        
        Opal.def(self, '$add_gvar', $Base_add_gvar$31 = function $$add_gvar(name) {
          var self = this;

          return self.$scope().$add_scope_gvar(name)
        }, $Base_add_gvar$31.$$arity = 1);
        
        Opal.def(self, '$add_temp', $Base_add_temp$32 = function $$add_temp(temp) {
          var self = this;

          return self.$scope().$add_scope_temp(temp)
        }, $Base_add_temp$32.$$arity = 1);
        
        Opal.def(self, '$helper', $Base_helper$33 = function $$helper(name) {
          var self = this;

          return self.compiler.$helper(name)
        }, $Base_helper$33.$$arity = 1);
        
        Opal.def(self, '$with_temp', $Base_with_temp$34 = function $$with_temp() {
          var $iter = $Base_with_temp$34.$$p, block = $iter || nil, self = this;

          if ($iter) $Base_with_temp$34.$$p = null;
          
          
          if ($iter) $Base_with_temp$34.$$p = null;;
          return $send(self.compiler, 'with_temp', [], block.$to_proc());
        }, $Base_with_temp$34.$$arity = 0);
        
        Opal.def(self, '$in_while?', $Base_in_while$ques$35 = function() {
          var self = this;

          return self.compiler['$in_while?']()
        }, $Base_in_while$ques$35.$$arity = 0);
        
        Opal.def(self, '$while_loop', $Base_while_loop$36 = function $$while_loop() {
          var self = this;

          return self.compiler.$instance_variable_get("@while_loop")
        }, $Base_while_loop$36.$$arity = 0);
        
        Opal.def(self, '$has_rescue_else?', $Base_has_rescue_else$ques$37 = function() {
          var self = this;

          return self.$scope()['$has_rescue_else?']()
        }, $Base_has_rescue_else$ques$37.$$arity = 0);
        
        Opal.def(self, '$in_ensure', $Base_in_ensure$38 = function $$in_ensure() {
          var $iter = $Base_in_ensure$38.$$p, block = $iter || nil, self = this;

          if ($iter) $Base_in_ensure$38.$$p = null;
          
          
          if ($iter) $Base_in_ensure$38.$$p = null;;
          return $send(self.$scope(), 'in_ensure', [], block.$to_proc());
        }, $Base_in_ensure$38.$$arity = 0);
        
        Opal.def(self, '$in_ensure?', $Base_in_ensure$ques$39 = function() {
          var self = this;

          return self.$scope()['$in_ensure?']()
        }, $Base_in_ensure$ques$39.$$arity = 0);
        
        Opal.def(self, '$class_variable_owner_nesting_level', $Base_class_variable_owner_nesting_level$40 = function $$class_variable_owner_nesting_level() {
          var $a, $b, self = this, cvar_scope = nil, nesting_level = nil;

          
          cvar_scope = self.$scope();
          nesting_level = 0;
          while ($truthy(($truthy($b = cvar_scope) ? cvar_scope['$class_scope?']()['$!']() : $b))) {
            
            if ($truthy(cvar_scope['$sclass?']())) {
              nesting_level = $rb_plus(nesting_level, 1)};
            cvar_scope = cvar_scope.$parent();
          };
          return nesting_level;
        }, $Base_class_variable_owner_nesting_level$40.$$arity = 0);
        
        Opal.def(self, '$class_variable_owner', $Base_class_variable_owner$41 = function $$class_variable_owner() {
          var self = this;

          if ($truthy(self.$scope())) {
            return "" + "$nesting[" + (self.$class_variable_owner_nesting_level()) + "]"
          } else {
            return "Opal.Object"
          }
        }, $Base_class_variable_owner$41.$$arity = 0);
        return (Opal.def(self, '$comments', $Base_comments$42 = function $$comments() {
          var self = this;

          return self.$compiler().$comments()['$[]'](self.sexp.$loc())
        }, $Base_comments$42.$$arity = 0), nil) && 'comments';
      })($nesting[0], null, $nesting)
    })($nesting[0], $nesting)
  })($nesting[0], $nesting);
};

/* Generated by Opal 1.0.0 */
Opal.modules["opal/nodes/literal"] = function(Opal) {
  function $rb_plus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs + rhs : lhs['$+'](rhs);
  }
  function $rb_le(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs <= rhs : lhs['$<='](rhs);
  }
  function $rb_minus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs - rhs : lhs['$-'](rhs);
  }
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.$$$, $$ = Opal.$$, $module = Opal.module, $klass = Opal.klass, $truthy = Opal.truthy, $hash2 = Opal.hash2, $send = Opal.send, $lambda = Opal.lambda, $send2 = Opal.send2, $slice = Opal.slice;

  Opal.add_stubs(['$require', '$handle', '$push', '$to_s', '$type', '$children', '$value', '$recv?', '$wrap', '$freeze', '$join', '$keys', '$gsub', '$even?', '$length', '$last_match', '$+', '$chop', '$[]', '$inspect', '$to_i', '$to_utf16', '$translate_escape_chars', '$!=', '$upcase', '$<=', '$call', '$-', '$>>', '$&', '$attr_accessor', '$extract_flags_and_value', '$select!', '$flags', '$=~', '$warning', '$compiler', '$==', '$compile_static_regexp', '$compile_dynamic_regexp', '$each_with_index', '$zero?', '$expr', '$any?', '$===', '$new', '$map', '$to_proc', '$flags=', '$s', '$value=', '$include?', '$is_a?', '$updated', '$delete', '$source', '$expression', '$loc', '$regexp', '$each', '$compile_inline?', '$helper', '$compile_inline', '$compile_range_initialize', '$start', '$finish', '$raise', '$numerator', '$denominator', '$real', '$imag']);
  
  self.$require("opal/nodes/base");
  return (function($base, $parent_nesting) {
    var self = $module($base, 'Opal');

    var $nesting = [self].concat($parent_nesting);

    (function($base, $parent_nesting) {
      var self = $module($base, 'Nodes');

      var $nesting = [self].concat($parent_nesting);

      
      (function($base, $super, $parent_nesting) {
        var self = $klass($base, $super, 'ValueNode');

        var $nesting = [self].concat($parent_nesting), $ValueNode_compile$1, $ValueNode_truthy_optimize$ques$2;

        
        self.$handle("true", "false", "self", "nil");
        
        Opal.def(self, '$compile', $ValueNode_compile$1 = function $$compile() {
          var self = this;

          return self.$push(self.$type().$to_s())
        }, $ValueNode_compile$1.$$arity = 0);
        return (Opal.defs(self, '$truthy_optimize?', $ValueNode_truthy_optimize$ques$2 = function() {
          var self = this;

          return true
        }, $ValueNode_truthy_optimize$ques$2.$$arity = 0), nil) && 'truthy_optimize?';
      })($nesting[0], $$($nesting, 'Base'), $nesting);
      (function($base, $super, $parent_nesting) {
        var self = $klass($base, $super, 'NumericNode');

        var $nesting = [self].concat($parent_nesting), $NumericNode_compile$3, $NumericNode_truthy_optimize$ques$4;

        
        self.$handle("int", "float");
        self.$children("value");
        
        Opal.def(self, '$compile', $NumericNode_compile$3 = function $$compile() {
          var self = this;

          
          self.$push(self.$value().$to_s());
          if ($truthy(self['$recv?']())) {
            return self.$wrap("(", ")")
          } else {
            return nil
          };
        }, $NumericNode_compile$3.$$arity = 0);
        return (Opal.defs(self, '$truthy_optimize?', $NumericNode_truthy_optimize$ques$4 = function() {
          var self = this;

          return true
        }, $NumericNode_truthy_optimize$ques$4.$$arity = 0), nil) && 'truthy_optimize?';
      })($nesting[0], $$($nesting, 'Base'), $nesting);
      (function($base, $super, $parent_nesting) {
        var self = $klass($base, $super, 'StringNode');

        var $nesting = [self].concat($parent_nesting), $StringNode_translate_escape_chars$5, $StringNode_compile$7, $StringNode_to_utf16$9;

        
        self.$handle("str");
        self.$children("value");
        Opal.const_set($nesting[0], 'ESCAPE_CHARS', $hash2(["a", "e"], {"a": "\\u0007", "e": "\\u001b"}).$freeze());
        Opal.const_set($nesting[0], 'ESCAPE_REGEX', Opal.regexp(["(\\\\+)([", $$($nesting, 'ESCAPE_CHARS').$keys().$join(""), "])"]).$freeze());
        
        Opal.def(self, '$translate_escape_chars', $StringNode_translate_escape_chars$5 = function $$translate_escape_chars(inspect_string) {
          var $$6, self = this;

          return $send(inspect_string, 'gsub', [$$($nesting, 'ESCAPE_REGEX')], ($$6 = function(original){var self = $$6.$$s == null ? this : $$6.$$s;

          
            
            if (original == null) {
              original = nil;
            };
            if ($truthy($$($nesting, 'Regexp').$last_match(1).$length()['$even?']())) {
              return original
            } else {
              return $rb_plus($$($nesting, 'Regexp').$last_match(1).$chop(), $$($nesting, 'ESCAPE_CHARS')['$[]']($$($nesting, 'Regexp').$last_match(2)))
            };}, $$6.$$s = self, $$6.$$arity = 1, $$6))
        }, $StringNode_translate_escape_chars$5.$$arity = 1);
        
        Opal.def(self, '$compile', $StringNode_compile$7 = function $$compile() {
          var $$8, self = this, string_value = nil, sanitized_value = nil;

          
          string_value = self.$value();
          sanitized_value = $send(string_value.$inspect(), 'gsub', [/\\u\{([0-9a-f]+)\}/], ($$8 = function(){var self = $$8.$$s == null ? this : $$8.$$s, code_point = nil;

          
            code_point = $$($nesting, 'Regexp').$last_match(1).$to_i(16);
            return self.$to_utf16(code_point);}, $$8.$$s = self, $$8.$$arity = 0, $$8));
          self.$push(self.$translate_escape_chars(sanitized_value));
          if ($truthy($$($nesting, 'RUBY_ENGINE')['$!=']("opal"))) {
            return nil
          } else {
            return nil
          };
        }, $StringNode_compile$7.$$arity = 0);
        return (Opal.def(self, '$to_utf16', $StringNode_to_utf16$9 = function $$to_utf16(code_point) {
          var $$10, self = this, ten_bits = nil, u = nil, lead_surrogate = nil, tail_surrogate = nil;

          
          ten_bits = 1023;
          u = $lambda(($$10 = function(code_unit){var self = $$10.$$s == null ? this : $$10.$$s;

          
            
            if (code_unit == null) {
              code_unit = nil;
            };
            return $rb_plus("\\u", code_unit.$to_s(16).$upcase());}, $$10.$$s = self, $$10.$$arity = 1, $$10));
          if ($truthy($rb_le(code_point, 65535))) {
            return u.$call(code_point)};
          code_point = $rb_minus(code_point, 65536);
          lead_surrogate = $rb_plus(55296, code_point['$>>'](10));
          tail_surrogate = $rb_plus(56320, code_point['$&'](ten_bits));
          return $rb_plus(u.$call(lead_surrogate), u.$call(tail_surrogate));
        }, $StringNode_to_utf16$9.$$arity = 1), nil) && 'to_utf16';
      })($nesting[0], $$($nesting, 'Base'), $nesting);
      (function($base, $super, $parent_nesting) {
        var self = $klass($base, $super, 'SymbolNode');

        var $nesting = [self].concat($parent_nesting), $SymbolNode_compile$11;

        
        self.$handle("sym");
        self.$children("value");
        return (Opal.def(self, '$compile', $SymbolNode_compile$11 = function $$compile() {
          var self = this;

          return self.$push(self.$value().$to_s().$inspect())
        }, $SymbolNode_compile$11.$$arity = 0), nil) && 'compile';
      })($nesting[0], $$($nesting, 'Base'), $nesting);
      (function($base, $super, $parent_nesting) {
        var self = $klass($base, $super, 'RegexpNode');

        var $nesting = [self].concat($parent_nesting), $RegexpNode_initialize$12, $RegexpNode_compile$13, $RegexpNode_compile_dynamic_regexp$15, $RegexpNode_compile_static_regexp$17, $RegexpNode_extract_flags_and_value$18, $RegexpNode_raw_value$20;

        self.$$prototype.sexp = nil;
        
        self.$handle("regexp");
        self.$attr_accessor("value", "flags");
        Opal.const_set($nesting[0], 'SUPPORTED_FLAGS', /[gimuy]/.$freeze());
        
        Opal.def(self, '$initialize', $RegexpNode_initialize$12 = function $$initialize($a) {
          var $post_args, $iter = $RegexpNode_initialize$12.$$p, $yield = $iter || nil, self = this, $zuper = nil, $zuper_i = nil, $zuper_ii = nil;

          if ($iter) $RegexpNode_initialize$12.$$p = null;
          // Prepare super implicit arguments
          for($zuper_i = 0, $zuper_ii = arguments.length, $zuper = new Array($zuper_ii); $zuper_i < $zuper_ii; $zuper_i++) {
            $zuper[$zuper_i] = arguments[$zuper_i];
          }
          
          
          $post_args = Opal.slice.call(arguments, 0, arguments.length);
          ;
          $send2(self, Opal.find_super_dispatcher(self, 'initialize', $RegexpNode_initialize$12, false, true), 'initialize', $zuper, $iter);
          return self.$extract_flags_and_value();
        }, $RegexpNode_initialize$12.$$arity = -1);
        
        Opal.def(self, '$compile', $RegexpNode_compile$13 = function $$compile() {
          var $$14, self = this;

          
          $send(self.$flags(), 'select!', [], ($$14 = function(flag){var self = $$14.$$s == null ? this : $$14.$$s;

          
            
            if (flag == null) {
              flag = nil;
            };
            if ($truthy($$($nesting, 'SUPPORTED_FLAGS')['$=~'](flag))) {
              return true
            } else {
              
              self.$compiler().$warning("" + "Skipping the '" + (flag) + "' Regexp flag as it's not widely supported by JavaScript vendors.");
              return false;
            };}, $$14.$$s = self, $$14.$$arity = 1, $$14));
          if (self.$value().$type()['$==']("str")) {
            return self.$compile_static_regexp()
          } else {
            return self.$compile_dynamic_regexp()
          };
        }, $RegexpNode_compile$13.$$arity = 0);
        
        Opal.def(self, '$compile_dynamic_regexp', $RegexpNode_compile_dynamic_regexp$15 = function $$compile_dynamic_regexp() {
          var $$16, self = this;

          
          self.$push("Opal.regexp([");
          $send(self.$value().$children(), 'each_with_index', [], ($$16 = function(v, index){var self = $$16.$$s == null ? this : $$16.$$s;

          
            
            if (v == null) {
              v = nil;
            };
            
            if (index == null) {
              index = nil;
            };
            if ($truthy(index['$zero?']())) {
            } else {
              self.$push(", ")
            };
            return self.$push(self.$expr(v));}, $$16.$$s = self, $$16.$$arity = 2, $$16));
          self.$push("]");
          if ($truthy(self.$flags()['$any?']())) {
            self.$push("" + ", '" + (self.$flags().$join()) + "'")};
          return self.$push(")");
        }, $RegexpNode_compile_dynamic_regexp$15.$$arity = 0);
        
        Opal.def(self, '$compile_static_regexp', $RegexpNode_compile_static_regexp$17 = function $$compile_static_regexp() {
          var self = this, value = nil, $case = nil, message = nil;

          
          value = self.$value().$children()['$[]'](0);
          return (function() {$case = value;
          if (""['$===']($case)) {return self.$push("/(?:)/")}
          else if (/\?<\w+\>/['$===']($case)) {
          message = "" + "named captures are not supported in javascript: " + (value.$inspect());
          return self.$push("" + "self.$raise(new SyntaxError('" + (message) + "'))");}
          else {return self.$push("" + ($$($nesting, 'Regexp').$new(value).$inspect()) + (self.$flags().$join()))}})();
        }, $RegexpNode_compile_static_regexp$17.$$arity = 0);
        
        Opal.def(self, '$extract_flags_and_value', $RegexpNode_extract_flags_and_value$18 = function $$extract_flags_and_value() {
          var $a, $b, $$19, self = this, values = nil, flags_sexp = nil, $writer = nil, $case = nil, parts = nil;

          
          $a = [].concat(Opal.to_a(self.$children())), $b = $a.length - 1, $b = ($b < 0) ? 0 : $b, (values = $slice.call($a, 0, $b)), (flags_sexp = ($a[$b] == null ? nil : $a[$b])), $a;
          
          $writer = [$send(flags_sexp.$children(), 'map', [], "to_s".$to_proc())];
          $send(self, 'flags=', Opal.to_a($writer));
          $writer[$rb_minus($writer["length"], 1)];;
          
          $writer = [(function() {$case = values.$length();
          if ((0)['$===']($case)) {return self.$s("str", "")}
          else if ((1)['$===']($case)) {return values['$[]'](0)}
          else {return $send(self, 's', ["dstr"].concat(Opal.to_a(values)))}})()];
          $send(self, 'value=', Opal.to_a($writer));
          $writer[$rb_minus($writer["length"], 1)];;
          if ($truthy(self.$flags()['$include?']("x"))) {
            
            parts = $send(self.$value().$children(), 'map', [], ($$19 = function(part){var self = $$19.$$s == null ? this : $$19.$$s, $c, trimmed_value = nil;

            
              
              if (part == null) {
                part = nil;
              };
              if ($truthy(($truthy($c = part['$is_a?']($$$($$$($$$('::', 'Opal'), 'AST'), 'Node'))) ? part.$type()['$==']("str") : $c))) {
                
                trimmed_value = part.$children()['$[]'](0).$gsub(/^\s*\#.*/, "").$gsub(/\s/, "");
                return self.$s("str", trimmed_value);
              } else {
                return part
              };}, $$19.$$s = self, $$19.$$arity = 1, $$19));
            
            $writer = [self.$value().$updated(nil, parts)];
            $send(self, 'value=', Opal.to_a($writer));
            $writer[$rb_minus($writer["length"], 1)];;
            self.$flags().$delete("x");};
          if (self.$value().$type()['$==']("str")) {
            
            $writer = [self.$s("str", self.$value().$children()['$[]'](0).$gsub("\\A", "^").$gsub("\\z", "$"))];
            $send(self, 'value=', Opal.to_a($writer));
            return $writer[$rb_minus($writer["length"], 1)];
          } else {
            return nil
          };
        }, $RegexpNode_extract_flags_and_value$18.$$arity = 0);
        return (Opal.def(self, '$raw_value', $RegexpNode_raw_value$20 = function $$raw_value() {
          var self = this, $writer = nil;

          
          $writer = [self.sexp.$loc().$expression().$source()];
          $send(self, 'value=', Opal.to_a($writer));
          return $writer[$rb_minus($writer["length"], 1)];
        }, $RegexpNode_raw_value$20.$$arity = 0), nil) && 'raw_value';
      })($nesting[0], $$($nesting, 'Base'), $nesting);
      (function($base, $super, $parent_nesting) {
        var self = $klass($base, $super, 'MatchCurrentLineNode');

        var $nesting = [self].concat($parent_nesting), $MatchCurrentLineNode_compile$21;

        
        self.$handle("match_current_line");
        self.$children("regexp");
        return (Opal.def(self, '$compile', $MatchCurrentLineNode_compile$21 = function $$compile() {
          var self = this, gvar_sexp = nil, send_node = nil;

          
          gvar_sexp = self.$s("gvar", "$_");
          send_node = self.$s("send", gvar_sexp, "=~", self.$regexp());
          return self.$push(self.$expr(send_node));
        }, $MatchCurrentLineNode_compile$21.$$arity = 0), nil) && 'compile';
      })($nesting[0], $$($nesting, 'Base'), $nesting);
      (function($base, $super, $parent_nesting) {
        var self = $klass($base, $super, 'DynamicStringNode');

        var $nesting = [self].concat($parent_nesting), $DynamicStringNode_compile$22;

        
        self.$handle("dstr");
        return (Opal.def(self, '$compile', $DynamicStringNode_compile$22 = function $$compile() {
          var $$23, self = this;

          
          self.$push("\"\"");
          return $send(self.$children(), 'each', [], ($$23 = function(part){var self = $$23.$$s == null ? this : $$23.$$s;

          
            
            if (part == null) {
              part = nil;
            };
            self.$push(" + ");
            if (part.$type()['$==']("str")) {
              self.$push(part.$children()['$[]'](0).$inspect())
            } else {
              self.$push("(", self.$expr(part), ")")
            };
            if ($truthy(self['$recv?']())) {
              return self.$wrap("(", ")")
            } else {
              return nil
            };}, $$23.$$s = self, $$23.$$arity = 1, $$23));
        }, $DynamicStringNode_compile$22.$$arity = 0), nil) && 'compile';
      })($nesting[0], $$($nesting, 'Base'), $nesting);
      (function($base, $super, $parent_nesting) {
        var self = $klass($base, $super, 'DynamicSymbolNode');

        var $nesting = [self].concat($parent_nesting);

        return self.$handle("dsym")
      })($nesting[0], $$($nesting, 'DynamicStringNode'), $nesting);
      (function($base, $super, $parent_nesting) {
        var self = $klass($base, $super, 'RangeNode');

        var $nesting = [self].concat($parent_nesting), $RangeNode_compile$24, $RangeNode_compile_inline$ques$25, $RangeNode_compile_inline$26, $RangeNode_compile_range_initialize$27;

        
        self.$children("start", "finish");
        Opal.const_set($nesting[0], 'SIMPLE_CHILDREN_TYPES', ["int", "float", "str", "sym"].$freeze());
        
        Opal.def(self, '$compile', $RangeNode_compile$24 = function $$compile() {
          var self = this;

          if ($truthy(self['$compile_inline?']())) {
            
            self.$helper("range");
            return self.$compile_inline();
          } else {
            return self.$compile_range_initialize()
          }
        }, $RangeNode_compile$24.$$arity = 0);
        
        Opal.def(self, '$compile_inline?', $RangeNode_compile_inline$ques$25 = function() {
          var $a, $b, self = this;

          return ($truthy($a = (($b = self.$start().$type()['$=='](self.$finish().$type())) ? $$($nesting, 'SIMPLE_CHILDREN_TYPES')['$include?'](self.$start().$type()) : self.$start().$type()['$=='](self.$finish().$type()))) ? $$($nesting, 'SIMPLE_CHILDREN_TYPES')['$include?'](self.$finish().$type()) : $a)
        }, $RangeNode_compile_inline$ques$25.$$arity = 0);
        
        Opal.def(self, '$compile_inline', $RangeNode_compile_inline$26 = function $$compile_inline() {
          var self = this;

          return self.$raise($$($nesting, 'NotImplementedError'))
        }, $RangeNode_compile_inline$26.$$arity = 0);
        return (Opal.def(self, '$compile_range_initialize', $RangeNode_compile_range_initialize$27 = function $$compile_range_initialize() {
          var self = this;

          return self.$raise($$($nesting, 'NotImplementedError'))
        }, $RangeNode_compile_range_initialize$27.$$arity = 0), nil) && 'compile_range_initialize';
      })($nesting[0], $$($nesting, 'Base'), $nesting);
      (function($base, $super, $parent_nesting) {
        var self = $klass($base, $super, 'InclusiveRangeNode');

        var $nesting = [self].concat($parent_nesting), $InclusiveRangeNode_compile_inline$28, $InclusiveRangeNode_compile_range_initialize$29;

        
        self.$handle("irange");
        
        Opal.def(self, '$compile_inline', $InclusiveRangeNode_compile_inline$28 = function $$compile_inline() {
          var self = this;

          return self.$push("$range(", self.$expr(self.$start()), ", ", self.$expr(self.$finish()), ", false)")
        }, $InclusiveRangeNode_compile_inline$28.$$arity = 0);
        return (Opal.def(self, '$compile_range_initialize', $InclusiveRangeNode_compile_range_initialize$29 = function $$compile_range_initialize() {
          var self = this;

          return self.$push("Opal.Range.$new(", self.$expr(self.$start()), ", ", self.$expr(self.$finish()), ", false)")
        }, $InclusiveRangeNode_compile_range_initialize$29.$$arity = 0), nil) && 'compile_range_initialize';
      })($nesting[0], $$($nesting, 'RangeNode'), $nesting);
      (function($base, $super, $parent_nesting) {
        var self = $klass($base, $super, 'ExclusiveRangeNode');

        var $nesting = [self].concat($parent_nesting), $ExclusiveRangeNode_compile_inline$30, $ExclusiveRangeNode_compile_range_initialize$31;

        
        self.$handle("erange");
        
        Opal.def(self, '$compile_inline', $ExclusiveRangeNode_compile_inline$30 = function $$compile_inline() {
          var self = this;

          return self.$push("$range(", self.$expr(self.$start()), ", ", self.$expr(self.$finish()), ", true)")
        }, $ExclusiveRangeNode_compile_inline$30.$$arity = 0);
        return (Opal.def(self, '$compile_range_initialize', $ExclusiveRangeNode_compile_range_initialize$31 = function $$compile_range_initialize() {
          var self = this;

          return self.$push("Opal.Range.$new(", self.$expr(self.$start()), ",", self.$expr(self.$finish()), ", true)")
        }, $ExclusiveRangeNode_compile_range_initialize$31.$$arity = 0), nil) && 'compile_range_initialize';
      })($nesting[0], $$($nesting, 'RangeNode'), $nesting);
      (function($base, $super, $parent_nesting) {
        var self = $klass($base, $super, 'RationalNode');

        var $nesting = [self].concat($parent_nesting), $RationalNode_compile$32;

        
        self.$handle("rational");
        self.$children("value");
        return (Opal.def(self, '$compile', $RationalNode_compile$32 = function $$compile() {
          var self = this;

          return self.$push("" + "Opal.Rational.$new(" + (self.$value().$numerator()) + ", " + (self.$value().$denominator()) + ")")
        }, $RationalNode_compile$32.$$arity = 0), nil) && 'compile';
      })($nesting[0], $$($nesting, 'Base'), $nesting);
      (function($base, $super, $parent_nesting) {
        var self = $klass($base, $super, 'ComplexNode');

        var $nesting = [self].concat($parent_nesting), $ComplexNode_compile$33;

        
        self.$handle("complex");
        self.$children("value");
        return (Opal.def(self, '$compile', $ComplexNode_compile$33 = function $$compile() {
          var self = this;

          return self.$push("" + "Opal.Complex.$new(" + (self.$value().$real()) + ", " + (self.$value().$imag()) + ")")
        }, $ComplexNode_compile$33.$$arity = 0), nil) && 'compile';
      })($nesting[0], $$($nesting, 'Base'), $nesting);
    })($nesting[0], $nesting)
  })($nesting[0], $nesting);
};

/* Generated by Opal 1.0.0 */
Opal.modules["opal/nodes/variables"] = function(Opal) {
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.$$$, $$ = Opal.$$, $module = Opal.module, $klass = Opal.klass, $truthy = Opal.truthy, $send = Opal.send, $range = Opal.range, $send2 = Opal.send2;

  Opal.add_stubs(['$require', '$handle', '$children', '$irb?', '$compiler', '$top?', '$scope', '$using_irb?', '$push', '$to_s', '$var_name', '$with_temp', '$property', '$wrap', '$add_local', '$expr', '$value', '$recv?', '$expr?', '$[]', '$name', '$add_ivar', '$helper', '$add_gvar', '$===', '$handle_global_match', '$handle_post_match', '$handle_pre_match', '$raise', '$index', '$class_variable_owner']);
  
  self.$require("opal/nodes/base");
  return (function($base, $parent_nesting) {
    var self = $module($base, 'Opal');

    var $nesting = [self].concat($parent_nesting);

    (function($base, $parent_nesting) {
      var self = $module($base, 'Nodes');

      var $nesting = [self].concat($parent_nesting);

      
      (function($base, $super, $parent_nesting) {
        var self = $klass($base, $super, 'LocalVariableNode');

        var $nesting = [self].concat($parent_nesting), $LocalVariableNode_using_irb$ques$1, $LocalVariableNode_compile$2;

        
        self.$handle("lvar");
        self.$children("var_name");
        
        Opal.def(self, '$using_irb?', $LocalVariableNode_using_irb$ques$1 = function() {
          var $a, self = this;

          return ($truthy($a = self.$compiler()['$irb?']()) ? self.$scope()['$top?']() : $a)
        }, $LocalVariableNode_using_irb$ques$1.$$arity = 0);
        return (Opal.def(self, '$compile', $LocalVariableNode_compile$2 = function $$compile() {
          var $$3, self = this;

          
          if ($truthy(self['$using_irb?']())) {
          } else {
            return self.$push(self.$var_name().$to_s())
          };
          return $send(self, 'with_temp', [], ($$3 = function(tmp){var self = $$3.$$s == null ? this : $$3.$$s;

          
            
            if (tmp == null) {
              tmp = nil;
            };
            self.$push(self.$property(self.$var_name().$to_s()));
            return self.$wrap("" + "((" + (tmp) + " = Opal.irb_vars", "" + ") == null ? nil : " + (tmp) + ")");}, $$3.$$s = self, $$3.$$arity = 1, $$3));
        }, $LocalVariableNode_compile$2.$$arity = 0), nil) && 'compile';
      })($nesting[0], $$($nesting, 'Base'), $nesting);
      (function($base, $super, $parent_nesting) {
        var self = $klass($base, $super, 'LocalAssignNode');

        var $nesting = [self].concat($parent_nesting), $LocalAssignNode_using_irb$ques$4, $LocalAssignNode_compile$5;

        
        self.$handle("lvasgn");
        self.$children("var_name", "value");
        
        Opal.def(self, '$using_irb?', $LocalAssignNode_using_irb$ques$4 = function() {
          var $a, self = this;

          return ($truthy($a = self.$compiler()['$irb?']()) ? self.$scope()['$top?']() : $a)
        }, $LocalAssignNode_using_irb$ques$4.$$arity = 0);
        return (Opal.def(self, '$compile', $LocalAssignNode_compile$5 = function $$compile() {
          var $a, $b, self = this;

          
          if ($truthy(self['$using_irb?']())) {
            self.$push("" + "Opal.irb_vars" + (self.$property(self.$var_name().$to_s())) + " = ")
          } else {
            
            self.$add_local(self.$var_name().$to_s());
            self.$push("" + (self.$var_name()) + " = ");
          };
          self.$push(self.$expr(self.$value()));
          if ($truthy(($truthy($a = ($truthy($b = self['$recv?']()) ? $b : self['$expr?']())) ? self.$value() : $a))) {
            return self.$wrap("(", ")")
          } else {
            return nil
          };
        }, $LocalAssignNode_compile$5.$$arity = 0), nil) && 'compile';
      })($nesting[0], $$($nesting, 'Base'), $nesting);
      (function($base, $super, $parent_nesting) {
        var self = $klass($base, $super, 'LocalDeclareNode');

        var $nesting = [self].concat($parent_nesting), $LocalDeclareNode_compile$6;

        
        self.$handle("lvdeclare");
        self.$children("var_name");
        return (Opal.def(self, '$compile', $LocalDeclareNode_compile$6 = function $$compile() {
          var self = this;

          
          self.$add_local(self.$var_name().$to_s());
          return nil;
        }, $LocalDeclareNode_compile$6.$$arity = 0), nil) && 'compile';
      })($nesting[0], $$($nesting, 'Base'), $nesting);
      (function($base, $super, $parent_nesting) {
        var self = $klass($base, $super, 'InstanceVariableNode');

        var $nesting = [self].concat($parent_nesting), $InstanceVariableNode_var_name$7, $InstanceVariableNode_compile$8;

        
        self.$handle("ivar");
        self.$children("name");
        
        Opal.def(self, '$var_name', $InstanceVariableNode_var_name$7 = function $$var_name() {
          var self = this;

          return self.$name().$to_s()['$[]']($range(1, -1, false))
        }, $InstanceVariableNode_var_name$7.$$arity = 0);
        return (Opal.def(self, '$compile', $InstanceVariableNode_compile$8 = function $$compile() {
          var self = this, name = nil;

          
          name = self.$property(self.$var_name());
          self.$add_ivar(name);
          return self.$push("" + "self" + (name));
        }, $InstanceVariableNode_compile$8.$$arity = 0), nil) && 'compile';
      })($nesting[0], $$($nesting, 'Base'), $nesting);
      (function($base, $super, $parent_nesting) {
        var self = $klass($base, $super, 'InstanceAssignNode');

        var $nesting = [self].concat($parent_nesting), $InstanceAssignNode_var_name$9, $InstanceAssignNode_compile$10;

        
        self.$handle("ivasgn");
        self.$children("name", "value");
        
        Opal.def(self, '$var_name', $InstanceAssignNode_var_name$9 = function $$var_name() {
          var self = this;

          return self.$name().$to_s()['$[]']($range(1, -1, false))
        }, $InstanceAssignNode_var_name$9.$$arity = 0);
        return (Opal.def(self, '$compile', $InstanceAssignNode_compile$10 = function $$compile() {
          var $a, $b, self = this, name = nil;

          
          name = self.$property(self.$var_name());
          self.$push("" + "self" + (name) + " = ");
          self.$push(self.$expr(self.$value()));
          if ($truthy(($truthy($a = ($truthy($b = self['$recv?']()) ? $b : self['$expr?']())) ? self.$value() : $a))) {
            return self.$wrap("(", ")")
          } else {
            return nil
          };
        }, $InstanceAssignNode_compile$10.$$arity = 0), nil) && 'compile';
      })($nesting[0], $$($nesting, 'Base'), $nesting);
      (function($base, $super, $parent_nesting) {
        var self = $klass($base, $super, 'GlobalVariableNode');

        var $nesting = [self].concat($parent_nesting), $GlobalVariableNode_var_name$11, $GlobalVariableNode_compile$12;

        
        self.$handle("gvar");
        self.$children("name");
        
        Opal.def(self, '$var_name', $GlobalVariableNode_var_name$11 = function $$var_name() {
          var self = this;

          return self.$name().$to_s()['$[]']($range(1, -1, false))
        }, $GlobalVariableNode_var_name$11.$$arity = 0);
        return (Opal.def(self, '$compile', $GlobalVariableNode_compile$12 = function $$compile() {
          var self = this, name = nil;

          
          self.$helper("gvars");
          name = self.$property(self.$var_name());
          self.$add_gvar(name);
          return self.$push("" + "$gvars" + (name));
        }, $GlobalVariableNode_compile$12.$$arity = 0), nil) && 'compile';
      })($nesting[0], $$($nesting, 'Base'), $nesting);
      (function($base, $super, $parent_nesting) {
        var self = $klass($base, $super, 'BackRefNode');

        var $nesting = [self].concat($parent_nesting), $BackRefNode_compile$13, $BackRefNode_handle_global_match$14, $BackRefNode_handle_pre_match$16, $BackRefNode_handle_post_match$18;

        
        self.$handle("back_ref");
        
        Opal.def(self, '$compile', $BackRefNode_compile$13 = function $$compile() {
          var $iter = $BackRefNode_compile$13.$$p, $yield = $iter || nil, self = this, $case = nil, $zuper = nil, $zuper_i = nil, $zuper_ii = nil;

          if ($iter) $BackRefNode_compile$13.$$p = null;
          // Prepare super implicit arguments
          for($zuper_i = 0, $zuper_ii = arguments.length, $zuper = new Array($zuper_ii); $zuper_i < $zuper_ii; $zuper_i++) {
            $zuper[$zuper_i] = arguments[$zuper_i];
          }
          
          self.$helper("gvars");
          return (function() {$case = self.$var_name();
          if ("&"['$===']($case)) {return self.$handle_global_match()}
          else if ("'"['$===']($case)) {return self.$handle_post_match()}
          else if ("`"['$===']($case)) {return self.$handle_pre_match()}
          else if ("+"['$===']($case)) {return $send2(self, Opal.find_super_dispatcher(self, 'compile', $BackRefNode_compile$13, false, true), 'compile', $zuper, $iter)}
          else {return self.$raise($$($nesting, 'NotImplementedError'))}})();
        }, $BackRefNode_compile$13.$$arity = 0);
        
        Opal.def(self, '$handle_global_match', $BackRefNode_handle_global_match$14 = function $$handle_global_match() {
          var $$15, self = this;

          return $send(self, 'with_temp', [], ($$15 = function(tmp){var self = $$15.$$s == null ? this : $$15.$$s;

          
            
            if (tmp == null) {
              tmp = nil;
            };
            return self.$push("" + "((" + (tmp) + " = $gvars['~']) === nil ? nil : " + (tmp) + "['$[]'](0))");}, $$15.$$s = self, $$15.$$arity = 1, $$15))
        }, $BackRefNode_handle_global_match$14.$$arity = 0);
        
        Opal.def(self, '$handle_pre_match', $BackRefNode_handle_pre_match$16 = function $$handle_pre_match() {
          var $$17, self = this;

          return $send(self, 'with_temp', [], ($$17 = function(tmp){var self = $$17.$$s == null ? this : $$17.$$s;

          
            
            if (tmp == null) {
              tmp = nil;
            };
            return self.$push("" + "((" + (tmp) + " = $gvars['~']) === nil ? nil : " + (tmp) + ".$pre_match())");}, $$17.$$s = self, $$17.$$arity = 1, $$17))
        }, $BackRefNode_handle_pre_match$16.$$arity = 0);
        return (Opal.def(self, '$handle_post_match', $BackRefNode_handle_post_match$18 = function $$handle_post_match() {
          var $$19, self = this;

          return $send(self, 'with_temp', [], ($$19 = function(tmp){var self = $$19.$$s == null ? this : $$19.$$s;

          
            
            if (tmp == null) {
              tmp = nil;
            };
            return self.$push("" + "((" + (tmp) + " = $gvars['~']) === nil ? nil : " + (tmp) + ".$post_match())");}, $$19.$$s = self, $$19.$$arity = 1, $$19))
        }, $BackRefNode_handle_post_match$18.$$arity = 0), nil) && 'handle_post_match';
      })($nesting[0], $$($nesting, 'GlobalVariableNode'), $nesting);
      (function($base, $super, $parent_nesting) {
        var self = $klass($base, $super, 'GlobalAssignNode');

        var $nesting = [self].concat($parent_nesting), $GlobalAssignNode_var_name$20, $GlobalAssignNode_compile$21;

        
        self.$handle("gvasgn");
        self.$children("name", "value");
        
        Opal.def(self, '$var_name', $GlobalAssignNode_var_name$20 = function $$var_name() {
          var self = this;

          return self.$name().$to_s()['$[]']($range(1, -1, false))
        }, $GlobalAssignNode_var_name$20.$$arity = 0);
        return (Opal.def(self, '$compile', $GlobalAssignNode_compile$21 = function $$compile() {
          var $a, $b, self = this, name = nil;

          
          self.$helper("gvars");
          name = self.$property(self.$var_name());
          self.$push("" + "$gvars" + (name) + " = ");
          self.$push(self.$expr(self.$value()));
          if ($truthy(($truthy($a = ($truthy($b = self['$recv?']()) ? $b : self['$expr?']())) ? self.$value() : $a))) {
            return self.$wrap("(", ")")
          } else {
            return nil
          };
        }, $GlobalAssignNode_compile$21.$$arity = 0), nil) && 'compile';
      })($nesting[0], $$($nesting, 'Base'), $nesting);
      (function($base, $super, $parent_nesting) {
        var self = $klass($base, $super, 'NthrefNode');

        var $nesting = [self].concat($parent_nesting), $NthrefNode_compile$22;

        
        self.$handle("nth_ref");
        self.$children("index");
        return (Opal.def(self, '$compile', $NthrefNode_compile$22 = function $$compile() {
          var $$23, self = this;

          
          self.$helper("gvars");
          return $send(self, 'with_temp', [], ($$23 = function(tmp){var self = $$23.$$s == null ? this : $$23.$$s;

          
            
            if (tmp == null) {
              tmp = nil;
            };
            return self.$push("" + "((" + (tmp) + " = $gvars['~']) === nil ? nil : " + (tmp) + "['$[]'](" + (self.$index()) + "))");}, $$23.$$s = self, $$23.$$arity = 1, $$23));
        }, $NthrefNode_compile$22.$$arity = 0), nil) && 'compile';
      })($nesting[0], $$($nesting, 'Base'), $nesting);
      (function($base, $super, $parent_nesting) {
        var self = $klass($base, $super, 'ClassVariableNode');

        var $nesting = [self].concat($parent_nesting), $ClassVariableNode_compile$24;

        
        self.$handle("cvar");
        self.$children("name");
        return (Opal.def(self, '$compile', $ClassVariableNode_compile$24 = function $$compile() {
          var $$25, self = this;

          return $send(self, 'with_temp', [], ($$25 = function(tmp){var self = $$25.$$s == null ? this : $$25.$$s;

          
            
            if (tmp == null) {
              tmp = nil;
            };
            return self.$push("" + "((" + (tmp) + " = " + (self.$class_variable_owner()) + ".$$cvars['" + (self.$name()) + "']) == null ? nil : " + (tmp) + ")");}, $$25.$$s = self, $$25.$$arity = 1, $$25))
        }, $ClassVariableNode_compile$24.$$arity = 0), nil) && 'compile';
      })($nesting[0], $$($nesting, 'Base'), $nesting);
      (function($base, $super, $parent_nesting) {
        var self = $klass($base, $super, 'ClassVarAssignNode');

        var $nesting = [self].concat($parent_nesting), $ClassVarAssignNode_compile$26;

        
        self.$handle("cvasgn");
        self.$children("name", "value");
        return (Opal.def(self, '$compile', $ClassVarAssignNode_compile$26 = function $$compile() {
          var self = this;

          return self.$push("" + "(Opal.class_variable_set(" + (self.$class_variable_owner()) + ", '" + (self.$name()) + "', ", self.$expr(self.$value()), "))")
        }, $ClassVarAssignNode_compile$26.$$arity = 0), nil) && 'compile';
      })($nesting[0], $$($nesting, 'Base'), $nesting);
    })($nesting[0], $nesting)
  })($nesting[0], $nesting);
};

/* Generated by Opal 1.0.0 */
Opal.modules["opal/nodes/constants"] = function(Opal) {
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.$$$, $$ = Opal.$$, $module = Opal.module, $klass = Opal.klass, $truthy = Opal.truthy;

  Opal.add_stubs(['$require', '$handle', '$children', '$magical_data_const?', '$push', '$const_scope', '$recv', '$name', '$eval?', '$compiler', '$nil?', '$==', '$eof_content', '$base', '$expr', '$value']);
  
  self.$require("opal/nodes/base");
  return (function($base, $parent_nesting) {
    var self = $module($base, 'Opal');

    var $nesting = [self].concat($parent_nesting);

    (function($base, $parent_nesting) {
      var self = $module($base, 'Nodes');

      var $nesting = [self].concat($parent_nesting);

      
      (function($base, $super, $parent_nesting) {
        var self = $klass($base, $super, 'ConstNode');

        var $nesting = [self].concat($parent_nesting), $ConstNode_compile$1, $ConstNode_magical_data_const$ques$2;

        
        self.$handle("const");
        self.$children("const_scope", "name");
        
        Opal.def(self, '$compile', $ConstNode_compile$1 = function $$compile() {
          var self = this;

          if ($truthy(self['$magical_data_const?']())) {
            return self.$push("$__END__")
          } else if ($truthy(self.$const_scope())) {
            return self.$push("$$$(", self.$recv(self.$const_scope()), "" + ", '" + (self.$name()) + "')")
          } else if ($truthy(self.$compiler()['$eval?']())) {
            return self.$push("" + "$$($nesting, '" + (self.$name()) + "')")
          } else {
            return self.$push("" + "$$($nesting, '" + (self.$name()) + "')")
          }
        }, $ConstNode_compile$1.$$arity = 0);
        return (Opal.def(self, '$magical_data_const?', $ConstNode_magical_data_const$ques$2 = function() {
          var $a, $b, self = this;

          return ($truthy($a = ($truthy($b = self.$const_scope()['$nil?']()) ? self.$name()['$==']("DATA") : $b)) ? self.$compiler().$eof_content() : $a)
        }, $ConstNode_magical_data_const$ques$2.$$arity = 0), nil) && 'magical_data_const?';
      })($nesting[0], $$($nesting, 'Base'), $nesting);
      (function($base, $super, $parent_nesting) {
        var self = $klass($base, $super, 'CbaseNode');

        var $nesting = [self].concat($parent_nesting), $CbaseNode_compile$3;

        
        self.$handle("cbase");
        return (Opal.def(self, '$compile', $CbaseNode_compile$3 = function $$compile() {
          var self = this;

          return self.$push("'::'")
        }, $CbaseNode_compile$3.$$arity = 0), nil) && 'compile';
      })($nesting[0], $$($nesting, 'Base'), $nesting);
      (function($base, $super, $parent_nesting) {
        var self = $klass($base, $super, 'ConstAssignNode');

        var $nesting = [self].concat($parent_nesting), $ConstAssignNode_compile$4;

        
        self.$handle("casgn");
        self.$children("base", "name", "value");
        return (Opal.def(self, '$compile', $ConstAssignNode_compile$4 = function $$compile() {
          var self = this;

          if ($truthy(self.$base())) {
            return self.$push("Opal.const_set(", self.$expr(self.$base()), "" + ", '" + (self.$name()) + "', ", self.$expr(self.$value()), ")")
          } else {
            return self.$push("" + "Opal.const_set($nesting[0], '" + (self.$name()) + "', ", self.$expr(self.$value()), ")")
          }
        }, $ConstAssignNode_compile$4.$$arity = 0), nil) && 'compile';
      })($nesting[0], $$($nesting, 'Base'), $nesting);
    })($nesting[0], $nesting)
  })($nesting[0], $nesting);
};

/* Generated by Opal 1.0.0 */
Opal.modules["pathname"] = function(Opal) {
  function $rb_plus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs + rhs : lhs['$+'](rhs);
  }
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.$$$, $$ = Opal.$$, $klass = Opal.klass, $truthy = Opal.truthy, $send = Opal.send, $module = Opal.module;

  Opal.add_stubs(['$require', '$include', '$quote', '$===', '$to_s', '$path', '$respond_to?', '$to_path', '$is_a?', '$nil?', '$raise', '$class', '$==', '$attr_reader', '$!', '$relative?', '$chop_basename', '$basename', '$=~', '$new', '$source', '$[]', '$rindex', '$sub', '$absolute?', '$expand_path', '$plus', '$unshift', '$length', '$!=', '$empty?', '$first', '$shift', '$+', '$join', '$dirname', '$pop', '$reverse_each', '$directory?', '$extname', '$<=>', '$nonzero?', '$proc', '$casecmp', '$cleanpath', '$inspect', '$include?', '$fill', '$map', '$entries']);
  
  self.$require("corelib/comparable");
  (function($base, $super, $parent_nesting) {
    var self = $klass($base, $super, 'Pathname');

    var $nesting = [self].concat($parent_nesting), $Pathname_initialize$1, $Pathname_$eq_eq$2, $Pathname_absolute$ques$3, $Pathname_relative$ques$4, $Pathname_chop_basename$5, $Pathname_root$ques$6, $Pathname_parent$7, $Pathname_sub$8, $Pathname_cleanpath$9, $Pathname_to_path$10, $Pathname_hash$11, $Pathname_expand_path$12, $Pathname_$plus$13, $Pathname_plus$14, $Pathname_join$15, $Pathname_split$17, $Pathname_dirname$18, $Pathname_basename$19, $Pathname_directory$ques$20, $Pathname_extname$21, $Pathname_$lt_eq_gt$22, $Pathname$23, $Pathname$24, $Pathname_relative_path_from$25, $Pathname_entries$26;

    self.$$prototype.path = nil;
    
    self.$include($$($nesting, 'Comparable'));
    Opal.const_set($nesting[0], 'SEPARATOR_PAT', Opal.regexp([$$($nesting, 'Regexp').$quote($$$($$($nesting, 'File'), 'SEPARATOR'))]));
    
    Opal.def(self, '$initialize', $Pathname_initialize$1 = function $$initialize(path) {
      var self = this;

      
      if ($truthy($$($nesting, 'Pathname')['$==='](path))) {
        self.path = path.$path().$to_s()
      } else if ($truthy(path['$respond_to?']("to_path"))) {
        self.path = path.$to_path()
      } else if ($truthy(path['$is_a?']($$($nesting, 'String')))) {
        self.path = path
      } else if ($truthy(path['$nil?']())) {
        self.$raise($$($nesting, 'TypeError'), "no implicit conversion of nil into String")
      } else {
        self.$raise($$($nesting, 'TypeError'), "" + "no implicit conversion of " + (path.$class()) + " into String")
      };
      if (self.path['$==']("\u0000")) {
        return self.$raise($$($nesting, 'ArgumentError'))
      } else {
        return nil
      };
    }, $Pathname_initialize$1.$$arity = 1);
    self.$attr_reader("path");
    
    Opal.def(self, '$==', $Pathname_$eq_eq$2 = function(other) {
      var self = this;

      return other.$path()['$=='](self.path)
    }, $Pathname_$eq_eq$2.$$arity = 1);
    
    Opal.def(self, '$absolute?', $Pathname_absolute$ques$3 = function() {
      var self = this;

      return self['$relative?']()['$!']()
    }, $Pathname_absolute$ques$3.$$arity = 0);
    
    Opal.def(self, '$relative?', $Pathname_relative$ques$4 = function() {
      var $a, $b, $c, self = this, path = nil, r = nil;

      
      path = self.path;
      while ($truthy((r = self.$chop_basename(path)))) {
        $c = r, $b = Opal.to_ary($c), (path = ($b[0] == null ? nil : $b[0])), $c
      };
      return path['$==']("");
    }, $Pathname_relative$ques$4.$$arity = 0);
    
    Opal.def(self, '$chop_basename', $Pathname_chop_basename$5 = function $$chop_basename(path) {
      var self = this, base = nil;

      
      base = $$($nesting, 'File').$basename(path);
      if ($truthy($$($nesting, 'Regexp').$new("" + "^" + ($$$($$($nesting, 'Pathname'), 'SEPARATOR_PAT').$source()) + "?$")['$=~'](base))) {
        return nil
      } else {
        return [path['$[]'](0, path.$rindex(base)), base]
      };
    }, $Pathname_chop_basename$5.$$arity = 1);
    
    Opal.def(self, '$root?', $Pathname_root$ques$6 = function() {
      var self = this;

      return self.path['$==']("/")
    }, $Pathname_root$ques$6.$$arity = 0);
    
    Opal.def(self, '$parent', $Pathname_parent$7 = function $$parent() {
      var self = this, new_path = nil;

      
      new_path = self.path.$sub(/\/([^\/]+\/?$)/, "");
      if (new_path['$==']("")) {
        new_path = (function() {if ($truthy(self['$absolute?']())) {
          return "/"
        } else {
          return "."
        }; return nil; })()};
      return $$($nesting, 'Pathname').$new(new_path);
    }, $Pathname_parent$7.$$arity = 0);
    
    Opal.def(self, '$sub', $Pathname_sub$8 = function $$sub($a) {
      var $post_args, args, self = this;

      
      
      $post_args = Opal.slice.call(arguments, 0, arguments.length);
      
      args = $post_args;;
      return $$($nesting, 'Pathname').$new($send(self.path, 'sub', Opal.to_a(args)));
    }, $Pathname_sub$8.$$arity = -1);
    
    Opal.def(self, '$cleanpath', $Pathname_cleanpath$9 = function $$cleanpath() {
      var self = this;

      return Opal.normalize(self.path)
    }, $Pathname_cleanpath$9.$$arity = 0);
    
    Opal.def(self, '$to_path', $Pathname_to_path$10 = function $$to_path() {
      var self = this;

      return self.path
    }, $Pathname_to_path$10.$$arity = 0);
    
    Opal.def(self, '$hash', $Pathname_hash$11 = function $$hash() {
      var self = this;

      return self.path
    }, $Pathname_hash$11.$$arity = 0);
    
    Opal.def(self, '$expand_path', $Pathname_expand_path$12 = function $$expand_path() {
      var self = this;

      return $$($nesting, 'Pathname').$new($$($nesting, 'File').$expand_path(self.path))
    }, $Pathname_expand_path$12.$$arity = 0);
    
    Opal.def(self, '$+', $Pathname_$plus$13 = function(other) {
      var self = this;

      
      if ($truthy($$($nesting, 'Pathname')['$==='](other))) {
      } else {
        other = $$($nesting, 'Pathname').$new(other)
      };
      return $$($nesting, 'Pathname').$new(self.$plus(self.path, other.$to_s()));
    }, $Pathname_$plus$13.$$arity = 1);
    
    Opal.def(self, '$plus', $Pathname_plus$14 = function $$plus(path1, path2) {
      var $a, $b, $c, self = this, prefix2 = nil, index_list2 = nil, basename_list2 = nil, r2 = nil, basename2 = nil, prefix1 = nil, r1 = nil, basename1 = nil, suffix2 = nil;

      
      prefix2 = path2;
      index_list2 = [];
      basename_list2 = [];
      while ($truthy((r2 = self.$chop_basename(prefix2)))) {
        
        $c = r2, $b = Opal.to_ary($c), (prefix2 = ($b[0] == null ? nil : $b[0])), (basename2 = ($b[1] == null ? nil : $b[1])), $c;
        index_list2.$unshift(prefix2.$length());
        basename_list2.$unshift(basename2);
      };
      if ($truthy(prefix2['$!='](""))) {
        return path2};
      prefix1 = path1;
      while ($truthy(true)) {
        
        while ($truthy(($truthy($c = basename_list2['$empty?']()['$!']()) ? basename_list2.$first()['$=='](".") : $c))) {
          
          index_list2.$shift();
          basename_list2.$shift();
        };
        if ($truthy((r1 = self.$chop_basename(prefix1)))) {
        } else {
          break;
        };
        $c = r1, $b = Opal.to_ary($c), (prefix1 = ($b[0] == null ? nil : $b[0])), (basename1 = ($b[1] == null ? nil : $b[1])), $c;
        if (basename1['$=='](".")) {
          continue;};
        if ($truthy(($truthy($b = ($truthy($c = basename1['$==']("..")) ? $c : basename_list2['$empty?']())) ? $b : basename_list2.$first()['$!=']("..")))) {
          
          prefix1 = $rb_plus(prefix1, basename1);
          break;;};
        index_list2.$shift();
        basename_list2.$shift();
      };
      r1 = self.$chop_basename(prefix1);
      if ($truthy(($truthy($a = r1['$!']()) ? Opal.regexp([$$($nesting, 'SEPARATOR_PAT')])['$=~']($$($nesting, 'File').$basename(prefix1)) : $a))) {
        while ($truthy(($truthy($b = basename_list2['$empty?']()['$!']()) ? basename_list2.$first()['$==']("..") : $b))) {
          
          index_list2.$shift();
          basename_list2.$shift();
        }};
      if ($truthy(basename_list2['$empty?']()['$!']())) {
        
        suffix2 = path2['$[]'](Opal.Range.$new(index_list2.$first(), -1, false));
        if ($truthy(r1)) {
          return $$($nesting, 'File').$join(prefix1, suffix2)
        } else {
          return $rb_plus(prefix1, suffix2)
        };
      } else if ($truthy(r1)) {
        return prefix1
      } else {
        return $$($nesting, 'File').$dirname(prefix1)
      };
    }, $Pathname_plus$14.$$arity = 2);
    
    Opal.def(self, '$join', $Pathname_join$15 = function $$join($a) {try {

      var $post_args, args, $$16, self = this, result = nil;

      
      
      $post_args = Opal.slice.call(arguments, 0, arguments.length);
      
      args = $post_args;;
      if ($truthy(args['$empty?']())) {
        return self};
      result = args.$pop();
      if ($truthy($$($nesting, 'Pathname')['$==='](result))) {
      } else {
        result = $$($nesting, 'Pathname').$new(result)
      };
      if ($truthy(result['$absolute?']())) {
        return result};
      $send(args, 'reverse_each', [], ($$16 = function(arg){var self = $$16.$$s == null ? this : $$16.$$s;

      
        
        if (arg == null) {
          arg = nil;
        };
        if ($truthy($$($nesting, 'Pathname')['$==='](arg))) {
        } else {
          arg = $$($nesting, 'Pathname').$new(arg)
        };
        result = $rb_plus(arg, result);
        if ($truthy(result['$absolute?']())) {
          Opal.ret(result)
        } else {
          return nil
        };}, $$16.$$s = self, $$16.$$arity = 1, $$16));
      return $rb_plus(self, result);
      } catch ($returner) { if ($returner === Opal.returner) { return $returner.$v } throw $returner; }
    }, $Pathname_join$15.$$arity = -1);
    
    Opal.def(self, '$split', $Pathname_split$17 = function $$split() {
      var self = this;

      return [self.$dirname(), self.$basename()]
    }, $Pathname_split$17.$$arity = 0);
    
    Opal.def(self, '$dirname', $Pathname_dirname$18 = function $$dirname() {
      var self = this;

      return $$($nesting, 'Pathname').$new($$($nesting, 'File').$dirname(self.path))
    }, $Pathname_dirname$18.$$arity = 0);
    
    Opal.def(self, '$basename', $Pathname_basename$19 = function $$basename() {
      var self = this;

      return $$($nesting, 'Pathname').$new($$($nesting, 'File').$basename(self.path))
    }, $Pathname_basename$19.$$arity = 0);
    
    Opal.def(self, '$directory?', $Pathname_directory$ques$20 = function() {
      var self = this;

      return $$($nesting, 'File')['$directory?'](self.path)
    }, $Pathname_directory$ques$20.$$arity = 0);
    
    Opal.def(self, '$extname', $Pathname_extname$21 = function $$extname() {
      var self = this;

      return $$($nesting, 'File').$extname(self.path)
    }, $Pathname_extname$21.$$arity = 0);
    
    Opal.def(self, '$<=>', $Pathname_$lt_eq_gt$22 = function(other) {
      var self = this;

      return self.$path()['$<=>'](other.$path())
    }, $Pathname_$lt_eq_gt$22.$$arity = 1);
    Opal.alias(self, "eql?", "==");
    Opal.alias(self, "===", "==");
    Opal.alias(self, "to_str", "to_path");
    Opal.alias(self, "to_s", "to_path");
    Opal.const_set($nesting[0], 'SAME_PATHS', (function() {if ($truthy($$$($$($nesting, 'File'), 'FNM_SYSCASE')['$nonzero?']())) {
      return $send(self, 'proc', [], ($Pathname$23 = function(a, b){var self = $Pathname$23.$$s == null ? this : $Pathname$23.$$s;

      
        
        if (a == null) {
          a = nil;
        };
        
        if (b == null) {
          b = nil;
        };
        return a.$casecmp(b)['$=='](0);}, $Pathname$23.$$s = self, $Pathname$23.$$arity = 2, $Pathname$23))
    } else {
      return $send(self, 'proc', [], ($Pathname$24 = function(a, b){var self = $Pathname$24.$$s == null ? this : $Pathname$24.$$s;

      
        
        if (a == null) {
          a = nil;
        };
        
        if (b == null) {
          b = nil;
        };
        return a['$=='](b);}, $Pathname$24.$$s = self, $Pathname$24.$$arity = 2, $Pathname$24))
    }; return nil; })());
    
    Opal.def(self, '$relative_path_from', $Pathname_relative_path_from$25 = function $$relative_path_from(base_directory) {
      var $a, $b, $c, self = this, dest_directory = nil, dest_prefix = nil, dest_names = nil, r = nil, basename = nil, base_prefix = nil, base_names = nil, relpath_names = nil;

      
      dest_directory = self.$cleanpath().$to_s();
      base_directory = base_directory.$cleanpath().$to_s();
      dest_prefix = dest_directory;
      dest_names = [];
      while ($truthy((r = self.$chop_basename(dest_prefix)))) {
        
        $c = r, $b = Opal.to_ary($c), (dest_prefix = ($b[0] == null ? nil : $b[0])), (basename = ($b[1] == null ? nil : $b[1])), $c;
        if ($truthy(basename['$!=']("."))) {
          dest_names.$unshift(basename)};
      };
      base_prefix = base_directory;
      base_names = [];
      while ($truthy((r = self.$chop_basename(base_prefix)))) {
        
        $c = r, $b = Opal.to_ary($c), (base_prefix = ($b[0] == null ? nil : $b[0])), (basename = ($b[1] == null ? nil : $b[1])), $c;
        if ($truthy(basename['$!=']("."))) {
          base_names.$unshift(basename)};
      };
      if ($truthy($$($nesting, 'SAME_PATHS')['$[]'](dest_prefix, base_prefix))) {
      } else {
        self.$raise($$($nesting, 'ArgumentError'), "" + "different prefix: " + (dest_prefix.$inspect()) + " and " + (base_directory.$inspect()))
      };
      while ($truthy(($truthy($b = ($truthy($c = dest_names['$empty?']()['$!']()) ? base_names['$empty?']()['$!']() : $c)) ? $$($nesting, 'SAME_PATHS')['$[]'](dest_names.$first(), base_names.$first()) : $b))) {
        
        dest_names.$shift();
        base_names.$shift();
      };
      if ($truthy(base_names['$include?'](".."))) {
        self.$raise($$($nesting, 'ArgumentError'), "" + "base_directory has ..: " + (base_directory.$inspect()))};
      base_names.$fill("..");
      relpath_names = $rb_plus(base_names, dest_names);
      if ($truthy(relpath_names['$empty?']())) {
        return $$($nesting, 'Pathname').$new(".")
      } else {
        return $$($nesting, 'Pathname').$new($send($$($nesting, 'File'), 'join', Opal.to_a(relpath_names)))
      };
    }, $Pathname_relative_path_from$25.$$arity = 1);
    return (Opal.def(self, '$entries', $Pathname_entries$26 = function $$entries() {
      var $$27, self = this;

      return $send($$($nesting, 'Dir').$entries(self.path), 'map', [], ($$27 = function(f){var self = $$27.$$s == null ? this : $$27.$$s;

      
        
        if (f == null) {
          f = nil;
        };
        return self.$class().$new(f);}, $$27.$$s = self, $$27.$$arity = 1, $$27))
    }, $Pathname_entries$26.$$arity = 0), nil) && 'entries';
  })($nesting[0], null, $nesting);
  return (function($base, $parent_nesting) {
    var self = $module($base, 'Kernel');

    var $nesting = [self].concat($parent_nesting), $Kernel_Pathname$28;

    
    Opal.def(self, '$Pathname', $Kernel_Pathname$28 = function $$Pathname(path) {
      var self = this;

      return $$($nesting, 'Pathname').$new(path)
    }, $Kernel_Pathname$28.$$arity = 1)
  })($nesting[0], $nesting);
};

/* Generated by Opal 1.0.0 */
Opal.modules["opal/rewriters/break_finder"] = function(Opal) {
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.$$$, $$ = Opal.$$, $module = Opal.module, $klass = Opal.klass;

  Opal.add_stubs(['$require']);
  
  self.$require("opal/rewriter");
  return (function($base, $parent_nesting) {
    var self = $module($base, 'Opal');

    var $nesting = [self].concat($parent_nesting);

    (function($base, $parent_nesting) {
      var self = $module($base, 'Rewriters');

      var $nesting = [self].concat($parent_nesting);

      (function($base, $super, $parent_nesting) {
        var self = $klass($base, $super, 'BreakFinder');

        var $nesting = [self].concat($parent_nesting), $BreakFinder_initialize$1, $BreakFinder_found_break$ques$2, $BreakFinder_on_break$3, $BreakFinder_stop_lookup$4;

        self.$$prototype.found_break = nil;
        
        
        Opal.def(self, '$initialize', $BreakFinder_initialize$1 = function $$initialize() {
          var self = this;

          return (self.found_break = false)
        }, $BreakFinder_initialize$1.$$arity = 0);
        
        Opal.def(self, '$found_break?', $BreakFinder_found_break$ques$2 = function() {
          var self = this;

          return self.found_break
        }, $BreakFinder_found_break$ques$2.$$arity = 0);
        
        Opal.def(self, '$on_break', $BreakFinder_on_break$3 = function $$on_break(node) {
          var self = this;

          
          self.found_break = true;
          return node;
        }, $BreakFinder_on_break$3.$$arity = 1);
        
        Opal.def(self, '$stop_lookup', $BreakFinder_stop_lookup$4 = function $$stop_lookup(node) {
          var self = this;

          return nil
        }, $BreakFinder_stop_lookup$4.$$arity = 1);
        Opal.alias(self, "on_for", "stop_lookup");
        Opal.alias(self, "on_while", "stop_lookup");
        Opal.alias(self, "on_while_post", "stop_lookup");
        Opal.alias(self, "on_until", "stop_lookup");
        Opal.alias(self, "on_until_post", "stop_lookup");
        return Opal.alias(self, "on_block", "stop_lookup");
      })($nesting[0], $$$($$$($$($nesting, 'Opal'), 'Rewriters'), 'Base'), $nesting)
    })($nesting[0], $nesting)
  })($nesting[0], $nesting);
};

/* Generated by Opal 1.0.0 */
Opal.modules["opal/nodes/call"] = function(Opal) {
  function $rb_minus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs - rhs : lhs['$-'](rhs);
  }
  function $rb_plus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs + rhs : lhs['$+'](rhs);
  }
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.$$$, $$ = Opal.$$, $module = Opal.module, $klass = Opal.klass, $hash2 = Opal.hash2, $send = Opal.send, $send2 = Opal.send2, $slice = Opal.slice, $truthy = Opal.truthy, $range = Opal.range;

  Opal.add_stubs(['$require', '$handle', '$attr_reader', '$freeze', '$[]=', '$-', '$define_method', '$to_proc', '$include?', '$type', '$s', '$handle_special', '$record_method?', '$<<', '$method_calls', '$compiler', '$to_sym', '$meth', '$using_irb?', '$compile_irb_var', '$default_compile', '$private', '$iter', '$new', '$process', '$found_break?', '$splat?', '$invoke_using_send?', '$compile_using_send', '$compile_simple_call_chain', '$compile_break_catcher', '$helper', '$push', '$compile_receiver', '$compile_method_name', '$compile_arguments', '$compile_block_pass', '$recv', '$receiver_sexp', '$expr', '$arglist', '$empty?', '$children', '$iter_has_break?', '$unshift', '$line', '$method_jsid', '$any?', '$==', '$recvr', '$mid_to_jsid', '$to_s', '$with_temp', '$intern', '$irb?', '$top?', '$scope', '$nil?', '$updated', '$method', '$arity', '$[]', '$each', '$add_special', '$inline_operators?', '$operator_helpers', '$fragment', '$call', '$resolve', '$requires', '$file', '$dirname', '$cleanpath', '$join', '$Pathname', '$inspect', '$class_scope?', '$required_trees', '$force_encoding', '$encoding', '$+', '$handle_block_given_call', '$def?', '$mid', '$arity_check?', '$push_nesting?', '$first', '$size', '$last', '$handle_part', '$map', '$is_a?', '$expand_path', '$split', '$dynamic_require_severity', '$===', '$error', '$warning', '$each_with_object', '$pop']);
  
  self.$require("set");
  self.$require("pathname");
  self.$require("opal/nodes/base");
  self.$require("opal/rewriters/break_finder");
  return (function($base, $parent_nesting) {
    var self = $module($base, 'Opal');

    var $nesting = [self].concat($parent_nesting);

    (function($base, $parent_nesting) {
      var self = $module($base, 'Nodes');

      var $nesting = [self].concat($parent_nesting);

      (function($base, $super, $parent_nesting) {
        var self = $klass($base, $super, 'CallNode');

        var $nesting = [self].concat($parent_nesting), $CallNode_add_special$1, $CallNode_initialize$2, $CallNode_compile$3, $CallNode_iter_has_break$ques$5, $CallNode_invoke_using_send$ques$6, $CallNode_default_compile$7, $CallNode_compile_using_send$8, $CallNode_compile_receiver$9, $CallNode_compile_method_name$10, $CallNode_compile_arguments$11, $CallNode_compile_block_pass$12, $CallNode_compile_break_catcher$13, $CallNode_compile_simple_call_chain$14, $CallNode_splat$ques$15, $CallNode_receiver_sexp$17, $CallNode_method_jsid$18, $CallNode_record_method$ques$19, $CallNode_compile_irb_var$20, $CallNode_using_irb$ques$22, $CallNode_sexp_with_arglist$23, $CallNode_handle_special$24, $CallNode$25, $CallNode$27, $CallNode$28, $CallNode$29, $CallNode$30, $CallNode$31, $CallNode$32, $CallNode$33, $CallNode$34, $CallNode$35, $CallNode$36, $CallNode$37, $CallNode_push_nesting$ques$38;

        self.$$prototype.sexp = self.$$prototype.compiler = nil;
        
        self.$handle("send");
        self.$attr_reader("recvr", "meth", "arglist", "iter");
        Opal.const_set($nesting[0], 'SPECIALS', $hash2([], {}));
        Opal.const_set($nesting[0], 'OPERATORS', $hash2(["+", "-", "*", "/", "<", "<=", ">", ">="], {"+": "plus", "-": "minus", "*": "times", "/": "divide", "<": "lt", "<=": "le", ">": "gt", ">=": "ge"}).$freeze());
        Opal.defs(self, '$add_special', $CallNode_add_special$1 = function $$add_special(name, options) {
          var $iter = $CallNode_add_special$1.$$p, handler = $iter || nil, self = this, $writer = nil;

          if ($iter) $CallNode_add_special$1.$$p = null;
          
          
          if ($iter) $CallNode_add_special$1.$$p = null;;
          
          if (options == null) {
            options = $hash2([], {});
          };
          
          $writer = [name, options];
          $send($$($nesting, 'SPECIALS'), '[]=', Opal.to_a($writer));
          $writer[$rb_minus($writer["length"], 1)];;
          return $send(self, 'define_method', ["" + "handle_" + (name)], handler.$to_proc());
        }, $CallNode_add_special$1.$$arity = -2);
        
        Opal.def(self, '$initialize', $CallNode_initialize$2 = function $$initialize($a) {
          var $post_args, $b, $c, $iter = $CallNode_initialize$2.$$p, $yield = $iter || nil, self = this, args = nil, rest = nil, last_arg = nil, $zuper = nil, $zuper_i = nil, $zuper_ii = nil;

          if ($iter) $CallNode_initialize$2.$$p = null;
          // Prepare super implicit arguments
          for($zuper_i = 0, $zuper_ii = arguments.length, $zuper = new Array($zuper_ii); $zuper_i < $zuper_ii; $zuper_i++) {
            $zuper[$zuper_i] = arguments[$zuper_i];
          }
          
          
          $post_args = Opal.slice.call(arguments, 0, arguments.length);
          ;
          $send2(self, Opal.find_super_dispatcher(self, 'initialize', $CallNode_initialize$2, false, true), 'initialize', $zuper, $iter);
          $b = [].concat(Opal.to_a(self.sexp)), (self.recvr = ($b[0] == null ? nil : $b[0])), (self.meth = ($b[1] == null ? nil : $b[1])), (args = $slice.call($b, 2)), $b;
          $b = [].concat(Opal.to_a(args)), $c = $b.length - 1, $c = ($c < 0) ? 0 : $c, (rest = $slice.call($b, 0, $c)), (last_arg = ($b[$c] == null ? nil : $b[$c])), $b;
          if ($truthy(($truthy($b = last_arg) ? ["iter", "block_pass"]['$include?'](last_arg.$type()) : $b))) {
            
            self.iter = last_arg;
            args = rest;
          } else {
            self.iter = nil
          };
          return (self.arglist = $send(self, 's', ["arglist"].concat(Opal.to_a(args))));
        }, $CallNode_initialize$2.$$arity = -1);
        
        Opal.def(self, '$compile', $CallNode_compile$3 = function $$compile() {try {

          var $$4, self = this;

          return $send(self, 'handle_special', [], ($$4 = function(){var self = $$4.$$s == null ? this : $$4.$$s;

          
            if ($truthy(self['$record_method?']())) {
              self.$compiler().$method_calls()['$<<'](self.$meth().$to_sym())};
            if ($truthy(self['$using_irb?']())) {
              Opal.ret(self.$compile_irb_var())};
            return self.$default_compile();}, $$4.$$s = self, $$4.$$arity = 0, $$4))
          } catch ($returner) { if ($returner === Opal.returner) { return $returner.$v } throw $returner; }
        }, $CallNode_compile$3.$$arity = 0);
        self.$private();
        
        Opal.def(self, '$iter_has_break?', $CallNode_iter_has_break$ques$5 = function() {
          var self = this, finder = nil;

          
          if ($truthy(self.$iter())) {
          } else {
            return false
          };
          finder = $$$($$$($$($nesting, 'Opal'), 'Rewriters'), 'BreakFinder').$new();
          finder.$process(self.$iter());
          return finder['$found_break?']();
        }, $CallNode_iter_has_break$ques$5.$$arity = 0);
        
        Opal.def(self, '$invoke_using_send?', $CallNode_invoke_using_send$ques$6 = function() {
          var $a, self = this;

          return ($truthy($a = self.$iter()) ? $a : self['$splat?']())
        }, $CallNode_invoke_using_send$ques$6.$$arity = 0);
        
        Opal.def(self, '$default_compile', $CallNode_default_compile$7 = function $$default_compile() {
          var self = this;

          
          if ($truthy(self['$invoke_using_send?']())) {
            self.$compile_using_send()
          } else {
            self.$compile_simple_call_chain()
          };
          return self.$compile_break_catcher();
        }, $CallNode_default_compile$7.$$arity = 0);
        
        Opal.def(self, '$compile_using_send', $CallNode_compile_using_send$8 = function $$compile_using_send() {
          var self = this;

          
          self.$helper("send");
          self.$push("$send(");
          self.$compile_receiver();
          self.$compile_method_name();
          self.$compile_arguments();
          self.$compile_block_pass();
          return self.$push(")");
        }, $CallNode_compile_using_send$8.$$arity = 0);
        
        Opal.def(self, '$compile_receiver', $CallNode_compile_receiver$9 = function $$compile_receiver() {
          var self = this;

          return self.$push(self.$recv(self.$receiver_sexp()))
        }, $CallNode_compile_receiver$9.$$arity = 0);
        
        Opal.def(self, '$compile_method_name', $CallNode_compile_method_name$10 = function $$compile_method_name() {
          var self = this;

          return self.$push("" + ", '" + (self.$meth()) + "'")
        }, $CallNode_compile_method_name$10.$$arity = 0);
        
        Opal.def(self, '$compile_arguments', $CallNode_compile_arguments$11 = function $$compile_arguments() {
          var self = this;

          
          self.$push(", ");
          if ($truthy(self['$splat?']())) {
            return self.$push(self.$expr(self.$arglist()))
          } else if ($truthy(self.$arglist().$children()['$empty?']())) {
            return self.$push("[]")
          } else {
            return self.$push("[", self.$expr(self.$arglist()), "]")
          };
        }, $CallNode_compile_arguments$11.$$arity = 0);
        
        Opal.def(self, '$compile_block_pass', $CallNode_compile_block_pass$12 = function $$compile_block_pass() {
          var self = this;

          if ($truthy(self.$iter())) {
            return self.$push(", ", self.$expr(self.$iter()))
          } else {
            return nil
          }
        }, $CallNode_compile_block_pass$12.$$arity = 0);
        
        Opal.def(self, '$compile_break_catcher', $CallNode_compile_break_catcher$13 = function $$compile_break_catcher() {
          var self = this;

          if ($truthy(self['$iter_has_break?']())) {
            
            self.$unshift("return ");
            self.$unshift("(function(){var $brk = Opal.new_brk(); try {");
            return self.$line("} catch (err) { if (err === $brk) { return err.$v } else { throw err } }})()");
          } else {
            return nil
          }
        }, $CallNode_compile_break_catcher$13.$$arity = 0);
        
        Opal.def(self, '$compile_simple_call_chain', $CallNode_compile_simple_call_chain$14 = function $$compile_simple_call_chain() {
          var self = this;

          return self.$push(self.$recv(self.$receiver_sexp()), self.$method_jsid(), "(", self.$expr(self.$arglist()), ")")
        }, $CallNode_compile_simple_call_chain$14.$$arity = 0);
        
        Opal.def(self, '$splat?', $CallNode_splat$ques$15 = function() {
          var $$16, self = this;

          return $send(self.$arglist().$children(), 'any?', [], ($$16 = function(a){var self = $$16.$$s == null ? this : $$16.$$s;

          
            
            if (a == null) {
              a = nil;
            };
            return a.$type()['$==']("splat");}, $$16.$$s = self, $$16.$$arity = 1, $$16))
        }, $CallNode_splat$ques$15.$$arity = 0);
        
        Opal.def(self, '$receiver_sexp', $CallNode_receiver_sexp$17 = function $$receiver_sexp() {
          var $a, self = this;

          return ($truthy($a = self.$recvr()) ? $a : self.$s("self"))
        }, $CallNode_receiver_sexp$17.$$arity = 0);
        
        Opal.def(self, '$method_jsid', $CallNode_method_jsid$18 = function $$method_jsid() {
          var self = this;

          return self.$mid_to_jsid(self.$meth().$to_s())
        }, $CallNode_method_jsid$18.$$arity = 0);
        
        Opal.def(self, '$record_method?', $CallNode_record_method$ques$19 = function() {
          var self = this;

          return true
        }, $CallNode_record_method$ques$19.$$arity = 0);
        
        Opal.def(self, '$compile_irb_var', $CallNode_compile_irb_var$20 = function $$compile_irb_var() {
          var $$21, self = this;

          return $send(self, 'with_temp', [], ($$21 = function(tmp){var self = $$21.$$s == null ? this : $$21.$$s, lvar = nil, call = nil;

          
            
            if (tmp == null) {
              tmp = nil;
            };
            lvar = self.$meth();
            call = self.$s("send", self.$s("self"), self.$meth().$intern(), self.$s("arglist"));
            return self.$push("" + "((" + (tmp) + " = Opal.irb_vars." + (lvar) + ") == null ? ", self.$expr(call), "" + " : " + (tmp) + ")");}, $$21.$$s = self, $$21.$$arity = 1, $$21))
        }, $CallNode_compile_irb_var$20.$$arity = 0);
        
        Opal.def(self, '$using_irb?', $CallNode_using_irb$ques$22 = function() {
          var $a, $b, $c, $d, self = this;

          return ($truthy($a = ($truthy($b = ($truthy($c = ($truthy($d = self.compiler['$irb?']()) ? self.$scope()['$top?']() : $d)) ? self.$arglist()['$=='](self.$s("arglist")) : $c)) ? self.$recvr()['$nil?']() : $b)) ? self.$iter()['$nil?']() : $a)
        }, $CallNode_using_irb$ques$22.$$arity = 0);
        
        Opal.def(self, '$sexp_with_arglist', $CallNode_sexp_with_arglist$23 = function $$sexp_with_arglist() {
          var self = this;

          return self.sexp.$updated(nil, [self.$recvr(), self.$meth(), self.$arglist()])
        }, $CallNode_sexp_with_arglist$23.$$arity = 0);
        
        Opal.def(self, '$handle_special', $CallNode_handle_special$24 = function $$handle_special() {
          var $iter = $CallNode_handle_special$24.$$p, compile_default = $iter || nil, self = this, method = nil;

          if ($iter) $CallNode_handle_special$24.$$p = null;
          
          
          if ($iter) $CallNode_handle_special$24.$$p = null;;
          if ($truthy($$($nesting, 'SPECIALS')['$include?'](self.$meth()))) {
            
            method = self.$method("" + "handle_" + (self.$meth()));
            if (method.$arity()['$=='](1)) {
              return method['$[]'](compile_default)
            } else {
              return method['$[]']()
            };
          } else {
            return Opal.yieldX(compile_default, []);
          };
        }, $CallNode_handle_special$24.$$arity = 0);
        $send($$($nesting, 'OPERATORS'), 'each', [], ($CallNode$25 = function(operator, name){var self = $CallNode$25.$$s == null ? this : $CallNode$25.$$s, $$26;

        
          
          if (operator == null) {
            operator = nil;
          };
          
          if (name == null) {
            name = nil;
          };
          return $send(self, 'add_special', [operator.$to_sym()], ($$26 = function(compile_default){var self = $$26.$$s == null ? this : $$26.$$s, $a, lhs = nil, rhs = nil;

          
            
            if (compile_default == null) {
              compile_default = nil;
            };
            if ($truthy(self.$compiler()['$inline_operators?']())) {
              
              if ($truthy(self['$record_method?']())) {
                self.$compiler().$method_calls()['$<<'](operator.$to_sym())};
              self.$compiler().$operator_helpers()['$<<'](operator.$to_sym());
              $a = [self.$expr(self.$recvr()), self.$expr(self.$arglist())], (lhs = $a[0]), (rhs = $a[1]), $a;
              self.$push(self.$fragment("" + "$rb_" + (name) + "("));
              self.$push(lhs);
              self.$push(self.$fragment(", "));
              self.$push(rhs);
              return self.$push(self.$fragment(")"));
            } else {
              return compile_default.$call()
            };}, $$26.$$s = self, $$26.$$arity = 1, $$26));}, $CallNode$25.$$s = self, $CallNode$25.$$arity = 2, $CallNode$25));
        $send(self, 'add_special', ["require"], ($CallNode$27 = function(compile_default){var self = $CallNode$27.$$s == null ? this : $CallNode$27.$$s, str = nil;

        
          
          if (compile_default == null) {
            compile_default = nil;
          };
          str = $$($nesting, 'DependencyResolver').$new(self.$compiler(), self.$arglist().$children()['$[]'](0)).$resolve();
          if ($truthy(str['$nil?']())) {
          } else {
            self.$compiler().$requires()['$<<'](str)
          };
          return compile_default.$call();}, $CallNode$27.$$s = self, $CallNode$27.$$arity = 1, $CallNode$27));
        $send(self, 'add_special', ["require_relative"], ($CallNode$28 = function(){var self = $CallNode$28.$$s == null ? this : $CallNode$28.$$s, arg = nil, file = nil, dir = nil;

        
          arg = self.$arglist().$children()['$[]'](0);
          file = self.$compiler().$file();
          if (arg.$type()['$==']("str")) {
            
            dir = $$($nesting, 'File').$dirname(file);
            self.$compiler().$requires()['$<<'](self.$Pathname(dir).$join(arg.$children()['$[]'](0)).$cleanpath().$to_s());};
          self.$push(self.$fragment("" + "self.$require(" + (file.$inspect()) + "+ '/../' + "));
          self.$push(self.$process(self.$arglist()));
          return self.$push(self.$fragment(")"));}, $CallNode$28.$$s = self, $CallNode$28.$$arity = 0, $CallNode$28));
        $send(self, 'add_special', ["autoload"], ($CallNode$29 = function(compile_default){var self = $CallNode$29.$$s == null ? this : $CallNode$29.$$s, str = nil;

        
          
          if (compile_default == null) {
            compile_default = nil;
          };
          if ($truthy(self.$scope()['$class_scope?']())) {
            
            str = $$($nesting, 'DependencyResolver').$new(self.$compiler(), self.$arglist().$children()['$[]'](1)).$resolve();
            if ($truthy(str['$nil?']())) {
            } else {
              self.$compiler().$requires()['$<<'](str)
            };
            return compile_default.$call();
          } else {
            return nil
          };}, $CallNode$29.$$s = self, $CallNode$29.$$arity = 1, $CallNode$29));
        $send(self, 'add_special', ["require_tree"], ($CallNode$30 = function(compile_default){var self = $CallNode$30.$$s == null ? this : $CallNode$30.$$s, $a, first_arg = nil, rest = nil, relative_path = nil, dir = nil, full_path = nil;

        
          
          if (compile_default == null) {
            compile_default = nil;
          };
          $a = [].concat(Opal.to_a(self.$arglist().$children())), (first_arg = ($a[0] == null ? nil : $a[0])), (rest = $slice.call($a, 1)), $a;
          if (first_arg.$type()['$==']("str")) {
            
            relative_path = first_arg.$children()['$[]'](0);
            self.$compiler().$required_trees()['$<<'](relative_path);
            dir = $$($nesting, 'File').$dirname(self.$compiler().$file());
            full_path = self.$Pathname(dir).$join(relative_path).$cleanpath().$to_s();
            full_path.$force_encoding(relative_path.$encoding());
            first_arg = first_arg.$updated(nil, [full_path]);};
          self.arglist = self.$arglist().$updated(nil, $rb_plus([first_arg], rest));
          return compile_default.$call();}, $CallNode$30.$$s = self, $CallNode$30.$$arity = 1, $CallNode$30));
        $send(self, 'add_special', ["block_given?"], ($CallNode$31 = function(){var self = $CallNode$31.$$s == null ? this : $CallNode$31.$$s;
          if (self.sexp == null) self.sexp = nil;

        return self.$push(self.$compiler().$handle_block_given_call(self.sexp))}, $CallNode$31.$$s = self, $CallNode$31.$$arity = 0, $CallNode$31));
        $send(self, 'add_special', ["__callee__"], ($CallNode$32 = function(){var self = $CallNode$32.$$s == null ? this : $CallNode$32.$$s;

        if ($truthy(self.$scope()['$def?']())) {
            return self.$push(self.$fragment(self.$scope().$mid().$to_s().$inspect()))
          } else {
            return self.$push(self.$fragment("nil"))
          }}, $CallNode$32.$$s = self, $CallNode$32.$$arity = 0, $CallNode$32));
        $send(self, 'add_special', ["__method__"], ($CallNode$33 = function(){var self = $CallNode$33.$$s == null ? this : $CallNode$33.$$s;

        if ($truthy(self.$scope()['$def?']())) {
            return self.$push(self.$fragment(self.$scope().$mid().$to_s().$inspect()))
          } else {
            return self.$push(self.$fragment("nil"))
          }}, $CallNode$33.$$s = self, $CallNode$33.$$arity = 0, $CallNode$33));
        $send(self, 'add_special', ["debugger"], ($CallNode$34 = function(){var self = $CallNode$34.$$s == null ? this : $CallNode$34.$$s;

        return self.$push(self.$fragment("debugger"))}, $CallNode$34.$$s = self, $CallNode$34.$$arity = 0, $CallNode$34));
        $send(self, 'add_special', ["__OPAL_COMPILER_CONFIG__"], ($CallNode$35 = function(){var self = $CallNode$35.$$s == null ? this : $CallNode$35.$$s;

        return self.$push(self.$fragment("" + "Opal.hash({ arity_check: " + (self.$compiler()['$arity_check?']()) + " })"))}, $CallNode$35.$$s = self, $CallNode$35.$$arity = 0, $CallNode$35));
        $send(self, 'add_special', ["nesting"], ($CallNode$36 = function(compile_default){var self = $CallNode$36.$$s == null ? this : $CallNode$36.$$s, push_nesting = nil;

        
          
          if (compile_default == null) {
            compile_default = nil;
          };
          push_nesting = self['$push_nesting?']();
          if ($truthy(push_nesting)) {
            self.$push("(Opal.Module.$$nesting = $nesting, ")};
          compile_default.$call();
          if ($truthy(push_nesting)) {
            return self.$push(")")
          } else {
            return nil
          };}, $CallNode$36.$$s = self, $CallNode$36.$$arity = 1, $CallNode$36));
        $send(self, 'add_special', ["constants"], ($CallNode$37 = function(compile_default){var self = $CallNode$37.$$s == null ? this : $CallNode$37.$$s, push_nesting = nil;

        
          
          if (compile_default == null) {
            compile_default = nil;
          };
          push_nesting = self['$push_nesting?']();
          if ($truthy(push_nesting)) {
            self.$push("(Opal.Module.$$nesting = $nesting, ")};
          compile_default.$call();
          if ($truthy(push_nesting)) {
            return self.$push(")")
          } else {
            return nil
          };}, $CallNode$37.$$s = self, $CallNode$37.$$arity = 1, $CallNode$37));
        
        Opal.def(self, '$push_nesting?', $CallNode_push_nesting$ques$38 = function() {
          var $a, $b, $c, self = this, recv = nil;

          
          recv = self.$children().$first();
          return (($a = self.$children().$size()['$=='](2)) ? ($truthy($b = recv['$nil?']()) ? $b : (($c = recv.$type()['$==']("const")) ? recv.$children().$last()['$==']("Module") : recv.$type()['$==']("const"))) : self.$children().$size()['$=='](2));
        }, $CallNode_push_nesting$ques$38.$$arity = 0);
        return (function($base, $super, $parent_nesting) {
          var self = $klass($base, $super, 'DependencyResolver');

          var $nesting = [self].concat($parent_nesting), $DependencyResolver_initialize$39, $DependencyResolver_resolve$40, $DependencyResolver_handle_part$41, $DependencyResolver_expand_path$43;

          self.$$prototype.sexp = self.$$prototype.compiler = nil;
          
          
          Opal.def(self, '$initialize', $DependencyResolver_initialize$39 = function $$initialize(compiler, sexp) {
            var self = this;

            
            self.compiler = compiler;
            return (self.sexp = sexp);
          }, $DependencyResolver_initialize$39.$$arity = 2);
          
          Opal.def(self, '$resolve', $DependencyResolver_resolve$40 = function $$resolve() {
            var self = this;

            return self.$handle_part(self.sexp)
          }, $DependencyResolver_resolve$40.$$arity = 0);
          
          Opal.def(self, '$handle_part', $DependencyResolver_handle_part$41 = function $$handle_part(sexp) {
            var $a, $b, $$42, self = this, type = nil, recv = nil, meth = nil, args = nil, parts = nil, msg = nil, $case = nil;

            
            type = sexp.$type();
            if (type['$==']("str")) {
              return sexp.$children()['$[]'](0)
            } else if (type['$==']("send")) {
              
              $b = sexp.$children(), $a = Opal.to_ary($b), (recv = ($a[0] == null ? nil : $a[0])), (meth = ($a[1] == null ? nil : $a[1])), (args = $slice.call($a, 2)), $b;
              parts = $send(args, 'map', [], ($$42 = function(s){var self = $$42.$$s == null ? this : $$42.$$s;

              
                
                if (s == null) {
                  s = nil;
                };
                return self.$handle_part(s);}, $$42.$$s = self, $$42.$$arity = 1, $$42));
              if ($truthy(($truthy($a = ($truthy($b = recv['$is_a?']($$$($$$($$$('::', 'Opal'), 'AST'), 'Node'))) ? recv.$type()['$==']("const") : $b)) ? recv.$children().$last()['$==']("File") : $a))) {
                if (meth['$==']("expand_path")) {
                  return $send(self, 'expand_path', Opal.to_a(parts))
                } else if (meth['$==']("join")) {
                  return self.$expand_path(parts.$join("/"))
                } else if (meth['$==']("dirname")) {
                  return self.$expand_path(parts['$[]'](0).$split("/")['$[]']($range(0, -1, true)).$join("/"))}};};
            msg = "Cannot handle dynamic require";
            return (function() {$case = self.compiler.$dynamic_require_severity();
            if ("error"['$===']($case)) {return self.compiler.$error(msg, self.sexp.$line())}
            else if ("warning"['$===']($case)) {return self.compiler.$warning(msg, self.sexp.$line())}
            else { return nil }})();
          }, $DependencyResolver_handle_part$41.$$arity = 1);
          return (Opal.def(self, '$expand_path', $DependencyResolver_expand_path$43 = function $$expand_path(path, base) {
            var $$44, self = this;

            
            
            if (base == null) {
              base = "";
            };
            return $send(((("" + (base)) + "/") + (path)).$split("/"), 'each_with_object', [[]], ($$44 = function(part, p){var self = $$44.$$s == null ? this : $$44.$$s;

            
              
              if (part == null) {
                part = nil;
              };
              
              if (p == null) {
                p = nil;
              };
              if (part['$==']("")) {
                return nil
              } else if (part['$==']("..")) {
                return p.$pop()
              } else {
                return p['$<<'](part)
              };}, $$44.$$s = self, $$44.$$arity = 2, $$44)).$join("/");
          }, $DependencyResolver_expand_path$43.$$arity = -2), nil) && 'expand_path';
        })($nesting[0], null, $nesting);
      })($nesting[0], $$($nesting, 'Base'), $nesting)
    })($nesting[0], $nesting)
  })($nesting[0], $nesting);
};

/* Generated by Opal 1.0.0 */
Opal.modules["opal/nodes/csend"] = function(Opal) {
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.$$$, $$ = Opal.$$, $module = Opal.module, $klass = Opal.klass, $send = Opal.send;

  Opal.add_stubs(['$require', '$handle', '$helper', '$conditional_send', '$recv', '$receiver_sexp', '$push', '$compile_method_name', '$compile_arguments', '$compile_block_pass']);
  
  self.$require("opal/nodes/call");
  return (function($base, $parent_nesting) {
    var self = $module($base, 'Opal');

    var $nesting = [self].concat($parent_nesting);

    (function($base, $parent_nesting) {
      var self = $module($base, 'Nodes');

      var $nesting = [self].concat($parent_nesting);

      (function($base, $super, $parent_nesting) {
        var self = $klass($base, $super, 'CSendNode');

        var $nesting = [self].concat($parent_nesting), $CSendNode_default_compile$1;

        
        self.$handle("csend");
        return (Opal.def(self, '$default_compile', $CSendNode_default_compile$1 = function $$default_compile() {
          var $$2, self = this;

          
          self.$helper("send");
          return $send(self, 'conditional_send', [self.$recv(self.$receiver_sexp())], ($$2 = function(receiver_temp){var self = $$2.$$s == null ? this : $$2.$$s;

          
            
            if (receiver_temp == null) {
              receiver_temp = nil;
            };
            self.$push("$send(", receiver_temp);
            self.$compile_method_name();
            self.$compile_arguments();
            self.$compile_block_pass();
            return self.$push(")");}, $$2.$$s = self, $$2.$$arity = 1, $$2));
        }, $CSendNode_default_compile$1.$$arity = 0), nil) && 'default_compile';
      })($nesting[0], $$($nesting, 'CallNode'), $nesting)
    })($nesting[0], $nesting)
  })($nesting[0], $nesting);
};

/* Generated by Opal 1.0.0 */
Opal.modules["opal/nodes/call_special"] = function(Opal) {
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.$$$, $$ = Opal.$$, $module = Opal.module, $klass = Opal.klass, $send2 = Opal.send2, $truthy = Opal.truthy;

  Opal.add_stubs(['$require', '$handle', '$children', '$push', '$recv', '$recvr', '$expr', '$property', '$value', '$<<', '$default_compile', '$meth', '$receiver_sexp', '$method_jsid', '$compile_arguments', '$iter', '$s', '$lhs', '$rhs', '$process']);
  
  self.$require("opal/nodes/base");
  self.$require("opal/nodes/call");
  return (function($base, $parent_nesting) {
    var self = $module($base, 'Opal');

    var $nesting = [self].concat($parent_nesting);

    (function($base, $parent_nesting) {
      var self = $module($base, 'Nodes');

      var $nesting = [self].concat($parent_nesting);

      
      (function($base, $super, $parent_nesting) {
        var self = $klass($base, $super, 'JsAttrNode');

        var $nesting = [self].concat($parent_nesting), $JsAttrNode_compile$1;

        
        self.$handle("jsattr");
        self.$children("recvr", "property");
        return (Opal.def(self, '$compile', $JsAttrNode_compile$1 = function $$compile() {
          var self = this;

          return self.$push(self.$recv(self.$recvr()), "[", self.$expr(self.$property()), "]")
        }, $JsAttrNode_compile$1.$$arity = 0), nil) && 'compile';
      })($nesting[0], $$($nesting, 'Base'), $nesting);
      (function($base, $super, $parent_nesting) {
        var self = $klass($base, $super, 'JsAttrAsgnNode');

        var $nesting = [self].concat($parent_nesting), $JsAttrAsgnNode_compile$2;

        
        self.$handle("jsattrasgn");
        self.$children("recvr", "property", "value");
        return (Opal.def(self, '$compile', $JsAttrAsgnNode_compile$2 = function $$compile() {
          var self = this;

          return self.$push(self.$recv(self.$recvr()), "[", self.$expr(self.$property()), "] = ", self.$expr(self.$value()))
        }, $JsAttrAsgnNode_compile$2.$$arity = 0), nil) && 'compile';
      })($nesting[0], $$($nesting, 'Base'), $nesting);
      (function($base, $super, $parent_nesting) {
        var self = $klass($base, $super, 'JsCallNode');

        var $nesting = [self].concat($parent_nesting), $JsCallNode_initialize$3, $JsCallNode_compile$4, $JsCallNode_method_jsid$5, $JsCallNode_compile_using_send$6;

        self.$$prototype.iter = self.$$prototype.arglist = nil;
        
        self.$handle("jscall");
        
        Opal.def(self, '$initialize', $JsCallNode_initialize$3 = function $$initialize($a) {
          var $post_args, $iter = $JsCallNode_initialize$3.$$p, $yield = $iter || nil, self = this, $zuper = nil, $zuper_i = nil, $zuper_ii = nil;

          if ($iter) $JsCallNode_initialize$3.$$p = null;
          // Prepare super implicit arguments
          for($zuper_i = 0, $zuper_ii = arguments.length, $zuper = new Array($zuper_ii); $zuper_i < $zuper_ii; $zuper_i++) {
            $zuper[$zuper_i] = arguments[$zuper_i];
          }
          
          
          $post_args = Opal.slice.call(arguments, 0, arguments.length);
          ;
          $send2(self, Opal.find_super_dispatcher(self, 'initialize', $JsCallNode_initialize$3, false, true), 'initialize', $zuper, $iter);
          if ($truthy(self.iter)) {
            self.arglist = self.arglist['$<<'](self.iter)};
          return (self.iter = nil);
        }, $JsCallNode_initialize$3.$$arity = -1);
        
        Opal.def(self, '$compile', $JsCallNode_compile$4 = function $$compile() {
          var self = this;

          return self.$default_compile()
        }, $JsCallNode_compile$4.$$arity = 0);
        
        Opal.def(self, '$method_jsid', $JsCallNode_method_jsid$5 = function $$method_jsid() {
          var self = this;

          return "" + "." + (self.$meth())
        }, $JsCallNode_method_jsid$5.$$arity = 0);
        return (Opal.def(self, '$compile_using_send', $JsCallNode_compile_using_send$6 = function $$compile_using_send() {
          var self = this;

          
          self.$push(self.$recv(self.$receiver_sexp()), self.$method_jsid(), ".apply(null");
          self.$compile_arguments();
          if ($truthy(self.$iter())) {
            self.$push(".concat(", self.$expr(self.$iter()), ")")};
          return self.$push(")");
        }, $JsCallNode_compile_using_send$6.$$arity = 0), nil) && 'compile_using_send';
      })($nesting[0], $$($nesting, 'CallNode'), $nesting);
      (function($base, $super, $parent_nesting) {
        var self = $klass($base, $super, 'Match3Node');

        var $nesting = [self].concat($parent_nesting), $Match3Node_compile$7;

        self.$$prototype.level = nil;
        
        self.$handle("match_with_lvasgn");
        self.$children("lhs", "rhs");
        return (Opal.def(self, '$compile', $Match3Node_compile$7 = function $$compile() {
          var self = this, sexp = nil;

          
          sexp = self.$s("send", self.$lhs(), "=~", self.$rhs());
          return self.$push(self.$process(sexp, self.level));
        }, $Match3Node_compile$7.$$arity = 0), nil) && 'compile';
      })($nesting[0], $$($nesting, 'Base'), $nesting);
    })($nesting[0], $nesting)
  })($nesting[0], $nesting);
};

/* Generated by Opal 1.0.0 */
Opal.modules["opal/nodes/scope"] = function(Opal) {
  function $rb_minus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs - rhs : lhs['$-'](rhs);
  }
  function $rb_plus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs + rhs : lhs['$+'](rhs);
  }
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.$$$, $$ = Opal.$$, $module = Opal.module, $klass = Opal.klass, $send2 = Opal.send2, $send = Opal.send, $truthy = Opal.truthy, $hash2 = Opal.hash2;

  Opal.add_stubs(['$require', '$attr_accessor', '$attr_reader', '$indent', '$scope', '$compiler', '$scope=', '$-', '$==', '$!', '$class?', '$dup', '$push', '$map', '$ivars', '$gvars', '$parser_indent', '$empty?', '$join', '$+', '$fragment', '$def_in_class?', '$add_proto_ivar', '$include?', '$<<', '$has_local?', '$has_temp?', '$pop', '$next_temp', '$loop', '$succ', '$uses_block!', '$identify!', '$compact', '$parent', '$name', '$scope_name', '$mid', '$unique_temp', '$add_scope_temp', '$def?', '$type', '$nil?', '$rescue_else_sexp']);
  
  self.$require("opal/nodes/base");
  return (function($base, $parent_nesting) {
    var self = $module($base, 'Opal');

    var $nesting = [self].concat($parent_nesting);

    (function($base, $parent_nesting) {
      var self = $module($base, 'Nodes');

      var $nesting = [self].concat($parent_nesting);

      (function($base, $super, $parent_nesting) {
        var self = $klass($base, $super, 'ScopeNode');

        var $nesting = [self].concat($parent_nesting), $ScopeNode_initialize$1, $ScopeNode_in_scope$2, $ScopeNode_class_scope$ques$4, $ScopeNode_class$ques$5, $ScopeNode_module$ques$6, $ScopeNode_sclass$ques$7, $ScopeNode_top$ques$8, $ScopeNode_iter$ques$9, $ScopeNode_def$ques$10, $ScopeNode_def_in_class$ques$11, $ScopeNode_to_vars$12, $ScopeNode_add_scope_ivar$17, $ScopeNode_add_scope_gvar$18, $ScopeNode_add_proto_ivar$19, $ScopeNode_add_arg$20, $ScopeNode_add_scope_local$21, $ScopeNode_has_local$ques$22, $ScopeNode_add_scope_temp$23, $ScopeNode_has_temp$ques$24, $ScopeNode_new_temp$25, $ScopeNode_next_temp$26, $ScopeNode_queue_temp$28, $ScopeNode_push_while$29, $ScopeNode_pop_while$30, $ScopeNode_in_while$ques$31, $ScopeNode_uses_block$excl$32, $ScopeNode_identify$excl$33, $ScopeNode_find_parent_def$34, $ScopeNode_super_chain$35, $ScopeNode_uses_block$ques$36, $ScopeNode_has_rescue_else$ques$37, $ScopeNode_in_ensure$38, $ScopeNode_in_ensure$ques$39;

        self.$$prototype.type = self.$$prototype.defs = self.$$prototype.parent = self.$$prototype.temps = self.$$prototype.locals = self.$$prototype.compiler = self.$$prototype.proto_ivars = self.$$prototype.ivars = self.$$prototype.gvars = self.$$prototype.args = self.$$prototype.queue = self.$$prototype.while_stack = self.$$prototype.identity = self.$$prototype.uses_block = self.$$prototype.in_ensure = nil;
        
        self.$attr_accessor("parent");
        self.$attr_accessor("name");
        self.$attr_accessor("block_name");
        self.$attr_reader("scope_name");
        self.$attr_reader("locals");
        self.$attr_reader("ivars");
        self.$attr_reader("gvars");
        self.$attr_accessor("mid");
        self.$attr_accessor("defs");
        self.$attr_reader("methods");
        self.$attr_accessor("uses_super");
        self.$attr_accessor("uses_zuper");
        self.$attr_accessor("catch_return", "has_break");
        self.$attr_accessor("rescue_else_sexp");
        
        Opal.def(self, '$initialize', $ScopeNode_initialize$1 = function $$initialize($a) {
          var $post_args, $iter = $ScopeNode_initialize$1.$$p, $yield = $iter || nil, self = this, $zuper = nil, $zuper_i = nil, $zuper_ii = nil;

          if ($iter) $ScopeNode_initialize$1.$$p = null;
          // Prepare super implicit arguments
          for($zuper_i = 0, $zuper_ii = arguments.length, $zuper = new Array($zuper_ii); $zuper_i < $zuper_ii; $zuper_i++) {
            $zuper[$zuper_i] = arguments[$zuper_i];
          }
          
          
          $post_args = Opal.slice.call(arguments, 0, arguments.length);
          ;
          $send2(self, Opal.find_super_dispatcher(self, 'initialize', $ScopeNode_initialize$1, false, true), 'initialize', $zuper, $iter);
          self.locals = [];
          self.temps = [];
          self.args = [];
          self.ivars = [];
          self.gvars = [];
          self.parent = nil;
          self.queue = [];
          self.unique = "a";
          self.while_stack = [];
          self.identity = nil;
          self.defs = nil;
          self.methods = [];
          self.uses_block = false;
          self.in_ensure = false;
          return (self.proto_ivars = []);
        }, $ScopeNode_initialize$1.$$arity = -1);
        
        Opal.def(self, '$in_scope', $ScopeNode_in_scope$2 = function $$in_scope() {
          var $$3, $iter = $ScopeNode_in_scope$2.$$p, $yield = $iter || nil, self = this;

          if ($iter) $ScopeNode_in_scope$2.$$p = null;
          return $send(self, 'indent', [], ($$3 = function(){var self = $$3.$$s == null ? this : $$3.$$s, $writer = nil;
            if (self.parent == null) self.parent = nil;

          
            self.parent = self.$compiler().$scope();
            
            $writer = [self];
            $send(self.$compiler(), 'scope=', Opal.to_a($writer));
            $writer[$rb_minus($writer["length"], 1)];;
            Opal.yield1($yield, self);
            
            $writer = [self.parent];
            $send(self.$compiler(), 'scope=', Opal.to_a($writer));
            return $writer[$rb_minus($writer["length"], 1)];;}, $$3.$$s = self, $$3.$$arity = 0, $$3))
        }, $ScopeNode_in_scope$2.$$arity = 0);
        
        Opal.def(self, '$class_scope?', $ScopeNode_class_scope$ques$4 = function() {
          var $a, self = this;

          return ($truthy($a = self.type['$==']("class")) ? $a : self.type['$==']("module"))
        }, $ScopeNode_class_scope$ques$4.$$arity = 0);
        
        Opal.def(self, '$class?', $ScopeNode_class$ques$5 = function() {
          var self = this;

          return self.type['$==']("class")
        }, $ScopeNode_class$ques$5.$$arity = 0);
        
        Opal.def(self, '$module?', $ScopeNode_module$ques$6 = function() {
          var self = this;

          return self.type['$==']("module")
        }, $ScopeNode_module$ques$6.$$arity = 0);
        
        Opal.def(self, '$sclass?', $ScopeNode_sclass$ques$7 = function() {
          var self = this;

          return self.type['$==']("sclass")
        }, $ScopeNode_sclass$ques$7.$$arity = 0);
        
        Opal.def(self, '$top?', $ScopeNode_top$ques$8 = function() {
          var self = this;

          return self.type['$==']("top")
        }, $ScopeNode_top$ques$8.$$arity = 0);
        
        Opal.def(self, '$iter?', $ScopeNode_iter$ques$9 = function() {
          var self = this;

          return self.type['$==']("iter")
        }, $ScopeNode_iter$ques$9.$$arity = 0);
        
        Opal.def(self, '$def?', $ScopeNode_def$ques$10 = function() {
          var $a, self = this;

          return ($truthy($a = self.type['$==']("def")) ? $a : self.type['$==']("defs"))
        }, $ScopeNode_def$ques$10.$$arity = 0);
        
        Opal.def(self, '$def_in_class?', $ScopeNode_def_in_class$ques$11 = function() {
          var $a, $b, $c, self = this;

          return ($truthy($a = ($truthy($b = ($truthy($c = self.defs['$!']()) ? self.type['$==']("def") : $c)) ? self.parent : $b)) ? self.parent['$class?']() : $a)
        }, $ScopeNode_def_in_class$ques$11.$$arity = 0);
        
        Opal.def(self, '$to_vars', $ScopeNode_to_vars$12 = function $$to_vars() {
          var $$13, $$14, $$15, $a, $$16, self = this, vars = nil, iv = nil, gv = nil, indent = nil, str = nil, pvars = nil, result = nil;

          
          vars = self.temps.$dup();
          $send(vars, 'push', Opal.to_a($send(self.locals, 'map', [], ($$13 = function(l){var self = $$13.$$s == null ? this : $$13.$$s;

          
            
            if (l == null) {
              l = nil;
            };
            return "" + (l) + " = nil";}, $$13.$$s = self, $$13.$$arity = 1, $$13))));
          iv = $send(self.$ivars(), 'map', [], ($$14 = function(ivar){var self = $$14.$$s == null ? this : $$14.$$s;

          
            
            if (ivar == null) {
              ivar = nil;
            };
            return "" + "if (self" + (ivar) + " == null) self" + (ivar) + " = nil;\n";}, $$14.$$s = self, $$14.$$arity = 1, $$14));
          gv = $send(self.$gvars(), 'map', [], ($$15 = function(gvar){var self = $$15.$$s == null ? this : $$15.$$s;

          
            
            if (gvar == null) {
              gvar = nil;
            };
            return "" + "if ($gvars" + (gvar) + " == null) $gvars" + (gvar) + " = nil;\n";}, $$15.$$s = self, $$15.$$arity = 1, $$15));
          indent = self.compiler.$parser_indent();
          str = (function() {if ($truthy(vars['$empty?']())) {
            return ""
          } else {
            return "" + "var " + (vars.$join(", ")) + ";\n"
          }; return nil; })();
          if ($truthy(self.$ivars()['$empty?']())) {
          } else {
            str = $rb_plus(str, "" + (indent) + (iv.$join(indent)))
          };
          if ($truthy(self.$gvars()['$empty?']())) {
          } else {
            str = $rb_plus(str, "" + (indent) + (gv.$join(indent)))
          };
          if ($truthy(($truthy($a = self['$class?']()) ? self.proto_ivars['$empty?']()['$!']() : $a))) {
            
            pvars = $send(self.proto_ivars, 'map', [], ($$16 = function(i){var self = $$16.$$s == null ? this : $$16.$$s;

            
              
              if (i == null) {
                i = nil;
              };
              return "" + "self.$$prototype" + (i);}, $$16.$$s = self, $$16.$$arity = 1, $$16)).$join(" = ");
            result = "" + (str) + "\n" + (indent) + (pvars) + " = nil;";
          } else {
            result = str
          };
          return self.$fragment(result);
        }, $ScopeNode_to_vars$12.$$arity = 0);
        
        Opal.def(self, '$add_scope_ivar', $ScopeNode_add_scope_ivar$17 = function $$add_scope_ivar(ivar) {
          var self = this;

          if ($truthy(self['$def_in_class?']())) {
            return self.parent.$add_proto_ivar(ivar)
          } else if ($truthy(self.ivars['$include?'](ivar))) {
            return nil
          } else {
            return self.ivars['$<<'](ivar)
          }
        }, $ScopeNode_add_scope_ivar$17.$$arity = 1);
        
        Opal.def(self, '$add_scope_gvar', $ScopeNode_add_scope_gvar$18 = function $$add_scope_gvar(gvar) {
          var self = this;

          if ($truthy(self.gvars['$include?'](gvar))) {
            return nil
          } else {
            return self.gvars['$<<'](gvar)
          }
        }, $ScopeNode_add_scope_gvar$18.$$arity = 1);
        
        Opal.def(self, '$add_proto_ivar', $ScopeNode_add_proto_ivar$19 = function $$add_proto_ivar(ivar) {
          var self = this;

          if ($truthy(self.proto_ivars['$include?'](ivar))) {
            return nil
          } else {
            return self.proto_ivars['$<<'](ivar)
          }
        }, $ScopeNode_add_proto_ivar$19.$$arity = 1);
        
        Opal.def(self, '$add_arg', $ScopeNode_add_arg$20 = function $$add_arg(arg) {
          var self = this;

          
          if ($truthy(self.args['$include?'](arg))) {
          } else {
            self.args['$<<'](arg)
          };
          return arg;
        }, $ScopeNode_add_arg$20.$$arity = 1);
        
        Opal.def(self, '$add_scope_local', $ScopeNode_add_scope_local$21 = function $$add_scope_local(local) {
          var self = this;

          
          if ($truthy(self['$has_local?'](local))) {
            return nil};
          return self.locals['$<<'](local);
        }, $ScopeNode_add_scope_local$21.$$arity = 1);
        
        Opal.def(self, '$has_local?', $ScopeNode_has_local$ques$22 = function(local) {
          var $a, $b, self = this;

          
          if ($truthy(($truthy($a = ($truthy($b = self.locals['$include?'](local)) ? $b : self.args['$include?'](local))) ? $a : self.temps['$include?'](local)))) {
            return true};
          if ($truthy(($truthy($a = self.parent) ? self.type['$==']("iter") : $a))) {
            return self.parent['$has_local?'](local)};
          return false;
        }, $ScopeNode_has_local$ques$22.$$arity = 1);
        
        Opal.def(self, '$add_scope_temp', $ScopeNode_add_scope_temp$23 = function $$add_scope_temp(tmp) {
          var self = this;

          
          if ($truthy(self['$has_temp?'](tmp))) {
            return nil};
          return self.temps.$push(tmp);
        }, $ScopeNode_add_scope_temp$23.$$arity = 1);
        
        Opal.def(self, '$has_temp?', $ScopeNode_has_temp$ques$24 = function(tmp) {
          var self = this;

          return self.temps['$include?'](tmp)
        }, $ScopeNode_has_temp$ques$24.$$arity = 1);
        
        Opal.def(self, '$new_temp', $ScopeNode_new_temp$25 = function $$new_temp() {
          var self = this, tmp = nil;

          
          if ($truthy(self.queue['$empty?']())) {
          } else {
            return self.queue.$pop()
          };
          tmp = self.$next_temp();
          self.temps['$<<'](tmp);
          return tmp;
        }, $ScopeNode_new_temp$25.$$arity = 0);
        
        Opal.def(self, '$next_temp', $ScopeNode_next_temp$26 = function $$next_temp() {
          var $$27, self = this, tmp = nil;

          
          tmp = nil;
          (function(){var $brk = Opal.new_brk(); try {return $send(self, 'loop', [], ($$27 = function(){var self = $$27.$$s == null ? this : $$27.$$s;
            if (self.unique == null) self.unique = nil;

          
            tmp = "" + "$" + (self.unique);
            self.unique = self.unique.$succ();
            if ($truthy(self['$has_local?'](tmp))) {
              return nil
            } else {
              
              Opal.brk(nil, $brk)
            };}, $$27.$$s = self, $$27.$$brk = $brk, $$27.$$arity = 0, $$27))
          } catch (err) { if (err === $brk) { return err.$v } else { throw err } }})();
          return tmp;
        }, $ScopeNode_next_temp$26.$$arity = 0);
        
        Opal.def(self, '$queue_temp', $ScopeNode_queue_temp$28 = function $$queue_temp(name) {
          var self = this;

          return self.queue['$<<'](name)
        }, $ScopeNode_queue_temp$28.$$arity = 1);
        
        Opal.def(self, '$push_while', $ScopeNode_push_while$29 = function $$push_while() {
          var self = this, info = nil;

          
          info = $hash2([], {});
          self.while_stack.$push(info);
          return info;
        }, $ScopeNode_push_while$29.$$arity = 0);
        
        Opal.def(self, '$pop_while', $ScopeNode_pop_while$30 = function $$pop_while() {
          var self = this;

          return self.while_stack.$pop()
        }, $ScopeNode_pop_while$30.$$arity = 0);
        
        Opal.def(self, '$in_while?', $ScopeNode_in_while$ques$31 = function() {
          var self = this;

          return self.while_stack['$empty?']()['$!']()
        }, $ScopeNode_in_while$ques$31.$$arity = 0);
        
        Opal.def(self, '$uses_block!', $ScopeNode_uses_block$excl$32 = function() {
          var $a, self = this;

          if ($truthy((($a = self.type['$==']("iter")) ? self.parent : self.type['$==']("iter")))) {
            return self.parent['$uses_block!']()
          } else {
            
            self.uses_block = true;
            return self['$identify!']();
          }
        }, $ScopeNode_uses_block$excl$32.$$arity = 0);
        
        Opal.def(self, '$identify!', $ScopeNode_identify$excl$33 = function(name) {
          var $a, $b, $c, self = this;

          
          
          if (name == null) {
            name = nil;
          };
          if ($truthy(self.identity)) {
            return self.identity};
          name = ($truthy($a = name) ? $a : [($truthy($b = self.$parent()) ? ($truthy($c = self.$parent().$name()) ? $c : self.$parent().$scope_name()) : $b), self.$mid()].$compact().$join("_"));
          self.identity = self.compiler.$unique_temp(name);
          if ($truthy(self.parent)) {
            self.parent.$add_scope_temp(self.identity)};
          return self.identity;
        }, $ScopeNode_identify$excl$33.$$arity = -1);
        self.$attr_reader("identity");
        
        Opal.def(self, '$find_parent_def', $ScopeNode_find_parent_def$34 = function $$find_parent_def() {
          var $a, self = this, scope = nil;

          
          scope = self;
          while ($truthy((scope = scope.$parent()))) {
            if ($truthy(scope['$def?']())) {
              return scope}
          };
          return nil;
        }, $ScopeNode_find_parent_def$34.$$arity = 0);
        
        Opal.def(self, '$super_chain', $ScopeNode_super_chain$35 = function $$super_chain() {
          var $a, self = this, chain = nil, scope = nil, defn = nil, mid = nil;

          
          $a = [[], self, "null", "null"], (chain = $a[0]), (scope = $a[1]), (defn = $a[2]), (mid = $a[3]), $a;
          while ($truthy(scope)) {
            if (scope.$type()['$==']("iter")) {
              
              chain['$<<'](scope['$identify!']());
              if ($truthy(scope.$parent())) {
                scope = scope.$parent()};
            } else if ($truthy(["def", "defs"]['$include?'](scope.$type()))) {
              
              defn = scope['$identify!']();
              mid = "" + "'" + (scope.$mid()) + "'";
              break;;
            } else {
              break;
            }
          };
          return [chain, defn, mid];
        }, $ScopeNode_super_chain$35.$$arity = 0);
        
        Opal.def(self, '$uses_block?', $ScopeNode_uses_block$ques$36 = function() {
          var self = this;

          return self.uses_block
        }, $ScopeNode_uses_block$ques$36.$$arity = 0);
        
        Opal.def(self, '$has_rescue_else?', $ScopeNode_has_rescue_else$ques$37 = function() {
          var self = this;

          return self.$rescue_else_sexp()['$nil?']()['$!']()
        }, $ScopeNode_has_rescue_else$ques$37.$$arity = 0);
        
        Opal.def(self, '$in_ensure', $ScopeNode_in_ensure$38 = function $$in_ensure() {
          var $iter = $ScopeNode_in_ensure$38.$$p, $yield = $iter || nil, self = this, result = nil;

          if ($iter) $ScopeNode_in_ensure$38.$$p = null;
          
          if (($yield !== nil)) {
          } else {
            return nil
          };
          self.in_ensure = true;
          result = Opal.yieldX($yield, []);
          self.in_ensure = false;
          return result;
        }, $ScopeNode_in_ensure$38.$$arity = 0);
        return (Opal.def(self, '$in_ensure?', $ScopeNode_in_ensure$ques$39 = function() {
          var self = this;

          return self.in_ensure
        }, $ScopeNode_in_ensure$ques$39.$$arity = 0), nil) && 'in_ensure?';
      })($nesting[0], $$($nesting, 'Base'), $nesting)
    })($nesting[0], $nesting)
  })($nesting[0], $nesting);
};

/* Generated by Opal 1.0.0 */
Opal.modules["opal/nodes/module"] = function(Opal) {
  function $rb_minus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs - rhs : lhs['$-'](rhs);
  }
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.$$$, $$ = Opal.$$, $module = Opal.module, $klass = Opal.klass, $send = Opal.send, $truthy = Opal.truthy;

  Opal.add_stubs(['$require', '$handle', '$children', '$name_and_base', '$helper', '$push', '$line', '$in_scope', '$name=', '$scope', '$-', '$add_temp', '$stmt', '$body', '$s', '$empty_line', '$to_vars', '$cid', '$nil?', '$expr']);
  
  self.$require("opal/nodes/scope");
  return (function($base, $parent_nesting) {
    var self = $module($base, 'Opal');

    var $nesting = [self].concat($parent_nesting);

    (function($base, $parent_nesting) {
      var self = $module($base, 'Nodes');

      var $nesting = [self].concat($parent_nesting);

      (function($base, $super, $parent_nesting) {
        var self = $klass($base, $super, 'ModuleNode');

        var $nesting = [self].concat($parent_nesting), $ModuleNode_compile$1, $ModuleNode_name_and_base$3;

        
        self.$handle("module");
        self.$children("cid", "body");
        
        Opal.def(self, '$compile', $ModuleNode_compile$1 = function $$compile() {
          var $a, $b, $$2, self = this, name = nil, base = nil;

          
          $b = self.$name_and_base(), $a = Opal.to_ary($b), (name = ($a[0] == null ? nil : $a[0])), (base = ($a[1] == null ? nil : $a[1])), $b;
          self.$helper("module");
          self.$push("(function($base, $parent_nesting) {");
          self.$line("" + "  var self = $module($base, '" + (name) + "');");
          $send(self, 'in_scope', [], ($$2 = function(){var self = $$2.$$s == null ? this : $$2.$$s, $c, $writer = nil, body_code = nil;

          
            
            $writer = [name];
            $send(self.$scope(), 'name=', Opal.to_a($writer));
            $writer[$rb_minus($writer["length"], 1)];;
            self.$add_temp("$nesting = [self].concat($parent_nesting)");
            body_code = self.$stmt(($truthy($c = self.$body()) ? $c : self.$s("nil")));
            self.$empty_line();
            self.$line(self.$scope().$to_vars());
            return self.$line(body_code);}, $$2.$$s = self, $$2.$$arity = 0, $$2));
          return self.$line("})(", base, ", $nesting)");
        }, $ModuleNode_compile$1.$$arity = 0);
        return (Opal.def(self, '$name_and_base', $ModuleNode_name_and_base$3 = function $$name_and_base() {
          var $a, $b, self = this, base = nil, name = nil;

          
          $b = self.$cid().$children(), $a = Opal.to_ary($b), (base = ($a[0] == null ? nil : $a[0])), (name = ($a[1] == null ? nil : $a[1])), $b;
          if ($truthy(base['$nil?']())) {
            return [name, "$nesting[0]"]
          } else {
            return [name, self.$expr(base)]
          };
        }, $ModuleNode_name_and_base$3.$$arity = 0), nil) && 'name_and_base';
      })($nesting[0], $$($nesting, 'ScopeNode'), $nesting)
    })($nesting[0], $nesting)
  })($nesting[0], $nesting);
};

/* Generated by Opal 1.0.0 */
Opal.modules["opal/nodes/class"] = function(Opal) {
  function $rb_minus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs - rhs : lhs['$-'](rhs);
  }
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.$$$, $$ = Opal.$$, $module = Opal.module, $klass = Opal.klass, $send = Opal.send, $truthy = Opal.truthy;

  Opal.add_stubs(['$require', '$handle', '$children', '$name_and_base', '$helper', '$push', '$line', '$in_scope', '$name=', '$scope', '$-', '$add_temp', '$body_code', '$empty_line', '$to_vars', '$super_code', '$sup', '$expr', '$stmt', '$returns', '$compiler', '$body', '$s']);
  
  self.$require("opal/nodes/module");
  return (function($base, $parent_nesting) {
    var self = $module($base, 'Opal');

    var $nesting = [self].concat($parent_nesting);

    (function($base, $parent_nesting) {
      var self = $module($base, 'Nodes');

      var $nesting = [self].concat($parent_nesting);

      (function($base, $super, $parent_nesting) {
        var self = $klass($base, $super, 'ClassNode');

        var $nesting = [self].concat($parent_nesting), $ClassNode_compile$1, $ClassNode_super_code$3, $ClassNode_body_code$4;

        
        self.$handle("class");
        self.$children("cid", "sup", "body");
        
        Opal.def(self, '$compile', $ClassNode_compile$1 = function $$compile() {
          var $a, $b, $$2, self = this, name = nil, base = nil;

          
          $b = self.$name_and_base(), $a = Opal.to_ary($b), (name = ($a[0] == null ? nil : $a[0])), (base = ($a[1] == null ? nil : $a[1])), $b;
          self.$helper("klass");
          self.$push("(function($base, $super, $parent_nesting) {");
          self.$line("" + "  var self = $klass($base, $super, '" + (name) + "');");
          $send(self, 'in_scope', [], ($$2 = function(){var self = $$2.$$s == null ? this : $$2.$$s, $writer = nil, body_code = nil;

          
            
            $writer = [name];
            $send(self.$scope(), 'name=', Opal.to_a($writer));
            $writer[$rb_minus($writer["length"], 1)];;
            self.$add_temp("$nesting = [self].concat($parent_nesting)");
            body_code = self.$body_code();
            self.$empty_line();
            self.$line(self.$scope().$to_vars());
            return self.$line(body_code);}, $$2.$$s = self, $$2.$$arity = 0, $$2));
          return self.$line("})(", base, ", ", self.$super_code(), ", $nesting)");
        }, $ClassNode_compile$1.$$arity = 0);
        
        Opal.def(self, '$super_code', $ClassNode_super_code$3 = function $$super_code() {
          var self = this;

          if ($truthy(self.$sup())) {
            return self.$expr(self.$sup())
          } else {
            return "null"
          }
        }, $ClassNode_super_code$3.$$arity = 0);
        return (Opal.def(self, '$body_code', $ClassNode_body_code$4 = function $$body_code() {
          var $a, self = this;

          return self.$stmt(self.$compiler().$returns(($truthy($a = self.$body()) ? $a : self.$s("nil"))))
        }, $ClassNode_body_code$4.$$arity = 0), nil) && 'body_code';
      })($nesting[0], $$($nesting, 'ModuleNode'), $nesting)
    })($nesting[0], $nesting)
  })($nesting[0], $nesting);
};

/* Generated by Opal 1.0.0 */
Opal.modules["opal/nodes/singleton_class"] = function(Opal) {
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.$$$, $$ = Opal.$$, $module = Opal.module, $klass = Opal.klass, $send = Opal.send;

  Opal.add_stubs(['$require', '$handle', '$children', '$push', '$in_scope', '$add_temp', '$stmt', '$returns', '$compiler', '$body', '$line', '$to_vars', '$scope', '$recv', '$object']);
  
  self.$require("opal/nodes/scope");
  return (function($base, $parent_nesting) {
    var self = $module($base, 'Opal');

    var $nesting = [self].concat($parent_nesting);

    (function($base, $parent_nesting) {
      var self = $module($base, 'Nodes');

      var $nesting = [self].concat($parent_nesting);

      (function($base, $super, $parent_nesting) {
        var self = $klass($base, $super, 'SingletonClassNode');

        var $nesting = [self].concat($parent_nesting), $SingletonClassNode_compile$1;

        
        self.$handle("sclass");
        self.$children("object", "body");
        return (Opal.def(self, '$compile', $SingletonClassNode_compile$1 = function $$compile() {
          var $$2, self = this;

          
          self.$push("(function(self, $parent_nesting) {");
          $send(self, 'in_scope', [], ($$2 = function(){var self = $$2.$$s == null ? this : $$2.$$s, body_stmt = nil;

          
            self.$add_temp("$nesting = [self].concat($parent_nesting)");
            body_stmt = self.$stmt(self.$compiler().$returns(self.$body()));
            self.$line(self.$scope().$to_vars());
            return self.$line(body_stmt);}, $$2.$$s = self, $$2.$$arity = 0, $$2));
          return self.$line("})(Opal.get_singleton_class(", self.$recv(self.$object()), "), $nesting)");
        }, $SingletonClassNode_compile$1.$$arity = 0), nil) && 'compile';
      })($nesting[0], $$($nesting, 'ScopeNode'), $nesting)
    })($nesting[0], $nesting)
  })($nesting[0], $nesting);
};

/* Generated by Opal 1.0.0 */
Opal.modules["opal/nodes/args/arg"] = function(Opal) {
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.$$$, $$ = Opal.$$, $module = Opal.module, $klass = Opal.klass;

  Opal.add_stubs(['$require', '$handle', '$children', '$add_arg', '$scope', '$name', '$push', '$to_s']);
  
  self.$require("opal/nodes/base");
  return (function($base, $parent_nesting) {
    var self = $module($base, 'Opal');

    var $nesting = [self].concat($parent_nesting);

    (function($base, $parent_nesting) {
      var self = $module($base, 'Nodes');

      var $nesting = [self].concat($parent_nesting);

      (function($base, $parent_nesting) {
        var self = $module($base, 'Args');

        var $nesting = [self].concat($parent_nesting);

        (function($base, $super, $parent_nesting) {
          var self = $klass($base, $super, 'ArgNode');

          var $nesting = [self].concat($parent_nesting), $ArgNode_compile$1;

          
          self.$handle("arg");
          self.$children("name");
          return (Opal.def(self, '$compile', $ArgNode_compile$1 = function $$compile() {
            var self = this;

            
            self.$scope().$add_arg(self.$name());
            return self.$push(self.$name().$to_s());
          }, $ArgNode_compile$1.$$arity = 0), nil) && 'compile';
        })($nesting[0], $$($nesting, 'Base'), $nesting)
      })($nesting[0], $nesting)
    })($nesting[0], $nesting)
  })($nesting[0], $nesting);
};

/* Generated by Opal 1.0.0 */
Opal.modules["opal/nodes/args/arity_check"] = function(Opal) {
  function $rb_minus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs - rhs : lhs['$-'](rhs);
  }
  function $rb_lt(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs < rhs : lhs['$<'](rhs);
  }
  function $rb_plus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs + rhs : lhs['$+'](rhs);
  }
  function $rb_gt(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs > rhs : lhs['$>'](rhs);
  }
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.$$$, $$ = Opal.$$, $module = Opal.module, $klass = Opal.klass, $send2 = Opal.send2, $send = Opal.send, $truthy = Opal.truthy;

  Opal.add_stubs(['$require', '$handle', '$children', '$new', '$args_node', '$args', '$optargs', '$restarg', '$postargs', '$kwargs', '$kwoptargs', '$kwrestarg', '$arity', '$arity=', '$scope', '$-', '$arity_check?', '$compiler', '$empty?', '$arity_checks', '$helper', '$inspect', '$to_s', '$mid', '$line', '$push', '$join', '$compact', '$size', '$all_args', '$!', '$-@', '$<', '$+', '$>', '$<<', '$any?', '$has_only_optional_kwargs?', '$negative_arity', '$positive_arity', '$select', '$include?', '$type', '$has_required_kwargs?', '$all?', '$==', '$def?', '$class_scope?', '$top?', '$parent', '$class?', '$name', '$module?', '$identity']);
  
  self.$require("opal/nodes/base");
  self.$require("opal/rewriters/arguments");
  return (function($base, $parent_nesting) {
    var self = $module($base, 'Opal');

    var $nesting = [self].concat($parent_nesting);

    (function($base, $parent_nesting) {
      var self = $module($base, 'Nodes');

      var $nesting = [self].concat($parent_nesting);

      
      (function($base, $super, $parent_nesting) {
        var self = $klass($base, $super, 'ArityCheckNode');

        var $nesting = [self].concat($parent_nesting), $ArityCheckNode_initialize$1, $ArityCheckNode_compile$2, $ArityCheckNode_kwargs$3, $ArityCheckNode_all_args$4, $ArityCheckNode_arity_checks$5, $ArityCheckNode_arity$6, $ArityCheckNode_negative_arity$7, $ArityCheckNode_positive_arity$9, $ArityCheckNode_has_only_optional_kwargs$ques$10, $ArityCheckNode_has_required_kwargs$ques$12;

        self.$$prototype.kwargs = self.$$prototype.kwoptargs = self.$$prototype.kwrestarg = self.$$prototype.all_args = self.$$prototype.args = self.$$prototype.optargs = self.$$prototype.restarg = self.$$prototype.postargs = self.$$prototype.arity_checks = nil;
        
        self.$handle("arity_check");
        self.$children("args_node");
        
        Opal.def(self, '$initialize', $ArityCheckNode_initialize$1 = function $$initialize($a) {
          var $post_args, $iter = $ArityCheckNode_initialize$1.$$p, $yield = $iter || nil, self = this, arguments$ = nil, $zuper = nil, $zuper_i = nil, $zuper_ii = nil;

          if ($iter) $ArityCheckNode_initialize$1.$$p = null;
          // Prepare super implicit arguments
          for($zuper_i = 0, $zuper_ii = arguments.length, $zuper = new Array($zuper_ii); $zuper_i < $zuper_ii; $zuper_i++) {
            $zuper[$zuper_i] = arguments[$zuper_i];
          }
          
          
          $post_args = Opal.slice.call(arguments, 0, arguments.length);
          ;
          $send2(self, Opal.find_super_dispatcher(self, 'initialize', $ArityCheckNode_initialize$1, false, true), 'initialize', $zuper, $iter);
          arguments$ = $$$($$($nesting, 'Rewriters'), 'Arguments').$new(self.$args_node().$children());
          self.args = arguments$.$args();
          self.optargs = arguments$.$optargs();
          self.restarg = arguments$.$restarg();
          self.postargs = arguments$.$postargs();
          self.kwargs = arguments$.$kwargs();
          self.kwoptargs = arguments$.$kwoptargs();
          return (self.kwrestarg = arguments$.$kwrestarg());
        }, $ArityCheckNode_initialize$1.$$arity = -1);
        
        Opal.def(self, '$compile', $ArityCheckNode_compile$2 = function $$compile() {
          var self = this, $writer = nil, meth = nil;

          
          
          $writer = [self.$arity()];
          $send(self.$scope(), 'arity=', Opal.to_a($writer));
          $writer[$rb_minus($writer["length"], 1)];;
          if ($truthy(self.$compiler()['$arity_check?']())) {
          } else {
            return nil
          };
          if ($truthy(self.$arity_checks()['$empty?']())) {
            return nil
          } else {
            
            self.$helper("ac");
            meth = self.$scope().$mid().$to_s().$inspect();
            self.$line("var $arity = arguments.length;");
            return self.$push("" + " if (" + (self.$arity_checks().$join(" || ")) + ") { $ac($arity, " + (self.$arity()) + ", this, " + (meth) + "); }");
          };
        }, $ArityCheckNode_compile$2.$$arity = 0);
        
        Opal.def(self, '$kwargs', $ArityCheckNode_kwargs$3 = function $$kwargs() {
          var self = this;

          return [].concat(Opal.to_a(self.kwargs)).concat(Opal.to_a(self.kwoptargs)).concat([self.kwrestarg]).$compact()
        }, $ArityCheckNode_kwargs$3.$$arity = 0);
        
        Opal.def(self, '$all_args', $ArityCheckNode_all_args$4 = function $$all_args() {
          var $a, self = this;

          return (self.all_args = ($truthy($a = self.all_args) ? $a : [].concat(Opal.to_a(self.args)).concat(Opal.to_a(self.optargs)).concat([self.restarg]).concat(Opal.to_a(self.postargs)).concat(Opal.to_a(self.$kwargs())).$compact()))
        }, $ArityCheckNode_all_args$4.$$arity = 0);
        
        Opal.def(self, '$arity_checks', $ArityCheckNode_arity_checks$5 = function $$arity_checks() {
          var $a, $b, $c, self = this, arity = nil, min_arity = nil, max_arity = nil;

          
          if ($truthy((($a = self['arity_checks'], $a != null && $a !== nil) ? 'instance-variable' : nil))) {
            return self.arity_checks};
          arity = self.$all_args().$size();
          arity = $rb_minus(arity, self.optargs.$size());
          if ($truthy(self.restarg)) {
            arity = $rb_minus(arity, 1)};
          arity = $rb_minus(arity, self.$kwargs().$size());
          if ($truthy(($truthy($b = ($truthy($c = self.optargs['$empty?']()['$!']()) ? $c : self.$kwargs()['$empty?']()['$!']())) ? $b : self.restarg))) {
            arity = $rb_minus(arity['$-@'](), 1)};
          self.arity_checks = [];
          if ($truthy($rb_lt(arity, 0))) {
            
            min_arity = $rb_plus(arity, 1)['$-@']();
            max_arity = self.$all_args().$size();
            if ($truthy($rb_gt(min_arity, 0))) {
              self.arity_checks['$<<']("" + "$arity < " + (min_arity))};
            if ($truthy(self.restarg)) {
            } else {
              self.arity_checks['$<<']("" + "$arity > " + (max_arity))
            };
          } else {
            self.arity_checks['$<<']("" + "$arity !== " + (arity))
          };
          return self.arity_checks;
        }, $ArityCheckNode_arity_checks$5.$$arity = 0);
        
        Opal.def(self, '$arity', $ArityCheckNode_arity$6 = function $$arity() {
          var $a, $b, self = this;

          if ($truthy(($truthy($a = ($truthy($b = self.restarg) ? $b : self.optargs['$any?']())) ? $a : self['$has_only_optional_kwargs?']()))) {
            return self.$negative_arity()
          } else {
            return self.$positive_arity()
          }
        }, $ArityCheckNode_arity$6.$$arity = 0);
        
        Opal.def(self, '$negative_arity', $ArityCheckNode_negative_arity$7 = function $$negative_arity() {
          var $$8, self = this, required_plain_args = nil, result = nil;

          
          required_plain_args = $send(self.$all_args(), 'select', [], ($$8 = function(arg){var self = $$8.$$s == null ? this : $$8.$$s;

          
            
            if (arg == null) {
              arg = nil;
            };
            return ["arg", "mlhs"]['$include?'](arg.$type());}, $$8.$$s = self, $$8.$$arity = 1, $$8));
          result = required_plain_args.$size();
          if ($truthy(self['$has_required_kwargs?']())) {
            result = $rb_plus(result, 1)};
          result = $rb_minus(result['$-@'](), 1);
          return result;
        }, $ArityCheckNode_negative_arity$7.$$arity = 0);
        
        Opal.def(self, '$positive_arity', $ArityCheckNode_positive_arity$9 = function $$positive_arity() {
          var self = this, result = nil;

          
          result = self.$all_args().$size();
          result = $rb_minus(result, self.$kwargs().$size());
          if ($truthy(self.$kwargs()['$any?']())) {
            result = $rb_plus(result, 1)};
          return result;
        }, $ArityCheckNode_positive_arity$9.$$arity = 0);
        
        Opal.def(self, '$has_only_optional_kwargs?', $ArityCheckNode_has_only_optional_kwargs$ques$10 = function() {
          var $a, $$11, self = this;

          return ($truthy($a = self.$kwargs()['$any?']()) ? $send(self.$kwargs(), 'all?', [], ($$11 = function(arg){var self = $$11.$$s == null ? this : $$11.$$s;

          
            
            if (arg == null) {
              arg = nil;
            };
            return ["kwoptarg", "kwrestarg"]['$include?'](arg.$type());}, $$11.$$s = self, $$11.$$arity = 1, $$11)) : $a)
        }, $ArityCheckNode_has_only_optional_kwargs$ques$10.$$arity = 0);
        return (Opal.def(self, '$has_required_kwargs?', $ArityCheckNode_has_required_kwargs$ques$12 = function() {
          var $$13, self = this;

          return $send(self.$kwargs(), 'any?', [], ($$13 = function(arg){var self = $$13.$$s == null ? this : $$13.$$s;

          
            
            if (arg == null) {
              arg = nil;
            };
            return arg.$type()['$==']("kwarg");}, $$13.$$s = self, $$13.$$arity = 1, $$13))
        }, $ArityCheckNode_has_required_kwargs$ques$12.$$arity = 0), nil) && 'has_required_kwargs?';
      })($nesting[0], $$($nesting, 'Base'), $nesting);
      (function($base, $super, $parent_nesting) {
        var self = $klass($base, $super, 'IterArityCheckNode');

        var $nesting = [self].concat($parent_nesting), $IterArityCheckNode_compile$14;

        
        self.$handle("iter_arity_check");
        return (Opal.def(self, '$compile', $IterArityCheckNode_compile$14 = function $$compile() {
          var $a, $b, $c, self = this, $writer = nil, parent_scope = nil, context = nil, identity = nil;

          
          
          $writer = [self.$arity()];
          $send(self.$scope(), 'arity=', Opal.to_a($writer));
          $writer[$rb_minus($writer["length"], 1)];;
          if ($truthy(self.$compiler()['$arity_check?']())) {
          } else {
            return nil
          };
          if ($truthy(self.$arity_checks()['$empty?']())) {
            return nil
          } else {
            
            parent_scope = self.$scope();
            while (!($truthy(($truthy($b = ($truthy($c = parent_scope['$def?']()) ? $c : parent_scope['$class_scope?']())) ? $b : parent_scope['$top?']())))) {
              parent_scope = parent_scope.$parent()
            };
            context = (function() {if ($truthy(parent_scope['$top?']())) {
              return "'<main>'"
            } else if ($truthy(parent_scope['$def?']())) {
              return "" + "'" + (parent_scope.$mid()) + "'"
            } else if ($truthy(parent_scope['$class?']())) {
              return "" + "'<class:" + (parent_scope.$name()) + ">'"
            } else if ($truthy(parent_scope['$module?']())) {
              return "" + "'<module:" + (parent_scope.$name()) + ">'"
            } else {
              return nil
            }; return nil; })();
            identity = self.$scope().$identity();
            self.$line("" + "if (" + (identity) + ".$$is_lambda || " + (identity) + ".$$define_meth) {");
            self.$line("  var $arity = arguments.length;");
            self.$line("" + "  if (" + (self.$arity_checks().$join(" || ")) + ") { Opal.block_ac($arity, " + (self.$arity()) + ", " + (context) + "); }");
            return self.$line("}");
          };
        }, $IterArityCheckNode_compile$14.$$arity = 0), nil) && 'compile';
      })($nesting[0], $$($nesting, 'ArityCheckNode'), $nesting);
    })($nesting[0], $nesting)
  })($nesting[0], $nesting);
};

/* Generated by Opal 1.0.0 */
Opal.modules["opal/nodes/args/ensure_kwargs_are_kwargs"] = function(Opal) {
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.$$$, $$ = Opal.$$, $module = Opal.module, $klass = Opal.klass;

  Opal.add_stubs(['$require', '$handle', '$helper', '$line']);
  
  self.$require("opal/nodes/base");
  return (function($base, $parent_nesting) {
    var self = $module($base, 'Opal');

    var $nesting = [self].concat($parent_nesting);

    (function($base, $parent_nesting) {
      var self = $module($base, 'Nodes');

      var $nesting = [self].concat($parent_nesting);

      (function($base, $parent_nesting) {
        var self = $module($base, 'Args');

        var $nesting = [self].concat($parent_nesting);

        (function($base, $super, $parent_nesting) {
          var self = $klass($base, $super, 'EnsureKwargsAreKwargs');

          var $nesting = [self].concat($parent_nesting), $EnsureKwargsAreKwargs_compile$1;

          
          self.$handle("ensure_kwargs_are_kwargs");
          return (Opal.def(self, '$compile', $EnsureKwargsAreKwargs_compile$1 = function $$compile() {
            var self = this;

            
            self.$helper("hash2");
            self.$line("if ($kwargs == null) {");
            self.$line("  $kwargs = $hash2([], {});");
            self.$line("} else if (!$kwargs.$$is_hash) {");
            self.$line("  throw Opal.ArgumentError.$new('expected kwargs');");
            return self.$line("}");
          }, $EnsureKwargsAreKwargs_compile$1.$$arity = 0), nil) && 'compile';
        })($nesting[0], $$($nesting, 'Base'), $nesting)
      })($nesting[0], $nesting)
    })($nesting[0], $nesting)
  })($nesting[0], $nesting);
};

/* Generated by Opal 1.0.0 */
Opal.modules["opal/nodes/args/extract_block_arg"] = function(Opal) {
  function $rb_minus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs - rhs : lhs['$-'](rhs);
  }
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.$$$, $$ = Opal.$$, $module = Opal.module, $klass = Opal.klass, $send = Opal.send;

  Opal.add_stubs(['$require', '$handle', '$children', '$uses_block!', '$scope', '$add_arg', '$name', '$block_name=', '$-', '$identity', '$block_name', '$add_temp', '$line']);
  
  self.$require("opal/nodes/base");
  return (function($base, $parent_nesting) {
    var self = $module($base, 'Opal');

    var $nesting = [self].concat($parent_nesting);

    (function($base, $parent_nesting) {
      var self = $module($base, 'Nodes');

      var $nesting = [self].concat($parent_nesting);

      (function($base, $parent_nesting) {
        var self = $module($base, 'Args');

        var $nesting = [self].concat($parent_nesting);

        (function($base, $super, $parent_nesting) {
          var self = $klass($base, $super, 'ExtractBlockarg');

          var $nesting = [self].concat($parent_nesting), $ExtractBlockarg_compile$1;

          
          self.$handle("extract_blockarg");
          self.$children("name");
          return (Opal.def(self, '$compile', $ExtractBlockarg_compile$1 = function $$compile() {
            var self = this, $writer = nil, scope_name = nil, yielder = nil;

            
            self.$scope()['$uses_block!']();
            self.$scope().$add_arg(self.$name());
            
            $writer = [self.$name()];
            $send(self.$scope(), 'block_name=', Opal.to_a($writer));
            $writer[$rb_minus($writer["length"], 1)];;
            scope_name = self.$scope().$identity();
            yielder = self.$scope().$block_name();
            self.$add_temp("" + "$iter = " + (scope_name) + ".$$p");
            self.$add_temp("" + (yielder) + " = $iter || nil");
            return self.$line("" + "if ($iter) " + (scope_name) + ".$$p = null;");
          }, $ExtractBlockarg_compile$1.$$arity = 0), nil) && 'compile';
        })($nesting[0], $$($nesting, 'Base'), $nesting)
      })($nesting[0], $nesting)
    })($nesting[0], $nesting)
  })($nesting[0], $nesting);
};

/* Generated by Opal 1.0.0 */
Opal.modules["opal/nodes/args/extract_kwarg"] = function(Opal) {
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.$$$, $$ = Opal.$$, $module = Opal.module, $klass = Opal.klass;

  Opal.add_stubs(['$require', '$handle', '$children', '$[]', '$meta', '$<<', '$used_kwargs', '$scope', '$add_temp', '$lvar_name', '$line', '$inspect', '$to_s']);
  
  self.$require("opal/nodes/base");
  return (function($base, $parent_nesting) {
    var self = $module($base, 'Opal');

    var $nesting = [self].concat($parent_nesting);

    (function($base, $parent_nesting) {
      var self = $module($base, 'Nodes');

      var $nesting = [self].concat($parent_nesting);

      (function($base, $parent_nesting) {
        var self = $module($base, 'Args');

        var $nesting = [self].concat($parent_nesting);

        (function($base, $super, $parent_nesting) {
          var self = $klass($base, $super, 'ExtractKwarg');

          var $nesting = [self].concat($parent_nesting), $ExtractKwarg_compile$1;

          self.$$prototype.sexp = nil;
          
          self.$handle("extract_kwarg");
          self.$children("lvar_name");
          return (Opal.def(self, '$compile', $ExtractKwarg_compile$1 = function $$compile() {
            var self = this, key_name = nil;

            
            key_name = self.sexp.$meta()['$[]']("arg_name");
            self.$scope().$used_kwargs()['$<<'](key_name);
            self.$add_temp(self.$lvar_name());
            self.$line("" + "if (!Opal.hasOwnProperty.call($kwargs.$$smap, '" + (key_name) + "')) {");
            self.$line("" + "  throw Opal.ArgumentError.$new('missing keyword: " + (key_name) + "');");
            self.$line("}");
            return self.$line("" + (self.$lvar_name()) + " = $kwargs.$$smap[" + (key_name.$to_s().$inspect()) + "];");
          }, $ExtractKwarg_compile$1.$$arity = 0), nil) && 'compile';
        })($nesting[0], $$($nesting, 'Base'), $nesting)
      })($nesting[0], $nesting)
    })($nesting[0], $nesting)
  })($nesting[0], $nesting);
};

/* Generated by Opal 1.0.0 */
Opal.modules["opal/nodes/args/extract_kwargs"] = function(Opal) {
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.$$$, $$ = Opal.$$, $module = Opal.module, $klass = Opal.klass;

  Opal.add_stubs(['$require', '$handle', '$add_temp', '$line']);
  
  self.$require("opal/nodes/base");
  return (function($base, $parent_nesting) {
    var self = $module($base, 'Opal');

    var $nesting = [self].concat($parent_nesting);

    (function($base, $parent_nesting) {
      var self = $module($base, 'Nodes');

      var $nesting = [self].concat($parent_nesting);

      (function($base, $parent_nesting) {
        var self = $module($base, 'Args');

        var $nesting = [self].concat($parent_nesting);

        (function($base, $super, $parent_nesting) {
          var self = $klass($base, $super, 'ExtractKwargs');

          var $nesting = [self].concat($parent_nesting), $ExtractKwargs_compile$1;

          
          self.$handle("extract_kwargs");
          return (Opal.def(self, '$compile', $ExtractKwargs_compile$1 = function $$compile() {
            var self = this;

            
            self.$add_temp("$kwargs");
            return self.$line("$kwargs = Opal.extract_kwargs($post_args)");
          }, $ExtractKwargs_compile$1.$$arity = 0), nil) && 'compile';
        })($nesting[0], $$($nesting, 'Base'), $nesting)
      })($nesting[0], $nesting)
    })($nesting[0], $nesting)
  })($nesting[0], $nesting);
};

/* Generated by Opal 1.0.0 */
Opal.modules["opal/nodes/args/extract_kwoptarg"] = function(Opal) {
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.$$$, $$ = Opal.$$, $module = Opal.module, $klass = Opal.klass;

  Opal.add_stubs(['$require', '$handle', '$children', '$[]', '$meta', '$<<', '$used_kwargs', '$scope', '$add_temp', '$lvar_name', '$line', '$inspect', '$to_s', '$==', '$default_value', '$expr']);
  
  self.$require("opal/nodes/base");
  return (function($base, $parent_nesting) {
    var self = $module($base, 'Opal');

    var $nesting = [self].concat($parent_nesting);

    (function($base, $parent_nesting) {
      var self = $module($base, 'Nodes');

      var $nesting = [self].concat($parent_nesting);

      (function($base, $parent_nesting) {
        var self = $module($base, 'Args');

        var $nesting = [self].concat($parent_nesting);

        (function($base, $super, $parent_nesting) {
          var self = $klass($base, $super, 'ExtractKwoptarg');

          var $nesting = [self].concat($parent_nesting), $ExtractKwoptarg_compile$1;

          self.$$prototype.sexp = nil;
          
          self.$handle("extract_kwoptarg");
          self.$children("lvar_name", "default_value");
          return (Opal.def(self, '$compile', $ExtractKwoptarg_compile$1 = function $$compile() {
            var self = this, key_name = nil;

            
            key_name = self.sexp.$meta()['$[]']("arg_name");
            self.$scope().$used_kwargs()['$<<'](key_name);
            self.$add_temp(self.$lvar_name());
            self.$line("" + (self.$lvar_name()) + " = $kwargs.$$smap[" + (key_name.$to_s().$inspect()) + "];");
            if (self.$default_value().$children()['$[]'](1)['$==']("undefined")) {
              return nil};
            self.$line("" + "if (" + (self.$lvar_name()) + " == null) {");
            self.$line("" + "  " + (self.$lvar_name()) + " = ", self.$expr(self.$default_value()));
            return self.$line("}");
          }, $ExtractKwoptarg_compile$1.$$arity = 0), nil) && 'compile';
        })($nesting[0], $$($nesting, 'Base'), $nesting)
      })($nesting[0], $nesting)
    })($nesting[0], $nesting)
  })($nesting[0], $nesting);
};

/* Generated by Opal 1.0.0 */
Opal.modules["opal/nodes/args/extract_kwrestarg"] = function(Opal) {
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.$$$, $$ = Opal.$$, $module = Opal.module, $klass = Opal.klass, $truthy = Opal.truthy, $send = Opal.send;

  Opal.add_stubs(['$require', '$handle', '$children', '$name', '$add_temp', '$line', '$used_kwargs', '$map', '$scope', '$join']);
  
  self.$require("opal/nodes/base");
  return (function($base, $parent_nesting) {
    var self = $module($base, 'Opal');

    var $nesting = [self].concat($parent_nesting);

    (function($base, $parent_nesting) {
      var self = $module($base, 'Nodes');

      var $nesting = [self].concat($parent_nesting);

      (function($base, $parent_nesting) {
        var self = $module($base, 'Args');

        var $nesting = [self].concat($parent_nesting);

        (function($base, $super, $parent_nesting) {
          var self = $klass($base, $super, 'ExtractKwrestarg');

          var $nesting = [self].concat($parent_nesting), $ExtractKwrestarg_compile$1, $ExtractKwrestarg_used_kwargs$2;

          
          self.$handle("extract_kwrestarg");
          self.$children("name");
          
          Opal.def(self, '$compile', $ExtractKwrestarg_compile$1 = function $$compile() {
            var self = this;

            if ($truthy(self.$name())) {
              
              self.$add_temp(self.$name());
              return self.$line("" + (self.$name()) + " = Opal.kwrestargs($kwargs, " + (self.$used_kwargs()) + ");");
            } else {
              return nil
            }
          }, $ExtractKwrestarg_compile$1.$$arity = 0);
          return (Opal.def(self, '$used_kwargs', $ExtractKwrestarg_used_kwargs$2 = function $$used_kwargs() {
            var $$3, self = this, args = nil;

            
            args = $send(self.$scope().$used_kwargs(), 'map', [], ($$3 = function(arg_name){var self = $$3.$$s == null ? this : $$3.$$s;

            
              
              if (arg_name == null) {
                arg_name = nil;
              };
              return "" + "'" + (arg_name) + "': true";}, $$3.$$s = self, $$3.$$arity = 1, $$3));
            return "" + "{" + (args.$join(",")) + "}";
          }, $ExtractKwrestarg_used_kwargs$2.$$arity = 0), nil) && 'used_kwargs';
        })($nesting[0], $$($nesting, 'Base'), $nesting)
      })($nesting[0], $nesting)
    })($nesting[0], $nesting)
  })($nesting[0], $nesting);
};

/* Generated by Opal 1.0.0 */
Opal.modules["opal/nodes/args/extract_optarg"] = function(Opal) {
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.$$$, $$ = Opal.$$, $module = Opal.module, $klass = Opal.klass;

  Opal.add_stubs(['$require', '$handle', '$children', '$==', '$[]', '$default_value', '$line', '$name', '$expr']);
  
  self.$require("opal/nodes/base");
  return (function($base, $parent_nesting) {
    var self = $module($base, 'Opal');

    var $nesting = [self].concat($parent_nesting);

    (function($base, $parent_nesting) {
      var self = $module($base, 'Nodes');

      var $nesting = [self].concat($parent_nesting);

      (function($base, $parent_nesting) {
        var self = $module($base, 'Args');

        var $nesting = [self].concat($parent_nesting);

        (function($base, $super, $parent_nesting) {
          var self = $klass($base, $super, 'ExtractOptargNode');

          var $nesting = [self].concat($parent_nesting), $ExtractOptargNode_compile$1;

          
          self.$handle("extract_optarg");
          self.$children("name", "default_value");
          return (Opal.def(self, '$compile', $ExtractOptargNode_compile$1 = function $$compile() {
            var self = this;

            
            if (self.$default_value().$children()['$[]'](1)['$==']("undefined")) {
              return nil};
            self.$line("" + "if (" + (self.$name()) + " == null) {");
            self.$line("" + "  " + (self.$name()) + " = ", self.$expr(self.$default_value()), ";");
            return self.$line("}");
          }, $ExtractOptargNode_compile$1.$$arity = 0), nil) && 'compile';
        })($nesting[0], $$($nesting, 'Base'), $nesting)
      })($nesting[0], $nesting)
    })($nesting[0], $nesting)
  })($nesting[0], $nesting);
};

/* Generated by Opal 1.0.0 */
Opal.modules["opal/nodes/args/extract_post_arg"] = function(Opal) {
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.$$$, $$ = Opal.$$, $module = Opal.module, $klass = Opal.klass;

  Opal.add_stubs(['$require', '$handle', '$children', '$add_temp', '$name', '$line']);
  
  self.$require("opal/nodes/base");
  return (function($base, $parent_nesting) {
    var self = $module($base, 'Opal');

    var $nesting = [self].concat($parent_nesting);

    (function($base, $parent_nesting) {
      var self = $module($base, 'Nodes');

      var $nesting = [self].concat($parent_nesting);

      (function($base, $parent_nesting) {
        var self = $module($base, 'Args');

        var $nesting = [self].concat($parent_nesting);

        (function($base, $super, $parent_nesting) {
          var self = $klass($base, $super, 'ExtractPostArg');

          var $nesting = [self].concat($parent_nesting), $ExtractPostArg_compile$1;

          
          self.$handle("extract_post_arg");
          self.$children("name");
          return (Opal.def(self, '$compile', $ExtractPostArg_compile$1 = function $$compile() {
            var self = this;

            
            self.$add_temp(self.$name());
            self.$line("" + (self.$name()) + " = $post_args[0];");
            self.$line("$post_args.splice(0, 1);");
            self.$line("" + "if (" + (self.$name()) + " == null) {");
            self.$line("" + "  " + (self.$name()) + " = nil");
            return self.$line("}");
          }, $ExtractPostArg_compile$1.$$arity = 0), nil) && 'compile';
        })($nesting[0], $$($nesting, 'Base'), $nesting)
      })($nesting[0], $nesting)
    })($nesting[0], $nesting)
  })($nesting[0], $nesting);
};

/* Generated by Opal 1.0.0 */
Opal.modules["opal/nodes/args/extract_post_optarg"] = function(Opal) {
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.$$$, $$ = Opal.$$, $module = Opal.module, $klass = Opal.klass;

  Opal.add_stubs(['$require', '$handle', '$children', '$add_temp', '$name', '$line', '$args_to_keep', '$==', '$[]', '$default_value', '$expr']);
  
  self.$require("opal/nodes/base");
  return (function($base, $parent_nesting) {
    var self = $module($base, 'Opal');

    var $nesting = [self].concat($parent_nesting);

    (function($base, $parent_nesting) {
      var self = $module($base, 'Nodes');

      var $nesting = [self].concat($parent_nesting);

      (function($base, $parent_nesting) {
        var self = $module($base, 'Args');

        var $nesting = [self].concat($parent_nesting);

        (function($base, $super, $parent_nesting) {
          var self = $klass($base, $super, 'ExtractPostOptarg');

          var $nesting = [self].concat($parent_nesting), $ExtractPostOptarg_compile$1;

          
          self.$handle("extract_post_optarg");
          self.$children("name", "default_value", "args_to_keep");
          return (Opal.def(self, '$compile', $ExtractPostOptarg_compile$1 = function $$compile() {
            var self = this;

            
            self.$add_temp(self.$name());
            self.$line("" + "if ($post_args.length > " + (self.$args_to_keep()) + ") {");
            self.$line("" + "  " + (self.$name()) + " = $post_args[0];");
            self.$line("  $post_args.splice(0, 1);");
            self.$line("}");
            if (self.$default_value().$children()['$[]'](1)['$==']("undefined")) {
              return nil};
            self.$line("" + "if (" + (self.$name()) + " == null) {");
            self.$line("" + "  " + (self.$name()) + " = ", self.$expr(self.$default_value()), ";");
            return self.$line("}");
          }, $ExtractPostOptarg_compile$1.$$arity = 0), nil) && 'compile';
        })($nesting[0], $$($nesting, 'Base'), $nesting)
      })($nesting[0], $nesting)
    })($nesting[0], $nesting)
  })($nesting[0], $nesting);
};

/* Generated by Opal 1.0.0 */
Opal.modules["opal/nodes/args/extract_restarg"] = function(Opal) {
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.$$$, $$ = Opal.$$, $module = Opal.module, $klass = Opal.klass, $truthy = Opal.truthy;

  Opal.add_stubs(['$require', '$handle', '$children', '$name', '$add_temp', '$==', '$args_to_keep', '$line', '$!=']);
  
  self.$require("opal/nodes/base");
  return (function($base, $parent_nesting) {
    var self = $module($base, 'Opal');

    var $nesting = [self].concat($parent_nesting);

    (function($base, $parent_nesting) {
      var self = $module($base, 'Nodes');

      var $nesting = [self].concat($parent_nesting);

      (function($base, $parent_nesting) {
        var self = $module($base, 'Args');

        var $nesting = [self].concat($parent_nesting);

        (function($base, $super, $parent_nesting) {
          var self = $klass($base, $super, 'ExtractRestarg');

          var $nesting = [self].concat($parent_nesting), $ExtractRestarg_compile$1;

          
          self.$handle("extract_restarg");
          self.$children("name", "args_to_keep");
          return (Opal.def(self, '$compile', $ExtractRestarg_compile$1 = function $$compile() {
            var self = this;

            if ($truthy(self.$name())) {
              
              self.$add_temp(self.$name());
              if (self.$args_to_keep()['$=='](0)) {
                return self.$line("" + (self.$name()) + " = $post_args;")
              } else {
                return self.$line("" + (self.$name()) + " = $post_args.splice(0, $post_args.length - " + (self.$args_to_keep()) + ");")
              };
            } else if ($truthy(self.$args_to_keep()['$!='](0))) {
              return self.$line("" + "$post_args.splice(0, $post_args.length - " + (self.$args_to_keep()) + ");")
            } else {
              return nil
            }
          }, $ExtractRestarg_compile$1.$$arity = 0), nil) && 'compile';
        })($nesting[0], $$($nesting, 'Base'), $nesting)
      })($nesting[0], $nesting)
    })($nesting[0], $nesting)
  })($nesting[0], $nesting);
};

/* Generated by Opal 1.0.0 */
Opal.modules["opal/nodes/args/fake_arg"] = function(Opal) {
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.$$$, $$ = Opal.$$, $module = Opal.module, $klass = Opal.klass;

  Opal.add_stubs(['$require', '$handle', '$next_temp', '$scope', '$add_arg', '$push']);
  
  self.$require("opal/nodes/base");
  return (function($base, $parent_nesting) {
    var self = $module($base, 'Opal');

    var $nesting = [self].concat($parent_nesting);

    (function($base, $parent_nesting) {
      var self = $module($base, 'Nodes');

      var $nesting = [self].concat($parent_nesting);

      (function($base, $parent_nesting) {
        var self = $module($base, 'Args');

        var $nesting = [self].concat($parent_nesting);

        (function($base, $super, $parent_nesting) {
          var self = $klass($base, $super, 'FakeArgNode');

          var $nesting = [self].concat($parent_nesting), $FakeArgNode_compile$1;

          
          self.$handle("fake_arg");
          return (Opal.def(self, '$compile', $FakeArgNode_compile$1 = function $$compile() {
            var self = this, name = nil;

            
            name = self.$scope().$next_temp();
            self.$scope().$add_arg(name);
            return self.$push(name);
          }, $FakeArgNode_compile$1.$$arity = 0), nil) && 'compile';
        })($nesting[0], $$($nesting, 'Base'), $nesting)
      })($nesting[0], $nesting)
    })($nesting[0], $nesting)
  })($nesting[0], $nesting);
};

/* Generated by Opal 1.0.0 */
Opal.modules["opal/nodes/args/initialize_iterarg"] = function(Opal) {
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.$$$, $$ = Opal.$$, $module = Opal.module, $klass = Opal.klass;

  Opal.add_stubs(['$require', '$handle', '$children', '$line', '$name']);
  
  self.$require("opal/nodes/base");
  return (function($base, $parent_nesting) {
    var self = $module($base, 'Opal');

    var $nesting = [self].concat($parent_nesting);

    (function($base, $parent_nesting) {
      var self = $module($base, 'Nodes');

      var $nesting = [self].concat($parent_nesting);

      (function($base, $parent_nesting) {
        var self = $module($base, 'Args');

        var $nesting = [self].concat($parent_nesting);

        (function($base, $super, $parent_nesting) {
          var self = $klass($base, $super, 'InitializeIterarg');

          var $nesting = [self].concat($parent_nesting), $InitializeIterarg_compile$1;

          
          self.$handle("initialize_iter_arg");
          self.$children("name");
          return (Opal.def(self, '$compile', $InitializeIterarg_compile$1 = function $$compile() {
            var self = this;

            
            self.$line("" + "if (" + (self.$name()) + " == null) {");
            self.$line("" + "  " + (self.$name()) + " = nil;");
            return self.$line("}");
          }, $InitializeIterarg_compile$1.$$arity = 0), nil) && 'compile';
        })($nesting[0], $$($nesting, 'Base'), $nesting)
      })($nesting[0], $nesting)
    })($nesting[0], $nesting)
  })($nesting[0], $nesting);
};

/* Generated by Opal 1.0.0 */
Opal.modules["opal/nodes/args/initialize_shadowarg"] = function(Opal) {
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.$$$, $$ = Opal.$$, $module = Opal.module, $klass = Opal.klass;

  Opal.add_stubs(['$require', '$handle', '$children', '$<<', '$locals', '$scope', '$name', '$add_arg', '$line']);
  
  self.$require("opal/nodes/base");
  return (function($base, $parent_nesting) {
    var self = $module($base, 'Opal');

    var $nesting = [self].concat($parent_nesting);

    (function($base, $parent_nesting) {
      var self = $module($base, 'Nodes');

      var $nesting = [self].concat($parent_nesting);

      (function($base, $parent_nesting) {
        var self = $module($base, 'Args');

        var $nesting = [self].concat($parent_nesting);

        (function($base, $super, $parent_nesting) {
          var self = $klass($base, $super, 'InitializeShadowarg');

          var $nesting = [self].concat($parent_nesting), $InitializeShadowarg_compile$1;

          
          self.$handle("initialize_shadowarg");
          self.$children("name");
          return (Opal.def(self, '$compile', $InitializeShadowarg_compile$1 = function $$compile() {
            var self = this;

            
            self.$scope().$locals()['$<<'](self.$name());
            self.$scope().$add_arg(self.$name());
            return self.$line("" + (self.$name()) + " = nil;");
          }, $InitializeShadowarg_compile$1.$$arity = 0), nil) && 'compile';
        })($nesting[0], $$($nesting, 'Base'), $nesting)
      })($nesting[0], $nesting)
    })($nesting[0], $nesting)
  })($nesting[0], $nesting);
};

/* Generated by Opal 1.0.0 */
Opal.modules["opal/nodes/args/parameters"] = function(Opal) {
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.$$$, $$ = Opal.$$, $module = Opal.module, $klass = Opal.klass, $send = Opal.send, $truthy = Opal.truthy;

  Opal.add_stubs(['$children', '$map', '$public_send', '$type', '$join', '$compact']);
  return (function($base, $parent_nesting) {
    var self = $module($base, 'Opal');

    var $nesting = [self].concat($parent_nesting);

    (function($base, $parent_nesting) {
      var self = $module($base, 'Nodes');

      var $nesting = [self].concat($parent_nesting);

      (function($base, $parent_nesting) {
        var self = $module($base, 'Args');

        var $nesting = [self].concat($parent_nesting);

        (function($base, $super, $parent_nesting) {
          var self = $klass($base, $super, 'Parameters');

          var $nesting = [self].concat($parent_nesting), $Parameters_initialize$1, $Parameters_to_code$2, $Parameters_on_arg$4, $Parameters_on_mlhs$5, $Parameters_on_optarg$6, $Parameters_on_restarg$7, $Parameters_on_kwarg$8, $Parameters_on_kwoptarg$9, $Parameters_on_kwrestarg$10, $Parameters_on_blockarg$11, $Parameters_on_shadowarg$12;

          self.$$prototype.args = nil;
          
          
          Opal.def(self, '$initialize', $Parameters_initialize$1 = function $$initialize(args) {
            var self = this;

            return (self.args = args.$children())
          }, $Parameters_initialize$1.$$arity = 1);
          
          Opal.def(self, '$to_code', $Parameters_to_code$2 = function $$to_code() {
            var $$3, self = this, stringified_parameters = nil;

            
            stringified_parameters = $send(self.args, 'map', [], ($$3 = function(arg){var self = $$3.$$s == null ? this : $$3.$$s;

            
              
              if (arg == null) {
                arg = nil;
              };
              return $send(self, 'public_send', ["" + "on_" + (arg.$type())].concat(Opal.to_a(arg)));}, $$3.$$s = self, $$3.$$arity = 1, $$3));
            return "" + "[" + (stringified_parameters.$compact().$join(", ")) + "]";
          }, $Parameters_to_code$2.$$arity = 0);
          
          Opal.def(self, '$on_arg', $Parameters_on_arg$4 = function $$on_arg(arg_name) {
            var self = this;

            return "" + "['req', '" + (arg_name) + "']"
          }, $Parameters_on_arg$4.$$arity = 1);
          
          Opal.def(self, '$on_mlhs', $Parameters_on_mlhs$5 = function $$on_mlhs($a) {
            var $post_args, self = this;

            
            
            $post_args = Opal.slice.call(arguments, 0, arguments.length);
            ;
            return "['req']";
          }, $Parameters_on_mlhs$5.$$arity = -1);
          
          Opal.def(self, '$on_optarg', $Parameters_on_optarg$6 = function $$on_optarg(arg_name, _default_value) {
            var self = this;

            return "" + "['opt', '" + (arg_name) + "']"
          }, $Parameters_on_optarg$6.$$arity = 2);
          
          Opal.def(self, '$on_restarg', $Parameters_on_restarg$7 = function $$on_restarg(arg_name) {
            var self = this;

            
            
            if (arg_name == null) {
              arg_name = nil;
            };
            if ($truthy(arg_name)) {
              return "" + "['rest', '" + (arg_name) + "']"
            } else {
              return "['rest']"
            };
          }, $Parameters_on_restarg$7.$$arity = -1);
          
          Opal.def(self, '$on_kwarg', $Parameters_on_kwarg$8 = function $$on_kwarg(arg_name) {
            var self = this;

            return "" + "['keyreq', '" + (arg_name) + "']"
          }, $Parameters_on_kwarg$8.$$arity = 1);
          
          Opal.def(self, '$on_kwoptarg', $Parameters_on_kwoptarg$9 = function $$on_kwoptarg(arg_name, _default_value) {
            var self = this;

            return "" + "['key', '" + (arg_name) + "']"
          }, $Parameters_on_kwoptarg$9.$$arity = 2);
          
          Opal.def(self, '$on_kwrestarg', $Parameters_on_kwrestarg$10 = function $$on_kwrestarg(arg_name) {
            var self = this;

            
            
            if (arg_name == null) {
              arg_name = nil;
            };
            if ($truthy(arg_name)) {
              return "" + "['keyrest', '" + (arg_name) + "']"
            } else {
              return "['keyrest']"
            };
          }, $Parameters_on_kwrestarg$10.$$arity = -1);
          
          Opal.def(self, '$on_blockarg', $Parameters_on_blockarg$11 = function $$on_blockarg(arg_name) {
            var self = this;

            return "" + "['block', '" + (arg_name) + "']"
          }, $Parameters_on_blockarg$11.$$arity = 1);
          return (Opal.def(self, '$on_shadowarg', $Parameters_on_shadowarg$12 = function $$on_shadowarg(_arg_name) {
            var self = this;

            return nil
          }, $Parameters_on_shadowarg$12.$$arity = 1), nil) && 'on_shadowarg';
        })($nesting[0], null, $nesting)
      })($nesting[0], $nesting)
    })($nesting[0], $nesting)
  })($nesting[0], $nesting)
};

/* Generated by Opal 1.0.0 */
Opal.modules["opal/nodes/args/prepare_post_args"] = function(Opal) {
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.$$$, $$ = Opal.$$, $module = Opal.module, $klass = Opal.klass;

  Opal.add_stubs(['$require', '$handle', '$children', '$add_temp', '$line', '$offset']);
  
  self.$require("opal/nodes/base");
  return (function($base, $parent_nesting) {
    var self = $module($base, 'Opal');

    var $nesting = [self].concat($parent_nesting);

    (function($base, $parent_nesting) {
      var self = $module($base, 'Nodes');

      var $nesting = [self].concat($parent_nesting);

      (function($base, $parent_nesting) {
        var self = $module($base, 'Args');

        var $nesting = [self].concat($parent_nesting);

        (function($base, $super, $parent_nesting) {
          var self = $klass($base, $super, 'PreparePostArgs');

          var $nesting = [self].concat($parent_nesting), $PreparePostArgs_compile$1;

          
          self.$handle("prepare_post_args");
          self.$children("offset");
          return (Opal.def(self, '$compile', $PreparePostArgs_compile$1 = function $$compile() {
            var self = this;

            
            self.$add_temp("$post_args");
            return self.$line("" + "$post_args = Opal.slice.call(arguments, " + (self.$offset()) + ", arguments.length)");
          }, $PreparePostArgs_compile$1.$$arity = 0), nil) && 'compile';
        })($nesting[0], $$($nesting, 'Base'), $nesting)
      })($nesting[0], $nesting)
    })($nesting[0], $nesting)
  })($nesting[0], $nesting);
};

/* Generated by Opal 1.0.0 */
Opal.modules["opal/nodes/args"] = function(Opal) {
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.$$$, $$ = Opal.$$, $module = Opal.module, $klass = Opal.klass, $send = Opal.send, $truthy = Opal.truthy;

  Opal.add_stubs(['$require', '$handle', '$each_with_index', '$children', '$!=', '$push', '$process']);
  
  self.$require("opal/nodes/base");
  self.$require("opal/nodes/args/arg");
  self.$require("opal/nodes/args/arity_check");
  self.$require("opal/nodes/args/ensure_kwargs_are_kwargs");
  self.$require("opal/nodes/args/extract_block_arg");
  self.$require("opal/nodes/args/extract_kwarg");
  self.$require("opal/nodes/args/extract_kwargs");
  self.$require("opal/nodes/args/extract_kwoptarg");
  self.$require("opal/nodes/args/extract_kwrestarg");
  self.$require("opal/nodes/args/extract_optarg");
  self.$require("opal/nodes/args/extract_post_arg");
  self.$require("opal/nodes/args/extract_post_optarg");
  self.$require("opal/nodes/args/extract_restarg");
  self.$require("opal/nodes/args/fake_arg");
  self.$require("opal/nodes/args/initialize_iterarg");
  self.$require("opal/nodes/args/initialize_shadowarg");
  self.$require("opal/nodes/args/parameters");
  self.$require("opal/nodes/args/prepare_post_args");
  return (function($base, $parent_nesting) {
    var self = $module($base, 'Opal');

    var $nesting = [self].concat($parent_nesting);

    (function($base, $parent_nesting) {
      var self = $module($base, 'Nodes');

      var $nesting = [self].concat($parent_nesting);

      (function($base, $super, $parent_nesting) {
        var self = $klass($base, $super, 'ArgsNode');

        var $nesting = [self].concat($parent_nesting), $ArgsNode_compile$1;

        
        self.$handle("args");
        return (Opal.def(self, '$compile', $ArgsNode_compile$1 = function $$compile() {
          var $$2, self = this;

          return $send(self.$children(), 'each_with_index', [], ($$2 = function(arg, idx){var self = $$2.$$s == null ? this : $$2.$$s;

          
            
            if (arg == null) {
              arg = nil;
            };
            
            if (idx == null) {
              idx = nil;
            };
            if ($truthy(idx['$!='](0))) {
              self.$push(", ")};
            return self.$push(self.$process(arg));}, $$2.$$s = self, $$2.$$arity = 2, $$2))
        }, $ArgsNode_compile$1.$$arity = 0), nil) && 'compile';
      })($nesting[0], $$($nesting, 'Base'), $nesting)
    })($nesting[0], $nesting)
  })($nesting[0], $nesting);
};

/* Generated by Opal 1.0.0 */
Opal.modules["opal/nodes/node_with_args"] = function(Opal) {
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.$$$, $$ = Opal.$$, $module = Opal.module, $klass = Opal.klass, $send2 = Opal.send2, $truthy = Opal.truthy;

  Opal.add_stubs(['$require', '$attr_reader', '$attr_accessor', '$[]', '$meta', '$s', '$original_args', '$push', '$process', '$arity_check_node', '$uses_block?', '$scope', '$identity', '$block_name', '$add_temp', '$line', '$to_code', '$new']);
  
  self.$require("opal/nodes/scope");
  self.$require("opal/nodes/args/parameters");
  return (function($base, $parent_nesting) {
    var self = $module($base, 'Opal');

    var $nesting = [self].concat($parent_nesting);

    (function($base, $parent_nesting) {
      var self = $module($base, 'Nodes');

      var $nesting = [self].concat($parent_nesting);

      (function($base, $super, $parent_nesting) {
        var self = $klass($base, $super, 'NodeWithArgs');

        var $nesting = [self].concat($parent_nesting), $NodeWithArgs_initialize$1, $NodeWithArgs_arity_check_node$2, $NodeWithArgs_compile_arity_check$3, $NodeWithArgs_compile_block_arg$4, $NodeWithArgs_parameters_code$5;

        self.$$prototype.sexp = nil;
        
        self.$attr_reader("used_kwargs");
        self.$attr_accessor("arity");
        self.$attr_reader("original_args");
        
        Opal.def(self, '$initialize', $NodeWithArgs_initialize$1 = function $$initialize($a) {
          var $post_args, $iter = $NodeWithArgs_initialize$1.$$p, $yield = $iter || nil, self = this, $zuper = nil, $zuper_i = nil, $zuper_ii = nil;

          if ($iter) $NodeWithArgs_initialize$1.$$p = null;
          // Prepare super implicit arguments
          for($zuper_i = 0, $zuper_ii = arguments.length, $zuper = new Array($zuper_ii); $zuper_i < $zuper_ii; $zuper_i++) {
            $zuper[$zuper_i] = arguments[$zuper_i];
          }
          
          
          $post_args = Opal.slice.call(arguments, 0, arguments.length);
          ;
          $send2(self, Opal.find_super_dispatcher(self, 'initialize', $NodeWithArgs_initialize$1, false, true), 'initialize', $zuper, $iter);
          self.original_args = self.sexp.$meta()['$[]']("original_args");
          self.used_kwargs = [];
          return (self.arity = 0);
        }, $NodeWithArgs_initialize$1.$$arity = -1);
        
        Opal.def(self, '$arity_check_node', $NodeWithArgs_arity_check_node$2 = function $$arity_check_node() {
          var self = this;

          return self.$s("arity_check", self.$original_args())
        }, $NodeWithArgs_arity_check_node$2.$$arity = 0);
        
        Opal.def(self, '$compile_arity_check', $NodeWithArgs_compile_arity_check$3 = function $$compile_arity_check() {
          var self = this;

          return self.$push(self.$process(self.$arity_check_node()))
        }, $NodeWithArgs_compile_arity_check$3.$$arity = 0);
        
        Opal.def(self, '$compile_block_arg', $NodeWithArgs_compile_block_arg$4 = function $$compile_block_arg() {
          var $a, self = this, scope_name = nil, yielder = nil;

          if ($truthy(self.$scope()['$uses_block?']())) {
            
            scope_name = self.$scope().$identity();
            yielder = ($truthy($a = self.$scope().$block_name()) ? $a : "$yield");
            self.$add_temp("" + "$iter = " + (scope_name) + ".$$p");
            self.$add_temp("" + (yielder) + " = $iter || nil");
            return self.$line("" + "if ($iter) " + (scope_name) + ".$$p = null;");
          } else {
            return nil
          }
        }, $NodeWithArgs_compile_block_arg$4.$$arity = 0);
        return (Opal.def(self, '$parameters_code', $NodeWithArgs_parameters_code$5 = function $$parameters_code() {
          var self = this;

          return $$$($$($nesting, 'Args'), 'Parameters').$new(self.$original_args()).$to_code()
        }, $NodeWithArgs_parameters_code$5.$$arity = 0), nil) && 'parameters_code';
      })($nesting[0], $$($nesting, 'ScopeNode'), $nesting)
    })($nesting[0], $nesting)
  })($nesting[0], $nesting);
};

/* Generated by Opal 1.0.0 */
Opal.modules["opal/nodes/iter"] = function(Opal) {
  function $rb_minus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs - rhs : lhs['$-'](rhs);
  }
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.$$$, $$ = Opal.$$, $module = Opal.module, $klass = Opal.klass, $send = Opal.send, $truthy = Opal.truthy;

  Opal.add_stubs(['$require', '$handle', '$children', '$in_scope', '$identify!', '$scope', '$add_temp', '$process', '$inline_args', '$compile_arity_check', '$stmt', '$returned_body', '$to_vars', '$line', '$unshift', '$push', '$contains_break?', '$arity', '$arity_check?', '$compiler', '$parameters_code', '$has_top_level_mlhs_arg?', '$has_trailing_comma_in_args?', '$block_arg', '$block_name=', '$-', '$each', '$args', '$first', '$==', '$<<', '$updated', '$body', '$returns', '$s', '$any?', '$original_args', '$type', '$loc', '$expression', '$source', '$match', '$new', '$found_break?']);
  
  self.$require("opal/nodes/node_with_args");
  self.$require("opal/rewriters/break_finder");
  return (function($base, $parent_nesting) {
    var self = $module($base, 'Opal');

    var $nesting = [self].concat($parent_nesting);

    (function($base, $parent_nesting) {
      var self = $module($base, 'Nodes');

      var $nesting = [self].concat($parent_nesting);

      (function($base, $super, $parent_nesting) {
        var self = $klass($base, $super, 'IterNode');

        var $nesting = [self].concat($parent_nesting), $IterNode_compile$1, $IterNode_compile_block_arg$3, $IterNode_extract_underscore_args$4, $IterNode_returned_body$6, $IterNode_has_top_level_mlhs_arg$ques$7, $IterNode_has_trailing_comma_in_args$ques$9, $IterNode_arity_check_node$10, $IterNode_contains_break$ques$11;

        self.$$prototype.sexp = nil;
        
        self.$handle("iter");
        self.$children("inline_args", "body");
        
        Opal.def(self, '$compile', $IterNode_compile$1 = function $$compile() {
          var $$2, self = this, inline_params = nil, to_vars = nil, identity = nil, body_code = nil;

          
          inline_params = nil;
          to_vars = (identity = (body_code = nil));
          $send(self, 'in_scope', [], ($$2 = function(){var self = $$2.$$s == null ? this : $$2.$$s;

          
            identity = self.$scope()['$identify!']();
            self.$add_temp("" + "self = " + (identity) + ".$$s == null ? this : " + (identity) + ".$$s");
            inline_params = self.$process(self.$inline_args());
            self.$compile_arity_check();
            body_code = self.$stmt(self.$returned_body());
            return (to_vars = self.$scope().$to_vars());}, $$2.$$s = self, $$2.$$arity = 0, $$2));
          self.$line(body_code);
          self.$unshift(to_vars);
          self.$unshift("" + "(" + (identity) + " = function(", inline_params, "){");
          self.$push("" + "}, " + (identity) + ".$$s = self,");
          if ($truthy(self['$contains_break?']())) {
            self.$push("" + " " + (identity) + ".$$brk = $brk,")};
          self.$push("" + " " + (identity) + ".$$arity = " + (self.$arity()) + ",");
          if ($truthy(self.$compiler()['$arity_check?']())) {
            self.$push("" + " " + (identity) + ".$$parameters = " + (self.$parameters_code()) + ",")};
          if ($truthy(self['$has_top_level_mlhs_arg?']())) {
            self.$push("" + " " + (identity) + ".$$has_top_level_mlhs_arg = true,")};
          if ($truthy(self['$has_trailing_comma_in_args?']())) {
            self.$push("" + " " + (identity) + ".$$has_trailing_comma_in_args = true,")};
          return self.$push("" + " " + (identity) + ")");
        }, $IterNode_compile$1.$$arity = 0);
        
        Opal.def(self, '$compile_block_arg', $IterNode_compile_block_arg$3 = function $$compile_block_arg() {
          var self = this, $writer = nil, scope_name = nil;

          if ($truthy(self.$block_arg())) {
            
            
            $writer = [self.$block_arg()];
            $send(self.$scope(), 'block_name=', Opal.to_a($writer));
            $writer[$rb_minus($writer["length"], 1)];;
            self.$scope().$add_temp(self.$block_arg());
            scope_name = self.$scope()['$identify!']();
            self.$line("" + (self.$block_arg()) + " = " + (scope_name) + ".$$p || nil;");
            return self.$line("" + "if (" + (self.$block_arg()) + ") " + (scope_name) + ".$$p = null;");
          } else {
            return nil
          }
        }, $IterNode_compile_block_arg$3.$$arity = 0);
        
        Opal.def(self, '$extract_underscore_args', $IterNode_extract_underscore_args$4 = function $$extract_underscore_args() {
          var $$5, self = this, valid_args = nil, caught_blank_argument = nil;

          
          valid_args = [];
          caught_blank_argument = false;
          $send(self.$args().$children(), 'each', [], ($$5 = function(arg){var self = $$5.$$s == null ? this : $$5.$$s, arg_name = nil;

          
            
            if (arg == null) {
              arg = nil;
            };
            arg_name = arg.$children().$first();
            if (arg_name['$==']("_")) {
              if ($truthy(caught_blank_argument)) {
                return nil
              } else {
                
                caught_blank_argument = true;
                return valid_args['$<<'](arg);
              }
            } else {
              return valid_args['$<<'](arg)
            };}, $$5.$$s = self, $$5.$$arity = 1, $$5));
          return (self.sexp = self.sexp.$updated(nil, [self.$args().$updated(nil, valid_args), self.$body()]));
        }, $IterNode_extract_underscore_args$4.$$arity = 0);
        
        Opal.def(self, '$returned_body', $IterNode_returned_body$6 = function $$returned_body() {
          var $a, self = this;

          return self.$compiler().$returns(($truthy($a = self.$body()) ? $a : self.$s("nil")))
        }, $IterNode_returned_body$6.$$arity = 0);
        
        Opal.def(self, '$has_top_level_mlhs_arg?', $IterNode_has_top_level_mlhs_arg$ques$7 = function() {
          var $$8, self = this;

          return $send(self.$original_args().$children(), 'any?', [], ($$8 = function(arg){var self = $$8.$$s == null ? this : $$8.$$s;

          
            
            if (arg == null) {
              arg = nil;
            };
            return arg.$type()['$==']("mlhs");}, $$8.$$s = self, $$8.$$arity = 1, $$8))
        }, $IterNode_has_top_level_mlhs_arg$ques$7.$$arity = 0);
        
        Opal.def(self, '$has_trailing_comma_in_args?', $IterNode_has_trailing_comma_in_args$ques$9 = function() {
          var $a, self = this, args_source = nil;

          if ($truthy(($truthy($a = self.$original_args().$loc()) ? self.$original_args().$loc().$expression() : $a))) {
            
            args_source = self.$original_args().$loc().$expression().$source();
            return args_source.$match(/,\s*\|/);
          } else {
            return nil
          }
        }, $IterNode_has_trailing_comma_in_args$ques$9.$$arity = 0);
        
        Opal.def(self, '$arity_check_node', $IterNode_arity_check_node$10 = function $$arity_check_node() {
          var self = this;

          return self.$s("iter_arity_check", self.$original_args())
        }, $IterNode_arity_check_node$10.$$arity = 0);
        return (Opal.def(self, '$contains_break?', $IterNode_contains_break$ques$11 = function() {
          var self = this, finder = nil;

          
          finder = $$$($$$($$($nesting, 'Opal'), 'Rewriters'), 'BreakFinder').$new();
          finder.$process(self.sexp);
          return finder['$found_break?']();
        }, $IterNode_contains_break$ques$11.$$arity = 0), nil) && 'contains_break?';
      })($nesting[0], $$($nesting, 'NodeWithArgs'), $nesting)
    })($nesting[0], $nesting)
  })($nesting[0], $nesting);
};

/* Generated by Opal 1.0.0 */
Opal.modules["opal/nodes/def"] = function(Opal) {
  function $rb_minus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs - rhs : lhs['$-'](rhs);
  }
  function $rb_plus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs + rhs : lhs['$+'](rhs);
  }
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.$$$, $$ = Opal.$$, $module = Opal.module, $klass = Opal.klass, $send = Opal.send, $truthy = Opal.truthy;

  Opal.add_stubs(['$require', '$handle', '$children', '$in_scope', '$mid', '$mid=', '$scope', '$-', '$==', '$type', '$defs=', '$identify!', '$identity', '$block_name=', '$process', '$inline_args', '$stmt', '$returns', '$compiler', '$stmts', '$compile_block_arg', '$add_temp', '$compile_arity_check', '$uses_zuper', '$prepare_super', '$unshift', '$current_indent', '$to_vars', '$line', '$catch_return', '$push', '$valid_name?', '$arity', '$arity_check?', '$parameters_code', '$parse_comments?', '$comments_code', '$enable_source_location?', '$source_location', '$wrap_with_definition', '$wrap', '$expr?', '$name', '$source_buffer', '$expression', '$loc', '$+', '$join', '$map', '$comments', '$inspect', '$text', '$add_local']);
  
  self.$require("opal/nodes/node_with_args");
  return (function($base, $parent_nesting) {
    var self = $module($base, 'Opal');

    var $nesting = [self].concat($parent_nesting);

    (function($base, $parent_nesting) {
      var self = $module($base, 'Nodes');

      var $nesting = [self].concat($parent_nesting);

      (function($base, $super, $parent_nesting) {
        var self = $klass($base, $super, 'DefNode');

        var $nesting = [self].concat($parent_nesting), $DefNode_compile$1, $DefNode_wrap_with_definition$3, $DefNode_source_location$4, $DefNode_comments_code$5, $DefNode_prepare_super$7;

        self.$$prototype.sexp = nil;
        
        self.$handle("def");
        self.$children("mid", "inline_args", "stmts");
        
        Opal.def(self, '$compile', $DefNode_compile$1 = function $$compile() {
          var $$2, self = this, inline_params = nil, scope_name = nil, function_name = nil;

          
          inline_params = nil;
          scope_name = nil;
          $send(self, 'in_scope', [], ($$2 = function(){var self = $$2.$$s == null ? this : $$2.$$s, $writer = nil, stmt_code = nil;
            if (self.sexp == null) self.sexp = nil;

          
            
            $writer = [self.$mid()];
            $send(self.$scope(), 'mid=', Opal.to_a($writer));
            $writer[$rb_minus($writer["length"], 1)];;
            if (self.sexp.$type()['$==']("defs")) {
              
              $writer = [true];
              $send(self.$scope(), 'defs=', Opal.to_a($writer));
              $writer[$rb_minus($writer["length"], 1)];};
            self.$scope()['$identify!']();
            scope_name = self.$scope().$identity();
            
            $writer = ["$yield"];
            $send(self.$scope(), 'block_name=', Opal.to_a($writer));
            $writer[$rb_minus($writer["length"], 1)];;
            inline_params = self.$process(self.$inline_args());
            stmt_code = self.$stmt(self.$compiler().$returns(self.$stmts()));
            self.$compile_block_arg();
            self.$add_temp("self = this");
            self.$compile_arity_check();
            if ($truthy(self.$scope().$uses_zuper())) {
              self.$prepare_super()};
            self.$unshift("" + "\n" + (self.$current_indent()), self.$scope().$to_vars());
            self.$line(stmt_code);
            if ($truthy(self.$scope().$catch_return())) {
              
              self.$unshift("try {\n");
              self.$line("} catch ($returner) { if ($returner === Opal.returner) { return $returner.$v }");
              return self.$push(" throw $returner; }");
            } else {
              return nil
            };}, $$2.$$s = self, $$2.$$arity = 0, $$2));
          function_name = (function() {if ($truthy(self['$valid_name?'](self.$mid()))) {
            return "" + " $$" + (self.$mid())
          } else {
            return ""
          }; return nil; })();
          self.$unshift(") {");
          self.$unshift(inline_params);
          self.$unshift("" + "function" + (function_name) + "(");
          if ($truthy(scope_name)) {
            self.$unshift("" + (scope_name) + " = ")};
          self.$line("}");
          self.$push("" + ", " + (scope_name) + ".$$arity = " + (self.$arity()));
          if ($truthy(self.$compiler()['$arity_check?']())) {
            self.$push("" + ", " + (scope_name) + ".$$parameters = " + (self.$parameters_code()))};
          if ($truthy(self.$compiler()['$parse_comments?']())) {
            self.$push("" + ", " + (scope_name) + ".$$comments = " + (self.$comments_code()))};
          if ($truthy(self.$compiler()['$enable_source_location?']())) {
            self.$push("" + ", " + (scope_name) + ".$$source_location = " + (self.$source_location()))};
          return self.$wrap_with_definition();
        }, $DefNode_compile$1.$$arity = 0);
        
        Opal.def(self, '$wrap_with_definition', $DefNode_wrap_with_definition$3 = function $$wrap_with_definition() {
          var self = this;

          
          self.$wrap("" + "Opal.def(self, '$" + (self.$mid()) + "', ", ")");
          if ($truthy(self['$expr?']())) {
            return self.$wrap("(", "" + ", nil) && '" + (self.$mid()) + "'")
          } else {
            return self.$unshift("" + "\n" + (self.$current_indent()))
          };
        }, $DefNode_wrap_with_definition$3.$$arity = 0);
        
        Opal.def(self, '$source_location', $DefNode_source_location$4 = function $$source_location() {
          var self = this, file = nil, line = nil;

          
          file = self.sexp.$loc().$expression().$source_buffer().$name();
          line = self.sexp.$loc().$line();
          return "" + "['" + (file) + "', " + (line) + "]";
        }, $DefNode_source_location$4.$$arity = 0);
        
        Opal.def(self, '$comments_code', $DefNode_comments_code$5 = function $$comments_code() {
          var $$6, self = this;

          return $rb_plus($rb_plus("[", $send(self.$comments(), 'map', [], ($$6 = function(comment){var self = $$6.$$s == null ? this : $$6.$$s;

          
            
            if (comment == null) {
              comment = nil;
            };
            return comment.$text().$inspect();}, $$6.$$s = self, $$6.$$arity = 1, $$6)).$join(", ")), "]")
        }, $DefNode_comments_code$5.$$arity = 0);
        return (Opal.def(self, '$prepare_super', $DefNode_prepare_super$7 = function $$prepare_super() {
          var self = this;

          
          self.$add_local("$zuper");
          self.$add_local("$zuper_i");
          self.$add_local("$zuper_ii");
          self.$line("// Prepare super implicit arguments");
          self.$line("for($zuper_i = 0, $zuper_ii = arguments.length, $zuper = new Array($zuper_ii); $zuper_i < $zuper_ii; $zuper_i++) {");
          self.$line("  $zuper[$zuper_i] = arguments[$zuper_i];");
          return self.$line("}");
        }, $DefNode_prepare_super$7.$$arity = 0), nil) && 'prepare_super';
      })($nesting[0], $$($nesting, 'NodeWithArgs'), $nesting)
    })($nesting[0], $nesting)
  })($nesting[0], $nesting);
};

/* Generated by Opal 1.0.0 */
Opal.modules["opal/nodes/defs"] = function(Opal) {
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.$$$, $$ = Opal.$$, $module = Opal.module, $klass = Opal.klass, $truthy = Opal.truthy;

  Opal.add_stubs(['$require', '$handle', '$children', '$unshift', '$expr', '$recvr', '$mid', '$push', '$expr?', '$wrap']);
  
  self.$require("opal/nodes/def");
  return (function($base, $parent_nesting) {
    var self = $module($base, 'Opal');

    var $nesting = [self].concat($parent_nesting);

    (function($base, $parent_nesting) {
      var self = $module($base, 'Nodes');

      var $nesting = [self].concat($parent_nesting);

      (function($base, $super, $parent_nesting) {
        var self = $klass($base, $super, 'DefsNode');

        var $nesting = [self].concat($parent_nesting), $DefsNode_wrap_with_definition$1;

        
        self.$handle("defs");
        self.$children("recvr", "mid", "inline_args", "stmts");
        return (Opal.def(self, '$wrap_with_definition', $DefsNode_wrap_with_definition$1 = function $$wrap_with_definition() {
          var self = this;

          
          self.$unshift("Opal.defs(", self.$expr(self.$recvr()), "" + ", '$" + (self.$mid()) + "', ");
          self.$push(")");
          if ($truthy(self['$expr?']())) {
            return self.$wrap("(", "" + ", nil) && '" + (self.$mid()) + "'")
          } else {
            return nil
          };
        }, $DefsNode_wrap_with_definition$1.$$arity = 0), nil) && 'wrap_with_definition';
      })($nesting[0], $$($nesting, 'DefNode'), $nesting)
    })($nesting[0], $nesting)
  })($nesting[0], $nesting);
};

/* Generated by Opal 1.0.0 */
Opal.modules["opal/nodes/if"] = function(Opal) {
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.$$$, $$ = Opal.$$, $module = Opal.module, $klass = Opal.klass, $truthy = Opal.truthy, $send = Opal.send;

  Opal.add_stubs(['$require', '$handle', '$children', '$truthy', '$falsy', '$push', '$js_truthy', '$test', '$indent', '$line', '$stmt', '$==', '$type', '$needs_wrapper?', '$wrap', '$returns', '$compiler', '$true_body', '$s', '$false_body', '$expr?', '$recv?']);
  
  self.$require("opal/nodes/base");
  return (function($base, $parent_nesting) {
    var self = $module($base, 'Opal');

    var $nesting = [self].concat($parent_nesting);

    (function($base, $parent_nesting) {
      var self = $module($base, 'Nodes');

      var $nesting = [self].concat($parent_nesting);

      
      (function($base, $super, $parent_nesting) {
        var self = $klass($base, $super, 'IfNode');

        var $nesting = [self].concat($parent_nesting), $IfNode_compile$1, $IfNode_truthy$4, $IfNode_falsy$5, $IfNode_needs_wrapper$ques$6;

        
        self.$handle("if");
        self.$children("test", "true_body", "false_body");
        
        Opal.def(self, '$compile', $IfNode_compile$1 = function $$compile() {
          var $$2, $$3, self = this, truthy = nil, falsy = nil;

          
          truthy = self.$truthy();
          falsy = self.$falsy();
          self.$push("if (", self.$js_truthy(self.$test()), ") {");
          if ($truthy(truthy)) {
            $send(self, 'indent', [], ($$2 = function(){var self = $$2.$$s == null ? this : $$2.$$s;

            return self.$line(self.$stmt(truthy))}, $$2.$$s = self, $$2.$$arity = 0, $$2))};
          if ($truthy(falsy)) {
            if (falsy.$type()['$==']("if")) {
              self.$line("} else ", self.$stmt(falsy))
            } else {
              
              self.$line("} else {");
              $send(self, 'indent', [], ($$3 = function(){var self = $$3.$$s == null ? this : $$3.$$s;

              return self.$line(self.$stmt(falsy))}, $$3.$$s = self, $$3.$$arity = 0, $$3));
              self.$line("}");
            }
          } else {
            self.$push("}")
          };
          if ($truthy(self['$needs_wrapper?']())) {
            return self.$wrap("(function() {", "; return nil; })()")
          } else {
            return nil
          };
        }, $IfNode_compile$1.$$arity = 0);
        
        Opal.def(self, '$truthy', $IfNode_truthy$4 = function $$truthy() {
          var $a, self = this;

          if ($truthy(self['$needs_wrapper?']())) {
            return self.$compiler().$returns(($truthy($a = self.$true_body()) ? $a : self.$s("nil")))
          } else {
            return self.$true_body()
          }
        }, $IfNode_truthy$4.$$arity = 0);
        
        Opal.def(self, '$falsy', $IfNode_falsy$5 = function $$falsy() {
          var $a, self = this;

          if ($truthy(self['$needs_wrapper?']())) {
            return self.$compiler().$returns(($truthy($a = self.$false_body()) ? $a : self.$s("nil")))
          } else {
            return self.$false_body()
          }
        }, $IfNode_falsy$5.$$arity = 0);
        return (Opal.def(self, '$needs_wrapper?', $IfNode_needs_wrapper$ques$6 = function() {
          var $a, self = this;

          return ($truthy($a = self['$expr?']()) ? $a : self['$recv?']())
        }, $IfNode_needs_wrapper$ques$6.$$arity = 0), nil) && 'needs_wrapper?';
      })($nesting[0], $$($nesting, 'Base'), $nesting);
      (function($base, $super, $parent_nesting) {
        var self = $klass($base, $super, 'IFlipFlop');

        var $nesting = [self].concat($parent_nesting), $IFlipFlop_compile$7;

        
        self.$handle("iflipflop");
        return (Opal.def(self, '$compile', $IFlipFlop_compile$7 = function $$compile() {
          var self = this;

          return self.$push("true")
        }, $IFlipFlop_compile$7.$$arity = 0), nil) && 'compile';
      })($nesting[0], $$($nesting, 'Base'), $nesting);
      (function($base, $super, $parent_nesting) {
        var self = $klass($base, $super, 'EFlipFlop');

        var $nesting = [self].concat($parent_nesting), $EFlipFlop_compile$8;

        
        self.$handle("eflipflop");
        return (Opal.def(self, '$compile', $EFlipFlop_compile$8 = function $$compile() {
          var self = this;

          return self.$push("true")
        }, $EFlipFlop_compile$8.$$arity = 0), nil) && 'compile';
      })($nesting[0], $$($nesting, 'Base'), $nesting);
    })($nesting[0], $nesting)
  })($nesting[0], $nesting);
};

/* Generated by Opal 1.0.0 */
Opal.modules["opal/nodes/logic"] = function(Opal) {
  function $rb_minus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs - rhs : lhs['$-'](rhs);
  }
  function $rb_gt(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs > rhs : lhs['$>'](rhs);
  }
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.$$$, $$ = Opal.$$, $module = Opal.module, $klass = Opal.klass, $truthy = Opal.truthy, $send = Opal.send;

  Opal.add_stubs(['$require', '$handle', '$in_while?', '$push', '$expr_or_nil', '$value', '$wrap', '$size', '$children', '$===', '$s', '$first', '$compile_while', '$iter?', '$scope', '$compile_iter', '$error', '$[]', '$while_loop', '$stmt?', '$line', '$break_val', '$nil?', '$expr', '$[]=', '$-', '$helper', '$identity', '$==', '$empty_splat?', '$recv', '$type', '$rhs', '$compile_if', '$compile_ternary', '$raise', '$with_temp', '$lhs', '$indent', '$js_truthy_optimize', '$>', '$find_parent_def', '$expr?', '$def?', '$return_in_iter?', '$return_expr_in_def?', '$scope_to_catch_return', '$catch_return=', '$return_val', '$to_s']);
  
  self.$require("opal/nodes/base");
  return (function($base, $parent_nesting) {
    var self = $module($base, 'Opal');

    var $nesting = [self].concat($parent_nesting);

    (function($base, $parent_nesting) {
      var self = $module($base, 'Nodes');

      var $nesting = [self].concat($parent_nesting);

      
      (function($base, $super, $parent_nesting) {
        var self = $klass($base, $super, 'NextNode');

        var $nesting = [self].concat($parent_nesting), $NextNode_compile$1, $NextNode_value$2;

        
        self.$handle("next");
        
        Opal.def(self, '$compile', $NextNode_compile$1 = function $$compile() {
          var self = this;

          if ($truthy(self['$in_while?']())) {
            return self.$push("continue;")
          } else {
            
            self.$push(self.$expr_or_nil(self.$value()));
            return self.$wrap("return ", ";");
          }
        }, $NextNode_compile$1.$$arity = 0);
        return (Opal.def(self, '$value', $NextNode_value$2 = function $$value() {
          var self = this, $case = nil;

          return (function() {$case = self.$children().$size();
          if ((0)['$===']($case)) {return self.$s("nil")}
          else if ((1)['$===']($case)) {return self.$children().$first()}
          else {return $send(self, 's', ["array"].concat(Opal.to_a(self.$children())))}})()
        }, $NextNode_value$2.$$arity = 0), nil) && 'value';
      })($nesting[0], $$($nesting, 'Base'), $nesting);
      (function($base, $super, $parent_nesting) {
        var self = $klass($base, $super, 'BreakNode');

        var $nesting = [self].concat($parent_nesting), $BreakNode_compile$3, $BreakNode_compile_while$4, $BreakNode_compile_iter$5, $BreakNode_break_val$6;

        
        self.$handle("break");
        self.$children("value");
        
        Opal.def(self, '$compile', $BreakNode_compile$3 = function $$compile() {
          var self = this;

          if ($truthy(self['$in_while?']())) {
            return self.$compile_while()
          } else if ($truthy(self.$scope()['$iter?']())) {
            return self.$compile_iter()
          } else {
            return self.$error("void value expression: cannot use break outside of iter/while")
          }
        }, $BreakNode_compile$3.$$arity = 0);
        
        Opal.def(self, '$compile_while', $BreakNode_compile_while$4 = function $$compile_while() {
          var self = this;

          if ($truthy(self.$while_loop()['$[]']("closure"))) {
            return self.$push("return ", self.$expr_or_nil(self.$value()))
          } else {
            return self.$push("break;")
          }
        }, $BreakNode_compile_while$4.$$arity = 0);
        
        Opal.def(self, '$compile_iter', $BreakNode_compile_iter$5 = function $$compile_iter() {
          var self = this;

          
          if ($truthy(self['$stmt?']())) {
          } else {
            self.$error("break must be used as a statement")
          };
          return self.$line("Opal.brk(", self.$break_val(), ", $brk)");
        }, $BreakNode_compile_iter$5.$$arity = 0);
        return (Opal.def(self, '$break_val', $BreakNode_break_val$6 = function $$break_val() {
          var self = this;

          if ($truthy(self.$value()['$nil?']())) {
            return self.$expr(self.$s("nil"))
          } else {
            return self.$expr(self.$value())
          }
        }, $BreakNode_break_val$6.$$arity = 0), nil) && 'break_val';
      })($nesting[0], $$($nesting, 'Base'), $nesting);
      (function($base, $super, $parent_nesting) {
        var self = $klass($base, $super, 'RedoNode');

        var $nesting = [self].concat($parent_nesting), $RedoNode_compile$7, $RedoNode_compile_while$8, $RedoNode_compile_iter$9;

        
        self.$handle("redo");
        
        Opal.def(self, '$compile', $RedoNode_compile$7 = function $$compile() {
          var self = this;

          if ($truthy(self['$in_while?']())) {
            return self.$compile_while()
          } else if ($truthy(self.$scope()['$iter?']())) {
            return self.$compile_iter()
          } else {
            return self.$push("REDO()")
          }
        }, $RedoNode_compile$7.$$arity = 0);
        
        Opal.def(self, '$compile_while', $RedoNode_compile_while$8 = function $$compile_while() {
          var self = this, $writer = nil;

          
          
          $writer = ["use_redo", true];
          $send(self.$while_loop(), '[]=', Opal.to_a($writer));
          $writer[$rb_minus($writer["length"], 1)];;
          return self.$push("" + (self.$while_loop()['$[]']("redo_var")) + " = true; continue;");
        }, $RedoNode_compile_while$8.$$arity = 0);
        return (Opal.def(self, '$compile_iter', $RedoNode_compile_iter$9 = function $$compile_iter() {
          var self = this;

          
          self.$helper("slice");
          return self.$push("" + "return " + (self.$scope().$identity()) + ".apply(null, $slice.call(arguments))");
        }, $RedoNode_compile_iter$9.$$arity = 0), nil) && 'compile_iter';
      })($nesting[0], $$($nesting, 'Base'), $nesting);
      (function($base, $super, $parent_nesting) {
        var self = $klass($base, $super, 'SplatNode');

        var $nesting = [self].concat($parent_nesting), $SplatNode_empty_splat$ques$10, $SplatNode_compile$11;

        
        self.$handle("splat");
        self.$children("value");
        
        Opal.def(self, '$empty_splat?', $SplatNode_empty_splat$ques$10 = function() {
          var self = this;

          return self.$value()['$=='](self.$s("array"))
        }, $SplatNode_empty_splat$ques$10.$$arity = 0);
        return (Opal.def(self, '$compile', $SplatNode_compile$11 = function $$compile() {
          var self = this;

          if ($truthy(self['$empty_splat?']())) {
            return self.$push("[]")
          } else {
            return self.$push("Opal.to_a(", self.$recv(self.$value()), ")")
          }
        }, $SplatNode_compile$11.$$arity = 0), nil) && 'compile';
      })($nesting[0], $$($nesting, 'Base'), $nesting);
      (function($base, $super, $parent_nesting) {
        var self = $klass($base, $super, 'BinaryOp');

        var $nesting = [self].concat($parent_nesting), $BinaryOp_compile$12, $BinaryOp_compile_ternary$13, $BinaryOp_compile_if$14;

        
        
        Opal.def(self, '$compile', $BinaryOp_compile$12 = function $$compile() {
          var self = this;

          if (self.$rhs().$type()['$==']("break")) {
            return self.$compile_if()
          } else {
            return self.$compile_ternary()
          }
        }, $BinaryOp_compile$12.$$arity = 0);
        
        Opal.def(self, '$compile_ternary', $BinaryOp_compile_ternary$13 = function $$compile_ternary() {
          var self = this;

          return self.$raise($$($nesting, 'NotImplementedError'))
        }, $BinaryOp_compile_ternary$13.$$arity = 0);
        return (Opal.def(self, '$compile_if', $BinaryOp_compile_if$14 = function $$compile_if() {
          var self = this;

          return self.$raise($$($nesting, 'NotImplementedError'))
        }, $BinaryOp_compile_if$14.$$arity = 0), nil) && 'compile_if';
      })($nesting[0], $$($nesting, 'Base'), $nesting);
      (function($base, $super, $parent_nesting) {
        var self = $klass($base, $super, 'OrNode');

        var $nesting = [self].concat($parent_nesting), $OrNode_compile_ternary$15, $OrNode_compile_if$17;

        
        self.$handle("or");
        self.$children("lhs", "rhs");
        
        Opal.def(self, '$compile_ternary', $OrNode_compile_ternary$15 = function $$compile_ternary() {
          var $$16, self = this;

          
          self.$helper("truthy");
          return $send(self, 'with_temp', [], ($$16 = function(tmp){var self = $$16.$$s == null ? this : $$16.$$s;

          
            
            if (tmp == null) {
              tmp = nil;
            };
            return self.$push("" + "($truthy(" + (tmp) + " = ", self.$expr(self.$lhs()), "" + ") ? " + (tmp) + " : ", self.$expr(self.$rhs()), ")");}, $$16.$$s = self, $$16.$$arity = 1, $$16));
        }, $OrNode_compile_ternary$15.$$arity = 0);
        return (Opal.def(self, '$compile_if', $OrNode_compile_if$17 = function $$compile_if() {
          var $$18, self = this;

          
          self.$helper("truthy");
          return $send(self, 'with_temp', [], ($$18 = function(tmp){var self = $$18.$$s == null ? this : $$18.$$s, $$19, $$20;

          
            
            if (tmp == null) {
              tmp = nil;
            };
            self.$push("" + "if ($truthy(" + (tmp) + " = ", self.$expr(self.$lhs()), ")) {");
            $send(self, 'indent', [], ($$19 = function(){var self = $$19.$$s == null ? this : $$19.$$s;

            return self.$line(tmp)}, $$19.$$s = self, $$19.$$arity = 0, $$19));
            self.$line("} else {");
            $send(self, 'indent', [], ($$20 = function(){var self = $$20.$$s == null ? this : $$20.$$s;

            return self.$line(self.$expr(self.$rhs()))}, $$20.$$s = self, $$20.$$arity = 0, $$20));
            return self.$line("}");}, $$18.$$s = self, $$18.$$arity = 1, $$18));
        }, $OrNode_compile_if$17.$$arity = 0), nil) && 'compile_if';
      })($nesting[0], $$($nesting, 'BinaryOp'), $nesting);
      (function($base, $super, $parent_nesting) {
        var self = $klass($base, $super, 'AndNode');

        var $nesting = [self].concat($parent_nesting), $AndNode_compile_ternary$21, $AndNode_compile_if$23;

        
        self.$handle("and");
        self.$children("lhs", "rhs");
        
        Opal.def(self, '$compile_ternary', $AndNode_compile_ternary$21 = function $$compile_ternary() {
          var $$22, self = this, truthy_opt = nil;

          
          truthy_opt = nil;
          return $send(self, 'with_temp', [], ($$22 = function(tmp){var self = $$22.$$s == null ? this : $$22.$$s;

          
            
            if (tmp == null) {
              tmp = nil;
            };
            if ($truthy((truthy_opt = self.$js_truthy_optimize(self.$lhs())))) {
              
              self.$push("" + "((" + (tmp) + " = ", truthy_opt);
              self.$push(") ? ");
              self.$push(self.$expr(self.$rhs()));
              return self.$push(" : ", self.$expr(self.$lhs()), ")");
            } else {
              
              self.$helper("truthy");
              return self.$push("" + "($truthy(" + (tmp) + " = ", self.$expr(self.$lhs()), ") ? ", self.$expr(self.$rhs()), "" + " : " + (tmp) + ")");
            };}, $$22.$$s = self, $$22.$$arity = 1, $$22));
        }, $AndNode_compile_ternary$21.$$arity = 0);
        return (Opal.def(self, '$compile_if', $AndNode_compile_if$23 = function $$compile_if() {
          var $a, $$24, $$25, self = this, condition = nil;

          
          self.$helper("truthy");
          condition = ($truthy($a = self.$js_truthy_optimize(self.$lhs())) ? $a : self.$expr(self.$lhs()));
          self.$line("if ($truthy(", condition, ")) {");
          $send(self, 'indent', [], ($$24 = function(){var self = $$24.$$s == null ? this : $$24.$$s;

          return self.$line(self.$expr(self.$rhs()))}, $$24.$$s = self, $$24.$$arity = 0, $$24));
          self.$line("} else {");
          $send(self, 'indent', [], ($$25 = function(){var self = $$25.$$s == null ? this : $$25.$$s;

          return self.$line(self.$expr(self.$lhs()))}, $$25.$$s = self, $$25.$$arity = 0, $$25));
          return self.$line("}");
        }, $AndNode_compile_if$23.$$arity = 0), nil) && 'compile_if';
      })($nesting[0], $$($nesting, 'BinaryOp'), $nesting);
      (function($base, $super, $parent_nesting) {
        var self = $klass($base, $super, 'ReturnNode');

        var $nesting = [self].concat($parent_nesting), $ReturnNode_return_val$26, $ReturnNode_return_in_iter$ques$27, $ReturnNode_return_expr_in_def$ques$28, $ReturnNode_scope_to_catch_return$29, $ReturnNode_compile$30;

        
        self.$handle("return");
        self.$children("value");
        
        Opal.def(self, '$return_val', $ReturnNode_return_val$26 = function $$return_val() {
          var self = this;

          if ($truthy(self.$value()['$nil?']())) {
            return self.$expr(self.$s("nil"))
          } else if ($truthy($rb_gt(self.$children().$size(), 1))) {
            return self.$expr($send(self, 's', ["array"].concat(Opal.to_a(self.$children()))))
          } else {
            return self.$expr(self.$value())
          }
        }, $ReturnNode_return_val$26.$$arity = 0);
        
        Opal.def(self, '$return_in_iter?', $ReturnNode_return_in_iter$ques$27 = function() {
          var $a, self = this, parent_def = nil;

          if ($truthy(($truthy($a = self.$scope()['$iter?']()) ? (parent_def = self.$scope().$find_parent_def()) : $a))) {
            return parent_def
          } else {
            return nil
          }
        }, $ReturnNode_return_in_iter$ques$27.$$arity = 0);
        
        Opal.def(self, '$return_expr_in_def?', $ReturnNode_return_expr_in_def$ques$28 = function() {
          var $a, self = this;

          if ($truthy(($truthy($a = self['$expr?']()) ? self.$scope()['$def?']() : $a))) {
            return self.$scope()
          } else {
            return nil
          }
        }, $ReturnNode_return_expr_in_def$ques$28.$$arity = 0);
        
        Opal.def(self, '$scope_to_catch_return', $ReturnNode_scope_to_catch_return$29 = function $$scope_to_catch_return() {
          var $a, self = this;

          return ($truthy($a = self['$return_in_iter?']()) ? $a : self['$return_expr_in_def?']())
        }, $ReturnNode_scope_to_catch_return$29.$$arity = 0);
        return (Opal.def(self, '$compile', $ReturnNode_compile$30 = function $$compile() {
          var self = this, def_scope = nil, $writer = nil;

          if ($truthy((def_scope = self.$scope_to_catch_return()))) {
            
            
            $writer = [true];
            $send(def_scope, 'catch_return=', Opal.to_a($writer));
            $writer[$rb_minus($writer["length"], 1)];;
            return self.$push("Opal.ret(", self.$return_val(), ")");
          } else if ($truthy(self['$stmt?']())) {
            return self.$push("return ", self.$return_val())
          } else {
            return self.$raise($$($nesting, 'SyntaxError'), "void value expression: cannot return as an expression")
          }
        }, $ReturnNode_compile$30.$$arity = 0), nil) && 'compile';
      })($nesting[0], $$($nesting, 'Base'), $nesting);
      (function($base, $super, $parent_nesting) {
        var self = $klass($base, $super, 'JSReturnNode');

        var $nesting = [self].concat($parent_nesting), $JSReturnNode_compile$31;

        
        self.$handle("js_return");
        self.$children("value");
        return (Opal.def(self, '$compile', $JSReturnNode_compile$31 = function $$compile() {
          var self = this;

          
          self.$push("return ");
          return self.$push(self.$expr(self.$value()));
        }, $JSReturnNode_compile$31.$$arity = 0), nil) && 'compile';
      })($nesting[0], $$($nesting, 'Base'), $nesting);
      (function($base, $super, $parent_nesting) {
        var self = $klass($base, $super, 'JSTempNode');

        var $nesting = [self].concat($parent_nesting), $JSTempNode_compile$32;

        
        self.$handle("js_tmp");
        self.$children("value");
        return (Opal.def(self, '$compile', $JSTempNode_compile$32 = function $$compile() {
          var self = this;

          return self.$push(self.$value().$to_s())
        }, $JSTempNode_compile$32.$$arity = 0), nil) && 'compile';
      })($nesting[0], $$($nesting, 'Base'), $nesting);
      (function($base, $super, $parent_nesting) {
        var self = $klass($base, $super, 'BlockPassNode');

        var $nesting = [self].concat($parent_nesting), $BlockPassNode_compile$33;

        
        self.$handle("block_pass");
        self.$children("value");
        return (Opal.def(self, '$compile', $BlockPassNode_compile$33 = function $$compile() {
          var self = this;

          return self.$push(self.$expr(self.$s("send", self.$value(), "to_proc", self.$s("arglist"))))
        }, $BlockPassNode_compile$33.$$arity = 0), nil) && 'compile';
      })($nesting[0], $$($nesting, 'Base'), $nesting);
    })($nesting[0], $nesting)
  })($nesting[0], $nesting);
};

/* Generated by Opal 1.0.0 */
Opal.modules["opal/nodes/definitions"] = function(Opal) {
  function $rb_gt(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs > rhs : lhs['$>'](rhs);
  }
  function $rb_plus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs + rhs : lhs['$+'](rhs);
  }
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.$$$, $$ = Opal.$$, $module = Opal.module, $klass = Opal.klass, $send = Opal.send, $truthy = Opal.truthy, $slice = Opal.slice;

  Opal.add_stubs(['$require', '$handle', '$children', '$each', '$line', '$expr', '$push', '$new_name', '$old_name', '$empty?', '$stmt?', '$compile_children', '$simple_children?', '$compile_inline_children', '$>', '$size', '$wrap', '$==', '$returned_children', '$+', '$returns', '$compiler', '$s', '$process', '$freeze', '$none?', '$include?', '$type', '$map', '$each_with_index', '$reject', '$to_proc']);
  
  self.$require("opal/nodes/base");
  return (function($base, $parent_nesting) {
    var self = $module($base, 'Opal');

    var $nesting = [self].concat($parent_nesting);

    (function($base, $parent_nesting) {
      var self = $module($base, 'Nodes');

      var $nesting = [self].concat($parent_nesting);

      
      (function($base, $super, $parent_nesting) {
        var self = $klass($base, $super, 'UndefNode');

        var $nesting = [self].concat($parent_nesting), $UndefNode_compile$1;

        
        self.$handle("undef");
        self.$children("value");
        return (Opal.def(self, '$compile', $UndefNode_compile$1 = function $$compile() {
          var $$2, self = this;

          return $send(self.$children(), 'each', [], ($$2 = function(child){var self = $$2.$$s == null ? this : $$2.$$s;

          
            
            if (child == null) {
              child = nil;
            };
            return self.$line("Opal.udef(self, '$' + ", self.$expr(child), ");");}, $$2.$$s = self, $$2.$$arity = 1, $$2))
        }, $UndefNode_compile$1.$$arity = 0), nil) && 'compile';
      })($nesting[0], $$($nesting, 'Base'), $nesting);
      (function($base, $super, $parent_nesting) {
        var self = $klass($base, $super, 'AliasNode');

        var $nesting = [self].concat($parent_nesting), $AliasNode_compile$3;

        
        self.$handle("alias");
        self.$children("new_name", "old_name");
        return (Opal.def(self, '$compile', $AliasNode_compile$3 = function $$compile() {
          var self = this;

          return self.$push("Opal.alias(self, ", self.$expr(self.$new_name()), ", ", self.$expr(self.$old_name()), ")")
        }, $AliasNode_compile$3.$$arity = 0), nil) && 'compile';
      })($nesting[0], $$($nesting, 'Base'), $nesting);
      (function($base, $super, $parent_nesting) {
        var self = $klass($base, $super, 'BeginNode');

        var $nesting = [self].concat($parent_nesting), $BeginNode_compile$4, $BeginNode_returned_children$5, $BeginNode_compile_children$6, $BeginNode_simple_children$ques$8, $BeginNode_compile_inline_children$10;

        self.$$prototype.level = self.$$prototype.returned_children = nil;
        
        self.$handle("begin");
        
        Opal.def(self, '$compile', $BeginNode_compile$4 = function $$compile() {
          var self = this;

          
          if ($truthy(self.$children()['$empty?']())) {
            return self.$push("nil")};
          if ($truthy(self['$stmt?']())) {
            return self.$compile_children(self.$children(), self.level)
          } else if ($truthy(self['$simple_children?']())) {
            
            self.$compile_inline_children(self.$children(), self.level);
            if ($truthy($rb_gt(self.$children().$size(), 1))) {
              return self.$wrap("(", ")")
            } else {
              return nil
            };
          } else if (self.$children().$size()['$=='](1)) {
            return self.$compile_inline_children(self.$returned_children(), self.level)
          } else {
            
            self.$compile_children(self.$returned_children(), self.level);
            return self.$wrap("(function() {", "})()");
          };
        }, $BeginNode_compile$4.$$arity = 0);
        
        Opal.def(self, '$returned_children', $BeginNode_returned_children$5 = function $$returned_children() {
          var $a, $b, $c, self = this, rest = nil, last_child = nil;

          return (self.returned_children = ($truthy($a = self.returned_children) ? $a : ($b = [].concat(Opal.to_a(self.$children())), $c = $b.length - 1, $c = ($c < 0) ? 0 : $c, (rest = $slice.call($b, 0, $c)), (last_child = ($b[$c] == null ? nil : $b[$c])), $b, (function() {if ($truthy(last_child)) {
            return $rb_plus(rest, [self.$compiler().$returns(last_child)])
          } else {
            return [self.$s("nil")]
          }; return nil; })())))
        }, $BeginNode_returned_children$5.$$arity = 0);
        
        Opal.def(self, '$compile_children', $BeginNode_compile_children$6 = function $$compile_children(children, level) {
          var $$7, self = this;

          return $send(children, 'each', [], ($$7 = function(child){var self = $$7.$$s == null ? this : $$7.$$s;

          
            
            if (child == null) {
              child = nil;
            };
            return self.$line(self.$process(child, level), ";");}, $$7.$$s = self, $$7.$$arity = 1, $$7))
        }, $BeginNode_compile_children$6.$$arity = 2);
        Opal.const_set($nesting[0], 'COMPLEX_CHILDREN', ["while", "while_post", "until", "until_post", "js_return"].$freeze());
        
        Opal.def(self, '$simple_children?', $BeginNode_simple_children$ques$8 = function() {
          var $$9, self = this;

          return $send(self.$children(), 'none?', [], ($$9 = function(child){var self = $$9.$$s == null ? this : $$9.$$s;

          
            
            if (child == null) {
              child = nil;
            };
            return $$($nesting, 'COMPLEX_CHILDREN')['$include?'](child.$type());}, $$9.$$s = self, $$9.$$arity = 1, $$9))
        }, $BeginNode_simple_children$ques$8.$$arity = 0);
        return (Opal.def(self, '$compile_inline_children', $BeginNode_compile_inline_children$10 = function $$compile_inline_children(children, level) {
          var $$11, $$12, self = this, processed_children = nil;

          
          processed_children = $send(children, 'map', [], ($$11 = function(child){var self = $$11.$$s == null ? this : $$11.$$s;

          
            
            if (child == null) {
              child = nil;
            };
            return self.$process(child, level);}, $$11.$$s = self, $$11.$$arity = 1, $$11));
          return $send($send(processed_children, 'reject', [], "empty?".$to_proc()), 'each_with_index', [], ($$12 = function(child, idx){var self = $$12.$$s == null ? this : $$12.$$s;

          
            
            if (child == null) {
              child = nil;
            };
            
            if (idx == null) {
              idx = nil;
            };
            if (idx['$=='](0)) {
            } else {
              self.$push(", ")
            };
            return self.$push(child);}, $$12.$$s = self, $$12.$$arity = 2, $$12));
        }, $BeginNode_compile_inline_children$10.$$arity = 2), nil) && 'compile_inline_children';
      })($nesting[0], $$($nesting, 'ScopeNode'), $nesting);
      (function($base, $super, $parent_nesting) {
        var self = $klass($base, $super, 'KwBeginNode');

        var $nesting = [self].concat($parent_nesting);

        return self.$handle("kwbegin")
      })($nesting[0], $$($nesting, 'BeginNode'), $nesting);
    })($nesting[0], $nesting)
  })($nesting[0], $nesting);
};

/* Generated by Opal 1.0.0 */
Opal.modules["opal/nodes/yield"] = function(Opal) {
  function $rb_minus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs - rhs : lhs['$-'](rhs);
  }
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.$$$, $$ = Opal.$$, $module = Opal.module, $klass = Opal.klass, $truthy = Opal.truthy, $send = Opal.send;

  Opal.add_stubs(['$require', '$find_yielding_scope', '$uses_block!', '$block_name', '$block_name=', '$-', '$yields_single_arg?', '$children', '$push', '$expr', '$first', '$wrap', '$s', '$uses_splat?', '$scope', '$def?', '$parent', '$!', '$==', '$size', '$any?', '$type', '$handle', '$compile_call']);
  
  self.$require("opal/nodes/base");
  return (function($base, $parent_nesting) {
    var self = $module($base, 'Opal');

    var $nesting = [self].concat($parent_nesting);

    (function($base, $parent_nesting) {
      var self = $module($base, 'Nodes');

      var $nesting = [self].concat($parent_nesting);

      
      (function($base, $super, $parent_nesting) {
        var self = $klass($base, $super, 'BaseYieldNode');

        var $nesting = [self].concat($parent_nesting), $BaseYieldNode_compile_call$1, $BaseYieldNode_find_yielding_scope$2, $BaseYieldNode_yields_single_arg$ques$3, $BaseYieldNode_uses_splat$ques$4;

        
        
        Opal.def(self, '$compile_call', $BaseYieldNode_compile_call$1 = function $$compile_call() {
          var $a, self = this, yielding_scope = nil, $writer = nil, block_name = nil;

          
          yielding_scope = self.$find_yielding_scope();
          yielding_scope['$uses_block!']();
          ($truthy($a = yielding_scope.$block_name()) ? $a : (($writer = ["$yield"]), $send(yielding_scope, 'block_name=', Opal.to_a($writer)), $writer[$rb_minus($writer["length"], 1)]));
          block_name = yielding_scope.$block_name();
          if ($truthy(self['$yields_single_arg?'](self.$children()))) {
            
            self.$push(self.$expr(self.$children().$first()));
            return self.$wrap("" + "Opal.yield1(" + (block_name) + ", ", ")");
          } else {
            
            self.$push(self.$expr($send(self, 's', ["arglist"].concat(Opal.to_a(self.$children())))));
            if ($truthy(self['$uses_splat?'](self.$children()))) {
              return self.$wrap("" + "Opal.yieldX(" + (block_name) + ", ", ")")
            } else {
              return self.$wrap("" + "Opal.yieldX(" + (block_name) + ", [", "])")
            };
          };
        }, $BaseYieldNode_compile_call$1.$$arity = 0);
        
        Opal.def(self, '$find_yielding_scope', $BaseYieldNode_find_yielding_scope$2 = function $$find_yielding_scope() {
          var $a, $b, self = this, working = nil;

          
          working = self.$scope();
          while ($truthy(working)) {
            
            if ($truthy(($truthy($b = working.$block_name()) ? $b : working['$def?']()))) {
              break;};
            working = working.$parent();
          };
          return working;
        }, $BaseYieldNode_find_yielding_scope$2.$$arity = 0);
        
        Opal.def(self, '$yields_single_arg?', $BaseYieldNode_yields_single_arg$ques$3 = function(children) {
          var $a, self = this;

          return ($truthy($a = self['$uses_splat?'](children)['$!']()) ? children.$size()['$=='](1) : $a)
        }, $BaseYieldNode_yields_single_arg$ques$3.$$arity = 1);
        return (Opal.def(self, '$uses_splat?', $BaseYieldNode_uses_splat$ques$4 = function(children) {
          var $$5, self = this;

          return $send(children, 'any?', [], ($$5 = function(child){var self = $$5.$$s == null ? this : $$5.$$s;

          
            
            if (child == null) {
              child = nil;
            };
            return child.$type()['$==']("splat");}, $$5.$$s = self, $$5.$$arity = 1, $$5))
        }, $BaseYieldNode_uses_splat$ques$4.$$arity = 1), nil) && 'uses_splat?';
      })($nesting[0], $$($nesting, 'Base'), $nesting);
      (function($base, $super, $parent_nesting) {
        var self = $klass($base, $super, 'YieldNode');

        var $nesting = [self].concat($parent_nesting), $YieldNode_compile$6;

        
        self.$handle("yield");
        return (Opal.def(self, '$compile', $YieldNode_compile$6 = function $$compile() {
          var self = this;

          return self.$compile_call()
        }, $YieldNode_compile$6.$$arity = 0), nil) && 'compile';
      })($nesting[0], $$($nesting, 'BaseYieldNode'), $nesting);
      (function($base, $super, $parent_nesting) {
        var self = $klass($base, $super, 'ReturnableYieldNode');

        var $nesting = [self].concat($parent_nesting), $ReturnableYieldNode_compile$7;

        
        self.$handle("returnable_yield");
        return (Opal.def(self, '$compile', $ReturnableYieldNode_compile$7 = function $$compile() {
          var self = this;

          
          self.$compile_call();
          return self.$wrap("return ", ";");
        }, $ReturnableYieldNode_compile$7.$$arity = 0), nil) && 'compile';
      })($nesting[0], $$($nesting, 'BaseYieldNode'), $nesting);
    })($nesting[0], $nesting)
  })($nesting[0], $nesting);
};

/* Generated by Opal 1.0.0 */
Opal.modules["opal/nodes/rescue"] = function(Opal) {
  function $rb_minus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs - rhs : lhs['$-'](rhs);
  }
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.$$$, $$ = Opal.$$, $module = Opal.module, $klass = Opal.klass, $send = Opal.send, $truthy = Opal.truthy, $range = Opal.range;

  Opal.add_stubs(['$require', '$handle', '$children', '$push', '$in_ensure', '$line', '$stmt', '$body_sexp', '$indent', '$has_rescue_else?', '$unshift', '$rescue_else_code', '$process', '$compiler', '$ensr_sexp', '$wrap_in_closure?', '$wrap', '$returns', '$begn', '$ensr', '$s', '$recv?', '$expr?', '$rescue_else_sexp', '$scope', '$stmt?', '$detect', '$[]', '$!=', '$type', '$rescue_else_sexp=', '$-', '$handle_rescue_else_manually?', '$body_code', '$each_with_index', '$==', '$nil?', '$body', '$!', '$in_ensure?', '$expr', '$klasses', '$lvar', '$rescue_body', '$klasses_sexp']);
  
  self.$require("opal/nodes/base");
  return (function($base, $parent_nesting) {
    var self = $module($base, 'Opal');

    var $nesting = [self].concat($parent_nesting);

    (function($base, $parent_nesting) {
      var self = $module($base, 'Nodes');

      var $nesting = [self].concat($parent_nesting);

      
      (function($base, $super, $parent_nesting) {
        var self = $klass($base, $super, 'EnsureNode');

        var $nesting = [self].concat($parent_nesting), $EnsureNode_compile$1, $EnsureNode_body_sexp$6, $EnsureNode_ensr_sexp$7, $EnsureNode_wrap_in_closure$ques$8, $EnsureNode_rescue_else_code$9;

        
        self.$handle("ensure");
        self.$children("begn", "ensr");
        
        Opal.def(self, '$compile', $EnsureNode_compile$1 = function $$compile() {
          var $$2, $$3, self = this;

          
          self.$push("try {");
          $send(self, 'in_ensure', [], ($$2 = function(){var self = $$2.$$s == null ? this : $$2.$$s;

          return self.$line(self.$stmt(self.$body_sexp()))}, $$2.$$s = self, $$2.$$arity = 0, $$2));
          self.$line("} finally {");
          $send(self, 'indent', [], ($$3 = function(){var self = $$3.$$s == null ? this : $$3.$$s, $$4;
            if (self.level == null) self.level = nil;

          if ($truthy(self['$has_rescue_else?']())) {
              
              self.$unshift("var $no_errors = true; ");
              self.$line("var $rescue_else_result;");
              self.$line("if ($no_errors) { ");
              $send(self, 'indent', [], ($$4 = function(){var self = $$4.$$s == null ? this : $$4.$$s, $$5;

              
                self.$line("$rescue_else_result = (function() {");
                $send(self, 'indent', [], ($$5 = function(){var self = $$5.$$s == null ? this : $$5.$$s;

                return self.$line(self.$stmt(self.$rescue_else_code()))}, $$5.$$s = self, $$5.$$arity = 0, $$5));
                return self.$line("})();");}, $$4.$$s = self, $$4.$$arity = 0, $$4));
              self.$line("}");
              self.$line(self.$compiler().$process(self.$ensr_sexp(), self.level));
              return self.$line("if ($no_errors) { return $rescue_else_result; }");
            } else {
              return self.$line(self.$compiler().$process(self.$ensr_sexp(), self.level))
            }}, $$3.$$s = self, $$3.$$arity = 0, $$3));
          self.$line("}");
          if ($truthy(self['$wrap_in_closure?']())) {
            return self.$wrap("(function() { ", "; })()")
          } else {
            return nil
          };
        }, $EnsureNode_compile$1.$$arity = 0);
        
        Opal.def(self, '$body_sexp', $EnsureNode_body_sexp$6 = function $$body_sexp() {
          var self = this;

          if ($truthy(self['$wrap_in_closure?']())) {
            return self.$compiler().$returns(self.$begn())
          } else {
            return self.$begn()
          }
        }, $EnsureNode_body_sexp$6.$$arity = 0);
        
        Opal.def(self, '$ensr_sexp', $EnsureNode_ensr_sexp$7 = function $$ensr_sexp() {
          var $a, self = this;

          return ($truthy($a = self.$ensr()) ? $a : self.$s("nil"))
        }, $EnsureNode_ensr_sexp$7.$$arity = 0);
        
        Opal.def(self, '$wrap_in_closure?', $EnsureNode_wrap_in_closure$ques$8 = function() {
          var $a, $b, self = this;

          return ($truthy($a = ($truthy($b = self['$recv?']()) ? $b : self['$expr?']())) ? $a : self['$has_rescue_else?']())
        }, $EnsureNode_wrap_in_closure$ques$8.$$arity = 0);
        return (Opal.def(self, '$rescue_else_code', $EnsureNode_rescue_else_code$9 = function $$rescue_else_code() {
          var self = this, rescue_else_code = nil;

          
          rescue_else_code = self.$scope().$rescue_else_sexp();
          if ($truthy(self['$stmt?']())) {
          } else {
            rescue_else_code = self.$compiler().$returns(rescue_else_code)
          };
          return rescue_else_code;
        }, $EnsureNode_rescue_else_code$9.$$arity = 0), nil) && 'rescue_else_code';
      })($nesting[0], $$($nesting, 'Base'), $nesting);
      (function($base, $super, $parent_nesting) {
        var self = $klass($base, $super, 'RescueNode');

        var $nesting = [self].concat($parent_nesting), $RescueNode_compile$10, $RescueNode_body_code$17, $RescueNode_rescue_else_code$18, $RescueNode_handle_rescue_else_manually$ques$19;

        
        self.$handle("rescue");
        self.$children("body");
        
        Opal.def(self, '$compile', $RescueNode_compile$10 = function $$compile() {
          var $$11, $$12, $$13, $$15, $a, self = this, $writer = nil, _has_rescue_handlers = nil;

          
          
          $writer = [$send(self.$children()['$[]']($range(1, -1, false)), 'detect', [], ($$11 = function(sexp){var self = $$11.$$s == null ? this : $$11.$$s, $a;

          
            
            if (sexp == null) {
              sexp = nil;
            };
            return ($truthy($a = sexp) ? sexp.$type()['$!=']("resbody") : $a);}, $$11.$$s = self, $$11.$$arity = 1, $$11))];
          $send(self.$scope(), 'rescue_else_sexp=', Opal.to_a($writer));
          $writer[$rb_minus($writer["length"], 1)];;
          _has_rescue_handlers = false;
          if ($truthy(self['$handle_rescue_else_manually?']())) {
            self.$line("var $no_errors = true;")};
          self.$push("try {");
          $send(self, 'indent', [], ($$12 = function(){var self = $$12.$$s == null ? this : $$12.$$s;

          return self.$line(self.$stmt(self.$body_code()))}, $$12.$$s = self, $$12.$$arity = 0, $$12));
          self.$line("} catch ($err) {");
          $send(self, 'indent', [], ($$13 = function(){var self = $$13.$$s == null ? this : $$13.$$s, $$14;

          
            if ($truthy(self['$has_rescue_else?']())) {
              self.$line("$no_errors = false;")};
            $send(self.$children()['$[]']($range(1, -1, false)), 'each_with_index', [], ($$14 = function(child, idx){var self = $$14.$$s == null ? this : $$14.$$s, $a;
              if (self.level == null) self.level = nil;

            
              
              if (child == null) {
                child = nil;
              };
              
              if (idx == null) {
                idx = nil;
              };
              if ($truthy(($truthy($a = child) ? child.$type()['$==']("resbody") : $a))) {
              } else {
                return nil;
              };
              _has_rescue_handlers = true;
              if (idx['$=='](0)) {
              } else {
                self.$push(" else ")
              };
              return self.$line(self.$process(child, self.level));}, $$14.$$s = self, $$14.$$arity = 2, $$14));
            return self.$push(" else { throw $err; }");}, $$13.$$s = self, $$13.$$arity = 0, $$13));
          self.$line("}");
          if ($truthy(self['$handle_rescue_else_manually?']())) {
            
            self.$push("finally {");
            $send(self, 'indent', [], ($$15 = function(){var self = $$15.$$s == null ? this : $$15.$$s, $$16;

            
              self.$line("if ($no_errors) { ");
              $send(self, 'indent', [], ($$16 = function(){var self = $$16.$$s == null ? this : $$16.$$s;

              return self.$line(self.$stmt(self.$rescue_else_code()))}, $$16.$$s = self, $$16.$$arity = 0, $$16));
              return self.$line("}");}, $$15.$$s = self, $$15.$$arity = 0, $$15));
            self.$push("}");};
          if ($truthy(($truthy($a = self['$expr?']()) ? $a : self['$recv?']()))) {
            return self.$wrap("(function() { ", "})()")
          } else {
            return nil
          };
        }, $RescueNode_compile$10.$$arity = 0);
        
        Opal.def(self, '$body_code', $RescueNode_body_code$17 = function $$body_code() {
          var $a, self = this, body_code = nil;

          
          body_code = (function() {if ($truthy(($truthy($a = self.$body()['$nil?']()) ? $a : self.$body().$type()['$==']("resbody")))) {
            return self.$s("nil")
          } else {
            return self.$body()
          }; return nil; })();
          if ($truthy(self['$stmt?']())) {
          } else {
            body_code = self.$compiler().$returns(body_code)
          };
          return body_code;
        }, $RescueNode_body_code$17.$$arity = 0);
        
        Opal.def(self, '$rescue_else_code', $RescueNode_rescue_else_code$18 = function $$rescue_else_code() {
          var self = this, rescue_else_code = nil;

          
          rescue_else_code = self.$scope().$rescue_else_sexp();
          if ($truthy(self['$stmt?']())) {
          } else {
            rescue_else_code = self.$compiler().$returns(rescue_else_code)
          };
          return rescue_else_code;
        }, $RescueNode_rescue_else_code$18.$$arity = 0);
        return (Opal.def(self, '$handle_rescue_else_manually?', $RescueNode_handle_rescue_else_manually$ques$19 = function() {
          var $a, self = this;

          return ($truthy($a = self.$scope()['$in_ensure?']()['$!']()) ? self.$scope()['$has_rescue_else?']() : $a)
        }, $RescueNode_handle_rescue_else_manually$ques$19.$$arity = 0), nil) && 'handle_rescue_else_manually?';
      })($nesting[0], $$($nesting, 'Base'), $nesting);
      (function($base, $super, $parent_nesting) {
        var self = $klass($base, $super, 'ResBodyNode');

        var $nesting = [self].concat($parent_nesting), $ResBodyNode_compile$20, $ResBodyNode_klasses$23, $ResBodyNode_rescue_body$24;

        
        self.$handle("resbody");
        self.$children("klasses_sexp", "lvar", "body");
        
        Opal.def(self, '$compile', $ResBodyNode_compile$20 = function $$compile() {
          var $$21, self = this;

          
          self.$push("if (Opal.rescue($err, ", self.$expr(self.$klasses()), ")) {");
          $send(self, 'indent', [], ($$21 = function(){var self = $$21.$$s == null ? this : $$21.$$s, $$22;

          
            if ($truthy(self.$lvar())) {
              self.$push(self.$expr(self.$lvar()), "$err;")};
            self.$line("try {");
            $send(self, 'indent', [], ($$22 = function(){var self = $$22.$$s == null ? this : $$22.$$s;

            return self.$line(self.$stmt(self.$rescue_body()))}, $$22.$$s = self, $$22.$$arity = 0, $$22));
            return self.$line("} finally { Opal.pop_exception() }");}, $$21.$$s = self, $$21.$$arity = 0, $$21));
          return self.$line("}");
        }, $ResBodyNode_compile$20.$$arity = 0);
        
        Opal.def(self, '$klasses', $ResBodyNode_klasses$23 = function $$klasses() {
          var $a, self = this;

          return ($truthy($a = self.$klasses_sexp()) ? $a : self.$s("array", self.$s("const", nil, "StandardError")))
        }, $ResBodyNode_klasses$23.$$arity = 0);
        return (Opal.def(self, '$rescue_body', $ResBodyNode_rescue_body$24 = function $$rescue_body() {
          var $a, self = this, body_code = nil;

          
          body_code = ($truthy($a = self.$body()) ? $a : self.$s("nil"));
          if ($truthy(self['$stmt?']())) {
          } else {
            body_code = self.$compiler().$returns(body_code)
          };
          return body_code;
        }, $ResBodyNode_rescue_body$24.$$arity = 0), nil) && 'rescue_body';
      })($nesting[0], $$($nesting, 'Base'), $nesting);
      (function($base, $super, $parent_nesting) {
        var self = $klass($base, $super, 'RetryNode');

        var $nesting = [self].concat($parent_nesting), $RetryNode_compile$25;

        
        self.$handle("retry");
        return (Opal.def(self, '$compile', $RetryNode_compile$25 = function $$compile() {
          var self = this;

          return self.$push(self.$stmt(self.$s("send", nil, "retry")))
        }, $RetryNode_compile$25.$$arity = 0), nil) && 'compile';
      })($nesting[0], $$($nesting, 'Base'), $nesting);
    })($nesting[0], $nesting)
  })($nesting[0], $nesting);
};

/* Generated by Opal 1.0.0 */
Opal.modules["opal/nodes/case"] = function(Opal) {
  function $rb_minus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs - rhs : lhs['$-'](rhs);
  }
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.$$$, $$ = Opal.$$, $module = Opal.module, $klass = Opal.klass, $send = Opal.send, $truthy = Opal.truthy, $range = Opal.range;

  Opal.add_stubs(['$require', '$handle', '$children', '$in_case', '$compiler', '$compile_code', '$needs_closure?', '$wrap', '$condition', '$[]=', '$case_stmt', '$-', '$add_local', '$push', '$expr', '$each_with_index', '$case_parts', '$line', '$type', '$===', '$returns', '$==', '$stmt', '$!', '$stmt?', '$[]', '$when_checks', '$js_truthy', '$s', '$process', '$body_code', '$last']);
  
  self.$require("opal/nodes/base");
  return (function($base, $parent_nesting) {
    var self = $module($base, 'Opal');

    var $nesting = [self].concat($parent_nesting);

    (function($base, $parent_nesting) {
      var self = $module($base, 'Nodes');

      var $nesting = [self].concat($parent_nesting);

      
      (function($base, $super, $parent_nesting) {
        var self = $klass($base, $super, 'CaseNode');

        var $nesting = [self].concat($parent_nesting), $CaseNode_compile$1, $CaseNode_compile_code$3, $CaseNode_needs_closure$ques$5, $CaseNode_case_parts$6, $CaseNode_case_stmt$7;

        
        self.$handle("case");
        self.$children("condition");
        
        Opal.def(self, '$compile', $CaseNode_compile$1 = function $$compile() {
          var $$2, self = this;

          return $send(self.$compiler(), 'in_case', [], ($$2 = function(){var self = $$2.$$s == null ? this : $$2.$$s;

          
            self.$compile_code();
            if ($truthy(self['$needs_closure?']())) {
              return self.$wrap("(function() {", "})()")
            } else {
              return nil
            };}, $$2.$$s = self, $$2.$$arity = 0, $$2))
        }, $CaseNode_compile$1.$$arity = 0);
        
        Opal.def(self, '$compile_code', $CaseNode_compile_code$3 = function $$compile_code() {
          var $$4, $a, self = this, handled_else = nil, $writer = nil;

          
          handled_else = false;
          if ($truthy(self.$condition())) {
            
            
            $writer = ["cond", true];
            $send(self.$case_stmt(), '[]=', Opal.to_a($writer));
            $writer[$rb_minus($writer["length"], 1)];;
            self.$add_local("$case");
            self.$push("$case = ", self.$expr(self.$condition()), ";");};
          $send(self.$case_parts(), 'each_with_index', [], ($$4 = function(wen, idx){var self = $$4.$$s == null ? this : $$4.$$s, $case = nil;

          
            
            if (wen == null) {
              wen = nil;
            };
            
            if (idx == null) {
              idx = nil;
            };
            if ($truthy(wen)) {
            } else {
              return nil;
            };
            self.$line();
            return (function() {$case = wen.$type();
            if ("when"['$===']($case)) {
            if ($truthy(self['$needs_closure?']())) {
              wen = self.$compiler().$returns(wen)};
            if (idx['$=='](0)) {
            } else {
              self.$push("else ")
            };
            return self.$push(self.$stmt(wen));}
            else {
            handled_else = true;
            if ($truthy(self['$needs_closure?']())) {
              wen = self.$compiler().$returns(wen)};
            return self.$push("else {", self.$stmt(wen), "}");}})();}, $$4.$$s = self, $$4.$$arity = 2, $$4));
          if ($truthy(($truthy($a = self['$needs_closure?']()) ? handled_else['$!']() : $a))) {
            
            self.$line();
            return self.$push("else { return nil }");
          } else {
            return nil
          };
        }, $CaseNode_compile_code$3.$$arity = 0);
        
        Opal.def(self, '$needs_closure?', $CaseNode_needs_closure$ques$5 = function() {
          var self = this;

          return self['$stmt?']()['$!']()
        }, $CaseNode_needs_closure$ques$5.$$arity = 0);
        
        Opal.def(self, '$case_parts', $CaseNode_case_parts$6 = function $$case_parts() {
          var self = this;

          return self.$children()['$[]']($range(1, -1, false))
        }, $CaseNode_case_parts$6.$$arity = 0);
        return (Opal.def(self, '$case_stmt', $CaseNode_case_stmt$7 = function $$case_stmt() {
          var self = this;

          return self.$compiler().$case_stmt()
        }, $CaseNode_case_stmt$7.$$arity = 0), nil) && 'case_stmt';
      })($nesting[0], $$($nesting, 'Base'), $nesting);
      (function($base, $super, $parent_nesting) {
        var self = $klass($base, $super, 'WhenNode');

        var $nesting = [self].concat($parent_nesting), $WhenNode_compile$8, $WhenNode_when_checks$10, $WhenNode_case_stmt$11, $WhenNode_body_code$12;

        self.$$prototype.level = nil;
        
        self.$handle("when");
        self.$children("whens", "body");
        
        Opal.def(self, '$compile', $WhenNode_compile$8 = function $$compile() {
          var $$9, self = this;

          
          self.$push("if (");
          $send(self.$when_checks(), 'each_with_index', [], ($$9 = function(check, idx){var self = $$9.$$s == null ? this : $$9.$$s, call = nil;

          
            
            if (check == null) {
              check = nil;
            };
            
            if (idx == null) {
              idx = nil;
            };
            if (idx['$=='](0)) {
            } else {
              self.$push(" || ")
            };
            if (check.$type()['$==']("splat")) {
              
              self.$push("(function($splt) { for (var i = 0, ii = $splt.length; i < ii; i++) {");
              if ($truthy(self.$case_stmt()['$[]']("cond"))) {
                self.$push("if ($splt[i]['$===']($case)) { return true; }")
              } else {
                self.$push("if (", self.$js_truthy(check), ")) { return true; }")
              };
              return self.$push("} return false; })(", self.$expr(check.$children()['$[]'](0)), ")");
            } else if ($truthy(self.$case_stmt()['$[]']("cond"))) {
              
              call = self.$s("send", check, "===", self.$s("arglist", self.$s("js_tmp", "$case")));
              return self.$push(self.$expr(call));
            } else {
              return self.$push(self.$js_truthy(check))
            };}, $$9.$$s = self, $$9.$$arity = 2, $$9));
          return self.$push(") {", self.$process(self.$body_code(), self.level), "}");
        }, $WhenNode_compile$8.$$arity = 0);
        
        Opal.def(self, '$when_checks', $WhenNode_when_checks$10 = function $$when_checks() {
          var self = this;

          return self.$children()['$[]']($range(0, -2, false))
        }, $WhenNode_when_checks$10.$$arity = 0);
        
        Opal.def(self, '$case_stmt', $WhenNode_case_stmt$11 = function $$case_stmt() {
          var self = this;

          return self.$compiler().$case_stmt()
        }, $WhenNode_case_stmt$11.$$arity = 0);
        return (Opal.def(self, '$body_code', $WhenNode_body_code$12 = function $$body_code() {
          var $a, self = this;

          return ($truthy($a = self.$children().$last()) ? $a : self.$s("nil"))
        }, $WhenNode_body_code$12.$$arity = 0), nil) && 'body_code';
      })($nesting[0], $$($nesting, 'Base'), $nesting);
    })($nesting[0], $nesting)
  })($nesting[0], $nesting);
};

/* Generated by Opal 1.0.0 */
Opal.modules["opal/nodes/super"] = function(Opal) {
  function $rb_minus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs - rhs : lhs['$-'](rhs);
  }
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.$$$, $$ = Opal.$$, $module = Opal.module, $klass = Opal.klass, $send2 = Opal.send2, $slice = Opal.slice, $truthy = Opal.truthy, $send = Opal.send;

  Opal.add_stubs(['$require', '$include?', '$type', '$s', '$helper', '$push', '$compile_receiver', '$compile_method_body', '$compile_method_name', '$compile_arguments', '$compile_block_pass', '$private', '$def?', '$scope', '$find_parent_def', '$==', '$raise_exception?', '$implicit_args?', '$to_s', '$mid', '$def_scope', '$identify!', '$method_id', '$def_scope_identity', '$defined_check_param', '$allow_stubs', '$super_chain', '$join', '$map', '$implicit_arguments_param', '$super_method_invocation', '$iter?', '$super_block_invocation', '$raise', '$handle', '$wrap', '$uses_block!', '$compile_using_send', '$iter', '$uses_zuper=', '$-', '$block_name', '$!', '$<<', '$empty?', '$children', '$arglist', '$expr', '$===']);
  
  self.$require("opal/nodes/base");
  return (function($base, $parent_nesting) {
    var self = $module($base, 'Opal');

    var $nesting = [self].concat($parent_nesting);

    (function($base, $parent_nesting) {
      var self = $module($base, 'Nodes');

      var $nesting = [self].concat($parent_nesting);

      
      (function($base, $super, $parent_nesting) {
        var self = $klass($base, $super, 'BaseSuperNode');

        var $nesting = [self].concat($parent_nesting), $BaseSuperNode_initialize$1, $BaseSuperNode_compile_using_send$2, $BaseSuperNode_def_scope$3, $BaseSuperNode_raise_exception$ques$4, $BaseSuperNode_defined_check_param$5, $BaseSuperNode_implicit_args$ques$6, $BaseSuperNode_implicit_arguments_param$7, $BaseSuperNode_method_id$8, $BaseSuperNode_def_scope_identity$9, $BaseSuperNode_allow_stubs$10, $BaseSuperNode_super_method_invocation$11, $BaseSuperNode_super_block_invocation$12, $BaseSuperNode_compile_method_body$14, $BaseSuperNode_compile_method_name$15;

        self.$$prototype.sexp = self.$$prototype.def_scope = nil;
        
        
        Opal.def(self, '$initialize', $BaseSuperNode_initialize$1 = function $$initialize($a) {
          var $post_args, $b, $c, $iter = $BaseSuperNode_initialize$1.$$p, $yield = $iter || nil, self = this, args = nil, rest = nil, last_child = nil, $zuper = nil, $zuper_i = nil, $zuper_ii = nil;

          if ($iter) $BaseSuperNode_initialize$1.$$p = null;
          // Prepare super implicit arguments
          for($zuper_i = 0, $zuper_ii = arguments.length, $zuper = new Array($zuper_ii); $zuper_i < $zuper_ii; $zuper_i++) {
            $zuper[$zuper_i] = arguments[$zuper_i];
          }
          
          
          $post_args = Opal.slice.call(arguments, 0, arguments.length);
          ;
          $send2(self, Opal.find_super_dispatcher(self, 'initialize', $BaseSuperNode_initialize$1, false, true), 'initialize', $zuper, $iter);
          args = [].concat(Opal.to_a(self.sexp));
          $b = [].concat(Opal.to_a(args)), $c = $b.length - 1, $c = ($c < 0) ? 0 : $c, (rest = $slice.call($b, 0, $c)), (last_child = ($b[$c] == null ? nil : $b[$c])), $b;
          if ($truthy(($truthy($b = last_child) ? ["iter", "block_pass"]['$include?'](last_child.$type()) : $b))) {
            
            self.iter = last_child;
            args = rest;
          } else {
            self.iter = self.$s("js_tmp", "null")
          };
          self.arglist = $send(self, 's', ["arglist"].concat(Opal.to_a(args)));
          return (self.recvr = self.$s("self"));
        }, $BaseSuperNode_initialize$1.$$arity = -1);
        
        Opal.def(self, '$compile_using_send', $BaseSuperNode_compile_using_send$2 = function $$compile_using_send() {
          var self = this;

          
          self.$helper("send2");
          self.$push("$send2(");
          self.$compile_receiver();
          self.$compile_method_body();
          self.$compile_method_name();
          self.$compile_arguments();
          self.$compile_block_pass();
          return self.$push(")");
        }, $BaseSuperNode_compile_using_send$2.$$arity = 0);
        self.$private();
        
        Opal.def(self, '$def_scope', $BaseSuperNode_def_scope$3 = function $$def_scope() {
          var $a, self = this;

          return (self.def_scope = ($truthy($a = self.def_scope) ? $a : (function() {if ($truthy(self.$scope()['$def?']())) {
            return self.$scope()
          } else {
            return self.$scope().$find_parent_def()
          }; return nil; })()))
        }, $BaseSuperNode_def_scope$3.$$arity = 0);
        
        Opal.def(self, '$raise_exception?', $BaseSuperNode_raise_exception$ques$4 = function() {
          var self = this;

          return self.sexp.$type()['$==']("defined_super")
        }, $BaseSuperNode_raise_exception$ques$4.$$arity = 0);
        
        Opal.def(self, '$defined_check_param', $BaseSuperNode_defined_check_param$5 = function $$defined_check_param() {
          var self = this;

          if ($truthy(self['$raise_exception?']())) {
            return "true"
          } else {
            return "false"
          }
        }, $BaseSuperNode_defined_check_param$5.$$arity = 0);
        
        Opal.def(self, '$implicit_args?', $BaseSuperNode_implicit_args$ques$6 = function() {
          var self = this;

          return self.sexp.$type()['$==']("zsuper")
        }, $BaseSuperNode_implicit_args$ques$6.$$arity = 0);
        
        Opal.def(self, '$implicit_arguments_param', $BaseSuperNode_implicit_arguments_param$7 = function $$implicit_arguments_param() {
          var self = this;

          if ($truthy(self['$implicit_args?']())) {
            return "true"
          } else {
            return "false"
          }
        }, $BaseSuperNode_implicit_arguments_param$7.$$arity = 0);
        
        Opal.def(self, '$method_id', $BaseSuperNode_method_id$8 = function $$method_id() {
          var self = this;

          return self.$def_scope().$mid().$to_s()
        }, $BaseSuperNode_method_id$8.$$arity = 0);
        
        Opal.def(self, '$def_scope_identity', $BaseSuperNode_def_scope_identity$9 = function $$def_scope_identity() {
          var self = this;

          return self.$def_scope()['$identify!'](self.$def_scope().$mid())
        }, $BaseSuperNode_def_scope_identity$9.$$arity = 0);
        
        Opal.def(self, '$allow_stubs', $BaseSuperNode_allow_stubs$10 = function $$allow_stubs() {
          var self = this;

          return true
        }, $BaseSuperNode_allow_stubs$10.$$arity = 0);
        
        Opal.def(self, '$super_method_invocation', $BaseSuperNode_super_method_invocation$11 = function $$super_method_invocation() {
          var self = this;

          return "" + "Opal.find_super_dispatcher(self, '" + (self.$method_id()) + "', " + (self.$def_scope_identity()) + ", " + (self.$defined_check_param()) + ", " + (self.$allow_stubs()) + ")"
        }, $BaseSuperNode_super_method_invocation$11.$$arity = 0);
        
        Opal.def(self, '$super_block_invocation', $BaseSuperNode_super_block_invocation$12 = function $$super_block_invocation() {
          var $a, $b, $$13, self = this, chain = nil, cur_defn = nil, mid = nil, trys = nil;

          
          $b = self.$scope().$super_chain(), $a = Opal.to_ary($b), (chain = ($a[0] == null ? nil : $a[0])), (cur_defn = ($a[1] == null ? nil : $a[1])), (mid = ($a[2] == null ? nil : $a[2])), $b;
          trys = $send(chain, 'map', [], ($$13 = function(c){var self = $$13.$$s == null ? this : $$13.$$s;

          
            
            if (c == null) {
              c = nil;
            };
            return "" + (c) + ".$$def";}, $$13.$$s = self, $$13.$$arity = 1, $$13)).$join(" || ");
          return "" + "Opal.find_iter_super_dispatcher(self, " + (mid) + ", (" + (trys) + " || " + (cur_defn) + "), " + (self.$defined_check_param()) + ", " + (self.$implicit_arguments_param()) + ")";
        }, $BaseSuperNode_super_block_invocation$12.$$arity = 0);
        
        Opal.def(self, '$compile_method_body', $BaseSuperNode_compile_method_body$14 = function $$compile_method_body() {
          var self = this;

          
          self.$push(", ");
          if ($truthy(self.$scope()['$def?']())) {
            return self.$push(self.$super_method_invocation())
          } else if ($truthy(self.$scope()['$iter?']())) {
            return self.$push(self.$super_block_invocation())
          } else {
            return self.$raise("super must be called from method body or block")
          };
        }, $BaseSuperNode_compile_method_body$14.$$arity = 0);
        return (Opal.def(self, '$compile_method_name', $BaseSuperNode_compile_method_name$15 = function $$compile_method_name() {
          var $a, $b, self = this, _chain = nil, _cur_defn = nil, mid = nil;

          if ($truthy(self.$scope()['$def?']())) {
            return self.$push("" + ", '" + (self.$method_id()) + "'")
          } else if ($truthy(self.$scope()['$iter?']())) {
            
            $b = self.$scope().$super_chain(), $a = Opal.to_ary($b), (_chain = ($a[0] == null ? nil : $a[0])), (_cur_defn = ($a[1] == null ? nil : $a[1])), (mid = ($a[2] == null ? nil : $a[2])), $b;
            return self.$push("" + ", " + (mid));
          } else {
            return nil
          }
        }, $BaseSuperNode_compile_method_name$15.$$arity = 0), nil) && 'compile_method_name';
      })($nesting[0], $$($nesting, 'CallNode'), $nesting);
      (function($base, $super, $parent_nesting) {
        var self = $klass($base, $super, 'DefinedSuperNode');

        var $nesting = [self].concat($parent_nesting), $DefinedSuperNode_allow_stubs$16, $DefinedSuperNode_compile$17;

        
        self.$handle("defined_super");
        
        Opal.def(self, '$allow_stubs', $DefinedSuperNode_allow_stubs$16 = function $$allow_stubs() {
          var self = this;

          return false
        }, $DefinedSuperNode_allow_stubs$16.$$arity = 0);
        return (Opal.def(self, '$compile', $DefinedSuperNode_compile$17 = function $$compile() {
          var self = this;

          
          self.$compile_receiver();
          self.$compile_method_body();
          return self.$wrap("((", ") != null ? \"super\" : nil)");
        }, $DefinedSuperNode_compile$17.$$arity = 0), nil) && 'compile';
      })($nesting[0], $$($nesting, 'BaseSuperNode'), $nesting);
      (function($base, $super, $parent_nesting) {
        var self = $klass($base, $super, 'SuperNode');

        var $nesting = [self].concat($parent_nesting), $SuperNode_initialize$18, $SuperNode_compile$19;

        
        self.$handle("super");
        
        Opal.def(self, '$initialize', $SuperNode_initialize$18 = function $$initialize($a) {
          var $post_args, $iter = $SuperNode_initialize$18.$$p, $yield = $iter || nil, self = this, $zuper = nil, $zuper_i = nil, $zuper_ii = nil;

          if ($iter) $SuperNode_initialize$18.$$p = null;
          // Prepare super implicit arguments
          for($zuper_i = 0, $zuper_ii = arguments.length, $zuper = new Array($zuper_ii); $zuper_i < $zuper_ii; $zuper_i++) {
            $zuper[$zuper_i] = arguments[$zuper_i];
          }
          
          
          $post_args = Opal.slice.call(arguments, 0, arguments.length);
          ;
          $send2(self, Opal.find_super_dispatcher(self, 'initialize', $SuperNode_initialize$18, false, true), 'initialize', $zuper, $iter);
          if ($truthy(self.$scope()['$def?']())) {
            return self.$scope()['$uses_block!']()
          } else {
            return nil
          };
        }, $SuperNode_initialize$18.$$arity = -1);
        return (Opal.def(self, '$compile', $SuperNode_compile$19 = function $$compile() {
          var self = this;

          return self.$compile_using_send()
        }, $SuperNode_compile$19.$$arity = 0), nil) && 'compile';
      })($nesting[0], $$($nesting, 'BaseSuperNode'), $nesting);
      (function($base, $super, $parent_nesting) {
        var self = $klass($base, $super, 'ZsuperNode');

        var $nesting = [self].concat($parent_nesting), $ZsuperNode_initialize$20, $ZsuperNode_compile$21, $ZsuperNode_compile_arguments$22, $ZsuperNode_block_name$23;

        
        self.$handle("zsuper");
        
        Opal.def(self, '$initialize', $ZsuperNode_initialize$20 = function $$initialize($a) {
          var $post_args, $iter = $ZsuperNode_initialize$20.$$p, $yield = $iter || nil, self = this, $zuper = nil, $zuper_i = nil, $zuper_ii = nil;

          if ($iter) $ZsuperNode_initialize$20.$$p = null;
          // Prepare super implicit arguments
          for($zuper_i = 0, $zuper_ii = arguments.length, $zuper = new Array($zuper_ii); $zuper_i < $zuper_ii; $zuper_i++) {
            $zuper[$zuper_i] = arguments[$zuper_i];
          }
          
          
          $post_args = Opal.slice.call(arguments, 0, arguments.length);
          ;
          $send2(self, Opal.find_super_dispatcher(self, 'initialize', $ZsuperNode_initialize$20, false, true), 'initialize', $zuper, $iter);
          if (self.$iter().$type()['$==']("iter")) {
            return nil
          } else {
            
            self.$scope()['$uses_block!']();
            return (self.iter = self.$s("js_tmp", "$iter"));
          };
        }, $ZsuperNode_initialize$20.$$arity = -1);
        
        Opal.def(self, '$compile', $ZsuperNode_compile$21 = function $$compile() {
          var $a, self = this, $writer = nil, implicit_args = nil, block_pass = nil;

          
          if ($truthy(self.$def_scope())) {
            
            
            $writer = [true];
            $send(self.$def_scope(), 'uses_zuper=', Opal.to_a($writer));
            $writer[$rb_minus($writer["length"], 1)];;
            implicit_args = [self.$s("js_tmp", "$zuper")];
            if ($truthy(($truthy($a = self.$block_name()) ? self.$iter()['$!']() : $a))) {
              
              block_pass = self.$s("block_pass", self.$s("lvar", self.$block_name()));
              implicit_args['$<<'](block_pass);};
            self.arglist = $send(self, 's', ["arglist"].concat(Opal.to_a(implicit_args)));};
          return self.$compile_using_send();
        }, $ZsuperNode_compile$21.$$arity = 0);
        
        Opal.def(self, '$compile_arguments', $ZsuperNode_compile_arguments$22 = function $$compile_arguments() {
          var self = this;

          
          self.$push(", ");
          if ($truthy(self.$arglist().$children()['$empty?']())) {
            return self.$push("[]")
          } else {
            return self.$push(self.$expr(self.$arglist()))
          };
        }, $ZsuperNode_compile_arguments$22.$$arity = 0);
        return (Opal.def(self, '$block_name', $ZsuperNode_block_name$23 = function $$block_name() {
          var self = this, $case = nil;

          return (function() {$case = self.$def_scope();
          if ($$$($$$($$($nesting, 'Opal'), 'Nodes'), 'IterNode')['$===']($case)) {return self.$def_scope().$block_name()}
          else if ($$$($$$($$($nesting, 'Opal'), 'Nodes'), 'DefNode')['$===']($case)) {return self.$def_scope().$block_name()}
          else {return self.$raise("" + "Don't know what to do with super in the scope " + (self.$def_scope()))}})()
        }, $ZsuperNode_block_name$23.$$arity = 0), nil) && 'block_name';
      })($nesting[0], $$($nesting, 'SuperNode'), $nesting);
    })($nesting[0], $nesting)
  })($nesting[0], $nesting);
};

/* Generated by Opal 1.0.0 */
Opal.modules["opal/version"] = function(Opal) {
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.$$$, $$ = Opal.$$, $module = Opal.module;

  return (function($base, $parent_nesting) {
    var self = $module($base, 'Opal');

    var $nesting = [self].concat($parent_nesting);

    Opal.const_set($nesting[0], 'VERSION', "1.0.0")
  })($nesting[0], $nesting)
};

/* Generated by Opal 1.0.0 */
Opal.modules["opal/nodes/top"] = function(Opal) {
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.$$$, $$ = Opal.$$, $module = Opal.module, $klass = Opal.klass, $send = Opal.send, $truthy = Opal.truthy;

  Opal.add_stubs(['$require', '$handle', '$children', '$push', '$version_comment', '$opening', '$in_scope', '$use_strict?', '$compiler', '$line', '$stmt', '$stmts', '$is_a?', '$eval?', '$add_temp', '$add_used_helpers', '$add_used_operators', '$to_vars', '$scope', '$compile_method_stubs', '$compile_irb_vars', '$compile_end_construct', '$closing', '$requirable?', '$inspect', '$module_name', '$file', '$returns', '$body', '$irb?', '$each', '$to_a', '$helpers', '$operator_helpers', '$[]', '$method_missing?', '$method_calls', '$join', '$map', '$empty?', '$eof_content']);
  
  self.$require("pathname");
  self.$require("opal/version");
  self.$require("opal/nodes/scope");
  return (function($base, $parent_nesting) {
    var self = $module($base, 'Opal');

    var $nesting = [self].concat($parent_nesting);

    (function($base, $parent_nesting) {
      var self = $module($base, 'Nodes');

      var $nesting = [self].concat($parent_nesting);

      (function($base, $super, $parent_nesting) {
        var self = $klass($base, $super, 'TopNode');

        var $nesting = [self].concat($parent_nesting), $TopNode_compile$1, $TopNode_opening$3, $TopNode_closing$4, $TopNode_stmts$5, $TopNode_compile_irb_vars$6, $TopNode_add_used_helpers$7, $TopNode_add_used_operators$9, $TopNode_compile_method_stubs$11, $TopNode_compile_end_construct$13, $TopNode_version_comment$14;

        
        self.$handle("top");
        self.$children("body");
        
        Opal.def(self, '$compile', $TopNode_compile$1 = function $$compile() {
          var $$2, self = this;

          
          self.$push(self.$version_comment());
          self.$opening();
          $send(self, 'in_scope', [], ($$2 = function(){var self = $$2.$$s == null ? this : $$2.$$s, body_code = nil;

          
            if ($truthy(self.$compiler()['$use_strict?']())) {
              self.$line("\"use strict\";")};
            body_code = self.$stmt(self.$stmts());
            if ($truthy(body_code['$is_a?']($$($nesting, 'Array')))) {
            } else {
              body_code = [body_code]
            };
            if ($truthy(self.$compiler()['$eval?']())) {
              self.$add_temp("$nesting = self.$$is_a_module ? [self] : [self.$$class]")
            } else {
              
              self.$add_temp("self = Opal.top");
              self.$add_temp("$nesting = []");
            };
            self.$add_temp("nil = Opal.nil");
            self.$add_temp("$$$ = Opal.$$$");
            self.$add_temp("$$ = Opal.$$");
            self.$add_used_helpers();
            self.$add_used_operators();
            self.$line(self.$scope().$to_vars());
            self.$compile_method_stubs();
            self.$compile_irb_vars();
            self.$compile_end_construct();
            return self.$line(body_code);}, $$2.$$s = self, $$2.$$arity = 0, $$2));
          return self.$closing();
        }, $TopNode_compile$1.$$arity = 0);
        
        Opal.def(self, '$opening', $TopNode_opening$3 = function $$opening() {
          var self = this;

          if ($truthy(self.$compiler()['$requirable?']())) {
            return self.$line("" + "Opal.modules[" + ($$$($$($nesting, 'Opal'), 'Compiler').$module_name(self.$compiler().$file()).$inspect()) + "] = function(Opal) {")
          } else if ($truthy(self.$compiler()['$eval?']())) {
            return self.$line("(function(Opal, self) {")
          } else {
            return self.$line("(function(Opal) {")
          }
        }, $TopNode_opening$3.$$arity = 0);
        
        Opal.def(self, '$closing', $TopNode_closing$4 = function $$closing() {
          var self = this;

          if ($truthy(self.$compiler()['$requirable?']())) {
            return self.$line("};\n")
          } else if ($truthy(self.$compiler()['$eval?']())) {
            return self.$line("})(Opal, self)")
          } else {
            return self.$line("})(Opal);\n")
          }
        }, $TopNode_closing$4.$$arity = 0);
        
        Opal.def(self, '$stmts', $TopNode_stmts$5 = function $$stmts() {
          var self = this;

          return self.$compiler().$returns(self.$body())
        }, $TopNode_stmts$5.$$arity = 0);
        
        Opal.def(self, '$compile_irb_vars', $TopNode_compile_irb_vars$6 = function $$compile_irb_vars() {
          var self = this;

          if ($truthy(self.$compiler()['$irb?']())) {
            return self.$line("if (!Opal.irb_vars) { Opal.irb_vars = {}; }")
          } else {
            return nil
          }
        }, $TopNode_compile_irb_vars$6.$$arity = 0);
        
        Opal.def(self, '$add_used_helpers', $TopNode_add_used_helpers$7 = function $$add_used_helpers() {
          var $$8, self = this;

          return $send(self.$compiler().$helpers().$to_a(), 'each', [], ($$8 = function(h){var self = $$8.$$s == null ? this : $$8.$$s;

          
            
            if (h == null) {
              h = nil;
            };
            return self.$add_temp("" + "$" + (h) + " = Opal." + (h));}, $$8.$$s = self, $$8.$$arity = 1, $$8))
        }, $TopNode_add_used_helpers$7.$$arity = 0);
        
        Opal.def(self, '$add_used_operators', $TopNode_add_used_operators$9 = function $$add_used_operators() {
          var $$10, self = this, operators = nil;

          
          operators = self.$compiler().$operator_helpers().$to_a();
          return $send(operators, 'each', [], ($$10 = function(op){var self = $$10.$$s == null ? this : $$10.$$s, name = nil;

          
            
            if (op == null) {
              op = nil;
            };
            name = $$$($$$($$($nesting, 'Nodes'), 'CallNode'), 'OPERATORS')['$[]'](op);
            self.$line("" + "function $rb_" + (name) + "(lhs, rhs) {");
            self.$line("" + "  return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs " + (op) + " rhs : lhs['$" + (op) + "'](rhs);");
            return self.$line("}");}, $$10.$$s = self, $$10.$$arity = 1, $$10));
        }, $TopNode_add_used_operators$9.$$arity = 0);
        
        Opal.def(self, '$compile_method_stubs', $TopNode_compile_method_stubs$11 = function $$compile_method_stubs() {
          var $$12, self = this, calls = nil, stubs = nil;

          if ($truthy(self.$compiler()['$method_missing?']())) {
            
            calls = self.$compiler().$method_calls();
            stubs = $send(calls.$to_a(), 'map', [], ($$12 = function(k){var self = $$12.$$s == null ? this : $$12.$$s;

            
              
              if (k == null) {
                k = nil;
              };
              return "" + "'$" + (k) + "'";}, $$12.$$s = self, $$12.$$arity = 1, $$12)).$join(", ");
            if ($truthy(stubs['$empty?']())) {
              return nil
            } else {
              return self.$line("" + "Opal.add_stubs([" + (stubs) + "]);")
            };
          } else {
            return nil
          }
        }, $TopNode_compile_method_stubs$11.$$arity = 0);
        
        Opal.def(self, '$compile_end_construct', $TopNode_compile_end_construct$13 = function $$compile_end_construct() {
          var self = this, content = nil;

          if ($truthy((content = self.$compiler().$eof_content()))) {
            
            self.$line("var $__END__ = Opal.Object.$new();");
            return self.$line("" + "$__END__.$read = function() { return " + (content.$inspect()) + "; };");
          } else {
            return nil
          }
        }, $TopNode_compile_end_construct$13.$$arity = 0);
        return (Opal.def(self, '$version_comment', $TopNode_version_comment$14 = function $$version_comment() {
          var self = this;

          return "" + "/* Generated by Opal " + ($$$($$($nesting, 'Opal'), 'VERSION')) + " */"
        }, $TopNode_version_comment$14.$$arity = 0), nil) && 'version_comment';
      })($nesting[0], $$($nesting, 'ScopeNode'), $nesting)
    })($nesting[0], $nesting)
  })($nesting[0], $nesting);
};

/* Generated by Opal 1.0.0 */
Opal.modules["opal/nodes/while"] = function(Opal) {
  function $rb_minus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs - rhs : lhs['$-'](rhs);
  }
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.$$$, $$ = Opal.$$, $module = Opal.module, $klass = Opal.klass, $send = Opal.send, $truthy = Opal.truthy;

  Opal.add_stubs(['$require', '$handle', '$children', '$with_temp', '$js_truthy', '$test', '$in_while', '$compiler', '$wrap_in_closure?', '$[]=', '$while_loop', '$-', '$stmt', '$body', '$uses_redo?', '$push', '$while_open', '$while_close', '$line', '$wrap', '$[]', '$expr?', '$recv?']);
  
  self.$require("opal/nodes/base");
  return (function($base, $parent_nesting) {
    var self = $module($base, 'Opal');

    var $nesting = [self].concat($parent_nesting);

    (function($base, $parent_nesting) {
      var self = $module($base, 'Nodes');

      var $nesting = [self].concat($parent_nesting);

      
      (function($base, $super, $parent_nesting) {
        var self = $klass($base, $super, 'WhileNode');

        var $nesting = [self].concat($parent_nesting), $WhileNode_compile$1, $WhileNode_while_open$4, $WhileNode_while_close$5, $WhileNode_uses_redo$ques$6, $WhileNode_wrap_in_closure$ques$7;

        
        self.$handle("while");
        self.$children("test", "body");
        
        Opal.def(self, '$compile', $WhileNode_compile$1 = function $$compile() {
          var $$2, self = this;

          
          $send(self, 'with_temp', [], ($$2 = function(redo_var){var self = $$2.$$s == null ? this : $$2.$$s, $$3, test_code = nil;

          
            
            if (redo_var == null) {
              redo_var = nil;
            };
            test_code = self.$js_truthy(self.$test());
            $send(self.$compiler(), 'in_while', [], ($$3 = function(){var self = $$3.$$s == null ? this : $$3.$$s, $writer = nil, body_code = nil;

            
              if ($truthy(self['$wrap_in_closure?']())) {
                
                $writer = ["closure", true];
                $send(self.$while_loop(), '[]=', Opal.to_a($writer));
                $writer[$rb_minus($writer["length"], 1)];};
              
              $writer = ["redo_var", redo_var];
              $send(self.$while_loop(), '[]=', Opal.to_a($writer));
              $writer[$rb_minus($writer["length"], 1)];;
              body_code = self.$stmt(self.$body());
              if ($truthy(self['$uses_redo?']())) {
                
                self.$push("" + (redo_var) + " = false; " + (self.$while_open()) + (redo_var) + " || ");
                self.$push(test_code);
                self.$push(self.$while_close());
              } else {
                self.$push(self.$while_open(), test_code, self.$while_close())
              };
              if ($truthy(self['$uses_redo?']())) {
                self.$push("" + (redo_var) + " = false;")};
              return self.$line(body_code);}, $$3.$$s = self, $$3.$$arity = 0, $$3));
            return self.$line("}");}, $$2.$$s = self, $$2.$$arity = 1, $$2));
          if ($truthy(self['$wrap_in_closure?']())) {
            return self.$wrap("(function() {", "; return nil; })()")
          } else {
            return nil
          };
        }, $WhileNode_compile$1.$$arity = 0);
        
        Opal.def(self, '$while_open', $WhileNode_while_open$4 = function $$while_open() {
          var self = this;

          return "while ("
        }, $WhileNode_while_open$4.$$arity = 0);
        
        Opal.def(self, '$while_close', $WhileNode_while_close$5 = function $$while_close() {
          var self = this;

          return ") {"
        }, $WhileNode_while_close$5.$$arity = 0);
        
        Opal.def(self, '$uses_redo?', $WhileNode_uses_redo$ques$6 = function() {
          var self = this;

          return self.$while_loop()['$[]']("use_redo")
        }, $WhileNode_uses_redo$ques$6.$$arity = 0);
        return (Opal.def(self, '$wrap_in_closure?', $WhileNode_wrap_in_closure$ques$7 = function() {
          var $a, self = this;

          return ($truthy($a = self['$expr?']()) ? $a : self['$recv?']())
        }, $WhileNode_wrap_in_closure$ques$7.$$arity = 0), nil) && 'wrap_in_closure?';
      })($nesting[0], $$($nesting, 'Base'), $nesting);
      (function($base, $super, $parent_nesting) {
        var self = $klass($base, $super, 'WhilePostNode');

        var $nesting = [self].concat($parent_nesting);

        return self.$handle("while_post")
      })($nesting[0], $$($nesting, 'WhileNode'), $nesting);
      (function($base, $super, $parent_nesting) {
        var self = $klass($base, $super, 'UntilNode');

        var $nesting = [self].concat($parent_nesting), $UntilNode_while_open$8, $UntilNode_while_close$9;

        
        self.$handle("until");
        
        Opal.def(self, '$while_open', $UntilNode_while_open$8 = function $$while_open() {
          var self = this;

          return "while (!("
        }, $UntilNode_while_open$8.$$arity = 0);
        return (Opal.def(self, '$while_close', $UntilNode_while_close$9 = function $$while_close() {
          var self = this;

          return ")) {"
        }, $UntilNode_while_close$9.$$arity = 0), nil) && 'while_close';
      })($nesting[0], $$($nesting, 'WhileNode'), $nesting);
      (function($base, $super, $parent_nesting) {
        var self = $klass($base, $super, 'UntilPostNode');

        var $nesting = [self].concat($parent_nesting);

        return self.$handle("until_post")
      })($nesting[0], $$($nesting, 'UntilNode'), $nesting);
    })($nesting[0], $nesting)
  })($nesting[0], $nesting);
};

/* Generated by Opal 1.0.0 */
Opal.modules["opal/nodes/hash"] = function(Opal) {
  function $rb_minus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs - rhs : lhs['$-'](rhs);
  }
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.$$$, $$ = Opal.$$, $module = Opal.module, $klass = Opal.klass, $send2 = Opal.send2, $send = Opal.send, $truthy = Opal.truthy, $hash2 = Opal.hash2;

  Opal.add_stubs(['$require', '$handle', '$attr_accessor', '$each', '$children', '$type', '$===', '$<<', '$[]', '$all?', '$keys', '$include?', '$has_kwsplat', '$compile_merge', '$simple_keys?', '$compile_hash2', '$compile_hash', '$helper', '$==', '$empty?', '$expr', '$s', '$each_with_index', '$push', '$wrap', '$times', '$size', '$inspect', '$to_s', '$values', '$[]=', '$-', '$join', '$value']);
  
  self.$require("opal/nodes/base");
  return (function($base, $parent_nesting) {
    var self = $module($base, 'Opal');

    var $nesting = [self].concat($parent_nesting);

    (function($base, $parent_nesting) {
      var self = $module($base, 'Nodes');

      var $nesting = [self].concat($parent_nesting);

      
      (function($base, $super, $parent_nesting) {
        var self = $klass($base, $super, 'HashNode');

        var $nesting = [self].concat($parent_nesting), $HashNode_initialize$1, $HashNode_simple_keys$ques$3, $HashNode_compile$5, $HashNode_compile_merge$6, $HashNode_compile_hash$9, $HashNode_compile_hash2$11;

        
        self.$handle("hash");
        self.$attr_accessor("has_kwsplat", "keys", "values");
        
        Opal.def(self, '$initialize', $HashNode_initialize$1 = function $$initialize($a) {
          var $post_args, $$2, $iter = $HashNode_initialize$1.$$p, $yield = $iter || nil, self = this, $zuper = nil, $zuper_i = nil, $zuper_ii = nil;

          if ($iter) $HashNode_initialize$1.$$p = null;
          // Prepare super implicit arguments
          for($zuper_i = 0, $zuper_ii = arguments.length, $zuper = new Array($zuper_ii); $zuper_i < $zuper_ii; $zuper_i++) {
            $zuper[$zuper_i] = arguments[$zuper_i];
          }
          
          
          $post_args = Opal.slice.call(arguments, 0, arguments.length);
          ;
          $send2(self, Opal.find_super_dispatcher(self, 'initialize', $HashNode_initialize$1, false, true), 'initialize', $zuper, $iter);
          self.has_kwsplat = false;
          self.keys = [];
          self.values = [];
          return $send(self.$children(), 'each', [], ($$2 = function(child){var self = $$2.$$s == null ? this : $$2.$$s, $case = nil;
            if (self.keys == null) self.keys = nil;
            if (self.values == null) self.values = nil;

          
            
            if (child == null) {
              child = nil;
            };
            return (function() {$case = child.$type();
            if ("kwsplat"['$===']($case)) {return (self.has_kwsplat = true)}
            else if ("pair"['$===']($case)) {
            self.keys['$<<'](child.$children()['$[]'](0));
            return self.values['$<<'](child.$children()['$[]'](1));}
            else { return nil }})();}, $$2.$$s = self, $$2.$$arity = 1, $$2));
        }, $HashNode_initialize$1.$$arity = -1);
        
        Opal.def(self, '$simple_keys?', $HashNode_simple_keys$ques$3 = function() {
          var $$4, self = this;

          return $send(self.$keys(), 'all?', [], ($$4 = function(key){var self = $$4.$$s == null ? this : $$4.$$s;

          
            
            if (key == null) {
              key = nil;
            };
            return ["sym", "str"]['$include?'](key.$type());}, $$4.$$s = self, $$4.$$arity = 1, $$4))
        }, $HashNode_simple_keys$ques$3.$$arity = 0);
        
        Opal.def(self, '$compile', $HashNode_compile$5 = function $$compile() {
          var self = this;

          if ($truthy(self.$has_kwsplat())) {
            return self.$compile_merge()
          } else if ($truthy(self['$simple_keys?']())) {
            return self.$compile_hash2()
          } else {
            return self.$compile_hash()
          }
        }, $HashNode_compile$5.$$arity = 0);
        
        Opal.def(self, '$compile_merge', $HashNode_compile_merge$6 = function $$compile_merge() {
          var $a, $$7, $$8, self = this, result = nil, seq = nil;

          
          self.$helper("hash");
          $a = [[], []], (result = $a[0]), (seq = $a[1]), $a;
          $send(self.$children(), 'each', [], ($$7 = function(child){var self = $$7.$$s == null ? this : $$7.$$s;

          
            
            if (child == null) {
              child = nil;
            };
            if (child.$type()['$==']("kwsplat")) {
              
              if ($truthy(seq['$empty?']())) {
              } else {
                result['$<<'](self.$expr($send(self, 's', ["hash"].concat(Opal.to_a(seq)))))
              };
              result['$<<'](self.$expr(child));
              return (seq = []);
            } else {
              return seq['$<<'](child)
            };}, $$7.$$s = self, $$7.$$arity = 1, $$7));
          if ($truthy(seq['$empty?']())) {
          } else {
            result['$<<'](self.$expr($send(self, 's', ["hash"].concat(Opal.to_a(seq)))))
          };
          return $send(result, 'each_with_index', [], ($$8 = function(fragment, idx){var self = $$8.$$s == null ? this : $$8.$$s;

          
            
            if (fragment == null) {
              fragment = nil;
            };
            
            if (idx == null) {
              idx = nil;
            };
            if (idx['$=='](0)) {
              return self.$push(fragment)
            } else {
              return self.$push(".$merge(", fragment, ")")
            };}, $$8.$$s = self, $$8.$$arity = 2, $$8));
        }, $HashNode_compile_merge$6.$$arity = 0);
        
        Opal.def(self, '$compile_hash', $HashNode_compile_hash$9 = function $$compile_hash() {
          var $$10, self = this;

          
          self.$helper("hash");
          $send(self.$children(), 'each_with_index', [], ($$10 = function(pair, idx){var self = $$10.$$s == null ? this : $$10.$$s, $a, $b, key = nil, value = nil;

          
            
            if (pair == null) {
              pair = nil;
            };
            
            if (idx == null) {
              idx = nil;
            };
            $b = pair.$children(), $a = Opal.to_ary($b), (key = ($a[0] == null ? nil : $a[0])), (value = ($a[1] == null ? nil : $a[1])), $b;
            if (idx['$=='](0)) {
            } else {
              self.$push(", ")
            };
            return self.$push(self.$expr(key), ", ", self.$expr(value));}, $$10.$$s = self, $$10.$$arity = 2, $$10));
          return self.$wrap("$hash(", ")");
        }, $HashNode_compile_hash$9.$$arity = 0);
        return (Opal.def(self, '$compile_hash2', $HashNode_compile_hash2$11 = function $$compile_hash2() {
          var $a, $$12, $$13, self = this, hash_obj = nil, hash_keys = nil;

          
          $a = [$hash2([], {}), []], (hash_obj = $a[0]), (hash_keys = $a[1]), $a;
          self.$helper("hash2");
          $send(self.$keys().$size(), 'times', [], ($$12 = function(idx){var self = $$12.$$s == null ? this : $$12.$$s, key = nil, $writer = nil;

          
            
            if (idx == null) {
              idx = nil;
            };
            key = self.$keys()['$[]'](idx).$children()['$[]'](0).$to_s().$inspect();
            if ($truthy(hash_obj['$include?'](key))) {
            } else {
              hash_keys['$<<'](key)
            };
            
            $writer = [key, self.$expr(self.$values()['$[]'](idx))];
            $send(hash_obj, '[]=', Opal.to_a($writer));
            return $writer[$rb_minus($writer["length"], 1)];;}, $$12.$$s = self, $$12.$$arity = 1, $$12));
          $send(hash_keys, 'each_with_index', [], ($$13 = function(key, idx){var self = $$13.$$s == null ? this : $$13.$$s;

          
            
            if (key == null) {
              key = nil;
            };
            
            if (idx == null) {
              idx = nil;
            };
            if (idx['$=='](0)) {
            } else {
              self.$push(", ")
            };
            self.$push("" + (key) + ": ");
            return self.$push(hash_obj['$[]'](key));}, $$13.$$s = self, $$13.$$arity = 2, $$13));
          return self.$wrap("" + "$hash2([" + (hash_keys.$join(", ")) + "], {", "})");
        }, $HashNode_compile_hash2$11.$$arity = 0), nil) && 'compile_hash2';
      })($nesting[0], $$($nesting, 'Base'), $nesting);
      (function($base, $super, $parent_nesting) {
        var self = $klass($base, $super, 'KwSplatNode');

        var $nesting = [self].concat($parent_nesting), $KwSplatNode_compile$14;

        
        self.$handle("kwsplat");
        self.$children("value");
        return (Opal.def(self, '$compile', $KwSplatNode_compile$14 = function $$compile() {
          var self = this;

          return self.$push("Opal.to_hash(", self.$expr(self.$value()), ")")
        }, $KwSplatNode_compile$14.$$arity = 0), nil) && 'compile';
      })($nesting[0], $$($nesting, 'Base'), $nesting);
    })($nesting[0], $nesting)
  })($nesting[0], $nesting);
};

/* Generated by Opal 1.0.0 */
Opal.modules["opal/nodes/array"] = function(Opal) {
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.$$$, $$ = Opal.$$, $module = Opal.module, $klass = Opal.klass, $truthy = Opal.truthy, $send = Opal.send;

  Opal.add_stubs(['$require', '$handle', '$empty?', '$children', '$push', '$each', '$==', '$type', '$expr', '$<<', '$fragment']);
  
  self.$require("opal/nodes/base");
  return (function($base, $parent_nesting) {
    var self = $module($base, 'Opal');

    var $nesting = [self].concat($parent_nesting);

    (function($base, $parent_nesting) {
      var self = $module($base, 'Nodes');

      var $nesting = [self].concat($parent_nesting);

      (function($base, $super, $parent_nesting) {
        var self = $klass($base, $super, 'ArrayNode');

        var $nesting = [self].concat($parent_nesting), $ArrayNode_compile$1;

        
        self.$handle("array");
        return (Opal.def(self, '$compile', $ArrayNode_compile$1 = function $$compile() {
          var $a, $$2, self = this, code = nil, work = nil, join = nil;

          
          if ($truthy(self.$children()['$empty?']())) {
            return self.$push("[]")};
          $a = [[], []], (code = $a[0]), (work = $a[1]), $a;
          $send(self.$children(), 'each', [], ($$2 = function(child){var self = $$2.$$s == null ? this : $$2.$$s, splat = nil, part = nil;

          
            
            if (child == null) {
              child = nil;
            };
            splat = child.$type()['$==']("splat");
            part = self.$expr(child);
            if ($truthy(splat)) {
              
              if ($truthy(work['$empty?']())) {
                if ($truthy(code['$empty?']())) {
                  code['$<<'](self.$fragment("[].concat("))['$<<'](part)['$<<'](self.$fragment(")"))
                } else {
                  code['$<<'](self.$fragment(".concat("))['$<<'](part)['$<<'](self.$fragment(")"))
                }
              } else {
                
                if ($truthy(code['$empty?']())) {
                  code['$<<'](self.$fragment("["))['$<<'](work)['$<<'](self.$fragment("]"))
                } else {
                  code['$<<'](self.$fragment(".concat(["))['$<<'](work)['$<<'](self.$fragment("])"))
                };
                code['$<<'](self.$fragment(".concat("))['$<<'](part)['$<<'](self.$fragment(")"));
              };
              return (work = []);
            } else {
              
              if ($truthy(work['$empty?']())) {
              } else {
                work['$<<'](self.$fragment(", "))
              };
              return work['$<<'](part);
            };}, $$2.$$s = self, $$2.$$arity = 1, $$2));
          if ($truthy(work['$empty?']())) {
          } else {
            
            join = [self.$fragment("["), work, self.$fragment("]")];
            if ($truthy(code['$empty?']())) {
              code = join
            } else {
              code.$push([self.$fragment(".concat("), join, self.$fragment(")")])
            };
          };
          return self.$push(code);
        }, $ArrayNode_compile$1.$$arity = 0), nil) && 'compile';
      })($nesting[0], $$($nesting, 'Base'), $nesting)
    })($nesting[0], $nesting)
  })($nesting[0], $nesting);
};

/* Generated by Opal 1.0.0 */
Opal.modules["opal/nodes/defined"] = function(Opal) {
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.$$$, $$ = Opal.$$, $module = Opal.module, $klass = Opal.klass, $truthy = Opal.truthy, $slice = Opal.slice, $send = Opal.send, $range = Opal.range;

  Opal.add_stubs(['$require', '$handle', '$children', '$type', '$value', '$===', '$push', '$inspect', '$to_s', '$==', '$size', '$[]', '$compile_defined_send', '$wrap', '$compile_defined_ivar', '$compile_defined_super', '$compile_defined_yield', '$compile_defined_xstr', '$compile_defined_const', '$compile_defined_cvar', '$compile_defined_gvar', '$compile_defined_back_ref', '$compile_defined_nth_ref', '$compile_defined_array', '$respond_to?', '$__send__', '$new_temp', '$scope', '$expr', '$wrap_with_try_catch', '$mid_to_jsid', '$compile_defined', '$compile_send_recv_doesnt_raise', '$each', '$s', '$uses_block!', '$block_name', '$find_parent_def', '$nil?', '$class_variable_owner', '$helper', '$include?', '$each_with_index']);
  
  self.$require("opal/nodes/base");
  return (function($base, $parent_nesting) {
    var self = $module($base, 'Opal');

    var $nesting = [self].concat($parent_nesting);

    (function($base, $parent_nesting) {
      var self = $module($base, 'Nodes');

      var $nesting = [self].concat($parent_nesting);

      (function($base, $super, $parent_nesting) {
        var self = $klass($base, $super, 'DefinedNode');

        var $nesting = [self].concat($parent_nesting), $DefinedNode_compile$1, $DefinedNode_compile_defined$2, $DefinedNode_wrap_with_try_catch$3, $DefinedNode_compile_send_recv_doesnt_raise$4, $DefinedNode_compile_defined_send$5, $DefinedNode_compile_defined_ivar$7, $DefinedNode_compile_defined_super$8, $DefinedNode_compile_defined_yield$9, $DefinedNode_compile_defined_xstr$10, $DefinedNode_compile_defined_const$11, $DefinedNode_compile_defined_cvar$12, $DefinedNode_compile_defined_gvar$13, $DefinedNode_compile_defined_back_ref$14, $DefinedNode_compile_defined_nth_ref$15, $DefinedNode_compile_defined_array$16;

        
        self.$handle("defined?");
        self.$children("value");
        
        Opal.def(self, '$compile', $DefinedNode_compile$1 = function $$compile() {
          var $a, self = this, $case = nil;

          return (function() {$case = self.$value().$type();
          if ("self"['$===']($case) || "nil"['$===']($case) || "false"['$===']($case) || "true"['$===']($case)) {return self.$push(self.$value().$type().$to_s().$inspect())}
          else if ("lvasgn"['$===']($case) || "ivasgn"['$===']($case) || "gvasgn"['$===']($case) || "cvasgn"['$===']($case) || "casgn"['$===']($case) || "op_asgn"['$===']($case) || "or_asgn"['$===']($case) || "and_asgn"['$===']($case)) {return self.$push("'assignment'")}
          else if ("lvar"['$===']($case)) {return self.$push("'local-variable'")}
          else if ("begin"['$===']($case)) {if ($truthy((($a = self.$value().$children().$size()['$=='](1)) ? self.$value().$children()['$[]'](0).$type()['$==']("masgn") : self.$value().$children().$size()['$=='](1)))) {
            return self.$push("'assignment'")
          } else {
            return self.$push("'expression'")
          }}
          else if ("send"['$===']($case)) {
          self.$compile_defined_send(self.$value());
          return self.$wrap("(", " ? 'method' : nil)");}
          else if ("ivar"['$===']($case)) {
          self.$compile_defined_ivar(self.$value());
          return self.$wrap("(", " ? 'instance-variable' : nil)");}
          else if ("zsuper"['$===']($case) || "super"['$===']($case)) {return self.$compile_defined_super()}
          else if ("yield"['$===']($case)) {
          self.$compile_defined_yield();
          return self.$wrap("(", " ? 'yield' : nil)");}
          else if ("xstr"['$===']($case)) {return self.$compile_defined_xstr(self.$value())}
          else if ("const"['$===']($case)) {
          self.$compile_defined_const(self.$value());
          return self.$wrap("(", " ? 'constant' : nil)");}
          else if ("cvar"['$===']($case)) {
          self.$compile_defined_cvar(self.$value());
          return self.$wrap("(", " ? 'class variable' : nil)");}
          else if ("gvar"['$===']($case)) {
          self.$compile_defined_gvar(self.$value());
          return self.$wrap("(", " ? 'global-variable' : nil)");}
          else if ("back_ref"['$===']($case)) {
          self.$compile_defined_back_ref();
          return self.$wrap("(", " ? 'global-variable' : nil)");}
          else if ("nth_ref"['$===']($case)) {
          self.$compile_defined_nth_ref();
          return self.$wrap("(", " ? 'global-variable' : nil)");}
          else if ("array"['$===']($case)) {
          self.$compile_defined_array(self.$value());
          return self.$wrap("(", " ? 'expression' : nil)");}
          else {return self.$push("'expression'")}})()
        }, $DefinedNode_compile$1.$$arity = 0);
        
        Opal.def(self, '$compile_defined', $DefinedNode_compile_defined$2 = function $$compile_defined(node) {
          var self = this, type = nil, node_tmp = nil;

          
          type = node.$type();
          if ($truthy(self['$respond_to?']("" + "compile_defined_" + (type)))) {
            return self.$__send__("" + "compile_defined_" + (type), node)
          } else {
            
            node_tmp = self.$scope().$new_temp();
            self.$push("" + "(" + (node_tmp) + " = ", self.$expr(node), ")");
            return node_tmp;
          };
        }, $DefinedNode_compile_defined$2.$$arity = 1);
        
        Opal.def(self, '$wrap_with_try_catch', $DefinedNode_wrap_with_try_catch$3 = function $$wrap_with_try_catch(code) {
          var self = this, returning_tmp = nil;

          
          returning_tmp = self.$scope().$new_temp();
          self.$push("" + "(" + (returning_tmp) + " = (function() { try {");
          self.$push("" + "  return " + (code) + ";");
          self.$push("} catch ($err) {");
          self.$push("  if (Opal.rescue($err, [Opal.Exception])) {");
          self.$push("    try {");
          self.$push("      return false;");
          self.$push("    } finally { Opal.pop_exception() }");
          self.$push("  } else { throw $err; }");
          self.$push("}})())");
          return returning_tmp;
        }, $DefinedNode_wrap_with_try_catch$3.$$arity = 1);
        
        Opal.def(self, '$compile_send_recv_doesnt_raise', $DefinedNode_compile_send_recv_doesnt_raise$4 = function $$compile_send_recv_doesnt_raise(recv_code) {
          var self = this;

          return self.$wrap_with_try_catch(recv_code)
        }, $DefinedNode_compile_send_recv_doesnt_raise$4.$$arity = 1);
        
        Opal.def(self, '$compile_defined_send', $DefinedNode_compile_defined_send$5 = function $$compile_defined_send(node) {
          var $a, $$6, self = this, recv = nil, method_name = nil, args = nil, mid = nil, recv_code = nil, recv_tmp = nil, recv_value_tmp = nil, meth_tmp = nil;

          
          $a = [].concat(Opal.to_a(node)), (recv = ($a[0] == null ? nil : $a[0])), (method_name = ($a[1] == null ? nil : $a[1])), (args = $slice.call($a, 2)), $a;
          mid = self.$mid_to_jsid(method_name.$to_s());
          if ($truthy(recv)) {
            
            recv_code = self.$compile_defined(recv);
            self.$push(" && ");
            if (recv.$type()['$==']("send")) {
              
              recv_code = self.$compile_send_recv_doesnt_raise(recv_code);
              self.$push(" && ");};
            recv_tmp = self.$scope().$new_temp();
            self.$push("" + "(" + (recv_tmp) + " = ", recv_code, "" + ", " + (recv_tmp) + ") && ");
          } else {
            recv_tmp = "self"
          };
          recv_value_tmp = self.$scope().$new_temp();
          self.$push("" + "(" + (recv_value_tmp) + " = " + (recv_tmp) + ") && ");
          meth_tmp = self.$scope().$new_temp();
          self.$push("" + "(((" + (meth_tmp) + " = " + (recv_value_tmp) + (mid) + ") && !" + (meth_tmp) + ".$$stub)");
          self.$push("" + " || " + (recv_value_tmp) + "['$respond_to_missing?']('" + (method_name) + "'))");
          $send(args, 'each', [], ($$6 = function(arg){var self = $$6.$$s == null ? this : $$6.$$s, $case = nil;

          
            
            if (arg == null) {
              arg = nil;
            };
            return (function() {$case = arg.$type();
            if ("block_pass"['$===']($case)) {return nil}
            else {
            self.$push(" && ");
            return self.$compile_defined(arg);}})();}, $$6.$$s = self, $$6.$$arity = 1, $$6));
          self.$wrap("(", ")");
          return "" + (meth_tmp) + "()";
        }, $DefinedNode_compile_defined_send$5.$$arity = 1);
        
        Opal.def(self, '$compile_defined_ivar', $DefinedNode_compile_defined_ivar$7 = function $$compile_defined_ivar(node) {
          var self = this, name = nil, tmp = nil;

          
          name = node.$children()['$[]'](0).$to_s()['$[]']($range(1, -1, false));
          tmp = self.$scope().$new_temp();
          self.$push("" + "(" + (tmp) + " = self['" + (name) + "'], " + (tmp) + " != null && " + (tmp) + " !== nil)");
          return tmp;
        }, $DefinedNode_compile_defined_ivar$7.$$arity = 1);
        
        Opal.def(self, '$compile_defined_super', $DefinedNode_compile_defined_super$8 = function $$compile_defined_super() {
          var self = this;

          return self.$push(self.$expr(self.$s("defined_super")))
        }, $DefinedNode_compile_defined_super$8.$$arity = 0);
        
        Opal.def(self, '$compile_defined_yield', $DefinedNode_compile_defined_yield$9 = function $$compile_defined_yield() {
          var $a, self = this, block_name = nil;

          
          self.$scope()['$uses_block!']();
          block_name = ($truthy($a = self.$scope().$block_name()) ? $a : self.$scope().$find_parent_def().$block_name());
          self.$push("" + "(" + (block_name) + " != null && " + (block_name) + " !== nil)");
          return block_name;
        }, $DefinedNode_compile_defined_yield$9.$$arity = 0);
        
        Opal.def(self, '$compile_defined_xstr', $DefinedNode_compile_defined_xstr$10 = function $$compile_defined_xstr(node) {
          var self = this;

          return self.$push("(typeof(", self.$expr(node), ") !== \"undefined\")")
        }, $DefinedNode_compile_defined_xstr$10.$$arity = 1);
        
        Opal.def(self, '$compile_defined_const', $DefinedNode_compile_defined_const$11 = function $$compile_defined_const(node) {
          var $a, self = this, const_scope = nil, const_name = nil, const_tmp = nil, const_scope_tmp = nil;

          
          $a = [].concat(Opal.to_a(node)), (const_scope = ($a[0] == null ? nil : $a[0])), (const_name = ($a[1] == null ? nil : $a[1])), $a;
          const_tmp = self.$scope().$new_temp();
          if ($truthy(const_scope['$nil?']())) {
            self.$push("" + "(" + (const_tmp) + " = $$($nesting, '" + (const_name) + "', 'skip_raise'))")
          } else if (const_scope['$=='](self.$s("cbase"))) {
            self.$push("" + "(" + (const_tmp) + " = $$$('::', '" + (const_name) + "', 'skip_raise'))")
          } else {
            
            const_scope_tmp = self.$compile_defined(const_scope);
            self.$push("" + " && (" + (const_tmp) + " = $$$(" + (const_scope_tmp) + ", '" + (const_name) + "', 'skip_raise'))");
          };
          return const_tmp;
        }, $DefinedNode_compile_defined_const$11.$$arity = 1);
        
        Opal.def(self, '$compile_defined_cvar', $DefinedNode_compile_defined_cvar$12 = function $$compile_defined_cvar(node) {
          var $a, self = this, cvar_name = nil, _ = nil, cvar_tmp = nil;

          
          $a = [].concat(Opal.to_a(node)), (cvar_name = ($a[0] == null ? nil : $a[0])), (_ = ($a[1] == null ? nil : $a[1])), $a;
          cvar_tmp = self.$scope().$new_temp();
          self.$push("" + "(" + (cvar_tmp) + " = " + (self.$class_variable_owner()) + ".$$cvars['" + (cvar_name) + "'], " + (cvar_tmp) + " != null)");
          return cvar_tmp;
        }, $DefinedNode_compile_defined_cvar$12.$$arity = 1);
        
        Opal.def(self, '$compile_defined_gvar', $DefinedNode_compile_defined_gvar$13 = function $$compile_defined_gvar(node) {
          var self = this, name = nil, gvar_temp = nil;

          
          self.$helper("gvars");
          name = node.$children()['$[]'](0).$to_s()['$[]']($range(1, -1, false));
          gvar_temp = self.$scope().$new_temp();
          if ($truthy(["~", "!"]['$include?'](name))) {
            self.$push("" + "(" + (gvar_temp) + " = ", self.$expr(node), " || true)")
          } else {
            self.$push("" + "(" + (gvar_temp) + " = $gvars[" + (name.$inspect()) + "], " + (gvar_temp) + " != null)")
          };
          return gvar_temp;
        }, $DefinedNode_compile_defined_gvar$13.$$arity = 1);
        
        Opal.def(self, '$compile_defined_back_ref', $DefinedNode_compile_defined_back_ref$14 = function $$compile_defined_back_ref() {
          var self = this, back_ref_temp = nil;

          
          self.$helper("gvars");
          back_ref_temp = self.$scope().$new_temp();
          self.$push("" + "(" + (back_ref_temp) + " = $gvars['~'], " + (back_ref_temp) + " != null && " + (back_ref_temp) + " !== nil)");
          return back_ref_temp;
        }, $DefinedNode_compile_defined_back_ref$14.$$arity = 0);
        
        Opal.def(self, '$compile_defined_nth_ref', $DefinedNode_compile_defined_nth_ref$15 = function $$compile_defined_nth_ref() {
          var self = this, nth_ref_tmp = nil;

          
          self.$helper("gvars");
          nth_ref_tmp = self.$scope().$new_temp();
          self.$push("" + "(" + (nth_ref_tmp) + " = $gvars['~'], " + (nth_ref_tmp) + " != null && " + (nth_ref_tmp) + " != nil)");
          return nth_ref_tmp;
        }, $DefinedNode_compile_defined_nth_ref$15.$$arity = 0);
        return (Opal.def(self, '$compile_defined_array', $DefinedNode_compile_defined_array$16 = function $$compile_defined_array(node) {
          var $$17, self = this;

          return $send(node.$children(), 'each_with_index', [], ($$17 = function(child, idx){var self = $$17.$$s == null ? this : $$17.$$s;

          
            
            if (child == null) {
              child = nil;
            };
            
            if (idx == null) {
              idx = nil;
            };
            if (idx['$=='](0)) {
            } else {
              self.$push(" && ")
            };
            return self.$compile_defined(child);}, $$17.$$s = self, $$17.$$arity = 2, $$17))
        }, $DefinedNode_compile_defined_array$16.$$arity = 1), nil) && 'compile_defined_array';
      })($nesting[0], $$($nesting, 'Base'), $nesting)
    })($nesting[0], $nesting)
  })($nesting[0], $nesting);
};

/* Generated by Opal 1.0.0 */
Opal.modules["opal/nodes/masgn"] = function(Opal) {
  function $rb_ge(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs >= rhs : lhs['$>='](rhs);
  }
  function $rb_plus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs + rhs : lhs['$+'](rhs);
  }
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.$$$, $$ = Opal.$$, $module = Opal.module, $klass = Opal.klass, $truthy = Opal.truthy, $send = Opal.send;

  Opal.add_stubs(['$require', '$freeze', '$handle', '$children', '$new_temp', '$scope', '$==', '$type', '$rhs', '$push', '$expr', '$any?', '$size', '$compile_masgn', '$lhs', '$queue_temp', '$take_while', '$!=', '$drop', '$each_with_index', '$compile_assignment', '$empty?', '$shift', '$[]', '$helper', '$<<', '$dup', '$s', '$!', '$>=', '$updated', '$include?', '$+', '$last', '$raise']);
  
  self.$require("opal/nodes/base");
  return (function($base, $parent_nesting) {
    var self = $module($base, 'Opal');

    var $nesting = [self].concat($parent_nesting);

    (function($base, $parent_nesting) {
      var self = $module($base, 'Nodes');

      var $nesting = [self].concat($parent_nesting);

      (function($base, $super, $parent_nesting) {
        var self = $klass($base, $super, 'MassAssignNode');

        var $nesting = [self].concat($parent_nesting), $MassAssignNode_compile$1, $MassAssignNode_compile_masgn$3, $MassAssignNode_compile_assignment$7;

        
        Opal.const_set($nesting[0], 'SIMPLE_ASSIGNMENT', ["lvasgn", "ivasgn", "lvar", "gvasgn", "cdecl", "casgn"].$freeze());
        self.$handle("masgn");
        self.$children("lhs", "rhs");
        
        Opal.def(self, '$compile', $MassAssignNode_compile$1 = function $$compile() {
          var $$2, self = this, array = nil, rhs_len = nil, retval = nil;

          
          array = self.$scope().$new_temp();
          if (self.$rhs().$type()['$==']("array")) {
            
            self.$push("" + (array) + " = ", self.$expr(self.$rhs()));
            rhs_len = (function() {if ($truthy($send(self.$rhs().$children(), 'any?', [], ($$2 = function(c){var self = $$2.$$s == null ? this : $$2.$$s;

            
              
              if (c == null) {
                c = nil;
              };
              return c.$type()['$==']("splat");}, $$2.$$s = self, $$2.$$arity = 1, $$2)))) {
              return nil
            } else {
              return self.$rhs().$children().$size()
            }; return nil; })();
            self.$compile_masgn(self.$lhs().$children(), array, rhs_len);
            self.$push("" + ", " + (array));
          } else if (self.$rhs().$type()['$==']("begin")) {
            
            retval = self.$scope().$new_temp();
            self.$push("" + (retval) + " = ", self.$expr(self.$rhs()));
            self.$push("" + ", " + (array) + " = Opal.to_ary(" + (retval) + ")");
            self.$compile_masgn(self.$lhs().$children(), array);
            self.$push("" + ", " + (retval));
            self.$scope().$queue_temp(retval);
          } else {
            
            retval = self.$scope().$new_temp();
            self.$push("" + (retval) + " = ", self.$expr(self.$rhs()));
            self.$push("" + ", " + (array) + " = Opal.to_ary(" + (retval) + ")");
            self.$compile_masgn(self.$lhs().$children(), array);
            self.$push("" + ", " + (retval));
            self.$scope().$queue_temp(retval);
          };
          return self.$scope().$queue_temp(array);
        }, $MassAssignNode_compile$1.$$arity = 0);
        
        Opal.def(self, '$compile_masgn', $MassAssignNode_compile_masgn$3 = function $$compile_masgn(lhs_items, array, len) {
          var $$4, $$5, $$6, self = this, pre_splat = nil, post_splat = nil, splat = nil, part = nil, tmp = nil;

          
          
          if (len == null) {
            len = nil;
          };
          pre_splat = $send(lhs_items, 'take_while', [], ($$4 = function(child){var self = $$4.$$s == null ? this : $$4.$$s;

          
            
            if (child == null) {
              child = nil;
            };
            return child.$type()['$!=']("splat");}, $$4.$$s = self, $$4.$$arity = 1, $$4));
          post_splat = lhs_items.$drop(pre_splat.$size());
          $send(pre_splat, 'each_with_index', [], ($$5 = function(child, idx){var self = $$5.$$s == null ? this : $$5.$$s;

          
            
            if (child == null) {
              child = nil;
            };
            
            if (idx == null) {
              idx = nil;
            };
            return self.$compile_assignment(child, array, idx, len);}, $$5.$$s = self, $$5.$$arity = 2, $$5));
          if ($truthy(post_splat['$empty?']())) {
            return nil
          } else {
            
            splat = post_splat.$shift();
            if ($truthy(post_splat['$empty?']())) {
              if ($truthy((part = splat.$children()['$[]'](0)))) {
                
                self.$helper("slice");
                part = part.$dup()['$<<'](self.$s("js_tmp", "" + "$slice.call(" + (array) + ", " + (pre_splat.$size()) + ")"));
                self.$push(", ");
                return self.$push(self.$expr(part));
              } else {
                return nil
              }
            } else {
              
              tmp = self.$scope().$new_temp();
              self.$push("" + ", " + (tmp) + " = " + (array) + ".length - " + (post_splat.$size()));
              self.$push("" + ", " + (tmp) + " = (" + (tmp) + " < " + (pre_splat.$size()) + ") ? " + (pre_splat.$size()) + " : " + (tmp));
              if ($truthy((part = splat.$children()['$[]'](0)))) {
                
                self.$helper("slice");
                part = part.$dup()['$<<'](self.$s("js_tmp", "" + "$slice.call(" + (array) + ", " + (pre_splat.$size()) + ", " + (tmp) + ")"));
                self.$push(", ");
                self.$push(self.$expr(part));};
              $send(post_splat, 'each_with_index', [], ($$6 = function(child, idx){var self = $$6.$$s == null ? this : $$6.$$s;

              
                
                if (child == null) {
                  child = nil;
                };
                
                if (idx == null) {
                  idx = nil;
                };
                if (idx['$=='](0)) {
                  return self.$compile_assignment(child, array, tmp)
                } else {
                  return self.$compile_assignment(child, array, "" + (tmp) + " + " + (idx))
                };}, $$6.$$s = self, $$6.$$arity = 2, $$6));
              return self.$scope().$queue_temp(tmp);
            };
          };
        }, $MassAssignNode_compile_masgn$3.$$arity = -3);
        return (Opal.def(self, '$compile_assignment', $MassAssignNode_compile_assignment$7 = function $$compile_assignment(child, array, idx, len) {
          var $a, self = this, assign = nil, part = nil, tmp = nil;

          
          
          if (len == null) {
            len = nil;
          };
          assign = (function() {if ($truthy(($truthy($a = len['$!']()) ? $a : $rb_ge(idx, len)))) {
            return self.$s("js_tmp", "" + "(" + (array) + "[" + (idx) + "] == null ? nil : " + (array) + "[" + (idx) + "])")
          } else {
            return self.$s("js_tmp", "" + (array) + "[" + (idx) + "]")
          }; return nil; })();
          part = child.$updated();
          if ($truthy($$($nesting, 'SIMPLE_ASSIGNMENT')['$include?'](child.$type()))) {
            part = part.$updated(nil, $rb_plus(part.$children(), [assign]))
          } else if (child.$type()['$==']("send")) {
            part = part.$updated(nil, $rb_plus(part.$children(), [assign]))
          } else if (child.$type()['$==']("attrasgn")) {
            part.$last()['$<<'](assign)
          } else if (child.$type()['$==']("mlhs")) {
            
            tmp = self.$scope().$new_temp();
            self.$push("" + ", (" + (tmp) + " = Opal.to_ary(" + (assign.$children()['$[]'](0)) + ")");
            self.$compile_masgn(child.$children(), tmp);
            self.$push(")");
            self.$scope().$queue_temp(tmp);
            return nil;
          } else {
            self.$raise("" + "Bad child node in masgn LHS: " + (child) + ". LHS: " + (self.$lhs()))
          };
          self.$push(", ");
          return self.$push(self.$expr(part));
        }, $MassAssignNode_compile_assignment$7.$$arity = -4), nil) && 'compile_assignment';
      })($nesting[0], $$($nesting, 'Base'), $nesting)
    })($nesting[0], $nesting)
  })($nesting[0], $nesting);
};

/* Generated by Opal 1.0.0 */
Opal.modules["opal/nodes/arglist"] = function(Opal) {
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.$$$, $$ = Opal.$$, $module = Opal.module, $klass = Opal.klass, $send = Opal.send, $truthy = Opal.truthy;

  Opal.add_stubs(['$require', '$handle', '$each', '$children', '$==', '$type', '$expr', '$empty?', '$<<', '$fragment', '$push']);
  
  self.$require("opal/nodes/base");
  return (function($base, $parent_nesting) {
    var self = $module($base, 'Opal');

    var $nesting = [self].concat($parent_nesting);

    (function($base, $parent_nesting) {
      var self = $module($base, 'Nodes');

      var $nesting = [self].concat($parent_nesting);

      (function($base, $super, $parent_nesting) {
        var self = $klass($base, $super, 'ArglistNode');

        var $nesting = [self].concat($parent_nesting), $ArglistNode_compile$1;

        
        self.$handle("arglist");
        return (Opal.def(self, '$compile', $ArglistNode_compile$1 = function $$compile() {
          var $a, $$2, self = this, code = nil, work = nil, join = nil;

          
          $a = [[], []], (code = $a[0]), (work = $a[1]), $a;
          $send(self.$children(), 'each', [], ($$2 = function(current){var self = $$2.$$s == null ? this : $$2.$$s, splat = nil, arg = nil;

          
            
            if (current == null) {
              current = nil;
            };
            splat = current.$type()['$==']("splat");
            arg = self.$expr(current);
            if ($truthy(splat)) {
              
              if ($truthy(work['$empty?']())) {
                if ($truthy(code['$empty?']())) {
                  code['$<<'](arg)
                } else {
                  code['$<<'](self.$fragment(".concat("))['$<<'](arg)['$<<'](self.$fragment(")"))
                }
              } else {
                
                if ($truthy(code['$empty?']())) {
                  code['$<<'](self.$fragment("["))['$<<'](work)['$<<'](self.$fragment("]"))
                } else {
                  code['$<<'](self.$fragment(".concat(["))['$<<'](work)['$<<'](self.$fragment("])"))
                };
                code['$<<'](self.$fragment(".concat("))['$<<'](arg)['$<<'](self.$fragment(")"));
              };
              return (work = []);
            } else {
              
              if ($truthy(work['$empty?']())) {
              } else {
                work['$<<'](self.$fragment(", "))
              };
              return work['$<<'](arg);
            };}, $$2.$$s = self, $$2.$$arity = 1, $$2));
          if ($truthy(work['$empty?']())) {
          } else {
            
            join = work;
            if ($truthy(code['$empty?']())) {
              code = join
            } else {
              code['$<<'](self.$fragment(".concat(["))['$<<'](join)['$<<'](self.$fragment("])"))
            };
          };
          return $send(self, 'push', Opal.to_a(code));
        }, $ArglistNode_compile$1.$$arity = 0), nil) && 'compile';
      })($nesting[0], $$($nesting, 'Base'), $nesting)
    })($nesting[0], $nesting)
  })($nesting[0], $nesting);
};

/* Generated by Opal 1.0.0 */
Opal.modules["opal/nodes/x_string"] = function(Opal) {
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.$$$, $$ = Opal.$$, $module = Opal.module, $klass = Opal.klass, $truthy = Opal.truthy, $send = Opal.send, $range = Opal.range, $lambda = Opal.lambda;

  Opal.add_stubs(['$handle', '$unpack_return', '$children', '$strip_empty_children', '$single_line?', '$compile_single_line', '$each', '$compile_child', '$recv?', '$wrap', '$push', '$private', '$type', '$===', '$source', '$expression', '$loc', '$new', '$scope', '$expr', '$raise', '$shift', '$empty?', '$s', '$==', '$strip', '$=~', '$!', '$pop', '$extract_last_value', '$rstrip', '$expr?', '$end_with?', '$warning', '$compiler', '$line', '$[]', '$size', '$none?', '$first', '$dup', '$nil?', '$any?', '$last']);
  return (function($base, $parent_nesting) {
    var self = $module($base, 'Opal');

    var $nesting = [self].concat($parent_nesting);

    (function($base, $parent_nesting) {
      var self = $module($base, 'Nodes');

      var $nesting = [self].concat($parent_nesting);

      (function($base, $super, $parent_nesting) {
        var self = $klass($base, $super, 'XStringNode');

        var $nesting = [self].concat($parent_nesting), $XStringNode_compile$1, $XStringNode_compile_child$3, $XStringNode_compile_single_line$4, $XStringNode_extract_last_value$6, $XStringNode_single_line$ques$7, $XStringNode_unpack_return$9, $XStringNode_strip_empty_children$10;

        self.$$prototype.should_add_semicolon = self.$$prototype.returning = nil;
        
        self.$handle("xstr");
        
        Opal.def(self, '$compile', $XStringNode_compile$1 = function $$compile() {
          var $$2, self = this, unpacked_children = nil, stripped_children = nil;

          
          self.should_add_semicolon = false;
          unpacked_children = self.$unpack_return(self.$children());
          stripped_children = self.$strip_empty_children(unpacked_children);
          if ($truthy(self['$single_line?'](stripped_children))) {
            self.$compile_single_line(stripped_children)
          } else {
            $send(unpacked_children, 'each', [], ($$2 = function(c){var self = $$2.$$s == null ? this : $$2.$$s;

            
              
              if (c == null) {
                c = nil;
              };
              return self.$compile_child(c);}, $$2.$$s = self, $$2.$$arity = 1, $$2))
          };
          if ($truthy(self['$recv?']())) {
            self.$wrap("(", ")")};
          if ($truthy(self.should_add_semicolon)) {
            return self.$push(";")
          } else {
            return nil
          };
        }, $XStringNode_compile$1.$$arity = 0);
        self.$private();
        
        Opal.def(self, '$compile_child', $XStringNode_compile_child$3 = function $$compile_child(child) {
          var self = this, $case = nil, value = nil;

          return (function() {$case = child.$type();
          if ("str"['$===']($case)) {
          value = child.$loc().$expression().$source();
          return self.$push($$($nesting, 'Fragment').$new(value, self.$scope(), child));}
          else if ("begin"['$===']($case) || "gvar"['$===']($case) || "ivar"['$===']($case) || "nil"['$===']($case)) {return self.$push(self.$expr(child))}
          else {return self.$raise("" + "Unsupported xstr part: " + (child.$type()))}})()
        }, $XStringNode_compile_child$3.$$arity = 1);
        
        Opal.def(self, '$compile_single_line', $XStringNode_compile_single_line$4 = function $$compile_single_line(children) {
          var $a, $$5, self = this, has_embeded_return = nil, first_child = nil, single_child = nil, first_value = nil, last_child = nil, last_value = nil;

          
          has_embeded_return = false;
          first_child = children.$shift();
          single_child = children['$empty?']();
          first_child = ($truthy($a = first_child) ? $a : self.$s("nil"));
          if (first_child.$type()['$==']("str")) {
            
            first_value = first_child.$loc().$expression().$source().$strip();
            has_embeded_return = first_value['$=~'](/^return\b/);};
          if ($truthy(($truthy($a = self.returning) ? has_embeded_return['$!']() : $a))) {
            self.$push("return ")};
          last_child = ($truthy($a = children.$pop()) ? $a : first_child);
          if (last_child.$type()['$==']("str")) {
            last_value = self.$extract_last_value(last_child)};
          if ($truthy(single_child)) {
          } else {
            
            self.should_add_semicolon = false;
            self.$compile_child(first_child);
            $send(children, 'each', [], ($$5 = function(c){var self = $$5.$$s == null ? this : $$5.$$s;

            
              
              if (c == null) {
                c = nil;
              };
              return self.$compile_child(c);}, $$5.$$s = self, $$5.$$arity = 1, $$5));
          };
          if (last_child.$type()['$==']("str")) {
            return self.$push($$($nesting, 'Fragment').$new(last_value, self.$scope(), last_child))
          } else {
            return self.$compile_child(last_child)
          };
        }, $XStringNode_compile_single_line$4.$$arity = 1);
        
        Opal.def(self, '$extract_last_value', $XStringNode_extract_last_value$6 = function $$extract_last_value(last_child) {
          var $a, $b, self = this, last_value = nil;

          
          last_value = last_child.$loc().$expression().$source().$rstrip();
          if ($truthy(($truthy($a = ($truthy($b = self.returning) ? $b : self['$expr?']())) ? last_value['$end_with?'](";") : $a))) {
            
            self.$compiler().$warning("Removed semicolon ending x-string expression, interpreted as unintentional", last_child.$line());
            last_value = last_value['$[]']($range(0, -2, false));};
          if ($truthy(self.returning)) {
            self.should_add_semicolon = true};
          return last_value;
        }, $XStringNode_extract_last_value$6.$$arity = 1);
        
        Opal.def(self, '$single_line?', $XStringNode_single_line$ques$7 = function(children) {
          var $a, $$8, self = this;

          return ($truthy($a = children.$size()['$=='](1)) ? $a : $send(children, 'none?', [], ($$8 = function(c){var self = $$8.$$s == null ? this : $$8.$$s, $b;

          
            
            if (c == null) {
              c = nil;
            };
            return (($b = c.$type()['$==']("str")) ? c.$loc().$expression().$source()['$end_with?']("\n") : c.$type()['$==']("str"));}, $$8.$$s = self, $$8.$$arity = 1, $$8)))
        }, $XStringNode_single_line$ques$7.$$arity = 1);
        
        Opal.def(self, '$unpack_return', $XStringNode_unpack_return$9 = function $$unpack_return(children) {
          var self = this, first_child = nil;

          
          first_child = children.$first();
          self.returning = false;
          if (first_child.$type()['$==']("js_return")) {
            
            self.returning = true;
            children = first_child.$children();};
          return children;
        }, $XStringNode_unpack_return$9.$$arity = 1);
        return (Opal.def(self, '$strip_empty_children', $XStringNode_strip_empty_children$10 = function $$strip_empty_children(children) {
          var $$11, $a, $b, self = this, empty_line = nil;

          
          children = children.$dup();
          empty_line = $lambda(($$11 = function(child){var self = $$11.$$s == null ? this : $$11.$$s, $a, $b;

          
            
            if (child == null) {
              child = nil;
            };
            return ($truthy($a = child['$nil?']()) ? $a : (($b = child.$type()['$==']("str")) ? child.$loc().$expression().$source().$rstrip()['$empty?']() : child.$type()['$==']("str")));}, $$11.$$s = self, $$11.$$arity = 1, $$11));
          while ($truthy(($truthy($b = children['$any?']()) ? empty_line['$[]'](children.$first()) : $b))) {
            children.$shift()
          };
          while ($truthy(($truthy($b = children['$any?']()) ? empty_line['$[]'](children.$last()) : $b))) {
            children.$pop()
          };
          return children;
        }, $XStringNode_strip_empty_children$10.$$arity = 1), nil) && 'strip_empty_children';
      })($nesting[0], $$($nesting, 'Base'), $nesting)
    })($nesting[0], $nesting)
  })($nesting[0], $nesting)
};

/* Generated by Opal 1.0.0 */
Opal.modules["opal/nodes/lambda"] = function(Opal) {
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.$$$, $$ = Opal.$$, $module = Opal.module, $klass = Opal.klass;

  Opal.add_stubs(['$require', '$handle', '$children', '$helper', '$push', '$expr', '$iter']);
  
  self.$require("opal/nodes/call");
  return (function($base, $parent_nesting) {
    var self = $module($base, 'Opal');

    var $nesting = [self].concat($parent_nesting);

    (function($base, $parent_nesting) {
      var self = $module($base, 'Nodes');

      var $nesting = [self].concat($parent_nesting);

      (function($base, $super, $parent_nesting) {
        var self = $klass($base, $super, 'LambdaNode');

        var $nesting = [self].concat($parent_nesting), $LambdaNode_compile$1;

        
        self.$handle("lambda");
        self.$children("iter");
        return (Opal.def(self, '$compile', $LambdaNode_compile$1 = function $$compile() {
          var self = this;

          
          self.$helper("lambda");
          return self.$push("$lambda(", self.$expr(self.$iter()), ")");
        }, $LambdaNode_compile$1.$$arity = 0), nil) && 'compile';
      })($nesting[0], $$($nesting, 'Base'), $nesting)
    })($nesting[0], $nesting)
  })($nesting[0], $nesting);
};

/* Generated by Opal 1.0.0 */
Opal.modules["opal/nodes"] = function(Opal) {
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.$$$, $$ = Opal.$$;

  Opal.add_stubs(['$require']);
  
  self.$require("opal/nodes/base");
  self.$require("opal/nodes/literal");
  self.$require("opal/nodes/variables");
  self.$require("opal/nodes/constants");
  self.$require("opal/nodes/call");
  self.$require("opal/nodes/csend");
  self.$require("opal/nodes/call_special");
  self.$require("opal/nodes/module");
  self.$require("opal/nodes/class");
  self.$require("opal/nodes/singleton_class");
  self.$require("opal/nodes/args");
  self.$require("opal/nodes/args/arity_check");
  self.$require("opal/nodes/iter");
  self.$require("opal/nodes/def");
  self.$require("opal/nodes/defs");
  self.$require("opal/nodes/if");
  self.$require("opal/nodes/logic");
  self.$require("opal/nodes/definitions");
  self.$require("opal/nodes/yield");
  self.$require("opal/nodes/rescue");
  self.$require("opal/nodes/case");
  self.$require("opal/nodes/super");
  self.$require("opal/nodes/top");
  self.$require("opal/nodes/while");
  self.$require("opal/nodes/hash");
  self.$require("opal/nodes/array");
  self.$require("opal/nodes/defined");
  self.$require("opal/nodes/masgn");
  self.$require("opal/nodes/arglist");
  self.$require("opal/nodes/x_string");
  return self.$require("opal/nodes/lambda");
};

/* Generated by Opal 1.0.0 */
Opal.modules["opal/eof_content"] = function(Opal) {
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.$$$, $$ = Opal.$$, $module = Opal.module, $klass = Opal.klass, $truthy = Opal.truthy, $send = Opal.send, $range = Opal.range;

  Opal.add_stubs(['$empty?', '$[]', '$last_token_position', '$drop_while', '$lines', '$==', '$join', '$private', '$last', '$end_pos']);
  return (function($base, $parent_nesting) {
    var self = $module($base, 'Opal');

    var $nesting = [self].concat($parent_nesting);

    (function($base, $super, $parent_nesting) {
      var self = $klass($base, $super, 'EofContent');

      var $nesting = [self].concat($parent_nesting), $EofContent_initialize$1, $EofContent_eof$2, $EofContent_last_token_position$4;

      self.$$prototype.tokens = self.$$prototype.source = nil;
      
      Opal.const_set($nesting[0], 'DATA_SEPARATOR', "__END__\n");
      
      Opal.def(self, '$initialize', $EofContent_initialize$1 = function $$initialize(tokens, source) {
        var self = this;

        
        self.tokens = tokens;
        return (self.source = source);
      }, $EofContent_initialize$1.$$arity = 2);
      
      Opal.def(self, '$eof', $EofContent_eof$2 = function $$eof() {
        var $$3, $a, self = this, eof_content = nil;

        
        if ($truthy(self.tokens['$empty?']())) {
          return nil};
        eof_content = self.source['$[]'](Opal.Range.$new(self.$last_token_position(), -1, false));
        if ($truthy(eof_content)) {
        } else {
          return nil
        };
        eof_content = $send(eof_content.$lines(), 'drop_while', [], ($$3 = function(line){var self = $$3.$$s == null ? this : $$3.$$s;

        
          
          if (line == null) {
            line = nil;
          };
          return line['$==']("\n");}, $$3.$$s = self, $$3.$$arity = 1, $$3));
        if (eof_content['$[]'](0)['$==']("__END__\n")) {
          
          eof_content = ($truthy($a = eof_content['$[]']($range(1, -1, false))) ? $a : []);
          return eof_content.$join();
        } else if (eof_content['$=='](["__END__"])) {
          return ""
        } else {
          return nil
        };
      }, $EofContent_eof$2.$$arity = 0);
      self.$private();
      return (Opal.def(self, '$last_token_position', $EofContent_last_token_position$4 = function $$last_token_position() {
        var $a, $b, self = this, _ = nil, last_token_info = nil, last_token_range = nil;

        
        $b = self.tokens.$last(), $a = Opal.to_ary($b), (_ = ($a[0] == null ? nil : $a[0])), (last_token_info = ($a[1] == null ? nil : $a[1])), $b;
        $b = last_token_info, $a = Opal.to_ary($b), (_ = ($a[0] == null ? nil : $a[0])), (last_token_range = ($a[1] == null ? nil : $a[1])), $b;
        return last_token_range.$end_pos();
      }, $EofContent_last_token_position$4.$$arity = 0), nil) && 'last_token_position';
    })($nesting[0], null, $nesting)
  })($nesting[0], $nesting)
};

/* Generated by Opal 1.0.0 */
Opal.modules["opal/errors"] = function(Opal) {
  function $rb_minus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs - rhs : lhs['$-'](rhs);
  }
  function $rb_plus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs + rhs : lhs['$+'](rhs);
  }
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.$$$, $$ = Opal.$$, $module = Opal.module, $klass = Opal.klass, $send2 = Opal.send2, $truthy = Opal.truthy, $send = Opal.send;

  Opal.add_stubs(['$attr_reader', '$attr_accessor', '$new', '$respond_to?', '$location', '$location=', '$-', '$diagnostic', '$diagnostic=', '$to_a', '$backtrace', '$unshift', '$to_s', '$set_backtrace', '$path', '$lineno', '$+', '$label', '$line', '$lineno=', '$source_line', '$label=', '$expression']);
  return (function($base, $parent_nesting) {
    var self = $module($base, 'Opal');

    var $nesting = [self].concat($parent_nesting), $Opal_opal_location_from_error$2, $Opal_add_opal_location_to_error$3;

    
    (function($base, $super, $parent_nesting) {
      var self = $klass($base, $super, 'Error');

      var $nesting = [self].concat($parent_nesting);

      return nil
    })($nesting[0], $$($nesting, 'StandardError'), $nesting);
    (function($base, $super, $parent_nesting) {
      var self = $klass($base, $super, 'GemNotFound');

      var $nesting = [self].concat($parent_nesting), $GemNotFound_initialize$1;

      
      self.$attr_reader("gem_name");
      return (Opal.def(self, '$initialize', $GemNotFound_initialize$1 = function $$initialize(gem_name) {
        var $iter = $GemNotFound_initialize$1.$$p, $yield = $iter || nil, self = this;

        if ($iter) $GemNotFound_initialize$1.$$p = null;
        
        self.gem_name = gem_name;
        return $send2(self, Opal.find_super_dispatcher(self, 'initialize', $GemNotFound_initialize$1, false, true), 'initialize', ["" + "can't find gem " + (gem_name)], null);
      }, $GemNotFound_initialize$1.$$arity = 1), nil) && 'initialize';
    })($nesting[0], $$($nesting, 'Error'), $nesting);
    (function($base, $super, $parent_nesting) {
      var self = $klass($base, $super, 'CompilationError');

      var $nesting = [self].concat($parent_nesting);

      return self.$attr_accessor("location")
    })($nesting[0], $$($nesting, 'Error'), $nesting);
    (function($base, $super, $parent_nesting) {
      var self = $klass($base, $super, 'ParsingError');

      var $nesting = [self].concat($parent_nesting);

      return nil
    })($nesting[0], $$($nesting, 'CompilationError'), $nesting);
    (function($base, $super, $parent_nesting) {
      var self = $klass($base, $super, 'RewritingError');

      var $nesting = [self].concat($parent_nesting);

      return nil
    })($nesting[0], $$($nesting, 'ParsingError'), $nesting);
    (function($base, $super, $parent_nesting) {
      var self = $klass($base, $super, 'SyntaxError');

      var $nesting = [self].concat($parent_nesting);

      return self.$attr_accessor("location")
    })($nesting[0], $$$('::', 'SyntaxError'), $nesting);
    Opal.defs(self, '$opal_location_from_error', $Opal_opal_location_from_error$2 = function $$opal_location_from_error(error) {
      var self = this, opal_location = nil, $writer = nil;

      
      opal_location = $$($nesting, 'OpalBacktraceLocation').$new();
      if ($truthy(error['$respond_to?']("location"))) {
        
        $writer = [error.$location()];
        $send(opal_location, 'location=', Opal.to_a($writer));
        $writer[$rb_minus($writer["length"], 1)];};
      if ($truthy(error['$respond_to?']("diagnostic"))) {
        
        $writer = [error.$diagnostic()];
        $send(opal_location, 'diagnostic=', Opal.to_a($writer));
        $writer[$rb_minus($writer["length"], 1)];};
      return opal_location;
    }, $Opal_opal_location_from_error$2.$$arity = 1);
    Opal.defs(self, '$add_opal_location_to_error', $Opal_add_opal_location_to_error$3 = function $$add_opal_location_to_error(opal_location, error) {
      var self = this, backtrace = nil;

      
      backtrace = error.$backtrace().$to_a();
      backtrace.$unshift(opal_location.$to_s());
      error.$set_backtrace(backtrace);
      return error;
    }, $Opal_add_opal_location_to_error$3.$$arity = 2);
    (function($base, $super, $parent_nesting) {
      var self = $klass($base, $super, 'OpalBacktraceLocation');

      var $nesting = [self].concat($parent_nesting), $OpalBacktraceLocation_initialize$4, $OpalBacktraceLocation_to_s$5, $OpalBacktraceLocation_diagnostic$eq$6, $OpalBacktraceLocation_location$eq$7;

      
      self.$attr_accessor("path", "lineno", "label");
      
      Opal.def(self, '$initialize', $OpalBacktraceLocation_initialize$4 = function $$initialize(path, lineno, label) {
        var $a, self = this;

        
        
        if (path == null) {
          path = nil;
        };
        
        if (lineno == null) {
          lineno = nil;
        };
        
        if (label == null) {
          label = nil;
        };
        return $a = [path, lineno, label], (self.path = $a[0]), (self.lineno = $a[1]), (self.label = $a[2]), $a;
      }, $OpalBacktraceLocation_initialize$4.$$arity = -1);
      
      Opal.def(self, '$to_s', $OpalBacktraceLocation_to_s$5 = function $$to_s() {
        var self = this, string = nil;

        
        string = self.$path();
        if ($truthy(self.$lineno())) {
          string = $rb_plus(string, "" + ":" + (self.$lineno()))};
        string = $rb_plus(string, ":in ");
        if ($truthy(self.$label())) {
          string = $rb_plus(string, "" + "`" + (self.$label()) + "'")
        } else {
          string = $rb_plus(string, "unknown")
        };
        return string;
      }, $OpalBacktraceLocation_to_s$5.$$arity = 0);
      Opal.alias(self, "line", "lineno");
      
      Opal.def(self, '$diagnostic=', $OpalBacktraceLocation_diagnostic$eq$6 = function(diagnostic) {
        var self = this, $writer = nil;

        
        if ($truthy(diagnostic)) {
        } else {
          return nil
        };
        
        $writer = [diagnostic.$location()];
        $send(self, 'location=', Opal.to_a($writer));
        return $writer[$rb_minus($writer["length"], 1)];;
      }, $OpalBacktraceLocation_diagnostic$eq$6.$$arity = 1);
      return (Opal.def(self, '$location=', $OpalBacktraceLocation_location$eq$7 = function(location) {
        var self = this, $writer = nil;

        
        if ($truthy(location)) {
        } else {
          return nil
        };
        
        $writer = [location.$line()];
        $send(self, 'lineno=', Opal.to_a($writer));
        $writer[$rb_minus($writer["length"], 1)];;
        if ($truthy(location['$respond_to?']("source_line"))) {
          
          $writer = [location.$source_line()];
          $send(self, 'label=', Opal.to_a($writer));
          return $writer[$rb_minus($writer["length"], 1)];
        } else if ($truthy(location['$respond_to?']("expression"))) {
          
          $writer = [location.$expression().$source_line()];
          $send(self, 'label=', Opal.to_a($writer));
          return $writer[$rb_minus($writer["length"], 1)];
        } else {
          return nil
        };
      }, $OpalBacktraceLocation_location$eq$7.$$arity = 1), nil) && 'location=';
    })($nesting[0], null, $nesting);
  })($nesting[0], $nesting)
};

/* Generated by Opal 1.0.0 */
Opal.modules["opal/magic_comments"] = function(Opal) {
  function $rb_ge(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs >= rhs : lhs['$>='](rhs);
  }
  function $rb_minus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs - rhs : lhs['$-'](rhs);
  }
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.$$$, $$ = Opal.$$, $module = Opal.module, $hash2 = Opal.hash2, $truthy = Opal.truthy, $send = Opal.send;

  Opal.add_stubs(['$freeze', '$line', '$loc', '$take', '$each', '$>=', '$any?', '$scan', '$text', '$to_sym', '$===', '$[]=', '$-']);
  return (function($base, $parent_nesting) {
    var self = $module($base, 'MagicComments');

    var $nesting = [self].concat($parent_nesting), $MagicComments_parse$1;

    
    Opal.const_set($nesting[0], 'MAGIC_COMMENT_RE', /^# *(\w+) *: *(\S+.*?) *$/.$freeze());
    Opal.const_set($nesting[0], 'EMACS_MAGIC_COMMENT_RE', /^# *-\*- *(\w+) *: *(\S+.*?) *-\*- *$/.$freeze());
    Opal.defs(self, '$parse', $MagicComments_parse$1 = function $$parse(sexp, comments) {
      var $$2, self = this, flags = nil, first_line = nil;

      
      flags = $hash2([], {});
      if ($truthy(sexp)) {
        
        first_line = sexp.$loc().$line();
        comments = comments.$take(first_line);};
      $send(comments, 'each', [], ($$2 = function(comment){var self = $$2.$$s == null ? this : $$2.$$s, $a, $$3, parts = nil;

      
        
        if (comment == null) {
          comment = nil;
        };
        if ($truthy(($truthy($a = first_line) ? $rb_ge(comment.$loc().$line(), first_line) : $a))) {
          return nil;};
        if ($truthy(($truthy($a = (parts = comment.$text().$scan($$($nesting, 'MAGIC_COMMENT_RE')))['$any?']()) ? $a : (parts = comment.$text().$scan($$($nesting, 'EMACS_MAGIC_COMMENT_RE')))['$any?']()))) {
          return $send(parts, 'each', [], ($$3 = function(key, value){var self = $$3.$$s == null ? this : $$3.$$s, $writer = nil, $case = nil;

          
            
            if (key == null) {
              key = nil;
            };
            
            if (value == null) {
              value = nil;
            };
            $writer = [key.$to_sym(), (function() {$case = value;
            if ("true"['$===']($case)) {return true}
            else if ("false"['$===']($case)) {return false}
            else {return value}})()];
            $send(flags, '[]=', Opal.to_a($writer));
            return $writer[$rb_minus($writer["length"], 1)];}, $$3.$$s = self, $$3.$$arity = 2, $$3))
        } else {
          return nil
        };}, $$2.$$s = self, $$2.$$arity = 1, $$2));
      return flags;
    }, $MagicComments_parse$1.$$arity = 2);
  })($$($nesting, 'Opal'), $nesting)
};

/* Generated by Opal 1.0.0 */
Opal.modules["opal/compiler"] = function(Opal) {
  function $rb_minus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs - rhs : lhs['$-'](rhs);
  }
  function $rb_plus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs + rhs : lhs['$+'](rhs);
  }
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.$$$, $$ = Opal.$$, $module = Opal.module, $hash2 = Opal.hash2, $klass = Opal.klass, $send = Opal.send, $truthy = Opal.truthy, $slice = Opal.slice;

  Opal.add_stubs(['$require', '$compile', '$new', '$freeze', '$join', '$dirname', '$first', '$split', '$basename', '$to_s', '$cleanpath', '$Pathname', '$fetch', '$define_method', '$option_value', '$key?', '$[]', '$!', '$include?', '$raise', '$inspect', '$[]=', '$-', '$compiler_option', '$attr_reader', '$attr_accessor', '$parse', '$re_raise_with_location', '$flatten', '$process', '$end_with?', '$code', '$last', '$<<', '$fragment', '$s', '$map', '$to_proc', '$file', '$source=', '$default_parser', '$tokenize', '$associate_locations', '$eof', '$magic_comments', '$to_sym', '$strip', '$location=', '$opal_location_from_error', '$path=', '$label', '$lines', '$to_i', '$line', '$label=', '$message', '$set_backtrace', '$backtrace', '$add_opal_location_to_error', '$warn', '$empty?', '$gsub', '$+', '$start_with?', '$helpers', '$new_temp', '$queue_temp', '$push_while', '$indent', '$pop_while', '$in_while?', '$nil?', '$scope', '$handlers', '$type', '$compile_to_fragments', '$error', '$returns', '$===', '$updated', '$children', '$loc', '$uses_block!', '$block_name', '$find_parent_def']);
  
  self.$require("set");
  self.$require("opal/parser");
  self.$require("opal/fragment");
  self.$require("opal/nodes");
  self.$require("opal/eof_content");
  self.$require("opal/errors");
  self.$require("opal/magic_comments");
  return (function($base, $parent_nesting) {
    var self = $module($base, 'Opal');

    var $nesting = [self].concat($parent_nesting), $Opal_compile$1;

    
    Opal.defs(self, '$compile', $Opal_compile$1 = function $$compile(source, options) {
      var self = this;

      
      
      if (options == null) {
        options = $hash2([], {});
      };
      return $$($nesting, 'Compiler').$new(source, options).$compile();
    }, $Opal_compile$1.$$arity = -2);
    (function($base, $super, $parent_nesting) {
      var self = $klass($base, $super, 'Compiler');

      var $nesting = [self].concat($parent_nesting), $Compiler_module_name$2, $Compiler_compiler_option$3, $Compiler_option_value$5, $Compiler_initialize$6, $Compiler_compile$7, $Compiler_parse$9, $Compiler_source_map$11, $Compiler_helpers$12, $Compiler_operator_helpers$14, $Compiler_method_calls$15, $Compiler_error$16, $Compiler_re_raise_with_location$17, $Compiler_warning$18, $Compiler_parser_indent$19, $Compiler_s$20, $Compiler_fragment$21, $Compiler_unique_temp$22, $Compiler_helper$23, $Compiler_indent$24, $Compiler_with_temp$25, $Compiler_in_while$26, $Compiler_in_case$28, $Compiler_in_while$ques$29, $Compiler_process$30, $Compiler_handlers$31, $Compiler_requires$32, $Compiler_required_trees$33, $Compiler_returns$34, $Compiler_handle_block_given_call$36;

      self.$$prototype.option_values = self.$$prototype.options = self.$$prototype.magic_comments = self.$$prototype.fragments = self.$$prototype.source = self.$$prototype.buffer = self.$$prototype.helpers = self.$$prototype.operator_helpers = self.$$prototype.method_calls = self.$$prototype.indent = self.$$prototype.unique = self.$$prototype.scope = self.$$prototype.case_stmt = self.$$prototype.handlers = self.$$prototype.requires = self.$$prototype.required_trees = nil;
      
      Opal.const_set($nesting[0], 'INDENT', "  ");
      Opal.const_set($nesting[0], 'COMPARE', ["<", ">", "<=", ">="].$freeze());
      Opal.defs(self, '$module_name', $Compiler_module_name$2 = function $$module_name(path) {
        var self = this;

        
        path = $$($nesting, 'File').$join($$($nesting, 'File').$dirname(path), $$($nesting, 'File').$basename(path).$split(".").$first());
        return self.$Pathname(path).$cleanpath().$to_s();
      }, $Compiler_module_name$2.$$arity = 1);
      Opal.defs(self, '$compiler_option', $Compiler_compiler_option$3 = function $$compiler_option(name, config) {
        var $$4, self = this, method_name = nil;

        
        
        if (config == null) {
          config = $hash2([], {});
        };
        method_name = config.$fetch("as", name);
        return $send(self, 'define_method', [method_name], ($$4 = function(){var self = $$4.$$s == null ? this : $$4.$$s;

        return self.$option_value(name, config)}, $$4.$$s = self, $$4.$$arity = 0, $$4));
      }, $Compiler_compiler_option$3.$$arity = -2);
      
      Opal.def(self, '$option_value', $Compiler_option_value$5 = function $$option_value(name, config) {
        var $a, self = this, default_value = nil, valid_values = nil, magic_comment = nil, value = nil, $writer = nil;

        
        if ($truthy(self.option_values['$key?'](name))) {
          return self.option_values['$[]'](name)};
        default_value = config['$[]']("default");
        valid_values = config['$[]']("valid_values");
        magic_comment = config['$[]']("magic_comment");
        value = self.options.$fetch(name, default_value);
        if ($truthy(($truthy($a = magic_comment) ? self.magic_comments['$key?'](name) : $a))) {
          value = self.magic_comments.$fetch(name)};
        if ($truthy(($truthy($a = valid_values) ? valid_values['$include?'](value)['$!']() : $a))) {
          self.$raise($$($nesting, 'ArgumentError'), "" + ("" + "invalid value " + (value.$inspect()) + " for option " + (name.$inspect()) + " ") + ("" + "(valid values: " + (valid_values.$inspect()) + ")"))};
        
        $writer = [name, value];
        $send(self.option_values, '[]=', Opal.to_a($writer));
        return $writer[$rb_minus($writer["length"], 1)];;
      }, $Compiler_option_value$5.$$arity = 2);
      self.$compiler_option("file", $hash2(["default"], {"default": "(file)"}));
      self.$compiler_option("method_missing", $hash2(["default", "as"], {"default": true, "as": "method_missing?"}));
      self.$compiler_option("arity_check", $hash2(["default", "as"], {"default": false, "as": "arity_check?"}));
      self.$compiler_option("freezing", $hash2(["default", "as"], {"default": true, "as": "freezing?"}));
      self.$compiler_option("irb", $hash2(["default", "as"], {"default": false, "as": "irb?"}));
      self.$compiler_option("dynamic_require_severity", $hash2(["default", "valid_values"], {"default": "ignore", "valid_values": ["error", "warning", "ignore"]}));
      self.$compiler_option("requirable", $hash2(["default", "as"], {"default": false, "as": "requirable?"}));
      self.$compiler_option("inline_operators", $hash2(["default", "as"], {"default": true, "as": "inline_operators?"}));
      self.$compiler_option("eval", $hash2(["default", "as"], {"default": false, "as": "eval?"}));
      self.$compiler_option("enable_source_location", $hash2(["default", "as"], {"default": false, "as": "enable_source_location?"}));
      self.$compiler_option("use_strict", $hash2(["default", "as", "magic_comment"], {"default": false, "as": "use_strict?", "magic_comment": true}));
      self.$compiler_option("parse_comments", $hash2(["default", "as"], {"default": false, "as": "parse_comments?"}));
      self.$attr_reader("result");
      self.$attr_reader("fragments");
      self.$attr_accessor("scope");
      self.$attr_reader("case_stmt");
      self.$attr_reader("eof_content");
      self.$attr_reader("comments");
      self.$attr_reader("magic_comments");
      
      Opal.def(self, '$initialize', $Compiler_initialize$6 = function $$initialize(source, options) {
        var self = this;

        
        
        if (options == null) {
          options = $hash2([], {});
        };
        self.source = source;
        self.indent = "";
        self.unique = 0;
        self.options = options;
        self.comments = $$($nesting, 'Hash').$new([]);
        self.case_stmt = nil;
        self.option_values = $hash2([], {});
        return (self.magic_comments = $hash2([], {}));
      }, $Compiler_initialize$6.$$arity = -2);
      
      Opal.def(self, '$compile', $Compiler_compile$7 = function $$compile() {
        var $$8, self = this;

        
        self.$parse();
        self.fragments = $send(self, 're_raise_with_location', [], ($$8 = function(){var self = $$8.$$s == null ? this : $$8.$$s;
          if (self.sexp == null) self.sexp = nil;

        return self.$process(self.sexp).$flatten()}, $$8.$$s = self, $$8.$$arity = 0, $$8));
        if ($truthy(self.fragments.$last().$code()['$end_with?']("\n"))) {
        } else {
          self.fragments['$<<'](self.$fragment("\n", nil, self.$s("newline")))
        };
        return (self.result = $send(self.fragments, 'map', [], "code".$to_proc()).$join(""));
      }, $Compiler_compile$7.$$arity = 0);
      
      Opal.def(self, '$parse', $Compiler_parse$9 = function $$parse() {
        var $a, $b, $$10, self = this, $writer = nil, sexp = nil, comments = nil, tokens = nil;

        
        self.buffer = $$$($$$($$$('::', 'Opal'), 'Parser'), 'SourceBuffer').$new(self.$file(), 1);
        
        $writer = [self.source];
        $send(self.buffer, 'source=', Opal.to_a($writer));
        $writer[$rb_minus($writer["length"], 1)];;
        self.parser = $$$($$($nesting, 'Opal'), 'Parser').$default_parser();
        $b = $send(self, 're_raise_with_location', [], ($$10 = function(){var self = $$10.$$s == null ? this : $$10.$$s;
          if (self.parser == null) self.parser = nil;
          if (self.buffer == null) self.buffer = nil;

        return self.parser.$tokenize(self.buffer)}, $$10.$$s = self, $$10.$$arity = 0, $$10)), $a = Opal.to_ary($b), (sexp = ($a[0] == null ? nil : $a[0])), (comments = ($a[1] == null ? nil : $a[1])), (tokens = ($a[2] == null ? nil : $a[2])), $b;
        self.sexp = self.$s("top", ($truthy($a = sexp) ? $a : self.$s("nil")));
        self.comments = $$$($$$($$$('::', 'Parser'), 'Source'), 'Comment').$associate_locations(sexp, comments);
        self.magic_comments = $$($nesting, 'MagicComments').$parse(sexp, comments);
        return (self.eof_content = $$($nesting, 'EofContent').$new(tokens, self.source).$eof());
      }, $Compiler_parse$9.$$arity = 0);
      
      Opal.def(self, '$source_map', $Compiler_source_map$11 = function $$source_map() {
        var self = this;

        return $$$($$$($$$('::', 'Opal'), 'SourceMap'), 'File').$new(self.fragments, self.$file(), self.source)
      }, $Compiler_source_map$11.$$arity = 0);
      
      Opal.def(self, '$helpers', $Compiler_helpers$12 = function $$helpers() {
        var $a, $$13, self = this;

        return (self.helpers = ($truthy($a = self.helpers) ? $a : $$($nesting, 'Set').$new($send(self.$magic_comments()['$[]']("helpers").$to_s().$split(","), 'map', [], ($$13 = function(h){var self = $$13.$$s == null ? this : $$13.$$s;

        
          
          if (h == null) {
            h = nil;
          };
          return h.$strip().$to_sym();}, $$13.$$s = self, $$13.$$arity = 1, $$13)))))
      }, $Compiler_helpers$12.$$arity = 0);
      
      Opal.def(self, '$operator_helpers', $Compiler_operator_helpers$14 = function $$operator_helpers() {
        var $a, self = this;

        return (self.operator_helpers = ($truthy($a = self.operator_helpers) ? $a : $$($nesting, 'Set').$new()))
      }, $Compiler_operator_helpers$14.$$arity = 0);
      
      Opal.def(self, '$method_calls', $Compiler_method_calls$15 = function $$method_calls() {
        var $a, self = this;

        return (self.method_calls = ($truthy($a = self.method_calls) ? $a : $$($nesting, 'Set').$new()))
      }, $Compiler_method_calls$15.$$arity = 0);
      
      Opal.def(self, '$error', $Compiler_error$16 = function $$error(msg, line) {
        var self = this, error = nil, $writer = nil;

        
        
        if (line == null) {
          line = nil;
        };
        error = $$$($$$('::', 'Opal'), 'SyntaxError').$new(msg);
        
        $writer = [$$$($$($nesting, 'Opal'), 'OpalBacktraceLocation').$new(self.$file(), line)];
        $send(error, 'location=', Opal.to_a($writer));
        $writer[$rb_minus($writer["length"], 1)];;
        return self.$raise(error);
      }, $Compiler_error$16.$$arity = -2);
      
      Opal.def(self, '$re_raise_with_location', $Compiler_re_raise_with_location$17 = function $$re_raise_with_location() {
        var $a, $iter = $Compiler_re_raise_with_location$17.$$p, $yield = $iter || nil, self = this, error = nil, opal_location = nil, $writer = nil, new_error = nil;

        if ($iter) $Compiler_re_raise_with_location$17.$$p = null;
        try {
          return Opal.yieldX($yield, []);
        } catch ($err) {
          if (Opal.rescue($err, [$$($nesting, 'StandardError'), $$$($$$('::', 'Opal'), 'SyntaxError')])) {error = $err;
            try {
              
              opal_location = $$$('::', 'Opal').$opal_location_from_error(error);
              
              $writer = [self.$file()];
              $send(opal_location, 'path=', Opal.to_a($writer));
              $writer[$rb_minus($writer["length"], 1)];;
              ($truthy($a = opal_location.$label()) ? $a : (($writer = [self.source.$lines()['$[]']($rb_minus(opal_location.$line().$to_i(), 1)).$strip()]), $send(opal_location, 'label=', Opal.to_a($writer)), $writer[$rb_minus($writer["length"], 1)]));
              new_error = $$$($$$('::', 'Opal'), 'SyntaxError').$new(error.$message());
              new_error.$set_backtrace(error.$backtrace());
              $$$('::', 'Opal').$add_opal_location_to_error(opal_location, new_error);
              return self.$raise(new_error);
            } finally { Opal.pop_exception() }
          } else { throw $err; }
        }
      }, $Compiler_re_raise_with_location$17.$$arity = 0);
      
      Opal.def(self, '$warning', $Compiler_warning$18 = function $$warning(msg, line) {
        var self = this;

        
        
        if (line == null) {
          line = nil;
        };
        return self.$warn("" + "warning: " + (msg) + " -- " + (self.$file()) + ":" + (line));
      }, $Compiler_warning$18.$$arity = -2);
      
      Opal.def(self, '$parser_indent', $Compiler_parser_indent$19 = function $$parser_indent() {
        var self = this;

        return self.indent
      }, $Compiler_parser_indent$19.$$arity = 0);
      
      Opal.def(self, '$s', $Compiler_s$20 = function $$s(type, $a) {
        var $post_args, children, self = this;

        
        
        $post_args = Opal.slice.call(arguments, 1, arguments.length);
        
        children = $post_args;;
        return $$$($$$($$$('::', 'Opal'), 'AST'), 'Node').$new(type, children);
      }, $Compiler_s$20.$$arity = -2);
      
      Opal.def(self, '$fragment', $Compiler_fragment$21 = function $$fragment(str, scope, sexp) {
        var self = this;

        
        
        if (sexp == null) {
          sexp = nil;
        };
        return $$($nesting, 'Fragment').$new(str, scope, sexp);
      }, $Compiler_fragment$21.$$arity = -3);
      
      Opal.def(self, '$unique_temp', $Compiler_unique_temp$22 = function $$unique_temp(name) {
        var $a, self = this, unique = nil;

        
        name = name.$to_s();
        if ($truthy(($truthy($a = name) ? name['$empty?']()['$!']() : $a))) {
          name = name.$to_s().$gsub("<=>", "$lt_eq_gt").$gsub("===", "$eq_eq_eq").$gsub("==", "$eq_eq").$gsub("=~", "$eq_tilde").$gsub("!~", "$excl_tilde").$gsub("!=", "$not_eq").$gsub("<=", "$lt_eq").$gsub(">=", "$gt_eq").$gsub("=", "$eq").$gsub("?", "$ques").$gsub("!", "$excl").$gsub("/", "$slash").$gsub("%", "$percent").$gsub("+", "$plus").$gsub("-", "$minus").$gsub("<", "$lt").$gsub(">", "$gt").$gsub(/[^\w\$]/, "$")};
        unique = (self.unique = $rb_plus(self.unique, 1));
        return "" + ((function() {if ($truthy(name['$start_with?']("$"))) {
          return nil
        } else {
          return "$"
        }; return nil; })()) + (name) + "$" + (unique);
      }, $Compiler_unique_temp$22.$$arity = 1);
      
      Opal.def(self, '$helper', $Compiler_helper$23 = function $$helper(name) {
        var self = this;

        return self.$helpers()['$<<'](name)
      }, $Compiler_helper$23.$$arity = 1);
      
      Opal.def(self, '$indent', $Compiler_indent$24 = function $$indent() {
        var $iter = $Compiler_indent$24.$$p, $yield = $iter || nil, self = this, indent = nil, res = nil;

        if ($iter) $Compiler_indent$24.$$p = null;
        
        indent = self.indent;
        self.indent = $rb_plus(self.indent, $$($nesting, 'INDENT'));
        self.space = "" + "\n" + (self.indent);
        res = Opal.yieldX($yield, []);
        self.indent = indent;
        self.space = "" + "\n" + (self.indent);
        return res;
      }, $Compiler_indent$24.$$arity = 0);
      
      Opal.def(self, '$with_temp', $Compiler_with_temp$25 = function $$with_temp() {
        var $iter = $Compiler_with_temp$25.$$p, $yield = $iter || nil, self = this, tmp = nil, res = nil;

        if ($iter) $Compiler_with_temp$25.$$p = null;
        
        tmp = self.scope.$new_temp();
        res = Opal.yield1($yield, tmp);
        self.scope.$queue_temp(tmp);
        return res;
      }, $Compiler_with_temp$25.$$arity = 0);
      
      Opal.def(self, '$in_while', $Compiler_in_while$26 = function $$in_while() {
        var $$27, $iter = $Compiler_in_while$26.$$p, $yield = $iter || nil, self = this, result = nil;

        if ($iter) $Compiler_in_while$26.$$p = null;
        
        if (($yield !== nil)) {
        } else {
          return nil
        };
        self.while_loop = self.scope.$push_while();
        result = $send(self, 'indent', [], ($$27 = function(){var self = $$27.$$s == null ? this : $$27.$$s;

        return Opal.yieldX($yield, []);}, $$27.$$s = self, $$27.$$arity = 0, $$27));
        self.scope.$pop_while();
        return result;
      }, $Compiler_in_while$26.$$arity = 0);
      
      Opal.def(self, '$in_case', $Compiler_in_case$28 = function $$in_case() {
        var $iter = $Compiler_in_case$28.$$p, $yield = $iter || nil, self = this, old = nil;

        if ($iter) $Compiler_in_case$28.$$p = null;
        
        if (($yield !== nil)) {
        } else {
          return nil
        };
        old = self.case_stmt;
        self.case_stmt = $hash2([], {});
        Opal.yieldX($yield, []);
        return (self.case_stmt = old);
      }, $Compiler_in_case$28.$$arity = 0);
      
      Opal.def(self, '$in_while?', $Compiler_in_while$ques$29 = function() {
        var self = this;

        return self.scope['$in_while?']()
      }, $Compiler_in_while$ques$29.$$arity = 0);
      
      Opal.def(self, '$process', $Compiler_process$30 = function $$process(sexp, level) {
        var self = this, handler = nil;

        
        
        if (level == null) {
          level = "expr";
        };
        if ($truthy(sexp['$nil?']())) {
          return self.$fragment("", self.$scope())};
        if ($truthy((handler = self.$handlers()['$[]'](sexp.$type())))) {
          return handler.$new(sexp, level, self).$compile_to_fragments()
        } else {
          return self.$error("" + "Unsupported sexp: " + (sexp.$type()))
        };
      }, $Compiler_process$30.$$arity = -2);
      
      Opal.def(self, '$handlers', $Compiler_handlers$31 = function $$handlers() {
        var $a, self = this;

        return (self.handlers = ($truthy($a = self.handlers) ? $a : $$$($$$($$($nesting, 'Opal'), 'Nodes'), 'Base').$handlers()))
      }, $Compiler_handlers$31.$$arity = 0);
      
      Opal.def(self, '$requires', $Compiler_requires$32 = function $$requires() {
        var $a, self = this;

        return (self.requires = ($truthy($a = self.requires) ? $a : []))
      }, $Compiler_requires$32.$$arity = 0);
      
      Opal.def(self, '$required_trees', $Compiler_required_trees$33 = function $$required_trees() {
        var $a, self = this;

        return (self.required_trees = ($truthy($a = self.required_trees) ? $a : []))
      }, $Compiler_required_trees$33.$$arity = 0);
      
      Opal.def(self, '$returns', $Compiler_returns$34 = function $$returns(sexp) {
        var $a, $b, $$35, self = this, $case = nil, when_sexp = nil, then_sexp = nil, body_sexp = nil, resbodies = nil, else_sexp = nil, klass = nil, lvar = nil, body = nil, rescue_sexp = nil, ensure_body = nil, rest = nil, last = nil, cond = nil, true_body = nil, false_body = nil;

        
        if ($truthy(sexp)) {
        } else {
          return self.$returns(self.$s("nil"))
        };
        return (function() {$case = sexp.$type();
        if ("undef"['$===']($case)) {return self.$returns(self.$s("begin", sexp, self.$s("nil")))}
        else if ("break"['$===']($case) || "next"['$===']($case) || "redo"['$===']($case)) {return sexp}
        else if ("yield"['$===']($case)) {return sexp.$updated("returnable_yield", nil)}
        else if ("when"['$===']($case)) {
        $a = [].concat(Opal.to_a(sexp)), $b = $a.length - 1, $b = ($b < 0) ? 0 : $b, (when_sexp = $slice.call($a, 0, $b)), (then_sexp = ($a[$b] == null ? nil : $a[$b])), $a;
        return sexp.$updated(nil, [].concat(Opal.to_a(when_sexp)).concat([self.$returns(then_sexp)]));}
        else if ("rescue"['$===']($case)) {
        $a = [].concat(Opal.to_a(sexp)), (body_sexp = ($a[0] == null ? nil : $a[0])), $b = $a.length - 1, $b = ($b < 1) ? 1 : $b, (resbodies = $slice.call($a, 1, $b)), (else_sexp = ($a[$b] == null ? nil : $a[$b])), $a;
        resbodies = $send(resbodies, 'map', [], ($$35 = function(resbody){var self = $$35.$$s == null ? this : $$35.$$s;

        
          
          if (resbody == null) {
            resbody = nil;
          };
          return self.$returns(resbody);}, $$35.$$s = self, $$35.$$arity = 1, $$35));
        if ($truthy(else_sexp)) {
          else_sexp = self.$returns(else_sexp)};
        return sexp.$updated(nil, [self.$returns(body_sexp)].concat(Opal.to_a(resbodies)).concat([else_sexp]));}
        else if ("resbody"['$===']($case)) {
        $a = [].concat(Opal.to_a(sexp)), (klass = ($a[0] == null ? nil : $a[0])), (lvar = ($a[1] == null ? nil : $a[1])), (body = ($a[2] == null ? nil : $a[2])), $a;
        return sexp.$updated(nil, [klass, lvar, self.$returns(body)]);}
        else if ("ensure"['$===']($case)) {
        $a = [].concat(Opal.to_a(sexp)), (rescue_sexp = ($a[0] == null ? nil : $a[0])), (ensure_body = ($a[1] == null ? nil : $a[1])), $a;
        sexp = sexp.$updated(nil, [self.$returns(rescue_sexp), ensure_body]);
        return self.$s("js_return", sexp);}
        else if ("begin"['$===']($case) || "kwbegin"['$===']($case)) {
        $a = [].concat(Opal.to_a(sexp)), $b = $a.length - 1, $b = ($b < 0) ? 0 : $b, (rest = $slice.call($a, 0, $b)), (last = ($a[$b] == null ? nil : $a[$b])), $a;
        return sexp.$updated(nil, [].concat(Opal.to_a(rest)).concat([self.$returns(last)]));}
        else if ("while"['$===']($case) || "until"['$===']($case) || "while_post"['$===']($case) || "until_post"['$===']($case)) {return sexp}
        else if ("return"['$===']($case) || "js_return"['$===']($case) || "returnable_yield"['$===']($case)) {return sexp}
        else if ("xstr"['$===']($case)) {return sexp.$updated(nil, [$send(self, 's', ["js_return"].concat(Opal.to_a(sexp.$children())))])}
        else if ("if"['$===']($case)) {
        $a = [].concat(Opal.to_a(sexp)), (cond = ($a[0] == null ? nil : $a[0])), (true_body = ($a[1] == null ? nil : $a[1])), (false_body = ($a[2] == null ? nil : $a[2])), $a;
        return sexp.$updated(nil, [cond, self.$returns(true_body), self.$returns(false_body)]);}
        else {return self.$s("js_return", sexp).$updated(nil, nil, $hash2(["location"], {"location": sexp.$loc()}))}})();
      }, $Compiler_returns$34.$$arity = 1);
      return (Opal.def(self, '$handle_block_given_call', $Compiler_handle_block_given_call$36 = function $$handle_block_given_call(sexp) {
        var $a, self = this, scope = nil;

        
        self.scope['$uses_block!']();
        if ($truthy(self.scope.$block_name())) {
          return self.$fragment("" + "(" + (self.scope.$block_name()) + " !== nil)", self.$scope(), sexp)
        } else if ($truthy(($truthy($a = (scope = self.scope.$find_parent_def())) ? scope.$block_name() : $a))) {
          return self.$fragment("" + "(" + (scope.$block_name()) + " !== nil)", scope, sexp)
        } else {
          return self.$fragment("false", scope, sexp)
        };
      }, $Compiler_handle_block_given_call$36.$$arity = 1), nil) && 'handle_block_given_call';
    })($nesting[0], null, $nesting);
  })($nesting[0], $nesting);
};

/* Generated by Opal 1.0.0 */
Opal.modules["opal/erb"] = function(Opal) {
  function $rb_plus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs + rhs : lhs['$+'](rhs);
  }
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.$$$, $$ = Opal.$$, $module = Opal.module, $klass = Opal.klass, $truthy = Opal.truthy, $send = Opal.send;

  Opal.add_stubs(['$require', '$compile', '$new', '$freeze', '$fix_quotes', '$find_contents', '$find_code', '$wrap_compiled', '$require_erb', '$prepared_source', '$gsub', '$+', '$last_match', '$=~', '$sub']);
  
  self.$require("opal/compiler");
  return (function($base, $parent_nesting) {
    var self = $module($base, 'Opal');

    var $nesting = [self].concat($parent_nesting);

    (function($base, $parent_nesting) {
      var self = $module($base, 'ERB');

      var $nesting = [self].concat($parent_nesting), $ERB_compile$1;

      
      Opal.defs(self, '$compile', $ERB_compile$1 = function $$compile(source, file_name) {
        var self = this;

        
        
        if (file_name == null) {
          file_name = "(erb)";
        };
        return $$($nesting, 'Compiler').$new(source, file_name).$compile();
      }, $ERB_compile$1.$$arity = -2);
      (function($base, $super, $parent_nesting) {
        var self = $klass($base, $super, 'Compiler');

        var $nesting = [self].concat($parent_nesting), $Compiler_initialize$2, $Compiler_prepared_source$3, $Compiler_compile$4, $Compiler_fix_quotes$5, $Compiler_require_erb$6, $Compiler_find_contents$7, $Compiler_find_code$9, $Compiler_wrap_compiled$11;

        self.$$prototype.prepared_source = self.$$prototype.source = self.$$prototype.file_name = nil;
        
        Opal.const_set($nesting[0], 'BLOCK_EXPR', /\s+(do|\{)(\s*\|[^|]*\|)?\s*\Z/.$freeze());
        
        Opal.def(self, '$initialize', $Compiler_initialize$2 = function $$initialize(source, file_name) {
          var $a, self = this;

          
          
          if (file_name == null) {
            file_name = "(erb)";
          };
          return $a = [source, file_name, source], (self.source = $a[0]), (self.file_name = $a[1]), (self.result = $a[2]), $a;
        }, $Compiler_initialize$2.$$arity = -2);
        
        Opal.def(self, '$prepared_source', $Compiler_prepared_source$3 = function $$prepared_source() {
          var $a, self = this, source = nil;

          return (self.prepared_source = ($truthy($a = self.prepared_source) ? $a : ((source = self.source), (source = self.$fix_quotes(source)), (source = self.$find_contents(source)), (source = self.$find_code(source)), (source = self.$wrap_compiled(source)), (source = self.$require_erb(source)), source)))
        }, $Compiler_prepared_source$3.$$arity = 0);
        
        Opal.def(self, '$compile', $Compiler_compile$4 = function $$compile() {
          var self = this;

          return $$($nesting, 'Opal').$compile(self.$prepared_source())
        }, $Compiler_compile$4.$$arity = 0);
        
        Opal.def(self, '$fix_quotes', $Compiler_fix_quotes$5 = function $$fix_quotes(result) {
          var self = this;

          return result.$gsub("\"", "\\\"")
        }, $Compiler_fix_quotes$5.$$arity = 1);
        
        Opal.def(self, '$require_erb', $Compiler_require_erb$6 = function $$require_erb(result) {
          var self = this;

          return $rb_plus("require \"erb\";", result)
        }, $Compiler_require_erb$6.$$arity = 1);
        
        Opal.def(self, '$find_contents', $Compiler_find_contents$7 = function $$find_contents(result) {
          var $$8, self = this;

          return $send(result, 'gsub', [/<%=([\s\S]+?)%>/], ($$8 = function(){var self = $$8.$$s == null ? this : $$8.$$s, inner = nil;

          
            inner = $$($nesting, 'Regexp').$last_match(1).$gsub(/\\'/, "'").$gsub(/\\"/, "\"");
            if ($truthy(inner['$=~']($$($nesting, 'BLOCK_EXPR')))) {
              return "" + "\")\noutput_buffer.append= " + (inner) + "\noutput_buffer.append(\""
            } else {
              return "" + "\")\noutput_buffer.append=(" + (inner) + ")\noutput_buffer.append(\""
            };}, $$8.$$s = self, $$8.$$arity = 0, $$8))
        }, $Compiler_find_contents$7.$$arity = 1);
        
        Opal.def(self, '$find_code', $Compiler_find_code$9 = function $$find_code(result) {
          var $$10, self = this;

          return $send(result, 'gsub', [/<%([\s\S]+?)%>/], ($$10 = function(){var self = $$10.$$s == null ? this : $$10.$$s, inner = nil;

          
            inner = $$($nesting, 'Regexp').$last_match(1).$gsub(/\\"/, "\"");
            return "" + "\")\n" + (inner) + "\noutput_buffer.append(\"";}, $$10.$$s = self, $$10.$$arity = 0, $$10))
        }, $Compiler_find_code$9.$$arity = 1);
        return (Opal.def(self, '$wrap_compiled', $Compiler_wrap_compiled$11 = function $$wrap_compiled(result) {
          var self = this, path = nil;

          
          path = self.file_name.$sub(Opal.regexp(["\\.opalerb", $$($nesting, 'REGEXP_END')]), "");
          return "" + "Template.new('" + (path) + "') do |output_buffer|\noutput_buffer.append(\"" + (result) + "\")\noutput_buffer.join\nend\n";
        }, $Compiler_wrap_compiled$11.$$arity = 1), nil) && 'wrap_compiled';
      })($nesting[0], null, $nesting);
    })($nesting[0], $nesting)
  })($nesting[0], $nesting);
};

/* Generated by Opal 1.0.0 */
(function(Opal) {
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.$$$, $$ = Opal.$$, $module = Opal.module, $hash2 = Opal.hash2;

  Opal.add_stubs(['$require', '$coerce_to!', '$merge', '$compile', '$eval']);
  
  self.$require("corelib/string/unpack");
  self.$require("opal/compiler");
  self.$require("opal/erb");
  self.$require("opal/version");
  (function($base, $parent_nesting) {
    var self = $module($base, 'Kernel');

    var $nesting = [self].concat($parent_nesting), $Kernel_eval$1, $Kernel_require_remote$2;

    
    
    Opal.def(self, '$eval', $Kernel_eval$1 = function(str) {
      var self = this, default_eval_options = nil, compiling_options = nil, code = nil;

      
      str = $$($nesting, 'Opal')['$coerce_to!'](str, $$($nesting, 'String'), "to_str");
      default_eval_options = $hash2(["file", "eval"], {"file": "(eval)", "eval": true});
      compiling_options = Opal.hash({ arity_check: false }).$merge(default_eval_options);
      code = $$($nesting, 'Opal').$compile(str, compiling_options);
      
      return (function(self) {
        return eval(code);
      })(self)
    ;
    }, $Kernel_eval$1.$$arity = 1);
    
    Opal.def(self, '$require_remote', $Kernel_require_remote$2 = function $$require_remote(url) {
      var self = this;

      
      
      var r = new XMLHttpRequest();
      r.open("GET", url, false);
      r.send('');
    ;
      return self.$eval(r.responseText);
    }, $Kernel_require_remote$2.$$arity = 1);
  })($nesting[0], $nesting);
  
  Opal.compile = function(str, options) {
    if (options) {
      options = Opal.hash(options);
    }
    return Opal.Opal.$compile(str, options);
  };

  Opal['eval'] = function(str, options) {
   return eval(Opal.compile(str, options));
  };

  function run_ruby_scripts() {
    var tag, tags = document.getElementsByTagName('script');

    for (var i = 0, len = tags.length; i < len; i++) {
      tag = tags[i];
      if (tag.type === "text/ruby") {
        if (tag.src)       Opal.Kernel.$require_remote(tag.src);
        if (tag.innerHTML) Opal.Kernel.$eval(tag.innerHTML);
      }
    }
  }

  if (typeof(document) !== 'undefined') {
    if (window.addEventListener) {
      window.addEventListener('DOMContentLoaded', run_ruby_scripts, false);
    }
    else {
      window.attachEvent('onload', run_ruby_scripts);
    }
  }
;
})(Opal);

/* Generated by Opal 1.0.0 */
(function(Opal) {
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.$$$, $$ = Opal.$$;

  Opal.add_stubs(['$print']);
  return self.$print(".")
})(Opal);

/* Generated by Opal 1.0.0 */
(function(Opal) {
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.$$$, $$ = Opal.$$;

  Opal.add_stubs(['$exit']);
  return $$($nesting, 'Kernel').$exit()
})(Opal);

